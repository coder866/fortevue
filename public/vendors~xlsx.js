(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~xlsx"],{

/***/ "./node_modules/xlsx/dist/cpexcel.js":
/*!*******************************************!*\
  !*** ./node_modules/xlsx/dist/cpexcel.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer) {/*! cpexcel.js (C) 2013-present SheetJS -- http://sheetjs.com */\n/*jshint -W100 */\nvar cptable = {version:\"1.15.0\"};\ncptable[437] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[620] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàąçêëèïîćÄĄĘęłôöĆûùŚÖÜ¢Ł¥śƒŹŻóÓńŃźż¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[737] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ \", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[850] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ \", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[852] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ \", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[857] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ \", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[861] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[865] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[866] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ \", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[874] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[895] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ČüéďäĎŤčěĚĹÍľǪÄÁÉžŽôöÓůÚýÖÜŠĽÝŘťáíóúňŇŮÔšřŕŔ¼§«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[932] = (function(){ var d = [], e = {}, D = [], j;\nD[0] = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~���������������������������������｡｢｣､･ｦｧｨｩｪｫｬｭｮｯｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾞﾟ��������������������������������\".split(\"\");\nfor(j = 0; j != D[0].length; ++j) if(D[0][j].charCodeAt(0) !== 0xFFFD) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j];}\nD[129] = \"����������������������������������������������������������������　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈〉《》「」『』【】＋－±×�÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓�����������∈∋⊆⊇⊂⊃∪∩��������∧∨￢⇒⇔∀∃�����������∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬�������Å‰♯♭♪†‡¶����◯���\".split(\"\");\nfor(j = 0; j != D[129].length; ++j) if(D[129][j].charCodeAt(0) !== 0xFFFD) { e[D[129][j]] = 33024 + j; d[33024 + j] = D[129][j];}\nD[130] = \"�������������������������������������������������������������������������������０１２３４５６７８９�������ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ�������ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ����ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん��������������\".split(\"\");\nfor(j = 0; j != D[130].length; ++j) if(D[130][j].charCodeAt(0) !== 0xFFFD) { e[D[130][j]] = 33280 + j; d[33280 + j] = D[130][j];}\nD[131] = \"����������������������������������������������������������������ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミ�ムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶ��������ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ��������αβγδεζηθικλμνξοπρστυφχψω�����������������������������������������\".split(\"\");\nfor(j = 0; j != D[131].length; ++j) if(D[131][j].charCodeAt(0) !== 0xFFFD) { e[D[131][j]] = 33536 + j; d[33536 + j] = D[131][j];}\nD[132] = \"����������������������������������������������������������������АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ���������������абвгдеёжзийклмн�опрстуфхцчшщъыьэюя�������������─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂�����������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[132].length; ++j) if(D[132][j].charCodeAt(0) !== 0xFFFD) { e[D[132][j]] = 33792 + j; d[33792 + j] = D[132][j];}\nD[135] = \"����������������������������������������������������������������①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮⑯⑰⑱⑲⑳ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩ�㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡��������㍻�〝〟№㏍℡㊤㊥㊦㊧㊨㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪���������������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[135].length; ++j) if(D[135][j].charCodeAt(0) !== 0xFFFD) { e[D[135][j]] = 34560 + j; d[34560 + j] = D[135][j];}\nD[136] = \"���������������������������������������������������������������������������������������������������������������������������������������������������������������亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭���\".split(\"\");\nfor(j = 0; j != D[136].length; ++j) if(D[136][j].charCodeAt(0) !== 0xFFFD) { e[D[136][j]] = 34816 + j; d[34816 + j] = D[136][j];}\nD[137] = \"����������������������������������������������������������������院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円�園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改���\".split(\"\");\nfor(j = 0; j != D[137].length; ++j) if(D[137][j].charCodeAt(0) !== 0xFFFD) { e[D[137][j]] = 35072 + j; d[35072 + j] = D[137][j];}\nD[138] = \"����������������������������������������������������������������魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫�橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄���\".split(\"\");\nfor(j = 0; j != D[138].length; ++j) if(D[138][j].charCodeAt(0) !== 0xFFFD) { e[D[138][j]] = 35328 + j; d[35328 + j] = D[138][j];}\nD[139] = \"����������������������������������������������������������������機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救�朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈���\".split(\"\");\nfor(j = 0; j != D[139].length; ++j) if(D[139][j].charCodeAt(0) !== 0xFFFD) { e[D[139][j]] = 35584 + j; d[35584 + j] = D[139][j];}\nD[140] = \"����������������������������������������������������������������掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨�劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向���\".split(\"\");\nfor(j = 0; j != D[140].length; ++j) if(D[140][j].charCodeAt(0) !== 0xFFFD) { e[D[140][j]] = 35840 + j; d[35840 + j] = D[140][j];}\nD[141] = \"����������������������������������������������������������������后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降�項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷���\".split(\"\");\nfor(j = 0; j != D[141].length; ++j) if(D[141][j].charCodeAt(0) !== 0xFFFD) { e[D[141][j]] = 36096 + j; d[36096 + j] = D[141][j];}\nD[142] = \"����������������������������������������������������������������察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止�死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周���\".split(\"\");\nfor(j = 0; j != D[142].length; ++j) if(D[142][j].charCodeAt(0) !== 0xFFFD) { e[D[142][j]] = 36352 + j; d[36352 + j] = D[142][j];}\nD[143] = \"����������������������������������������������������������������宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳�準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾���\".split(\"\");\nfor(j = 0; j != D[143].length; ++j) if(D[143][j].charCodeAt(0) !== 0xFFFD) { e[D[143][j]] = 36608 + j; d[36608 + j] = D[143][j];}\nD[144] = \"����������������������������������������������������������������拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨�逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線���\".split(\"\");\nfor(j = 0; j != D[144].length; ++j) if(D[144][j].charCodeAt(0) !== 0xFFFD) { e[D[144][j]] = 36864 + j; d[36864 + j] = D[144][j];}\nD[145] = \"����������������������������������������������������������������繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻�操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只���\".split(\"\");\nfor(j = 0; j != D[145].length; ++j) if(D[145][j].charCodeAt(0) !== 0xFFFD) { e[D[145][j]] = 37120 + j; d[37120 + j] = D[145][j];}\nD[146] = \"����������������������������������������������������������������叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄�逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓���\".split(\"\");\nfor(j = 0; j != D[146].length; ++j) if(D[146][j].charCodeAt(0) !== 0xFFFD) { e[D[146][j]] = 37376 + j; d[37376 + j] = D[146][j];}\nD[147] = \"����������������������������������������������������������������邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬�凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入���\".split(\"\");\nfor(j = 0; j != D[147].length; ++j) if(D[147][j].charCodeAt(0) !== 0xFFFD) { e[D[147][j]] = 37632 + j; d[37632 + j] = D[147][j];}\nD[148] = \"����������������������������������������������������������������如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅�楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美���\".split(\"\");\nfor(j = 0; j != D[148].length; ++j) if(D[148][j].charCodeAt(0) !== 0xFFFD) { e[D[148][j]] = 37888 + j; d[37888 + j] = D[148][j];}\nD[149] = \"����������������������������������������������������������������鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷�斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋���\".split(\"\");\nfor(j = 0; j != D[149].length; ++j) if(D[149][j].charCodeAt(0) !== 0xFFFD) { e[D[149][j]] = 38144 + j; d[38144 + j] = D[149][j];}\nD[150] = \"����������������������������������������������������������������法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆�摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒���\".split(\"\");\nfor(j = 0; j != D[150].length; ++j) if(D[150][j].charCodeAt(0) !== 0xFFFD) { e[D[150][j]] = 38400 + j; d[38400 + j] = D[150][j];}\nD[151] = \"����������������������������������������������������������������諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲�沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯���\".split(\"\");\nfor(j = 0; j != D[151].length; ++j) if(D[151][j].charCodeAt(0) !== 0xFFFD) { e[D[151][j]] = 38656 + j; d[38656 + j] = D[151][j];}\nD[152] = \"����������������������������������������������������������������蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕��������������������������������������������弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲���\".split(\"\");\nfor(j = 0; j != D[152].length; ++j) if(D[152][j].charCodeAt(0) !== 0xFFFD) { e[D[152][j]] = 38912 + j; d[38912 + j] = D[152][j];}\nD[153] = \"����������������������������������������������������������������僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭�凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨���\".split(\"\");\nfor(j = 0; j != D[153].length; ++j) if(D[153][j].charCodeAt(0) !== 0xFFFD) { e[D[153][j]] = 39168 + j; d[39168 + j] = D[153][j];}\nD[154] = \"����������������������������������������������������������������咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸�噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩���\".split(\"\");\nfor(j = 0; j != D[154].length; ++j) if(D[154][j].charCodeAt(0) !== 0xFFFD) { e[D[154][j]] = 39424 + j; d[39424 + j] = D[154][j];}\nD[155] = \"����������������������������������������������������������������奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀�它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏���\".split(\"\");\nfor(j = 0; j != D[155].length; ++j) if(D[155][j].charCodeAt(0) !== 0xFFFD) { e[D[155][j]] = 39680 + j; d[39680 + j] = D[155][j];}\nD[156] = \"����������������������������������������������������������������廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠�怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛���\".split(\"\");\nfor(j = 0; j != D[156].length; ++j) if(D[156][j].charCodeAt(0) !== 0xFFFD) { e[D[156][j]] = 39936 + j; d[39936 + j] = D[156][j];}\nD[157] = \"����������������������������������������������������������������戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫�捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼���\".split(\"\");\nfor(j = 0; j != D[157].length; ++j) if(D[157][j].charCodeAt(0) !== 0xFFFD) { e[D[157][j]] = 40192 + j; d[40192 + j] = D[157][j];}\nD[158] = \"����������������������������������������������������������������曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎�梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣���\".split(\"\");\nfor(j = 0; j != D[158].length; ++j) if(D[158][j].charCodeAt(0) !== 0xFFFD) { e[D[158][j]] = 40448 + j; d[40448 + j] = D[158][j];}\nD[159] = \"����������������������������������������������������������������檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯�麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌���\".split(\"\");\nfor(j = 0; j != D[159].length; ++j) if(D[159][j].charCodeAt(0) !== 0xFFFD) { e[D[159][j]] = 40704 + j; d[40704 + j] = D[159][j];}\nD[224] = \"����������������������������������������������������������������漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝�烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱���\".split(\"\");\nfor(j = 0; j != D[224].length; ++j) if(D[224][j].charCodeAt(0) !== 0xFFFD) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j];}\nD[225] = \"����������������������������������������������������������������瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿�痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬���\".split(\"\");\nfor(j = 0; j != D[225].length; ++j) if(D[225][j].charCodeAt(0) !== 0xFFFD) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j];}\nD[226] = \"����������������������������������������������������������������磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰�窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆���\".split(\"\");\nfor(j = 0; j != D[226].length; ++j) if(D[226][j].charCodeAt(0) !== 0xFFFD) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j];}\nD[227] = \"����������������������������������������������������������������紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷�縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋���\".split(\"\");\nfor(j = 0; j != D[227].length; ++j) if(D[227][j].charCodeAt(0) !== 0xFFFD) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j];}\nD[228] = \"����������������������������������������������������������������隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤�艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈���\".split(\"\");\nfor(j = 0; j != D[228].length; ++j) if(D[228][j].charCodeAt(0) !== 0xFFFD) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j];}\nD[229] = \"����������������������������������������������������������������蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬�蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞���\".split(\"\");\nfor(j = 0; j != D[229].length; ++j) if(D[229][j].charCodeAt(0) !== 0xFFFD) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j];}\nD[230] = \"����������������������������������������������������������������襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧�諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊���\".split(\"\");\nfor(j = 0; j != D[230].length; ++j) if(D[230][j].charCodeAt(0) !== 0xFFFD) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j];}\nD[231] = \"����������������������������������������������������������������蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜�轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮���\".split(\"\");\nfor(j = 0; j != D[231].length; ++j) if(D[231][j].charCodeAt(0) !== 0xFFFD) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j];}\nD[232] = \"����������������������������������������������������������������錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙�閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰���\".split(\"\");\nfor(j = 0; j != D[232].length; ++j) if(D[232][j].charCodeAt(0) !== 0xFFFD) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j];}\nD[233] = \"����������������������������������������������������������������顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃�騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈���\".split(\"\");\nfor(j = 0; j != D[233].length; ++j) if(D[233][j].charCodeAt(0) !== 0xFFFD) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j];}\nD[234] = \"����������������������������������������������������������������鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯�黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙�������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[234].length; ++j) if(D[234][j].charCodeAt(0) !== 0xFFFD) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j];}\nD[237] = \"����������������������������������������������������������������纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏�塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱���\".split(\"\");\nfor(j = 0; j != D[237].length; ++j) if(D[237][j].charCodeAt(0) !== 0xFFFD) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j];}\nD[238] = \"����������������������������������������������������������������犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙�蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑��ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹ￢￤＇＂���\".split(\"\");\nfor(j = 0; j != D[238].length; ++j) if(D[238][j].charCodeAt(0) !== 0xFFFD) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j];}\nD[250] = \"����������������������������������������������������������������ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩ￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊�兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯���\".split(\"\");\nfor(j = 0; j != D[250].length; ++j) if(D[250][j].charCodeAt(0) !== 0xFFFD) { e[D[250][j]] = 64000 + j; d[64000 + j] = D[250][j];}\nD[251] = \"����������������������������������������������������������������涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神�祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙���\".split(\"\");\nfor(j = 0; j != D[251].length; ++j) if(D[251][j].charCodeAt(0) !== 0xFFFD) { e[D[251][j]] = 64256 + j; d[64256 + j] = D[251][j];}\nD[252] = \"����������������������������������������������������������������髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[252].length; ++j) if(D[252][j].charCodeAt(0) !== 0xFFFD) { e[D[252][j]] = 64512 + j; d[64512 + j] = D[252][j];}\nreturn {\"enc\": e, \"dec\": d }; })();\ncptable[936] = (function(){ var d = [], e = {}, D = [], j;\nD[0] = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�������������������������������������������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[0].length; ++j) if(D[0][j].charCodeAt(0) !== 0xFFFD) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j];}\nD[129] = \"����������������������������������������������������������������丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪乫乬乭乮乯乲乴乵乶乷乸乹乺乻乼乽乿亀亁亂亃亄亅亇亊�亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂伃伄伅伆伇伈伋伌伒伓伔伕伖伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾伿佀佁佂佄佅佇佈佉佊佋佌佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢�\".split(\"\");\nfor(j = 0; j != D[129].length; ++j) if(D[129][j].charCodeAt(0) !== 0xFFFD) { e[D[129][j]] = 33024 + j; d[33024 + j] = D[129][j];}\nD[130] = \"����������������������������������������������������������������侤侫侭侰侱侲侳侴侶侷侸侹侺侻侼侽侾俀俁係俆俇俈俉俋俌俍俒俓俔俕俖俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿倀倁倂倃倄倅倆倇倈倉倊�個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯倰倱倲倳倴倵倶倷倸倹倻倽倿偀偁偂偄偅偆偉偊偋偍偐偑偒偓偔偖偗偘偙偛偝偞偟偠偡偢偣偤偦偧偨偩偪偫偭偮偯偰偱偲偳側偵偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎傏傐傑傒傓傔傕傖傗傘備傚傛傜傝傞傟傠傡傢傤傦傪傫傭傮傯傰傱傳傴債傶傷傸傹傼�\".split(\"\");\nfor(j = 0; j != D[130].length; ++j) if(D[130][j].charCodeAt(0) !== 0xFFFD) { e[D[130][j]] = 33280 + j; d[33280 + j] = D[130][j];}\nD[131] = \"����������������������������������������������������������������傽傾傿僀僁僂僃僄僅僆僇僈僉僊僋僌働僎僐僑僒僓僔僕僗僘僙僛僜僝僞僟僠僡僢僣僤僥僨僩僪僫僯僰僱僲僴僶僷僸價僺僼僽僾僿儀儁儂儃億儅儈�儉儊儌儍儎儏儐儑儓儔儕儖儗儘儙儚儛儜儝儞償儠儢儣儤儥儦儧儨儩優儫儬儭儮儯儰儱儲儳儴儵儶儷儸儹儺儻儼儽儾兂兇兊兌兎兏児兒兓兗兘兙兛兝兞兟兠兡兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦冧冨冩冪冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒凓凔凕凖凗�\".split(\"\");\nfor(j = 0; j != D[131].length; ++j) if(D[131][j].charCodeAt(0) !== 0xFFFD) { e[D[131][j]] = 33536 + j; d[33536 + j] = D[131][j];}\nD[132] = \"����������������������������������������������������������������凘凙凚凜凞凟凢凣凥処凧凨凩凪凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄剅剆則剈剉剋剎剏剒剓剕剗剘�剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳剴創剶剷剸剹剺剻剼剾劀劃劄劅劆劇劉劊劋劌劍劎劏劑劒劔劕劖劗劘劙劚劜劤劥劦劧劮劯劰労劵劶劷劸効劺劻劼劽勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務勚勛勜勝勞勠勡勢勣勥勦勧勨勩勪勫勬勭勮勯勱勲勳勴勵勶勷勸勻勼勽匁匂匃匄匇匉匊匋匌匎�\".split(\"\");\nfor(j = 0; j != D[132].length; ++j) if(D[132][j].charCodeAt(0) !== 0xFFFD) { e[D[132][j]] = 33792 + j; d[33792 + j] = D[132][j];}\nD[133] = \"����������������������������������������������������������������匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯匰匱匲匳匴匵匶匷匸匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏�厐厑厒厓厔厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯厰厱厲厳厴厵厷厸厹厺厼厽厾叀參叄叅叆叇収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝呞呟呠呡呣呥呧呩呪呫呬呭呮呯呰呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡�\".split(\"\");\nfor(j = 0; j != D[133].length; ++j) if(D[133][j].charCodeAt(0) !== 0xFFFD) { e[D[133][j]] = 34048 + j; d[34048 + j] = D[133][j];}\nD[134] = \"����������������������������������������������������������������咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠員哢哣哤哫哬哯哰哱哴哵哶哷哸哹哻哾唀唂唃唄唅唈唊唋唌唍唎唒唓唕唖唗唘唙唚唜唝唞唟唡唥唦�唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋啌啍啎問啑啒啓啔啗啘啙啚啛啝啞啟啠啢啣啨啩啫啯啰啱啲啳啴啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠喡喢喣喤喥喦喨喩喪喫喬喭單喯喰喲喴営喸喺喼喿嗀嗁嗂嗃嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗嗘嗙嗚嗛嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸嗹嗺嗻嗼嗿嘂嘃嘄嘅�\".split(\"\");\nfor(j = 0; j != D[134].length; ++j) if(D[134][j].charCodeAt(0) !== 0xFFFD) { e[D[134][j]] = 34304 + j; d[34304 + j] = D[134][j];}\nD[135] = \"����������������������������������������������������������������嘆嘇嘊嘋嘍嘐嘑嘒嘓嘔嘕嘖嘗嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀噁噂噃噄噅噆噇噈噉噊噋噏噐噑噒噓噕噖噚噛噝噞噟噠噡�噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽噾噿嚀嚁嚂嚃嚄嚇嚈嚉嚊嚋嚌嚍嚐嚑嚒嚔嚕嚖嚗嚘嚙嚚嚛嚜嚝嚞嚟嚠嚡嚢嚤嚥嚦嚧嚨嚩嚪嚫嚬嚭嚮嚰嚱嚲嚳嚴嚵嚶嚸嚹嚺嚻嚽嚾嚿囀囁囂囃囄囅囆囇囈囉囋囌囍囎囏囐囑囒囓囕囖囘囙囜団囥囦囧囨囩囪囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國圌圍圎圏圐圑�\".split(\"\");\nfor(j = 0; j != D[135].length; ++j) if(D[135][j].charCodeAt(0) !== 0xFFFD) { e[D[135][j]] = 34560 + j; d[34560 + j] = D[135][j];}\nD[136] = \"����������������������������������������������������������������園圓圔圕圖圗團圙圚圛圝圞圠圡圢圤圥圦圧圫圱圲圴圵圶圷圸圼圽圿坁坃坄坅坆坈坉坋坒坓坔坕坖坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀�垁垇垈垉垊垍垎垏垐垑垔垕垖垗垘垙垚垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹垺垻垼垽垾垿埀埁埄埅埆埇埈埉埊埌埍埐埑埓埖埗埛埜埞埡埢埣埥埦埧埨埩埪埫埬埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥堦堧堨堩堫堬堭堮堯報堲堳場堶堷堸堹堺堻堼堽�\".split(\"\");\nfor(j = 0; j != D[136].length; ++j) if(D[136][j].charCodeAt(0) !== 0xFFFD) { e[D[136][j]] = 34816 + j; d[34816 + j] = D[136][j];}\nD[137] = \"����������������������������������������������������������������堾堿塀塁塂塃塅塆塇塈塉塊塋塎塏塐塒塓塕塖塗塙塚塛塜塝塟塠塡塢塣塤塦塧塨塩塪塭塮塯塰塱塲塳塴塵塶塷塸塹塺塻塼塽塿墂墄墆墇墈墊墋墌�墍墎墏墐墑墔墕墖増墘墛墜墝墠墡墢墣墤墥墦墧墪墫墬墭墮墯墰墱墲墳墴墵墶墷墸墹墺墻墽墾墿壀壂壃壄壆壇壈壉壊壋壌壍壎壏壐壒壓壔壖壗壘壙壚壛壜壝壞壟壠壡壢壣壥壦壧壨壩壪壭壯壱売壴壵壷壸壺壻壼壽壾壿夀夁夃夅夆夈変夊夋夌夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻�\".split(\"\");\nfor(j = 0; j != D[137].length; ++j) if(D[137][j].charCodeAt(0) !== 0xFFFD) { e[D[137][j]] = 35072 + j; d[35072 + j] = D[137][j];}\nD[138] = \"����������������������������������������������������������������夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛奜奝奞奟奡奣奤奦奧奨奩奪奫奬奭奮奯奰奱奲奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦�妧妬妭妰妱妳妴妵妶妷妸妺妼妽妿姀姁姂姃姄姅姇姈姉姌姍姎姏姕姖姙姛姞姟姠姡姢姤姦姧姩姪姫姭姮姯姰姱姲姳姴姵姶姷姸姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪娫娬娭娮娯娰娳娵娷娸娹娺娻娽娾娿婁婂婃婄婅婇婈婋婌婍婎婏婐婑婒婓婔婖婗婘婙婛婜婝婞婟婠�\".split(\"\");\nfor(j = 0; j != D[138].length; ++j) if(D[138][j].charCodeAt(0) !== 0xFFFD) { e[D[138][j]] = 35328 + j; d[35328 + j] = D[138][j];}\nD[139] = \"����������������������������������������������������������������婡婣婤婥婦婨婩婫婬婭婮婯婰婱婲婳婸婹婻婼婽婾媀媁媂媃媄媅媆媇媈媉媊媋媌媍媎媏媐媑媓媔媕媖媗媘媙媜媝媞媟媠媡媢媣媤媥媦媧媨媩媫媬�媭媮媯媰媱媴媶媷媹媺媻媼媽媿嫀嫃嫄嫅嫆嫇嫈嫊嫋嫍嫎嫏嫐嫑嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬嫭嫮嫯嫰嫲嫳嫴嫵嫶嫷嫸嫹嫺嫻嫼嫽嫾嫿嬀嬁嬂嬃嬄嬅嬆嬇嬈嬊嬋嬌嬍嬎嬏嬐嬑嬒嬓嬔嬕嬘嬙嬚嬛嬜嬝嬞嬟嬠嬡嬢嬣嬤嬥嬦嬧嬨嬩嬪嬫嬬嬭嬮嬯嬰嬱嬳嬵嬶嬸嬹嬺嬻嬼嬽嬾嬿孁孂孃孄孅孆孇�\".split(\"\");\nfor(j = 0; j != D[139].length; ++j) if(D[139][j].charCodeAt(0) !== 0xFFFD) { e[D[139][j]] = 35584 + j; d[35584 + j] = D[139][j];}\nD[140] = \"����������������������������������������������������������������孈孉孊孋孌孍孎孏孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏�寑寔寕寖寗寘寙寚寛寜寠寢寣實寧審寪寫寬寭寯寱寲寳寴寵寶寷寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧屨屩屪屫屬屭屰屲屳屴屵屶屷屸屻屼屽屾岀岃岄岅岆岇岉岊岋岎岏岒岓岕岝岞岟岠岡岤岥岦岧岨�\".split(\"\");\nfor(j = 0; j != D[140].length; ++j) if(D[140][j].charCodeAt(0) !== 0xFFFD) { e[D[140][j]] = 35840 + j; d[35840 + j] = D[140][j];}\nD[141] = \"����������������������������������������������������������������岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅峆峇峈峉峊峌峍峎峏峐峑峓峔峕峖峗峘峚峛峜峝峞峟峠峢峣峧峩峫峬峮峯峱峲峳峴峵島峷峸峹峺峼峽峾峿崀�崁崄崅崈崉崊崋崌崍崏崐崑崒崓崕崗崘崙崚崜崝崟崠崡崢崣崥崨崪崫崬崯崰崱崲崳崵崶崷崸崹崺崻崼崿嵀嵁嵂嵃嵄嵅嵆嵈嵉嵍嵎嵏嵐嵑嵒嵓嵔嵕嵖嵗嵙嵚嵜嵞嵟嵠嵡嵢嵣嵤嵥嵦嵧嵨嵪嵭嵮嵰嵱嵲嵳嵵嵶嵷嵸嵹嵺嵻嵼嵽嵾嵿嶀嶁嶃嶄嶅嶆嶇嶈嶉嶊嶋嶌嶍嶎嶏嶐嶑嶒嶓嶔嶕嶖嶗嶘嶚嶛嶜嶞嶟嶠�\".split(\"\");\nfor(j = 0; j != D[141].length; ++j) if(D[141][j].charCodeAt(0) !== 0xFFFD) { e[D[141][j]] = 36096 + j; d[36096 + j] = D[141][j];}\nD[142] = \"����������������������������������������������������������������嶡嶢嶣嶤嶥嶦嶧嶨嶩嶪嶫嶬嶭嶮嶯嶰嶱嶲嶳嶴嶵嶶嶸嶹嶺嶻嶼嶽嶾嶿巀巁巂巃巄巆巇巈巉巊巋巌巎巏巐巑巒巓巔巕巖巗巘巙巚巜巟巠巣巤巪巬巭�巰巵巶巸巹巺巻巼巿帀帄帇帉帊帋帍帎帒帓帗帞帟帠帡帢帣帤帥帨帩帪師帬帯帰帲帳帴帵帶帹帺帾帿幀幁幃幆幇幈幉幊幋幍幎幏幐幑幒幓幖幗幘幙幚幜幝幟幠幣幤幥幦幧幨幩幪幫幬幭幮幯幰幱幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨庩庪庫庬庮庯庰庱庲庴庺庻庼庽庿廀廁廂廃廄廅�\".split(\"\");\nfor(j = 0; j != D[142].length; ++j) if(D[142][j].charCodeAt(0) !== 0xFFFD) { e[D[142][j]] = 36352 + j; d[36352 + j] = D[142][j];}\nD[143] = \"����������������������������������������������������������������廆廇廈廋廌廍廎廏廐廔廕廗廘廙廚廜廝廞廟廠廡廢廣廤廥廦廧廩廫廬廭廮廯廰廱廲廳廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤�弨弫弬弮弰弲弳弴張弶強弸弻弽弾弿彁彂彃彄彅彆彇彈彉彊彋彌彍彎彏彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢徣徤徥徦徧復徫徬徯徰徱徲徳徴徶徸徹徺徻徾徿忀忁忂忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇�\".split(\"\");\nfor(j = 0; j != D[143].length; ++j) if(D[143][j].charCodeAt(0) !== 0xFFFD) { e[D[143][j]] = 36608 + j; d[36608 + j] = D[143][j];}\nD[144] = \"����������������������������������������������������������������怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰怱怲怳怴怶怷怸怹怺怽怾恀恄恅恆恇恈恉恊恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀�悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽悾悿惀惁惂惃惄惇惈惉惌惍惎惏惐惒惓惔惖惗惙惛惞惡惢惣惤惥惪惱惲惵惷惸惻惼惽惾惿愂愃愄愅愇愊愋愌愐愑愒愓愔愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬愭愮愯愰愱愲愳愴愵愶愷愸愹愺愻愼愽愾慀慁慂慃慄慅慆�\".split(\"\");\nfor(j = 0; j != D[144].length; ++j) if(D[144][j].charCodeAt(0) !== 0xFFFD) { e[D[144][j]] = 36864 + j; d[36864 + j] = D[144][j];}\nD[145] = \"����������������������������������������������������������������慇慉態慍慏慐慒慓慔慖慗慘慙慚慛慜慞慟慠慡慣慤慥慦慩慪慫慬慭慮慯慱慲慳慴慶慸慹慺慻慼慽慾慿憀憁憂憃憄憅憆憇憈憉憊憌憍憏憐憑憒憓憕�憖憗憘憙憚憛憜憞憟憠憡憢憣憤憥憦憪憫憭憮憯憰憱憲憳憴憵憶憸憹憺憻憼憽憿懀懁懃懄懅懆懇應懌懍懎懏懐懓懕懖懗懘懙懚懛懜懝懞懟懠懡懢懣懤懥懧懨懩懪懫懬懭懮懯懰懱懲懳懴懶懷懸懹懺懻懼懽懾戀戁戂戃戄戅戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸戹戺戻戼扂扄扅扆扊�\".split(\"\");\nfor(j = 0; j != D[145].length; ++j) if(D[145][j].charCodeAt(0) !== 0xFFFD) { e[D[145][j]] = 37120 + j; d[37120 + j] = D[145][j];}\nD[146] = \"����������������������������������������������������������������扏扐払扖扗扙扚扜扝扞扟扠扡扢扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋抌抍抎抏抐抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁�拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳挴挵挶挷挸挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖捗捘捙捚捛捜捝捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙掚掛掜掝掞掟採掤掦掫掯掱掲掵掶掹掻掽掿揀�\".split(\"\");\nfor(j = 0; j != D[146].length; ++j) if(D[146][j].charCodeAt(0) !== 0xFFFD) { e[D[146][j]] = 37376 + j; d[37376 + j] = D[146][j];}\nD[147] = \"����������������������������������������������������������������揁揂揃揅揇揈揊揋揌揑揓揔揕揗揘揙揚換揜揝揟揢揤揥揦揧揨揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆搇搈搉搊損搎搑搒搕搖搗搘搙搚搝搟搢搣搤�搥搧搨搩搫搮搯搰搱搲搳搵搶搷搸搹搻搼搾摀摂摃摉摋摌摍摎摏摐摑摓摕摖摗摙摚摛摜摝摟摠摡摢摣摤摥摦摨摪摫摬摮摯摰摱摲摳摴摵摶摷摻摼摽摾摿撀撁撃撆撈撉撊撋撌撍撎撏撐撓撔撗撘撚撛撜撝撟撠撡撢撣撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆擇擈擉擊擋擌擏擑擓擔擕擖擙據�\".split(\"\");\nfor(j = 0; j != D[147].length; ++j) if(D[147][j].charCodeAt(0) !== 0xFFFD) { e[D[147][j]] = 37632 + j; d[37632 + j] = D[147][j];}\nD[148] = \"����������������������������������������������������������������擛擜擝擟擠擡擣擥擧擨擩擪擫擬擭擮擯擰擱擲擳擴擵擶擷擸擹擺擻擼擽擾擿攁攂攃攄攅攆攇攈攊攋攌攍攎攏攐攑攓攔攕攖攗攙攚攛攜攝攞攟攠攡�攢攣攤攦攧攨攩攪攬攭攰攱攲攳攷攺攼攽敀敁敂敃敄敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數敹敺敻敼敽敾敿斀斁斂斃斄斅斆斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱斲斳斴斵斶斷斸斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘旙旚旛旜旝旞旟旡旣旤旪旫�\".split(\"\");\nfor(j = 0; j != D[148].length; ++j) if(D[148][j].charCodeAt(0) !== 0xFFFD) { e[D[148][j]] = 37888 + j; d[37888 + j] = D[148][j];}\nD[149] = \"����������������������������������������������������������������旲旳旴旵旸旹旻旼旽旾旿昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷昸昹昺昻昽昿晀時晄晅晆晇晈晉晊晍晎晐晑晘�晙晛晜晝晞晠晢晣晥晧晩晪晫晬晭晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘暙暚暛暜暞暟暠暡暢暣暤暥暦暩暪暫暬暭暯暰暱暲暳暵暶暷暸暺暻暼暽暿曀曁曂曃曄曅曆曇曈曉曊曋曌曍曎曏曐曑曒曓曔曕曖曗曘曚曞曟曠曡曢曣曤曥曧曨曪曫曬曭曮曯曱曵曶書曺曻曽朁朂會�\".split(\"\");\nfor(j = 0; j != D[149].length; ++j) if(D[149][j].charCodeAt(0) !== 0xFFFD) { e[D[149][j]] = 38144 + j; d[38144 + j] = D[149][j];}\nD[150] = \"����������������������������������������������������������������朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠朡朢朣朤朥朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗杘杙杚杛杝杢杣杤杦杧杫杬杮東杴杶�杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹枺枻枼枽枾枿柀柂柅柆柇柈柉柊柋柌柍柎柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵柶柷柸柹柺査柼柾栁栂栃栄栆栍栐栒栔栕栘栙栚栛栜栞栟栠栢栣栤栥栦栧栨栫栬栭栮栯栰栱栴栵栶栺栻栿桇桋桍桏桒桖桗桘桙桚桛�\".split(\"\");\nfor(j = 0; j != D[150].length; ++j) if(D[150][j].charCodeAt(0) !== 0xFFFD) { e[D[150][j]] = 38400 + j; d[38400 + j] = D[150][j];}\nD[151] = \"����������������������������������������������������������������桜桝桞桟桪桬桭桮桯桰桱桲桳桵桸桹桺桻桼桽桾桿梀梂梄梇梈梉梊梋梌梍梎梐梑梒梔梕梖梘梙梚梛梜條梞梟梠梡梣梤梥梩梪梫梬梮梱梲梴梶梷梸�梹梺梻梼梽梾梿棁棃棄棅棆棇棈棊棌棎棏棐棑棓棔棖棗棙棛棜棝棞棟棡棢棤棥棦棧棨棩棪棫棬棭棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆椇椈椉椊椌椏椑椓椔椕椖椗椘椙椚椛検椝椞椡椢椣椥椦椧椨椩椪椫椬椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃楄楅楆楇楈楉楊楋楌楍楎楏楐楑楒楓楕楖楘楙楛楜楟�\".split(\"\");\nfor(j = 0; j != D[151].length; ++j) if(D[151][j].charCodeAt(0) !== 0xFFFD) { e[D[151][j]] = 38656 + j; d[38656 + j] = D[151][j];}\nD[152] = \"����������������������������������������������������������������楡楢楤楥楧楨楩楪楬業楯楰楲楳楴極楶楺楻楽楾楿榁榃榅榊榋榌榎榏榐榑榒榓榖榗榙榚榝榞榟榠榡榢榣榤榥榦榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽�榾榿槀槂槃槄槅槆槇槈槉構槍槏槑槒槓槕槖槗様槙槚槜槝槞槡槢槣槤槥槦槧槨槩槪槫槬槮槯槰槱槳槴槵槶槷槸槹槺槻槼槾樀樁樂樃樄樅樆樇樈樉樋樌樍樎樏樐樑樒樓樔樕樖標樚樛樜樝樞樠樢樣樤樥樦樧権樫樬樭樮樰樲樳樴樶樷樸樹樺樻樼樿橀橁橂橃橅橆橈橉橊橋橌橍橎橏橑橒橓橔橕橖橗橚�\".split(\"\");\nfor(j = 0; j != D[152].length; ++j) if(D[152][j].charCodeAt(0) !== 0xFFFD) { e[D[152][j]] = 38912 + j; d[38912 + j] = D[152][j];}\nD[153] = \"����������������������������������������������������������������橜橝橞機橠橢橣橤橦橧橨橩橪橫橬橭橮橯橰橲橳橴橵橶橷橸橺橻橽橾橿檁檂檃檅檆檇檈檉檊檋檌檍檏檒檓檔檕檖檘檙檚檛檜檝檞檟檡檢檣檤檥檦�檧檨檪檭檮檯檰檱檲檳檴檵檶檷檸檹檺檻檼檽檾檿櫀櫁櫂櫃櫄櫅櫆櫇櫈櫉櫊櫋櫌櫍櫎櫏櫐櫑櫒櫓櫔櫕櫖櫗櫘櫙櫚櫛櫜櫝櫞櫟櫠櫡櫢櫣櫤櫥櫦櫧櫨櫩櫪櫫櫬櫭櫮櫯櫰櫱櫲櫳櫴櫵櫶櫷櫸櫹櫺櫻櫼櫽櫾櫿欀欁欂欃欄欅欆欇欈欉權欋欌欍欎欏欐欑欒欓欔欕欖欗欘欙欚欛欜欝欞欟欥欦欨欩欪欫欬欭欮�\".split(\"\");\nfor(j = 0; j != D[153].length; ++j) if(D[153][j].charCodeAt(0) !== 0xFFFD) { e[D[153][j]] = 39168 + j; d[39168 + j] = D[153][j];}\nD[154] = \"����������������������������������������������������������������欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍歎歏歐歑歒歓歔歕歖歗歘歚歛歜歝歞歟歠歡歨歩歫歬歭歮歯歰歱歲歳歴歵歶歷歸歺歽歾歿殀殅殈�殌殎殏殐殑殔殕殗殘殙殜殝殞殟殠殢殣殤殥殦殧殨殩殫殬殭殮殯殰殱殲殶殸殹殺殻殼殽殾毀毃毄毆毇毈毉毊毌毎毐毑毘毚毜毝毞毟毠毢毣毤毥毦毧毨毩毬毭毮毰毱毲毴毶毷毸毺毻毼毾毿氀氁氂氃氄氈氉氊氋氌氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋汌汍汎汏汑汒汓汖汘�\".split(\"\");\nfor(j = 0; j != D[154].length; ++j) if(D[154][j].charCodeAt(0) !== 0xFFFD) { e[D[154][j]] = 39424 + j; d[39424 + j] = D[154][j];}\nD[155] = \"����������������������������������������������������������������汙汚汢汣汥汦汧汫汬汭汮汯汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘�泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟洠洡洢洣洤洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽浾浿涀涁涃涄涆涇涊涋涍涏涐涒涖涗涘涙涚涜涢涥涬涭涰涱涳涴涶涷涹涺涻涼涽涾淁淂淃淈淉淊�\".split(\"\");\nfor(j = 0; j != D[155].length; ++j) if(D[155][j].charCodeAt(0) !== 0xFFFD) { e[D[155][j]] = 39680 + j; d[39680 + j] = D[155][j];}\nD[156] = \"����������������������������������������������������������������淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽淾淿渀渁渂渃渄渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵�渶渷渹渻渼渽渾渿湀湁湂湅湆湇湈湉湊湋湌湏湐湑湒湕湗湙湚湜湝湞湠湡湢湣湤湥湦湧湨湩湪湬湭湯湰湱湲湳湴湵湶湷湸湹湺湻湼湽満溁溂溄溇溈溊溋溌溍溎溑溒溓溔溕準溗溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪滫滬滭滮滯�\".split(\"\");\nfor(j = 0; j != D[156].length; ++j) if(D[156][j].charCodeAt(0) !== 0xFFFD) { e[D[156][j]] = 39936 + j; d[39936 + j] = D[156][j];}\nD[157] = \"����������������������������������������������������������������滰滱滲滳滵滶滷滸滺滻滼滽滾滿漀漁漃漄漅漇漈漊漋漌漍漎漐漑漒漖漗漘漙漚漛漜漝漞漟漡漢漣漥漦漧漨漬漮漰漲漴漵漷漸漹漺漻漼漽漿潀潁潂�潃潄潅潈潉潊潌潎潏潐潑潒潓潔潕潖潗潙潚潛潝潟潠潡潣潤潥潧潨潩潪潫潬潯潰潱潳潵潶潷潹潻潽潾潿澀澁澂澃澅澆澇澊澋澏澐澑澒澓澔澕澖澗澘澙澚澛澝澞澟澠澢澣澤澥澦澨澩澪澫澬澭澮澯澰澱澲澴澵澷澸澺澻澼澽澾澿濁濃濄濅濆濇濈濊濋濌濍濎濏濐濓濔濕濖濗濘濙濚濛濜濝濟濢濣濤濥�\".split(\"\");\nfor(j = 0; j != D[157].length; ++j) if(D[157][j].charCodeAt(0) !== 0xFFFD) { e[D[157][j]] = 40192 + j; d[40192 + j] = D[157][j];}\nD[158] = \"����������������������������������������������������������������濦濧濨濩濪濫濬濭濰濱濲濳濴濵濶濷濸濹濺濻濼濽濾濿瀀瀁瀂瀃瀄瀅瀆瀇瀈瀉瀊瀋瀌瀍瀎瀏瀐瀒瀓瀔瀕瀖瀗瀘瀙瀜瀝瀞瀟瀠瀡瀢瀤瀥瀦瀧瀨瀩瀪�瀫瀬瀭瀮瀯瀰瀱瀲瀳瀴瀶瀷瀸瀺瀻瀼瀽瀾瀿灀灁灂灃灄灅灆灇灈灉灊灋灍灎灐灑灒灓灔灕灖灗灘灙灚灛灜灝灟灠灡灢灣灤灥灦灧灨灩灪灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞炟炠炡炢炣炤炥炦炧炨炩炪炰炲炴炵炶為炾炿烄烅烆烇烉烋烌烍烎烏烐烑烒烓烔烕烖烗烚�\".split(\"\");\nfor(j = 0; j != D[158].length; ++j) if(D[158][j].charCodeAt(0) !== 0xFFFD) { e[D[158][j]] = 40448 + j; d[40448 + j] = D[158][j];}\nD[159] = \"����������������������������������������������������������������烜烝烞烠烡烢烣烥烪烮烰烱烲烳烴烵烶烸烺烻烼烾烿焀焁焂焃焄焅焆焇焈焋焌焍焎焏焑焒焔焗焛焜焝焞焟焠無焢焣焤焥焧焨焩焪焫焬焭焮焲焳焴�焵焷焸焹焺焻焼焽焾焿煀煁煂煃煄煆煇煈煉煋煍煏煐煑煒煓煔煕煖煗煘煙煚煛煝煟煠煡煢煣煥煩煪煫煬煭煯煰煱煴煵煶煷煹煻煼煾煿熀熁熂熃熅熆熇熈熉熋熌熍熎熐熑熒熓熕熖熗熚熛熜熝熞熡熢熣熤熥熦熧熩熪熫熭熮熯熰熱熲熴熶熷熸熺熻熼熽熾熿燀燁燂燄燅燆燇燈燉燊燋燌燍燏燐燑燒燓�\".split(\"\");\nfor(j = 0; j != D[159].length; ++j) if(D[159][j].charCodeAt(0) !== 0xFFFD) { e[D[159][j]] = 40704 + j; d[40704 + j] = D[159][j];}\nD[160] = \"����������������������������������������������������������������燖燗燘燙燚燛燜燝燞營燡燢燣燤燦燨燩燪燫燬燭燯燰燱燲燳燴燵燶燷燸燺燻燼燽燾燿爀爁爂爃爄爅爇爈爉爊爋爌爍爎爏爐爑爒爓爔爕爖爗爘爙爚�爛爜爞爟爠爡爢爣爤爥爦爧爩爫爭爮爯爲爳爴爺爼爾牀牁牂牃牄牅牆牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅犆犇犈犉犌犎犐犑犓犔犕犖犗犘犙犚犛犜犝犞犠犡犢犣犤犥犦犧犨犩犪犫犮犱犲犳犵犺犻犼犽犾犿狀狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛�\".split(\"\");\nfor(j = 0; j != D[160].length; ++j) if(D[160][j].charCodeAt(0) !== 0xFFFD) { e[D[160][j]] = 40960 + j; d[40960 + j] = D[160][j];}\nD[161] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈〉《》「」『』〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓�\".split(\"\");\nfor(j = 0; j != D[161].length; ++j) if(D[161][j].charCodeAt(0) !== 0xFFFD) { e[D[161][j]] = 41216 + j; d[41216 + j] = D[161][j];}\nD[162] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹ������⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇①②③④⑤⑥⑦⑧⑨⑩��㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩��ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ���\".split(\"\");\nfor(j = 0; j != D[162].length; ++j) if(D[162][j].charCodeAt(0) !== 0xFFFD) { e[D[162][j]] = 41472 + j; d[41472 + j] = D[162][j];}\nD[163] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������！＂＃￥％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［＼］＾＿｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝￣�\".split(\"\");\nfor(j = 0; j != D[163].length; ++j) if(D[163][j].charCodeAt(0) !== 0xFFFD) { e[D[163][j]] = 41728 + j; d[41728 + j] = D[163][j];}\nD[164] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん������������\".split(\"\");\nfor(j = 0; j != D[164].length; ++j) if(D[164][j].charCodeAt(0) !== 0xFFFD) { e[D[164][j]] = 41984 + j; d[41984 + j] = D[164][j];}\nD[165] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶ���������\".split(\"\");\nfor(j = 0; j != D[165].length; ++j) if(D[165][j].charCodeAt(0) !== 0xFFFD) { e[D[165][j]] = 42240 + j; d[42240 + j] = D[165][j];}\nD[166] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ��������αβγδεζηθικλμνξοπρστυφχψω�������︵︶︹︺︿﹀︽︾﹁﹂﹃﹄��︻︼︷︸︱�︳︴����������\".split(\"\");\nfor(j = 0; j != D[166].length; ++j) if(D[166][j].charCodeAt(0) !== 0xFFFD) { e[D[166][j]] = 42496 + j; d[42496 + j] = D[166][j];}\nD[167] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ���������������абвгдеёжзийклмнопрстуфхцчшщъыьэюя��������������\".split(\"\");\nfor(j = 0; j != D[167].length; ++j) if(D[167][j].charCodeAt(0) !== 0xFFFD) { e[D[167][j]] = 42752 + j; d[42752 + j] = D[167][j];}\nD[168] = \"����������������������������������������������������������������ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═║╒╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡╢╣╤╥╦╧╨╩╪╫╬╭╮╯╰╱╲╳▁▂▃▄▅▆▇�█▉▊▋▌▍▎▏▓▔▕▼▽◢◣◤◥☉⊕〒〝〞�����������āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ�ńň�ɡ����ㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩ����������������������\".split(\"\");\nfor(j = 0; j != D[168].length; ++j) if(D[168][j].charCodeAt(0) !== 0xFFFD) { e[D[168][j]] = 43008 + j; d[43008 + j] = D[168][j];}\nD[169] = \"����������������������������������������������������������������〡〢〣〤〥〦〧〨〩㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤�℡㈱�‐���ー゛゜ヽヾ〆ゝゞ﹉﹊﹋﹌﹍﹎﹏﹐﹑﹒﹔﹕﹖﹗﹙﹚﹛﹜﹝﹞﹟﹠﹡�﹢﹣﹤﹥﹦﹨﹩﹪﹫�������������〇�������������─━│┃┄┅┆┇┈┉┊┋┌┍┎┏┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟┠┡┢┣┤┥┦┧┨┩┪┫┬┭┮┯┰┱┲┳┴┵┶┷┸┹┺┻┼┽┾┿╀╁╂╃╄╅╆╇╈╉╊╋����������������\".split(\"\");\nfor(j = 0; j != D[169].length; ++j) if(D[169][j].charCodeAt(0) !== 0xFFFD) { e[D[169][j]] = 43264 + j; d[43264 + j] = D[169][j];}\nD[170] = \"����������������������������������������������������������������狜狝狟狢狣狤狥狦狧狪狫狵狶狹狽狾狿猀猂猄猅猆猇猈猉猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀獁獂獃獄獅獆獇獈�獉獊獋獌獎獏獑獓獔獕獖獘獙獚獛獜獝獞獟獡獢獣獤獥獦獧獨獩獪獫獮獰獱�����������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[170].length; ++j) if(D[170][j].charCodeAt(0) !== 0xFFFD) { e[D[170][j]] = 43520 + j; d[43520 + j] = D[170][j];}\nD[171] = \"����������������������������������������������������������������獲獳獴獵獶獷獸獹獺獻獼獽獿玀玁玂玃玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣玤玥玦玧玨玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃珄珅珆珇�珋珌珎珒珓珔珕珖珗珘珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳珴珵珶珷�����������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[171].length; ++j) if(D[171][j].charCodeAt(0) !== 0xFFFD) { e[D[171][j]] = 43776 + j; d[43776 + j] = D[171][j];}\nD[172] = \"����������������������������������������������������������������珸珹珺珻珼珽現珿琀琁琂琄琇琈琋琌琍琎琑琒琓琔琕琖琗琘琙琜琝琞琟琠琡琣琤琧琩琫琭琯琱琲琷琸琹琺琻琽琾琿瑀瑂瑃瑄瑅瑆瑇瑈瑉瑊瑋瑌瑍�瑎瑏瑐瑑瑒瑓瑔瑖瑘瑝瑠瑡瑢瑣瑤瑥瑦瑧瑨瑩瑪瑫瑬瑮瑯瑱瑲瑳瑴瑵瑸瑹瑺�����������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[172].length; ++j) if(D[172][j].charCodeAt(0) !== 0xFFFD) { e[D[172][j]] = 44032 + j; d[44032 + j] = D[172][j];}\nD[173] = \"����������������������������������������������������������������瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑璒璓璔璕璖璗璘璙璚璛璝璟璠璡璢璣璤璥璦璪璫璬璭璮璯環璱璲璳璴璵璶璷璸璹璻璼璽璾璿瓀瓁瓂瓃瓄瓅瓆瓇�瓈瓉瓊瓋瓌瓍瓎瓏瓐瓑瓓瓔瓕瓖瓗瓘瓙瓚瓛瓝瓟瓡瓥瓧瓨瓩瓪瓫瓬瓭瓰瓱瓲�����������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[173].length; ++j) if(D[173][j].charCodeAt(0) !== 0xFFFD) { e[D[173][j]] = 44288 + j; d[44288 + j] = D[173][j];}\nD[174] = \"����������������������������������������������������������������瓳瓵瓸瓹瓺瓻瓼瓽瓾甀甁甂甃甅甆甇甈甉甊甋甌甎甐甒甔甕甖甗甛甝甞甠甡產産甤甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘�畝畞畟畠畡畢畣畤畧畨畩畫畬畭畮畯異畱畳畵當畷畺畻畼畽畾疀疁疂疄疅疇�����������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[174].length; ++j) if(D[174][j].charCodeAt(0) !== 0xFFFD) { e[D[174][j]] = 44544 + j; d[44544 + j] = D[174][j];}\nD[175] = \"����������������������������������������������������������������疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦疧疨疩疪疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇�瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄�����������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[175].length; ++j) if(D[175][j].charCodeAt(0) !== 0xFFFD) { e[D[175][j]] = 44800 + j; d[44800 + j] = D[175][j];}\nD[176] = \"����������������������������������������������������������������癅癆癇癈癉癊癋癎癏癐癑癒癓癕癗癘癙癚癛癝癟癠癡癢癤癥癦癧癨癩癪癬癭癮癰癱癲癳癴癵癶癷癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛�皜皝皞皟皠皡皢皣皥皦皧皨皩皪皫皬皭皯皰皳皵皶皷皸皹皺皻皼皽皾盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥�\".split(\"\");\nfor(j = 0; j != D[176].length; ++j) if(D[176][j].charCodeAt(0) !== 0xFFFD) { e[D[176][j]] = 45056 + j; d[45056 + j] = D[176][j];}\nD[177] = \"����������������������������������������������������������������盄盇盉盋盌盓盕盙盚盜盝盞盠盡盢監盤盦盧盨盩盪盫盬盭盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎眏眐眑眒眓眔眕眖眗眘眛眜眝眞眡眣眤眥眧眪眫�眬眮眰眱眲眳眴眹眻眽眾眿睂睄睅睆睈睉睊睋睌睍睎睏睒睓睔睕睖睗睘睙睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳�\".split(\"\");\nfor(j = 0; j != D[177].length; ++j) if(D[177][j].charCodeAt(0) !== 0xFFFD) { e[D[177][j]] = 45312 + j; d[45312 + j] = D[177][j];}\nD[178] = \"����������������������������������������������������������������睝睞睟睠睤睧睩睪睭睮睯睰睱睲睳睴睵睶睷睸睺睻睼瞁瞂瞃瞆瞇瞈瞉瞊瞋瞏瞐瞓瞔瞕瞖瞗瞘瞙瞚瞛瞜瞝瞞瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶瞷瞸瞹瞺�瞼瞾矀矁矂矃矄矅矆矇矈矉矊矋矌矎矏矐矑矒矓矔矕矖矘矙矚矝矞矟矠矡矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖�\".split(\"\");\nfor(j = 0; j != D[178].length; ++j) if(D[178][j].charCodeAt(0) !== 0xFFFD) { e[D[178][j]] = 45568 + j; d[45568 + j] = D[178][j];}\nD[179] = \"����������������������������������������������������������������矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃砄砅砆砇砈砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚�硛硜硞硟硠硡硢硣硤硥硦硧硨硩硯硰硱硲硳硴硵硶硸硹硺硻硽硾硿碀碁碂碃场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚�\".split(\"\");\nfor(j = 0; j != D[179].length; ++j) if(D[179][j].charCodeAt(0) !== 0xFFFD) { e[D[179][j]] = 45824 + j; d[45824 + j] = D[179][j];}\nD[180] = \"����������������������������������������������������������������碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨碩碪碫碬碭碮碯碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚磛磜磝磞磟磠磡磢磣�磤磥磦磧磩磪磫磭磮磯磰磱磳磵磶磸磹磻磼磽磾磿礀礂礃礄礆礇礈礉礊礋礌础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮�\".split(\"\");\nfor(j = 0; j != D[180].length; ++j) if(D[180][j].charCodeAt(0) !== 0xFFFD) { e[D[180][j]] = 46080 + j; d[46080 + j] = D[180][j];}\nD[181] = \"����������������������������������������������������������������礍礎礏礐礑礒礔礕礖礗礘礙礚礛礜礝礟礠礡礢礣礥礦礧礨礩礪礫礬礭礮礯礰礱礲礳礵礶礷礸礹礽礿祂祃祄祅祇祊祋祌祍祎祏祐祑祒祔祕祘祙祡祣�祤祦祩祪祫祬祮祰祱祲祳祴祵祶祹祻祼祽祾祿禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠�\".split(\"\");\nfor(j = 0; j != D[181].length; ++j) if(D[181][j].charCodeAt(0) !== 0xFFFD) { e[D[181][j]] = 46336 + j; d[46336 + j] = D[181][j];}\nD[182] = \"����������������������������������������������������������������禓禔禕禖禗禘禙禛禜禝禞禟禠禡禢禣禤禥禦禨禩禪禫禬禭禮禯禰禱禲禴禵禶禷禸禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙秚秛秜秝秞秠秡秢秥秨秪�秬秮秱秲秳秴秵秶秷秹秺秼秾秿稁稄稅稇稈稉稊稌稏稐稑稒稓稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二�\".split(\"\");\nfor(j = 0; j != D[182].length; ++j) if(D[182][j].charCodeAt(0) !== 0xFFFD) { e[D[182][j]] = 46592 + j; d[46592 + j] = D[182][j];}\nD[183] = \"����������������������������������������������������������������稝稟稡稢稤稥稦稧稨稩稪稫稬稭種稯稰稱稲稴稵稶稸稺稾穀穁穂穃穄穅穇穈穉穊穋穌積穎穏穐穒穓穔穕穖穘穙穚穛穜穝穞穟穠穡穢穣穤穥穦穧穨�穩穪穫穬穭穮穯穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服�\".split(\"\");\nfor(j = 0; j != D[183].length; ++j) if(D[183][j].charCodeAt(0) !== 0xFFFD) { e[D[183][j]] = 46848 + j; d[46848 + j] = D[183][j];}\nD[184] = \"����������������������������������������������������������������窣窤窧窩窪窫窮窯窰窱窲窴窵窶窷窸窹窺窻窼窽窾竀竁竂竃竄竅竆竇竈竉竊竌竍竎竏竐竑竒竓竔竕竗竘竚竛竜竝竡竢竤竧竨竩竪竫竬竮竰竱竲竳�竴竵競竷竸竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹�\".split(\"\");\nfor(j = 0; j != D[184].length; ++j) if(D[184][j].charCodeAt(0) !== 0xFFFD) { e[D[184][j]] = 47104 + j; d[47104 + j] = D[184][j];}\nD[185] = \"����������������������������������������������������������������笯笰笲笴笵笶笷笹笻笽笿筀筁筂筃筄筆筈筊筍筎筓筕筗筙筜筞筟筡筣筤筥筦筧筨筩筪筫筬筭筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆箇箈箉箊箋箌箎箏�箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹箺箻箼箽箾箿節篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈�\".split(\"\");\nfor(j = 0; j != D[185].length; ++j) if(D[185][j].charCodeAt(0) !== 0xFFFD) { e[D[185][j]] = 47360 + j; d[47360 + j] = D[185][j];}\nD[186] = \"����������������������������������������������������������������篅篈築篊篋篍篎篏篐篒篔篕篖篗篘篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲篳篴篵篶篸篹篺篻篽篿簀簁簂簃簄簅簆簈簉簊簍簎簐簑簒簓簔簕簗簘簙�簚簛簜簝簞簠簡簢簣簤簥簨簩簫簬簭簮簯簰簱簲簳簴簵簶簷簹簺簻簼簽簾籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖�\".split(\"\");\nfor(j = 0; j != D[186].length; ++j) if(D[186][j].charCodeAt(0) !== 0xFFFD) { e[D[186][j]] = 47616 + j; d[47616 + j] = D[186][j];}\nD[187] = \"����������������������������������������������������������������籃籄籅籆籇籈籉籊籋籌籎籏籐籑籒籓籔籕籖籗籘籙籚籛籜籝籞籟籠籡籢籣籤籥籦籧籨籩籪籫籬籭籮籯籰籱籲籵籶籷籸籹籺籾籿粀粁粂粃粄粅粆粇�粈粊粋粌粍粎粏粐粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴粵粶粷粸粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕�\".split(\"\");\nfor(j = 0; j != D[187].length; ++j) if(D[187][j].charCodeAt(0) !== 0xFFFD) { e[D[187][j]] = 47872 + j; d[47872 + j] = D[187][j];}\nD[188] = \"����������������������������������������������������������������粿糀糂糃糄糆糉糋糎糏糐糑糒糓糔糘糚糛糝糞糡糢糣糤糥糦糧糩糪糫糬糭糮糰糱糲糳糴糵糶糷糹糺糼糽糾糿紀紁紂紃約紅紆紇紈紉紋紌納紎紏紐�紑紒紓純紕紖紗紘紙級紛紜紝紞紟紡紣紤紥紦紨紩紪紬紭紮細紱紲紳紴紵紶肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件�\".split(\"\");\nfor(j = 0; j != D[188].length; ++j) if(D[188][j].charCodeAt(0) !== 0xFFFD) { e[D[188][j]] = 48128 + j; d[48128 + j] = D[188][j];}\nD[189] = \"����������������������������������������������������������������紷紸紹紺紻紼紽紾紿絀絁終絃組絅絆絇絈絉絊絋経絍絎絏結絑絒絓絔絕絖絗絘絙絚絛絜絝絞絟絠絡絢絣絤絥給絧絨絩絪絫絬絭絯絰統絲絳絴絵絶�絸絹絺絻絼絽絾絿綀綁綂綃綄綅綆綇綈綉綊綋綌綍綎綏綐綑綒經綔綕綖綗綘健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸�\".split(\"\");\nfor(j = 0; j != D[189].length; ++j) if(D[189][j].charCodeAt(0) !== 0xFFFD) { e[D[189][j]] = 48384 + j; d[48384 + j] = D[189][j];}\nD[190] = \"����������������������������������������������������������������継続綛綜綝綞綟綠綡綢綣綤綥綧綨綩綪綫綬維綯綰綱網綳綴綵綶綷綸綹綺綻綼綽綾綿緀緁緂緃緄緅緆緇緈緉緊緋緌緍緎総緐緑緒緓緔緕緖緗緘緙�線緛緜緝緞緟締緡緢緣緤緥緦緧編緩緪緫緬緭緮緯緰緱緲緳練緵緶緷緸緹緺尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻�\".split(\"\");\nfor(j = 0; j != D[190].length; ++j) if(D[190][j].charCodeAt(0) !== 0xFFFD) { e[D[190][j]] = 48640 + j; d[48640 + j] = D[190][j];}\nD[191] = \"����������������������������������������������������������������緻緼緽緾緿縀縁縂縃縄縅縆縇縈縉縊縋縌縍縎縏縐縑縒縓縔縕縖縗縘縙縚縛縜縝縞縟縠縡縢縣縤縥縦縧縨縩縪縫縬縭縮縯縰縱縲縳縴縵縶縷縸縹�縺縼總績縿繀繂繃繄繅繆繈繉繊繋繌繍繎繏繐繑繒繓織繕繖繗繘繙繚繛繜繝俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀�\".split(\"\");\nfor(j = 0; j != D[191].length; ++j) if(D[191][j].charCodeAt(0) !== 0xFFFD) { e[D[191][j]] = 48896 + j; d[48896 + j] = D[191][j];}\nD[192] = \"����������������������������������������������������������������繞繟繠繡繢繣繤繥繦繧繨繩繪繫繬繭繮繯繰繱繲繳繴繵繶繷繸繹繺繻繼繽繾繿纀纁纃纄纅纆纇纈纉纊纋續纍纎纏纐纑纒纓纔纕纖纗纘纙纚纜纝纞�纮纴纻纼绖绤绬绹缊缐缞缷缹缻缼缽缾缿罀罁罃罆罇罈罉罊罋罌罍罎罏罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐�\".split(\"\");\nfor(j = 0; j != D[192].length; ++j) if(D[192][j].charCodeAt(0) !== 0xFFFD) { e[D[192][j]] = 49152 + j; d[49152 + j] = D[192][j];}\nD[193] = \"����������������������������������������������������������������罖罙罛罜罝罞罠罣罤罥罦罧罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂羃羄羅羆羇羈羉羋羍羏羐羑羒羓羕羖羗羘羙羛羜羠羢羣羥羦羨義羪羫羬羭羮羱�羳羴羵羶羷羺羻羾翀翂翃翄翆翇翈翉翋翍翏翐翑習翓翖翗翙翚翛翜翝翞翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿�\".split(\"\");\nfor(j = 0; j != D[193].length; ++j) if(D[193][j].charCodeAt(0) !== 0xFFFD) { e[D[193][j]] = 49408 + j; d[49408 + j] = D[193][j];}\nD[194] = \"����������������������������������������������������������������翤翧翨翪翫翬翭翯翲翴翵翶翷翸翹翺翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫耬耭耮耯耰耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗�聙聛聜聝聞聟聠聡聢聣聤聥聦聧聨聫聬聭聮聯聰聲聳聴聵聶職聸聹聺聻聼聽隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫�\".split(\"\");\nfor(j = 0; j != D[194].length; ++j) if(D[194][j].charCodeAt(0) !== 0xFFFD) { e[D[194][j]] = 49664 + j; d[49664 + j] = D[194][j];}\nD[195] = \"����������������������������������������������������������������聾肁肂肅肈肊肍肎肏肐肑肒肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇胈胉胊胋胏胐胑胒胓胔胕胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋�脌脕脗脙脛脜脝脟脠脡脢脣脤脥脦脧脨脩脪脫脭脮脰脳脴脵脷脹脺脻脼脽脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸�\".split(\"\");\nfor(j = 0; j != D[195].length; ++j) if(D[195][j].charCodeAt(0) !== 0xFFFD) { e[D[195][j]] = 49920 + j; d[49920 + j] = D[195][j];}\nD[196] = \"����������������������������������������������������������������腀腁腂腃腄腅腇腉腍腎腏腒腖腗腘腛腜腝腞腟腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃膄膅膆膇膉膋膌膍膎膐膒膓膔膕膖膗膙膚膞膟膠膡膢膤膥�膧膩膫膬膭膮膯膰膱膲膴膵膶膷膸膹膼膽膾膿臄臅臇臈臉臋臍臎臏臐臑臒臓摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁�\".split(\"\");\nfor(j = 0; j != D[196].length; ++j) if(D[196][j].charCodeAt(0) !== 0xFFFD) { e[D[196][j]] = 50176 + j; d[50176 + j] = D[196][j];}\nD[197] = \"����������������������������������������������������������������臔臕臖臗臘臙臚臛臜臝臞臟臠臡臢臤臥臦臨臩臫臮臯臰臱臲臵臶臷臸臹臺臽臿舃與興舉舊舋舎舏舑舓舕舖舗舘舙舚舝舠舤舥舦舧舩舮舲舺舼舽舿�艀艁艂艃艅艆艈艊艌艍艎艐艑艒艓艔艕艖艗艙艛艜艝艞艠艡艢艣艤艥艦艧艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗�\".split(\"\");\nfor(j = 0; j != D[197].length; ++j) if(D[197][j].charCodeAt(0) !== 0xFFFD) { e[D[197][j]] = 50432 + j; d[50432 + j] = D[197][j];}\nD[198] = \"����������������������������������������������������������������艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸�苺苼苽苾苿茀茊茋茍茐茒茓茖茘茙茝茞茟茠茡茢茣茤茥茦茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐�\".split(\"\");\nfor(j = 0; j != D[198].length; ++j) if(D[198][j].charCodeAt(0) !== 0xFFFD) { e[D[198][j]] = 50688 + j; d[50688 + j] = D[198][j];}\nD[199] = \"����������������������������������������������������������������茾茿荁荂荄荅荈荊荋荌荍荎荓荕荖荗荘荙荝荢荰荱荲荳荴荵荶荹荺荾荿莀莁莂莃莄莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡莢莣莤莥莦莧莬莭莮�莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠�\".split(\"\");\nfor(j = 0; j != D[199].length; ++j) if(D[199][j].charCodeAt(0) !== 0xFFFD) { e[D[199][j]] = 50944 + j; d[50944 + j] = D[199][j];}\nD[200] = \"����������������������������������������������������������������菮華菳菴菵菶菷菺菻菼菾菿萀萂萅萇萈萉萊萐萒萓萔萕萖萗萙萚萛萞萟萠萡萢萣萩萪萫萬萭萮萯萰萲萳萴萵萶萷萹萺萻萾萿葀葁葂葃葄葅葇葈葉�葊葋葌葍葎葏葐葒葓葔葕葖葘葝葞葟葠葢葤葥葦葧葨葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁�\".split(\"\");\nfor(j = 0; j != D[200].length; ++j) if(D[200][j].charCodeAt(0) !== 0xFFFD) { e[D[200][j]] = 51200 + j; d[51200 + j] = D[200][j];}\nD[201] = \"����������������������������������������������������������������葽葾葿蒀蒁蒃蒄蒅蒆蒊蒍蒏蒐蒑蒒蒓蒔蒕蒖蒘蒚蒛蒝蒞蒟蒠蒢蒣蒤蒥蒦蒧蒨蒩蒪蒫蒬蒭蒮蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗�蓘蓙蓚蓛蓜蓞蓡蓢蓤蓧蓨蓩蓪蓫蓭蓮蓯蓱蓲蓳蓴蓵蓶蓷蓸蓹蓺蓻蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳�\".split(\"\");\nfor(j = 0; j != D[201].length; ++j) if(D[201][j].charCodeAt(0) !== 0xFFFD) { e[D[201][j]] = 51456 + j; d[51456 + j] = D[201][j];}\nD[202] = \"����������������������������������������������������������������蔃蔄蔅蔆蔇蔈蔉蔊蔋蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢蔣蔤蔥蔦蔧蔨蔩蔪蔭蔮蔯蔰蔱蔲蔳蔴蔵蔶蔾蔿蕀蕁蕂蕄蕅蕆蕇蕋蕌蕍蕎蕏蕐蕑蕒蕓蕔蕕�蕗蕘蕚蕛蕜蕝蕟蕠蕡蕢蕣蕥蕦蕧蕩蕪蕫蕬蕭蕮蕯蕰蕱蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱�\".split(\"\");\nfor(j = 0; j != D[202].length; ++j) if(D[202][j].charCodeAt(0) !== 0xFFFD) { e[D[202][j]] = 51712 + j; d[51712 + j] = D[202][j];}\nD[203] = \"����������������������������������������������������������������薂薃薆薈薉薊薋薌薍薎薐薑薒薓薔薕薖薗薘薙薚薝薞薟薠薡薢薣薥薦薧薩薫薬薭薱薲薳薴薵薶薸薺薻薼薽薾薿藀藂藃藄藅藆藇藈藊藋藌藍藎藑藒�藔藖藗藘藙藚藛藝藞藟藠藡藢藣藥藦藧藨藪藫藬藭藮藯藰藱藲藳藴藵藶藷藸恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔�\".split(\"\");\nfor(j = 0; j != D[203].length; ++j) if(D[203][j].charCodeAt(0) !== 0xFFFD) { e[D[203][j]] = 51968 + j; d[51968 + j] = D[203][j];}\nD[204] = \"����������������������������������������������������������������藹藺藼藽藾蘀蘁蘂蘃蘄蘆蘇蘈蘉蘊蘋蘌蘍蘎蘏蘐蘒蘓蘔蘕蘗蘘蘙蘚蘛蘜蘝蘞蘟蘠蘡蘢蘣蘤蘥蘦蘨蘪蘫蘬蘭蘮蘯蘰蘱蘲蘳蘴蘵蘶蘷蘹蘺蘻蘽蘾蘿虀�虁虂虃虄虅虆虇虈虉虊虋虌虒虓處虖虗虘虙虛虜虝號虠虡虣虤虥虦虧虨虩虪獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃�\".split(\"\");\nfor(j = 0; j != D[204].length; ++j) if(D[204][j].charCodeAt(0) !== 0xFFFD) { e[D[204][j]] = 52224 + j; d[52224 + j] = D[204][j];}\nD[205] = \"����������������������������������������������������������������虭虯虰虲虳虴虵虶虷虸蚃蚄蚅蚆蚇蚈蚉蚎蚏蚐蚑蚒蚔蚖蚗蚘蚙蚚蚛蚞蚟蚠蚡蚢蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻蚼蚽蚾蚿蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜�蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威�\".split(\"\");\nfor(j = 0; j != D[205].length; ++j) if(D[205][j].charCodeAt(0) !== 0xFFFD) { e[D[205][j]] = 52480 + j; d[52480 + j] = D[205][j];}\nD[206] = \"����������������������������������������������������������������蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀蝁蝂蝃蝄蝅蝆蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚蝛蝜蝝蝞蝟蝡蝢蝦蝧蝨蝩蝪蝫蝬蝭蝯蝱蝲蝳蝵�蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎螏螐螑螒螔螕螖螘螙螚螛螜螝螞螠螡螢螣螤巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺�\".split(\"\");\nfor(j = 0; j != D[206].length; ++j) if(D[206][j].charCodeAt(0) !== 0xFFFD) { e[D[206][j]] = 52736 + j; d[52736 + j] = D[206][j];}\nD[207] = \"����������������������������������������������������������������螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁蟂蟃蟄蟅蟇蟈蟉蟌蟍蟎蟏蟐蟔蟕蟖蟗蟘蟙蟚蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯蟰蟱蟲蟳蟴蟵蟶蟷蟸�蟺蟻蟼蟽蟿蠀蠁蠂蠄蠅蠆蠇蠈蠉蠋蠌蠍蠎蠏蠐蠑蠒蠔蠗蠘蠙蠚蠜蠝蠞蠟蠠蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓�\".split(\"\");\nfor(j = 0; j != D[207].length; ++j) if(D[207][j].charCodeAt(0) !== 0xFFFD) { e[D[207][j]] = 52992 + j; d[52992 + j] = D[207][j];}\nD[208] = \"����������������������������������������������������������������蠤蠥蠦蠧蠨蠩蠪蠫蠬蠭蠮蠯蠰蠱蠳蠴蠵蠶蠷蠸蠺蠻蠽蠾蠿衁衂衃衆衇衈衉衊衋衎衏衐衑衒術衕衖衘衚衛衜衝衞衟衠衦衧衪衭衯衱衳衴衵衶衸衹衺�衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗袘袙袚袛袝袞袟袠袡袣袥袦袧袨袩袪小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄�\".split(\"\");\nfor(j = 0; j != D[208].length; ++j) if(D[208][j].charCodeAt(0) !== 0xFFFD) { e[D[208][j]] = 53248 + j; d[53248 + j] = D[208][j];}\nD[209] = \"����������������������������������������������������������������袬袮袯袰袲袳袴袵袶袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚裛補裝裞裠裡裦裧裩裪裫裬裭裮裯裲裵裶裷裺裻製裿褀褁褃褄褅褆複褈�褉褋褌褍褎褏褑褔褕褖褗褘褜褝褞褟褠褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶�\".split(\"\");\nfor(j = 0; j != D[209].length; ++j) if(D[209][j].charCodeAt(0) !== 0xFFFD) { e[D[209][j]] = 53504 + j; d[53504 + j] = D[209][j];}\nD[210] = \"����������������������������������������������������������������褸褹褺褻褼褽褾褿襀襂襃襅襆襇襈襉襊襋襌襍襎襏襐襑襒襓襔襕襖襗襘襙襚襛襜襝襠襡襢襣襤襥襧襨襩襪襫襬襭襮襯襰襱襲襳襴襵襶襷襸襹襺襼�襽襾覀覂覄覅覇覈覉覊見覌覍覎規覐覑覒覓覔覕視覗覘覙覚覛覜覝覞覟覠覡摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐�\".split(\"\");\nfor(j = 0; j != D[210].length; ++j) if(D[210][j].charCodeAt(0) !== 0xFFFD) { e[D[210][j]] = 53760 + j; d[53760 + j] = D[210][j];}\nD[211] = \"����������������������������������������������������������������覢覣覤覥覦覧覨覩親覫覬覭覮覯覰覱覲観覴覵覶覷覸覹覺覻覼覽覾覿觀觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴觵觶觷觸觹觺�觻觼觽觾觿訁訂訃訄訅訆計訉訊訋訌訍討訏訐訑訒訓訔訕訖託記訙訚訛訜訝印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉�\".split(\"\");\nfor(j = 0; j != D[211].length; ++j) if(D[211][j].charCodeAt(0) !== 0xFFFD) { e[D[211][j]] = 54016 + j; d[54016 + j] = D[211][j];}\nD[212] = \"����������������������������������������������������������������訞訟訠訡訢訣訤訥訦訧訨訩訪訫訬設訮訯訰許訲訳訴訵訶訷訸訹診註証訽訿詀詁詂詃詄詅詆詇詉詊詋詌詍詎詏詐詑詒詓詔評詖詗詘詙詚詛詜詝詞�詟詠詡詢詣詤詥試詧詨詩詪詫詬詭詮詯詰話該詳詴詵詶詷詸詺詻詼詽詾詿誀浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧�\".split(\"\");\nfor(j = 0; j != D[212].length; ++j) if(D[212][j].charCodeAt(0) !== 0xFFFD) { e[D[212][j]] = 54272 + j; d[54272 + j] = D[212][j];}\nD[213] = \"����������������������������������������������������������������誁誂誃誄誅誆誇誈誋誌認誎誏誐誑誒誔誕誖誗誘誙誚誛誜誝語誟誠誡誢誣誤誥誦誧誨誩說誫説読誮誯誰誱課誳誴誵誶誷誸誹誺誻誼誽誾調諀諁諂�諃諄諅諆談諈諉諊請諌諍諎諏諐諑諒諓諔諕論諗諘諙諚諛諜諝諞諟諠諡諢諣铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政�\".split(\"\");\nfor(j = 0; j != D[213].length; ++j) if(D[213][j].charCodeAt(0) !== 0xFFFD) { e[D[213][j]] = 54528 + j; d[54528 + j] = D[213][j];}\nD[214] = \"����������������������������������������������������������������諤諥諦諧諨諩諪諫諬諭諮諯諰諱諲諳諴諵諶諷諸諹諺諻諼諽諾諿謀謁謂謃謄謅謆謈謉謊謋謌謍謎謏謐謑謒謓謔謕謖謗謘謙謚講謜謝謞謟謠謡謢謣�謤謥謧謨謩謪謫謬謭謮謯謰謱謲謳謴謵謶謷謸謹謺謻謼謽謾謿譀譁譂譃譄譅帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑�\".split(\"\");\nfor(j = 0; j != D[214].length; ++j) if(D[214][j].charCodeAt(0) !== 0xFFFD) { e[D[214][j]] = 54784 + j; d[54784 + j] = D[214][j];}\nD[215] = \"����������������������������������������������������������������譆譇譈證譊譋譌譍譎譏譐譑譒譓譔譕譖譗識譙譚譛譜譝譞譟譠譡譢譣譤譥譧譨譩譪譫譭譮譯議譱譲譳譴譵譶護譸譹譺譻譼譽譾譿讀讁讂讃讄讅讆�讇讈讉變讋讌讍讎讏讐讑讒讓讔讕讖讗讘讙讚讛讜讝讞讟讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座������\".split(\"\");\nfor(j = 0; j != D[215].length; ++j) if(D[215][j].charCodeAt(0) !== 0xFFFD) { e[D[215][j]] = 55040 + j; d[55040 + j] = D[215][j];}\nD[216] = \"����������������������������������������������������������������谸谹谺谻谼谽谾谿豀豂豃豄豅豈豊豋豍豎豏豐豑豒豓豔豖豗豘豙豛豜豝豞豟豠豣豤豥豦豧豨豩豬豭豮豯豰豱豲豴豵豶豷豻豼豽豾豿貀貁貃貄貆貇�貈貋貍貎貏貐貑貒貓貕貖貗貙貚貛貜貝貞貟負財貢貣貤貥貦貧貨販貪貫責貭亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝�\".split(\"\");\nfor(j = 0; j != D[216].length; ++j) if(D[216][j].charCodeAt(0) !== 0xFFFD) { e[D[216][j]] = 55296 + j; d[55296 + j] = D[216][j];}\nD[217] = \"����������������������������������������������������������������貮貯貰貱貲貳貴貵貶買貸貹貺費貼貽貾貿賀賁賂賃賄賅賆資賈賉賊賋賌賍賎賏賐賑賒賓賔賕賖賗賘賙賚賛賜賝賞賟賠賡賢賣賤賥賦賧賨賩質賫賬�賭賮賯賰賱賲賳賴賵賶賷賸賹賺賻購賽賾賿贀贁贂贃贄贅贆贇贈贉贊贋贌贍佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼�\".split(\"\");\nfor(j = 0; j != D[217].length; ++j) if(D[217][j].charCodeAt(0) !== 0xFFFD) { e[D[217][j]] = 55552 + j; d[55552 + j] = D[217][j];}\nD[218] = \"����������������������������������������������������������������贎贏贐贑贒贓贔贕贖贗贘贙贚贛贜贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸赹赺赻赼赽赾赿趀趂趃趆趇趈趉趌趍趎趏趐趒趓趕趖趗趘趙趚趛趜趝趞趠趡�趢趤趥趦趧趨趩趪趫趬趭趮趯趰趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺�\".split(\"\");\nfor(j = 0; j != D[218].length; ++j) if(D[218][j].charCodeAt(0) !== 0xFFFD) { e[D[218][j]] = 55808 + j; d[55808 + j] = D[218][j];}\nD[219] = \"����������������������������������������������������������������跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾跿踀踁踂踃踄踆踇踈踋踍踎踐踑踒踓踕踖踗踘踙踚踛踜踠踡踤踥踦踧踨踫踭踰踲踳踴踶踷踸踻踼踾�踿蹃蹅蹆蹌蹍蹎蹏蹐蹓蹔蹕蹖蹗蹘蹚蹛蹜蹝蹞蹟蹠蹡蹢蹣蹤蹥蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝�\".split(\"\");\nfor(j = 0; j != D[219].length; ++j) if(D[219][j].charCodeAt(0) !== 0xFFFD) { e[D[219][j]] = 56064 + j; d[56064 + j] = D[219][j];}\nD[220] = \"����������������������������������������������������������������蹳蹵蹷蹸蹹蹺蹻蹽蹾躀躂躃躄躆躈躉躊躋躌躍躎躑躒躓躕躖躗躘躙躚躛躝躟躠躡躢躣躤躥躦躧躨躩躪躭躮躰躱躳躴躵躶躷躸躹躻躼躽躾躿軀軁軂�軃軄軅軆軇軈軉車軋軌軍軏軐軑軒軓軔軕軖軗軘軙軚軛軜軝軞軟軠軡転軣軤堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥�\".split(\"\");\nfor(j = 0; j != D[220].length; ++j) if(D[220][j].charCodeAt(0) !== 0xFFFD) { e[D[220][j]] = 56320 + j; d[56320 + j] = D[220][j];}\nD[221] = \"����������������������������������������������������������������軥軦軧軨軩軪軫軬軭軮軯軰軱軲軳軴軵軶軷軸軹軺軻軼軽軾軿輀輁輂較輄輅輆輇輈載輊輋輌輍輎輏輐輑輒輓輔輕輖輗輘輙輚輛輜輝輞輟輠輡輢輣�輤輥輦輧輨輩輪輫輬輭輮輯輰輱輲輳輴輵輶輷輸輹輺輻輼輽輾輿轀轁轂轃轄荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺�\".split(\"\");\nfor(j = 0; j != D[221].length; ++j) if(D[221][j].charCodeAt(0) !== 0xFFFD) { e[D[221][j]] = 56576 + j; d[56576 + j] = D[221][j];}\nD[222] = \"����������������������������������������������������������������轅轆轇轈轉轊轋轌轍轎轏轐轑轒轓轔轕轖轗轘轙轚轛轜轝轞轟轠轡轢轣轤轥轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆�迉迊迋迌迍迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖�\".split(\"\");\nfor(j = 0; j != D[222].length; ++j) if(D[222][j].charCodeAt(0) !== 0xFFFD) { e[D[222][j]] = 56832 + j; d[56832 + j] = D[222][j];}\nD[223] = \"����������������������������������������������������������������這逜連逤逥逧逨逩逪逫逬逰週進逳逴逷逹逺逽逿遀遃遅遆遈遉遊運遌過達違遖遙遚遜遝遞遟遠遡遤遦遧適遪遫遬遯遰遱遲遳遶遷選遹遺遻遼遾邁�還邅邆邇邉邊邌邍邎邏邐邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼�\".split(\"\");\nfor(j = 0; j != D[223].length; ++j) if(D[223][j].charCodeAt(0) !== 0xFFFD) { e[D[223][j]] = 57088 + j; d[57088 + j] = D[223][j];}\nD[224] = \"����������������������������������������������������������������郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅鄆鄇鄈鄉鄊鄋鄌鄍鄎鄏鄐鄑鄒鄓鄔鄕鄖鄗鄘鄚鄛鄜�鄝鄟鄠鄡鄤鄥鄦鄧鄨鄩鄪鄫鄬鄭鄮鄰鄲鄳鄴鄵鄶鄷鄸鄺鄻鄼鄽鄾鄿酀酁酂酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼�\".split(\"\");\nfor(j = 0; j != D[224].length; ++j) if(D[224][j].charCodeAt(0) !== 0xFFFD) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j];}\nD[225] = \"����������������������������������������������������������������酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀醁醂醃醄醆醈醊醎醏醓醔醕醖醗醘醙醜醝醞醟醠醡醤醥醦醧醨醩醫醬醰醱醲醳醶醷醸醹醻�醼醽醾醿釀釁釂釃釄釅釆釈釋釐釒釓釔釕釖釗釘釙釚釛針釞釟釠釡釢釣釤釥帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺�\".split(\"\");\nfor(j = 0; j != D[225].length; ++j) if(D[225][j].charCodeAt(0) !== 0xFFFD) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j];}\nD[226] = \"����������������������������������������������������������������釦釧釨釩釪釫釬釭釮釯釰釱釲釳釴釵釶釷釸釹釺釻釼釽釾釿鈀鈁鈂鈃鈄鈅鈆鈇鈈鈉鈊鈋鈌鈍鈎鈏鈐鈑鈒鈓鈔鈕鈖鈗鈘鈙鈚鈛鈜鈝鈞鈟鈠鈡鈢鈣鈤�鈥鈦鈧鈨鈩鈪鈫鈬鈭鈮鈯鈰鈱鈲鈳鈴鈵鈶鈷鈸鈹鈺鈻鈼鈽鈾鈿鉀鉁鉂鉃鉄鉅狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧饨饩饪饫饬饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂�\".split(\"\");\nfor(j = 0; j != D[226].length; ++j) if(D[226][j].charCodeAt(0) !== 0xFFFD) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j];}\nD[227] = \"����������������������������������������������������������������鉆鉇鉈鉉鉊鉋鉌鉍鉎鉏鉐鉑鉒鉓鉔鉕鉖鉗鉘鉙鉚鉛鉜鉝鉞鉟鉠鉡鉢鉣鉤鉥鉦鉧鉨鉩鉪鉫鉬鉭鉮鉯鉰鉱鉲鉳鉵鉶鉷鉸鉹鉺鉻鉼鉽鉾鉿銀銁銂銃銄銅�銆銇銈銉銊銋銌銍銏銐銑銒銓銔銕銖銗銘銙銚銛銜銝銞銟銠銡銢銣銤銥銦銧恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾�\".split(\"\");\nfor(j = 0; j != D[227].length; ++j) if(D[227][j].charCodeAt(0) !== 0xFFFD) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j];}\nD[228] = \"����������������������������������������������������������������銨銩銪銫銬銭銯銰銱銲銳銴銵銶銷銸銹銺銻銼銽銾銿鋀鋁鋂鋃鋄鋅鋆鋇鋉鋊鋋鋌鋍鋎鋏鋐鋑鋒鋓鋔鋕鋖鋗鋘鋙鋚鋛鋜鋝鋞鋟鋠鋡鋢鋣鋤鋥鋦鋧鋨�鋩鋪鋫鋬鋭鋮鋯鋰鋱鋲鋳鋴鋵鋶鋷鋸鋹鋺鋻鋼鋽鋾鋿錀錁錂錃錄錅錆錇錈錉洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑�\".split(\"\");\nfor(j = 0; j != D[228].length; ++j) if(D[228][j].charCodeAt(0) !== 0xFFFD) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j];}\nD[229] = \"����������������������������������������������������������������錊錋錌錍錎錏錐錑錒錓錔錕錖錗錘錙錚錛錜錝錞錟錠錡錢錣錤錥錦錧錨錩錪錫錬錭錮錯錰錱録錳錴錵錶錷錸錹錺錻錼錽錿鍀鍁鍂鍃鍄鍅鍆鍇鍈鍉�鍊鍋鍌鍍鍎鍏鍐鍑鍒鍓鍔鍕鍖鍗鍘鍙鍚鍛鍜鍝鍞鍟鍠鍡鍢鍣鍤鍥鍦鍧鍨鍩鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣�\".split(\"\");\nfor(j = 0; j != D[229].length; ++j) if(D[229][j].charCodeAt(0) !== 0xFFFD) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j];}\nD[230] = \"����������������������������������������������������������������鍬鍭鍮鍯鍰鍱鍲鍳鍴鍵鍶鍷鍸鍹鍺鍻鍼鍽鍾鍿鎀鎁鎂鎃鎄鎅鎆鎇鎈鎉鎊鎋鎌鎍鎎鎐鎑鎒鎓鎔鎕鎖鎗鎘鎙鎚鎛鎜鎝鎞鎟鎠鎡鎢鎣鎤鎥鎦鎧鎨鎩鎪鎫�鎬鎭鎮鎯鎰鎱鎲鎳鎴鎵鎶鎷鎸鎹鎺鎻鎼鎽鎾鎿鏀鏁鏂鏃鏄鏅鏆鏇鏈鏉鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩�\".split(\"\");\nfor(j = 0; j != D[230].length; ++j) if(D[230][j].charCodeAt(0) !== 0xFFFD) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j];}\nD[231] = \"����������������������������������������������������������������鏎鏏鏐鏑鏒鏓鏔鏕鏗鏘鏙鏚鏛鏜鏝鏞鏟鏠鏡鏢鏣鏤鏥鏦鏧鏨鏩鏪鏫鏬鏭鏮鏯鏰鏱鏲鏳鏴鏵鏶鏷鏸鏹鏺鏻鏼鏽鏾鏿鐀鐁鐂鐃鐄鐅鐆鐇鐈鐉鐊鐋鐌鐍�鐎鐏鐐鐑鐒鐓鐔鐕鐖鐗鐘鐙鐚鐛鐜鐝鐞鐟鐠鐡鐢鐣鐤鐥鐦鐧鐨鐩鐪鐫鐬鐭鐮纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡缢缣缤缥缦缧缪缫缬缭缯缰缱缲缳缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬�\".split(\"\");\nfor(j = 0; j != D[231].length; ++j) if(D[231][j].charCodeAt(0) !== 0xFFFD) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j];}\nD[232] = \"����������������������������������������������������������������鐯鐰鐱鐲鐳鐴鐵鐶鐷鐸鐹鐺鐻鐼鐽鐿鑀鑁鑂鑃鑄鑅鑆鑇鑈鑉鑊鑋鑌鑍鑎鑏鑐鑑鑒鑓鑔鑕鑖鑗鑘鑙鑚鑛鑜鑝鑞鑟鑠鑡鑢鑣鑤鑥鑦鑧鑨鑩鑪鑬鑭鑮鑯�鑰鑱鑲鑳鑴鑵鑶鑷鑸鑹鑺鑻鑼鑽鑾鑿钀钁钂钃钄钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹�\".split(\"\");\nfor(j = 0; j != D[232].length; ++j) if(D[232][j].charCodeAt(0) !== 0xFFFD) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j];}\nD[233] = \"����������������������������������������������������������������锧锳锽镃镈镋镕镚镠镮镴镵長镸镹镺镻镼镽镾門閁閂閃閄閅閆閇閈閉閊開閌閍閎閏閐閑閒間閔閕閖閗閘閙閚閛閜閝閞閟閠閡関閣閤閥閦閧閨閩閪�閫閬閭閮閯閰閱閲閳閴閵閶閷閸閹閺閻閼閽閾閿闀闁闂闃闄闅闆闇闈闉闊闋椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋�\".split(\"\");\nfor(j = 0; j != D[233].length; ++j) if(D[233][j].charCodeAt(0) !== 0xFFFD) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j];}\nD[234] = \"����������������������������������������������������������������闌闍闎闏闐闑闒闓闔闕闖闗闘闙闚闛關闝闞闟闠闡闢闣闤闥闦闧闬闿阇阓阘阛阞阠阣阤阥阦阧阨阩阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗�陘陙陚陜陝陞陠陣陥陦陫陭陮陯陰陱陳陸陹険陻陼陽陾陿隀隁隂隃隄隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰�\".split(\"\");\nfor(j = 0; j != D[234].length; ++j) if(D[234][j].charCodeAt(0) !== 0xFFFD) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j];}\nD[235] = \"����������������������������������������������������������������隌階隑隒隓隕隖隚際隝隞隟隠隡隢隣隤隥隦隨隩險隫隬隭隮隯隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖雗雘雙雚雛雜雝雞雟雡離難雤雥雦雧雫�雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗霘霙霚霛霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻�\".split(\"\");\nfor(j = 0; j != D[235].length; ++j) if(D[235][j].charCodeAt(0) !== 0xFFFD) { e[D[235][j]] = 60160 + j; d[60160 + j] = D[235][j];}\nD[236] = \"����������������������������������������������������������������霡霢霣霤霥霦霧霨霩霫霬霮霯霱霳霴霵霶霷霺霻霼霽霿靀靁靂靃靄靅靆靇靈靉靊靋靌靍靎靏靐靑靔靕靗靘靚靜靝靟靣靤靦靧靨靪靫靬靭靮靯靰靱�靲靵靷靸靹靺靻靽靾靿鞀鞁鞂鞃鞄鞆鞇鞈鞉鞊鞌鞎鞏鞐鞓鞕鞖鞗鞙鞚鞛鞜鞝臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐�\".split(\"\");\nfor(j = 0; j != D[236].length; ++j) if(D[236][j].charCodeAt(0) !== 0xFFFD) { e[D[236][j]] = 60416 + j; d[60416 + j] = D[236][j];}\nD[237] = \"����������������������������������������������������������������鞞鞟鞡鞢鞤鞥鞦鞧鞨鞩鞪鞬鞮鞰鞱鞳鞵鞶鞷鞸鞹鞺鞻鞼鞽鞾鞿韀韁韂韃韄韅韆韇韈韉韊韋韌韍韎韏韐韑韒韓韔韕韖韗韘韙韚韛韜韝韞韟韠韡韢韣�韤韥韨韮韯韰韱韲韴韷韸韹韺韻韼韽韾響頀頁頂頃頄項順頇須頉頊頋頌頍頎怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨�\".split(\"\");\nfor(j = 0; j != D[237].length; ++j) if(D[237][j].charCodeAt(0) !== 0xFFFD) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j];}\nD[238] = \"����������������������������������������������������������������頏預頑頒頓頔頕頖頗領頙頚頛頜頝頞頟頠頡頢頣頤頥頦頧頨頩頪頫頬頭頮頯頰頱頲頳頴頵頶頷頸頹頺頻頼頽頾頿顀顁顂顃顄顅顆顇顈顉顊顋題額�顎顏顐顑顒顓顔顕顖顗願顙顚顛顜顝類顟顠顡顢顣顤顥顦顧顨顩顪顫顬顭顮睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶钷钸钹钺钼钽钿铄铈铉铊铋铌铍铎铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪�\".split(\"\");\nfor(j = 0; j != D[238].length; ++j) if(D[238][j].charCodeAt(0) !== 0xFFFD) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j];}\nD[239] = \"����������������������������������������������������������������顯顰顱顲顳顴颋颎颒颕颙颣風颩颪颫颬颭颮颯颰颱颲颳颴颵颶颷颸颹颺颻颼颽颾颿飀飁飂飃飄飅飆飇飈飉飊飋飌飍飏飐飔飖飗飛飜飝飠飡飢飣飤�飥飦飩飪飫飬飭飮飯飰飱飲飳飴飵飶飷飸飹飺飻飼飽飾飿餀餁餂餃餄餅餆餇铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒锓锔锕锖锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤镥镦镧镨镩镪镫镬镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔�\".split(\"\");\nfor(j = 0; j != D[239].length; ++j) if(D[239][j].charCodeAt(0) !== 0xFFFD) { e[D[239][j]] = 61184 + j; d[61184 + j] = D[239][j];}\nD[240] = \"����������������������������������������������������������������餈餉養餋餌餎餏餑餒餓餔餕餖餗餘餙餚餛餜餝餞餟餠餡餢餣餤餥餦餧館餩餪餫餬餭餯餰餱餲餳餴餵餶餷餸餹餺餻餼餽餾餿饀饁饂饃饄饅饆饇饈饉�饊饋饌饍饎饏饐饑饒饓饖饗饘饙饚饛饜饝饞饟饠饡饢饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨鸩鸪鸫鸬鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦鹧鹨鹩鹪鹫鹬鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙�\".split(\"\");\nfor(j = 0; j != D[240].length; ++j) if(D[240][j].charCodeAt(0) !== 0xFFFD) { e[D[240][j]] = 61440 + j; d[61440 + j] = D[240][j];}\nD[241] = \"����������������������������������������������������������������馌馎馚馛馜馝馞馟馠馡馢馣馤馦馧馩馪馫馬馭馮馯馰馱馲馳馴馵馶馷馸馹馺馻馼馽馾馿駀駁駂駃駄駅駆駇駈駉駊駋駌駍駎駏駐駑駒駓駔駕駖駗駘�駙駚駛駜駝駞駟駠駡駢駣駤駥駦駧駨駩駪駫駬駭駮駯駰駱駲駳駴駵駶駷駸駹瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃�\".split(\"\");\nfor(j = 0; j != D[241].length; ++j) if(D[241][j].charCodeAt(0) !== 0xFFFD) { e[D[241][j]] = 61696 + j; d[61696 + j] = D[241][j];}\nD[242] = \"����������������������������������������������������������������駺駻駼駽駾駿騀騁騂騃騄騅騆騇騈騉騊騋騌騍騎騏騐騑騒験騔騕騖騗騘騙騚騛騜騝騞騟騠騡騢騣騤騥騦騧騨騩騪騫騬騭騮騯騰騱騲騳騴騵騶騷騸�騹騺騻騼騽騾騿驀驁驂驃驄驅驆驇驈驉驊驋驌驍驎驏驐驑驒驓驔驕驖驗驘驙颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒�\".split(\"\");\nfor(j = 0; j != D[242].length; ++j) if(D[242][j].charCodeAt(0) !== 0xFFFD) { e[D[242][j]] = 61952 + j; d[61952 + j] = D[242][j];}\nD[243] = \"����������������������������������������������������������������驚驛驜驝驞驟驠驡驢驣驤驥驦驧驨驩驪驫驲骃骉骍骎骔骕骙骦骩骪骫骬骭骮骯骲骳骴骵骹骻骽骾骿髃髄髆髇髈髉髊髍髎髏髐髒體髕髖髗髙髚髛髜�髝髞髠髢髣髤髥髧髨髩髪髬髮髰髱髲髳髴髵髶髷髸髺髼髽髾髿鬀鬁鬂鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋�\".split(\"\");\nfor(j = 0; j != D[243].length; ++j) if(D[243][j].charCodeAt(0) !== 0xFFFD) { e[D[243][j]] = 62208 + j; d[62208 + j] = D[243][j];}\nD[244] = \"����������������������������������������������������������������鬇鬉鬊鬋鬌鬍鬎鬐鬑鬒鬔鬕鬖鬗鬘鬙鬚鬛鬜鬝鬞鬠鬡鬢鬤鬥鬦鬧鬨鬩鬪鬫鬬鬭鬮鬰鬱鬳鬴鬵鬶鬷鬸鬹鬺鬽鬾鬿魀魆魊魋魌魎魐魒魓魕魖魗魘魙魚�魛魜魝魞魟魠魡魢魣魤魥魦魧魨魩魪魫魬魭魮魯魰魱魲魳魴魵魶魷魸魹魺魻簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤�\".split(\"\");\nfor(j = 0; j != D[244].length; ++j) if(D[244][j].charCodeAt(0) !== 0xFFFD) { e[D[244][j]] = 62464 + j; d[62464 + j] = D[244][j];}\nD[245] = \"����������������������������������������������������������������魼魽魾魿鮀鮁鮂鮃鮄鮅鮆鮇鮈鮉鮊鮋鮌鮍鮎鮏鮐鮑鮒鮓鮔鮕鮖鮗鮘鮙鮚鮛鮜鮝鮞鮟鮠鮡鮢鮣鮤鮥鮦鮧鮨鮩鮪鮫鮬鮭鮮鮯鮰鮱鮲鮳鮴鮵鮶鮷鮸鮹鮺�鮻鮼鮽鮾鮿鯀鯁鯂鯃鯄鯅鯆鯇鯈鯉鯊鯋鯌鯍鯎鯏鯐鯑鯒鯓鯔鯕鯖鯗鯘鯙鯚鯛酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜�\".split(\"\");\nfor(j = 0; j != D[245].length; ++j) if(D[245][j].charCodeAt(0) !== 0xFFFD) { e[D[245][j]] = 62720 + j; d[62720 + j] = D[245][j];}\nD[246] = \"����������������������������������������������������������������鯜鯝鯞鯟鯠鯡鯢鯣鯤鯥鯦鯧鯨鯩鯪鯫鯬鯭鯮鯯鯰鯱鯲鯳鯴鯵鯶鯷鯸鯹鯺鯻鯼鯽鯾鯿鰀鰁鰂鰃鰄鰅鰆鰇鰈鰉鰊鰋鰌鰍鰎鰏鰐鰑鰒鰓鰔鰕鰖鰗鰘鰙鰚�鰛鰜鰝鰞鰟鰠鰡鰢鰣鰤鰥鰦鰧鰨鰩鰪鰫鰬鰭鰮鰯鰰鰱鰲鰳鰴鰵鰶鰷鰸鰹鰺鰻觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅龆龇龈龉龊龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞鲟鲠鲡鲢鲣鲥鲦鲧鲨鲩鲫鲭鲮鲰鲱鲲鲳鲴鲵鲶鲷鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋�\".split(\"\");\nfor(j = 0; j != D[246].length; ++j) if(D[246][j].charCodeAt(0) !== 0xFFFD) { e[D[246][j]] = 62976 + j; d[62976 + j] = D[246][j];}\nD[247] = \"����������������������������������������������������������������鰼鰽鰾鰿鱀鱁鱂鱃鱄鱅鱆鱇鱈鱉鱊鱋鱌鱍鱎鱏鱐鱑鱒鱓鱔鱕鱖鱗鱘鱙鱚鱛鱜鱝鱞鱟鱠鱡鱢鱣鱤鱥鱦鱧鱨鱩鱪鱫鱬鱭鱮鱯鱰鱱鱲鱳鱴鱵鱶鱷鱸鱹鱺�鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾鲿鳀鳁鳂鳈鳉鳑鳒鳚鳛鳠鳡鳌鳍鳎鳏鳐鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄�\".split(\"\");\nfor(j = 0; j != D[247].length; ++j) if(D[247][j].charCodeAt(0) !== 0xFFFD) { e[D[247][j]] = 63232 + j; d[63232 + j] = D[247][j];}\nD[248] = \"����������������������������������������������������������������鳣鳤鳥鳦鳧鳨鳩鳪鳫鳬鳭鳮鳯鳰鳱鳲鳳鳴鳵鳶鳷鳸鳹鳺鳻鳼鳽鳾鳿鴀鴁鴂鴃鴄鴅鴆鴇鴈鴉鴊鴋鴌鴍鴎鴏鴐鴑鴒鴓鴔鴕鴖鴗鴘鴙鴚鴛鴜鴝鴞鴟鴠鴡�鴢鴣鴤鴥鴦鴧鴨鴩鴪鴫鴬鴭鴮鴯鴰鴱鴲鴳鴴鴵鴶鴷鴸鴹鴺鴻鴼鴽鴾鴿鵀鵁鵂�����������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[248].length; ++j) if(D[248][j].charCodeAt(0) !== 0xFFFD) { e[D[248][j]] = 63488 + j; d[63488 + j] = D[248][j];}\nD[249] = \"����������������������������������������������������������������鵃鵄鵅鵆鵇鵈鵉鵊鵋鵌鵍鵎鵏鵐鵑鵒鵓鵔鵕鵖鵗鵘鵙鵚鵛鵜鵝鵞鵟鵠鵡鵢鵣鵤鵥鵦鵧鵨鵩鵪鵫鵬鵭鵮鵯鵰鵱鵲鵳鵴鵵鵶鵷鵸鵹鵺鵻鵼鵽鵾鵿鶀鶁�鶂鶃鶄鶅鶆鶇鶈鶉鶊鶋鶌鶍鶎鶏鶐鶑鶒鶓鶔鶕鶖鶗鶘鶙鶚鶛鶜鶝鶞鶟鶠鶡鶢�����������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[249].length; ++j) if(D[249][j].charCodeAt(0) !== 0xFFFD) { e[D[249][j]] = 63744 + j; d[63744 + j] = D[249][j];}\nD[250] = \"����������������������������������������������������������������鶣鶤鶥鶦鶧鶨鶩鶪鶫鶬鶭鶮鶯鶰鶱鶲鶳鶴鶵鶶鶷鶸鶹鶺鶻鶼鶽鶾鶿鷀鷁鷂鷃鷄鷅鷆鷇鷈鷉鷊鷋鷌鷍鷎鷏鷐鷑鷒鷓鷔鷕鷖鷗鷘鷙鷚鷛鷜鷝鷞鷟鷠鷡�鷢鷣鷤鷥鷦鷧鷨鷩鷪鷫鷬鷭鷮鷯鷰鷱鷲鷳鷴鷵鷶鷷鷸鷹鷺鷻鷼鷽鷾鷿鸀鸁鸂�����������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[250].length; ++j) if(D[250][j].charCodeAt(0) !== 0xFFFD) { e[D[250][j]] = 64000 + j; d[64000 + j] = D[250][j];}\nD[251] = \"����������������������������������������������������������������鸃鸄鸅鸆鸇鸈鸉鸊鸋鸌鸍鸎鸏鸐鸑鸒鸓鸔鸕鸖鸗鸘鸙鸚鸛鸜鸝鸞鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴鹵鹶鹷鹸鹹鹺鹻鹼鹽麀�麁麃麄麅麆麉麊麌麍麎麏麐麑麔麕麖麗麘麙麚麛麜麞麠麡麢麣麤麥麧麨麩麪�����������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[251].length; ++j) if(D[251][j].charCodeAt(0) !== 0xFFFD) { e[D[251][j]] = 64256 + j; d[64256 + j] = D[251][j];}\nD[252] = \"����������������������������������������������������������������麫麬麭麮麯麰麱麲麳麵麶麷麹麺麼麿黀黁黂黃黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰黱黲黳黴黵黶黷黸黺黽黿鼀鼁鼂鼃鼄鼅�鼆鼇鼈鼉鼊鼌鼏鼑鼒鼔鼕鼖鼘鼚鼛鼜鼝鼞鼟鼡鼣鼤鼥鼦鼧鼨鼩鼪鼫鼭鼮鼰鼱�����������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[252].length; ++j) if(D[252][j].charCodeAt(0) !== 0xFFFD) { e[D[252][j]] = 64512 + j; d[64512 + j] = D[252][j];}\nD[253] = \"����������������������������������������������������������������鼲鼳鼴鼵鼶鼸鼺鼼鼿齀齁齂齃齅齆齇齈齉齊齋齌齍齎齏齒齓齔齕齖齗齘齙齚齛齜齝齞齟齠齡齢齣齤齥齦齧齨齩齪齫齬齭齮齯齰齱齲齳齴齵齶齷齸�齹齺齻齼齽齾龁龂龍龎龏龐龑龒龓龔龕龖龗龘龜龝龞龡龢龣龤龥郎凉秊裏隣�����������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[253].length; ++j) if(D[253][j].charCodeAt(0) !== 0xFFFD) { e[D[253][j]] = 64768 + j; d[64768 + j] = D[253][j];}\nD[254] = \"����������������������������������������������������������������兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[254].length; ++j) if(D[254][j].charCodeAt(0) !== 0xFFFD) { e[D[254][j]] = 65024 + j; d[65024 + j] = D[254][j];}\nreturn {\"enc\": e, \"dec\": d }; })();\ncptable[949] = (function(){ var d = [], e = {}, D = [], j;\nD[0] = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~��������������������������������������������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[0].length; ++j) if(D[0][j].charCodeAt(0) !== 0xFFFD) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j];}\nD[129] = \"�����������������������������������������������������������������갂갃갅갆갋갌갍갎갏갘갞갟갡갢갣갥갦갧갨갩갪갫갮갲갳갴������갵갶갷갺갻갽갾갿걁걂걃걄걅걆걇걈걉걊걌걎걏걐걑걒걓걕������걖걗걙걚걛걝걞걟걠걡걢걣걤걥걦걧걨걩걪걫걬걭걮걯걲걳걵걶걹걻걼걽걾걿겂겇겈겍겎겏겑겒겓겕겖겗겘겙겚겛겞겢겣겤겥겦겧겫겭겮겱겲겳겴겵겶겷겺겾겿곀곂곃곅곆곇곉곊곋곍곎곏곐곑곒곓곔곖곘곙곚곛곜곝곞곟곢곣곥곦곩곫곭곮곲곴곷곸곹곺곻곾곿괁괂괃괅괇괈괉괊괋괎괐괒괓�\".split(\"\");\nfor(j = 0; j != D[129].length; ++j) if(D[129][j].charCodeAt(0) !== 0xFFFD) { e[D[129][j]] = 33024 + j; d[33024 + j] = D[129][j];}\nD[130] = \"�����������������������������������������������������������������괔괕괖괗괙괚괛괝괞괟괡괢괣괤괥괦괧괨괪괫괮괯괰괱괲괳������괶괷괹괺괻괽괾괿굀굁굂굃굆굈굊굋굌굍굎굏굑굒굓굕굖굗������굙굚굛굜굝굞굟굠굢굤굥굦굧굨굩굪굫굮굯굱굲굷굸굹굺굾궀궃궄궅궆궇궊궋궍궎궏궑궒궓궔궕궖궗궘궙궚궛궞궟궠궡궢궣궥궦궧궨궩궪궫궬궭궮궯궰궱궲궳궴궵궶궸궹궺궻궼궽궾궿귂귃귅귆귇귉귊귋귌귍귎귏귒귔귕귖귗귘귙귚귛귝귞귟귡귢귣귥귦귧귨귩귪귫귬귭귮귯귰귱귲귳귴귵귶귷�\".split(\"\");\nfor(j = 0; j != D[130].length; ++j) if(D[130][j].charCodeAt(0) !== 0xFFFD) { e[D[130][j]] = 33280 + j; d[33280 + j] = D[130][j];}\nD[131] = \"�����������������������������������������������������������������귺귻귽귾긂긃긄긅긆긇긊긌긎긏긐긑긒긓긕긖긗긘긙긚긛긜������긝긞긟긠긡긢긣긤긥긦긧긨긩긪긫긬긭긮긯긲긳긵긶긹긻긼������긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗깘깙깚깛깞깢깣깤깦깧깪깫깭깮깯깱깲깳깴깵깶깷깺깾깿꺀꺁꺂꺃꺆꺇꺈꺉꺊꺋꺍꺎꺏꺐꺑꺒꺓꺔꺕꺖꺗꺘꺙꺚꺛꺜꺝꺞꺟꺠꺡꺢꺣꺤꺥꺦꺧꺨꺩꺪꺫꺬꺭꺮꺯꺰꺱꺲꺳꺴꺵꺶꺷꺸꺹꺺꺻꺿껁껂껃껅껆껇껈껉껊껋껎껒껓껔껕껖껗껚껛껝껞껟껠껡껢껣껤껥�\".split(\"\");\nfor(j = 0; j != D[131].length; ++j) if(D[131][j].charCodeAt(0) !== 0xFFFD) { e[D[131][j]] = 33536 + j; d[33536 + j] = D[131][j];}\nD[132] = \"�����������������������������������������������������������������껦껧껩껪껬껮껯껰껱껲껳껵껶껷껹껺껻껽껾껿꼀꼁꼂꼃꼄꼅������꼆꼉꼊꼋꼌꼎꼏꼑꼒꼓꼔꼕꼖꼗꼘꼙꼚꼛꼜꼝꼞꼟꼠꼡꼢꼣������꼤꼥꼦꼧꼨꼩꼪꼫꼮꼯꼱꼳꼵꼶꼷꼸꼹꼺꼻꼾꽀꽄꽅꽆꽇꽊꽋꽌꽍꽎꽏꽑꽒꽓꽔꽕꽖꽗꽘꽙꽚꽛꽞꽟꽠꽡꽢꽣꽦꽧꽨꽩꽪꽫꽬꽭꽮꽯꽰꽱꽲꽳꽴꽵꽶꽷꽸꽺꽻꽼꽽꽾꽿꾁꾂꾃꾅꾆꾇꾉꾊꾋꾌꾍꾎꾏꾒꾓꾔꾖꾗꾘꾙꾚꾛꾝꾞꾟꾠꾡꾢꾣꾤꾥꾦꾧꾨꾩꾪꾫꾬꾭꾮꾯꾰꾱꾲꾳꾴꾵꾶꾷꾺꾻꾽꾾�\".split(\"\");\nfor(j = 0; j != D[132].length; ++j) if(D[132][j].charCodeAt(0) !== 0xFFFD) { e[D[132][j]] = 33792 + j; d[33792 + j] = D[132][j];}\nD[133] = \"�����������������������������������������������������������������꾿꿁꿂꿃꿄꿅꿆꿊꿌꿏꿐꿑꿒꿓꿕꿖꿗꿘꿙꿚꿛꿝꿞꿟꿠꿡������꿢꿣꿤꿥꿦꿧꿪꿫꿬꿭꿮꿯꿲꿳꿵꿶꿷꿹꿺꿻꿼꿽꿾꿿뀂뀃������뀅뀆뀇뀈뀉뀊뀋뀍뀎뀏뀑뀒뀓뀕뀖뀗뀘뀙뀚뀛뀞뀟뀠뀡뀢뀣뀤뀥뀦뀧뀩뀪뀫뀬뀭뀮뀯뀰뀱뀲뀳뀴뀵뀶뀷뀸뀹뀺뀻뀼뀽뀾뀿끀끁끂끃끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞끟끠끡끢끣끤끥끦끧끨끩끪끫끬끭끮끯끰끱끲끳끴끵끶끷끸끹끺끻끾끿낁낂낃낅낆낇낈낉낊낋낎낐낒낓낔낕낖낗낛낝낞낣낤�\".split(\"\");\nfor(j = 0; j != D[133].length; ++j) if(D[133][j].charCodeAt(0) !== 0xFFFD) { e[D[133][j]] = 34048 + j; d[34048 + j] = D[133][j];}\nD[134] = \"�����������������������������������������������������������������낥낦낧낪낰낲낶낷낹낺낻낽낾낿냀냁냂냃냆냊냋냌냍냎냏냒������냓냕냖냗냙냚냛냜냝냞냟냡냢냣냤냦냧냨냩냪냫냬냭냮냯냰������냱냲냳냴냵냶냷냸냹냺냻냼냽냾냿넀넁넂넃넄넅넆넇넊넍넎넏넑넔넕넖넗넚넞넟넠넡넢넦넧넩넪넫넭넮넯넰넱넲넳넶넺넻넼넽넾넿녂녃녅녆녇녉녊녋녌녍녎녏녒녓녖녗녙녚녛녝녞녟녡녢녣녤녥녦녧녨녩녪녫녬녭녮녯녰녱녲녳녴녵녶녷녺녻녽녾녿놁놃놄놅놆놇놊놌놎놏놐놑놕놖놗놙놚놛놝�\".split(\"\");\nfor(j = 0; j != D[134].length; ++j) if(D[134][j].charCodeAt(0) !== 0xFFFD) { e[D[134][j]] = 34304 + j; d[34304 + j] = D[134][j];}\nD[135] = \"�����������������������������������������������������������������놞놟놠놡놢놣놤놥놦놧놩놪놫놬놭놮놯놰놱놲놳놴놵놶놷놸������놹놺놻놼놽놾놿뇀뇁뇂뇃뇄뇅뇆뇇뇈뇉뇊뇋뇍뇎뇏뇑뇒뇓뇕������뇖뇗뇘뇙뇚뇛뇞뇠뇡뇢뇣뇤뇥뇦뇧뇪뇫뇭뇮뇯뇱뇲뇳뇴뇵뇶뇷뇸뇺뇼뇾뇿눀눁눂눃눆눇눉눊눍눎눏눐눑눒눓눖눘눚눛눜눝눞눟눡눢눣눤눥눦눧눨눩눪눫눬눭눮눯눰눱눲눳눵눶눷눸눹눺눻눽눾눿뉀뉁뉂뉃뉄뉅뉆뉇뉈뉉뉊뉋뉌뉍뉎뉏뉐뉑뉒뉓뉔뉕뉖뉗뉙뉚뉛뉝뉞뉟뉡뉢뉣뉤뉥뉦뉧뉪뉫뉬뉭뉮�\".split(\"\");\nfor(j = 0; j != D[135].length; ++j) if(D[135][j].charCodeAt(0) !== 0xFFFD) { e[D[135][j]] = 34560 + j; d[34560 + j] = D[135][j];}\nD[136] = \"�����������������������������������������������������������������뉯뉰뉱뉲뉳뉶뉷뉸뉹뉺뉻뉽뉾뉿늀늁늂늃늆늇늈늊늋늌늍늎������늏늒늓늕늖늗늛늜늝늞늟늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷������늸늹늺늻늼늽늾늿닀닁닂닃닄닅닆닇닊닋닍닎닏닑닓닔닕닖닗닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉댊댋댌댍댎댏댒댖댗댘댙댚댛댝댞댟댠댡댢댣댤댥댦댧댨댩댪댫댬댭댮댯댰댱댲댳댴댵댶댷댸댹댺댻댼댽댾댿덀덁덂덃덄덅덆덇덈덉덊덋덌덍덎덏덐덑덒덓덗덙덚덝덠덡덢덣�\".split(\"\");\nfor(j = 0; j != D[136].length; ++j) if(D[136][j].charCodeAt(0) !== 0xFFFD) { e[D[136][j]] = 34816 + j; d[34816 + j] = D[136][j];}\nD[137] = \"�����������������������������������������������������������������덦덨덪덬덭덯덲덳덵덶덷덹덺덻덼덽덾덿뎂뎆뎇뎈뎉뎊뎋뎍������뎎뎏뎑뎒뎓뎕뎖뎗뎘뎙뎚뎛뎜뎝뎞뎟뎢뎣뎤뎥뎦뎧뎩뎪뎫뎭������뎮뎯뎰뎱뎲뎳뎴뎵뎶뎷뎸뎹뎺뎻뎼뎽뎾뎿돀돁돂돃돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩돪돫돬돭돮돯돰돱돲돳돴돵돶돷돸돹돺돻돽돾돿됀됁됂됃됄됅됆됇됈됉됊됋됌됍됎됏됑됒됓됔됕됖됗됙됚됛됝됞됟됡됢됣됤됥됦됧됪됬됭됮됯됰됱됲됳됵됶됷됸됹됺됻됼됽됾됿둀둁둂둃둄�\".split(\"\");\nfor(j = 0; j != D[137].length; ++j) if(D[137][j].charCodeAt(0) !== 0xFFFD) { e[D[137][j]] = 35072 + j; d[35072 + j] = D[137][j];}\nD[138] = \"�����������������������������������������������������������������둅둆둇둈둉둊둋둌둍둎둏둒둓둕둖둗둙둚둛둜둝둞둟둢둤둦������둧둨둩둪둫둭둮둯둰둱둲둳둴둵둶둷둸둹둺둻둼둽둾둿뒁뒂������뒃뒄뒅뒆뒇뒉뒊뒋뒌뒍뒎뒏뒐뒑뒒뒓뒔뒕뒖뒗뒘뒙뒚뒛뒜뒞뒟뒠뒡뒢뒣뒥뒦뒧뒩뒪뒫뒭뒮뒯뒰뒱뒲뒳뒴뒶뒸뒺뒻뒼뒽뒾뒿듁듂듃듅듆듇듉듊듋듌듍듎듏듑듒듓듔듖듗듘듙듚듛듞듟듡듢듥듧듨듩듪듫듮듰듲듳듴듵듶듷듹듺듻듼듽듾듿딀딁딂딃딄딅딆딇딈딉딊딋딌딍딎딏딐딑딒딓딖딗딙딚딝�\".split(\"\");\nfor(j = 0; j != D[138].length; ++j) if(D[138][j].charCodeAt(0) !== 0xFFFD) { e[D[138][j]] = 35328 + j; d[35328 + j] = D[138][j];}\nD[139] = \"�����������������������������������������������������������������딞딟딠딡딢딣딦딫딬딭딮딯딲딳딵딶딷딹딺딻딼딽딾딿땂땆������땇땈땉땊땎땏땑땒땓땕땖땗땘땙땚땛땞땢땣땤땥땦땧땨땩땪������땫땬땭땮땯땰땱땲땳땴땵땶땷땸땹땺땻땼땽땾땿떀떁떂떃떄떅떆떇떈떉떊떋떌떍떎떏떐떑떒떓떔떕떖떗떘떙떚떛떜떝떞떟떢떣떥떦떧떩떬떭떮떯떲떶떷떸떹떺떾떿뗁뗂뗃뗅뗆뗇뗈뗉뗊뗋뗎뗒뗓뗔뗕뗖뗗뗙뗚뗛뗜뗝뗞뗟뗠뗡뗢뗣뗤뗥뗦뗧뗨뗩뗪뗫뗭뗮뗯뗰뗱뗲뗳뗴뗵뗶뗷뗸뗹뗺뗻뗼뗽뗾뗿�\".split(\"\");\nfor(j = 0; j != D[139].length; ++j) if(D[139][j].charCodeAt(0) !== 0xFFFD) { e[D[139][j]] = 35584 + j; d[35584 + j] = D[139][j];}\nD[140] = \"�����������������������������������������������������������������똀똁똂똃똄똅똆똇똈똉똊똋똌똍똎똏똒똓똕똖똗똙똚똛똜똝������똞똟똠똡똢똣똤똦똧똨똩똪똫똭똮똯똰똱똲똳똵똶똷똸똹똺������똻똼똽똾똿뙀뙁뙂뙃뙄뙅뙆뙇뙉뙊뙋뙌뙍뙎뙏뙐뙑뙒뙓뙔뙕뙖뙗뙘뙙뙚뙛뙜뙝뙞뙟뙠뙡뙢뙣뙥뙦뙧뙩뙪뙫뙬뙭뙮뙯뙰뙱뙲뙳뙴뙵뙶뙷뙸뙹뙺뙻뙼뙽뙾뙿뚀뚁뚂뚃뚄뚅뚆뚇뚈뚉뚊뚋뚌뚍뚎뚏뚐뚑뚒뚓뚔뚕뚖뚗뚘뚙뚚뚛뚞뚟뚡뚢뚣뚥뚦뚧뚨뚩뚪뚭뚮뚯뚰뚲뚳뚴뚵뚶뚷뚸뚹뚺뚻뚼뚽뚾뚿뛀뛁뛂�\".split(\"\");\nfor(j = 0; j != D[140].length; ++j) if(D[140][j].charCodeAt(0) !== 0xFFFD) { e[D[140][j]] = 35840 + j; d[35840 + j] = D[140][j];}\nD[141] = \"�����������������������������������������������������������������뛃뛄뛅뛆뛇뛈뛉뛊뛋뛌뛍뛎뛏뛐뛑뛒뛓뛕뛖뛗뛘뛙뛚뛛뛜뛝������뛞뛟뛠뛡뛢뛣뛤뛥뛦뛧뛨뛩뛪뛫뛬뛭뛮뛯뛱뛲뛳뛵뛶뛷뛹뛺������뛻뛼뛽뛾뛿뜂뜃뜄뜆뜇뜈뜉뜊뜋뜌뜍뜎뜏뜐뜑뜒뜓뜔뜕뜖뜗뜘뜙뜚뜛뜜뜝뜞뜟뜠뜡뜢뜣뜤뜥뜦뜧뜪뜫뜭뜮뜱뜲뜳뜴뜵뜶뜷뜺뜼뜽뜾뜿띀띁띂띃띅띆띇띉띊띋띍띎띏띐띑띒띓띖띗띘띙띚띛띜띝띞띟띡띢띣띥띦띧띩띪띫띬띭띮띯띲띴띶띷띸띹띺띻띾띿랁랂랃랅랆랇랈랉랊랋랎랓랔랕랚랛랝랞�\".split(\"\");\nfor(j = 0; j != D[141].length; ++j) if(D[141][j].charCodeAt(0) !== 0xFFFD) { e[D[141][j]] = 36096 + j; d[36096 + j] = D[141][j];}\nD[142] = \"�����������������������������������������������������������������랟랡랢랣랤랥랦랧랪랮랯랰랱랲랳랶랷랹랺랻랼랽랾랿럀럁������럂럃럄럅럆럈럊럋럌럍럎럏럐럑럒럓럔럕럖럗럘럙럚럛럜럝������럞럟럠럡럢럣럤럥럦럧럨럩럪럫럮럯럱럲럳럵럶럷럸럹럺럻럾렂렃렄렅렆렊렋렍렎렏렑렒렓렔렕렖렗렚렜렞렟렠렡렢렣렦렧렩렪렫렭렮렯렰렱렲렳렶렺렻렼렽렾렿롁롂롃롅롆롇롈롉롊롋롌롍롎롏롐롒롔롕롖롗롘롙롚롛롞롟롡롢롣롥롦롧롨롩롪롫롮롰롲롳롴롵롶롷롹롺롻롽롾롿뢀뢁뢂뢃뢄�\".split(\"\");\nfor(j = 0; j != D[142].length; ++j) if(D[142][j].charCodeAt(0) !== 0xFFFD) { e[D[142][j]] = 36352 + j; d[36352 + j] = D[142][j];}\nD[143] = \"�����������������������������������������������������������������뢅뢆뢇뢈뢉뢊뢋뢌뢎뢏뢐뢑뢒뢓뢔뢕뢖뢗뢘뢙뢚뢛뢜뢝뢞뢟������뢠뢡뢢뢣뢤뢥뢦뢧뢩뢪뢫뢬뢭뢮뢯뢱뢲뢳뢵뢶뢷뢹뢺뢻뢼뢽������뢾뢿룂룄룆룇룈룉룊룋룍룎룏룑룒룓룕룖룗룘룙룚룛룜룞룠룢룣룤룥룦룧룪룫룭룮룯룱룲룳룴룵룶룷룺룼룾룿뤀뤁뤂뤃뤅뤆뤇뤈뤉뤊뤋뤌뤍뤎뤏뤐뤑뤒뤓뤔뤕뤖뤗뤙뤚뤛뤜뤝뤞뤟뤡뤢뤣뤤뤥뤦뤧뤨뤩뤪뤫뤬뤭뤮뤯뤰뤱뤲뤳뤴뤵뤶뤷뤸뤹뤺뤻뤾뤿륁륂륃륅륆륇륈륉륊륋륍륎륐륒륓륔륕륖륗�\".split(\"\");\nfor(j = 0; j != D[143].length; ++j) if(D[143][j].charCodeAt(0) !== 0xFFFD) { e[D[143][j]] = 36608 + j; d[36608 + j] = D[143][j];}\nD[144] = \"�����������������������������������������������������������������륚륛륝륞륟륡륢륣륤륥륦륧륪륬륮륯륰륱륲륳륶륷륹륺륻륽������륾륿릀릁릂릃릆릈릋릌릏릐릑릒릓릔릕릖릗릘릙릚릛릜릝릞������릟릠릡릢릣릤릥릦릧릨릩릪릫릮릯릱릲릳릵릶릷릸릹릺릻릾맀맂맃맄맅맆맇맊맋맍맓맔맕맖맗맚맜맟맠맢맦맧맩맪맫맭맮맯맰맱맲맳맶맻맼맽맾맿먂먃먄먅먆먇먉먊먋먌먍먎먏먐먑먒먓먔먖먗먘먙먚먛먜먝먞먟먠먡먢먣먤먥먦먧먨먩먪먫먬먭먮먯먰먱먲먳먴먵먶먷먺먻먽먾먿멁멃멄멅멆�\".split(\"\");\nfor(j = 0; j != D[144].length; ++j) if(D[144][j].charCodeAt(0) !== 0xFFFD) { e[D[144][j]] = 36864 + j; d[36864 + j] = D[144][j];}\nD[145] = \"�����������������������������������������������������������������멇멊멌멏멐멑멒멖멗멙멚멛멝멞멟멠멡멢멣멦멪멫멬멭멮멯������멲멳멵멶멷멹멺멻멼멽멾멿몀몁몂몆몈몉몊몋몍몎몏몐몑몒������몓몔몕몖몗몘몙몚몛몜몝몞몟몠몡몢몣몤몥몦몧몪몭몮몯몱몳몴몵몶몷몺몼몾몿뫀뫁뫂뫃뫅뫆뫇뫉뫊뫋뫌뫍뫎뫏뫐뫑뫒뫓뫔뫕뫖뫗뫚뫛뫜뫝뫞뫟뫠뫡뫢뫣뫤뫥뫦뫧뫨뫩뫪뫫뫬뫭뫮뫯뫰뫱뫲뫳뫴뫵뫶뫷뫸뫹뫺뫻뫽뫾뫿묁묂묃묅묆묇묈묉묊묋묌묎묐묒묓묔묕묖묗묙묚묛묝묞묟묡묢묣묤묥묦묧�\".split(\"\");\nfor(j = 0; j != D[145].length; ++j) if(D[145][j].charCodeAt(0) !== 0xFFFD) { e[D[145][j]] = 37120 + j; d[37120 + j] = D[145][j];}\nD[146] = \"�����������������������������������������������������������������묨묪묬묭묮묯묰묱묲묳묷묹묺묿뭀뭁뭂뭃뭆뭈뭊뭋뭌뭎뭑뭒������뭓뭕뭖뭗뭙뭚뭛뭜뭝뭞뭟뭠뭢뭤뭥뭦뭧뭨뭩뭪뭫뭭뭮뭯뭰뭱������뭲뭳뭴뭵뭶뭷뭸뭹뭺뭻뭼뭽뭾뭿뮀뮁뮂뮃뮄뮅뮆뮇뮉뮊뮋뮍뮎뮏뮑뮒뮓뮔뮕뮖뮗뮘뮙뮚뮛뮜뮝뮞뮟뮠뮡뮢뮣뮥뮦뮧뮩뮪뮫뮭뮮뮯뮰뮱뮲뮳뮵뮶뮸뮹뮺뮻뮼뮽뮾뮿믁믂믃믅믆믇믉믊믋믌믍믎믏믑믒믔믕믖믗믘믙믚믛믜믝믞믟믠믡믢믣믤믥믦믧믨믩믪믫믬믭믮믯믰믱믲믳믴믵믶믷믺믻믽믾밁�\".split(\"\");\nfor(j = 0; j != D[146].length; ++j) if(D[146][j].charCodeAt(0) !== 0xFFFD) { e[D[146][j]] = 37376 + j; d[37376 + j] = D[146][j];}\nD[147] = \"�����������������������������������������������������������������밃밄밅밆밇밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵������밶밷밹밺밻밼밽밾밿뱂뱆뱇뱈뱊뱋뱎뱏뱑뱒뱓뱔뱕뱖뱗뱘뱙������뱚뱛뱜뱞뱟뱠뱡뱢뱣뱤뱥뱦뱧뱨뱩뱪뱫뱬뱭뱮뱯뱰뱱뱲뱳뱴뱵뱶뱷뱸뱹뱺뱻뱼뱽뱾뱿벀벁벂벃벆벇벉벊벍벏벐벑벒벓벖벘벛벜벝벞벟벢벣벥벦벩벪벫벬벭벮벯벲벶벷벸벹벺벻벾벿볁볂볃볅볆볇볈볉볊볋볌볎볒볓볔볖볗볙볚볛볝볞볟볠볡볢볣볤볥볦볧볨볩볪볫볬볭볮볯볰볱볲볳볷볹볺볻볽�\".split(\"\");\nfor(j = 0; j != D[147].length; ++j) if(D[147][j].charCodeAt(0) !== 0xFFFD) { e[D[147][j]] = 37632 + j; d[37632 + j] = D[147][j];}\nD[148] = \"�����������������������������������������������������������������볾볿봀봁봂봃봆봈봊봋봌봍봎봏봑봒봓봕봖봗봘봙봚봛봜봝������봞봟봠봡봢봣봥봦봧봨봩봪봫봭봮봯봰봱봲봳봴봵봶봷봸봹������봺봻봼봽봾봿뵁뵂뵃뵄뵅뵆뵇뵊뵋뵍뵎뵏뵑뵒뵓뵔뵕뵖뵗뵚뵛뵜뵝뵞뵟뵠뵡뵢뵣뵥뵦뵧뵩뵪뵫뵬뵭뵮뵯뵰뵱뵲뵳뵴뵵뵶뵷뵸뵹뵺뵻뵼뵽뵾뵿붂붃붅붆붋붌붍붎붏붒붔붖붗붘붛붝붞붟붠붡붢붣붥붦붧붨붩붪붫붬붭붮붯붱붲붳붴붵붶붷붹붺붻붼붽붾붿뷀뷁뷂뷃뷄뷅뷆뷇뷈뷉뷊뷋뷌뷍뷎뷏뷐뷑�\".split(\"\");\nfor(j = 0; j != D[148].length; ++j) if(D[148][j].charCodeAt(0) !== 0xFFFD) { e[D[148][j]] = 37888 + j; d[37888 + j] = D[148][j];}\nD[149] = \"�����������������������������������������������������������������뷒뷓뷖뷗뷙뷚뷛뷝뷞뷟뷠뷡뷢뷣뷤뷥뷦뷧뷨뷪뷫뷬뷭뷮뷯뷱������뷲뷳뷵뷶뷷뷹뷺뷻뷼뷽뷾뷿븁븂븄븆븇븈븉븊븋븎븏븑븒븓������븕븖븗븘븙븚븛븞븠븡븢븣븤븥븦븧븨븩븪븫븬븭븮븯븰븱븲븳븴븵븶븷븸븹븺븻븼븽븾븿빀빁빂빃빆빇빉빊빋빍빏빐빑빒빓빖빘빜빝빞빟빢빣빥빦빧빩빫빬빭빮빯빲빶빷빸빹빺빾빿뺁뺂뺃뺅뺆뺇뺈뺉뺊뺋뺎뺒뺓뺔뺕뺖뺗뺚뺛뺜뺝뺞뺟뺠뺡뺢뺣뺤뺥뺦뺧뺩뺪뺫뺬뺭뺮뺯뺰뺱뺲뺳뺴뺵뺶뺷�\".split(\"\");\nfor(j = 0; j != D[149].length; ++j) if(D[149][j].charCodeAt(0) !== 0xFFFD) { e[D[149][j]] = 38144 + j; d[38144 + j] = D[149][j];}\nD[150] = \"�����������������������������������������������������������������뺸뺹뺺뺻뺼뺽뺾뺿뻀뻁뻂뻃뻄뻅뻆뻇뻈뻉뻊뻋뻌뻍뻎뻏뻒뻓������뻕뻖뻙뻚뻛뻜뻝뻞뻟뻡뻢뻦뻧뻨뻩뻪뻫뻭뻮뻯뻰뻱뻲뻳뻴뻵������뻶뻷뻸뻹뻺뻻뻼뻽뻾뻿뼀뼂뼃뼄뼅뼆뼇뼊뼋뼌뼍뼎뼏뼐뼑뼒뼓뼔뼕뼖뼗뼚뼞뼟뼠뼡뼢뼣뼤뼥뼦뼧뼨뼩뼪뼫뼬뼭뼮뼯뼰뼱뼲뼳뼴뼵뼶뼷뼸뼹뼺뼻뼼뼽뼾뼿뽂뽃뽅뽆뽇뽉뽊뽋뽌뽍뽎뽏뽒뽓뽔뽖뽗뽘뽙뽚뽛뽜뽝뽞뽟뽠뽡뽢뽣뽤뽥뽦뽧뽨뽩뽪뽫뽬뽭뽮뽯뽰뽱뽲뽳뽴뽵뽶뽷뽸뽹뽺뽻뽼뽽뽾뽿뾀뾁뾂�\".split(\"\");\nfor(j = 0; j != D[150].length; ++j) if(D[150][j].charCodeAt(0) !== 0xFFFD) { e[D[150][j]] = 38400 + j; d[38400 + j] = D[150][j];}\nD[151] = \"�����������������������������������������������������������������뾃뾄뾅뾆뾇뾈뾉뾊뾋뾌뾍뾎뾏뾐뾑뾒뾓뾕뾖뾗뾘뾙뾚뾛뾜뾝������뾞뾟뾠뾡뾢뾣뾤뾥뾦뾧뾨뾩뾪뾫뾬뾭뾮뾯뾱뾲뾳뾴뾵뾶뾷뾸������뾹뾺뾻뾼뾽뾾뾿뿀뿁뿂뿃뿄뿆뿇뿈뿉뿊뿋뿎뿏뿑뿒뿓뿕뿖뿗뿘뿙뿚뿛뿝뿞뿠뿢뿣뿤뿥뿦뿧뿨뿩뿪뿫뿬뿭뿮뿯뿰뿱뿲뿳뿴뿵뿶뿷뿸뿹뿺뿻뿼뿽뿾뿿쀀쀁쀂쀃쀄쀅쀆쀇쀈쀉쀊쀋쀌쀍쀎쀏쀐쀑쀒쀓쀔쀕쀖쀗쀘쀙쀚쀛쀜쀝쀞쀟쀠쀡쀢쀣쀤쀥쀦쀧쀨쀩쀪쀫쀬쀭쀮쀯쀰쀱쀲쀳쀴쀵쀶쀷쀸쀹쀺쀻쀽쀾쀿�\".split(\"\");\nfor(j = 0; j != D[151].length; ++j) if(D[151][j].charCodeAt(0) !== 0xFFFD) { e[D[151][j]] = 38656 + j; d[38656 + j] = D[151][j];}\nD[152] = \"�����������������������������������������������������������������쁀쁁쁂쁃쁄쁅쁆쁇쁈쁉쁊쁋쁌쁍쁎쁏쁐쁒쁓쁔쁕쁖쁗쁙쁚쁛������쁝쁞쁟쁡쁢쁣쁤쁥쁦쁧쁪쁫쁬쁭쁮쁯쁰쁱쁲쁳쁴쁵쁶쁷쁸쁹������쁺쁻쁼쁽쁾쁿삀삁삂삃삄삅삆삇삈삉삊삋삌삍삎삏삒삓삕삖삗삙삚삛삜삝삞삟삢삤삦삧삨삩삪삫삮삱삲삷삸삹삺삻삾샂샃샄샆샇샊샋샍샎샏샑샒샓샔샕샖샗샚샞샟샠샡샢샣샦샧샩샪샫샭샮샯샰샱샲샳샶샸샺샻샼샽샾샿섁섂섃섅섆섇섉섊섋섌섍섎섏섑섒섓섔섖섗섘섙섚섛섡섢섥섨섩섪섫섮�\".split(\"\");\nfor(j = 0; j != D[152].length; ++j) if(D[152][j].charCodeAt(0) !== 0xFFFD) { e[D[152][j]] = 38912 + j; d[38912 + j] = D[152][j];}\nD[153] = \"�����������������������������������������������������������������섲섳섴섵섷섺섻섽섾섿셁셂셃셄셅셆셇셊셎셏셐셑셒셓셖셗������셙셚셛셝셞셟셠셡셢셣셦셪셫셬셭셮셯셱셲셳셵셶셷셹셺셻������셼셽셾셿솀솁솂솃솄솆솇솈솉솊솋솏솑솒솓솕솗솘솙솚솛솞솠솢솣솤솦솧솪솫솭솮솯솱솲솳솴솵솶솷솸솹솺솻솼솾솿쇀쇁쇂쇃쇅쇆쇇쇉쇊쇋쇍쇎쇏쇐쇑쇒쇓쇕쇖쇙쇚쇛쇜쇝쇞쇟쇡쇢쇣쇥쇦쇧쇩쇪쇫쇬쇭쇮쇯쇲쇴쇵쇶쇷쇸쇹쇺쇻쇾쇿숁숂숃숅숆숇숈숉숊숋숎숐숒숓숔숕숖숗숚숛숝숞숡숢숣�\".split(\"\");\nfor(j = 0; j != D[153].length; ++j) if(D[153][j].charCodeAt(0) !== 0xFFFD) { e[D[153][j]] = 39168 + j; d[39168 + j] = D[153][j];}\nD[154] = \"�����������������������������������������������������������������숤숥숦숧숪숬숮숰숳숵숶숷숸숹숺숻숼숽숾숿쉀쉁쉂쉃쉄쉅������쉆쉇쉉쉊쉋쉌쉍쉎쉏쉒쉓쉕쉖쉗쉙쉚쉛쉜쉝쉞쉟쉡쉢쉣쉤쉦������쉧쉨쉩쉪쉫쉮쉯쉱쉲쉳쉵쉶쉷쉸쉹쉺쉻쉾슀슂슃슄슅슆슇슊슋슌슍슎슏슑슒슓슔슕슖슗슙슚슜슞슟슠슡슢슣슦슧슩슪슫슮슯슰슱슲슳슶슸슺슻슼슽슾슿싀싁싂싃싄싅싆싇싈싉싊싋싌싍싎싏싐싑싒싓싔싕싖싗싘싙싚싛싞싟싡싢싥싦싧싨싩싪싮싰싲싳싴싵싷싺싽싾싿쌁쌂쌃쌄쌅쌆쌇쌊쌋쌎쌏�\".split(\"\");\nfor(j = 0; j != D[154].length; ++j) if(D[154][j].charCodeAt(0) !== 0xFFFD) { e[D[154][j]] = 39424 + j; d[39424 + j] = D[154][j];}\nD[155] = \"�����������������������������������������������������������������쌐쌑쌒쌖쌗쌙쌚쌛쌝쌞쌟쌠쌡쌢쌣쌦쌧쌪쌫쌬쌭쌮쌯쌰쌱쌲������쌳쌴쌵쌶쌷쌸쌹쌺쌻쌼쌽쌾쌿썀썁썂썃썄썆썇썈썉썊썋썌썍������썎썏썐썑썒썓썔썕썖썗썘썙썚썛썜썝썞썟썠썡썢썣썤썥썦썧썪썫썭썮썯썱썳썴썵썶썷썺썻썾썿쎀쎁쎂쎃쎅쎆쎇쎉쎊쎋쎍쎎쎏쎐쎑쎒쎓쎔쎕쎖쎗쎘쎙쎚쎛쎜쎝쎞쎟쎠쎡쎢쎣쎤쎥쎦쎧쎨쎩쎪쎫쎬쎭쎮쎯쎰쎱쎲쎳쎴쎵쎶쎷쎸쎹쎺쎻쎼쎽쎾쎿쏁쏂쏃쏄쏅쏆쏇쏈쏉쏊쏋쏌쏍쏎쏏쏐쏑쏒쏓쏔쏕쏖쏗쏚�\".split(\"\");\nfor(j = 0; j != D[155].length; ++j) if(D[155][j].charCodeAt(0) !== 0xFFFD) { e[D[155][j]] = 39680 + j; d[39680 + j] = D[155][j];}\nD[156] = \"�����������������������������������������������������������������쏛쏝쏞쏡쏣쏤쏥쏦쏧쏪쏫쏬쏮쏯쏰쏱쏲쏳쏶쏷쏹쏺쏻쏼쏽쏾������쏿쐀쐁쐂쐃쐄쐅쐆쐇쐉쐊쐋쐌쐍쐎쐏쐑쐒쐓쐔쐕쐖쐗쐘쐙쐚������쐛쐜쐝쐞쐟쐠쐡쐢쐣쐥쐦쐧쐨쐩쐪쐫쐭쐮쐯쐱쐲쐳쐵쐶쐷쐸쐹쐺쐻쐾쐿쑀쑁쑂쑃쑄쑅쑆쑇쑉쑊쑋쑌쑍쑎쑏쑐쑑쑒쑓쑔쑕쑖쑗쑘쑙쑚쑛쑜쑝쑞쑟쑠쑡쑢쑣쑦쑧쑩쑪쑫쑭쑮쑯쑰쑱쑲쑳쑶쑷쑸쑺쑻쑼쑽쑾쑿쒁쒂쒃쒄쒅쒆쒇쒈쒉쒊쒋쒌쒍쒎쒏쒐쒑쒒쒓쒕쒖쒗쒘쒙쒚쒛쒝쒞쒟쒠쒡쒢쒣쒤쒥쒦쒧쒨쒩�\".split(\"\");\nfor(j = 0; j != D[156].length; ++j) if(D[156][j].charCodeAt(0) !== 0xFFFD) { e[D[156][j]] = 39936 + j; d[39936 + j] = D[156][j];}\nD[157] = \"�����������������������������������������������������������������쒪쒫쒬쒭쒮쒯쒰쒱쒲쒳쒴쒵쒶쒷쒹쒺쒻쒽쒾쒿쓀쓁쓂쓃쓄쓅������쓆쓇쓈쓉쓊쓋쓌쓍쓎쓏쓐쓑쓒쓓쓔쓕쓖쓗쓘쓙쓚쓛쓜쓝쓞쓟������쓠쓡쓢쓣쓤쓥쓦쓧쓨쓪쓫쓬쓭쓮쓯쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂씃씄씅씆씇씈씉씊씋씍씎씏씑씒씓씕씖씗씘씙씚씛씝씞씟씠씡씢씣씤씥씦씧씪씫씭씮씯씱씲씳씴씵씶씷씺씼씾씿앀앁앂앃앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩앪앫앬앭앮앯앲앶앷앸앹앺앻앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔�\".split(\"\");\nfor(j = 0; j != D[157].length; ++j) if(D[157][j].charCodeAt(0) !== 0xFFFD) { e[D[157][j]] = 40192 + j; d[40192 + j] = D[157][j];}\nD[158] = \"�����������������������������������������������������������������얖얙얚얛얝얞얟얡얢얣얤얥얦얧얨얪얫얬얭얮얯얰얱얲얳얶������얷얺얿엀엁엂엃엋엍엏엒엓엕엖엗엙엚엛엜엝엞엟엢엤엦엧������엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑옒옓옔옕옖옗옚옝옞옟옠옡옢옣옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉왊왋왌왍왎왏왒왖왗왘왙왚왛왞왟왡왢왣왤왥왦왧왨왩왪왫왭왮왰왲왳왴왵왶왷왺왻왽왾왿욁욂욃욄욅욆욇욊욌욎욏욐욑욒욓욖욗욙욚욛욝욞욟욠욡욢욣욦�\".split(\"\");\nfor(j = 0; j != D[158].length; ++j) if(D[158][j].charCodeAt(0) !== 0xFFFD) { e[D[158][j]] = 40448 + j; d[40448 + j] = D[158][j];}\nD[159] = \"�����������������������������������������������������������������욨욪욫욬욭욮욯욲욳욵욶욷욻욼욽욾욿웂웄웆웇웈웉웊웋웎������웏웑웒웓웕웖웗웘웙웚웛웞웟웢웣웤웥웦웧웪웫웭웮웯웱웲������웳웴웵웶웷웺웻웼웾웿윀윁윂윃윆윇윉윊윋윍윎윏윐윑윒윓윖윘윚윛윜윝윞윟윢윣윥윦윧윩윪윫윬윭윮윯윲윴윶윸윹윺윻윾윿읁읂읃읅읆읇읈읉읋읎읐읙읚읛읝읞읟읡읢읣읤읥읦읧읩읪읬읭읮읯읰읱읲읳읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛잜잝잞잟잢잧잨잩잪잫잮잯잱잲잳잵잶잷�\".split(\"\");\nfor(j = 0; j != D[159].length; ++j) if(D[159][j].charCodeAt(0) !== 0xFFFD) { e[D[159][j]] = 40704 + j; d[40704 + j] = D[159][j];}\nD[160] = \"�����������������������������������������������������������������잸잹잺잻잾쟂쟃쟄쟅쟆쟇쟊쟋쟍쟏쟑쟒쟓쟔쟕쟖쟗쟙쟚쟛쟜������쟞쟟쟠쟡쟢쟣쟥쟦쟧쟩쟪쟫쟭쟮쟯쟰쟱쟲쟳쟴쟵쟶쟷쟸쟹쟺������쟻쟼쟽쟾쟿젂젃젅젆젇젉젋젌젍젎젏젒젔젗젘젙젚젛젞젟젡젢젣젥젦젧젨젩젪젫젮젰젲젳젴젵젶젷젹젺젻젽젾젿졁졂졃졄졅졆졇졊졋졎졏졐졑졒졓졕졖졗졘졙졚졛졜졝졞졟졠졡졢졣졤졥졦졧졨졩졪졫졬졭졮졯졲졳졵졶졷졹졻졼졽졾졿좂좄좈좉좊좎좏좐좑좒좓좕좖좗좘좙좚좛좜좞좠좢좣좤�\".split(\"\");\nfor(j = 0; j != D[160].length; ++j) if(D[160][j].charCodeAt(0) !== 0xFFFD) { e[D[160][j]] = 40960 + j; d[40960 + j] = D[160][j];}\nD[161] = \"�����������������������������������������������������������������좥좦좧좩좪좫좬좭좮좯좰좱좲좳좴좵좶좷좸좹좺좻좾좿죀죁������죂죃죅죆죇죉죊죋죍죎죏죐죑죒죓죖죘죚죛죜죝죞죟죢죣죥������죦죧죨죩죪죫죬죭죮죯죰죱죲죳죴죶죷죸죹죺죻죾죿줁줂줃줇줈줉줊줋줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈〉《》「」『』【】±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢�\".split(\"\");\nfor(j = 0; j != D[161].length; ++j) if(D[161][j].charCodeAt(0) !== 0xFFFD) { e[D[161][j]] = 41216 + j; d[41216 + j] = D[161][j];}\nD[162] = \"�����������������������������������������������������������������줐줒줓줔줕줖줗줙줚줛줜줝줞줟줠줡줢줣줤줥줦줧줨줩줪줫������줭줮줯줰줱줲줳줵줶줷줸줹줺줻줼줽줾줿쥀쥁쥂쥃쥄쥅쥆쥇������쥈쥉쥊쥋쥌쥍쥎쥏쥒쥓쥕쥖쥗쥙쥚쥛쥜쥝쥞쥟쥢쥤쥥쥦쥧쥨쥩쥪쥫쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®������������������������\".split(\"\");\nfor(j = 0; j != D[162].length; ++j) if(D[162][j].charCodeAt(0) !== 0xFFFD) { e[D[162][j]] = 41472 + j; d[41472 + j] = D[162][j];}\nD[163] = \"�����������������������������������������������������������������쥱쥲쥳쥵쥶쥷쥸쥹쥺쥻쥽쥾쥿즀즁즂즃즄즅즆즇즊즋즍즎즏������즑즒즓즔즕즖즗즚즜즞즟즠즡즢즣즤즥즦즧즨즩즪즫즬즭즮������즯즰즱즲즳즴즵즶즷즸즹즺즻즼즽즾즿짂짃짅짆짉짋짌짍짎짏짒짔짗짘짛！＂＃＄％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［￦］＾＿｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝￣�\".split(\"\");\nfor(j = 0; j != D[163].length; ++j) if(D[163][j].charCodeAt(0) !== 0xFFFD) { e[D[163][j]] = 41728 + j; d[41728 + j] = D[163][j];}\nD[164] = \"�����������������������������������������������������������������짞짟짡짣짥짦짨짩짪짫짮짲짳짴짵짶짷짺짻짽짾짿쨁쨂쨃쨄������쨅쨆쨇쨊쨎쨏쨐쨑쨒쨓쨕쨖쨗쨙쨚쨛쨜쨝쨞쨟쨠쨡쨢쨣쨤쨥������쨦쨧쨨쨪쨫쨬쨭쨮쨯쨰쨱쨲쨳쨴쨵쨶쨷쨸쨹쨺쨻쨼쨽쨾쨿쩀쩁쩂쩃쩄쩅쩆ㄱㄲㄳㄴㄵㄶㄷㄸㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅃㅄㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅣㅤㅥㅦㅧㅨㅩㅪㅫㅬㅭㅮㅯㅰㅱㅲㅳㅴㅵㅶㅷㅸㅹㅺㅻㅼㅽㅾㅿㆀㆁㆂㆃㆄㆅㆆㆇㆈㆉㆊㆋㆌㆍㆎ�\".split(\"\");\nfor(j = 0; j != D[164].length; ++j) if(D[164][j].charCodeAt(0) !== 0xFFFD) { e[D[164][j]] = 41984 + j; d[41984 + j] = D[164][j];}\nD[165] = \"�����������������������������������������������������������������쩇쩈쩉쩊쩋쩎쩏쩑쩒쩓쩕쩖쩗쩘쩙쩚쩛쩞쩢쩣쩤쩥쩦쩧쩩쩪������쩫쩬쩭쩮쩯쩰쩱쩲쩳쩴쩵쩶쩷쩸쩹쩺쩻쩼쩾쩿쪀쪁쪂쪃쪅쪆������쪇쪈쪉쪊쪋쪌쪍쪎쪏쪐쪑쪒쪓쪔쪕쪖쪗쪙쪚쪛쪜쪝쪞쪟쪠쪡쪢쪣쪤쪥쪦쪧ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹ�����ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩ�������ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ��������αβγδεζηθικλμνξοπρστυφχψω�������\".split(\"\");\nfor(j = 0; j != D[165].length; ++j) if(D[165][j].charCodeAt(0) !== 0xFFFD) { e[D[165][j]] = 42240 + j; d[42240 + j] = D[165][j];}\nD[166] = \"�����������������������������������������������������������������쪨쪩쪪쪫쪬쪭쪮쪯쪰쪱쪲쪳쪴쪵쪶쪷쪸쪹쪺쪻쪾쪿쫁쫂쫃쫅������쫆쫇쫈쫉쫊쫋쫎쫐쫒쫔쫕쫖쫗쫚쫛쫜쫝쫞쫟쫡쫢쫣쫤쫥쫦쫧������쫨쫩쫪쫫쫭쫮쫯쫰쫱쫲쫳쫵쫶쫷쫸쫹쫺쫻쫼쫽쫾쫿쬀쬁쬂쬃쬄쬅쬆쬇쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃╄╅╆╇╈╉╊���������������������������\".split(\"\");\nfor(j = 0; j != D[166].length; ++j) if(D[166][j].charCodeAt(0) !== 0xFFFD) { e[D[166][j]] = 42496 + j; d[42496 + j] = D[166][j];}\nD[167] = \"�����������������������������������������������������������������쬋쬌쬍쬎쬏쬑쬒쬓쬕쬖쬗쬙쬚쬛쬜쬝쬞쬟쬢쬣쬤쬥쬦쬧쬨쬩������쬪쬫쬬쬭쬮쬯쬰쬱쬲쬳쬴쬵쬶쬷쬸쬹쬺쬻쬼쬽쬾쬿쭀쭂쭃쭄������쭅쭆쭇쭊쭋쭍쭎쭏쭑쭒쭓쭔쭕쭖쭗쭚쭛쭜쭞쭟쭠쭡쭢쭣쭥쭦쭧쭨쭩쭪쭫쭬㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙㎚㎛㎜㎝㎞㎟㎠㎡㎢㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰㎱㎲㎳㎴㎵㎶㎷㎸㎹㎀㎁㎂㎃㎄㎺㎻㎼㎽㎾㎿㎐㎑㎒㎓㎔Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆����������������\".split(\"\");\nfor(j = 0; j != D[167].length; ++j) if(D[167][j].charCodeAt(0) !== 0xFFFD) { e[D[167][j]] = 42752 + j; d[42752 + j] = D[167][j];}\nD[168] = \"�����������������������������������������������������������������쭭쭮쭯쭰쭱쭲쭳쭴쭵쭶쭷쭺쭻쭼쭽쭾쭿쮀쮁쮂쮃쮄쮅쮆쮇쮈������쮉쮊쮋쮌쮍쮎쮏쮐쮑쮒쮓쮔쮕쮖쮗쮘쮙쮚쮛쮝쮞쮟쮠쮡쮢쮣������쮤쮥쮦쮧쮨쮩쮪쮫쮬쮭쮮쮯쮰쮱쮲쮳쮴쮵쮶쮷쮹쮺쮻쮼쮽쮾쮿쯀쯁쯂쯃쯄ÆÐªĦ�Ĳ�ĿŁØŒºÞŦŊ�㉠㉡㉢㉣㉤㉥㉦㉧㉨㉩㉪㉫㉬㉭㉮㉯㉰㉱㉲㉳㉴㉵㉶㉷㉸㉹㉺㉻ⓐⓑⓒⓓⓔⓕⓖⓗⓘⓙⓚⓛⓜⓝⓞⓟⓠⓡⓢⓣⓤⓥⓦⓧⓨⓩ①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮½⅓⅔¼¾⅛⅜⅝⅞�\".split(\"\");\nfor(j = 0; j != D[168].length; ++j) if(D[168][j].charCodeAt(0) !== 0xFFFD) { e[D[168][j]] = 43008 + j; d[43008 + j] = D[168][j];}\nD[169] = \"�����������������������������������������������������������������쯅쯆쯇쯈쯉쯊쯋쯌쯍쯎쯏쯐쯑쯒쯓쯕쯖쯗쯘쯙쯚쯛쯜쯝쯞쯟������쯠쯡쯢쯣쯥쯦쯨쯪쯫쯬쯭쯮쯯쯰쯱쯲쯳쯴쯵쯶쯷쯸쯹쯺쯻쯼������쯽쯾쯿찀찁찂찃찄찅찆찇찈찉찊찋찎찏찑찒찓찕찖찗찘찙찚찛찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀㈁㈂㈃㈄㈅㈆㈇㈈㈉㈊㈋㈌㈍㈎㈏㈐㈑㈒㈓㈔㈕㈖㈗㈘㈙㈚㈛⒜⒝⒞⒟⒠⒡⒢⒣⒤⒥⒦⒧⒨⒩⒪⒫⒬⒭⒮⒯⒰⒱⒲⒳⒴⒵⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂¹²³⁴ⁿ₁₂₃₄�\".split(\"\");\nfor(j = 0; j != D[169].length; ++j) if(D[169][j].charCodeAt(0) !== 0xFFFD) { e[D[169][j]] = 43264 + j; d[43264 + j] = D[169][j];}\nD[170] = \"�����������������������������������������������������������������찥찦찪찫찭찯찱찲찳찴찵찶찷찺찿챀챁챂챃챆챇챉챊챋챍챎������챏챐챑챒챓챖챚챛챜챝챞챟챡챢챣챥챧챩챪챫챬챭챮챯챱챲������챳챴챶챷챸챹챺챻챼챽챾챿첀첁첂첃첄첅첆첇첈첉첊첋첌첍첎첏첐첑첒첓ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん������������\".split(\"\");\nfor(j = 0; j != D[170].length; ++j) if(D[170][j].charCodeAt(0) !== 0xFFFD) { e[D[170][j]] = 43520 + j; d[43520 + j] = D[170][j];}\nD[171] = \"�����������������������������������������������������������������첔첕첖첗첚첛첝첞첟첡첢첣첤첥첦첧첪첮첯첰첱첲첳첶첷첹������첺첻첽첾첿쳀쳁쳂쳃쳆쳈쳊쳋쳌쳍쳎쳏쳑쳒쳓쳕쳖쳗쳘쳙쳚������쳛쳜쳝쳞쳟쳠쳡쳢쳣쳥쳦쳧쳨쳩쳪쳫쳭쳮쳯쳱쳲쳳쳴쳵쳶쳷쳸쳹쳺쳻쳼쳽ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶ���������\".split(\"\");\nfor(j = 0; j != D[171].length; ++j) if(D[171][j].charCodeAt(0) !== 0xFFFD) { e[D[171][j]] = 43776 + j; d[43776 + j] = D[171][j];}\nD[172] = \"�����������������������������������������������������������������쳾쳿촀촂촃촄촅촆촇촊촋촍촎촏촑촒촓촔촕촖촗촚촜촞촟촠������촡촢촣촥촦촧촩촪촫촭촮촯촰촱촲촳촴촵촶촷촸촺촻촼촽촾������촿쵀쵁쵂쵃쵄쵅쵆쵇쵈쵉쵊쵋쵌쵍쵎쵏쵐쵑쵒쵓쵔쵕쵖쵗쵘쵙쵚쵛쵝쵞쵟АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ���������������абвгдеёжзийклмнопрстуфхцчшщъыьэюя��������������\".split(\"\");\nfor(j = 0; j != D[172].length; ++j) if(D[172][j].charCodeAt(0) !== 0xFFFD) { e[D[172][j]] = 44032 + j; d[44032 + j] = D[172][j];}\nD[173] = \"�����������������������������������������������������������������쵡쵢쵣쵥쵦쵧쵨쵩쵪쵫쵮쵰쵲쵳쵴쵵쵶쵷쵹쵺쵻쵼쵽쵾쵿춀������춁춂춃춄춅춆춇춉춊춋춌춍춎춏춐춑춒춓춖춗춙춚춛춝춞춟������춠춡춢춣춦춨춪춫춬춭춮춯춱춲춳춴춵춶춷춸춹춺춻춼춽춾춿췀췁췂췃췅�����������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[173].length; ++j) if(D[173][j].charCodeAt(0) !== 0xFFFD) { e[D[173][j]] = 44288 + j; d[44288 + j] = D[173][j];}\nD[174] = \"�����������������������������������������������������������������췆췇췈췉췊췋췍췎췏췑췒췓췔췕췖췗췘췙췚췛췜췝췞췟췠췡������췢췣췤췥췦췧췩췪췫췭췮췯췱췲췳췴췵췶췷췺췼췾췿츀츁츂������츃츅츆츇츉츊츋츍츎츏츐츑츒츓츕츖츗츘츚츛츜츝츞츟츢츣츥츦츧츩츪츫�����������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[174].length; ++j) if(D[174][j].charCodeAt(0) !== 0xFFFD) { e[D[174][j]] = 44544 + j; d[44544 + j] = D[174][j];}\nD[175] = \"�����������������������������������������������������������������츬츭츮츯츲츴츶츷츸츹츺츻츼츽츾츿칀칁칂칃칄칅칆칇칈칉������칊칋칌칍칎칏칐칑칒칓칔칕칖칗칚칛칝칞칢칣칤칥칦칧칪칬������칮칯칰칱칲칳칶칷칹칺칻칽칾칿캀캁캂캃캆캈캊캋캌캍캎캏캒캓캕캖캗캙�����������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[175].length; ++j) if(D[175][j].charCodeAt(0) !== 0xFFFD) { e[D[175][j]] = 44800 + j; d[44800 + j] = D[175][j];}\nD[176] = \"�����������������������������������������������������������������캚캛캜캝캞캟캢캦캧캨캩캪캫캮캯캰캱캲캳캴캵캶캷캸캹캺������캻캼캽캾캿컀컂컃컄컅컆컇컈컉컊컋컌컍컎컏컐컑컒컓컔컕������컖컗컘컙컚컛컜컝컞컟컠컡컢컣컦컧컩컪컭컮컯컰컱컲컳컶컺컻컼컽컾컿가각간갇갈갉갊감갑값갓갔강갖갗같갚갛개객갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆�\".split(\"\");\nfor(j = 0; j != D[176].length; ++j) if(D[176][j].charCodeAt(0) !== 0xFFFD) { e[D[176][j]] = 45056 + j; d[45056 + j] = D[176][j];}\nD[177] = \"�����������������������������������������������������������������켂켃켅켆켇켉켊켋켌켍켎켏켒켔켖켗켘켙켚켛켝켞켟켡켢켣������켥켦켧켨켩켪켫켮켲켳켴켵켶켷켹켺켻켼켽켾켿콀콁콂콃콄������콅콆콇콈콉콊콋콌콍콎콏콐콑콒콓콖콗콙콚콛콝콞콟콠콡콢콣콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸�\".split(\"\");\nfor(j = 0; j != D[177].length; ++j) if(D[177][j].charCodeAt(0) !== 0xFFFD) { e[D[177][j]] = 45312 + j; d[45312 + j] = D[177][j];}\nD[178] = \"�����������������������������������������������������������������콭콮콯콲콳콵콶콷콹콺콻콼콽콾콿쾁쾂쾃쾄쾆쾇쾈쾉쾊쾋쾍������쾎쾏쾐쾑쾒쾓쾔쾕쾖쾗쾘쾙쾚쾛쾜쾝쾞쾟쾠쾢쾣쾤쾥쾦쾧쾩������쾪쾫쾬쾭쾮쾯쾱쾲쾳쾴쾵쾶쾷쾸쾹쾺쾻쾼쾽쾾쾿쿀쿁쿂쿃쿅쿆쿇쿈쿉쿊쿋깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙�\".split(\"\");\nfor(j = 0; j != D[178].length; ++j) if(D[178][j].charCodeAt(0) !== 0xFFFD) { e[D[178][j]] = 45568 + j; d[45568 + j] = D[178][j];}\nD[179] = \"�����������������������������������������������������������������쿌쿍쿎쿏쿐쿑쿒쿓쿔쿕쿖쿗쿘쿙쿚쿛쿜쿝쿞쿟쿢쿣쿥쿦쿧쿩������쿪쿫쿬쿭쿮쿯쿲쿴쿶쿷쿸쿹쿺쿻쿽쿾쿿퀁퀂퀃퀅퀆퀇퀈퀉퀊������퀋퀌퀍퀎퀏퀐퀒퀓퀔퀕퀖퀗퀙퀚퀛퀜퀝퀞퀟퀠퀡퀢퀣퀤퀥퀦퀧퀨퀩퀪퀫퀬끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫났낭낮낯낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝�\".split(\"\");\nfor(j = 0; j != D[179].length; ++j) if(D[179][j].charCodeAt(0) !== 0xFFFD) { e[D[179][j]] = 45824 + j; d[45824 + j] = D[179][j];}\nD[180] = \"�����������������������������������������������������������������퀮퀯퀰퀱퀲퀳퀶퀷퀹퀺퀻퀽퀾퀿큀큁큂큃큆큈큊큋큌큍큎큏������큑큒큓큕큖큗큙큚큛큜큝큞큟큡큢큣큤큥큦큧큨큩큪큫큮큯������큱큲큳큵큶큷큸큹큺큻큾큿킀킂킃킄킅킆킇킈킉킊킋킌킍킎킏킐킑킒킓킔뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫달닭닮닯닳담답닷닸당닺닻닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥�\".split(\"\");\nfor(j = 0; j != D[180].length; ++j) if(D[180][j].charCodeAt(0) !== 0xFFFD) { e[D[180][j]] = 46080 + j; d[46080 + j] = D[180][j];}\nD[181] = \"�����������������������������������������������������������������킕킖킗킘킙킚킛킜킝킞킟킠킡킢킣킦킧킩킪킫킭킮킯킰킱킲������킳킶킸킺킻킼킽킾킿탂탃탅탆탇탊탋탌탍탎탏탒탖탗탘탙탚������탛탞탟탡탢탣탥탦탧탨탩탪탫탮탲탳탴탵탶탷탹탺탻탼탽탾탿턀턁턂턃턄덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸�\".split(\"\");\nfor(j = 0; j != D[181].length; ++j) if(D[181][j].charCodeAt(0) !== 0xFFFD) { e[D[181][j]] = 46336 + j; d[46336 + j] = D[181][j];}\nD[182] = \"�����������������������������������������������������������������턅턆턇턈턉턊턋턌턎턏턐턑턒턓턔턕턖턗턘턙턚턛턜턝턞턟������턠턡턢턣턤턥턦턧턨턩턪턫턬턭턮턯턲턳턵턶턷턹턻턼턽턾������턿텂텆텇텈텉텊텋텎텏텑텒텓텕텖텗텘텙텚텛텞텠텢텣텤텥텦텧텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗�\".split(\"\");\nfor(j = 0; j != D[182].length; ++j) if(D[182][j].charCodeAt(0) !== 0xFFFD) { e[D[182][j]] = 46592 + j; d[46592 + j] = D[182][j];}\nD[183] = \"�����������������������������������������������������������������텮텯텰텱텲텳텴텵텶텷텸텹텺텻텽텾텿톀톁톂톃톅톆톇톉톊������톋톌톍톎톏톐톑톒톓톔톕톖톗톘톙톚톛톜톝톞톟톢톣톥톦톧������톩톪톫톬톭톮톯톲톴톶톷톸톹톻톽톾톿퇁퇂퇃퇄퇅퇆퇇퇈퇉퇊퇋퇌퇍퇎퇏래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩�\".split(\"\");\nfor(j = 0; j != D[183].length; ++j) if(D[183][j].charCodeAt(0) !== 0xFFFD) { e[D[183][j]] = 46848 + j; d[46848 + j] = D[183][j];}\nD[184] = \"�����������������������������������������������������������������퇐퇑퇒퇓퇔퇕퇖퇗퇙퇚퇛퇜퇝퇞퇟퇠퇡퇢퇣퇤퇥퇦퇧퇨퇩퇪������퇫퇬퇭퇮퇯퇰퇱퇲퇳퇵퇶퇷퇹퇺퇻퇼퇽퇾퇿툀툁툂툃툄툅툆������툈툊툋툌툍툎툏툑툒툓툔툕툖툗툘툙툚툛툜툝툞툟툠툡툢툣툤툥툦툧툨툩륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많맏말맑맒맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼�\".split(\"\");\nfor(j = 0; j != D[184].length; ++j) if(D[184][j].charCodeAt(0) !== 0xFFFD) { e[D[184][j]] = 47104 + j; d[47104 + j] = D[184][j];}\nD[185] = \"�����������������������������������������������������������������툪툫툮툯툱툲툳툵툶툷툸툹툺툻툾퉀퉂퉃퉄퉅퉆퉇퉉퉊퉋퉌������퉍퉎퉏퉐퉑퉒퉓퉔퉕퉖퉗퉘퉙퉚퉛퉝퉞퉟퉠퉡퉢퉣퉥퉦퉧퉨������퉩퉪퉫퉬퉭퉮퉯퉰퉱퉲퉳퉴퉵퉶퉷퉸퉹퉺퉻퉼퉽퉾퉿튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바박밖밗반받발밝밞밟밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗�\".split(\"\");\nfor(j = 0; j != D[185].length; ++j) if(D[185][j].charCodeAt(0) !== 0xFFFD) { e[D[185][j]] = 47360 + j; d[47360 + j] = D[185][j];}\nD[186] = \"�����������������������������������������������������������������튍튎튏튒튓튔튖튗튘튙튚튛튝튞튟튡튢튣튥튦튧튨튩튪튫튭������튮튯튰튲튳튴튵튶튷튺튻튽튾틁틃틄틅틆틇틊틌틍틎틏틐틑������틒틓틕틖틗틙틚틛틝틞틟틠틡틢틣틦틧틨틩틪틫틬틭틮틯틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤�\".split(\"\");\nfor(j = 0; j != D[186].length; ++j) if(D[186][j].charCodeAt(0) !== 0xFFFD) { e[D[186][j]] = 47616 + j; d[47616 + j] = D[186][j];}\nD[187] = \"�����������������������������������������������������������������틻틼틽틾틿팂팄팆팇팈팉팊팋팏팑팒팓팕팗팘팙팚팛팞팢팣������팤팦팧팪팫팭팮팯팱팲팳팴팵팶팷팺팾팿퍀퍁퍂퍃퍆퍇퍈퍉������퍊퍋퍌퍍퍎퍏퍐퍑퍒퍓퍔퍕퍖퍗퍘퍙퍚퍛퍜퍝퍞퍟퍠퍡퍢퍣퍤퍥퍦퍧퍨퍩빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤�\".split(\"\");\nfor(j = 0; j != D[187].length; ++j) if(D[187][j].charCodeAt(0) !== 0xFFFD) { e[D[187][j]] = 47872 + j; d[47872 + j] = D[187][j];}\nD[188] = \"�����������������������������������������������������������������퍪퍫퍬퍭퍮퍯퍰퍱퍲퍳퍴퍵퍶퍷퍸퍹퍺퍻퍾퍿펁펂펃펅펆펇������펈펉펊펋펎펒펓펔펕펖펗펚펛펝펞펟펡펢펣펤펥펦펧펪펬펮������펯펰펱펲펳펵펶펷펹펺펻펽펾펿폀폁폂폃폆폇폊폋폌폍폎폏폑폒폓폔폕폖샥샨샬샴샵샷샹섀섄섈섐섕서석섞섟선섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭�\".split(\"\");\nfor(j = 0; j != D[188].length; ++j) if(D[188][j].charCodeAt(0) !== 0xFFFD) { e[D[188][j]] = 48128 + j; d[48128 + j] = D[188][j];}\nD[189] = \"�����������������������������������������������������������������폗폙폚폛폜폝폞폟폠폢폤폥폦폧폨폩폪폫폮폯폱폲폳폵폶폷������폸폹폺폻폾퐀퐂퐃퐄퐅퐆퐇퐉퐊퐋퐌퐍퐎퐏퐐퐑퐒퐓퐔퐕퐖������퐗퐘퐙퐚퐛퐜퐞퐟퐠퐡퐢퐣퐤퐥퐦퐧퐨퐩퐪퐫퐬퐭퐮퐯퐰퐱퐲퐳퐴퐵퐶퐷숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰�\".split(\"\");\nfor(j = 0; j != D[189].length; ++j) if(D[189][j].charCodeAt(0) !== 0xFFFD) { e[D[189][j]] = 48384 + j; d[48384 + j] = D[189][j];}\nD[190] = \"�����������������������������������������������������������������퐸퐹퐺퐻퐼퐽퐾퐿푁푂푃푅푆푇푈푉푊푋푌푍푎푏푐푑푒푓������푔푕푖푗푘푙푚푛푝푞푟푡푢푣푥푦푧푨푩푪푫푬푮푰푱푲������푳푴푵푶푷푺푻푽푾풁풃풄풅풆풇풊풌풎풏풐풑풒풓풕풖풗풘풙풚풛풜풝쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄업없엇었엉엊엌엎�\".split(\"\");\nfor(j = 0; j != D[190].length; ++j) if(D[190][j].charCodeAt(0) !== 0xFFFD) { e[D[190][j]] = 48640 + j; d[48640 + j] = D[190][j];}\nD[191] = \"�����������������������������������������������������������������풞풟풠풡풢풣풤풥풦풧풨풪풫풬풭풮풯풰풱풲풳풴풵풶풷풸������풹풺풻풼풽풾풿퓀퓁퓂퓃퓄퓅퓆퓇퓈퓉퓊퓋퓍퓎퓏퓑퓒퓓퓕������퓖퓗퓘퓙퓚퓛퓝퓞퓠퓡퓢퓣퓤퓥퓦퓧퓩퓪퓫퓭퓮퓯퓱퓲퓳퓴퓵퓶퓷퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염엽엾엿였영옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨�\".split(\"\");\nfor(j = 0; j != D[191].length; ++j) if(D[191][j].charCodeAt(0) !== 0xFFFD) { e[D[191][j]] = 48896 + j; d[48896 + j] = D[191][j];}\nD[192] = \"�����������������������������������������������������������������퓾퓿픀픁픂픃픅픆픇픉픊픋픍픎픏픐픑픒픓픖픘픙픚픛픜픝������픞픟픠픡픢픣픤픥픦픧픨픩픪픫픬픭픮픯픰픱픲픳픴픵픶픷������픸픹픺픻픾픿핁핂핃핅핆핇핈핉핊핋핎핐핒핓핔핕핖핗핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응읒읓읔읕읖읗의읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊�\".split(\"\");\nfor(j = 0; j != D[192].length; ++j) if(D[192][j].charCodeAt(0) !== 0xFFFD) { e[D[192][j]] = 49152 + j; d[49152 + j] = D[192][j];}\nD[193] = \"�����������������������������������������������������������������핤핦핧핪핬핮핯핰핱핲핳핶핷핹핺핻핽핾핿햀햁햂햃햆햊햋������햌햍햎햏햑햒햓햔햕햖햗햘햙햚햛햜햝햞햟햠햡햢햣햤햦햧������햨햩햪햫햬햭햮햯햰햱햲햳햴햵햶햷햸햹햺햻햼햽햾햿헀헁헂헃헄헅헆헇점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓�\".split(\"\");\nfor(j = 0; j != D[193].length; ++j) if(D[193][j].charCodeAt(0) !== 0xFFFD) { e[D[193][j]] = 49408 + j; d[49408 + j] = D[193][j];}\nD[194] = \"�����������������������������������������������������������������헊헋헍헎헏헑헓헔헕헖헗헚헜헞헟헠헡헢헣헦헧헩헪헫헭헮������헯헰헱헲헳헶헸헺헻헼헽헾헿혂혃혅혆혇혉혊혋혌혍혎혏혒������혖혗혘혙혚혛혝혞혟혡혢혣혥혦혧혨혩혪혫혬혮혯혰혱혲혳혴혵혶혷혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻�\".split(\"\");\nfor(j = 0; j != D[194].length; ++j) if(D[194][j].charCodeAt(0) !== 0xFFFD) { e[D[194][j]] = 49664 + j; d[49664 + j] = D[194][j];}\nD[195] = \"�����������������������������������������������������������������혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝홞홟홠홡������홢홣홤홥홦홨홪홫홬홭홮홯홲홳홵홶홷홸홹홺홻홼홽홾홿횀������횁횂횄횆횇횈횉횊횋횎횏횑횒횓횕횖횗횘횙횚횛횜횞횠횢횣횤횥횦횧횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층�\".split(\"\");\nfor(j = 0; j != D[195].length; ++j) if(D[195][j].charCodeAt(0) !== 0xFFFD) { e[D[195][j]] = 49920 + j; d[49920 + j] = D[195][j];}\nD[196] = \"�����������������������������������������������������������������횫횭횮횯횱횲횳횴횵횶횷횸횺횼횽횾횿훀훁훂훃훆훇훉훊훋������훍훎훏훐훒훓훕훖훘훚훛훜훝훞훟훡훢훣훥훦훧훩훪훫훬훭������훮훯훱훲훳훴훶훷훸훹훺훻훾훿휁휂휃휅휆휇휈휉휊휋휌휍휎휏휐휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼�\".split(\"\");\nfor(j = 0; j != D[196].length; ++j) if(D[196][j].charCodeAt(0) !== 0xFFFD) { e[D[196][j]] = 50176 + j; d[50176 + j] = D[196][j];}\nD[197] = \"�����������������������������������������������������������������휕휖휗휚휛휝휞휟휡휢휣휤휥휦휧휪휬휮휯휰휱휲휳휶휷휹������휺휻휽휾휿흀흁흂흃흅흆흈흊흋흌흍흎흏흒흓흕흚흛흜흝흞������흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵흶흷흸흹흺흻흾흿힀힂힃힄힅힆힇힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜�\".split(\"\");\nfor(j = 0; j != D[197].length; ++j) if(D[197][j].charCodeAt(0) !== 0xFFFD) { e[D[197][j]] = 50432 + j; d[50432 + j] = D[197][j];}\nD[198] = \"�����������������������������������������������������������������힍힎힏힑힒힓힔힕힖힗힚힜힞힟힠힡힢힣������������������������������������������������������������������������������퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁�\".split(\"\");\nfor(j = 0; j != D[198].length; ++j) if(D[198][j].charCodeAt(0) !== 0xFFFD) { e[D[198][j]] = 50688 + j; d[50688 + j] = D[198][j];}\nD[199] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠�\".split(\"\");\nfor(j = 0; j != D[199].length; ++j) if(D[199][j].charCodeAt(0) !== 0xFFFD) { e[D[199][j]] = 50944 + j; d[50944 + j] = D[199][j];}\nD[200] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝�\".split(\"\");\nfor(j = 0; j != D[200].length; ++j) if(D[200][j].charCodeAt(0) !== 0xFFFD) { e[D[200][j]] = 51200 + j; d[51200 + j] = D[200][j];}\nD[202] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕�\".split(\"\");\nfor(j = 0; j != D[202].length; ++j) if(D[202][j].charCodeAt(0) !== 0xFFFD) { e[D[202][j]] = 51712 + j; d[51712 + j] = D[202][j];}\nD[203] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢�\".split(\"\");\nfor(j = 0; j != D[203].length; ++j) if(D[203][j].charCodeAt(0) !== 0xFFFD) { e[D[203][j]] = 51968 + j; d[51968 + j] = D[203][j];}\nD[204] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械�\".split(\"\");\nfor(j = 0; j != D[204].length; ++j) if(D[204][j].charCodeAt(0) !== 0xFFFD) { e[D[204][j]] = 52224 + j; d[52224 + j] = D[204][j];}\nD[205] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜�\".split(\"\");\nfor(j = 0; j != D[205].length; ++j) if(D[205][j].charCodeAt(0) !== 0xFFFD) { e[D[205][j]] = 52480 + j; d[52480 + j] = D[205][j];}\nD[206] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾�\".split(\"\");\nfor(j = 0; j != D[206].length; ++j) if(D[206][j].charCodeAt(0) !== 0xFFFD) { e[D[206][j]] = 52736 + j; d[52736 + j] = D[206][j];}\nD[207] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴�\".split(\"\");\nfor(j = 0; j != D[207].length; ++j) if(D[207][j].charCodeAt(0) !== 0xFFFD) { e[D[207][j]] = 52992 + j; d[52992 + j] = D[207][j];}\nD[208] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣�\".split(\"\");\nfor(j = 0; j != D[208].length; ++j) if(D[208][j].charCodeAt(0) !== 0xFFFD) { e[D[208][j]] = 53248 + j; d[53248 + j] = D[208][j];}\nD[209] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩羅蘿螺裸邏那樂洛烙珞落諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉�\".split(\"\");\nfor(j = 0; j != D[209].length; ++j) if(D[209][j].charCodeAt(0) !== 0xFFFD) { e[D[209][j]] = 53504 + j; d[53504 + j] = D[209][j];}\nD[210] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������納臘蠟衲囊娘廊朗浪狼郎乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧老蘆虜路露駑魯鷺碌祿綠菉錄鹿論壟弄濃籠聾膿農惱牢磊腦賂雷尿壘屢樓淚漏累縷陋嫩訥杻紐勒肋凜凌稜綾能菱陵尼泥匿溺多茶�\".split(\"\");\nfor(j = 0; j != D[210].length; ++j) if(D[210][j].charCodeAt(0) !== 0xFFFD) { e[D[210][j]] = 53760 + j; d[53760 + j] = D[210][j];}\nD[211] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃�\".split(\"\");\nfor(j = 0; j != D[211].length; ++j) if(D[211][j].charCodeAt(0) !== 0xFFFD) { e[D[211][j]] = 54016 + j; d[54016 + j] = D[211][j];}\nD[212] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅�\".split(\"\");\nfor(j = 0; j != D[212].length; ++j) if(D[212][j].charCodeAt(0) !== 0xFFFD) { e[D[212][j]] = 54272 + j; d[54272 + j] = D[212][j];}\nD[213] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣�\".split(\"\");\nfor(j = 0; j != D[213].length; ++j) if(D[213][j].charCodeAt(0) !== 0xFFFD) { e[D[213][j]] = 54528 + j; d[54528 + j] = D[213][j];}\nD[214] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼�\".split(\"\");\nfor(j = 0; j != D[214].length; ++j) if(D[214][j].charCodeAt(0) !== 0xFFFD) { e[D[214][j]] = 54784 + j; d[54784 + j] = D[214][j];}\nD[215] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬�\".split(\"\");\nfor(j = 0; j != D[215].length; ++j) if(D[215][j].charCodeAt(0) !== 0xFFFD) { e[D[215][j]] = 55040 + j; d[55040 + j] = D[215][j];}\nD[216] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅�\".split(\"\");\nfor(j = 0; j != D[216].length; ++j) if(D[216][j].charCodeAt(0) !== 0xFFFD) { e[D[216][j]] = 55296 + j; d[55296 + j] = D[216][j];}\nD[217] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文�\".split(\"\");\nfor(j = 0; j != D[217].length; ++j) if(D[217][j].charCodeAt(0) !== 0xFFFD) { e[D[217][j]] = 55552 + j; d[55552 + j] = D[217][j];}\nD[218] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑�\".split(\"\");\nfor(j = 0; j != D[218].length; ++j) if(D[218][j].charCodeAt(0) !== 0xFFFD) { e[D[218][j]] = 55808 + j; d[55808 + j] = D[218][j];}\nD[219] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖�\".split(\"\");\nfor(j = 0; j != D[219].length; ++j) if(D[219][j].charCodeAt(0) !== 0xFFFD) { e[D[219][j]] = 56064 + j; d[56064 + j] = D[219][j];}\nD[220] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦�\".split(\"\");\nfor(j = 0; j != D[220].length; ++j) if(D[220][j].charCodeAt(0) !== 0xFFFD) { e[D[220][j]] = 56320 + j; d[56320 + j] = D[220][j];}\nD[221] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥�\".split(\"\");\nfor(j = 0; j != D[221].length; ++j) if(D[221][j].charCodeAt(0) !== 0xFFFD) { e[D[221][j]] = 56576 + j; d[56576 + j] = D[221][j];}\nD[222] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索�\".split(\"\");\nfor(j = 0; j != D[222].length; ++j) if(D[222][j].charCodeAt(0) !== 0xFFFD) { e[D[222][j]] = 56832 + j; d[56832 + j] = D[222][j];}\nD[223] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署�\".split(\"\");\nfor(j = 0; j != D[223].length; ++j) if(D[223][j].charCodeAt(0) !== 0xFFFD) { e[D[223][j]] = 57088 + j; d[57088 + j] = D[223][j];}\nD[224] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬�\".split(\"\");\nfor(j = 0; j != D[224].length; ++j) if(D[224][j].charCodeAt(0) !== 0xFFFD) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j];}\nD[225] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁�\".split(\"\");\nfor(j = 0; j != D[225].length; ++j) if(D[225][j].charCodeAt(0) !== 0xFFFD) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j];}\nD[226] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧�\".split(\"\");\nfor(j = 0; j != D[226].length; ++j) if(D[226][j].charCodeAt(0) !== 0xFFFD) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j];}\nD[227] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁�\".split(\"\");\nfor(j = 0; j != D[227].length; ++j) if(D[227][j].charCodeAt(0) !== 0xFFFD) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j];}\nD[228] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額�\".split(\"\");\nfor(j = 0; j != D[228].length; ++j) if(D[228][j].charCodeAt(0) !== 0xFFFD) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j];}\nD[229] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬�\".split(\"\");\nfor(j = 0; j != D[229].length; ++j) if(D[229][j].charCodeAt(0) !== 0xFFFD) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j];}\nD[230] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒�\".split(\"\");\nfor(j = 0; j != D[230].length; ++j) if(D[230][j].charCodeAt(0) !== 0xFFFD) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j];}\nD[231] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳�\".split(\"\");\nfor(j = 0; j != D[231].length; ++j) if(D[231][j].charCodeAt(0) !== 0xFFFD) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j];}\nD[232] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療�\".split(\"\");\nfor(j = 0; j != D[232].length; ++j) if(D[232][j].charCodeAt(0) !== 0xFFFD) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j];}\nD[233] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓�\".split(\"\");\nfor(j = 0; j != D[233].length; ++j) if(D[233][j].charCodeAt(0) !== 0xFFFD) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j];}\nD[234] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜�\".split(\"\");\nfor(j = 0; j != D[234].length; ++j) if(D[234][j].charCodeAt(0) !== 0xFFFD) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j];}\nD[235] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼�\".split(\"\");\nfor(j = 0; j != D[235].length; ++j) if(D[235][j].charCodeAt(0) !== 0xFFFD) { e[D[235][j]] = 60160 + j; d[60160 + j] = D[235][j];}\nD[236] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄�\".split(\"\");\nfor(j = 0; j != D[236].length; ++j) if(D[236][j].charCodeAt(0) !== 0xFFFD) { e[D[236][j]] = 60416 + j; d[60416 + j] = D[236][j];}\nD[237] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長�\".split(\"\");\nfor(j = 0; j != D[237].length; ++j) if(D[237][j].charCodeAt(0) !== 0xFFFD) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j];}\nD[238] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱�\".split(\"\");\nfor(j = 0; j != D[238].length; ++j) if(D[238][j].charCodeAt(0) !== 0xFFFD) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j];}\nD[239] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖�\".split(\"\");\nfor(j = 0; j != D[239].length; ++j) if(D[239][j].charCodeAt(0) !== 0xFFFD) { e[D[239][j]] = 61184 + j; d[61184 + j] = D[239][j];}\nD[240] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫�\".split(\"\");\nfor(j = 0; j != D[240].length; ++j) if(D[240][j].charCodeAt(0) !== 0xFFFD) { e[D[240][j]] = 61440 + j; d[61440 + j] = D[240][j];}\nD[241] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只�\".split(\"\");\nfor(j = 0; j != D[241].length; ++j) if(D[241][j].charCodeAt(0) !== 0xFFFD) { e[D[241][j]] = 61696 + j; d[61696 + j] = D[241][j];}\nD[242] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯�\".split(\"\");\nfor(j = 0; j != D[242].length; ++j) if(D[242][j].charCodeAt(0) !== 0xFFFD) { e[D[242][j]] = 61952 + j; d[61952 + j] = D[242][j];}\nD[243] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策�\".split(\"\");\nfor(j = 0; j != D[243].length; ++j) if(D[243][j].charCodeAt(0) !== 0xFFFD) { e[D[243][j]] = 62208 + j; d[62208 + j] = D[243][j];}\nD[244] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢�\".split(\"\");\nfor(j = 0; j != D[244].length; ++j) if(D[244][j].charCodeAt(0) !== 0xFFFD) { e[D[244][j]] = 62464 + j; d[62464 + j] = D[244][j];}\nD[245] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃�\".split(\"\");\nfor(j = 0; j != D[245].length; ++j) if(D[245][j].charCodeAt(0) !== 0xFFFD) { e[D[245][j]] = 62720 + j; d[62720 + j] = D[245][j];}\nD[246] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託�\".split(\"\");\nfor(j = 0; j != D[246].length; ++j) if(D[246][j].charCodeAt(0) !== 0xFFFD) { e[D[246][j]] = 62976 + j; d[62976 + j] = D[246][j];}\nD[247] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑�\".split(\"\");\nfor(j = 0; j != D[247].length; ++j) if(D[247][j].charCodeAt(0) !== 0xFFFD) { e[D[247][j]] = 63232 + j; d[63232 + j] = D[247][j];}\nD[248] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃�\".split(\"\");\nfor(j = 0; j != D[248].length; ++j) if(D[248][j].charCodeAt(0) !== 0xFFFD) { e[D[248][j]] = 63488 + j; d[63488 + j] = D[248][j];}\nD[249] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航�\".split(\"\");\nfor(j = 0; j != D[249].length; ++j) if(D[249][j].charCodeAt(0) !== 0xFFFD) { e[D[249][j]] = 63744 + j; d[63744 + j] = D[249][j];}\nD[250] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型�\".split(\"\");\nfor(j = 0; j != D[250].length; ++j) if(D[250][j].charCodeAt(0) !== 0xFFFD) { e[D[250][j]] = 64000 + j; d[64000 + j] = D[250][j];}\nD[251] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵�\".split(\"\");\nfor(j = 0; j != D[251].length; ++j) if(D[251][j].charCodeAt(0) !== 0xFFFD) { e[D[251][j]] = 64256 + j; d[64256 + j] = D[251][j];}\nD[252] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆�\".split(\"\");\nfor(j = 0; j != D[252].length; ++j) if(D[252][j].charCodeAt(0) !== 0xFFFD) { e[D[252][j]] = 64512 + j; d[64512 + j] = D[252][j];}\nD[253] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰�\".split(\"\");\nfor(j = 0; j != D[253].length; ++j) if(D[253][j].charCodeAt(0) !== 0xFFFD) { e[D[253][j]] = 64768 + j; d[64768 + j] = D[253][j];}\nreturn {\"enc\": e, \"dec\": d }; })();\ncptable[950] = (function(){ var d = [], e = {}, D = [], j;\nD[0] = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~��������������������������������������������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[0].length; ++j) if(D[0][j].charCodeAt(0) !== 0xFFFD) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j];}\nD[161] = \"����������������������������������������������������������������　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚����������������������������������﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢﹣﹤﹥﹦～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／�\".split(\"\");\nfor(j = 0; j != D[161].length; ++j) if(D[161][j].charCodeAt(0) !== 0xFFFD) { e[D[161][j]] = 41216 + j; d[41216 + j] = D[161][j];}\nD[162] = \"����������������������������������������������������������������＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁▂▃▄▅▆▇█▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭����������������������������������╮╰╯═╞╪╡◢◣◥◤╱╲╳０１２３４５６７８９ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩ〡〢〣〤〥〦〧〨〩十卄卅ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖ�\".split(\"\");\nfor(j = 0; j != D[162].length; ++j) if(D[162][j].charCodeAt(0) !== 0xFFFD) { e[D[162][j]] = 41472 + j; d[41472 + j] = D[162][j];}\nD[163] = \"����������������������������������������������������������������ｗｘｙｚΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρστυφχψωㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏ����������������������������������ㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩ˙ˉˊˇˋ���������������������������������€������������������������������\".split(\"\");\nfor(j = 0; j != D[163].length; ++j) if(D[163][j].charCodeAt(0) !== 0xFFFD) { e[D[163][j]] = 41728 + j; d[41728 + j] = D[163][j];}\nD[164] = \"����������������������������������������������������������������一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才����������������������������������丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙�\".split(\"\");\nfor(j = 0; j != D[164].length; ++j) if(D[164][j].charCodeAt(0) !== 0xFFFD) { e[D[164][j]] = 41984 + j; d[41984 + j] = D[164][j];}\nD[165] = \"����������������������������������������������������������������世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外����������������������������������央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全�\".split(\"\");\nfor(j = 0; j != D[165].length; ++j) if(D[165][j].charCodeAt(0) !== 0xFFFD) { e[D[165][j]] = 42240 + j; d[42240 + j] = D[165][j];}\nD[166] = \"����������������������������������������������������������������共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年����������������������������������式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣�\".split(\"\");\nfor(j = 0; j != D[166].length; ++j) if(D[166][j].charCodeAt(0) !== 0xFFFD) { e[D[166][j]] = 42496 + j; d[42496 + j] = D[166][j];}\nD[167] = \"����������������������������������������������������������������作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍����������������������������������均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠�\".split(\"\");\nfor(j = 0; j != D[167].length; ++j) if(D[167][j].charCodeAt(0) !== 0xFFFD) { e[D[167][j]] = 42752 + j; d[42752 + j] = D[167][j];}\nD[168] = \"����������������������������������������������������������������杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒����������������������������������芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵�\".split(\"\");\nfor(j = 0; j != D[168].length; ++j) if(D[168][j].charCodeAt(0) !== 0xFFFD) { e[D[168][j]] = 43008 + j; d[43008 + j] = D[168][j];}\nD[169] = \"����������������������������������������������������������������咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居����������������������������������屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊�\".split(\"\");\nfor(j = 0; j != D[169].length; ++j) if(D[169][j].charCodeAt(0) !== 0xFFFD) { e[D[169][j]] = 43264 + j; d[43264 + j] = D[169][j];}\nD[170] = \"����������������������������������������������������������������昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠����������������������������������炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附�\".split(\"\");\nfor(j = 0; j != D[170].length; ++j) if(D[170][j].charCodeAt(0) !== 0xFFFD) { e[D[170][j]] = 43520 + j; d[43520 + j] = D[170][j];}\nD[171] = \"����������������������������������������������������������������陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品����������������������������������哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷�\".split(\"\");\nfor(j = 0; j != D[171].length; ++j) if(D[171][j].charCodeAt(0) !== 0xFFFD) { e[D[171][j]] = 43776 + j; d[43776 + j] = D[171][j];}\nD[172] = \"����������������������������������������������������������������拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗����������������������������������活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄�\".split(\"\");\nfor(j = 0; j != D[172].length; ++j) if(D[172][j].charCodeAt(0) !== 0xFFFD) { e[D[172][j]] = 44032 + j; d[44032 + j] = D[172][j];}\nD[173] = \"����������������������������������������������������������������耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥����������������������������������迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪�\".split(\"\");\nfor(j = 0; j != D[173].length; ++j) if(D[173][j].charCodeAt(0) !== 0xFFFD) { e[D[173][j]] = 44288 + j; d[44288 + j] = D[173][j];}\nD[174] = \"����������������������������������������������������������������哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙����������������������������������恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓�\".split(\"\");\nfor(j = 0; j != D[174].length; ++j) if(D[174][j].charCodeAt(0) !== 0xFFFD) { e[D[174][j]] = 44544 + j; d[44544 + j] = D[174][j];}\nD[175] = \"����������������������������������������������������������������浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷����������������������������������砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃�\".split(\"\");\nfor(j = 0; j != D[175].length; ++j) if(D[175][j].charCodeAt(0) !== 0xFFFD) { e[D[175][j]] = 44800 + j; d[44800 + j] = D[175][j];}\nD[176] = \"����������������������������������������������������������������虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡����������������������������������陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀�\".split(\"\");\nfor(j = 0; j != D[176].length; ++j) if(D[176][j].charCodeAt(0) !== 0xFFFD) { e[D[176][j]] = 45056 + j; d[45056 + j] = D[176][j];}\nD[177] = \"����������������������������������������������������������������娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽����������������������������������情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺�\".split(\"\");\nfor(j = 0; j != D[177].length; ++j) if(D[177][j].charCodeAt(0) !== 0xFFFD) { e[D[177][j]] = 45312 + j; d[45312 + j] = D[177][j];}\nD[178] = \"����������������������������������������������������������������毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶����������������������������������瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼�\".split(\"\");\nfor(j = 0; j != D[178].length; ++j) if(D[178][j].charCodeAt(0) !== 0xFFFD) { e[D[178][j]] = 45568 + j; d[45568 + j] = D[178][j];}\nD[179] = \"����������������������������������������������������������������莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途����������������������������������部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠�\".split(\"\");\nfor(j = 0; j != D[179].length; ++j) if(D[179][j].charCodeAt(0) !== 0xFFFD) { e[D[179][j]] = 45824 + j; d[45824 + j] = D[179][j];}\nD[180] = \"����������������������������������������������������������������婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍����������������������������������插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋�\".split(\"\");\nfor(j = 0; j != D[180].length; ++j) if(D[180][j].charCodeAt(0) !== 0xFFFD) { e[D[180][j]] = 46080 + j; d[46080 + j] = D[180][j];}\nD[181] = \"����������������������������������������������������������������溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘����������������������������������窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁�\".split(\"\");\nfor(j = 0; j != D[181].length; ++j) if(D[181][j].charCodeAt(0) !== 0xFFFD) { e[D[181][j]] = 46336 + j; d[46336 + j] = D[181][j];}\nD[182] = \"����������������������������������������������������������������詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑����������������������������������間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼�\".split(\"\");\nfor(j = 0; j != D[182].length; ++j) if(D[182][j].charCodeAt(0) !== 0xFFFD) { e[D[182][j]] = 46592 + j; d[46592 + j] = D[182][j];}\nD[183] = \"����������������������������������������������������������������媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業����������������������������������楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督�\".split(\"\");\nfor(j = 0; j != D[183].length; ++j) if(D[183][j].charCodeAt(0) !== 0xFFFD) { e[D[183][j]] = 46848 + j; d[46848 + j] = D[183][j];}\nD[184] = \"����������������������������������������������������������������睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫����������������������������������腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊�\".split(\"\");\nfor(j = 0; j != D[184].length; ++j) if(D[184][j].charCodeAt(0) !== 0xFFFD) { e[D[184][j]] = 47104 + j; d[47104 + j] = D[184][j];}\nD[185] = \"����������������������������������������������������������������辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴����������������������������������飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇�\".split(\"\");\nfor(j = 0; j != D[185].length; ++j) if(D[185][j].charCodeAt(0) !== 0xFFFD) { e[D[185][j]] = 47360 + j; d[47360 + j] = D[185][j];}\nD[186] = \"����������������������������������������������������������������愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢����������������������������������滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬�\".split(\"\");\nfor(j = 0; j != D[186].length; ++j) if(D[186][j].charCodeAt(0) !== 0xFFFD) { e[D[186][j]] = 47616 + j; d[47616 + j] = D[186][j];}\nD[187] = \"����������������������������������������������������������������罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤����������������������������������說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜�\".split(\"\");\nfor(j = 0; j != D[187].length; ++j) if(D[187][j].charCodeAt(0) !== 0xFFFD) { e[D[187][j]] = 47872 + j; d[47872 + j] = D[187][j];}\nD[188] = \"����������������������������������������������������������������劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂����������������������������������慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃�\".split(\"\");\nfor(j = 0; j != D[188].length; ++j) if(D[188][j].charCodeAt(0) !== 0xFFFD) { e[D[188][j]] = 48128 + j; d[48128 + j] = D[188][j];}\nD[189] = \"����������������������������������������������������������������瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯����������������������������������翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞�\".split(\"\");\nfor(j = 0; j != D[189].length; ++j) if(D[189][j].charCodeAt(0) !== 0xFFFD) { e[D[189][j]] = 48384 + j; d[48384 + j] = D[189][j];}\nD[190] = \"����������������������������������������������������������������輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉����������������������������������鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡�\".split(\"\");\nfor(j = 0; j != D[190].length; ++j) if(D[190][j].charCodeAt(0) !== 0xFFFD) { e[D[190][j]] = 48640 + j; d[48640 + j] = D[190][j];}\nD[191] = \"����������������������������������������������������������������濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊����������������������������������縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚�\".split(\"\");\nfor(j = 0; j != D[191].length; ++j) if(D[191][j].charCodeAt(0) !== 0xFFFD) { e[D[191][j]] = 48896 + j; d[48896 + j] = D[191][j];}\nD[192] = \"����������������������������������������������������������������錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇����������������������������������嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬�\".split(\"\");\nfor(j = 0; j != D[192].length; ++j) if(D[192][j].charCodeAt(0) !== 0xFFFD) { e[D[192][j]] = 49152 + j; d[49152 + j] = D[192][j];}\nD[193] = \"����������������������������������������������������������������瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪����������������������������������薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁�\".split(\"\");\nfor(j = 0; j != D[193].length; ++j) if(D[193][j].charCodeAt(0) !== 0xFFFD) { e[D[193][j]] = 49408 + j; d[49408 + j] = D[193][j];}\nD[194] = \"����������������������������������������������������������������駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘����������������������������������癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦�\".split(\"\");\nfor(j = 0; j != D[194].length; ++j) if(D[194][j].charCodeAt(0) !== 0xFFFD) { e[D[194][j]] = 49664 + j; d[49664 + j] = D[194][j];}\nD[195] = \"����������������������������������������������������������������鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸����������������������������������獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類�\".split(\"\");\nfor(j = 0; j != D[195].length; ++j) if(D[195][j].charCodeAt(0) !== 0xFFFD) { e[D[195][j]] = 49920 + j; d[49920 + j] = D[195][j];}\nD[196] = \"����������������������������������������������������������������願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼����������������������������������纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴�\".split(\"\");\nfor(j = 0; j != D[196].length; ++j) if(D[196][j].charCodeAt(0) !== 0xFFFD) { e[D[196][j]] = 50176 + j; d[50176 + j] = D[196][j];}\nD[197] = \"����������������������������������������������������������������護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬����������������������������������禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒�\".split(\"\");\nfor(j = 0; j != D[197].length; ++j) if(D[197][j].charCodeAt(0) !== 0xFFFD) { e[D[197][j]] = 50432 + j; d[50432 + j] = D[197][j];}\nD[198] = \"����������������������������������������������������������������讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲���������������������������������������������������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[198].length; ++j) if(D[198][j].charCodeAt(0) !== 0xFFFD) { e[D[198][j]] = 50688 + j; d[50688 + j] = D[198][j];}\nD[201] = \"����������������������������������������������������������������乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕����������������������������������氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋�\".split(\"\");\nfor(j = 0; j != D[201].length; ++j) if(D[201][j].charCodeAt(0) !== 0xFFFD) { e[D[201][j]] = 51456 + j; d[51456 + j] = D[201][j];}\nD[202] = \"����������������������������������������������������������������汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘����������������������������������吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇�\".split(\"\");\nfor(j = 0; j != D[202].length; ++j) if(D[202][j].charCodeAt(0) !== 0xFFFD) { e[D[202][j]] = 51712 + j; d[51712 + j] = D[202][j];}\nD[203] = \"����������������������������������������������������������������杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓����������������������������������芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢�\".split(\"\");\nfor(j = 0; j != D[203].length; ++j) if(D[203][j].charCodeAt(0) !== 0xFFFD) { e[D[203][j]] = 51968 + j; d[51968 + j] = D[203][j];}\nD[204] = \"����������������������������������������������������������������坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋����������������������������������怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲�\".split(\"\");\nfor(j = 0; j != D[204].length; ++j) if(D[204][j].charCodeAt(0) !== 0xFFFD) { e[D[204][j]] = 52224 + j; d[52224 + j] = D[204][j];}\nD[205] = \"����������������������������������������������������������������泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺����������������������������������矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏�\".split(\"\");\nfor(j = 0; j != D[205].length; ++j) if(D[205][j].charCodeAt(0) !== 0xFFFD) { e[D[205][j]] = 52480 + j; d[52480 + j] = D[205][j];}\nD[206] = \"����������������������������������������������������������������哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛����������������������������������峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺�\".split(\"\");\nfor(j = 0; j != D[206].length; ++j) if(D[206][j].charCodeAt(0) !== 0xFFFD) { e[D[206][j]] = 52736 + j; d[52736 + j] = D[206][j];}\nD[207] = \"����������������������������������������������������������������柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂����������������������������������洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀�\".split(\"\");\nfor(j = 0; j != D[207].length; ++j) if(D[207][j].charCodeAt(0) !== 0xFFFD) { e[D[207][j]] = 52992 + j; d[52992 + j] = D[207][j];}\nD[208] = \"����������������������������������������������������������������穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪����������������������������������苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱�\".split(\"\");\nfor(j = 0; j != D[208].length; ++j) if(D[208][j].charCodeAt(0) !== 0xFFFD) { e[D[208][j]] = 53248 + j; d[53248 + j] = D[208][j];}\nD[209] = \"����������������������������������������������������������������唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧����������������������������������恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤�\".split(\"\");\nfor(j = 0; j != D[209].length; ++j) if(D[209][j].charCodeAt(0) !== 0xFFFD) { e[D[209][j]] = 53504 + j; d[53504 + j] = D[209][j];}\nD[210] = \"����������������������������������������������������������������毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸����������������������������������牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐�\".split(\"\");\nfor(j = 0; j != D[210].length; ++j) if(D[210][j].charCodeAt(0) !== 0xFFFD) { e[D[210][j]] = 53760 + j; d[53760 + j] = D[210][j];}\nD[211] = \"����������������������������������������������������������������笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢����������������������������������荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐�\".split(\"\");\nfor(j = 0; j != D[211].length; ++j) if(D[211][j].charCodeAt(0) !== 0xFFFD) { e[D[211][j]] = 54016 + j; d[54016 + j] = D[211][j];}\nD[212] = \"����������������������������������������������������������������酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅����������������������������������唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏�\".split(\"\");\nfor(j = 0; j != D[212].length; ++j) if(D[212][j].charCodeAt(0) !== 0xFFFD) { e[D[212][j]] = 54272 + j; d[54272 + j] = D[212][j];}\nD[213] = \"����������������������������������������������������������������崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟����������������������������������捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉�\".split(\"\");\nfor(j = 0; j != D[213].length; ++j) if(D[213][j].charCodeAt(0) !== 0xFFFD) { e[D[213][j]] = 54528 + j; d[54528 + j] = D[213][j];}\nD[214] = \"����������������������������������������������������������������淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏����������������������������������痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟�\".split(\"\");\nfor(j = 0; j != D[214].length; ++j) if(D[214][j].charCodeAt(0) !== 0xFFFD) { e[D[214][j]] = 54784 + j; d[54784 + j] = D[214][j];}\nD[215] = \"����������������������������������������������������������������耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷����������������������������������蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪�\".split(\"\");\nfor(j = 0; j != D[215].length; ++j) if(D[215][j].charCodeAt(0) !== 0xFFFD) { e[D[215][j]] = 55040 + j; d[55040 + j] = D[215][j];}\nD[216] = \"����������������������������������������������������������������釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷����������������������������������堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔�\".split(\"\");\nfor(j = 0; j != D[216].length; ++j) if(D[216][j].charCodeAt(0) !== 0xFFFD) { e[D[216][j]] = 55296 + j; d[55296 + j] = D[216][j];}\nD[217] = \"����������������������������������������������������������������惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒����������������������������������晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞�\".split(\"\");\nfor(j = 0; j != D[217].length; ++j) if(D[217][j].charCodeAt(0) !== 0xFFFD) { e[D[217][j]] = 55552 + j; d[55552 + j] = D[217][j];}\nD[218] = \"����������������������������������������������������������������湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖����������������������������������琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥�\".split(\"\");\nfor(j = 0; j != D[218].length; ++j) if(D[218][j].charCodeAt(0) !== 0xFFFD) { e[D[218][j]] = 55808 + j; d[55808 + j] = D[218][j];}\nD[219] = \"����������������������������������������������������������������罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳����������������������������������菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺�\".split(\"\");\nfor(j = 0; j != D[219].length; ++j) if(D[219][j].charCodeAt(0) !== 0xFFFD) { e[D[219][j]] = 56064 + j; d[56064 + j] = D[219][j];}\nD[220] = \"����������������������������������������������������������������軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈����������������������������������隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆�\".split(\"\");\nfor(j = 0; j != D[220].length; ++j) if(D[220][j].charCodeAt(0) !== 0xFFFD) { e[D[220][j]] = 56320 + j; d[56320 + j] = D[220][j];}\nD[221] = \"����������������������������������������������������������������媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤����������������������������������搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼�\".split(\"\");\nfor(j = 0; j != D[221].length; ++j) if(D[221][j].charCodeAt(0) !== 0xFFFD) { e[D[221][j]] = 56576 + j; d[56576 + j] = D[221][j];}\nD[222] = \"����������������������������������������������������������������毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓����������������������������������煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓�\".split(\"\");\nfor(j = 0; j != D[222].length; ++j) if(D[222][j].charCodeAt(0) !== 0xFFFD) { e[D[222][j]] = 56832 + j; d[56832 + j] = D[222][j];}\nD[223] = \"����������������������������������������������������������������稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯����������������������������������腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤�\".split(\"\");\nfor(j = 0; j != D[223].length; ++j) if(D[223][j].charCodeAt(0) !== 0xFFFD) { e[D[223][j]] = 57088 + j; d[57088 + j] = D[223][j];}\nD[224] = \"����������������������������������������������������������������觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿����������������������������������遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠�\".split(\"\");\nfor(j = 0; j != D[224].length; ++j) if(D[224][j].charCodeAt(0) !== 0xFFFD) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j];}\nD[225] = \"����������������������������������������������������������������凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠����������������������������������寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉�\".split(\"\");\nfor(j = 0; j != D[225].length; ++j) if(D[225][j].charCodeAt(0) !== 0xFFFD) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j];}\nD[226] = \"����������������������������������������������������������������榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊����������������������������������漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓�\".split(\"\");\nfor(j = 0; j != D[226].length; ++j) if(D[226][j].charCodeAt(0) !== 0xFFFD) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j];}\nD[227] = \"����������������������������������������������������������������禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞����������������������������������耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻�\".split(\"\");\nfor(j = 0; j != D[227].length; ++j) if(D[227][j].charCodeAt(0) !== 0xFFFD) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j];}\nD[228] = \"����������������������������������������������������������������裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍����������������������������������銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘�\".split(\"\");\nfor(j = 0; j != D[228].length; ++j) if(D[228][j].charCodeAt(0) !== 0xFFFD) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j];}\nD[229] = \"����������������������������������������������������������������噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉����������������������������������憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒�\".split(\"\");\nfor(j = 0; j != D[229].length; ++j) if(D[229][j].charCodeAt(0) !== 0xFFFD) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j];}\nD[230] = \"����������������������������������������������������������������澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙����������������������������������獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟�\".split(\"\");\nfor(j = 0; j != D[230].length; ++j) if(D[230][j].charCodeAt(0) !== 0xFFFD) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j];}\nD[231] = \"����������������������������������������������������������������膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢����������������������������������蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧�\".split(\"\");\nfor(j = 0; j != D[231].length; ++j) if(D[231][j].charCodeAt(0) !== 0xFFFD) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j];}\nD[232] = \"����������������������������������������������������������������踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓����������������������������������銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮�\".split(\"\");\nfor(j = 0; j != D[232].length; ++j) if(D[232][j].charCodeAt(0) !== 0xFFFD) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j];}\nD[233] = \"����������������������������������������������������������������噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺����������������������������������憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸�\".split(\"\");\nfor(j = 0; j != D[233].length; ++j) if(D[233][j].charCodeAt(0) !== 0xFFFD) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j];}\nD[234] = \"����������������������������������������������������������������澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙����������������������������������瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘�\".split(\"\");\nfor(j = 0; j != D[234].length; ++j) if(D[234][j].charCodeAt(0) !== 0xFFFD) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j];}\nD[235] = \"����������������������������������������������������������������蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠����������������������������������諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌�\".split(\"\");\nfor(j = 0; j != D[235].length; ++j) if(D[235][j].charCodeAt(0) !== 0xFFFD) { e[D[235][j]] = 60160 + j; d[60160 + j] = D[235][j];}\nD[236] = \"����������������������������������������������������������������錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕����������������������������������魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎�\".split(\"\");\nfor(j = 0; j != D[236].length; ++j) if(D[236][j].charCodeAt(0) !== 0xFFFD) { e[D[236][j]] = 60416 + j; d[60416 + j] = D[236][j];}\nD[237] = \"����������������������������������������������������������������檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶����������������������������������瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞�\".split(\"\");\nfor(j = 0; j != D[237].length; ++j) if(D[237][j].charCodeAt(0) !== 0xFFFD) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j];}\nD[238] = \"����������������������������������������������������������������蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞����������������������������������謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜�\".split(\"\");\nfor(j = 0; j != D[238].length; ++j) if(D[238][j].charCodeAt(0) !== 0xFFFD) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j];}\nD[239] = \"����������������������������������������������������������������鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰����������������������������������鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶�\".split(\"\");\nfor(j = 0; j != D[239].length; ++j) if(D[239][j].charCodeAt(0) !== 0xFFFD) { e[D[239][j]] = 61184 + j; d[61184 + j] = D[239][j];}\nD[240] = \"����������������������������������������������������������������璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒����������������������������������臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧�\".split(\"\");\nfor(j = 0; j != D[240].length; ++j) if(D[240][j].charCodeAt(0) !== 0xFFFD) { e[D[240][j]] = 61440 + j; d[61440 + j] = D[240][j];}\nD[241] = \"����������������������������������������������������������������蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪����������������������������������鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰�\".split(\"\");\nfor(j = 0; j != D[241].length; ++j) if(D[241][j].charCodeAt(0) !== 0xFFFD) { e[D[241][j]] = 61696 + j; d[61696 + j] = D[241][j];}\nD[242] = \"����������������������������������������������������������������徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛����������������������������������礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕�\".split(\"\");\nfor(j = 0; j != D[242].length; ++j) if(D[242][j].charCodeAt(0) !== 0xFFFD) { e[D[242][j]] = 61952 + j; d[61952 + j] = D[242][j];}\nD[243] = \"����������������������������������������������������������������譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦����������������������������������鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲�\".split(\"\");\nfor(j = 0; j != D[243].length; ++j) if(D[243][j].charCodeAt(0) !== 0xFFFD) { e[D[243][j]] = 62208 + j; d[62208 + j] = D[243][j];}\nD[244] = \"����������������������������������������������������������������嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩����������������������������������禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿�\".split(\"\");\nfor(j = 0; j != D[244].length; ++j) if(D[244][j].charCodeAt(0) !== 0xFFFD) { e[D[244][j]] = 62464 + j; d[62464 + j] = D[244][j];}\nD[245] = \"����������������������������������������������������������������鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛����������������������������������鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥�\".split(\"\");\nfor(j = 0; j != D[245].length; ++j) if(D[245][j].charCodeAt(0) !== 0xFFFD) { e[D[245][j]] = 62720 + j; d[62720 + j] = D[245][j];}\nD[246] = \"����������������������������������������������������������������蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺����������������������������������騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚�\".split(\"\");\nfor(j = 0; j != D[246].length; ++j) if(D[246][j].charCodeAt(0) !== 0xFFFD) { e[D[246][j]] = 62976 + j; d[62976 + j] = D[246][j];}\nD[247] = \"����������������������������������������������������������������糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊����������������������������������驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾�\".split(\"\");\nfor(j = 0; j != D[247].length; ++j) if(D[247][j].charCodeAt(0) !== 0xFFFD) { e[D[247][j]] = 63232 + j; d[63232 + j] = D[247][j];}\nD[248] = \"����������������������������������������������������������������讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏����������������������������������齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚�\".split(\"\");\nfor(j = 0; j != D[248].length; ++j) if(D[248][j].charCodeAt(0) !== 0xFFFD) { e[D[248][j]] = 63488 + j; d[63488 + j] = D[248][j];}\nD[249] = \"����������������������������������������������������������������纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊����������������������������������龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓�\".split(\"\");\nfor(j = 0; j != D[249].length; ++j) if(D[249][j].charCodeAt(0) !== 0xFFFD) { e[D[249][j]] = 63744 + j; d[63744 + j] = D[249][j];}\nreturn {\"enc\": e, \"dec\": d }; })();\ncptable[1250] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙\", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[1251] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[1252] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[1253] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�\", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[1254] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ\", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[1255] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹ�ֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�\", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[1256] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے\", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[1257] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙\", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[1258] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[10000] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[10006] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�\", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[10007] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤\", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[10008] = (function(){ var d = [], e = {}, D = [], j;\nD[0] = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~���������������������������������������������������������������������������������������\".split(\"\");\nfor(j = 0; j != D[0].length; ++j) if(D[0][j].charCodeAt(0) !== 0xFFFD) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j];}\nD[161] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������　、。・ˉˇ¨〃々―～�…‘’“”〔〕〈〉《》「」『』〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓�\".split(\"\");\nfor(j = 0; j != D[161].length; ++j) if(D[161][j].charCodeAt(0) !== 0xFFFD) { e[D[161][j]] = 41216 + j; d[41216 + j] = D[161][j];}\nD[162] = \"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇①②③④⑤⑥⑦⑧⑨⑩��㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩��ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ���\".split(\"\");\nfor(j = 0; j != D[162].length; ++j) if(D[162][j].charCodeAt(0) !== 0xFFFD) { e[D[162][j]] = 41472 + j; d[41472 + j] = D[162][j];}\nD[163] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������！＂＃￥％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［＼］＾＿｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝￣�\".split(\"\");\nfor(j = 0; j != D[163].length; ++j) if(D[163][j].charCodeAt(0) !== 0xFFFD) { e[D[163][j]] = 41728 + j; d[41728 + j] = D[163][j];}\nD[164] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん������������\".split(\"\");\nfor(j = 0; j != D[164].length; ++j) if(D[164][j].charCodeAt(0) !== 0xFFFD) { e[D[164][j]] = 41984 + j; d[41984 + j] = D[164][j];}\nD[165] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶ���������\".split(\"\");\nfor(j = 0; j != D[165].length; ++j) if(D[165][j].charCodeAt(0) !== 0xFFFD) { e[D[165][j]] = 42240 + j; d[42240 + j] = D[165][j];}\nD[166] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ��������αβγδεζηθικλμνξοπρστυφχψω���������������������������������������\".split(\"\");\nfor(j = 0; j != D[166].length; ++j) if(D[166][j].charCodeAt(0) !== 0xFFFD) { e[D[166][j]] = 42496 + j; d[42496 + j] = D[166][j];}\nD[167] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ���������������абвгдеёжзийклмнопрстуфхцчшщъыьэюя��������������\".split(\"\");\nfor(j = 0; j != D[167].length; ++j) if(D[167][j].charCodeAt(0) !== 0xFFFD) { e[D[167][j]] = 42752 + j; d[42752 + j] = D[167][j];}\nD[168] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüê����������ㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩ����������������������\".split(\"\");\nfor(j = 0; j != D[168].length; ++j) if(D[168][j].charCodeAt(0) !== 0xFFFD) { e[D[168][j]] = 43008 + j; d[43008 + j] = D[168][j];}\nD[169] = \"��������������������������������������������������������������������������������������������������������������������������������������������������������������������─━│┃┄┅┆┇┈┉┊┋┌┍┎┏┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟┠┡┢┣┤┥┦┧┨┩┪┫┬┭┮┯┰┱┲┳┴┵┶┷┸┹┺┻┼┽┾┿╀╁╂╃╄╅╆╇╈╉╊╋����������������\".split(\"\");\nfor(j = 0; j != D[169].length; ++j) if(D[169][j].charCodeAt(0) !== 0xFFFD) { e[D[169][j]] = 43264 + j; d[43264 + j] = D[169][j];}\nD[176] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥�\".split(\"\");\nfor(j = 0; j != D[176].length; ++j) if(D[176][j].charCodeAt(0) !== 0xFFFD) { e[D[176][j]] = 45056 + j; d[45056 + j] = D[176][j];}\nD[177] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳�\".split(\"\");\nfor(j = 0; j != D[177].length; ++j) if(D[177][j].charCodeAt(0) !== 0xFFFD) { e[D[177][j]] = 45312 + j; d[45312 + j] = D[177][j];}\nD[178] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖�\".split(\"\");\nfor(j = 0; j != D[178].length; ++j) if(D[178][j].charCodeAt(0) !== 0xFFFD) { e[D[178][j]] = 45568 + j; d[45568 + j] = D[178][j];}\nD[179] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚�\".split(\"\");\nfor(j = 0; j != D[179].length; ++j) if(D[179][j].charCodeAt(0) !== 0xFFFD) { e[D[179][j]] = 45824 + j; d[45824 + j] = D[179][j];}\nD[180] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮�\".split(\"\");\nfor(j = 0; j != D[180].length; ++j) if(D[180][j].charCodeAt(0) !== 0xFFFD) { e[D[180][j]] = 46080 + j; d[46080 + j] = D[180][j];}\nD[181] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠�\".split(\"\");\nfor(j = 0; j != D[181].length; ++j) if(D[181][j].charCodeAt(0) !== 0xFFFD) { e[D[181][j]] = 46336 + j; d[46336 + j] = D[181][j];}\nD[182] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二�\".split(\"\");\nfor(j = 0; j != D[182].length; ++j) if(D[182][j].charCodeAt(0) !== 0xFFFD) { e[D[182][j]] = 46592 + j; d[46592 + j] = D[182][j];}\nD[183] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服�\".split(\"\");\nfor(j = 0; j != D[183].length; ++j) if(D[183][j].charCodeAt(0) !== 0xFFFD) { e[D[183][j]] = 46848 + j; d[46848 + j] = D[183][j];}\nD[184] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹�\".split(\"\");\nfor(j = 0; j != D[184].length; ++j) if(D[184][j].charCodeAt(0) !== 0xFFFD) { e[D[184][j]] = 47104 + j; d[47104 + j] = D[184][j];}\nD[185] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈�\".split(\"\");\nfor(j = 0; j != D[185].length; ++j) if(D[185][j].charCodeAt(0) !== 0xFFFD) { e[D[185][j]] = 47360 + j; d[47360 + j] = D[185][j];}\nD[186] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖�\".split(\"\");\nfor(j = 0; j != D[186].length; ++j) if(D[186][j].charCodeAt(0) !== 0xFFFD) { e[D[186][j]] = 47616 + j; d[47616 + j] = D[186][j];}\nD[187] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕�\".split(\"\");\nfor(j = 0; j != D[187].length; ++j) if(D[187][j].charCodeAt(0) !== 0xFFFD) { e[D[187][j]] = 47872 + j; d[47872 + j] = D[187][j];}\nD[188] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件�\".split(\"\");\nfor(j = 0; j != D[188].length; ++j) if(D[188][j].charCodeAt(0) !== 0xFFFD) { e[D[188][j]] = 48128 + j; d[48128 + j] = D[188][j];}\nD[189] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸�\".split(\"\");\nfor(j = 0; j != D[189].length; ++j) if(D[189][j].charCodeAt(0) !== 0xFFFD) { e[D[189][j]] = 48384 + j; d[48384 + j] = D[189][j];}\nD[190] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻�\".split(\"\");\nfor(j = 0; j != D[190].length; ++j) if(D[190][j].charCodeAt(0) !== 0xFFFD) { e[D[190][j]] = 48640 + j; d[48640 + j] = D[190][j];}\nD[191] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀�\".split(\"\");\nfor(j = 0; j != D[191].length; ++j) if(D[191][j].charCodeAt(0) !== 0xFFFD) { e[D[191][j]] = 48896 + j; d[48896 + j] = D[191][j];}\nD[192] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐�\".split(\"\");\nfor(j = 0; j != D[192].length; ++j) if(D[192][j].charCodeAt(0) !== 0xFFFD) { e[D[192][j]] = 49152 + j; d[49152 + j] = D[192][j];}\nD[193] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿�\".split(\"\");\nfor(j = 0; j != D[193].length; ++j) if(D[193][j].charCodeAt(0) !== 0xFFFD) { e[D[193][j]] = 49408 + j; d[49408 + j] = D[193][j];}\nD[194] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫�\".split(\"\");\nfor(j = 0; j != D[194].length; ++j) if(D[194][j].charCodeAt(0) !== 0xFFFD) { e[D[194][j]] = 49664 + j; d[49664 + j] = D[194][j];}\nD[195] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸�\".split(\"\");\nfor(j = 0; j != D[195].length; ++j) if(D[195][j].charCodeAt(0) !== 0xFFFD) { e[D[195][j]] = 49920 + j; d[49920 + j] = D[195][j];}\nD[196] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁�\".split(\"\");\nfor(j = 0; j != D[196].length; ++j) if(D[196][j].charCodeAt(0) !== 0xFFFD) { e[D[196][j]] = 50176 + j; d[50176 + j] = D[196][j];}\nD[197] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗�\".split(\"\");\nfor(j = 0; j != D[197].length; ++j) if(D[197][j].charCodeAt(0) !== 0xFFFD) { e[D[197][j]] = 50432 + j; d[50432 + j] = D[197][j];}\nD[198] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐�\".split(\"\");\nfor(j = 0; j != D[198].length; ++j) if(D[198][j].charCodeAt(0) !== 0xFFFD) { e[D[198][j]] = 50688 + j; d[50688 + j] = D[198][j];}\nD[199] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠�\".split(\"\");\nfor(j = 0; j != D[199].length; ++j) if(D[199][j].charCodeAt(0) !== 0xFFFD) { e[D[199][j]] = 50944 + j; d[50944 + j] = D[199][j];}\nD[200] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁�\".split(\"\");\nfor(j = 0; j != D[200].length; ++j) if(D[200][j].charCodeAt(0) !== 0xFFFD) { e[D[200][j]] = 51200 + j; d[51200 + j] = D[200][j];}\nD[201] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳�\".split(\"\");\nfor(j = 0; j != D[201].length; ++j) if(D[201][j].charCodeAt(0) !== 0xFFFD) { e[D[201][j]] = 51456 + j; d[51456 + j] = D[201][j];}\nD[202] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱�\".split(\"\");\nfor(j = 0; j != D[202].length; ++j) if(D[202][j].charCodeAt(0) !== 0xFFFD) { e[D[202][j]] = 51712 + j; d[51712 + j] = D[202][j];}\nD[203] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔�\".split(\"\");\nfor(j = 0; j != D[203].length; ++j) if(D[203][j].charCodeAt(0) !== 0xFFFD) { e[D[203][j]] = 51968 + j; d[51968 + j] = D[203][j];}\nD[204] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃�\".split(\"\");\nfor(j = 0; j != D[204].length; ++j) if(D[204][j].charCodeAt(0) !== 0xFFFD) { e[D[204][j]] = 52224 + j; d[52224 + j] = D[204][j];}\nD[205] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威�\".split(\"\");\nfor(j = 0; j != D[205].length; ++j) if(D[205][j].charCodeAt(0) !== 0xFFFD) { e[D[205][j]] = 52480 + j; d[52480 + j] = D[205][j];}\nD[206] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺�\".split(\"\");\nfor(j = 0; j != D[206].length; ++j) if(D[206][j].charCodeAt(0) !== 0xFFFD) { e[D[206][j]] = 52736 + j; d[52736 + j] = D[206][j];}\nD[207] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓�\".split(\"\");\nfor(j = 0; j != D[207].length; ++j) if(D[207][j].charCodeAt(0) !== 0xFFFD) { e[D[207][j]] = 52992 + j; d[52992 + j] = D[207][j];}\nD[208] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄�\".split(\"\");\nfor(j = 0; j != D[208].length; ++j) if(D[208][j].charCodeAt(0) !== 0xFFFD) { e[D[208][j]] = 53248 + j; d[53248 + j] = D[208][j];}\nD[209] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶�\".split(\"\");\nfor(j = 0; j != D[209].length; ++j) if(D[209][j].charCodeAt(0) !== 0xFFFD) { e[D[209][j]] = 53504 + j; d[53504 + j] = D[209][j];}\nD[210] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐�\".split(\"\");\nfor(j = 0; j != D[210].length; ++j) if(D[210][j].charCodeAt(0) !== 0xFFFD) { e[D[210][j]] = 53760 + j; d[53760 + j] = D[210][j];}\nD[211] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉�\".split(\"\");\nfor(j = 0; j != D[211].length; ++j) if(D[211][j].charCodeAt(0) !== 0xFFFD) { e[D[211][j]] = 54016 + j; d[54016 + j] = D[211][j];}\nD[212] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧�\".split(\"\");\nfor(j = 0; j != D[212].length; ++j) if(D[212][j].charCodeAt(0) !== 0xFFFD) { e[D[212][j]] = 54272 + j; d[54272 + j] = D[212][j];}\nD[213] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政�\".split(\"\");\nfor(j = 0; j != D[213].length; ++j) if(D[213][j].charCodeAt(0) !== 0xFFFD) { e[D[213][j]] = 54528 + j; d[54528 + j] = D[213][j];}\nD[214] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑�\".split(\"\");\nfor(j = 0; j != D[214].length; ++j) if(D[214][j].charCodeAt(0) !== 0xFFFD) { e[D[214][j]] = 54784 + j; d[54784 + j] = D[214][j];}\nD[215] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座������\".split(\"\");\nfor(j = 0; j != D[215].length; ++j) if(D[215][j].charCodeAt(0) !== 0xFFFD) { e[D[215][j]] = 55040 + j; d[55040 + j] = D[215][j];}\nD[216] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝�\".split(\"\");\nfor(j = 0; j != D[216].length; ++j) if(D[216][j].charCodeAt(0) !== 0xFFFD) { e[D[216][j]] = 55296 + j; d[55296 + j] = D[216][j];}\nD[217] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼�\".split(\"\");\nfor(j = 0; j != D[217].length; ++j) if(D[217][j].charCodeAt(0) !== 0xFFFD) { e[D[217][j]] = 55552 + j; d[55552 + j] = D[217][j];}\nD[218] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺�\".split(\"\");\nfor(j = 0; j != D[218].length; ++j) if(D[218][j].charCodeAt(0) !== 0xFFFD) { e[D[218][j]] = 55808 + j; d[55808 + j] = D[218][j];}\nD[219] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝�\".split(\"\");\nfor(j = 0; j != D[219].length; ++j) if(D[219][j].charCodeAt(0) !== 0xFFFD) { e[D[219][j]] = 56064 + j; d[56064 + j] = D[219][j];}\nD[220] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥�\".split(\"\");\nfor(j = 0; j != D[220].length; ++j) if(D[220][j].charCodeAt(0) !== 0xFFFD) { e[D[220][j]] = 56320 + j; d[56320 + j] = D[220][j];}\nD[221] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺�\".split(\"\");\nfor(j = 0; j != D[221].length; ++j) if(D[221][j].charCodeAt(0) !== 0xFFFD) { e[D[221][j]] = 56576 + j; d[56576 + j] = D[221][j];}\nD[222] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖�\".split(\"\");\nfor(j = 0; j != D[222].length; ++j) if(D[222][j].charCodeAt(0) !== 0xFFFD) { e[D[222][j]] = 56832 + j; d[56832 + j] = D[222][j];}\nD[223] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼�\".split(\"\");\nfor(j = 0; j != D[223].length; ++j) if(D[223][j].charCodeAt(0) !== 0xFFFD) { e[D[223][j]] = 57088 + j; d[57088 + j] = D[223][j];}\nD[224] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼�\".split(\"\");\nfor(j = 0; j != D[224].length; ++j) if(D[224][j].charCodeAt(0) !== 0xFFFD) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j];}\nD[225] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺�\".split(\"\");\nfor(j = 0; j != D[225].length; ++j) if(D[225][j].charCodeAt(0) !== 0xFFFD) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j];}\nD[226] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧饨饩饪饫饬饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂�\".split(\"\");\nfor(j = 0; j != D[226].length; ++j) if(D[226][j].charCodeAt(0) !== 0xFFFD) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j];}\nD[227] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾�\".split(\"\");\nfor(j = 0; j != D[227].length; ++j) if(D[227][j].charCodeAt(0) !== 0xFFFD) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j];}\nD[228] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑�\".split(\"\");\nfor(j = 0; j != D[228].length; ++j) if(D[228][j].charCodeAt(0) !== 0xFFFD) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j];}\nD[229] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣�\".split(\"\");\nfor(j = 0; j != D[229].length; ++j) if(D[229][j].charCodeAt(0) !== 0xFFFD) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j];}\nD[230] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩�\".split(\"\");\nfor(j = 0; j != D[230].length; ++j) if(D[230][j].charCodeAt(0) !== 0xFFFD) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j];}\nD[231] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡缢缣缤缥缦缧缪缫缬缭缯缰缱缲缳缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬�\".split(\"\");\nfor(j = 0; j != D[231].length; ++j) if(D[231][j].charCodeAt(0) !== 0xFFFD) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j];}\nD[232] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹�\".split(\"\");\nfor(j = 0; j != D[232].length; ++j) if(D[232][j].charCodeAt(0) !== 0xFFFD) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j];}\nD[233] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋�\".split(\"\");\nfor(j = 0; j != D[233].length; ++j) if(D[233][j].charCodeAt(0) !== 0xFFFD) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j];}\nD[234] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰�\".split(\"\");\nfor(j = 0; j != D[234].length; ++j) if(D[234][j].charCodeAt(0) !== 0xFFFD) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j];}\nD[235] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻�\".split(\"\");\nfor(j = 0; j != D[235].length; ++j) if(D[235][j].charCodeAt(0) !== 0xFFFD) { e[D[235][j]] = 60160 + j; d[60160 + j] = D[235][j];}\nD[236] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐�\".split(\"\");\nfor(j = 0; j != D[236].length; ++j) if(D[236][j].charCodeAt(0) !== 0xFFFD) { e[D[236][j]] = 60416 + j; d[60416 + j] = D[236][j];}\nD[237] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨�\".split(\"\");\nfor(j = 0; j != D[237].length; ++j) if(D[237][j].charCodeAt(0) !== 0xFFFD) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j];}\nD[238] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶钷钸钹钺钼钽钿铄铈铉铊铋铌铍铎铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪�\".split(\"\");\nfor(j = 0; j != D[238].length; ++j) if(D[238][j].charCodeAt(0) !== 0xFFFD) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j];}\nD[239] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒锓锔锕锖锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤镥镦镧镨镩镪镫镬镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔�\".split(\"\");\nfor(j = 0; j != D[239].length; ++j) if(D[239][j].charCodeAt(0) !== 0xFFFD) { e[D[239][j]] = 61184 + j; d[61184 + j] = D[239][j];}\nD[240] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨鸩鸪鸫鸬鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦鹧鹨鹩鹪鹫鹬鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙�\".split(\"\");\nfor(j = 0; j != D[240].length; ++j) if(D[240][j].charCodeAt(0) !== 0xFFFD) { e[D[240][j]] = 61440 + j; d[61440 + j] = D[240][j];}\nD[241] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃�\".split(\"\");\nfor(j = 0; j != D[241].length; ++j) if(D[241][j].charCodeAt(0) !== 0xFFFD) { e[D[241][j]] = 61696 + j; d[61696 + j] = D[241][j];}\nD[242] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒�\".split(\"\");\nfor(j = 0; j != D[242].length; ++j) if(D[242][j].charCodeAt(0) !== 0xFFFD) { e[D[242][j]] = 61952 + j; d[61952 + j] = D[242][j];}\nD[243] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋�\".split(\"\");\nfor(j = 0; j != D[243].length; ++j) if(D[243][j].charCodeAt(0) !== 0xFFFD) { e[D[243][j]] = 62208 + j; d[62208 + j] = D[243][j];}\nD[244] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤�\".split(\"\");\nfor(j = 0; j != D[244].length; ++j) if(D[244][j].charCodeAt(0) !== 0xFFFD) { e[D[244][j]] = 62464 + j; d[62464 + j] = D[244][j];}\nD[245] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜�\".split(\"\");\nfor(j = 0; j != D[245].length; ++j) if(D[245][j].charCodeAt(0) !== 0xFFFD) { e[D[245][j]] = 62720 + j; d[62720 + j] = D[245][j];}\nD[246] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅龆龇龈龉龊龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞鲟鲠鲡鲢鲣鲥鲦鲧鲨鲩鲫鲭鲮鲰鲱鲲鲳鲴鲵鲶鲷鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋�\".split(\"\");\nfor(j = 0; j != D[246].length; ++j) if(D[246][j].charCodeAt(0) !== 0xFFFD) { e[D[246][j]] = 62976 + j; d[62976 + j] = D[246][j];}\nD[247] = \"�����������������������������������������������������������������������������������������������������������������������������������������������������������������鳌鳍鳎鳏鳐鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄�\".split(\"\");\nfor(j = 0; j != D[247].length; ++j) if(D[247][j].charCodeAt(0) !== 0xFFFD) { e[D[247][j]] = 63232 + j; d[63232 + j] = D[247][j];}\nreturn {\"enc\": e, \"dec\": d }; })();\ncptable[10029] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ\", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[10079] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[10081] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ\", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\ncptable[28591] = (function(){ var d = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {\"enc\": e, \"dec\": D }; })();\n// eslint-disable-next-line no-undef\nif ( true && module.exports && typeof DO_NOT_EXPORT_CODEPAGE === 'undefined') module.exports = cptable;\n/*! cputils.js (C) 2013-present SheetJS -- http://sheetjs.com */\n/* vim: set ft=javascript: */\n/*jshint newcap: false */\n(function(root, factory) {\n  /*jshint ignore:start */\n  /*eslint-disable */\n  \"use strict\";\n  if(typeof cptable === \"undefined\") {\n    if(true){\n      var cpt = cptable;\n      if ( true && module.exports && typeof DO_NOT_EXPORT_CODEPAGE === 'undefined') module.exports = factory(cpt);\n      else root.cptable = factory(cpt);\n    } else {}\n  } else cptable = factory(cptable);\n  /*eslint-enable */\n  /*jshint ignore:end */\n}(this, function(cpt){\n  \"use strict\";\n  /*global module, Buffer */\n  var magic = {\n    \"1200\":\"utf16le\",\n    \"1201\":\"utf16be\",\n    \"12000\":\"utf32le\",\n    \"12001\":\"utf32be\",\n    \"16969\":\"utf64le\",\n    \"20127\":\"ascii\",\n    \"65000\":\"utf7\",\n    \"65001\":\"utf8\"\n  };\n\n  var sbcs_cache = [874,1250,1251,1252,1253,1254,1255,1256,10000];\n  var dbcs_cache = [932,936,949,950];\n  var magic_cache = [65001];\n  var magic_decode = {};\n  var magic_encode = {};\n  var cpdcache = {};\n  var cpecache = {};\n\n  var sfcc = function sfcc(x) { return String.fromCharCode(x); };\n  var cca = function cca(x) { return x.charCodeAt(0); };\n\n  var has_buf = (typeof Buffer !== 'undefined');\n  var Buffer_from = function(){};\n  if(has_buf) {\n    var nbfs = !Buffer.from;\n    if(!nbfs) try { Buffer.from(\"foo\", \"utf8\"); } catch(e) { nbfs = true; }\n    Buffer_from = nbfs ? function(buf, enc) { return (enc) ? new Buffer(buf, enc) : new Buffer(buf); } : Buffer.from.bind(Buffer);\n    // $FlowIgnore\n    if(!Buffer.allocUnsafe) Buffer.allocUnsafe = function(n) { return new Buffer(n); };\n\n    var mdl = 1024, mdb = Buffer.allocUnsafe(mdl);\n    var make_EE = function make_EE(E){\n      var EE = Buffer.allocUnsafe(65536);\n      for(var i = 0; i < 65536;++i) EE[i] = 0;\n      var keys = Object.keys(E), len = keys.length;\n      for(var ee = 0, e = keys[ee]; ee < len; ++ee) {\n        if(!(e = keys[ee])) continue;\n        EE[e.charCodeAt(0)] = E[e];\n      }\n      return EE;\n    };\n    var sbcs_encode = function make_sbcs_encode(cp) {\n      var EE = make_EE(cpt[cp].enc);\n      return function sbcs_e(data, ofmt) {\n        var len = data.length;\n        var out, i=0, j=0, D=0, w=0;\n        if(typeof data === 'string') {\n          out = Buffer.allocUnsafe(len);\n          for(i = 0; i < len; ++i) out[i] = EE[data.charCodeAt(i)];\n        } else if(Buffer.isBuffer(data)) {\n          out = Buffer.allocUnsafe(2*len);\n          j = 0;\n          for(i = 0; i < len; ++i) {\n            D = data[i];\n            if(D < 128) out[j++] = EE[D];\n            else if(D < 224) { out[j++] = EE[((D&31)<<6)+(data[i+1]&63)]; ++i; }\n            else if(D < 240) { out[j++] = EE[((D&15)<<12)+((data[i+1]&63)<<6)+(data[i+2]&63)]; i+=2; }\n            else {\n              w = ((D&7)<<18)+((data[i+1]&63)<<12)+((data[i+2]&63)<<6)+(data[i+3]&63); i+=3;\n              if(w < 65536) out[j++] = EE[w];\n              else { w -= 65536; out[j++] = EE[0xD800 + ((w>>10)&1023)]; out[j++] = EE[0xDC00 + (w&1023)]; }\n            }\n          }\n          out = out.slice(0,j);\n        } else {\n          out = Buffer.allocUnsafe(len);\n          for(i = 0; i < len; ++i) out[i] = EE[data[i].charCodeAt(0)];\n        }\n        if(!ofmt || ofmt === 'buf') return out;\n        if(ofmt !== 'arr') return out.toString('binary');\n        return [].slice.call(out);\n      };\n    };\n    var sbcs_decode = function make_sbcs_decode(cp) {\n      var D = cpt[cp].dec;\n      var DD = Buffer.allocUnsafe(131072), d=0, c=\"\";\n      for(d=0;d<D.length;++d) {\n        if(!(c=D[d])) continue;\n        var w = c.charCodeAt(0);\n        DD[2*d] = w&255; DD[2*d+1] = w>>8;\n      }\n      return function sbcs_d(data) {\n        var len = data.length, i=0, j=0;\n        if(2 * len > mdl) { mdl = 2 * len; mdb = Buffer.allocUnsafe(mdl); }\n        if(Buffer.isBuffer(data)) {\n          for(i = 0; i < len; i++) {\n            j = 2*data[i];\n            mdb[2*i] = DD[j]; mdb[2*i+1] = DD[j+1];\n          }\n        } else if(typeof data === \"string\") {\n          for(i = 0; i < len; i++) {\n            j = 2*data.charCodeAt(i);\n            mdb[2*i] = DD[j]; mdb[2*i+1] = DD[j+1];\n          }\n        } else {\n          for(i = 0; i < len; i++) {\n            j = 2*data[i];\n            mdb[2*i] = DD[j]; mdb[2*i+1] = DD[j+1];\n          }\n        }\n        return mdb.slice(0, 2 * len).toString('ucs2');\n      };\n    };\n    var dbcs_encode = function make_dbcs_encode(cp) {\n      var E = cpt[cp].enc;\n      var EE = Buffer.allocUnsafe(131072);\n      for(var i = 0; i < 131072; ++i) EE[i] = 0;\n      var keys = Object.keys(E);\n      for(var ee = 0, e = keys[ee]; ee < keys.length; ++ee) {\n        if(!(e = keys[ee])) continue;\n        var f = e.charCodeAt(0);\n        EE[2*f] = E[e] & 255; EE[2*f+1] = E[e]>>8;\n      }\n      return function dbcs_e(data, ofmt) {\n        var len = data.length, out = Buffer.allocUnsafe(2*len), i=0, j=0, jj=0, k=0, D=0;\n        if(typeof data === 'string') {\n          for(i = k = 0; i < len; ++i) {\n            j = data.charCodeAt(i)*2;\n            out[k++] = EE[j+1] || EE[j]; if(EE[j+1] > 0) out[k++] = EE[j];\n          }\n          out = out.slice(0,k);\n        } else if(Buffer.isBuffer(data)) {\n          for(i = k = 0; i < len; ++i) {\n            D = data[i];\n            if(D < 128) j = D;\n            else if(D < 224) { j = ((D&31)<<6)+(data[i+1]&63); ++i; }\n            else if(D < 240) { j = ((D&15)<<12)+((data[i+1]&63)<<6)+(data[i+2]&63); i+=2; }\n            else { j = ((D&7)<<18)+((data[i+1]&63)<<12)+((data[i+2]&63)<<6)+(data[i+3]&63); i+=3; }\n            if(j<65536) { j*=2; out[k++] = EE[j+1] || EE[j]; if(EE[j+1] > 0) out[k++] = EE[j]; }\n            else { jj = j-65536;\n              j=2*(0xD800 + ((jj>>10)&1023)); out[k++] = EE[j+1] || EE[j]; if(EE[j+1] > 0) out[k++] = EE[j];\n              j=2*(0xDC00 + (jj&1023)); out[k++] = EE[j+1] || EE[j]; if(EE[j+1] > 0) out[k++] = EE[j];\n            }\n          }\n          out = out.slice(0,k);\n        } else {\n          for(i = k = 0; i < len; i++) {\n            j = data[i].charCodeAt(0)*2;\n            out[k++] = EE[j+1] || EE[j]; if(EE[j+1] > 0) out[k++] = EE[j];\n          }\n        }\n        if(!ofmt || ofmt === 'buf') return out;\n        if(ofmt !== 'arr') return out.toString('binary');\n        return [].slice.call(out);\n      };\n    };\n    var dbcs_decode = function make_dbcs_decode(cp) {\n      var D = cpt[cp].dec;\n      var DD = Buffer.allocUnsafe(131072), d=0, c, w=0, j=0, i=0;\n      for(i = 0; i < 65536; ++i) { DD[2*i] = 0xFF; DD[2*i+1] = 0xFD;}\n      for(d = 0; d < D.length; ++d) {\n        if(!(c=D[d])) continue;\n        w = c.charCodeAt(0);\n        j = 2*d;\n        DD[j] = w&255; DD[j+1] = w>>8;\n      }\n      return function dbcs_d(data) {\n        var len = data.length, out = Buffer.allocUnsafe(2*len), i=0, j=0, k=0;\n        if(Buffer.isBuffer(data)) {\n          for(i = 0; i < len; i++) {\n            j = 2*data[i];\n            if(DD[j]===0xFF && DD[j+1]===0xFD) { j=2*((data[i]<<8)+data[i+1]); ++i; }\n            out[k++] = DD[j]; out[k++] = DD[j+1];\n          }\n        } else if(typeof data === \"string\") {\n          for(i = 0; i < len; i++) {\n            j = 2*data.charCodeAt(i);\n            if(DD[j]===0xFF && DD[j+1]===0xFD) { j=2*((data.charCodeAt(i)<<8)+data.charCodeAt(i+1)); ++i; }\n            out[k++] = DD[j]; out[k++] = DD[j+1];\n          }\n        } else {\n          for(i = 0; i < len; i++) {\n            j = 2*data[i];\n            if(DD[j]===0xFF && DD[j+1]===0xFD) { j=2*((data[i]<<8)+data[i+1]); ++i; }\n            out[k++] = DD[j]; out[k++] = DD[j+1];\n          }\n        }\n        return out.slice(0,k).toString('ucs2');\n      };\n    };\n    magic_decode[65001] = function utf8_d(data) {\n      if(typeof data === \"string\") return utf8_d(data.split(\"\").map(cca));\n      var len = data.length, w = 0, ww = 0;\n      if(4 * len > mdl) { mdl = 4 * len; mdb = Buffer.allocUnsafe(mdl); }\n      var i = 0;\n      if(len >= 3 && data[0] == 0xEF) if(data[1] == 0xBB && data[2] == 0xBF) i = 3;\n      for(var j = 1, k = 0, D = 0; i < len; i+=j) {\n        j = 1; D = data[i];\n        if(D < 128) w = D;\n        else if(D < 224) { w=(D&31)*64+(data[i+1]&63); j=2; }\n        else if(D < 240) { w=((D&15)<<12)+(data[i+1]&63)*64+(data[i+2]&63); j=3; }\n        else { w=(D&7)*262144+((data[i+1]&63)<<12)+(data[i+2]&63)*64+(data[i+3]&63); j=4; }\n        if(w < 65536) { mdb[k++] = w&255; mdb[k++] = w>>8; }\n        else {\n          w -= 65536; ww = 0xD800 + ((w>>10)&1023); w = 0xDC00 + (w&1023);\n          mdb[k++] = ww&255; mdb[k++] = ww>>>8; mdb[k++] = w&255; mdb[k++] = (w>>>8)&255;\n        }\n      }\n      return mdb.slice(0,k).toString('ucs2');\n    };\n    magic_encode[65001] = function utf8_e(data, ofmt) {\n      if(has_buf && Buffer.isBuffer(data)) {\n        if(!ofmt || ofmt === 'buf') return data;\n        if(ofmt !== 'arr') return data.toString('binary');\n        return [].slice.call(data);\n      }\n      var len = data.length, w = 0, ww = 0, j = 0;\n      var direct = typeof data === \"string\";\n      if(4 * len > mdl) { mdl = 4 * len; mdb = Buffer.allocUnsafe(mdl); }\n      for(var i = 0; i < len; ++i) {\n        w = direct ? data.charCodeAt(i) : data[i].charCodeAt(0);\n        if(w <= 0x007F) mdb[j++] = w;\n        else if(w <= 0x07FF) {\n          mdb[j++] = 192 + (w >> 6);\n          mdb[j++] = 128 + (w&63);\n        } else if(w >= 0xD800 && w <= 0xDFFF) {\n          w -= 0xD800; ++i;\n          ww = (direct ? data.charCodeAt(i) : data[i].charCodeAt(0)) - 0xDC00 + (w << 10);\n          mdb[j++] = 240 + ((ww>>>18) & 0x07);\n          mdb[j++] = 144 + ((ww>>>12) & 0x3F);\n          mdb[j++] = 128 + ((ww>>>6) & 0x3F);\n          mdb[j++] = 128 + (ww & 0x3F);\n        } else {\n          mdb[j++] = 224 + (w >> 12);\n          mdb[j++] = 128 + ((w >> 6)&63);\n          mdb[j++] = 128 + (w&63);\n        }\n      }\n      if(!ofmt || ofmt === 'buf') return mdb.slice(0,j);\n      if(ofmt !== 'arr') return mdb.slice(0,j).toString('binary');\n      return [].slice.call(mdb, 0, j);\n    };\n  }\n\n  var encache = function encache() {\n    if(has_buf) {\n      if(cpdcache[sbcs_cache[0]]) return;\n      var i=0, s=0;\n      for(i = 0; i < sbcs_cache.length; ++i) {\n        s = sbcs_cache[i];\n        if(cpt[s]) {\n          cpdcache[s] = sbcs_decode(s);\n          cpecache[s] = sbcs_encode(s);\n        }\n      }\n      for(i = 0; i < dbcs_cache.length; ++i) {\n        s = dbcs_cache[i];\n        if(cpt[s]) {\n          cpdcache[s] = dbcs_decode(s);\n          cpecache[s] = dbcs_encode(s);\n        }\n      }\n      for(i = 0; i < magic_cache.length; ++i) {\n        s = magic_cache[i];\n        if(magic_decode[s]) cpdcache[s] = magic_decode[s];\n        if(magic_encode[s]) cpecache[s] = magic_encode[s];\n      }\n    }\n  };\n  var null_enc = function(data, ofmt) { void ofmt; return \"\"; };\n  var cp_decache = function cp_decache(cp) { delete cpdcache[cp]; delete cpecache[cp]; };\n  var decache = function decache() {\n    if(has_buf) {\n      if(!cpdcache[sbcs_cache[0]]) return;\n      sbcs_cache.forEach(cp_decache);\n      dbcs_cache.forEach(cp_decache);\n      magic_cache.forEach(cp_decache);\n    }\n    last_enc = null_enc; last_cp = 0;\n  };\n  var cache = {\n    encache: encache,\n    decache: decache,\n    sbcs: sbcs_cache,\n    dbcs: dbcs_cache\n  };\n\n  encache();\n\n  var BM = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  var SetD = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'(),-./:?\";\n  var last_enc = null_enc, last_cp = 0;\n  var encode = function encode(cp, data, ofmt) {\n    if(cp === last_cp && last_enc) { return last_enc(data, ofmt); }\n    if(cpecache[cp]) { last_enc = cpecache[last_cp=cp]; return last_enc(data, ofmt); }\n    if(has_buf && Buffer.isBuffer(data)) data = data.toString('utf8');\n    var len = data.length;\n    var out = has_buf ? Buffer.allocUnsafe(4*len) : [], w=0, i=0, j = 0, ww=0;\n    var C = cpt[cp], E, M = \"\";\n    var isstr = typeof data === 'string';\n    if(C && (E=C.enc)) for(i = 0; i < len; ++i, ++j) {\n      w = E[isstr? data.charAt(i) : data[i]];\n      if(w > 255) {\n        out[j] = w>>8;\n        out[++j] = w&255;\n      } else out[j] = w&255;\n    }\n    else if((M=magic[cp])) switch(M) {\n      case \"utf8\":\n        if(has_buf && isstr) { out = Buffer_from(data, M); j = out.length; break; }\n        for(i = 0; i < len; ++i, ++j) {\n          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);\n          if(w <= 0x007F) out[j] = w;\n          else if(w <= 0x07FF) {\n            out[j]   = 192 + (w >> 6);\n            out[++j] = 128 + (w&63);\n          } else if(w >= 0xD800 && w <= 0xDFFF) {\n            w -= 0xD800;\n            ww = (isstr ? data.charCodeAt(++i) : data[++i].charCodeAt(0)) - 0xDC00 + (w << 10);\n            out[j]   = 240 + ((ww>>>18) & 0x07);\n            out[++j] = 144 + ((ww>>>12) & 0x3F);\n            out[++j] = 128 + ((ww>>>6) & 0x3F);\n            out[++j] = 128 + (ww & 0x3F);\n          } else {\n            out[j]   = 224 + (w >> 12);\n            out[++j] = 128 + ((w >> 6)&63);\n            out[++j] = 128 + (w&63);\n          }\n        }\n        break;\n      case \"ascii\":\n        if(has_buf && typeof data === \"string\") { out = Buffer_from(data, M); j = out.length; break; }\n        for(i = 0; i < len; ++i, ++j) {\n          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);\n          if(w <= 0x007F) out[j] = w;\n          else throw new Error(\"bad ascii \" + w);\n        }\n        break;\n      case \"utf16le\":\n        if(has_buf && typeof data === \"string\") { out = Buffer_from(data, M); j = out.length; break; }\n        for(i = 0; i < len; ++i) {\n          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);\n          out[j++] = w&255;\n          out[j++] = w>>8;\n        }\n        break;\n      case \"utf16be\":\n        for(i = 0; i < len; ++i) {\n          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);\n          out[j++] = w>>8;\n          out[j++] = w&255;\n        }\n        break;\n      case \"utf32le\":\n        for(i = 0; i < len; ++i) {\n          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);\n          if(w >= 0xD800 && w <= 0xDFFF) w = 0x10000 + ((w - 0xD800) << 10) + (data[++i].charCodeAt(0) - 0xDC00);\n          out[j++] = w&255; w >>= 8;\n          out[j++] = w&255; w >>= 8;\n          out[j++] = w&255; w >>= 8;\n          out[j++] = w&255;\n        }\n        break;\n      case \"utf32be\":\n        for(i = 0; i < len; ++i) {\n          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);\n          if(w >= 0xD800 && w <= 0xDFFF) w = 0x10000 + ((w - 0xD800) << 10) + (data[++i].charCodeAt(0) - 0xDC00);\n          out[j+3] = w&255; w >>= 8;\n          out[j+2] = w&255; w >>= 8;\n          out[j+1] = w&255; w >>= 8;\n          out[j] = w&255;\n          j+=4;\n        }\n        break;\n      case \"utf7\":\n        for(i = 0; i < len; i++) {\n          var c = isstr ? data.charAt(i) : data[i].charAt(0);\n          if(c === \"+\") { out[j++] = 0x2b; out[j++] = 0x2d; continue; }\n          if(SetD.indexOf(c) > -1) { out[j++] = c.charCodeAt(0); continue; }\n          var tt = encode(1201, c);\n          out[j++] = 0x2b;\n          out[j++] = BM.charCodeAt(tt[0]>>2);\n          out[j++] = BM.charCodeAt(((tt[0]&0x03)<<4) + ((tt[1]||0)>>4));\n          out[j++] = BM.charCodeAt(((tt[1]&0x0F)<<2) + ((tt[2]||0)>>6));\n          out[j++] = 0x2d;\n        }\n        break;\n      default: throw new Error(\"Unsupported magic: \" + cp + \" \" + magic[cp]);\n    }\n    else throw new Error(\"Unrecognized CP: \" + cp);\n    out = out.slice(0,j);\n    if(!has_buf) return (ofmt == 'str') ? (out).map(sfcc).join(\"\") : out;\n    if(!ofmt || ofmt === 'buf') return out;\n    if(ofmt !== 'arr') return out.toString('binary');\n    return [].slice.call(out);\n  };\n  var decode = function decode(cp, data) {\n    var F; if((F=cpdcache[cp])) return F(data);\n    if(typeof data === \"string\") return decode(cp, data.split(\"\").map(cca));\n    var len = data.length, out = new Array(len), s=\"\", w=0, i=0, j=1, k=0, ww=0;\n    var C = cpt[cp], D, M=\"\";\n    if(C && (D=C.dec)) {\n      for(i = 0; i < len; i+=j) {\n        j = 2;\n        s = D[(data[i]<<8)+ data[i+1]];\n        if(!s) {\n          j = 1;\n          s = D[data[i]];\n        }\n        if(!s) throw new Error('Unrecognized code: ' + data[i] + ' ' + data[i+j-1] + ' ' + i + ' ' + j + ' ' + D[data[i]]);\n        out[k++] = s;\n      }\n    }\n    else if((M=magic[cp])) switch(M) {\n      case \"utf8\":\n        if(len >= 3 && data[0] == 0xEF) if(data[1] == 0xBB && data[2] == 0xBF) i = 3;\n        for(; i < len; i+=j) {\n          j = 1;\n          if(data[i] < 128) w = data[i];\n          else if(data[i] < 224) { w=(data[i]&31)*64+(data[i+1]&63); j=2; }\n          else if(data[i] < 240) { w=((data[i]&15)<<12)+(data[i+1]&63)*64+(data[i+2]&63); j=3; }\n          else { w=(data[i]&7)*262144+((data[i+1]&63)<<12)+(data[i+2]&63)*64+(data[i+3]&63); j=4; }\n          if(w < 65536) { out[k++] = String.fromCharCode(w); }\n          else {\n            w -= 65536; ww = 0xD800 + ((w>>10)&1023); w = 0xDC00 + (w&1023);\n            out[k++] = String.fromCharCode(ww); out[k++] = String.fromCharCode(w);\n          }\n        }\n        break;\n      case \"ascii\":\n        if(has_buf && Buffer.isBuffer(data)) return data.toString(M);\n        for(i = 0; i < len; i++) out[i] = String.fromCharCode(data[i]);\n        k = len; break;\n      case \"utf16le\":\n        if(len >= 2 && data[0] == 0xFF) if(data[1] == 0xFE) i = 2;\n        if(has_buf && Buffer.isBuffer(data)) return data.toString(M);\n        j = 2;\n        for(; i+1 < len; i+=j) {\n          out[k++] = String.fromCharCode((data[i+1]<<8) + data[i]);\n        }\n        break;\n      case \"utf16be\":\n        if(len >= 2 && data[0] == 0xFE) if(data[1] == 0xFF) i = 2;\n        j = 2;\n        for(; i+1 < len; i+=j) {\n          out[k++] = String.fromCharCode((data[i]<<8) + data[i+1]);\n        }\n        break;\n      case \"utf32le\":\n        if(len >= 4 && data[0] == 0xFF) if(data[1] == 0xFE && data[2] === 0 && data[3] === 0) i = 4;\n        j = 4;\n        for(; i < len; i+=j) {\n          w = (data[i+3]<<24) + (data[i+2]<<16) + (data[i+1]<<8) + (data[i]);\n          if(w > 0xFFFF) {\n            w -= 0x10000;\n            out[k++] = String.fromCharCode(0xD800 + ((w >> 10) & 0x3FF));\n            out[k++] = String.fromCharCode(0xDC00 + (w & 0x3FF));\n          }\n          else out[k++] = String.fromCharCode(w);\n        }\n        break;\n      case \"utf32be\":\n        if(len >= 4 && data[3] == 0xFF) if(data[2] == 0xFE && data[1] === 0 && data[0] === 0) i = 4;\n        j = 4;\n        for(; i < len; i+=j) {\n          w = (data[i]<<24) + (data[i+1]<<16) + (data[i+2]<<8) + (data[i+3]);\n          if(w > 0xFFFF) {\n            w -= 0x10000;\n            out[k++] = String.fromCharCode(0xD800 + ((w >> 10) & 0x3FF));\n            out[k++] = String.fromCharCode(0xDC00 + (w & 0x3FF));\n          }\n          else out[k++] = String.fromCharCode(w);\n        }\n        break;\n      case \"utf7\":\n        if(len >= 4 && data[0] == 0x2B && data[1] == 0x2F && data[2] == 0x76) {\n          if(len >= 5 && data[3] == 0x38 && data[4] == 0x2D) i = 5;\n          else if(data[3] == 0x38 || data[3] == 0x39 || data[3] == 0x2B || data[3] == 0x2F) i = 4;\n        }\n        for(; i < len; i+=j) {\n          if(data[i] !== 0x2b) { j=1; out[k++] = String.fromCharCode(data[i]); continue; }\n          j=1;\n          if(data[i+1] === 0x2d) { j = 2; out[k++] = \"+\"; continue; }\n          // eslint-disable-next-line no-useless-escape\n          while(String.fromCharCode(data[i+j]).match(/[A-Za-z0-9+\\/]/)) j++;\n          var dash = 0;\n          if(data[i+j] === 0x2d) { ++j; dash=1; }\n          var tt = [];\n          var o64 = \"\";\n          var c1=0, c2=0, c3=0;\n          var e1=0, e2=0, e3=0, e4=0;\n          for(var l = 1; l < j - dash;) {\n            e1 = BM.indexOf(String.fromCharCode(data[i+l++]));\n            e2 = BM.indexOf(String.fromCharCode(data[i+l++]));\n            c1 = e1 << 2 | e2 >> 4;\n            tt.push(c1);\n            e3 = BM.indexOf(String.fromCharCode(data[i+l++]));\n            if(e3 === -1) break;\n            c2 = (e2 & 15) << 4 | e3 >> 2;\n            tt.push(c2);\n            e4 = BM.indexOf(String.fromCharCode(data[i+l++]));\n            if(e4 === -1) break;\n            c3 = (e3 & 3) << 6 | e4;\n            if(e4 < 64) tt.push(c3);\n          }\n          o64 = decode(1201, tt);\n          for(l = 0; l < o64.length; ++l) out[k++] = o64.charAt(l);\n        }\n        break;\n      default: throw new Error(\"Unsupported magic: \" + cp + \" \" + magic[cp]);\n    }\n    else throw new Error(\"Unrecognized CP: \" + cp);\n    return out.slice(0,k).join(\"\");\n  };\n  var hascp = function hascp(cp) { return !!(cpt[cp] || magic[cp]); };\n  cpt.utils = { decode: decode, encode: encode, hascp: hascp, magic: magic, cache:cache };\n  return cpt;\n}));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xlsx/dist/cpexcel.js\n");

/***/ }),

/***/ "./node_modules/xlsx/jszip.js":
/*!************************************!*\
  !*** ./node_modules/xlsx/jszip.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer, global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;var require;/*\n\nJSZip - A Javascript class for generating and reading zip files\n<http://stuartk.com/jszip>\n\n(c) 2009-2014 Stuart Knightley <stuart [at] stuartk.com>\nDual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.\n\nJSZip uses the library pako released under the MIT license :\nhttps://github.com/nodeca/pako/blob/master/LICENSE\n\nNote: since JSZip 3 removed critical functionality, this version assigns to the\n`JSZipSync` variable.  Another JSZip version can be loaded in parallel.\n*/\n(function(e){\n\tif( true&&\"undefined\"==typeof DO_NOT_EXPORT_JSZIP)module.exports=e();\n\telse if( true&&\"undefined\"==typeof DO_NOT_EXPORT_JSZIP){JSZipSync=e();!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));}\n\telse{\n\t\tvar f;\n\t\t\"undefined\"!=typeof globalThis?f=globalThis:\n\t\t\"undefined\"!=typeof window?f=window:\n\t\t\"undefined\"!=typeof global?f=global:\n\t\t\"undefined\"!=typeof $ && $.global?f=$.global:\n\t\t\"undefined\"!=typeof self&&(f=self),f.JSZipSync=e()\n\t}\n}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n'use strict';\n// private property\nvar _keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n\n// public method for encoding\nexports.encode = function(input, utf8) {\n    var output = \"\";\n    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n    var i = 0;\n\n    while (i < input.length) {\n\n        chr1 = input.charCodeAt(i++);\n        chr2 = input.charCodeAt(i++);\n        chr3 = input.charCodeAt(i++);\n\n        enc1 = chr1 >> 2;\n        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n        enc4 = chr3 & 63;\n\n        if (isNaN(chr2)) {\n            enc3 = enc4 = 64;\n        }\n        else if (isNaN(chr3)) {\n            enc4 = 64;\n        }\n\n        output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n\n    }\n\n    return output;\n};\n\n// public method for decoding\nexports.decode = function(input, utf8) {\n    var output = \"\";\n    var chr1, chr2, chr3;\n    var enc1, enc2, enc3, enc4;\n    var i = 0;\n\n    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n    while (i < input.length) {\n\n        enc1 = _keyStr.indexOf(input.charAt(i++));\n        enc2 = _keyStr.indexOf(input.charAt(i++));\n        enc3 = _keyStr.indexOf(input.charAt(i++));\n        enc4 = _keyStr.indexOf(input.charAt(i++));\n\n        chr1 = (enc1 << 2) | (enc2 >> 4);\n        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n        chr3 = ((enc3 & 3) << 6) | enc4;\n\n        output = output + String.fromCharCode(chr1);\n\n        if (enc3 != 64) {\n            output = output + String.fromCharCode(chr2);\n        }\n        if (enc4 != 64) {\n            output = output + String.fromCharCode(chr3);\n        }\n\n    }\n\n    return output;\n\n};\n\n},{}],2:[function(_dereq_,module,exports){\n'use strict';\nfunction CompressedObject() {\n    this.compressedSize = 0;\n    this.uncompressedSize = 0;\n    this.crc32 = 0;\n    this.compressionMethod = null;\n    this.compressedContent = null;\n}\n\nCompressedObject.prototype = {\n    /**\n     * Return the decompressed content in an unspecified format.\n     * The format will depend on the decompressor.\n     * @return {Object} the decompressed content.\n     */\n    getContent: function() {\n        return null; // see implementation\n    },\n    /**\n     * Return the compressed content in an unspecified format.\n     * The format will depend on the compressed conten source.\n     * @return {Object} the compressed content.\n     */\n    getCompressedContent: function() {\n        return null; // see implementation\n    }\n};\nmodule.exports = CompressedObject;\n\n},{}],3:[function(_dereq_,module,exports){\n'use strict';\nexports.STORE = {\n    magic: \"\\x00\\x00\",\n    compress: function(content) {\n        return content; // no compression\n    },\n    uncompress: function(content) {\n        return content; // no compression\n    },\n    compressInputType: null,\n    uncompressInputType: null\n};\nexports.DEFLATE = _dereq_('./flate');\n\n},{\"./flate\":8}],4:[function(_dereq_,module,exports){\n'use strict';\n\nvar utils = _dereq_('./utils');\n\nvar table = [\n    0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,\n    0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,\n    0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,\n    0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,\n    0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,\n    0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,\n    0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,\n    0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,\n    0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,\n    0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,\n    0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,\n    0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,\n    0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,\n    0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,\n    0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,\n    0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,\n    0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,\n    0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,\n    0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,\n    0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,\n    0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,\n    0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,\n    0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,\n    0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,\n    0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,\n    0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,\n    0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,\n    0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,\n    0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,\n    0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,\n    0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,\n    0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,\n    0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,\n    0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,\n    0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,\n    0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,\n    0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,\n    0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,\n    0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,\n    0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,\n    0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,\n    0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,\n    0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,\n    0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,\n    0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,\n    0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,\n    0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,\n    0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,\n    0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,\n    0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,\n    0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,\n    0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,\n    0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,\n    0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,\n    0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,\n    0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,\n    0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,\n    0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,\n    0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,\n    0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,\n    0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,\n    0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,\n    0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,\n    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D\n];\n\n/**\n *\n *  Javascript crc32\n *  http://www.webtoolkit.info/\n *\n */\nmodule.exports = function crc32(input, crc) {\n    if (typeof input === \"undefined\" || !input.length) {\n        return 0;\n    }\n\n    var isArray = utils.getTypeOf(input) !== \"string\";\n\n    if (typeof(crc) == \"undefined\") {\n        crc = 0;\n    }\n    var x = 0;\n    var y = 0;\n    var b = 0;\n\n    crc = crc ^ (-1);\n    for (var i = 0, iTop = input.length; i < iTop; i++) {\n        b = isArray ? input[i] : input.charCodeAt(i);\n        y = (crc ^ b) & 0xFF;\n        x = table[y];\n        crc = (crc >>> 8) ^ x;\n    }\n\n    return crc ^ (-1);\n};\n// vim: set shiftwidth=4 softtabstop=4:\n\n},{\"./utils\":21}],5:[function(_dereq_,module,exports){\n'use strict';\nvar utils = _dereq_('./utils');\n\nfunction DataReader(data) {\n    this.data = null; // type : see implementation\n    this.length = 0;\n    this.index = 0;\n}\nDataReader.prototype = {\n    /**\n     * Check that the offset will not go too far.\n     * @param {string} offset the additional offset to check.\n     * @throws {Error} an Error if the offset is out of bounds.\n     */\n    checkOffset: function(offset) {\n        this.checkIndex(this.index + offset);\n    },\n    /**\n     * Check that the specifed index will not be too far.\n     * @param {string} newIndex the index to check.\n     * @throws {Error} an Error if the index is out of bounds.\n     */\n    checkIndex: function(newIndex) {\n        if (this.length < newIndex || newIndex < 0) {\n            throw new Error(\"End of data reached (data length = \" + this.length + \", asked index = \" + (newIndex) + \"). Corrupted zip ?\");\n        }\n    },\n    /**\n     * Change the index.\n     * @param {number} newIndex The new index.\n     * @throws {Error} if the new index is out of the data.\n     */\n    setIndex: function(newIndex) {\n        this.checkIndex(newIndex);\n        this.index = newIndex;\n    },\n    /**\n     * Skip the next n bytes.\n     * @param {number} n the number of bytes to skip.\n     * @throws {Error} if the new index is out of the data.\n     */\n    skip: function(n) {\n        this.setIndex(this.index + n);\n    },\n    /**\n     * Get the byte at the specified index.\n     * @param {number} i the index to use.\n     * @return {number} a byte.\n     */\n    byteAt: function(i) {\n        // see implementations\n    },\n    /**\n     * Get the next number with a given byte size.\n     * @param {number} size the number of bytes to read.\n     * @return {number} the corresponding number.\n     */\n    readInt: function(size) {\n        var result = 0,\n            i;\n        this.checkOffset(size);\n        for (i = this.index + size - 1; i >= this.index; i--) {\n            result = (result << 8) + this.byteAt(i);\n        }\n        this.index += size;\n        return result;\n    },\n    /**\n     * Get the next string with a given byte size.\n     * @param {number} size the number of bytes to read.\n     * @return {string} the corresponding string.\n     */\n    readString: function(size) {\n        return utils.transformTo(\"string\", this.readData(size));\n    },\n    /**\n     * Get raw data without conversion, <size> bytes.\n     * @param {number} size the number of bytes to read.\n     * @return {Object} the raw data, implementation specific.\n     */\n    readData: function(size) {\n        // see implementations\n    },\n    /**\n     * Find the last occurrence of a zip signature (4 bytes).\n     * @param {string} sig the signature to find.\n     * @return {number} the index of the last occurrence, -1 if not found.\n     */\n    lastIndexOfSignature: function(sig) {\n        // see implementations\n    },\n    /**\n     * Get the next date.\n     * @return {Date} the date.\n     */\n    readDate: function() {\n        var dostime = this.readInt(4);\n        return new Date(\n        ((dostime >> 25) & 0x7f) + 1980, // year\n        ((dostime >> 21) & 0x0f) - 1, // month\n        (dostime >> 16) & 0x1f, // day\n        (dostime >> 11) & 0x1f, // hour\n        (dostime >> 5) & 0x3f, // minute\n        (dostime & 0x1f) << 1); // second\n    }\n};\nmodule.exports = DataReader;\n\n},{\"./utils\":21}],6:[function(_dereq_,module,exports){\n'use strict';\nexports.base64 = false;\nexports.binary = false;\nexports.dir = false;\nexports.createFolders = false;\nexports.date = null;\nexports.compression = null;\nexports.comment = null;\n\n},{}],7:[function(_dereq_,module,exports){\n'use strict';\nvar utils = _dereq_('./utils');\n\n/**\n * @deprecated\n * This function will be removed in a future version without replacement.\n */\nexports.string2binary = function(str) {\n    return utils.string2binary(str);\n};\n\n/**\n * @deprecated\n * This function will be removed in a future version without replacement.\n */\nexports.string2Uint8Array = function(str) {\n    return utils.transformTo(\"uint8array\", str);\n};\n\n/**\n * @deprecated\n * This function will be removed in a future version without replacement.\n */\nexports.uint8Array2String = function(array) {\n    return utils.transformTo(\"string\", array);\n};\n\n/**\n * @deprecated\n * This function will be removed in a future version without replacement.\n */\nexports.string2Blob = function(str) {\n    var buffer = utils.transformTo(\"arraybuffer\", str);\n    return utils.arrayBuffer2Blob(buffer);\n};\n\n/**\n * @deprecated\n * This function will be removed in a future version without replacement.\n */\nexports.arrayBuffer2Blob = function(buffer) {\n    return utils.arrayBuffer2Blob(buffer);\n};\n\n/**\n * @deprecated\n * This function will be removed in a future version without replacement.\n */\nexports.transformTo = function(outputType, input) {\n    return utils.transformTo(outputType, input);\n};\n\n/**\n * @deprecated\n * This function will be removed in a future version without replacement.\n */\nexports.getTypeOf = function(input) {\n    return utils.getTypeOf(input);\n};\n\n/**\n * @deprecated\n * This function will be removed in a future version without replacement.\n */\nexports.checkSupport = function(type) {\n    return utils.checkSupport(type);\n};\n\n/**\n * @deprecated\n * This value will be removed in a future version without replacement.\n */\nexports.MAX_VALUE_16BITS = utils.MAX_VALUE_16BITS;\n\n/**\n * @deprecated\n * This value will be removed in a future version without replacement.\n */\nexports.MAX_VALUE_32BITS = utils.MAX_VALUE_32BITS;\n\n\n/**\n * @deprecated\n * This function will be removed in a future version without replacement.\n */\nexports.pretty = function(str) {\n    return utils.pretty(str);\n};\n\n/**\n * @deprecated\n * This function will be removed in a future version without replacement.\n */\nexports.findCompression = function(compressionMethod) {\n    return utils.findCompression(compressionMethod);\n};\n\n/**\n * @deprecated\n * This function will be removed in a future version without replacement.\n */\nexports.isRegExp = function (object) {\n    return utils.isRegExp(object);\n};\n\n\n},{\"./utils\":21}],8:[function(_dereq_,module,exports){\n'use strict';\nvar USE_TYPEDARRAY = (typeof Uint8Array !== 'undefined') && (typeof Uint16Array !== 'undefined') && (typeof Uint32Array !== 'undefined');\n\nvar pako = _dereq_(\"pako\");\nexports.uncompressInputType = USE_TYPEDARRAY ? \"uint8array\" : \"array\";\nexports.compressInputType = USE_TYPEDARRAY ? \"uint8array\" : \"array\";\n\nexports.magic = \"\\x08\\x00\";\nexports.compress = function(input) {\n    return pako.deflateRaw(input);\n};\nexports.uncompress =  function(input) {\n    return pako.inflateRaw(input);\n};\n\n},{\"pako\":24}],9:[function(_dereq_,module,exports){\n'use strict';\n\nvar base64 = _dereq_('./base64');\n\n/**\nUsage:\n   zip = new JSZip();\n   zip.file(\"hello.txt\", \"Hello, World!\").file(\"tempfile\", \"nothing\");\n   zip.folder(\"images\").file(\"smile.gif\", base64Data, {base64: true});\n   zip.file(\"Xmas.txt\", \"Ho ho ho !\", {date : new Date(\"December 25, 2007 00:00:01\")});\n   zip.remove(\"tempfile\");\n\n   base64zip = zip.generate();\n\n**/\n\n/**\n * Representation a of zip file in js\n * @constructor\n * @param {String=|ArrayBuffer=|Uint8Array=} data the data to load, if any (optional).\n * @param {Object=} options the options for creating this objects (optional).\n */\nfunction JSZipSync(data, options) {\n    // if this constructor is used without `new`, it adds `new` before itself:\n    if(!(this instanceof JSZipSync)) return new JSZipSync(data, options);\n\n    // object containing the files :\n    // {\n    //   \"folder/\" : {...},\n    //   \"folder/data.txt\" : {...}\n    // }\n    this.files = {};\n\n    this.comment = null;\n\n    // Where we are in the hierarchy\n    this.root = \"\";\n    if (data) {\n        this.load(data, options);\n    }\n    this.clone = function() {\n        var newObj = new JSZipSync();\n        for (var i in this) {\n            if (typeof this[i] !== \"function\") {\n                newObj[i] = this[i];\n            }\n        }\n        return newObj;\n    };\n}\nJSZipSync.prototype = _dereq_('./object');\nJSZipSync.prototype.load = _dereq_('./load');\nJSZipSync.support = _dereq_('./support');\nJSZipSync.defaults = _dereq_('./defaults');\n\n/**\n * @deprecated\n * This namespace will be removed in a future version without replacement.\n */\nJSZipSync.utils = _dereq_('./deprecatedPublicUtils');\n\nJSZipSync.base64 = {\n    /**\n     * @deprecated\n     * This method will be removed in a future version without replacement.\n     */\n    encode : function(input) {\n        return base64.encode(input);\n    },\n    /**\n     * @deprecated\n     * This method will be removed in a future version without replacement.\n     */\n    decode : function(input) {\n        return base64.decode(input);\n    }\n};\nJSZipSync.compressions = _dereq_('./compressions');\nmodule.exports = JSZipSync;\n\n},{\"./base64\":1,\"./compressions\":3,\"./defaults\":6,\"./deprecatedPublicUtils\":7,\"./load\":10,\"./object\":13,\"./support\":17}],10:[function(_dereq_,module,exports){\n'use strict';\nvar base64 = _dereq_('./base64');\nvar ZipEntries = _dereq_('./zipEntries');\nmodule.exports = function(data, options) {\n    var files, zipEntries, i, input;\n    options = options || {};\n    if (options.base64) {\n        data = base64.decode(data);\n    }\n\n    zipEntries = new ZipEntries(data, options);\n    files = zipEntries.files;\n    for (i = 0; i < files.length; i++) {\n        input = files[i];\n        this.file(input.fileName, input.decompressed, {\n            binary: true,\n            optimizedBinaryString: true,\n            date: input.date,\n            dir: input.dir,\n            comment : input.fileComment.length ? input.fileComment : null,\n            createFolders: options.createFolders\n        });\n    }\n    if (zipEntries.zipComment.length) {\n        this.comment = zipEntries.zipComment;\n    }\n\n    return this;\n};\n\n},{\"./base64\":1,\"./zipEntries\":22}],11:[function(_dereq_,module,exports){\n(function (Buffer){\n'use strict';\nvar Buffer_from = /*::(*/function(){}/*:: :any)*/;\nif(typeof Buffer !== 'undefined') {\n\tvar nbfs = !Buffer.from;\n\tif(!nbfs) try { Buffer.from(\"foo\", \"utf8\"); } catch(e) { nbfs = true; }\n\tBuffer_from = nbfs ? function(buf, enc) { return (enc) ? new Buffer(buf, enc) : new Buffer(buf); } : Buffer.from.bind(Buffer);\n\t// $FlowIgnore\n\tif(!Buffer.alloc) Buffer.alloc = function(n) { return new Buffer(n); };\n}\nmodule.exports = function(data, encoding){\n    return typeof data == 'number' ? Buffer.alloc(data) : Buffer_from(data, encoding);\n};\nmodule.exports.test = function(b){\n    return Buffer.isBuffer(b);\n};\n}).call(this,(typeof Buffer !== \"undefined\" ? Buffer : undefined))\n},{}],12:[function(_dereq_,module,exports){\n'use strict';\nvar Uint8ArrayReader = _dereq_('./uint8ArrayReader');\n\nfunction NodeBufferReader(data) {\n    this.data = data;\n    this.length = this.data.length;\n    this.index = 0;\n}\nNodeBufferReader.prototype = new Uint8ArrayReader();\n\n/**\n * @see DataReader.readData\n */\nNodeBufferReader.prototype.readData = function(size) {\n    this.checkOffset(size);\n    var result = this.data.slice(this.index, this.index + size);\n    this.index += size;\n    return result;\n};\nmodule.exports = NodeBufferReader;\n\n},{\"./uint8ArrayReader\":18}],13:[function(_dereq_,module,exports){\n'use strict';\nvar support = _dereq_('./support');\nvar utils = _dereq_('./utils');\nvar crc32 = _dereq_('./crc32');\nvar signature = _dereq_('./signature');\nvar defaults = _dereq_('./defaults');\nvar base64 = _dereq_('./base64');\nvar compressions = _dereq_('./compressions');\nvar CompressedObject = _dereq_('./compressedObject');\nvar nodeBuffer = _dereq_('./nodeBuffer');\nvar utf8 = _dereq_('./utf8');\nvar StringWriter = _dereq_('./stringWriter');\nvar Uint8ArrayWriter = _dereq_('./uint8ArrayWriter');\n\n/**\n * Returns the raw data of a ZipObject, decompress the content if necessary.\n * @param {ZipObject} file the file to use.\n * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.\n */\nvar getRawData = function(file) {\n    if (file._data instanceof CompressedObject) {\n        file._data = file._data.getContent();\n        file.options.binary = true;\n        file.options.base64 = false;\n\n        if (utils.getTypeOf(file._data) === \"uint8array\") {\n            var copy = file._data;\n            // when reading an arraybuffer, the CompressedObject mechanism will keep it and subarray() a Uint8Array.\n            // if we request a file in the same format, we might get the same Uint8Array or its ArrayBuffer (the original zip file).\n            file._data = new Uint8Array(copy.length);\n            // with an empty Uint8Array, Opera fails with a \"Offset larger than array size\"\n            if (copy.length !== 0) {\n                file._data.set(copy, 0);\n            }\n        }\n    }\n    return file._data;\n};\n\n/**\n * Returns the data of a ZipObject in a binary form. If the content is an unicode string, encode it.\n * @param {ZipObject} file the file to use.\n * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.\n */\nvar getBinaryData = function(file) {\n    var result = getRawData(file),\n        type = utils.getTypeOf(result);\n    if (type === \"string\") {\n        if (!file.options.binary) {\n            // unicode text !\n            // unicode string => binary string is a painful process, check if we can avoid it.\n            if (support.nodebuffer) {\n                return nodeBuffer(result, \"utf-8\");\n            }\n        }\n        return file.asBinary();\n    }\n    return result;\n};\n\n/**\n * Transform this._data into a string.\n * @param {function} filter a function String -> String, applied if not null on the result.\n * @return {String} the string representing this._data.\n */\nvar dataToString = function(asUTF8) {\n    var result = getRawData(this);\n    if (result === null || typeof result === \"undefined\") {\n        return \"\";\n    }\n    // if the data is a base64 string, we decode it before checking the encoding !\n    if (this.options.base64) {\n        result = base64.decode(result);\n    }\n    if (asUTF8 && this.options.binary) {\n        // JSZip.prototype.utf8decode supports arrays as input\n        // skip to array => string step, utf8decode will do it.\n        result = out.utf8decode(result);\n    }\n    else {\n        // no utf8 transformation, do the array => string step.\n        result = utils.transformTo(\"string\", result);\n    }\n\n    if (!asUTF8 && !this.options.binary) {\n        result = utils.transformTo(\"string\", out.utf8encode(result));\n    }\n    return result;\n};\n/**\n * A simple object representing a file in the zip file.\n * @constructor\n * @param {string} name the name of the file\n * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data\n * @param {Object} options the options of the file\n */\nvar ZipObject = function(name, data, options) {\n    this.name = name;\n    this.dir = options.dir;\n    this.date = options.date;\n    this.comment = options.comment;\n\n    this._data = data;\n    this.options = options;\n\n    /*\n     * This object contains initial values for dir and date.\n     * With them, we can check if the user changed the deprecated metadata in\n     * `ZipObject#options` or not.\n     */\n    this._initialMetadata = {\n      dir : options.dir,\n      date : options.date\n    };\n};\n\nZipObject.prototype = {\n    /**\n     * Return the content as UTF8 string.\n     * @return {string} the UTF8 string.\n     */\n    asText: function() {\n        return dataToString.call(this, true);\n    },\n    /**\n     * Returns the binary content.\n     * @return {string} the content as binary.\n     */\n    asBinary: function() {\n        return dataToString.call(this, false);\n    },\n    /**\n     * Returns the content as a nodejs Buffer.\n     * @return {Buffer} the content as a Buffer.\n     */\n    asNodeBuffer: function() {\n        var result = getBinaryData(this);\n        return utils.transformTo(\"nodebuffer\", result);\n    },\n    /**\n     * Returns the content as an Uint8Array.\n     * @return {Uint8Array} the content as an Uint8Array.\n     */\n    asUint8Array: function() {\n        var result = getBinaryData(this);\n        return utils.transformTo(\"uint8array\", result);\n    },\n    /**\n     * Returns the content as an ArrayBuffer.\n     * @return {ArrayBuffer} the content as an ArrayBufer.\n     */\n    asArrayBuffer: function() {\n        return this.asUint8Array().buffer;\n    }\n};\n\n/**\n * Transform an integer into a string in hexadecimal.\n * @private\n * @param {number} dec the number to convert.\n * @param {number} bytes the number of bytes to generate.\n * @returns {string} the result.\n */\nvar decToHex = function(dec, bytes) {\n    var hex = \"\",\n        i;\n    for (i = 0; i < bytes; i++) {\n        hex += String.fromCharCode(dec & 0xff);\n        dec = dec >>> 8;\n    }\n    return hex;\n};\n\n/**\n * Merge the objects passed as parameters into a new one.\n * @private\n * @param {...Object} var_args All objects to merge.\n * @return {Object} a new object with the data of the others.\n */\nvar extend = function() {\n    var result = {}, i, attr;\n    for (i = 0; i < arguments.length; i++) { // arguments is not enumerable in some browsers\n        for (attr in arguments[i]) {\n            if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === \"undefined\") {\n                result[attr] = arguments[i][attr];\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Transforms the (incomplete) options from the user into the complete\n * set of options to create a file.\n * @private\n * @param {Object} o the options from the user.\n * @return {Object} the complete set of options.\n */\nvar prepareFileAttrs = function(o) {\n    o = o || {};\n    if (o.base64 === true && (o.binary === null || o.binary === undefined)) {\n        o.binary = true;\n    }\n    o = extend(o, defaults);\n    o.date = o.date || new Date();\n    if (o.compression !== null) o.compression = o.compression.toUpperCase();\n\n    return o;\n};\n\n/**\n * Add a file in the current folder.\n * @private\n * @param {string} name the name of the file\n * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file\n * @param {Object} o the options of the file\n * @return {Object} the new file.\n */\nvar fileAdd = function(name, data, o) {\n    // be sure sub folders exist\n    var dataType = utils.getTypeOf(data),\n        parent;\n\n    o = prepareFileAttrs(o);\n\n    if (o.createFolders && (parent = parentFolder(name))) {\n        folderAdd.call(this, parent, true);\n    }\n\n    if (o.dir || data === null || typeof data === \"undefined\") {\n        o.base64 = false;\n        o.binary = false;\n        data = null;\n    }\n    else if (dataType === \"string\") {\n        if (o.binary && !o.base64) {\n            // optimizedBinaryString == true means that the file has already been filtered with a 0xFF mask\n            if (o.optimizedBinaryString !== true) {\n                // this is a string, not in a base64 format.\n                // Be sure that this is a correct \"binary string\"\n                data = utils.string2binary(data);\n            }\n        }\n    }\n    else { // arraybuffer, uint8array, ...\n        o.base64 = false;\n        o.binary = true;\n\n        if (!dataType && !(data instanceof CompressedObject)) {\n            throw new Error(\"The data of '\" + name + \"' is in an unsupported format !\");\n        }\n\n        // special case : it's way easier to work with Uint8Array than with ArrayBuffer\n        if (dataType === \"arraybuffer\") {\n            data = utils.transformTo(\"uint8array\", data);\n        }\n    }\n\n    var object = new ZipObject(name, data, o);\n    this.files[name] = object;\n    return object;\n};\n\n/**\n * Find the parent folder of the path.\n * @private\n * @param {string} path the path to use\n * @return {string} the parent folder, or \"\"\n */\nvar parentFolder = function (path) {\n    if (path.slice(-1) == '/') {\n        path = path.substring(0, path.length - 1);\n    }\n    var lastSlash = path.lastIndexOf('/');\n    return (lastSlash > 0) ? path.substring(0, lastSlash) : \"\";\n};\n\n/**\n * Add a (sub) folder in the current folder.\n * @private\n * @param {string} name the folder's name\n * @param {boolean=} [createFolders] If true, automatically create sub\n *  folders. Defaults to false.\n * @return {Object} the new folder.\n */\nvar folderAdd = function(name, createFolders) {\n    // Check the name ends with a /\n    if (name.slice(-1) != \"/\") {\n        name += \"/\"; // IE doesn't like substr(-1)\n    }\n\n    createFolders = (typeof createFolders !== 'undefined') ? createFolders : false;\n\n    // Does this folder already exist?\n    if (!this.files[name]) {\n        fileAdd.call(this, name, null, {\n            dir: true,\n            createFolders: createFolders\n        });\n    }\n    return this.files[name];\n};\n\n/**\n * Generate a JSZip.CompressedObject for a given zipOject.\n * @param {ZipObject} file the object to read.\n * @param {JSZip.compression} compression the compression to use.\n * @return {JSZip.CompressedObject} the compressed result.\n */\nvar generateCompressedObjectFrom = function(file, compression) {\n    var result = new CompressedObject(),\n        content;\n\n    // the data has not been decompressed, we might reuse things !\n    if (file._data instanceof CompressedObject) {\n        result.uncompressedSize = file._data.uncompressedSize;\n        result.crc32 = file._data.crc32;\n\n        if (result.uncompressedSize === 0 || file.dir) {\n            compression = compressions['STORE'];\n            result.compressedContent = \"\";\n            result.crc32 = 0;\n        }\n        else if (file._data.compressionMethod === compression.magic) {\n            result.compressedContent = file._data.getCompressedContent();\n        }\n        else {\n            content = file._data.getContent();\n            // need to decompress / recompress\n            result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content));\n        }\n    }\n    else {\n        // have uncompressed data\n        content = getBinaryData(file);\n        if (!content || content.length === 0 || file.dir) {\n            compression = compressions['STORE'];\n            content = \"\";\n        }\n        result.uncompressedSize = content.length;\n        result.crc32 = crc32(content);\n        result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content));\n    }\n\n    result.compressedSize = result.compressedContent.length;\n    result.compressionMethod = compression.magic;\n\n    return result;\n};\n\n/**\n * Generate the various parts used in the construction of the final zip file.\n * @param {string} name the file name.\n * @param {ZipObject} file the file content.\n * @param {JSZip.CompressedObject} compressedObject the compressed object.\n * @param {number} offset the current offset from the start of the zip file.\n * @return {object} the zip parts.\n */\nvar generateZipParts = function(name, file, compressedObject, offset) {\n    var data = compressedObject.compressedContent,\n        utfEncodedFileName = utils.transformTo(\"string\", utf8.utf8encode(file.name)),\n        comment = file.comment || \"\",\n        utfEncodedComment = utils.transformTo(\"string\", utf8.utf8encode(comment)),\n        useUTF8ForFileName = utfEncodedFileName.length !== file.name.length,\n        useUTF8ForComment = utfEncodedComment.length !== comment.length,\n        o = file.options,\n        dosTime,\n        dosDate,\n        extraFields = \"\",\n        unicodePathExtraField = \"\",\n        unicodeCommentExtraField = \"\",\n        dir, date;\n\n\n    // handle the deprecated options.dir\n    if (file._initialMetadata.dir !== file.dir) {\n        dir = file.dir;\n    } else {\n        dir = o.dir;\n    }\n\n    // handle the deprecated options.date\n    if(file._initialMetadata.date !== file.date) {\n        date = file.date;\n    } else {\n        date = o.date;\n    }\n\n\n    dosTime = date.getHours();\n    dosTime = dosTime << 6;\n    dosTime = dosTime | date.getMinutes();\n    dosTime = dosTime << 5;\n    dosTime = dosTime | date.getSeconds() / 2;\n\n    dosDate = date.getFullYear() - 1980;\n    dosDate = dosDate << 4;\n    dosDate = dosDate | (date.getMonth() + 1);\n    dosDate = dosDate << 5;\n    dosDate = dosDate | date.getDate();\n\n    if (useUTF8ForFileName) {\n        // set the unicode path extra field. unzip needs at least one extra\n        // field to correctly handle unicode path, so using the path is as good\n        // as any other information. This could improve the situation with\n        // other archive managers too.\n        // This field is usually used without the utf8 flag, with a non\n        // unicode path in the header (winrar, winzip). This helps (a bit)\n        // with the messy Windows' default compressed folders feature but\n        // breaks on p7zip which doesn't seek the unicode path extra field.\n        // So for now, UTF-8 everywhere !\n        unicodePathExtraField =\n            // Version\n            decToHex(1, 1) +\n            // NameCRC32\n            decToHex(crc32(utfEncodedFileName), 4) +\n            // UnicodeName\n            utfEncodedFileName;\n\n        extraFields +=\n            // Info-ZIP Unicode Path Extra Field\n            \"\\x75\\x70\" +\n            // size\n            decToHex(unicodePathExtraField.length, 2) +\n            // content\n            unicodePathExtraField;\n    }\n\n    if(useUTF8ForComment) {\n\n        unicodeCommentExtraField =\n            // Version\n            decToHex(1, 1) +\n            // CommentCRC32\n            decToHex(this.crc32(utfEncodedComment), 4) +\n            // UnicodeName\n            utfEncodedComment;\n\n        extraFields +=\n            // Info-ZIP Unicode Path Extra Field\n            \"\\x75\\x63\" +\n            // size\n            decToHex(unicodeCommentExtraField.length, 2) +\n            // content\n            unicodeCommentExtraField;\n    }\n\n    var header = \"\";\n\n    // version needed to extract\n    header += \"\\x0A\\x00\";\n    // general purpose bit flag\n    // set bit 11 if utf8\n    header += (useUTF8ForFileName || useUTF8ForComment) ? \"\\x00\\x08\" : \"\\x00\\x00\";\n    // compression method\n    header += compressedObject.compressionMethod;\n    // last mod file time\n    header += decToHex(dosTime, 2);\n    // last mod file date\n    header += decToHex(dosDate, 2);\n    // crc-32\n    header += decToHex(compressedObject.crc32, 4);\n    // compressed size\n    header += decToHex(compressedObject.compressedSize, 4);\n    // uncompressed size\n    header += decToHex(compressedObject.uncompressedSize, 4);\n    // file name length\n    header += decToHex(utfEncodedFileName.length, 2);\n    // extra field length\n    header += decToHex(extraFields.length, 2);\n\n\n    var fileRecord = signature.LOCAL_FILE_HEADER + header + utfEncodedFileName + extraFields;\n\n    var dirRecord = signature.CENTRAL_FILE_HEADER +\n    // version made by (00: DOS)\n    \"\\x14\\x00\" +\n    // file header (common to file and central directory)\n    header +\n    // file comment length\n    decToHex(utfEncodedComment.length, 2) +\n    // disk number start\n    \"\\x00\\x00\" +\n    // internal file attributes TODO\n    \"\\x00\\x00\" +\n    // external file attributes\n    (dir === true ? \"\\x10\\x00\\x00\\x00\" : \"\\x00\\x00\\x00\\x00\") +\n    // relative offset of local header\n    decToHex(offset, 4) +\n    // file name\n    utfEncodedFileName +\n    // extra field\n    extraFields +\n    // file comment\n    utfEncodedComment;\n\n    return {\n        fileRecord: fileRecord,\n        dirRecord: dirRecord,\n        compressedObject: compressedObject\n    };\n};\n\n\n// return the actual prototype of JSZip\nvar out = {\n    /**\n     * Read an existing zip and merge the data in the current JSZip object.\n     * The implementation is in jszip-load.js, don't forget to include it.\n     * @param {String|ArrayBuffer|Uint8Array|Buffer} stream  The stream to load\n     * @param {Object} options Options for loading the stream.\n     *  options.base64 : is the stream in base64 ? default : false\n     * @return {JSZip} the current JSZip object\n     */\n    load: function(stream, options) {\n        throw new Error(\"Load method is not defined. Is the file jszip-load.js included ?\");\n    },\n\n    /**\n     * Filter nested files/folders with the specified function.\n     * @param {Function} search the predicate to use :\n     * function (relativePath, file) {...}\n     * It takes 2 arguments : the relative path and the file.\n     * @return {Array} An array of matching elements.\n     */\n    filter: function(search) {\n        var result = [],\n            filename, relativePath, file, fileClone;\n        for (filename in this.files) {\n            if (!this.files.hasOwnProperty(filename)) {\n                continue;\n            }\n            file = this.files[filename];\n            // return a new object, don't let the user mess with our internal objects :)\n            fileClone = new ZipObject(file.name, file._data, extend(file.options));\n            relativePath = filename.slice(this.root.length, filename.length);\n            if (filename.slice(0, this.root.length) === this.root && // the file is in the current root\n            search(relativePath, fileClone)) { // and the file matches the function\n                result.push(fileClone);\n            }\n        }\n        return result;\n    },\n\n    /**\n     * Add a file to the zip file, or search a file.\n     * @param   {string|RegExp} name The name of the file to add (if data is defined),\n     * the name of the file to find (if no data) or a regex to match files.\n     * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded\n     * @param   {Object} o     File options\n     * @return  {JSZip|Object|Array} this JSZip object (when adding a file),\n     * a file (when searching by string) or an array of files (when searching by regex).\n     */\n    file: function(name, data, o) {\n        if (arguments.length === 1) {\n            if (utils.isRegExp(name)) {\n                var regexp = name;\n                return this.filter(function(relativePath, file) {\n                    return !file.dir && regexp.test(relativePath);\n                });\n            }\n            else { // text\n                return this.filter(function(relativePath, file) {\n                    return !file.dir && relativePath === name;\n                })[0] || null;\n            }\n        }\n        else { // more than one argument : we have data !\n            name = this.root + name;\n            fileAdd.call(this, name, data, o);\n        }\n        return this;\n    },\n\n    /**\n     * Add a directory to the zip file, or search.\n     * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.\n     * @return  {JSZip} an object with the new directory as the root, or an array containing matching folders.\n     */\n    folder: function(arg) {\n        if (!arg) {\n            return this;\n        }\n\n        if (utils.isRegExp(arg)) {\n            return this.filter(function(relativePath, file) {\n                return file.dir && arg.test(relativePath);\n            });\n        }\n\n        // else, name is a new folder\n        var name = this.root + arg;\n        var newFolder = folderAdd.call(this, name);\n\n        // Allow chaining by returning a new object with this folder as the root\n        var ret = this.clone();\n        ret.root = newFolder.name;\n        return ret;\n    },\n\n    /**\n     * Delete a file, or a directory and all sub-files, from the zip\n     * @param {string} name the name of the file to delete\n     * @return {JSZip} this JSZip object\n     */\n    remove: function(name) {\n        name = this.root + name;\n        var file = this.files[name];\n        if (!file) {\n            // Look for any folders\n            if (name.slice(-1) != \"/\") {\n                name += \"/\";\n            }\n            file = this.files[name];\n        }\n\n        if (file && !file.dir) {\n            // file\n            delete this.files[name];\n        } else {\n            // maybe a folder, delete recursively\n            var kids = this.filter(function(relativePath, file) {\n                return file.name.slice(0, name.length) === name;\n            });\n            for (var i = 0; i < kids.length; i++) {\n                delete this.files[kids[i].name];\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * Generate the complete zip file\n     * @param {Object} options the options to generate the zip file :\n     * - base64, (deprecated, use type instead) true to generate base64.\n     * - compression, \"STORE\" by default.\n     * - type, \"base64\" by default. Values are : string, base64, uint8array, arraybuffer, blob.\n     * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file\n     */\n    generate: function(options) {\n        options = extend(options || {}, {\n            base64: true,\n            compression: \"STORE\",\n            type: \"base64\",\n            comment: null\n        });\n\n        utils.checkSupport(options.type);\n\n        var zipData = [],\n            localDirLength = 0,\n            centralDirLength = 0,\n            writer, i,\n            utfEncodedComment = utils.transformTo(\"string\", this.utf8encode(options.comment || this.comment || \"\"));\n\n        // first, generate all the zip parts.\n        for (var name in this.files) {\n            if (!this.files.hasOwnProperty(name)) {\n                continue;\n            }\n            var file = this.files[name];\n\n            var compressionName = file.options.compression || options.compression.toUpperCase();\n            var compression = compressions[compressionName];\n            if (!compression) {\n                throw new Error(compressionName + \" is not a valid compression method !\");\n            }\n\n            var compressedObject = generateCompressedObjectFrom.call(this, file, compression);\n\n            var zipPart = generateZipParts.call(this, name, file, compressedObject, localDirLength);\n            localDirLength += zipPart.fileRecord.length + compressedObject.compressedSize;\n            centralDirLength += zipPart.dirRecord.length;\n            zipData.push(zipPart);\n        }\n\n        var dirEnd = \"\";\n\n        // end of central dir signature\n        dirEnd = signature.CENTRAL_DIRECTORY_END +\n        // number of this disk\n        \"\\x00\\x00\" +\n        // number of the disk with the start of the central directory\n        \"\\x00\\x00\" +\n        // total number of entries in the central directory on this disk\n        decToHex(zipData.length, 2) +\n        // total number of entries in the central directory\n        decToHex(zipData.length, 2) +\n        // size of the central directory   4 bytes\n        decToHex(centralDirLength, 4) +\n        // offset of start of central directory with respect to the starting disk number\n        decToHex(localDirLength, 4) +\n        // .ZIP file comment length\n        decToHex(utfEncodedComment.length, 2) +\n        // .ZIP file comment\n        utfEncodedComment;\n\n\n        // we have all the parts (and the total length)\n        // time to create a writer !\n        var typeName = options.type.toLowerCase();\n        if(typeName===\"uint8array\"||typeName===\"arraybuffer\"||typeName===\"blob\"||typeName===\"nodebuffer\") {\n            writer = new Uint8ArrayWriter(localDirLength + centralDirLength + dirEnd.length);\n        }else{\n            writer = new StringWriter(localDirLength + centralDirLength + dirEnd.length);\n        }\n\n        for (i = 0; i < zipData.length; i++) {\n            writer.append(zipData[i].fileRecord);\n            writer.append(zipData[i].compressedObject.compressedContent);\n        }\n        for (i = 0; i < zipData.length; i++) {\n            writer.append(zipData[i].dirRecord);\n        }\n\n        writer.append(dirEnd);\n\n        var zip = writer.finalize();\n\n\n\n        switch(options.type.toLowerCase()) {\n            // case \"zip is an Uint8Array\"\n            case \"uint8array\" :\n            case \"arraybuffer\" :\n            case \"nodebuffer\" :\n               return utils.transformTo(options.type.toLowerCase(), zip);\n            case \"blob\" :\n               return utils.arrayBuffer2Blob(utils.transformTo(\"arraybuffer\", zip));\n            // case \"zip is a string\"\n            case \"base64\" :\n               return (options.base64) ? base64.encode(zip) : zip;\n            default : // case \"string\" :\n               return zip;\n         }\n\n    },\n\n    /**\n     * @deprecated\n     * This method will be removed in a future version without replacement.\n     */\n    crc32: function (input, crc) {\n        return crc32(input, crc);\n    },\n\n    /**\n     * @deprecated\n     * This method will be removed in a future version without replacement.\n     */\n    utf8encode: function (string) {\n        return utils.transformTo(\"string\", utf8.utf8encode(string));\n    },\n\n    /**\n     * @deprecated\n     * This method will be removed in a future version without replacement.\n     */\n    utf8decode: function (input) {\n        return utf8.utf8decode(input);\n    }\n};\nmodule.exports = out;\n\n},{\"./base64\":1,\"./compressedObject\":2,\"./compressions\":3,\"./crc32\":4,\"./defaults\":6,\"./nodeBuffer\":11,\"./signature\":14,\"./stringWriter\":16,\"./support\":17,\"./uint8ArrayWriter\":19,\"./utf8\":20,\"./utils\":21}],14:[function(_dereq_,module,exports){\n'use strict';\nexports.LOCAL_FILE_HEADER = \"PK\\x03\\x04\";\nexports.CENTRAL_FILE_HEADER = \"PK\\x01\\x02\";\nexports.CENTRAL_DIRECTORY_END = \"PK\\x05\\x06\";\nexports.ZIP64_CENTRAL_DIRECTORY_LOCATOR = \"PK\\x06\\x07\";\nexports.ZIP64_CENTRAL_DIRECTORY_END = \"PK\\x06\\x06\";\nexports.DATA_DESCRIPTOR = \"PK\\x07\\x08\";\n\n},{}],15:[function(_dereq_,module,exports){\n'use strict';\nvar DataReader = _dereq_('./dataReader');\nvar utils = _dereq_('./utils');\n\nfunction StringReader(data, optimizedBinaryString) {\n    this.data = data;\n    if (!optimizedBinaryString) {\n        this.data = utils.string2binary(this.data);\n    }\n    this.length = this.data.length;\n    this.index = 0;\n}\nStringReader.prototype = new DataReader();\n/**\n * @see DataReader.byteAt\n */\nStringReader.prototype.byteAt = function(i) {\n    return this.data.charCodeAt(i);\n};\n/**\n * @see DataReader.lastIndexOfSignature\n */\nStringReader.prototype.lastIndexOfSignature = function(sig) {\n    return this.data.lastIndexOf(sig);\n};\n/**\n * @see DataReader.readData\n */\nStringReader.prototype.readData = function(size) {\n    this.checkOffset(size);\n    // this will work because the constructor applied the \"& 0xff\" mask.\n    var result = this.data.slice(this.index, this.index + size);\n    this.index += size;\n    return result;\n};\nmodule.exports = StringReader;\n\n},{\"./dataReader\":5,\"./utils\":21}],16:[function(_dereq_,module,exports){\n'use strict';\n\nvar utils = _dereq_('./utils');\n\n/**\n * An object to write any content to a string.\n * @constructor\n */\nvar StringWriter = function() {\n    this.data = [];\n};\nStringWriter.prototype = {\n    /**\n     * Append any content to the current string.\n     * @param {Object} input the content to add.\n     */\n    append: function(input) {\n        input = utils.transformTo(\"string\", input);\n        this.data.push(input);\n    },\n    /**\n     * Finalize the construction an return the result.\n     * @return {string} the generated string.\n     */\n    finalize: function() {\n        return this.data.join(\"\");\n    }\n};\n\nmodule.exports = StringWriter;\n\n},{\"./utils\":21}],17:[function(_dereq_,module,exports){\n(function (Buffer){\n'use strict';\nexports.base64 = true;\nexports.array = true;\nexports.string = true;\nexports.arraybuffer = typeof ArrayBuffer !== \"undefined\" && typeof Uint8Array !== \"undefined\";\n// contains true if JSZip can read/generate nodejs Buffer, false otherwise.\n// Browserify will provide a Buffer implementation for browsers, which is\n// an augmented Uint8Array (i.e., can be used as either Buffer or U8).\nexports.nodebuffer = typeof Buffer !== \"undefined\";\n// contains true if JSZip can read/generate Uint8Array, false otherwise.\nexports.uint8array = typeof Uint8Array !== \"undefined\";\n\nif (typeof ArrayBuffer === \"undefined\") {\n    exports.blob = false;\n}\nelse {\n    var buffer = new ArrayBuffer(0);\n    try {\n        exports.blob = new Blob([buffer], {\n            type: \"application/zip\"\n        }).size === 0;\n    }\n    catch (e) {\n        try {\n            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n            var builder = new Builder();\n            builder.append(buffer);\n            exports.blob = builder.getBlob('application/zip').size === 0;\n        }\n        catch (e) {\n            exports.blob = false;\n        }\n    }\n}\n\n}).call(this,(typeof Buffer !== \"undefined\" ? Buffer : undefined))\n},{}],18:[function(_dereq_,module,exports){\n'use strict';\nvar DataReader = _dereq_('./dataReader');\n\nfunction Uint8ArrayReader(data) {\n    if (data) {\n        this.data = data;\n        this.length = this.data.length;\n        this.index = 0;\n    }\n}\nUint8ArrayReader.prototype = new DataReader();\n/**\n * @see DataReader.byteAt\n */\nUint8ArrayReader.prototype.byteAt = function(i) {\n    return this.data[i];\n};\n/**\n * @see DataReader.lastIndexOfSignature\n */\nUint8ArrayReader.prototype.lastIndexOfSignature = function(sig) {\n    var sig0 = sig.charCodeAt(0),\n        sig1 = sig.charCodeAt(1),\n        sig2 = sig.charCodeAt(2),\n        sig3 = sig.charCodeAt(3);\n    for (var i = this.length - 4; i >= 0; --i) {\n        if (this.data[i] === sig0 && this.data[i + 1] === sig1 && this.data[i + 2] === sig2 && this.data[i + 3] === sig3) {\n            return i;\n        }\n    }\n\n    return -1;\n};\n/**\n * @see DataReader.readData\n */\nUint8ArrayReader.prototype.readData = function(size) {\n    this.checkOffset(size);\n    if(size === 0) {\n        // in IE10, when using subarray(idx, idx), we get the array [0x00] instead of [].\n        return new Uint8Array(0);\n    }\n    var result = this.data.subarray(this.index, this.index + size);\n    this.index += size;\n    return result;\n};\nmodule.exports = Uint8ArrayReader;\n\n},{\"./dataReader\":5}],19:[function(_dereq_,module,exports){\n'use strict';\n\nvar utils = _dereq_('./utils');\n\n/**\n * An object to write any content to an Uint8Array.\n * @constructor\n * @param {number} length The length of the array.\n */\nvar Uint8ArrayWriter = function(length) {\n    this.data = new Uint8Array(length);\n    this.index = 0;\n};\nUint8ArrayWriter.prototype = {\n    /**\n     * Append any content to the current array.\n     * @param {Object} input the content to add.\n     */\n    append: function(input) {\n        if (input.length !== 0) {\n            // with an empty Uint8Array, Opera fails with a \"Offset larger than array size\"\n            input = utils.transformTo(\"uint8array\", input);\n            this.data.set(input, this.index);\n            this.index += input.length;\n        }\n    },\n    /**\n     * Finalize the construction an return the result.\n     * @return {Uint8Array} the generated array.\n     */\n    finalize: function() {\n        return this.data;\n    }\n};\n\nmodule.exports = Uint8ArrayWriter;\n\n},{\"./utils\":21}],20:[function(_dereq_,module,exports){\n'use strict';\n\nvar utils = _dereq_('./utils');\nvar support = _dereq_('./support');\nvar nodeBuffer = _dereq_('./nodeBuffer');\n\n/**\n * The following functions come from pako, from pako/lib/utils/strings\n * released under the MIT license, see pako https://github.com/nodeca/pako/\n */\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new Array(256);\nfor (var i=0; i<256; i++) {\n  _utf8len[i] = (i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1);\n}\n_utf8len[254]=_utf8len[254]=1; // Invalid sequence start\n\n// convert string to array (typed, when possible)\nvar string2buf = function (str) {\n    var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n    // count binary size\n    for (m_pos = 0; m_pos < str_len; m_pos++) {\n        c = str.charCodeAt(m_pos);\n        if (((c & 0xfc00) === 0xd800) && (m_pos+1 < str_len)) {\n            c2 = str.charCodeAt(m_pos+1);\n            if ((c2 & 0xfc00) === 0xdc00) {\n                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n                m_pos++;\n            }\n        }\n        buf_len += (c < 0x80) ? 1 : ((c < 0x800) ? 2 : ((c < 0x10000) ? 3 : 4));\n    }\n\n    // allocate buffer\n    if (support.uint8array) {\n        buf = new Uint8Array(buf_len);\n    } else {\n        buf = new Array(buf_len);\n    }\n\n    // convert\n    for (i=0, m_pos = 0; i < buf_len; m_pos++) {\n        c = str.charCodeAt(m_pos);\n        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n            c2 = str.charCodeAt(m_pos+1);\n            if ((c2 & 0xfc00) === 0xdc00) {\n                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n                m_pos++;\n            }\n        }\n        if (c < 0x80) {\n            /* one byte */\n            buf[i++] = c;\n        } else if (c < 0x800) {\n            /* two bytes */\n            buf[i++] = 0xC0 | (c >>> 6);\n            buf[i++] = 0x80 | (c & 0x3f);\n        } else if (c < 0x10000) {\n            /* three bytes */\n            buf[i++] = 0xE0 | (c >>> 12);\n            buf[i++] = 0x80 | ((c >>> 6) & 0x3f);\n            buf[i++] = 0x80 | (c & 0x3f);\n        } else {\n            /* four bytes */\n            buf[i++] = 0xf0 | (c >>> 18);\n            buf[i++] = 0x80 | ((c >>> 12) & 0x3f);\n            buf[i++] = 0x80 | ((c >>> 6) & 0x3f);\n            buf[i++] = 0x80 | (c & 0x3f);\n        }\n    }\n\n    return buf;\n};\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar utf8border = function(buf, max) {\n    var pos;\n\n    max = max || buf.length;\n    if (max > buf.length) { max = buf.length; }\n\n    // go back from last position, until start of sequence found\n    pos = max-1;\n    while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n    // Fuckup - very small and broken sequence,\n    // return max, because we should return something anyway.\n    if (pos < 0) { return max; }\n\n    // If we came to start of buffer - that means vuffer is too small,\n    // return max too.\n    if (pos === 0) { return max; }\n\n    return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\n// convert array to string\nvar buf2string = function (buf) {\n    var str, i, out, c, c_len;\n    var len = buf.length;\n\n    // Reserve max possible length (2 words per char)\n    // NB: by unknown reasons, Array is significantly faster for\n    //     String.fromCharCode.apply than Uint16Array.\n    var utf16buf = new Array(len*2);\n\n    for (out=0, i=0; i<len;) {\n        c = buf[i++];\n        // quick process ascii\n        if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n        c_len = _utf8len[c];\n        // skip 5 & 6 byte codes\n        if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }\n\n        // apply mask on first byte\n        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n        // join the rest\n        while (c_len > 1 && i < len) {\n            c = (c << 6) | (buf[i++] & 0x3f);\n            c_len--;\n        }\n\n        // terminated by end of string?\n        if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n        if (c < 0x10000) {\n            utf16buf[out++] = c;\n        } else {\n            c -= 0x10000;\n            utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n            utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n        }\n    }\n\n    // shrinkBuf(utf16buf, out)\n    if (utf16buf.length !== out) {\n        if(utf16buf.subarray) {\n            utf16buf = utf16buf.subarray(0, out);\n        } else {\n            utf16buf.length = out;\n        }\n    }\n\n    // return String.fromCharCode.apply(null, utf16buf);\n    return utils.applyFromCharCode(utf16buf);\n};\n\n\n// That's all for the pako functions.\n\n\n/**\n * Transform a javascript string into an array (typed if possible) of bytes,\n * UTF-8 encoded.\n * @param {String} str the string to encode\n * @return {Array|Uint8Array|Buffer} the UTF-8 encoded string.\n */\nexports.utf8encode = function utf8encode(str) {\n    if (support.nodebuffer) {\n        return nodeBuffer(str, \"utf-8\");\n    }\n\n    return string2buf(str);\n};\n\n\n/**\n * Transform a bytes array (or a representation) representing an UTF-8 encoded\n * string into a javascript string.\n * @param {Array|Uint8Array|Buffer} buf the data de decode\n * @return {String} the decoded string.\n */\nexports.utf8decode = function utf8decode(buf) {\n    if (support.nodebuffer) {\n        return utils.transformTo(\"nodebuffer\", buf).toString(\"utf-8\");\n    }\n\n    buf = utils.transformTo(support.uint8array ? \"uint8array\" : \"array\", buf);\n\n    // return buf2string(buf);\n    // Chrome prefers to work with \"small\" chunks of data\n    // for the method buf2string.\n    // Firefox and Chrome has their own shortcut, IE doesn't seem to really care.\n    var result = [], k = 0, len = buf.length, chunk = 65536;\n    while (k < len) {\n        var nextBoundary = utf8border(buf, Math.min(k + chunk, len));\n        if (support.uint8array) {\n            result.push(buf2string(buf.subarray(k, nextBoundary)));\n        } else {\n            result.push(buf2string(buf.slice(k, nextBoundary)));\n        }\n        k = nextBoundary;\n    }\n    return result.join(\"\");\n\n};\n// vim: set shiftwidth=4 softtabstop=4:\n\n},{\"./nodeBuffer\":11,\"./support\":17,\"./utils\":21}],21:[function(_dereq_,module,exports){\n'use strict';\nvar support = _dereq_('./support');\nvar compressions = _dereq_('./compressions');\nvar nodeBuffer = _dereq_('./nodeBuffer');\n/**\n * Convert a string to a \"binary string\" : a string containing only char codes between 0 and 255.\n * @param {string} str the string to transform.\n * @return {String} the binary string.\n */\nexports.string2binary = function(str) {\n    var result = \"\";\n    for (var i = 0; i < str.length; i++) {\n        result += String.fromCharCode(str.charCodeAt(i) & 0xff);\n    }\n    return result;\n};\nexports.arrayBuffer2Blob = function(buffer) {\n    exports.checkSupport(\"blob\");\n\n    try {\n        // Blob constructor\n        return new Blob([buffer], {\n            type: \"application/zip\"\n        });\n    }\n    catch (e) {\n\n        try {\n            // deprecated, browser only, old way\n            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n            var builder = new Builder();\n            builder.append(buffer);\n            return builder.getBlob('application/zip');\n        }\n        catch (e) {\n\n            // well, fuck ?!\n            throw new Error(\"Bug : can't construct the Blob.\");\n        }\n    }\n\n\n};\n/**\n * The identity function.\n * @param {Object} input the input.\n * @return {Object} the same input.\n */\nfunction identity(input) {\n    return input;\n}\n\n/**\n * Fill in an array with a string.\n * @param {String} str the string to use.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to fill in (will be mutated).\n * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated array.\n */\nfunction stringToArrayLike(str, array) {\n    for (var i = 0; i < str.length; ++i) {\n        array[i] = str.charCodeAt(i) & 0xFF;\n    }\n    return array;\n}\n\n/**\n * Transform an array-like object to a string.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.\n * @return {String} the result.\n */\nfunction arrayLikeToString(array) {\n    // Performances notes :\n    // --------------------\n    // String.fromCharCode.apply(null, array) is the fastest, see\n    // see http://jsperf.com/converting-a-uint8array-to-a-string/2\n    // but the stack is limited (and we can get huge arrays !).\n    //\n    // result += String.fromCharCode(array[i]); generate too many strings !\n    //\n    // This code is inspired by http://jsperf.com/arraybuffer-to-string-apply-performance/2\n    var chunk = 65536;\n    var result = [],\n        len = array.length,\n        type = exports.getTypeOf(array),\n        k = 0,\n        canUseApply = true;\n      try {\n         switch(type) {\n            case \"uint8array\":\n               String.fromCharCode.apply(null, new Uint8Array(0));\n               break;\n            case \"nodebuffer\":\n               String.fromCharCode.apply(null, nodeBuffer(0));\n               break;\n         }\n      } catch(e) {\n         canUseApply = false;\n      }\n\n      // no apply : slow and painful algorithm\n      // default browser on android 4.*\n      if (!canUseApply) {\n         var resultStr = \"\";\n         for(var i = 0; i < array.length;i++) {\n            resultStr += String.fromCharCode(array[i]);\n         }\n    return resultStr;\n    }\n    while (k < len && chunk > 1) {\n        try {\n            if (type === \"array\" || type === \"nodebuffer\") {\n                result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));\n            }\n            else {\n                result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));\n            }\n            k += chunk;\n        }\n        catch (e) {\n            chunk = Math.floor(chunk / 2);\n        }\n    }\n    return result.join(\"\");\n}\n\nexports.applyFromCharCode = arrayLikeToString;\n\n\n/**\n * Copy the data from an array-like to an other array-like.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayFrom the origin array.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayTo the destination array which will be mutated.\n * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated destination array.\n */\nfunction arrayLikeToArrayLike(arrayFrom, arrayTo) {\n    for (var i = 0; i < arrayFrom.length; i++) {\n        arrayTo[i] = arrayFrom[i];\n    }\n    return arrayTo;\n}\n\n// a matrix containing functions to transform everything into everything.\nvar transform = {};\n\n// string to ?\ntransform[\"string\"] = {\n    \"string\": identity,\n    \"array\": function(input) {\n        return stringToArrayLike(input, new Array(input.length));\n    },\n    \"arraybuffer\": function(input) {\n        return transform[\"string\"][\"uint8array\"](input).buffer;\n    },\n    \"uint8array\": function(input) {\n        return stringToArrayLike(input, new Uint8Array(input.length));\n    },\n    \"nodebuffer\": function(input) {\n        return stringToArrayLike(input, nodeBuffer(input.length));\n    }\n};\n\n// array to ?\ntransform[\"array\"] = {\n    \"string\": arrayLikeToString,\n    \"array\": identity,\n    \"arraybuffer\": function(input) {\n        return (new Uint8Array(input)).buffer;\n    },\n    \"uint8array\": function(input) {\n        return new Uint8Array(input);\n    },\n    \"nodebuffer\": function(input) {\n        return nodeBuffer(input);\n    }\n};\n\n// arraybuffer to ?\ntransform[\"arraybuffer\"] = {\n    \"string\": function(input) {\n        return arrayLikeToString(new Uint8Array(input));\n    },\n    \"array\": function(input) {\n        return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));\n    },\n    \"arraybuffer\": identity,\n    \"uint8array\": function(input) {\n        return new Uint8Array(input);\n    },\n    \"nodebuffer\": function(input) {\n        return nodeBuffer(new Uint8Array(input));\n    }\n};\n\n// uint8array to ?\ntransform[\"uint8array\"] = {\n    \"string\": arrayLikeToString,\n    \"array\": function(input) {\n        return arrayLikeToArrayLike(input, new Array(input.length));\n    },\n    \"arraybuffer\": function(input) {\n        return input.buffer;\n    },\n    \"uint8array\": identity,\n    \"nodebuffer\": function(input) {\n        return nodeBuffer(input);\n    }\n};\n\n// nodebuffer to ?\ntransform[\"nodebuffer\"] = {\n    \"string\": arrayLikeToString,\n    \"array\": function(input) {\n        return arrayLikeToArrayLike(input, new Array(input.length));\n    },\n    \"arraybuffer\": function(input) {\n        return transform[\"nodebuffer\"][\"uint8array\"](input).buffer;\n    },\n    \"uint8array\": function(input) {\n        return arrayLikeToArrayLike(input, new Uint8Array(input.length));\n    },\n    \"nodebuffer\": identity\n};\n\n/**\n * Transform an input into any type.\n * The supported output type are : string, array, uint8array, arraybuffer, nodebuffer.\n * If no output type is specified, the unmodified input will be returned.\n * @param {String} outputType the output type.\n * @param {String|Array|ArrayBuffer|Uint8Array|Buffer} input the input to convert.\n * @throws {Error} an Error if the browser doesn't support the requested output type.\n */\nexports.transformTo = function(outputType, input) {\n    if (!input) {\n        // undefined, null, etc\n        // an empty string won't harm.\n        input = \"\";\n    }\n    if (!outputType) {\n        return input;\n    }\n    exports.checkSupport(outputType);\n    var inputType = exports.getTypeOf(input);\n    var result = transform[inputType][outputType](input);\n    return result;\n};\n\n/**\n * Return the type of the input.\n * The type will be in a format valid for JSZip.utils.transformTo : string, array, uint8array, arraybuffer.\n * @param {Object} input the input to identify.\n * @return {String} the (lowercase) type of the input.\n */\nexports.getTypeOf = function(input) {\n    if (typeof input === \"string\") {\n        return \"string\";\n    }\n    if (Object.prototype.toString.call(input) === \"[object Array]\") {\n        return \"array\";\n    }\n    if (support.nodebuffer && nodeBuffer.test(input)) {\n        return \"nodebuffer\";\n    }\n    if (support.uint8array && input instanceof Uint8Array) {\n        return \"uint8array\";\n    }\n    if (support.arraybuffer && input instanceof ArrayBuffer) {\n        return \"arraybuffer\";\n    }\n};\n\n/**\n * Throw an exception if the type is not supported.\n * @param {String} type the type to check.\n * @throws {Error} an Error if the browser doesn't support the requested type.\n */\nexports.checkSupport = function(type) {\n    var supported = support[type.toLowerCase()];\n    if (!supported) {\n        throw new Error(type + \" is not supported by this browser\");\n    }\n};\nexports.MAX_VALUE_16BITS = 65535;\nexports.MAX_VALUE_32BITS = -1; // well, \"\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\" is parsed as -1\n\n/**\n * Prettify a string read as binary.\n * @param {string} str the string to prettify.\n * @return {string} a pretty string.\n */\nexports.pretty = function(str) {\n    var res = '',\n        code, i;\n    for (i = 0; i < (str || \"\").length; i++) {\n        code = str.charCodeAt(i);\n        res += '\\\\x' + (code < 16 ? \"0\" : \"\") + code.toString(16).toUpperCase();\n    }\n    return res;\n};\n\n/**\n * Find a compression registered in JSZip.\n * @param {string} compressionMethod the method magic to find.\n * @return {Object|null} the JSZip compression object, null if none found.\n */\nexports.findCompression = function(compressionMethod) {\n    for (var method in compressions) {\n        if (!compressions.hasOwnProperty(method)) {\n            continue;\n        }\n        if (compressions[method].magic === compressionMethod) {\n            return compressions[method];\n        }\n    }\n    return null;\n};\n/**\n* Cross-window, cross-Node-context regular expression detection\n* @param  {Object}  object Anything\n* @return {Boolean}        true if the object is a regular expression,\n* false otherwise\n*/\nexports.isRegExp = function (object) {\n    return Object.prototype.toString.call(object) === \"[object RegExp]\";\n};\n\n\n},{\"./compressions\":3,\"./nodeBuffer\":11,\"./support\":17}],22:[function(_dereq_,module,exports){\n'use strict';\nvar StringReader = _dereq_('./stringReader');\nvar NodeBufferReader = _dereq_('./nodeBufferReader');\nvar Uint8ArrayReader = _dereq_('./uint8ArrayReader');\nvar utils = _dereq_('./utils');\nvar sig = _dereq_('./signature');\nvar ZipEntry = _dereq_('./zipEntry');\nvar support = _dereq_('./support');\nvar jszipProto = _dereq_('./object');\n//  class ZipEntries {{{\n/**\n * All the entries in the zip file.\n * @constructor\n * @param {String|ArrayBuffer|Uint8Array} data the binary stream to load.\n * @param {Object} loadOptions Options for loading the stream.\n */\nfunction ZipEntries(data, loadOptions) {\n    this.files = [];\n    this.loadOptions = loadOptions;\n    if (data) {\n        this.load(data);\n    }\n}\nZipEntries.prototype = {\n    /**\n     * Check that the reader is on the speficied signature.\n     * @param {string} expectedSignature the expected signature.\n     * @throws {Error} if it is an other signature.\n     */\n    checkSignature: function(expectedSignature) {\n        var signature = this.reader.readString(4);\n        if (signature !== expectedSignature) {\n            throw new Error(\"Corrupted zip or bug : unexpected signature \" + \"(\" + utils.pretty(signature) + \", expected \" + utils.pretty(expectedSignature) + \")\");\n        }\n    },\n    /**\n     * Read the end of the central directory.\n     */\n    readBlockEndOfCentral: function() {\n        this.diskNumber = this.reader.readInt(2);\n        this.diskWithCentralDirStart = this.reader.readInt(2);\n        this.centralDirRecordsOnThisDisk = this.reader.readInt(2);\n        this.centralDirRecords = this.reader.readInt(2);\n        this.centralDirSize = this.reader.readInt(4);\n        this.centralDirOffset = this.reader.readInt(4);\n\n        this.zipCommentLength = this.reader.readInt(2);\n        // warning : the encoding depends of the system locale\n        // On a linux machine with LANG=en_US.utf8, this field is utf8 encoded.\n        // On a windows machine, this field is encoded with the localized windows code page.\n        this.zipComment = this.reader.readString(this.zipCommentLength);\n        // To get consistent behavior with the generation part, we will assume that\n        // this is utf8 encoded.\n        this.zipComment = jszipProto.utf8decode(this.zipComment);\n    },\n    /**\n     * Read the end of the Zip 64 central directory.\n     * Not merged with the method readEndOfCentral :\n     * The end of central can coexist with its Zip64 brother,\n     * I don't want to read the wrong number of bytes !\n     */\n    readBlockZip64EndOfCentral: function() {\n        this.zip64EndOfCentralSize = this.reader.readInt(8);\n        this.versionMadeBy = this.reader.readString(2);\n        this.versionNeeded = this.reader.readInt(2);\n        this.diskNumber = this.reader.readInt(4);\n        this.diskWithCentralDirStart = this.reader.readInt(4);\n        this.centralDirRecordsOnThisDisk = this.reader.readInt(8);\n        this.centralDirRecords = this.reader.readInt(8);\n        this.centralDirSize = this.reader.readInt(8);\n        this.centralDirOffset = this.reader.readInt(8);\n\n        this.zip64ExtensibleData = {};\n        var extraDataSize = this.zip64EndOfCentralSize - 44,\n            index = 0,\n            extraFieldId,\n            extraFieldLength,\n            extraFieldValue;\n        while (index < extraDataSize) {\n            extraFieldId = this.reader.readInt(2);\n            extraFieldLength = this.reader.readInt(4);\n            extraFieldValue = this.reader.readString(extraFieldLength);\n            this.zip64ExtensibleData[extraFieldId] = {\n                id: extraFieldId,\n                length: extraFieldLength,\n                value: extraFieldValue\n            };\n        }\n    },\n    /**\n     * Read the end of the Zip 64 central directory locator.\n     */\n    readBlockZip64EndOfCentralLocator: function() {\n        this.diskWithZip64CentralDirStart = this.reader.readInt(4);\n        this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8);\n        this.disksCount = this.reader.readInt(4);\n        if (this.disksCount > 1) {\n            throw new Error(\"Multi-volumes zip are not supported\");\n        }\n    },\n    /**\n     * Read the local files, based on the offset read in the central part.\n     */\n    readLocalFiles: function() {\n        var i, file;\n        for (i = 0; i < this.files.length; i++) {\n            file = this.files[i];\n            this.reader.setIndex(file.localHeaderOffset);\n            this.checkSignature(sig.LOCAL_FILE_HEADER);\n            file.readLocalPart(this.reader);\n            file.handleUTF8();\n        }\n    },\n    /**\n     * Read the central directory.\n     */\n    readCentralDir: function() {\n        var file;\n\n        this.reader.setIndex(this.centralDirOffset);\n        while (this.reader.readString(4) === sig.CENTRAL_FILE_HEADER) {\n            file = new ZipEntry({\n                zip64: this.zip64\n            }, this.loadOptions);\n            file.readCentralPart(this.reader);\n            this.files.push(file);\n        }\n    },\n    /**\n     * Read the end of central directory.\n     */\n    readEndOfCentral: function() {\n        var offset = this.reader.lastIndexOfSignature(sig.CENTRAL_DIRECTORY_END);\n        if (offset === -1) {\n            throw new Error(\"Corrupted zip : can't find end of central directory\");\n        }\n        this.reader.setIndex(offset);\n        this.checkSignature(sig.CENTRAL_DIRECTORY_END);\n        this.readBlockEndOfCentral();\n\n\n        /* extract from the zip spec :\n            4)  If one of the fields in the end of central directory\n                record is too small to hold required data, the field\n                should be set to -1 (0xFFFF or 0xFFFFFFFF) and the\n                ZIP64 format record should be created.\n            5)  The end of central directory record and the\n                Zip64 end of central directory locator record must\n                reside on the same disk when splitting or spanning\n                an archive.\n         */\n        if (this.diskNumber === utils.MAX_VALUE_16BITS || this.diskWithCentralDirStart === utils.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === utils.MAX_VALUE_16BITS || this.centralDirRecords === utils.MAX_VALUE_16BITS || this.centralDirSize === utils.MAX_VALUE_32BITS || this.centralDirOffset === utils.MAX_VALUE_32BITS) {\n            this.zip64 = true;\n\n            /*\n            Warning : the zip64 extension is supported, but ONLY if the 64bits integer read from\n            the zip file can fit into a 32bits integer. This cannot be solved : Javascript represents\n            all numbers as 64-bit double precision IEEE 754 floating point numbers.\n            So, we have 53bits for integers and bitwise operations treat everything as 32bits.\n            see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Bitwise_Operators\n            and http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf section 8.5\n            */\n\n            // should look for a zip64 EOCD locator\n            offset = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);\n            if (offset === -1) {\n                throw new Error(\"Corrupted zip : can't find the ZIP64 end of central directory locator\");\n            }\n            this.reader.setIndex(offset);\n            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);\n            this.readBlockZip64EndOfCentralLocator();\n\n            // now the zip64 EOCD record\n            this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);\n            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);\n            this.readBlockZip64EndOfCentral();\n        }\n    },\n    prepareReader: function(data) {\n        var type = utils.getTypeOf(data);\n        if (type === \"string\" && !support.uint8array) {\n            this.reader = new StringReader(data, this.loadOptions.optimizedBinaryString);\n        }\n        else if (type === \"nodebuffer\") {\n            this.reader = new NodeBufferReader(data);\n        }\n        else {\n            this.reader = new Uint8ArrayReader(utils.transformTo(\"uint8array\", data));\n        }\n    },\n    /**\n     * Read a zip file and create ZipEntries.\n     * @param {String|ArrayBuffer|Uint8Array|Buffer} data the binary string representing a zip file.\n     */\n    load: function(data) {\n        this.prepareReader(data);\n        this.readEndOfCentral();\n        this.readCentralDir();\n        this.readLocalFiles();\n    }\n};\n// }}} end of ZipEntries\nmodule.exports = ZipEntries;\n\n},{\"./nodeBufferReader\":12,\"./object\":13,\"./signature\":14,\"./stringReader\":15,\"./support\":17,\"./uint8ArrayReader\":18,\"./utils\":21,\"./zipEntry\":23}],23:[function(_dereq_,module,exports){\n'use strict';\nvar StringReader = _dereq_('./stringReader');\nvar utils = _dereq_('./utils');\nvar CompressedObject = _dereq_('./compressedObject');\nvar jszipProto = _dereq_('./object');\n// class ZipEntry {{{\n/**\n * An entry in the zip file.\n * @constructor\n * @param {Object} options Options of the current file.\n * @param {Object} loadOptions Options for loading the stream.\n */\nfunction ZipEntry(options, loadOptions) {\n    this.options = options;\n    this.loadOptions = loadOptions;\n}\nZipEntry.prototype = {\n    /**\n     * say if the file is encrypted.\n     * @return {boolean} true if the file is encrypted, false otherwise.\n     */\n    isEncrypted: function() {\n        // bit 1 is set\n        return (this.bitFlag & 0x0001) === 0x0001;\n    },\n    /**\n     * say if the file has utf-8 filename/comment.\n     * @return {boolean} true if the filename/comment is in utf-8, false otherwise.\n     */\n    useUTF8: function() {\n        // bit 11 is set\n        return (this.bitFlag & 0x0800) === 0x0800;\n    },\n    /**\n     * Prepare the function used to generate the compressed content from this ZipFile.\n     * @param {DataReader} reader the reader to use.\n     * @param {number} from the offset from where we should read the data.\n     * @param {number} length the length of the data to read.\n     * @return {Function} the callback to get the compressed content (the type depends of the DataReader class).\n     */\n    prepareCompressedContent: function(reader, from, length) {\n        return function() {\n            var previousIndex = reader.index;\n            reader.setIndex(from);\n            var compressedFileData = reader.readData(length);\n            reader.setIndex(previousIndex);\n\n            return compressedFileData;\n        };\n    },\n    /**\n     * Prepare the function used to generate the uncompressed content from this ZipFile.\n     * @param {DataReader} reader the reader to use.\n     * @param {number} from the offset from where we should read the data.\n     * @param {number} length the length of the data to read.\n     * @param {JSZip.compression} compression the compression used on this file.\n     * @param {number} uncompressedSize the uncompressed size to expect.\n     * @return {Function} the callback to get the uncompressed content (the type depends of the DataReader class).\n     */\n    prepareContent: function(reader, from, length, compression, uncompressedSize) {\n        return function() {\n\n            var compressedFileData = utils.transformTo(compression.uncompressInputType, this.getCompressedContent());\n            var uncompressedFileData = compression.uncompress(compressedFileData);\n\n            if (uncompressedFileData.length !== uncompressedSize) {\n                throw new Error(\"Bug : uncompressed data size mismatch\");\n            }\n\n            return uncompressedFileData;\n        };\n    },\n    /**\n     * Read the local part of a zip file and add the info in this object.\n     * @param {DataReader} reader the reader to use.\n     */\n    readLocalPart: function(reader) {\n        var compression, localExtraFieldsLength;\n\n        // we already know everything from the central dir !\n        // If the central dir data are false, we are doomed.\n        // On the bright side, the local part is scary  : zip64, data descriptors, both, etc.\n        // The less data we get here, the more reliable this should be.\n        // Let's skip the whole header and dash to the data !\n        reader.skip(22);\n        // in some zip created on windows, the filename stored in the central dir contains \\ instead of /.\n        // Strangely, the filename here is OK.\n        // I would love to treat these zip files as corrupted (see http://www.info-zip.org/FAQ.html#backslashes\n        // or APPNOTE#4.4.17.1, \"All slashes MUST be forward slashes '/'\") but there are a lot of bad zip generators...\n        // Search \"unzip mismatching \"local\" filename continuing with \"central\" filename version\" on\n        // the internet.\n        //\n        // I think I see the logic here : the central directory is used to display\n        // content and the local directory is used to extract the files. Mixing / and \\\n        // may be used to display \\ to windows users and use / when extracting the files.\n        // Unfortunately, this lead also to some issues : http://seclists.org/fulldisclosure/2009/Sep/394\n        this.fileNameLength = reader.readInt(2);\n        localExtraFieldsLength = reader.readInt(2); // can't be sure this will be the same as the central dir\n        this.fileName = reader.readString(this.fileNameLength);\n        reader.skip(localExtraFieldsLength);\n\n        if (this.compressedSize == -1 || this.uncompressedSize == -1) {\n            throw new Error(\"Bug or corrupted zip : didn't get enough informations from the central directory \" + \"(compressedSize == -1 || uncompressedSize == -1)\");\n        }\n\n        compression = utils.findCompression(this.compressionMethod);\n        if (compression === null) { // no compression found\n            throw new Error(\"Corrupted zip : compression \" + utils.pretty(this.compressionMethod) + \" unknown (inner file : \" + this.fileName + \")\");\n        }\n        this.decompressed = new CompressedObject();\n        this.decompressed.compressedSize = this.compressedSize;\n        this.decompressed.uncompressedSize = this.uncompressedSize;\n        this.decompressed.crc32 = this.crc32;\n        this.decompressed.compressionMethod = this.compressionMethod;\n        this.decompressed.getCompressedContent = this.prepareCompressedContent(reader, reader.index, this.compressedSize, compression);\n        this.decompressed.getContent = this.prepareContent(reader, reader.index, this.compressedSize, compression, this.uncompressedSize);\n\n        // we need to compute the crc32...\n        if (this.loadOptions.checkCRC32) {\n            this.decompressed = utils.transformTo(\"string\", this.decompressed.getContent());\n            if (jszipProto.crc32(this.decompressed) !== this.crc32) {\n                throw new Error(\"Corrupted zip : CRC32 mismatch\");\n            }\n        }\n    },\n\n    /**\n     * Read the central part of a zip file and add the info in this object.\n     * @param {DataReader} reader the reader to use.\n     */\n    readCentralPart: function(reader) {\n        this.versionMadeBy = reader.readString(2);\n        this.versionNeeded = reader.readInt(2);\n        this.bitFlag = reader.readInt(2);\n        this.compressionMethod = reader.readString(2);\n        this.date = reader.readDate();\n        this.crc32 = reader.readInt(4);\n        this.compressedSize = reader.readInt(4);\n        this.uncompressedSize = reader.readInt(4);\n        this.fileNameLength = reader.readInt(2);\n        this.extraFieldsLength = reader.readInt(2);\n        this.fileCommentLength = reader.readInt(2);\n        this.diskNumberStart = reader.readInt(2);\n        this.internalFileAttributes = reader.readInt(2);\n        this.externalFileAttributes = reader.readInt(4);\n        this.localHeaderOffset = reader.readInt(4);\n\n        if (this.isEncrypted()) {\n            throw new Error(\"Encrypted zip are not supported\");\n        }\n\n        this.fileName = reader.readString(this.fileNameLength);\n        this.readExtraFields(reader);\n        this.parseZIP64ExtraField(reader);\n        this.fileComment = reader.readString(this.fileCommentLength);\n\n        // warning, this is true only for zip with madeBy == DOS (plateform dependent feature)\n        this.dir = this.externalFileAttributes & 0x00000010 ? true : false;\n    },\n    /**\n     * Parse the ZIP64 extra field and merge the info in the current ZipEntry.\n     * @param {DataReader} reader the reader to use.\n     */\n    parseZIP64ExtraField: function(reader) {\n\n        if (!this.extraFields[0x0001]) {\n            return;\n        }\n\n        // should be something, preparing the extra reader\n        var extraReader = new StringReader(this.extraFields[0x0001].value);\n\n        // I really hope that these 64bits integer can fit in 32 bits integer, because js\n        // won't let us have more.\n        if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {\n            this.uncompressedSize = extraReader.readInt(8);\n        }\n        if (this.compressedSize === utils.MAX_VALUE_32BITS) {\n            this.compressedSize = extraReader.readInt(8);\n        }\n        if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {\n            this.localHeaderOffset = extraReader.readInt(8);\n        }\n        if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {\n            this.diskNumberStart = extraReader.readInt(4);\n        }\n    },\n    /**\n     * Read the central part of a zip file and add the info in this object.\n     * @param {DataReader} reader the reader to use.\n     */\n    readExtraFields: function(reader) {\n        var start = reader.index,\n            extraFieldId,\n            extraFieldLength,\n            extraFieldValue;\n\n        this.extraFields = this.extraFields || {};\n\n        while (reader.index < start + this.extraFieldsLength) {\n            extraFieldId = reader.readInt(2);\n            extraFieldLength = reader.readInt(2);\n            extraFieldValue = reader.readString(extraFieldLength);\n\n            this.extraFields[extraFieldId] = {\n                id: extraFieldId,\n                length: extraFieldLength,\n                value: extraFieldValue\n            };\n        }\n    },\n    /**\n     * Apply an UTF8 transformation if needed.\n     */\n    handleUTF8: function() {\n        if (this.useUTF8()) {\n            this.fileName = jszipProto.utf8decode(this.fileName);\n            this.fileComment = jszipProto.utf8decode(this.fileComment);\n        } else {\n            var upath = this.findExtraFieldUnicodePath();\n            if (upath !== null) {\n                this.fileName = upath;\n            }\n            var ucomment = this.findExtraFieldUnicodeComment();\n            if (ucomment !== null) {\n                this.fileComment = ucomment;\n            }\n        }\n    },\n\n    /**\n     * Find the unicode path declared in the extra field, if any.\n     * @return {String} the unicode path, null otherwise.\n     */\n    findExtraFieldUnicodePath: function() {\n        var upathField = this.extraFields[0x7075];\n        if (upathField) {\n            var extraReader = new StringReader(upathField.value);\n\n            // wrong version\n            if (extraReader.readInt(1) !== 1) {\n                return null;\n            }\n\n            // the crc of the filename changed, this field is out of date.\n            if (jszipProto.crc32(this.fileName) !== extraReader.readInt(4)) {\n                return null;\n            }\n\n            return jszipProto.utf8decode(extraReader.readString(upathField.length - 5));\n        }\n        return null;\n    },\n\n    /**\n     * Find the unicode comment declared in the extra field, if any.\n     * @return {String} the unicode comment, null otherwise.\n     */\n    findExtraFieldUnicodeComment: function() {\n        var ucommentField = this.extraFields[0x6375];\n        if (ucommentField) {\n            var extraReader = new StringReader(ucommentField.value);\n\n            // wrong version\n            if (extraReader.readInt(1) !== 1) {\n                return null;\n            }\n\n            // the crc of the comment changed, this field is out of date.\n            if (jszipProto.crc32(this.fileComment) !== extraReader.readInt(4)) {\n                return null;\n            }\n\n            return jszipProto.utf8decode(extraReader.readString(ucommentField.length - 5));\n        }\n        return null;\n    }\n};\nmodule.exports = ZipEntry;\n\n},{\"./compressedObject\":2,\"./object\":13,\"./stringReader\":15,\"./utils\":21}],24:[function(_dereq_,module,exports){\n// Top level file is just a mixin of submodules & constants\n'use strict';\n\nvar assign    = _dereq_('./lib/utils/common').assign;\n\nvar deflate   = _dereq_('./lib/deflate');\nvar inflate   = _dereq_('./lib/inflate');\nvar constants = _dereq_('./lib/zlib/constants');\n\nvar pako = {};\n\nassign(pako, deflate, inflate, constants);\n\nmodule.exports = pako;\n},{\"./lib/deflate\":25,\"./lib/inflate\":26,\"./lib/utils/common\":27,\"./lib/zlib/constants\":30}],25:[function(_dereq_,module,exports){\n'use strict';\n\n\nvar zlib_deflate = _dereq_('./zlib/deflate.js');\nvar utils = _dereq_('./utils/common');\nvar strings = _dereq_('./utils/strings');\nvar msg = _dereq_('./zlib/messages');\nvar zstream = _dereq_('./zlib/zstream');\n\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH      = 0;\nvar Z_FINISH        = 4;\n\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n\nvar Z_DEFAULT_COMPRESSION = -1;\n\nvar Z_DEFAULT_STRATEGY    = 0;\n\nvar Z_DEFLATED  = 8;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overriden.\n **/\n\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nvar Deflate = function(options) {\n\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new zstream();\n  this.strm.avail_out = 0;\n\n  var status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n};\n\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|String): input data. Strings will be converted to\n *   utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That flush internal pending buffers and call\n * [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function(data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n\n  if (this.ended) { return false; }\n\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && _mode === Z_FINISH)) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): ouput data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function(chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that input stream complete\n * or error happenned. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function(status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate alrorythm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n},{\"./utils/common\":27,\"./utils/strings\":28,\"./zlib/deflate.js\":32,\"./zlib/messages\":37,\"./zlib/zstream\":39}],26:[function(_dereq_,module,exports){\n'use strict';\n\n\nvar zlib_inflate = _dereq_('./zlib/inflate.js');\nvar utils = _dereq_('./utils/common');\nvar strings = _dereq_('./utils/strings');\nvar c = _dereq_('./zlib/constants');\nvar msg = _dereq_('./zlib/messages');\nvar zstream = _dereq_('./zlib/zstream');\nvar gzheader = _dereq_('./zlib/gzheader');\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overriden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nvar Inflate = function(options) {\n\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new zstream();\n  this.strm.avail_out = 0;\n\n  var status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new gzheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n};\n\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That flush internal pending buffers and call\n * [[Inflate#onEnd]].\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function(data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n  var next_out_utf8, tail, utf8str;\n\n  if (this.ended) { return false; }\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && _mode === c.Z_FINISH)) {\n\n        if (this.options.to === 'string') {\n\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    }\n  } while ((strm.avail_in > 0) && status !== c.Z_STREAM_END);\n\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  }\n  // Finalize on the last chunk.\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): ouput data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function(chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell inflate that input stream complete\n * or error happenned. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function(status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 alligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n\n  inflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) { throw inflator.msg; }\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip  = inflate;\n\n},{\"./utils/common\":27,\"./utils/strings\":28,\"./zlib/constants\":30,\"./zlib/gzheader\":33,\"./zlib/inflate.js\":35,\"./zlib/messages\":37,\"./zlib/zstream\":39}],27:[function(_dereq_,module,exports){\n'use strict';\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof(source) !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (source.hasOwnProperty(p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs+len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for(var i=0; i<len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function(chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i=0, l=chunks.length; i<l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i=0, l=chunks.length; i<l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for(var i=0; i<len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function(chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n},{}],28:[function(_dereq_,module,exports){\n// String encode/decode helpers\n'use strict';\n\n\nvar utils = _dereq_('./common');\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safary\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [0]); } catch(__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch(__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var i=0; i<256; i++) {\n  _utf8len[i] = (i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1);\n}\n_utf8len[254]=_utf8len[254]=1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n      c2 = str.charCodeAt(m_pos+1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i=0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n      c2 = str.charCodeAt(m_pos+1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // use fallback for big arrays to avoid stack overflow\n  if (len < 65537) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for(var i=0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function(buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function(str) {\n  var buf = new utils.Buf8(str.length);\n  for(var i=0, len=buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len*2);\n\n  for (out=0, i=0; i<len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function(buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max-1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Fuckup - very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means vuffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\n},{\"./common\":27}],29:[function(_dereq_,module,exports){\n'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It doesn't worth to make additional optimizationa as in original.\n// Small size is preferable.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0\n    , s2 = ((adler >>> 16) & 0xffff) |0\n    , n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n},{}],30:[function(_dereq_,module,exports){\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  //Z_MEM_ERROR:     -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n},{}],31:[function(_dereq_,module,exports){\n'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for(var n =0; n < 256; n++){\n    c = n;\n    for(var k =0; k < 8; k++){\n      c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable\n    , end = pos + len;\n\n  crc = crc ^ (-1);\n\n  for (var i = pos; i < end; i++ ) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n},{}],32:[function(_dereq_,module,exports){\n'use strict';\n\nvar utils   = _dereq_('../utils/common');\nvar trees   = _dereq_('./trees');\nvar adler32 = _dereq_('./adler32');\nvar crc32   = _dereq_('./crc32');\nvar msg   = _dereq_('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2*L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only (s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH-1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH-1)) ? s.strstart : MIN_MATCH-1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH-1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size-MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH-1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1- s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length-1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH-1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH-1 ? s.strstart : MIN_MATCH-1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nvar Config = function (good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n};\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2*D_CODES+1) * 2);\n  this.bl_tree    = new utils.Buf16((2*BL_CODES+1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS+1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2*L_CODES+1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2*L_CODES+1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  s.d_buf = s.lit_bufsize >> 1;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n                );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg){\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n/* =========================================================================\n * Copy the source state to the destination state\n */\n//function deflateCopy(dest, source) {\n//\n//}\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n},{\"../utils/common\":27,\"./adler32\":29,\"./crc32\":31,\"./messages\":37,\"./trees\":38}],33:[function(_dereq_,module,exports){\n'use strict';\n\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n},{}],34:[function(_dereq_,module,exports){\n'use strict';\n\n// See state defs from inflate.js\nvar BAD = 30;       /* got a data error -- remain here until reset */\nvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  var state;\n  var _in;                    /* local strm.input */\n  var last;                   /* have enough input while in < last */\n  var _out;                   /* local strm.output */\n  var beg;                    /* inflate()'s initial strm.output */\n  var end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  var dmax;                   /* maximum distance from zlib header */\n//#endif\n  var wsize;                  /* window size or zero if not using window */\n  var whave;                  /* valid bytes in the window */\n  var wnext;                  /* window write index */\n  var window;                 /* allocated sliding window, if wsize != 0 */\n  var hold;                   /* local strm.hold */\n  var bits;                   /* local strm.bits */\n  var lcode;                  /* local strm.lencode */\n  var dcode;                  /* local strm.distcode */\n  var lmask;                  /* mask for first level of length codes */\n  var dmask;                  /* mask for first level of distance codes */\n  var here;                   /* retrieved table entry */\n  var op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  var len;                    /* match length, unused bytes */\n  var dist;                   /* match distance */\n  var from;                   /* where to copy match from */\n  var from_source;\n\n\n  var input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n},{}],35:[function(_dereq_,module,exports){\n'use strict';\n\n\nvar utils = _dereq_('../utils/common');\nvar adler32 = _dereq_('./adler32');\nvar crc32   = _dereq_('./crc32');\nvar inflate_fast = _dereq_('./inffast');\nvar inflate_table = _dereq_('./inftrees');\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\n//var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\nvar Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\nvar Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nvar    HEAD = 1;       /* i: waiting for magic header */\nvar    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nvar    TIME = 3;       /* i: waiting for modification time (gzip) */\nvar    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nvar    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nvar    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nvar    NAME = 7;       /* i: waiting for end of file name (gzip) */\nvar    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nvar    HCRC = 9;       /* i: waiting for header crc (gzip) */\nvar    DICTID = 10;    /* i: waiting for dictionary check value */\nvar    DICT = 11;      /* waiting for inflateSetDictionary() call */\nvar        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nvar        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nvar        STORED = 14;    /* i: waiting for stored size (length and complement) */\nvar        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nvar        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nvar        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nvar        LENLENS = 18;   /* i: waiting for code length code lengths */\nvar        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nvar            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nvar            LEN = 21;       /* i: waiting for length/lit/eob code */\nvar            LENEXT = 22;    /* i: waiting for length extra bits */\nvar            DIST = 23;      /* i: waiting for distance code */\nvar            DISTEXT = 24;   /* i: waiting for distance extra bits */\nvar            MATCH = 25;     /* o: waiting for output space to copy string */\nvar            LIT = 26;       /* o: waiting for output space to write literal */\nvar    CHECK = 27;     /* i: waiting for 32-bit check value */\nvar    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nvar    DONE = 29;      /* finished check, done -- remain here until reset */\nvar    BAD = 30;       /* got a data error -- remain here until reset */\nvar    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nvar    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_WBITS = MAX_WBITS;\n\n\nfunction ZSWAP32(q) {\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n}\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\n  this.work = new utils.Buf16(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\nfunction inflateResetKeep(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n}\n\nfunction inflateReset(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n}\n\nfunction inflateReset2(strm, windowBits) {\n  var wrap;\n  var state;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n}\n\nfunction inflateInit2(strm, windowBits) {\n  var ret;\n  var state;\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n}\n\nfunction inflateInit(strm) {\n  return inflateInit2(strm, DEF_WBITS);\n}\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nvar virgin = true;\n\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\nfunction fixedtables(state) {\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    var sym;\n\n    lenfix = new utils.Buf32(512);\n    distfix = new utils.Buf32(32);\n\n    /* literal/length table */\n    sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, {bits: 9});\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, {bits: 5});\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n}\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nfunction updatewindow(strm, src, end, copy) {\n  var dist;\n  var state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new utils.Buf8(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    utils.arraySet(state.window,src, end - state.wsize, state.wsize, 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    utils.arraySet(state.window,src, end - copy, dist, state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      utils.arraySet(state.window,src, end - copy, copy, 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n}\n\nfunction inflate(strm, flush) {\n  var state;\n  var input, output;          // input/output buffers\n  var next;                   /* next input INDEX */\n  var put;                    /* next output INDEX */\n  var have, left;             /* available input and output */\n  var hold;                   /* bit buffer */\n  var bits;                   /* bits in bit buffer */\n  var _in, _out;              /* save starting available input and output */\n  var copy;                   /* number of stored or match bytes to copy */\n  var from;                   /* where to copy match bytes from */\n  var from_source;\n  var here = 0;               /* current decoding table entry */\n  var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //var last;                   /* parent table entry */\n  var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  var len;                    /* length to copy for repeats, bits to drop */\n  var ret;                    /* return code */\n  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\n  var opts;\n\n  var n; // temporary var for NEED_BITS\n\n  var order = /* permutation of code lengths */\n    [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n    case HEAD:\n      if (state.wrap === 0) {\n        state.mode = TYPEDO;\n        break;\n      }\n      //=== NEEDBITS(16);\n      while (bits < 16) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n        state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n        //=== CRC2(state.check, hold);\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        state.check = crc32(state.check, hbuf, 2, 0);\n        //===//\n\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = FLAGS;\n        break;\n      }\n      state.flags = 0;           /* expect zlib header */\n      if (state.head) {\n        state.head.done = false;\n      }\n      if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n        strm.msg = 'incorrect header check';\n        state.mode = BAD;\n        break;\n      }\n      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n        strm.msg = 'unknown compression method';\n        state.mode = BAD;\n        break;\n      }\n      //--- DROPBITS(4) ---//\n      hold >>>= 4;\n      bits -= 4;\n      //---//\n      len = (hold & 0x0f)/*BITS(4)*/ + 8;\n      if (state.wbits === 0) {\n        state.wbits = len;\n      }\n      else if (len > state.wbits) {\n        strm.msg = 'invalid window size';\n        state.mode = BAD;\n        break;\n      }\n      state.dmax = 1 << len;\n      //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n      state.mode = hold & 0x200 ? DICTID : TYPE;\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      break;\n    case FLAGS:\n      //=== NEEDBITS(16); */\n      while (bits < 16) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      state.flags = hold;\n      if ((state.flags & 0xff) !== Z_DEFLATED) {\n        strm.msg = 'unknown compression method';\n        state.mode = BAD;\n        break;\n      }\n      if (state.flags & 0xe000) {\n        strm.msg = 'unknown header flags set';\n        state.mode = BAD;\n        break;\n      }\n      if (state.head) {\n        state.head.text = ((hold >> 8) & 1);\n      }\n      if (state.flags & 0x0200) {\n        //=== CRC2(state.check, hold);\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        state.check = crc32(state.check, hbuf, 2, 0);\n        //===//\n      }\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = TIME;\n      /* falls through */\n    case TIME:\n      //=== NEEDBITS(32); */\n      while (bits < 32) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if (state.head) {\n        state.head.time = hold;\n      }\n      if (state.flags & 0x0200) {\n        //=== CRC4(state.check, hold)\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        hbuf[2] = (hold >>> 16) & 0xff;\n        hbuf[3] = (hold >>> 24) & 0xff;\n        state.check = crc32(state.check, hbuf, 4, 0);\n        //===\n      }\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = OS;\n      /* falls through */\n    case OS:\n      //=== NEEDBITS(16); */\n      while (bits < 16) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if (state.head) {\n        state.head.xflags = (hold & 0xff);\n        state.head.os = (hold >> 8);\n      }\n      if (state.flags & 0x0200) {\n        //=== CRC2(state.check, hold);\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        state.check = crc32(state.check, hbuf, 2, 0);\n        //===//\n      }\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = EXLEN;\n      /* falls through */\n    case EXLEN:\n      if (state.flags & 0x0400) {\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.length = hold;\n        if (state.head) {\n          state.head.extra_len = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n      }\n      else if (state.head) {\n        state.head.extra = null/*Z_NULL*/;\n      }\n      state.mode = EXTRA;\n      /* falls through */\n    case EXTRA:\n      if (state.flags & 0x0400) {\n        copy = state.length;\n        if (copy > have) { copy = have; }\n        if (copy) {\n          if (state.head) {\n            len = state.head.extra_len - state.length;\n            if (!state.head.extra) {\n              // Use untyped array for more conveniend processing later\n              state.head.extra = new Array(state.head.extra_len);\n            }\n            utils.arraySet(\n              state.head.extra,\n              input,\n              next,\n              // extra field is limited to 65536 bytes\n              // - no need for additional size check\n              copy,\n              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n              len\n            );\n            //zmemcpy(state.head.extra + len, next,\n            //        len + copy > state.head.extra_max ?\n            //        state.head.extra_max - len : copy);\n          }\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          state.length -= copy;\n        }\n        if (state.length) { break inf_leave; }\n      }\n      state.length = 0;\n      state.mode = NAME;\n      /* falls through */\n    case NAME:\n      if (state.flags & 0x0800) {\n        if (have === 0) { break inf_leave; }\n        copy = 0;\n        do {\n          // TODO: 2 or 1 bytes?\n          len = input[next + copy++];\n          /* use constant limit because in js we should not preallocate memory */\n          if (state.head && len &&\n              (state.length < 65536 /*state.head.name_max*/)) {\n            state.head.name += String.fromCharCode(len);\n          }\n        } while (len && copy < have);\n\n        if (state.flags & 0x0200) {\n          state.check = crc32(state.check, input, copy, next);\n        }\n        have -= copy;\n        next += copy;\n        if (len) { break inf_leave; }\n      }\n      else if (state.head) {\n        state.head.name = null;\n      }\n      state.length = 0;\n      state.mode = COMMENT;\n      /* falls through */\n    case COMMENT:\n      if (state.flags & 0x1000) {\n        if (have === 0) { break inf_leave; }\n        copy = 0;\n        do {\n          len = input[next + copy++];\n          /* use constant limit because in js we should not preallocate memory */\n          if (state.head && len &&\n              (state.length < 65536 /*state.head.comm_max*/)) {\n            state.head.comment += String.fromCharCode(len);\n          }\n        } while (len && copy < have);\n        if (state.flags & 0x0200) {\n          state.check = crc32(state.check, input, copy, next);\n        }\n        have -= copy;\n        next += copy;\n        if (len) { break inf_leave; }\n      }\n      else if (state.head) {\n        state.head.comment = null;\n      }\n      state.mode = HCRC;\n      /* falls through */\n    case HCRC:\n      if (state.flags & 0x0200) {\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (hold !== (state.check & 0xffff)) {\n          strm.msg = 'header crc mismatch';\n          state.mode = BAD;\n          break;\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n      }\n      if (state.head) {\n        state.head.hcrc = ((state.flags >> 9) & 1);\n        state.head.done = true;\n      }\n      strm.adler = state.check = 0 /*crc32(0L, Z_NULL, 0)*/;\n      state.mode = TYPE;\n      break;\n    case DICTID:\n      //=== NEEDBITS(32); */\n      while (bits < 32) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      strm.adler = state.check = ZSWAP32(hold);\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = DICT;\n      /* falls through */\n    case DICT:\n      if (state.havedict === 0) {\n        //--- RESTORE() ---\n        strm.next_out = put;\n        strm.avail_out = left;\n        strm.next_in = next;\n        strm.avail_in = have;\n        state.hold = hold;\n        state.bits = bits;\n        //---\n        return Z_NEED_DICT;\n      }\n      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n      state.mode = TYPE;\n      /* falls through */\n    case TYPE:\n      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n      /* falls through */\n    case TYPEDO:\n      if (state.last) {\n        //--- BYTEBITS() ---//\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        state.mode = CHECK;\n        break;\n      }\n      //=== NEEDBITS(3); */\n      while (bits < 3) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      state.last = (hold & 0x01)/*BITS(1)*/;\n      //--- DROPBITS(1) ---//\n      hold >>>= 1;\n      bits -= 1;\n      //---//\n\n      switch ((hold & 0x03)/*BITS(2)*/) {\n      case 0:                             /* stored block */\n        //Tracev((stderr, \"inflate:     stored block%s\\n\",\n        //        state.last ? \" (last)\" : \"\"));\n        state.mode = STORED;\n        break;\n      case 1:                             /* fixed block */\n        fixedtables(state);\n        //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n        //        state.last ? \" (last)\" : \"\"));\n        state.mode = LEN_;             /* decode codes */\n        if (flush === Z_TREES) {\n          //--- DROPBITS(2) ---//\n          hold >>>= 2;\n          bits -= 2;\n          //---//\n          break inf_leave;\n        }\n        break;\n      case 2:                             /* dynamic block */\n        //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n        //        state.last ? \" (last)\" : \"\"));\n        state.mode = TABLE;\n        break;\n      case 3:\n        strm.msg = 'invalid block type';\n        state.mode = BAD;\n      }\n      //--- DROPBITS(2) ---//\n      hold >>>= 2;\n      bits -= 2;\n      //---//\n      break;\n    case STORED:\n      //--- BYTEBITS() ---// /* go to byte boundary */\n      hold >>>= bits & 7;\n      bits -= bits & 7;\n      //---//\n      //=== NEEDBITS(32); */\n      while (bits < 32) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n        strm.msg = 'invalid stored block lengths';\n        state.mode = BAD;\n        break;\n      }\n      state.length = hold & 0xffff;\n      //Tracev((stderr, \"inflate:       stored length %u\\n\",\n      //        state.length));\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = COPY_;\n      if (flush === Z_TREES) { break inf_leave; }\n      /* falls through */\n    case COPY_:\n      state.mode = COPY;\n      /* falls through */\n    case COPY:\n      copy = state.length;\n      if (copy) {\n        if (copy > have) { copy = have; }\n        if (copy > left) { copy = left; }\n        if (copy === 0) { break inf_leave; }\n        //--- zmemcpy(put, next, copy); ---\n        utils.arraySet(output, input, next, copy, put);\n        //---//\n        have -= copy;\n        next += copy;\n        left -= copy;\n        put += copy;\n        state.length -= copy;\n        break;\n      }\n      //Tracev((stderr, \"inflate:       stored end\\n\"));\n      state.mode = TYPE;\n      break;\n    case TABLE:\n      //=== NEEDBITS(14); */\n      while (bits < 14) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n      //--- DROPBITS(5) ---//\n      hold >>>= 5;\n      bits -= 5;\n      //---//\n      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n      //--- DROPBITS(5) ---//\n      hold >>>= 5;\n      bits -= 5;\n      //---//\n      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n      //--- DROPBITS(4) ---//\n      hold >>>= 4;\n      bits -= 4;\n      //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n      if (state.nlen > 286 || state.ndist > 30) {\n        strm.msg = 'too many length or distance symbols';\n        state.mode = BAD;\n        break;\n      }\n//#endif\n      //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n      state.have = 0;\n      state.mode = LENLENS;\n      /* falls through */\n    case LENLENS:\n      while (state.have < state.ncode) {\n        //=== NEEDBITS(3);\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n        //--- DROPBITS(3) ---//\n        hold >>>= 3;\n        bits -= 3;\n        //---//\n      }\n      while (state.have < 19) {\n        state.lens[order[state.have++]] = 0;\n      }\n      // We have separate tables & no pointers. 2 commented lines below not needed.\n      //state.next = state.codes;\n      //state.lencode = state.next;\n      // Switch to use dynamic table\n      state.lencode = state.lendyn;\n      state.lenbits = 7;\n\n      opts = {bits: state.lenbits};\n      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n      state.lenbits = opts.bits;\n\n      if (ret) {\n        strm.msg = 'invalid code lengths set';\n        state.mode = BAD;\n        break;\n      }\n      //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n      state.have = 0;\n      state.mode = CODELENS;\n      /* falls through */\n    case CODELENS:\n      while (state.have < state.nlen + state.ndist) {\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_val < 16) {\n          //--- DROPBITS(here.bits) ---//\n          hold >>>= here_bits;\n          bits -= here_bits;\n          //---//\n          state.lens[state.have++] = here_val;\n        }\n        else {\n          if (here_val === 16) {\n            //=== NEEDBITS(here.bits + 2);\n            n = here_bits + 2;\n            while (bits < n) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            if (state.have === 0) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            len = state.lens[state.have - 1];\n            copy = 3 + (hold & 0x03);//BITS(2);\n            //--- DROPBITS(2) ---//\n            hold >>>= 2;\n            bits -= 2;\n            //---//\n          }\n          else if (here_val === 17) {\n            //=== NEEDBITS(here.bits + 3);\n            n = here_bits + 3;\n            while (bits < n) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            len = 0;\n            copy = 3 + (hold & 0x07);//BITS(3);\n            //--- DROPBITS(3) ---//\n            hold >>>= 3;\n            bits -= 3;\n            //---//\n          }\n          else {\n            //=== NEEDBITS(here.bits + 7);\n            n = here_bits + 7;\n            while (bits < n) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            len = 0;\n            copy = 11 + (hold & 0x7f);//BITS(7);\n            //--- DROPBITS(7) ---//\n            hold >>>= 7;\n            bits -= 7;\n            //---//\n          }\n          if (state.have + copy > state.nlen + state.ndist) {\n            strm.msg = 'invalid bit length repeat';\n            state.mode = BAD;\n            break;\n          }\n          while (copy--) {\n            state.lens[state.have++] = len;\n          }\n        }\n      }\n\n      /* handle error breaks in while */\n      if (state.mode === BAD) { break; }\n\n      /* check for end-of-block code (better have one) */\n      if (state.lens[256] === 0) {\n        strm.msg = 'invalid code -- missing end-of-block';\n        state.mode = BAD;\n        break;\n      }\n\n      /* build code tables -- note: do not change the lenbits or distbits\n         values here (9 and 6) without reading the comments in inftrees.h\n         concerning the ENOUGH constants, which depend on those values */\n      state.lenbits = 9;\n\n      opts = {bits: state.lenbits};\n      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n      // We have separate tables & no pointers. 2 commented lines below not needed.\n      // state.next_index = opts.table_index;\n      state.lenbits = opts.bits;\n      // state.lencode = state.next;\n\n      if (ret) {\n        strm.msg = 'invalid literal/lengths set';\n        state.mode = BAD;\n        break;\n      }\n\n      state.distbits = 6;\n      //state.distcode.copy(state.codes);\n      // Switch to use dynamic table\n      state.distcode = state.distdyn;\n      opts = {bits: state.distbits};\n      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n      // We have separate tables & no pointers. 2 commented lines below not needed.\n      // state.next_index = opts.table_index;\n      state.distbits = opts.bits;\n      // state.distcode = state.next;\n\n      if (ret) {\n        strm.msg = 'invalid distances set';\n        state.mode = BAD;\n        break;\n      }\n      //Tracev((stderr, 'inflate:       codes ok\\n'));\n      state.mode = LEN_;\n      if (flush === Z_TREES) { break inf_leave; }\n      /* falls through */\n    case LEN_:\n      state.mode = LEN;\n      /* falls through */\n    case LEN:\n      if (have >= 6 && left >= 258) {\n        //--- RESTORE() ---\n        strm.next_out = put;\n        strm.avail_out = left;\n        strm.next_in = next;\n        strm.avail_in = have;\n        state.hold = hold;\n        state.bits = bits;\n        //---\n        inflate_fast(strm, _out);\n        //--- LOAD() ---\n        put = strm.next_out;\n        output = strm.output;\n        left = strm.avail_out;\n        next = strm.next_in;\n        input = strm.input;\n        have = strm.avail_in;\n        hold = state.hold;\n        bits = state.bits;\n        //---\n\n        if (state.mode === TYPE) {\n          state.back = -1;\n        }\n        break;\n      }\n      state.back = 0;\n      for (;;) {\n        here = state.lencode[hold & ((1 << state.lenbits) -1)];  /*BITS(state.lenbits)*/\n        here_bits = here >>> 24;\n        here_op = (here >>> 16) & 0xff;\n        here_val = here & 0xffff;\n\n        if (here_bits <= bits) { break; }\n        //--- PULLBYTE() ---//\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n        //---//\n      }\n      if (here_op && (here_op & 0xf0) === 0) {\n        last_bits = here_bits;\n        last_op = here_op;\n        last_val = here_val;\n        for (;;) {\n          here = state.lencode[last_val +\n                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((last_bits + here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        //--- DROPBITS(last.bits) ---//\n        hold >>>= last_bits;\n        bits -= last_bits;\n        //---//\n        state.back += last_bits;\n      }\n      //--- DROPBITS(here.bits) ---//\n      hold >>>= here_bits;\n      bits -= here_bits;\n      //---//\n      state.back += here_bits;\n      state.length = here_val;\n      if (here_op === 0) {\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        state.mode = LIT;\n        break;\n      }\n      if (here_op & 32) {\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.back = -1;\n        state.mode = TYPE;\n        break;\n      }\n      if (here_op & 64) {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break;\n      }\n      state.extra = here_op & 15;\n      state.mode = LENEXT;\n      /* falls through */\n    case LENEXT:\n      if (state.extra) {\n        //=== NEEDBITS(state.extra);\n        n = state.extra;\n        while (bits < n) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.length += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;\n        //--- DROPBITS(state.extra) ---//\n        hold >>>= state.extra;\n        bits -= state.extra;\n        //---//\n        state.back += state.extra;\n      }\n      //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n      state.was = state.length;\n      state.mode = DIST;\n      /* falls through */\n    case DIST:\n      for (;;) {\n        here = state.distcode[hold & ((1 << state.distbits) -1)];/*BITS(state.distbits)*/\n        here_bits = here >>> 24;\n        here_op = (here >>> 16) & 0xff;\n        here_val = here & 0xffff;\n\n        if ((here_bits) <= bits) { break; }\n        //--- PULLBYTE() ---//\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n        //---//\n      }\n      if ((here_op & 0xf0) === 0) {\n        last_bits = here_bits;\n        last_op = here_op;\n        last_val = here_val;\n        for (;;) {\n          here = state.distcode[last_val +\n                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((last_bits + here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        //--- DROPBITS(last.bits) ---//\n        hold >>>= last_bits;\n        bits -= last_bits;\n        //---//\n        state.back += last_bits;\n      }\n      //--- DROPBITS(here.bits) ---//\n      hold >>>= here_bits;\n      bits -= here_bits;\n      //---//\n      state.back += here_bits;\n      if (here_op & 64) {\n        strm.msg = 'invalid distance code';\n        state.mode = BAD;\n        break;\n      }\n      state.offset = here_val;\n      state.extra = (here_op) & 15;\n      state.mode = DISTEXT;\n      /* falls through */\n    case DISTEXT:\n      if (state.extra) {\n        //=== NEEDBITS(state.extra);\n        n = state.extra;\n        while (bits < n) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.offset += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;\n        //--- DROPBITS(state.extra) ---//\n        hold >>>= state.extra;\n        bits -= state.extra;\n        //---//\n        state.back += state.extra;\n      }\n//#ifdef INFLATE_STRICT\n      if (state.offset > state.dmax) {\n        strm.msg = 'invalid distance too far back';\n        state.mode = BAD;\n        break;\n      }\n//#endif\n      //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n      state.mode = MATCH;\n      /* falls through */\n    case MATCH:\n      if (left === 0) { break inf_leave; }\n      copy = _out - left;\n      if (state.offset > copy) {         /* copy from window */\n        copy = state.offset - copy;\n        if (copy > state.whave) {\n          if (state.sane) {\n            strm.msg = 'invalid distance too far back';\n            state.mode = BAD;\n            break;\n          }\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n        }\n        if (copy > state.wnext) {\n          copy -= state.wnext;\n          from = state.wsize - copy;\n        }\n        else {\n          from = state.wnext - copy;\n        }\n        if (copy > state.length) { copy = state.length; }\n        from_source = state.window;\n      }\n      else {                              /* copy from output */\n        from_source = output;\n        from = put - state.offset;\n        copy = state.length;\n      }\n      if (copy > left) { copy = left; }\n      left -= copy;\n      state.length -= copy;\n      do {\n        output[put++] = from_source[from++];\n      } while (--copy);\n      if (state.length === 0) { state.mode = LEN; }\n      break;\n    case LIT:\n      if (left === 0) { break inf_leave; }\n      output[put++] = state.length;\n      left--;\n      state.mode = LEN;\n      break;\n    case CHECK:\n      if (state.wrap) {\n        //=== NEEDBITS(32);\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          // Use '|' insdead of '+' to make sure that result is signed\n          hold |= input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        _out -= left;\n        strm.total_out += _out;\n        state.total += _out;\n        if (_out) {\n          strm.adler = state.check =\n              /*UPDATE(state.check, put - _out, _out);*/\n              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n        }\n        _out = left;\n        // NB: crc32 stored as signed 32-bit int, ZSWAP32 returns signed too\n        if ((state.flags ? hold : ZSWAP32(hold)) !== state.check) {\n          strm.msg = 'incorrect data check';\n          state.mode = BAD;\n          break;\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n      }\n      state.mode = LENGTH;\n      /* falls through */\n    case LENGTH:\n      if (state.wrap && state.flags) {\n        //=== NEEDBITS(32);\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (hold !== (state.total & 0xffffffff)) {\n          strm.msg = 'incorrect length check';\n          state.mode = BAD;\n          break;\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n      }\n      state.mode = DONE;\n      /* falls through */\n    case DONE:\n      ret = Z_STREAM_END;\n      break inf_leave;\n    case BAD:\n      ret = Z_DATA_ERROR;\n      break inf_leave;\n    case MEM:\n      return Z_MEM_ERROR;\n    case SYNC:\n      /* falls through */\n    default:\n      return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n}\n\nfunction inflateEnd(strm) {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  var state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n}\n\nfunction inflateGetHeader(strm, head) {\n  var state;\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n}\n\n\nexports.inflateReset = inflateReset;\nexports.inflateReset2 = inflateReset2;\nexports.inflateResetKeep = inflateResetKeep;\nexports.inflateInit = inflateInit;\nexports.inflateInit2 = inflateInit2;\nexports.inflate = inflate;\nexports.inflateEnd = inflateEnd;\nexports.inflateGetHeader = inflateGetHeader;\nexports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nexports.inflateCopy = inflateCopy;\nexports.inflateGetDictionary = inflateGetDictionary;\nexports.inflateMark = inflateMark;\nexports.inflatePrime = inflatePrime;\nexports.inflateSetDictionary = inflateSetDictionary;\nexports.inflateSync = inflateSync;\nexports.inflateSyncPoint = inflateSyncPoint;\nexports.inflateUndermine = inflateUndermine;\n*/\n},{\"../utils/common\":27,\"./adler32\":29,\"./crc32\":31,\"./inffast\":34,\"./inftrees\":36}],36:[function(_dereq_,module,exports){\n'use strict';\n\n\nvar utils = _dereq_('../utils/common');\n\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\nvar lbase = [ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n];\n\nvar lext = [ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n];\n\nvar dbase = [ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n];\n\nvar dext = [ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n];\n\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n{\n  var bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  var len = 0;               /* a code's length in bits */\n  var sym = 0;               /* index of code symbols */\n  var min = 0, max = 0;          /* minimum and maximum code lengths */\n  var root = 0;              /* number of index bits for root table */\n  var curr = 0;              /* number of index bits for current table */\n  var drop = 0;              /* code bits to drop for sub-table */\n  var left = 0;                   /* number of prefix codes available */\n  var used = 0;              /* code entries in table used */\n  var huff = 0;              /* Huffman code */\n  var incr;              /* for incrementing code, index */\n  var fill;              /* index for replicating entries */\n  var low;               /* low bits for current root entry */\n  var mask;              /* mask for low root bits */\n  var next;             /* next available space in table */\n  var base = null;     /* base value table to use */\n  var base_index = 0;\n//  var shoextra;    /* extra bits table to use */\n  var end;                    /* use base and extra for symbol > end */\n  var count = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];    /* number of codes of each length */\n  var offs = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];     /* offsets in table for each length */\n  var extra = null;\n  var extra_index = 0;\n\n  var here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n      base = extra = work;    /* dummy value--not used */\n      end = 19;\n  } else if (type === LENS) {\n      base = lbase;\n      base_index -= 257;\n      extra = lext;\n      extra_index -= 257;\n      end = 256;\n  } else {                    /* DISTS */\n      base = dbase;\n      extra = dext;\n      end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  var i=0;\n  /* process all codes and make table entries */\n  for (;;) {\n    i++;\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n},{\"../utils/common\":27}],37:[function(_dereq_,module,exports){\n'use strict';\n\nmodule.exports = {\n  '2':    'need dictionary',     /* Z_NEED_DICT       2  */\n  '1':    'stream end',          /* Z_STREAM_END      1  */\n  '0':    '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n},{}],38:[function(_dereq_,module,exports){\n'use strict';\n\n\nvar utils = _dereq_('../utils/common');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2*L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES+2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH-MIN_MATCH+1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nvar StaticTreeDesc = function (static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n};\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nvar TreeDesc = function(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n};\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short (s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c*2]/*.Code*/, tree[c*2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max]*2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max+1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n*2 +1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n*2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n-base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n*2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length-1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits+1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m*2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m*2 + 1]/*.Len*/)*tree[m*2]/*.Freq*/;\n        tree[m*2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS+1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits-1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n*2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n*2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS+1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES-1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1<<extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length-1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0 ; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1<<extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for ( ; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n*2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n*2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n*2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n*2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES+1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n*2 + 1]/*.Len*/ = 5;\n    static_dtree[n*2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS+1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc =new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n*2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n*2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n*2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK*2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n*2;\n  var _m2 = m*2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j+1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx*2] << 8) | (s.pending_buf[s.d_buf + lx*2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code+LITERALS+1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n*2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node*2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n*2 + 1]/*.Dad*/ = tree[m*2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code+1)*2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n+1)*2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6*2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10*2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138*2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n+1)*2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count-3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count-3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count-11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex]*2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3*(max_blindex+1) + 5+5+4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes-1,   5);\n  send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank]*2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes-1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes-1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n*2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK<<1)+(last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES<<1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len+3+7) >>> 3;\n    static_lenb = (s.static_len+3+7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len+4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES<<1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES<<1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code+1, s.d_desc.max_code+1, max_blindex+1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc*2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc]+LITERALS+1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize-1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n},{\"../utils/common\":27}],39:[function(_dereq_,module,exports){\n'use strict';\n\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n},{}]},{},[9])\n(9)\n}));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xlsx/jszip.js\n");

/***/ }),

/***/ "./node_modules/xlsx/xlsx.js":
/*!***********************************!*\
  !*** ./node_modules/xlsx/xlsx.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, Buffer, process) {/*! xlsx.js (C) 2013-present SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*exported XLSX */\n/*global global, exports, module, require:false, process:false, Buffer:false, ArrayBuffer:false */\nvar XLSX = {};\nfunction make_xlsx_lib(XLSX){\nXLSX.version = '0.17.4';\nvar current_codepage = 1200, current_ansi = 1252;\n/*global cptable:true, window */\nif(true) {\n\tif(typeof cptable === 'undefined') {\n\t\tif(typeof global !== 'undefined') global.cptable = __webpack_require__(/*! ./dist/cpexcel.js */ \"./node_modules/xlsx/dist/cpexcel.js\");\n\t\telse if(typeof window !== 'undefined') window.cptable = __webpack_require__(/*! ./dist/cpexcel.js */ \"./node_modules/xlsx/dist/cpexcel.js\");\n\t}\n}\n\nvar VALID_ANSI = [ 874, 932, 936, 949, 950 ];\nfor(var i = 0; i <= 8; ++i) VALID_ANSI.push(1250 + i);\n/* ECMA-376 Part I 18.4.1 charset to codepage mapping */\nvar CS2CP = ({\n0:    1252, /* ANSI */\n1:   65001, /* DEFAULT */\n2:   65001, /* SYMBOL */\n77:  10000, /* MAC */\n128:   932, /* SHIFTJIS */\n129:   949, /* HANGUL */\n130:  1361, /* JOHAB */\n134:   936, /* GB2312 */\n136:   950, /* CHINESEBIG5 */\n161:  1253, /* GREEK */\n162:  1254, /* TURKISH */\n163:  1258, /* VIETNAMESE */\n177:  1255, /* HEBREW */\n178:  1256, /* ARABIC */\n186:  1257, /* BALTIC */\n204:  1251, /* RUSSIAN */\n222:   874, /* THAI */\n238:  1250, /* EASTEUROPE */\n255:  1252, /* OEM */\n69:   6969  /* MISC */\n});\n\nvar set_ansi = function(cp) { if(VALID_ANSI.indexOf(cp) == -1) return; current_ansi = CS2CP[0] = cp; };\nfunction reset_ansi() { set_ansi(1252); }\n\nvar set_cp = function(cp) { current_codepage = cp; set_ansi(cp); };\nfunction reset_cp() { set_cp(1200); reset_ansi(); }\n\nfunction char_codes(data) { var o = []; for(var i = 0, len = data.length; i < len; ++i) o[i] = data.charCodeAt(i); return o; }\n\nfunction utf16leread(data) {\n\tvar o = [];\n\tfor(var i = 0; i < (data.length>>1); ++i) o[i] = String.fromCharCode(data.charCodeAt(2*i) + (data.charCodeAt(2*i+1)<<8));\n\treturn o.join(\"\");\n}\nfunction utf16beread(data) {\n\tvar o = [];\n\tfor(var i = 0; i < (data.length>>1); ++i) o[i] = String.fromCharCode(data.charCodeAt(2*i+1) + (data.charCodeAt(2*i)<<8));\n\treturn o.join(\"\");\n}\n\nvar debom = function(data) {\n\tvar c1 = data.charCodeAt(0), c2 = data.charCodeAt(1);\n\tif(c1 == 0xFF && c2 == 0xFE) return utf16leread(data.slice(2));\n\tif(c1 == 0xFE && c2 == 0xFF) return utf16beread(data.slice(2));\n\tif(c1 == 0xFEFF) return data.slice(1);\n\treturn data;\n};\n\nvar _getchar = function _gc1(x) { return String.fromCharCode(x); };\nvar _getansi = function _ga1(x) { return String.fromCharCode(x); };\nif(typeof cptable !== 'undefined') {\n\tset_cp = function(cp) { current_codepage = cp; set_ansi(cp); };\n\tdebom = function(data) {\n\t\tif(data.charCodeAt(0) === 0xFF && data.charCodeAt(1) === 0xFE) { return cptable.utils.decode(1200, char_codes(data.slice(2))); }\n\t\treturn data;\n\t};\n\t_getchar = function _gc2(x) {\n\t\tif(current_codepage === 1200) return String.fromCharCode(x);\n\t\treturn cptable.utils.decode(current_codepage, [x&255,x>>8])[0];\n\t};\n\t_getansi = function _ga2(x) {\n\t\treturn cptable.utils.decode(current_ansi, [x])[0];\n\t};\n}\nvar DENSE = null;\nvar DIF_XL = true;\nvar Base64 = (function make_b64(){\n\tvar map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\treturn {\n\t\tencode: function(input) {\n\t\t\tvar o = \"\";\n\t\t\tvar c1=0, c2=0, c3=0, e1=0, e2=0, e3=0, e4=0;\n\t\t\tfor(var i = 0; i < input.length; ) {\n\t\t\t\tc1 = input.charCodeAt(i++);\n\t\t\t\te1 = (c1 >> 2);\n\n\t\t\t\tc2 = input.charCodeAt(i++);\n\t\t\t\te2 = ((c1 & 3) << 4) | (c2 >> 4);\n\n\t\t\t\tc3 = input.charCodeAt(i++);\n\t\t\t\te3 = ((c2 & 15) << 2) | (c3 >> 6);\n\t\t\t\te4 = (c3 & 63);\n\t\t\t\tif (isNaN(c2)) { e3 = e4 = 64; }\n\t\t\t\telse if (isNaN(c3)) { e4 = 64; }\n\t\t\t\to += map.charAt(e1) + map.charAt(e2) + map.charAt(e3) + map.charAt(e4);\n\t\t\t}\n\t\t\treturn o;\n\t\t},\n\t\tdecode: function b64_decode(input) {\n\t\t\tvar o = \"\";\n\t\t\tvar c1=0, c2=0, c3=0, e1=0, e2=0, e3=0, e4=0;\n\t\t\tinput = input.replace(/[^\\w\\+\\/\\=]/g, \"\");\n\t\t\tfor(var i = 0; i < input.length;) {\n\t\t\t\te1 = map.indexOf(input.charAt(i++));\n\t\t\t\te2 = map.indexOf(input.charAt(i++));\n\t\t\t\tc1 = (e1 << 2) | (e2 >> 4);\n\t\t\t\to += String.fromCharCode(c1);\n\n\t\t\t\te3 = map.indexOf(input.charAt(i++));\n\t\t\t\tc2 = ((e2 & 15) << 4) | (e3 >> 2);\n\t\t\t\tif (e3 !== 64) { o += String.fromCharCode(c2); }\n\n\t\t\t\te4 = map.indexOf(input.charAt(i++));\n\t\t\t\tc3 = ((e3 & 3) << 6) | e4;\n\t\t\t\tif (e4 !== 64) { o += String.fromCharCode(c3); }\n\t\t\t}\n\t\t\treturn o;\n\t\t}\n\t};\n})();\nvar has_buf = (typeof Buffer !== 'undefined' && typeof process !== 'undefined' && typeof process.versions !== 'undefined' && !!process.versions.node);\n\nvar Buffer_from = function(){};\n\nif(typeof Buffer !== 'undefined') {\n\tvar nbfs = !Buffer.from;\n\tif(!nbfs) try { Buffer.from(\"foo\", \"utf8\"); } catch(e) { nbfs = true; }\n\tBuffer_from = nbfs ? function(buf, enc) { return (enc) ? new Buffer(buf, enc) : new Buffer(buf); } : Buffer.from.bind(Buffer);\n\t// $FlowIgnore\n\tif(!Buffer.alloc) Buffer.alloc = function(n) { return new Buffer(n); };\n\t// $FlowIgnore\n\tif(!Buffer.allocUnsafe) Buffer.allocUnsafe = function(n) { return new Buffer(n); };\n}\n\nfunction new_raw_buf(len) {\n\t/* jshint -W056 */\n\treturn has_buf ? Buffer.alloc(len) : new Array(len);\n\t/* jshint +W056 */\n}\n\nfunction new_unsafe_buf(len) {\n\t/* jshint -W056 */\n\treturn has_buf ? Buffer.allocUnsafe(len) : new Array(len);\n\t/* jshint +W056 */\n}\n\nvar s2a = function s2a(s) {\n\tif(has_buf) return Buffer_from(s, \"binary\");\n\treturn s.split(\"\").map(function(x){ return x.charCodeAt(0) & 0xff; });\n};\n\nfunction s2ab(s) {\n\tif(typeof ArrayBuffer === 'undefined') return s2a(s);\n\tvar buf = new ArrayBuffer(s.length), view = new Uint8Array(buf);\n\tfor (var i=0; i!=s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;\n\treturn buf;\n}\n\nfunction a2s(data) {\n\tif(Array.isArray(data)) return data.map(function(c) { return String.fromCharCode(c); }).join(\"\");\n\tvar o = []; for(var i = 0; i < data.length; ++i) o[i] = String.fromCharCode(data[i]); return o.join(\"\");\n}\n\nfunction a2u(data) {\n\tif(typeof Uint8Array === 'undefined') throw new Error(\"Unsupported\");\n\treturn new Uint8Array(data);\n}\n\nfunction ab2a(data) {\n\tif(typeof ArrayBuffer == 'undefined') throw new Error(\"Unsupported\");\n\tif(data instanceof ArrayBuffer) return ab2a(new Uint8Array(data));\nvar o = new Array(data.length);\n\tfor(var i = 0; i < data.length; ++i) o[i] = data[i];\n\treturn o;\n}\n\nvar bconcat = function(bufs) { return [].concat.apply([], bufs); };\n\nvar chr0 = /\\u0000/g, chr1 = /[\\u0001-\\u0006]/g;\n/* ssf.js (C) 2013-present SheetJS -- http://sheetjs.com */\n/*jshint -W041 */\nvar SSF = ({});\nvar make_ssf = function make_ssf(SSF){\nSSF.version = '0.11.2';\nfunction _strrev(x) { var o = \"\", i = x.length-1; while(i>=0) o += x.charAt(i--); return o; }\nfunction fill(c,l) { var o = \"\"; while(o.length < l) o+=c; return o; }\nfunction pad0(v,d){var t=\"\"+v; return t.length>=d?t:fill('0',d-t.length)+t;}\nfunction pad_(v,d){var t=\"\"+v;return t.length>=d?t:fill(' ',d-t.length)+t;}\nfunction rpad_(v,d){var t=\"\"+v; return t.length>=d?t:t+fill(' ',d-t.length);}\nfunction pad0r1(v,d){var t=\"\"+Math.round(v); return t.length>=d?t:fill('0',d-t.length)+t;}\nfunction pad0r2(v,d){var t=\"\"+v; return t.length>=d?t:fill('0',d-t.length)+t;}\nvar p2_32 = Math.pow(2,32);\nfunction pad0r(v,d){if(v>p2_32||v<-p2_32) return pad0r1(v,d); var i = Math.round(v); return pad0r2(i,d); }\nfunction isgeneral(s, i) { i = i || 0; return s.length >= 7 + i && (s.charCodeAt(i)|32) === 103 && (s.charCodeAt(i+1)|32) === 101 && (s.charCodeAt(i+2)|32) === 110 && (s.charCodeAt(i+3)|32) === 101 && (s.charCodeAt(i+4)|32) === 114 && (s.charCodeAt(i+5)|32) === 97 && (s.charCodeAt(i+6)|32) === 108; }\nvar days = [\n\t['Sun', 'Sunday'],\n\t['Mon', 'Monday'],\n\t['Tue', 'Tuesday'],\n\t['Wed', 'Wednesday'],\n\t['Thu', 'Thursday'],\n\t['Fri', 'Friday'],\n\t['Sat', 'Saturday']\n];\nvar months = [\n\t['J', 'Jan', 'January'],\n\t['F', 'Feb', 'February'],\n\t['M', 'Mar', 'March'],\n\t['A', 'Apr', 'April'],\n\t['M', 'May', 'May'],\n\t['J', 'Jun', 'June'],\n\t['J', 'Jul', 'July'],\n\t['A', 'Aug', 'August'],\n\t['S', 'Sep', 'September'],\n\t['O', 'Oct', 'October'],\n\t['N', 'Nov', 'November'],\n\t['D', 'Dec', 'December']\n];\nfunction init_table(t) {\n\tt[0]=  'General';\n\tt[1]=  '0';\n\tt[2]=  '0.00';\n\tt[3]=  '#,##0';\n\tt[4]=  '#,##0.00';\n\tt[9]=  '0%';\n\tt[10]= '0.00%';\n\tt[11]= '0.00E+00';\n\tt[12]= '# ?/?';\n\tt[13]= '# ??/??';\n\tt[14]= 'm/d/yy';\n\tt[15]= 'd-mmm-yy';\n\tt[16]= 'd-mmm';\n\tt[17]= 'mmm-yy';\n\tt[18]= 'h:mm AM/PM';\n\tt[19]= 'h:mm:ss AM/PM';\n\tt[20]= 'h:mm';\n\tt[21]= 'h:mm:ss';\n\tt[22]= 'm/d/yy h:mm';\n\tt[37]= '#,##0 ;(#,##0)';\n\tt[38]= '#,##0 ;[Red](#,##0)';\n\tt[39]= '#,##0.00;(#,##0.00)';\n\tt[40]= '#,##0.00;[Red](#,##0.00)';\n\tt[45]= 'mm:ss';\n\tt[46]= '[h]:mm:ss';\n\tt[47]= 'mmss.0';\n\tt[48]= '##0.0E+0';\n\tt[49]= '@';\n\tt[56]= '\"上午/下午 \"hh\"時\"mm\"分\"ss\"秒 \"';\n}\n\nvar table_fmt = {};\ninit_table(table_fmt);\n/* Defaults determined by systematically testing in Excel 2019 */\n\n/* These formats appear to default to other formats in the table */\nvar default_map = [];\nvar defi = 0;\n\n//  5 -> 37 ...  8 -> 40\nfor(defi = 5; defi <= 8; ++defi) default_map[defi] = 32 + defi;\n\n// 23 ->  0 ... 26 ->  0\nfor(defi = 23; defi <= 26; ++defi) default_map[defi] = 0;\n\n// 27 -> 14 ... 31 -> 14\nfor(defi = 27; defi <= 31; ++defi) default_map[defi] = 14;\n// 50 -> 14 ... 58 -> 14\nfor(defi = 50; defi <= 58; ++defi) default_map[defi] = 14;\n\n// 59 ->  1 ... 62 ->  4\nfor(defi = 59; defi <= 62; ++defi) default_map[defi] = defi - 58;\n// 67 ->  9 ... 68 -> 10\nfor(defi = 67; defi <= 68; ++defi) default_map[defi] = defi - 58;\n// 72 -> 14 ... 75 -> 17\nfor(defi = 72; defi <= 75; ++defi) default_map[defi] = defi - 58;\n\n// 69 -> 12 ... 71 -> 14\nfor(defi = 67; defi <= 68; ++defi) default_map[defi] = defi - 57;\n\n// 76 -> 20 ... 78 -> 22\nfor(defi = 76; defi <= 78; ++defi) default_map[defi] = defi - 56;\n\n// 79 -> 45 ... 81 -> 47\nfor(defi = 79; defi <= 81; ++defi) default_map[defi] = defi - 34;\n\n// 82 ->  0 ... 65536 -> 0 (omitted)\n\n/* These formats technically refer to Accounting formats with no equivalent */\nvar default_str = [];\n\n//  5 -- Currency,   0 decimal, black negative\ndefault_str[5] = default_str[63] = '\"$\"#,##0_);\\\\(\"$\"#,##0\\\\)';\n//  6 -- Currency,   0 decimal, red   negative\ndefault_str[6] = default_str[64] = '\"$\"#,##0_);[Red]\\\\(\"$\"#,##0\\\\)';\n//  7 -- Currency,   2 decimal, black negative\ndefault_str[7] = default_str[65] = '\"$\"#,##0.00_);\\\\(\"$\"#,##0.00\\\\)';\n//  8 -- Currency,   2 decimal, red   negative\ndefault_str[8] = default_str[66] = '\"$\"#,##0.00_);[Red]\\\\(\"$\"#,##0.00\\\\)';\n\n// 41 -- Accounting, 0 decimal, No Symbol\ndefault_str[41] = '_(* #,##0_);_(* \\\\(#,##0\\\\);_(* \"-\"_);_(@_)';\n// 42 -- Accounting, 0 decimal, $  Symbol\ndefault_str[42] = '_(\"$\"* #,##0_);_(\"$\"* \\\\(#,##0\\\\);_(\"$\"* \"-\"_);_(@_)';\n// 43 -- Accounting, 2 decimal, No Symbol\ndefault_str[43] = '_(* #,##0.00_);_(* \\\\(#,##0.00\\\\);_(* \"-\"??_);_(@_)';\n// 44 -- Accounting, 2 decimal, $  Symbol\ndefault_str[44] = '_(\"$\"* #,##0.00_);_(\"$\"* \\\\(#,##0.00\\\\);_(\"$\"* \"-\"??_);_(@_)';\nfunction frac(x, D, mixed) {\n\tvar sgn = x < 0 ? -1 : 1;\n\tvar B = x * sgn;\n\tvar P_2 = 0, P_1 = 1, P = 0;\n\tvar Q_2 = 1, Q_1 = 0, Q = 0;\n\tvar A = Math.floor(B);\n\twhile(Q_1 < D) {\n\t\tA = Math.floor(B);\n\t\tP = A * P_1 + P_2;\n\t\tQ = A * Q_1 + Q_2;\n\t\tif((B - A) < 0.00000005) break;\n\t\tB = 1 / (B - A);\n\t\tP_2 = P_1; P_1 = P;\n\t\tQ_2 = Q_1; Q_1 = Q;\n\t}\n\tif(Q > D) { if(Q_1 > D) { Q = Q_2; P = P_2; } else { Q = Q_1; P = P_1; } }\n\tif(!mixed) return [0, sgn * P, Q];\n\tvar q = Math.floor(sgn * P/Q);\n\treturn [q, sgn*P - q*Q, Q];\n}\nfunction parse_date_code(v,opts,b2) {\n\tif(v > 2958465 || v < 0) return null;\n\tvar date = (v|0), time = Math.floor(86400 * (v - date)), dow=0;\n\tvar dout=[];\n\tvar out={D:date, T:time, u:86400*(v-date)-time,y:0,m:0,d:0,H:0,M:0,S:0,q:0};\n\tif(Math.abs(out.u) < 1e-6) out.u = 0;\n\tif(opts && opts.date1904) date += 1462;\n\tif(out.u > 0.9999) {\n\t\tout.u = 0;\n\t\tif(++time == 86400) { out.T = time = 0; ++date; ++out.D; }\n\t}\n\tif(date === 60) {dout = b2 ? [1317,10,29] : [1900,2,29]; dow=3;}\n\telse if(date === 0) {dout = b2 ? [1317,8,29] : [1900,1,0]; dow=6;}\n\telse {\n\t\tif(date > 60) --date;\n\t\t/* 1 = Jan 1 1900 in Gregorian */\n\t\tvar d = new Date(1900, 0, 1);\n\t\td.setDate(d.getDate() + date - 1);\n\t\tdout = [d.getFullYear(), d.getMonth()+1,d.getDate()];\n\t\tdow = d.getDay();\n\t\tif(date < 60) dow = (dow + 6) % 7;\n\t\tif(b2) dow = fix_hijri(d, dout);\n\t}\n\tout.y = dout[0]; out.m = dout[1]; out.d = dout[2];\n\tout.S = time % 60; time = Math.floor(time / 60);\n\tout.M = time % 60; time = Math.floor(time / 60);\n\tout.H = time;\n\tout.q = dow;\n\treturn out;\n}\nSSF.parse_date_code = parse_date_code;\nvar basedate = new Date(1899, 11, 31, 0, 0, 0);\nvar dnthresh = basedate.getTime();\nvar base1904 = new Date(1900, 2, 1, 0, 0, 0);\nfunction datenum_local(v, date1904) {\n\tvar epoch = v.getTime();\n\tif(date1904) epoch -= 1461*24*60*60*1000;\n\telse if(v >= base1904) epoch += 24*60*60*1000;\n\treturn (epoch - (dnthresh + (v.getTimezoneOffset() - basedate.getTimezoneOffset()) * 60000)) / (24 * 60 * 60 * 1000);\n}\n/* The longest 32-bit integer text is \"-4294967296\", exactly 11 chars */\nfunction general_fmt_int(v) { return v.toString(10); }\nSSF._general_int = general_fmt_int;\n\n/* ECMA-376 18.8.30 numFmt*/\n/* Note: `toPrecision` uses standard form when prec > E and E >= -6 */\nvar general_fmt_num = (function make_general_fmt_num() {\n\tvar trailing_zeroes_and_decimal = /(?:\\.0*|(\\.\\d*[1-9])0+)$/;\n\tfunction strip_decimal(o) {\n\t\treturn (o.indexOf(\".\") == -1) ? o : o.replace(trailing_zeroes_and_decimal, \"$1\");\n\t}\n\n\t/* General Exponential always shows 2 digits exp and trims the mantissa */\n\tvar mantissa_zeroes_and_decimal = /(?:\\.0*|(\\.\\d*[1-9])0+)[Ee]/;\n\tvar exp_with_single_digit = /(E[+-])(\\d)$/;\n\tfunction normalize_exp(o) {\n\t\tif(o.indexOf(\"E\") == -1) return o;\n\t\treturn o.replace(mantissa_zeroes_and_decimal,\"$1E\").replace(exp_with_single_digit,\"$10$2\");\n\t}\n\n\t/* exponent >= -9 and <= 9 */\n\tfunction small_exp(v) {\n\t\tvar w = (v<0?12:11);\n\t\tvar o = strip_decimal(v.toFixed(12)); if(o.length <= w) return o;\n\t\to = v.toPrecision(10); if(o.length <= w) return o;\n\t\treturn v.toExponential(5);\n\t}\n\n\t/* exponent >= 11 or <= -10 likely exponential */\n\tfunction large_exp(v) {\n\t\tvar o = strip_decimal(v.toFixed(11));\n\t\treturn (o.length > (v<0?12:11) || o === \"0\" || o === \"-0\") ? v.toPrecision(6) : o;\n\t}\n\n\tfunction general_fmt_num_base(v) {\n\t\tvar V = Math.floor(Math.log(Math.abs(v))*Math.LOG10E), o;\n\n\t\tif(V >= -4 && V <= -1) o = v.toPrecision(10+V);\n\t\telse if(Math.abs(V) <= 9) o = small_exp(v);\n\t\telse if(V === 10) o = v.toFixed(10).substr(0,12);\n\t\telse o = large_exp(v);\n\n\t\treturn strip_decimal(normalize_exp(o.toUpperCase()));\n\t}\n\n\treturn general_fmt_num_base;\n})();\nSSF._general_num = general_fmt_num;\n\n/*\n\t\"General\" rules:\n\t- text is passed through (\"@\")\n\t- booleans are rendered as TRUE/FALSE\n\t- \"up to 11 characters\" displayed for numbers\n\t- Default date format (code 14) used for Dates\n\n\tTODO: technically the display depends on the width of the cell\n*/\nfunction general_fmt(v, opts) {\n\tswitch(typeof v) {\n\t\tcase 'string': return v;\n\t\tcase 'boolean': return v ? \"TRUE\" : \"FALSE\";\n\t\tcase 'number': return (v|0) === v ? v.toString(10) : general_fmt_num(v);\n\t\tcase 'undefined': return \"\";\n\t\tcase 'object':\n\t\t\tif(v == null) return \"\";\n\t\t\tif(v instanceof Date) return format(14, datenum_local(v, opts && opts.date1904), opts);\n\t}\n\tthrow new Error(\"unsupported value in General format: \" + v);\n}\nSSF._general = general_fmt;\nfunction fix_hijri(date, o) {\n  /* TODO: properly adjust y/m/d and  */\n  o[0] -= 581;\n  var dow = date.getDay();\n  if(date < 60) dow = (dow + 6) % 7;\n  return dow;\n}\n//var THAI_DIGITS = \"\\u0E50\\u0E51\\u0E52\\u0E53\\u0E54\\u0E55\\u0E56\\u0E57\\u0E58\\u0E59\".split(\"\");\n/*jshint -W086 */\nfunction write_date(type, fmt, val, ss0) {\n\tvar o=\"\", ss=0, tt=0, y = val.y, out, outl = 0;\n\tswitch(type) {\n\t\tcase 98: /* 'b' buddhist year */\n\t\t\ty = val.y + 543;\n\t\t\t/* falls through */\n\t\tcase 121: /* 'y' year */\n\t\tswitch(fmt.length) {\n\t\t\tcase 1: case 2: out = y % 100; outl = 2; break;\n\t\t\tdefault: out = y % 10000; outl = 4; break;\n\t\t} break;\n\t\tcase 109: /* 'm' month */\n\t\tswitch(fmt.length) {\n\t\t\tcase 1: case 2: out = val.m; outl = fmt.length; break;\n\t\t\tcase 3: return months[val.m-1][1];\n\t\t\tcase 5: return months[val.m-1][0];\n\t\t\tdefault: return months[val.m-1][2];\n\t\t} break;\n\t\tcase 100: /* 'd' day */\n\t\tswitch(fmt.length) {\n\t\t\tcase 1: case 2: out = val.d; outl = fmt.length; break;\n\t\t\tcase 3: return days[val.q][0];\n\t\t\tdefault: return days[val.q][1];\n\t\t} break;\n\t\tcase 104: /* 'h' 12-hour */\n\t\tswitch(fmt.length) {\n\t\t\tcase 1: case 2: out = 1+(val.H+11)%12; outl = fmt.length; break;\n\t\t\tdefault: throw 'bad hour format: ' + fmt;\n\t\t} break;\n\t\tcase 72: /* 'H' 24-hour */\n\t\tswitch(fmt.length) {\n\t\t\tcase 1: case 2: out = val.H; outl = fmt.length; break;\n\t\t\tdefault: throw 'bad hour format: ' + fmt;\n\t\t} break;\n\t\tcase 77: /* 'M' minutes */\n\t\tswitch(fmt.length) {\n\t\t\tcase 1: case 2: out = val.M; outl = fmt.length; break;\n\t\t\tdefault: throw 'bad minute format: ' + fmt;\n\t\t} break;\n\t\tcase 115: /* 's' seconds */\n\t\t\tif(fmt != 's' && fmt != 'ss' && fmt != '.0' && fmt != '.00' && fmt != '.000') throw 'bad second format: ' + fmt;\n\t\t\tif(val.u === 0 && (fmt == \"s\" || fmt == \"ss\")) return pad0(val.S, fmt.length);\nif(ss0 >= 2) tt = ss0 === 3 ? 1000 : 100;\n\t\t\telse tt = ss0 === 1 ? 10 : 1;\n\t\t\tss = Math.round((tt)*(val.S + val.u));\n\t\t\tif(ss >= 60*tt) ss = 0;\n\t\t\tif(fmt === 's') return ss === 0 ? \"0\" : \"\"+ss/tt;\n\t\t\to = pad0(ss,2 + ss0);\n\t\t\tif(fmt === 'ss') return o.substr(0,2);\n\t\t\treturn \".\" + o.substr(2,fmt.length-1);\n\t\tcase 90: /* 'Z' absolute time */\n\t\tswitch(fmt) {\n\t\t\tcase '[h]': case '[hh]': out = val.D*24+val.H; break;\n\t\t\tcase '[m]': case '[mm]': out = (val.D*24+val.H)*60+val.M; break;\n\t\t\tcase '[s]': case '[ss]': out = ((val.D*24+val.H)*60+val.M)*60+Math.round(val.S+val.u); break;\n\t\t\tdefault: throw 'bad abstime format: ' + fmt;\n\t\t} outl = fmt.length === 3 ? 1 : 2; break;\n\t\tcase 101: /* 'e' era */\n\t\t\tout = y; outl = 1; break;\n\t}\n\tvar outstr = outl > 0 ? pad0(out, outl) : \"\";\n\treturn outstr;\n}\n/*jshint +W086 */\nfunction commaify(s) {\n\tvar w = 3;\n\tif(s.length <= w) return s;\n\tvar j = (s.length % w), o = s.substr(0,j);\n\tfor(; j!=s.length; j+=w) o+=(o.length > 0 ? \",\" : \"\") + s.substr(j,w);\n\treturn o;\n}\nvar write_num = (function make_write_num(){\nvar pct1 = /%/g;\nfunction write_num_pct(type, fmt, val){\n\tvar sfmt = fmt.replace(pct1,\"\"), mul = fmt.length - sfmt.length;\n\treturn write_num(type, sfmt, val * Math.pow(10,2*mul)) + fill(\"%\",mul);\n}\nfunction write_num_cm(type, fmt, val){\n\tvar idx = fmt.length - 1;\n\twhile(fmt.charCodeAt(idx-1) === 44) --idx;\n\treturn write_num(type, fmt.substr(0,idx), val / Math.pow(10,3*(fmt.length-idx)));\n}\nfunction write_num_exp(fmt, val){\n\tvar o;\n\tvar idx = fmt.indexOf(\"E\") - fmt.indexOf(\".\") - 1;\n\tif(fmt.match(/^#+0.0E\\+0$/)) {\n\t\tif(val == 0) return \"0.0E+0\";\n\t\telse if(val < 0) return \"-\" + write_num_exp(fmt, -val);\n\t\tvar period = fmt.indexOf(\".\"); if(period === -1) period=fmt.indexOf('E');\n\t\tvar ee = Math.floor(Math.log(val)*Math.LOG10E)%period;\n\t\tif(ee < 0) ee += period;\n\t\to = (val/Math.pow(10,ee)).toPrecision(idx+1+(period+ee)%period);\n\t\tif(o.indexOf(\"e\") === -1) {\n\t\t\tvar fakee = Math.floor(Math.log(val)*Math.LOG10E);\n\t\t\tif(o.indexOf(\".\") === -1) o = o.charAt(0) + \".\" + o.substr(1) + \"E+\" + (fakee - o.length+ee);\n\t\t\telse o += \"E+\" + (fakee - ee);\n\t\t\twhile(o.substr(0,2) === \"0.\") {\n\t\t\t\to = o.charAt(0) + o.substr(2,period) + \".\" + o.substr(2+period);\n\t\t\t\to = o.replace(/^0+([1-9])/,\"$1\").replace(/^0+\\./,\"0.\");\n\t\t\t}\n\t\t\to = o.replace(/\\+-/,\"-\");\n\t\t}\n\t\to = o.replace(/^([+-]?)(\\d*)\\.(\\d*)[Ee]/,function($$,$1,$2,$3) { return $1 + $2 + $3.substr(0,(period+ee)%period) + \".\" + $3.substr(ee) + \"E\"; });\n\t} else o = val.toExponential(idx);\n\tif(fmt.match(/E\\+00$/) && o.match(/e[+-]\\d$/)) o = o.substr(0,o.length-1) + \"0\" + o.charAt(o.length-1);\n\tif(fmt.match(/E\\-/) && o.match(/e\\+/)) o = o.replace(/e\\+/,\"e\");\n\treturn o.replace(\"e\",\"E\");\n}\nvar frac1 = /# (\\?+)( ?)\\/( ?)(\\d+)/;\nfunction write_num_f1(r, aval, sign) {\n\tvar den = parseInt(r[4],10), rr = Math.round(aval * den), base = Math.floor(rr/den);\n\tvar myn = (rr - base*den), myd = den;\n\treturn sign + (base === 0 ? \"\" : \"\"+base) + \" \" + (myn === 0 ? fill(\" \", r[1].length + 1 + r[4].length) : pad_(myn,r[1].length) + r[2] + \"/\" + r[3] + pad0(myd,r[4].length));\n}\nfunction write_num_f2(r, aval, sign) {\n\treturn sign + (aval === 0 ? \"\" : \"\"+aval) + fill(\" \", r[1].length + 2 + r[4].length);\n}\nvar dec1 = /^#*0*\\.([0#]+)/;\nvar closeparen = /\\).*[0#]/;\nvar phone = /\\(###\\) ###\\\\?-####/;\nfunction hashq(str) {\n\tvar o = \"\", cc;\n\tfor(var i = 0; i != str.length; ++i) switch((cc=str.charCodeAt(i))) {\n\t\tcase 35: break;\n\t\tcase 63: o+= \" \"; break;\n\t\tcase 48: o+= \"0\"; break;\n\t\tdefault: o+= String.fromCharCode(cc);\n\t}\n\treturn o;\n}\nfunction rnd(val, d) { var dd = Math.pow(10,d); return \"\"+(Math.round(val * dd)/dd); }\nfunction dec(val, d) {\n\tvar _frac = val - Math.floor(val), dd = Math.pow(10,d);\n\tif (d < ('' + Math.round(_frac * dd)).length) return 0;\n\treturn Math.round(_frac * dd);\n}\nfunction carry(val, d) {\n\tif (d < ('' + Math.round((val-Math.floor(val))*Math.pow(10,d))).length) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\nfunction flr(val) {\n\tif(val < 2147483647 && val > -2147483648) return \"\"+(val >= 0 ? (val|0) : (val-1|0));\n\treturn \"\"+Math.floor(val);\n}\nfunction write_num_flt(type, fmt, val) {\n\tif(type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {\n\t\tvar ffmt = fmt.replace(/\\( */,\"\").replace(/ \\)/,\"\").replace(/\\)/,\"\");\n\t\tif(val >= 0) return write_num_flt('n', ffmt, val);\n\t\treturn '(' + write_num_flt('n', ffmt, -val) + ')';\n\t}\n\tif(fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm(type, fmt, val);\n\tif(fmt.indexOf('%') !== -1) return write_num_pct(type, fmt, val);\n\tif(fmt.indexOf('E') !== -1) return write_num_exp(fmt, val);\n\tif(fmt.charCodeAt(0) === 36) return \"$\"+write_num_flt(type,fmt.substr(fmt.charAt(1)==' '?2:1),val);\n\tvar o;\n\tvar r, ri, ff, aval = Math.abs(val), sign = val < 0 ? \"-\" : \"\";\n\tif(fmt.match(/^00+$/)) return sign + pad0r(aval,fmt.length);\n\tif(fmt.match(/^[#?]+$/)) {\n\t\to = pad0r(val,0); if(o === \"0\") o = \"\";\n\t\treturn o.length > fmt.length ? o : hashq(fmt.substr(0,fmt.length-o.length)) + o;\n\t}\n\tif((r = fmt.match(frac1))) return write_num_f1(r, aval, sign);\n\tif(fmt.match(/^#+0+$/)) return sign + pad0r(aval,fmt.length - fmt.indexOf(\"0\"));\n\tif((r = fmt.match(dec1))) {\n\t\to = rnd(val, r[1].length).replace(/^([^\\.]+)$/,\"$1.\"+hashq(r[1])).replace(/\\.$/,\".\"+hashq(r[1])).replace(/\\.(\\d*)$/,function($$, $1) { return \".\" + $1 + fill(\"0\", hashq(r[1]).length-$1.length); });\n\t\treturn fmt.indexOf(\"0.\") !== -1 ? o : o.replace(/^0\\./,\".\");\n\t}\n\tfmt = fmt.replace(/^#+([0.])/, \"$1\");\n\tif((r = fmt.match(/^(0*)\\.(#*)$/))) {\n\t\treturn sign + rnd(aval, r[2].length).replace(/\\.(\\d*[1-9])0*$/,\".$1\").replace(/^(-?\\d*)$/,\"$1.\").replace(/^0\\./,r[1].length?\"0.\":\".\");\n\t}\n\tif((r = fmt.match(/^#{1,3},##0(\\.?)$/))) return sign + commaify(pad0r(aval,0));\n\tif((r = fmt.match(/^#,##0\\.([#0]*0)$/))) {\n\t\treturn val < 0 ? \"-\" + write_num_flt(type, fmt, -val) : commaify(\"\"+(Math.floor(val) + carry(val, r[1].length))) + \".\" + pad0(dec(val, r[1].length),r[1].length);\n\t}\n\tif((r = fmt.match(/^#,#*,#0/))) return write_num_flt(type,fmt.replace(/^#,#*,/,\"\"),val);\n\tif((r = fmt.match(/^([0#]+)(\\\\?-([0#]+))+$/))) {\n\t\to = _strrev(write_num_flt(type, fmt.replace(/[\\\\-]/g,\"\"), val));\n\t\tri = 0;\n\t\treturn _strrev(_strrev(fmt.replace(/\\\\/g,\"\")).replace(/[0#]/g,function(x){return ri<o.length?o.charAt(ri++):x==='0'?'0':\"\";}));\n\t}\n\tif(fmt.match(phone)) {\n\t\to = write_num_flt(type, \"##########\", val);\n\t\treturn \"(\" + o.substr(0,3) + \") \" + o.substr(3, 3) + \"-\" + o.substr(6);\n\t}\n\tvar oa = \"\";\n\tif((r = fmt.match(/^([#0?]+)( ?)\\/( ?)([#0?]+)/))) {\n\t\tri = Math.min(r[4].length,7);\n\t\tff = frac(aval, Math.pow(10,ri)-1, false);\n\t\to = \"\" + sign;\n\t\toa = write_num(\"n\", r[1], ff[1]);\n\t\tif(oa.charAt(oa.length-1) == \" \") oa = oa.substr(0,oa.length-1) + \"0\";\n\t\to += oa + r[2] + \"/\" + r[3];\n\t\toa = rpad_(ff[2],ri);\n\t\tif(oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length-oa.length)) + oa;\n\t\to += oa;\n\t\treturn o;\n\t}\n\tif((r = fmt.match(/^# ([#0?]+)( ?)\\/( ?)([#0?]+)/))) {\n\t\tri = Math.min(Math.max(r[1].length, r[4].length),7);\n\t\tff = frac(aval, Math.pow(10,ri)-1, true);\n\t\treturn sign + (ff[0]||(ff[1] ? \"\" : \"0\")) + \" \" + (ff[1] ? pad_(ff[1],ri) + r[2] + \"/\" + r[3] + rpad_(ff[2],ri): fill(\" \", 2*ri+1 + r[2].length + r[3].length));\n\t}\n\tif((r = fmt.match(/^[#0?]+$/))) {\n\t\to = pad0r(val, 0);\n\t\tif(fmt.length <= o.length) return o;\n\t\treturn hashq(fmt.substr(0,fmt.length-o.length)) + o;\n\t}\n\tif((r = fmt.match(/^([#0?]+)\\.([#0]+)$/))) {\n\t\to = \"\" + val.toFixed(Math.min(r[2].length,10)).replace(/([^0])0+$/,\"$1\");\n\t\tri = o.indexOf(\".\");\n\t\tvar lres = fmt.indexOf(\".\") - ri, rres = fmt.length - o.length - lres;\n\t\treturn hashq(fmt.substr(0,lres) + o + fmt.substr(fmt.length-rres));\n\t}\n\tif((r = fmt.match(/^00,000\\.([#0]*0)$/))) {\n\t\tri = dec(val, r[1].length);\n\t\treturn val < 0 ? \"-\" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\\d,\\d{3}$/,\"0$&\").replace(/^\\d*$/,function($$) { return \"00,\" + ($$.length < 3 ? pad0(0,3-$$.length) : \"\") + $$; }) + \".\" + pad0(ri,r[1].length);\n\t}\n\tswitch(fmt) {\n\t\tcase \"###,##0.00\": return write_num_flt(type, \"#,##0.00\", val);\n\t\tcase \"###,###\":\n\t\tcase \"##,###\":\n\t\tcase \"#,###\": var x = commaify(pad0r(aval,0)); return x !== \"0\" ? sign + x : \"\";\n\t\tcase \"###,###.00\": return write_num_flt(type, \"###,##0.00\",val).replace(/^0\\./,\".\");\n\t\tcase \"#,###.00\": return write_num_flt(type, \"#,##0.00\",val).replace(/^0\\./,\".\");\n\t\tdefault:\n\t}\n\tthrow new Error(\"unsupported format |\" + fmt + \"|\");\n}\nfunction write_num_cm2(type, fmt, val){\n\tvar idx = fmt.length - 1;\n\twhile(fmt.charCodeAt(idx-1) === 44) --idx;\n\treturn write_num(type, fmt.substr(0,idx), val / Math.pow(10,3*(fmt.length-idx)));\n}\nfunction write_num_pct2(type, fmt, val){\n\tvar sfmt = fmt.replace(pct1,\"\"), mul = fmt.length - sfmt.length;\n\treturn write_num(type, sfmt, val * Math.pow(10,2*mul)) + fill(\"%\",mul);\n}\nfunction write_num_exp2(fmt, val){\n\tvar o;\n\tvar idx = fmt.indexOf(\"E\") - fmt.indexOf(\".\") - 1;\n\tif(fmt.match(/^#+0.0E\\+0$/)) {\n\t\tif(val == 0) return \"0.0E+0\";\n\t\telse if(val < 0) return \"-\" + write_num_exp2(fmt, -val);\n\t\tvar period = fmt.indexOf(\".\"); if(period === -1) period=fmt.indexOf('E');\n\t\tvar ee = Math.floor(Math.log(val)*Math.LOG10E)%period;\n\t\tif(ee < 0) ee += period;\n\t\to = (val/Math.pow(10,ee)).toPrecision(idx+1+(period+ee)%period);\n\t\tif(!o.match(/[Ee]/)) {\n\t\t\tvar fakee = Math.floor(Math.log(val)*Math.LOG10E);\n\t\t\tif(o.indexOf(\".\") === -1) o = o.charAt(0) + \".\" + o.substr(1) + \"E+\" + (fakee - o.length+ee);\n\t\t\telse o += \"E+\" + (fakee - ee);\n\t\t\to = o.replace(/\\+-/,\"-\");\n\t\t}\n\t\to = o.replace(/^([+-]?)(\\d*)\\.(\\d*)[Ee]/,function($$,$1,$2,$3) { return $1 + $2 + $3.substr(0,(period+ee)%period) + \".\" + $3.substr(ee) + \"E\"; });\n\t} else o = val.toExponential(idx);\n\tif(fmt.match(/E\\+00$/) && o.match(/e[+-]\\d$/)) o = o.substr(0,o.length-1) + \"0\" + o.charAt(o.length-1);\n\tif(fmt.match(/E\\-/) && o.match(/e\\+/)) o = o.replace(/e\\+/,\"e\");\n\treturn o.replace(\"e\",\"E\");\n}\nfunction write_num_int(type, fmt, val) {\n\tif(type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {\n\t\tvar ffmt = fmt.replace(/\\( */,\"\").replace(/ \\)/,\"\").replace(/\\)/,\"\");\n\t\tif(val >= 0) return write_num_int('n', ffmt, val);\n\t\treturn '(' + write_num_int('n', ffmt, -val) + ')';\n\t}\n\tif(fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm2(type, fmt, val);\n\tif(fmt.indexOf('%') !== -1) return write_num_pct2(type, fmt, val);\n\tif(fmt.indexOf('E') !== -1) return write_num_exp2(fmt, val);\n\tif(fmt.charCodeAt(0) === 36) return \"$\"+write_num_int(type,fmt.substr(fmt.charAt(1)==' '?2:1),val);\n\tvar o;\n\tvar r, ri, ff, aval = Math.abs(val), sign = val < 0 ? \"-\" : \"\";\n\tif(fmt.match(/^00+$/)) return sign + pad0(aval,fmt.length);\n\tif(fmt.match(/^[#?]+$/)) {\n\t\to = (\"\"+val); if(val === 0) o = \"\";\n\t\treturn o.length > fmt.length ? o : hashq(fmt.substr(0,fmt.length-o.length)) + o;\n\t}\n\tif((r = fmt.match(frac1))) return write_num_f2(r, aval, sign);\n\tif(fmt.match(/^#+0+$/)) return sign + pad0(aval,fmt.length - fmt.indexOf(\"0\"));\n\tif((r = fmt.match(dec1))) {\no = (\"\"+val).replace(/^([^\\.]+)$/,\"$1.\"+hashq(r[1])).replace(/\\.$/,\".\"+hashq(r[1]));\n\t\to = o.replace(/\\.(\\d*)$/,function($$, $1) {\nreturn \".\" + $1 + fill(\"0\", hashq(r[1]).length-$1.length); });\n\t\treturn fmt.indexOf(\"0.\") !== -1 ? o : o.replace(/^0\\./,\".\");\n\t}\n\tfmt = fmt.replace(/^#+([0.])/, \"$1\");\n\tif((r = fmt.match(/^(0*)\\.(#*)$/))) {\n\t\treturn sign + (\"\"+aval).replace(/\\.(\\d*[1-9])0*$/,\".$1\").replace(/^(-?\\d*)$/,\"$1.\").replace(/^0\\./,r[1].length?\"0.\":\".\");\n\t}\n\tif((r = fmt.match(/^#{1,3},##0(\\.?)$/))) return sign + commaify((\"\"+aval));\n\tif((r = fmt.match(/^#,##0\\.([#0]*0)$/))) {\n\t\treturn val < 0 ? \"-\" + write_num_int(type, fmt, -val) : commaify((\"\"+val)) + \".\" + fill('0',r[1].length);\n\t}\n\tif((r = fmt.match(/^#,#*,#0/))) return write_num_int(type,fmt.replace(/^#,#*,/,\"\"),val);\n\tif((r = fmt.match(/^([0#]+)(\\\\?-([0#]+))+$/))) {\n\t\to = _strrev(write_num_int(type, fmt.replace(/[\\\\-]/g,\"\"), val));\n\t\tri = 0;\n\t\treturn _strrev(_strrev(fmt.replace(/\\\\/g,\"\")).replace(/[0#]/g,function(x){return ri<o.length?o.charAt(ri++):x==='0'?'0':\"\";}));\n\t}\n\tif(fmt.match(phone)) {\n\t\to = write_num_int(type, \"##########\", val);\n\t\treturn \"(\" + o.substr(0,3) + \") \" + o.substr(3, 3) + \"-\" + o.substr(6);\n\t}\n\tvar oa = \"\";\n\tif((r = fmt.match(/^([#0?]+)( ?)\\/( ?)([#0?]+)/))) {\n\t\tri = Math.min(r[4].length,7);\n\t\tff = frac(aval, Math.pow(10,ri)-1, false);\n\t\to = \"\" + sign;\n\t\toa = write_num(\"n\", r[1], ff[1]);\n\t\tif(oa.charAt(oa.length-1) == \" \") oa = oa.substr(0,oa.length-1) + \"0\";\n\t\to += oa + r[2] + \"/\" + r[3];\n\t\toa = rpad_(ff[2],ri);\n\t\tif(oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length-oa.length)) + oa;\n\t\to += oa;\n\t\treturn o;\n\t}\n\tif((r = fmt.match(/^# ([#0?]+)( ?)\\/( ?)([#0?]+)/))) {\n\t\tri = Math.min(Math.max(r[1].length, r[4].length),7);\n\t\tff = frac(aval, Math.pow(10,ri)-1, true);\n\t\treturn sign + (ff[0]||(ff[1] ? \"\" : \"0\")) + \" \" + (ff[1] ? pad_(ff[1],ri) + r[2] + \"/\" + r[3] + rpad_(ff[2],ri): fill(\" \", 2*ri+1 + r[2].length + r[3].length));\n\t}\n\tif((r = fmt.match(/^[#0?]+$/))) {\n\t\to = \"\" + val;\n\t\tif(fmt.length <= o.length) return o;\n\t\treturn hashq(fmt.substr(0,fmt.length-o.length)) + o;\n\t}\n\tif((r = fmt.match(/^([#0]+)\\.([#0]+)$/))) {\n\t\to = \"\" + val.toFixed(Math.min(r[2].length,10)).replace(/([^0])0+$/,\"$1\");\n\t\tri = o.indexOf(\".\");\n\t\tvar lres = fmt.indexOf(\".\") - ri, rres = fmt.length - o.length - lres;\n\t\treturn hashq(fmt.substr(0,lres) + o + fmt.substr(fmt.length-rres));\n\t}\n\tif((r = fmt.match(/^00,000\\.([#0]*0)$/))) {\n\t\treturn val < 0 ? \"-\" + write_num_int(type, fmt, -val) : commaify(\"\"+val).replace(/^\\d,\\d{3}$/,\"0$&\").replace(/^\\d*$/,function($$) { return \"00,\" + ($$.length < 3 ? pad0(0,3-$$.length) : \"\") + $$; }) + \".\" + pad0(0,r[1].length);\n\t}\n\tswitch(fmt) {\n\t\tcase \"###,###\":\n\t\tcase \"##,###\":\n\t\tcase \"#,###\": var x = commaify(\"\"+aval); return x !== \"0\" ? sign + x : \"\";\n\t\tdefault:\n\t\t\tif(fmt.match(/\\.[0#?]*$/)) return write_num_int(type, fmt.slice(0,fmt.lastIndexOf(\".\")), val) + hashq(fmt.slice(fmt.lastIndexOf(\".\")));\n\t}\n\tthrow new Error(\"unsupported format |\" + fmt + \"|\");\n}\nreturn function write_num(type, fmt, val) {\n\treturn (val|0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);\n};})();\nfunction split_fmt(fmt) {\n\tvar out = [];\n\tvar in_str = false/*, cc*/;\n\tfor(var i = 0, j = 0; i < fmt.length; ++i) switch((/*cc=*/fmt.charCodeAt(i))) {\n\t\tcase 34: /* '\"' */\n\t\t\tin_str = !in_str; break;\n\t\tcase 95: case 42: case 92: /* '_' '*' '\\\\' */\n\t\t\t++i; break;\n\t\tcase 59: /* ';' */\n\t\t\tout[out.length] = fmt.substr(j,i-j);\n\t\t\tj = i+1;\n\t}\n\tout[out.length] = fmt.substr(j);\n\tif(in_str === true) throw new Error(\"Format |\" + fmt + \"| unterminated string \");\n\treturn out;\n}\nSSF._split = split_fmt;\nvar abstime = /\\[[HhMmSs\\u0E0A\\u0E19\\u0E17]*\\]/;\nfunction fmt_is_date(fmt) {\n\tvar i = 0, /*cc = 0,*/ c = \"\", o = \"\";\n\twhile(i < fmt.length) {\n\t\tswitch((c = fmt.charAt(i))) {\n\t\t\tcase 'G': if(isgeneral(fmt, i)) i+= 6; i++; break;\n\t\t\tcase '\"': for(;(/*cc=*/fmt.charCodeAt(++i)) !== 34 && i < fmt.length;){/*empty*/} ++i; break;\n\t\t\tcase '\\\\': i+=2; break;\n\t\t\tcase '_': i+=2; break;\n\t\t\tcase '@': ++i; break;\n\t\t\tcase 'B': case 'b':\n\t\t\t\tif(fmt.charAt(i+1) === \"1\" || fmt.charAt(i+1) === \"2\") return true;\n\t\t\t\t/* falls through */\n\t\t\tcase 'M': case 'D': case 'Y': case 'H': case 'S': case 'E':\n\t\t\t\t/* falls through */\n\t\t\tcase 'm': case 'd': case 'y': case 'h': case 's': case 'e': case 'g': return true;\n\t\t\tcase 'A': case 'a': case '上':\n\t\t\t\tif(fmt.substr(i, 3).toUpperCase() === \"A/P\") return true;\n\t\t\t\tif(fmt.substr(i, 5).toUpperCase() === \"AM/PM\") return true;\n\t\t\t\tif(fmt.substr(i, 5).toUpperCase() === \"上午/下午\") return true;\n\t\t\t\t++i; break;\n\t\t\tcase '[':\n\t\t\t\to = c;\n\t\t\t\twhile(fmt.charAt(i++) !== ']' && i < fmt.length) o += fmt.charAt(i);\n\t\t\t\tif(o.match(abstime)) return true;\n\t\t\t\tbreak;\n\t\t\tcase '.':\n\t\t\t\t/* falls through */\n\t\t\tcase '0': case '#':\n\t\t\t\twhile(i < fmt.length && (\"0#?.,E+-%\".indexOf(c=fmt.charAt(++i)) > -1 || (c=='\\\\' && fmt.charAt(i+1) == \"-\" && \"0#\".indexOf(fmt.charAt(i+2))>-1))){/* empty */}\n\t\t\t\tbreak;\n\t\t\tcase '?': while(fmt.charAt(++i) === c){/* empty */} break;\n\t\t\tcase '*': ++i; if(fmt.charAt(i) == ' ' || fmt.charAt(i) == '*') ++i; break;\n\t\t\tcase '(': case ')': ++i; break;\n\t\t\tcase '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':\n\t\t\t\twhile(i < fmt.length && \"0123456789\".indexOf(fmt.charAt(++i)) > -1){/* empty */} break;\n\t\t\tcase ' ': ++i; break;\n\t\t\tdefault: ++i; break;\n\t\t}\n\t}\n\treturn false;\n}\nSSF.is_date = fmt_is_date;\nfunction eval_fmt(fmt, v, opts, flen) {\n\tvar out = [], o = \"\", i = 0, c = \"\", lst='t', dt, j, cc;\n\tvar hr='H';\n\t/* Tokenize */\n\twhile(i < fmt.length) {\n\t\tswitch((c = fmt.charAt(i))) {\n\t\t\tcase 'G': /* General */\n\t\t\t\tif(!isgeneral(fmt, i)) throw new Error('unrecognized character ' + c + ' in ' +fmt);\n\t\t\t\tout[out.length] = {t:'G', v:'General'}; i+=7; break;\n\t\t\tcase '\"': /* Literal text */\n\t\t\t\tfor(o=\"\";(cc=fmt.charCodeAt(++i)) !== 34 && i < fmt.length;) o += String.fromCharCode(cc);\n\t\t\t\tout[out.length] = {t:'t', v:o}; ++i; break;\n\t\t\tcase '\\\\': var w = fmt.charAt(++i), t = (w === \"(\" || w === \")\") ? w : 't';\n\t\t\t\tout[out.length] = {t:t, v:w}; ++i; break;\n\t\t\tcase '_': out[out.length] = {t:'t', v:\" \"}; i+=2; break;\n\t\t\tcase '@': /* Text Placeholder */\n\t\t\t\tout[out.length] = {t:'T', v:v}; ++i; break;\n\t\t\tcase 'B': case 'b':\n\t\t\t\tif(fmt.charAt(i+1) === \"1\" || fmt.charAt(i+1) === \"2\") {\n\t\t\t\t\tif(dt==null) { dt=parse_date_code(v, opts, fmt.charAt(i+1) === \"2\"); if(dt==null) return \"\"; }\n\t\t\t\t\tout[out.length] = {t:'X', v:fmt.substr(i,2)}; lst = c; i+=2; break;\n\t\t\t\t}\n\t\t\t\t/* falls through */\n\t\t\tcase 'M': case 'D': case 'Y': case 'H': case 'S': case 'E':\n\t\t\t\tc = c.toLowerCase();\n\t\t\t\t/* falls through */\n\t\t\tcase 'm': case 'd': case 'y': case 'h': case 's': case 'e': case 'g':\n\t\t\t\tif(v < 0) return \"\";\n\t\t\t\tif(dt==null) { dt=parse_date_code(v, opts); if(dt==null) return \"\"; }\n\t\t\t\to = c; while(++i < fmt.length && fmt.charAt(i).toLowerCase() === c) o+=c;\n\t\t\t\tif(c === 'm' && lst.toLowerCase() === 'h') c = 'M';\n\t\t\t\tif(c === 'h') c = hr;\n\t\t\t\tout[out.length] = {t:c, v:o}; lst = c; break;\n\t\t\tcase 'A': case 'a': case '上':\n\t\t\t\tvar q={t:c, v:c};\n\t\t\t\tif(dt==null) dt=parse_date_code(v, opts);\n\t\t\t\tif(fmt.substr(i, 3).toUpperCase() === \"A/P\") { if(dt!=null) q.v = dt.H >= 12 ? \"P\" : \"A\"; q.t = 'T'; hr='h';i+=3;}\n\t\t\t\telse if(fmt.substr(i,5).toUpperCase() === \"AM/PM\") { if(dt!=null) q.v = dt.H >= 12 ? \"PM\" : \"AM\"; q.t = 'T'; i+=5; hr='h'; }\n\t\t\t\telse if(fmt.substr(i,5).toUpperCase() === \"上午/下午\") { if(dt!=null) q.v = dt.H >= 12 ? \"下午\" : \"上午\"; q.t = 'T'; i+=5; hr='h'; }\n\t\t\t\telse { q.t = \"t\"; ++i; }\n\t\t\t\tif(dt==null && q.t === 'T') return \"\";\n\t\t\t\tout[out.length] = q; lst = c; break;\n\t\t\tcase '[':\n\t\t\t\to = c;\n\t\t\t\twhile(fmt.charAt(i++) !== ']' && i < fmt.length) o += fmt.charAt(i);\n\t\t\t\tif(o.slice(-1) !== ']') throw 'unterminated \"[\" block: |' + o + '|';\n\t\t\t\tif(o.match(abstime)) {\n\t\t\t\t\tif(dt==null) { dt=parse_date_code(v, opts); if(dt==null) return \"\"; }\n\t\t\t\t\tout[out.length] = {t:'Z', v:o.toLowerCase()};\n\t\t\t\t\tlst = o.charAt(1);\n\t\t\t\t} else if(o.indexOf(\"$\") > -1) {\n\t\t\t\t\to = (o.match(/\\$([^-\\[\\]]*)/)||[])[1]||\"$\";\n\t\t\t\t\tif(!fmt_is_date(fmt)) out[out.length] = {t:'t',v:o};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t/* Numbers */\n\t\t\tcase '.':\n\t\t\t\tif(dt != null) {\n\t\t\t\t\to = c; while(++i < fmt.length && (c=fmt.charAt(i)) === \"0\") o += c;\n\t\t\t\t\tout[out.length] = {t:'s', v:o}; break;\n\t\t\t\t}\n\t\t\t\t/* falls through */\n\t\t\tcase '0': case '#':\n\t\t\t\to = c; while(++i < fmt.length && \"0#?.,E+-%\".indexOf(c=fmt.charAt(i)) > -1) o += c;\n\t\t\t\tout[out.length] = {t:'n', v:o}; break;\n\t\t\tcase '?':\n\t\t\t\to = c; while(fmt.charAt(++i) === c) o+=c;\n\t\t\t\tout[out.length] = {t:c, v:o}; lst = c; break;\n\t\t\tcase '*': ++i; if(fmt.charAt(i) == ' ' || fmt.charAt(i) == '*') ++i; break; // **\n\t\t\tcase '(': case ')': out[out.length] = {t:(flen===1?'t':c), v:c}; ++i; break;\n\t\t\tcase '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':\n\t\t\t\to = c; while(i < fmt.length && \"0123456789\".indexOf(fmt.charAt(++i)) > -1) o+=fmt.charAt(i);\n\t\t\t\tout[out.length] = {t:'D', v:o}; break;\n\t\t\tcase ' ': out[out.length] = {t:c, v:c}; ++i; break;\n\t\t\tcase '$': out[out.length] = {t:'t', v:'$'}; ++i; break;\n\t\t\tdefault:\n\t\t\t\tif(\",$-+/():!^&'~{}<>=€acfijklopqrtuvwxzP\".indexOf(c) === -1) throw new Error('unrecognized character ' + c + ' in ' + fmt);\n\t\t\t\tout[out.length] = {t:'t', v:c}; ++i; break;\n\t\t}\n\t}\n\n\t/* Scan for date/time parts */\n\tvar bt = 0, ss0 = 0, ssm;\n\tfor(i=out.length-1, lst='t'; i >= 0; --i) {\n\t\tswitch(out[i].t) {\n\t\t\tcase 'h': case 'H': out[i].t = hr; lst='h'; if(bt < 1) bt = 1; break;\n\t\t\tcase 's':\n\t\t\t\tif((ssm=out[i].v.match(/\\.0+$/))) ss0=Math.max(ss0,ssm[0].length-1);\n\t\t\t\tif(bt < 3) bt = 3;\n\t\t\t/* falls through */\n\t\t\tcase 'd': case 'y': case 'M': case 'e': lst=out[i].t; break;\n\t\t\tcase 'm': if(lst === 's') { out[i].t = 'M'; if(bt < 2) bt = 2; } break;\n\t\t\tcase 'X': /*if(out[i].v === \"B2\");*/\n\t\t\t\tbreak;\n\t\t\tcase 'Z':\n\t\t\t\tif(bt < 1 && out[i].v.match(/[Hh]/)) bt = 1;\n\t\t\t\tif(bt < 2 && out[i].v.match(/[Mm]/)) bt = 2;\n\t\t\t\tif(bt < 3 && out[i].v.match(/[Ss]/)) bt = 3;\n\t\t}\n\t}\n\t/* time rounding depends on presence of minute / second / usec fields */\n\tswitch(bt) {\n\t\tcase 0: break;\n\t\tcase 1:\nif(dt.u >= 0.5) { dt.u = 0; ++dt.S; }\n\t\t\tif(dt.S >=  60) { dt.S = 0; ++dt.M; }\n\t\t\tif(dt.M >=  60) { dt.M = 0; ++dt.H; }\n\t\t\tbreak;\n\t\tcase 2:\nif(dt.u >= 0.5) { dt.u = 0; ++dt.S; }\n\t\t\tif(dt.S >=  60) { dt.S = 0; ++dt.M; }\n\t\t\tbreak;\n\t}\n\n\t/* replace fields */\n\tvar nstr = \"\", jj;\n\tfor(i=0; i < out.length; ++i) {\n\t\tswitch(out[i].t) {\n\t\t\tcase 't': case 'T': case ' ': case 'D': break;\n\t\t\tcase 'X': out[i].v = \"\"; out[i].t = \";\"; break;\n\t\t\tcase 'd': case 'm': case 'y': case 'h': case 'H': case 'M': case 's': case 'e': case 'b': case 'Z':\nout[i].v = write_date(out[i].t.charCodeAt(0), out[i].v, dt, ss0);\n\t\t\t\tout[i].t = 't'; break;\n\t\t\tcase 'n': case '?':\n\t\t\t\tjj = i+1;\n\t\t\t\twhile(out[jj] != null && (\n\t\t\t\t\t(c=out[jj].t) === \"?\" || c === \"D\" ||\n\t\t\t\t\t((c === \" \" || c === \"t\") && out[jj+1] != null && (out[jj+1].t === '?' || out[jj+1].t === \"t\" && out[jj+1].v === '/')) ||\n\t\t\t\t\t(out[i].t === '(' && (c === ' ' || c === 'n' || c === ')')) ||\n\t\t\t\t\t(c === 't' && (out[jj].v === '/' || out[jj].v === ' ' && out[jj+1] != null && out[jj+1].t == '?'))\n\t\t\t\t)) {\n\t\t\t\t\tout[i].v += out[jj].v;\n\t\t\t\t\tout[jj] = {v:\"\", t:\";\"}; ++jj;\n\t\t\t\t}\n\t\t\t\tnstr += out[i].v;\n\t\t\t\ti = jj-1; break;\n\t\t\tcase 'G': out[i].t = 't'; out[i].v = general_fmt(v,opts); break;\n\t\t}\n\t}\n\tvar vv = \"\", myv, ostr;\n\tif(nstr.length > 0) {\n\t\tif(nstr.charCodeAt(0) == 40) /* '(' */ {\n\t\t\tmyv = (v<0&&nstr.charCodeAt(0) === 45 ? -v : v);\n\t\t\tostr = write_num('n', nstr, myv);\n\t\t} else {\n\t\t\tmyv = (v<0 && flen > 1 ? -v : v);\n\t\t\tostr = write_num('n', nstr, myv);\n\t\t\tif(myv < 0 && out[0] && out[0].t == 't') {\n\t\t\t\tostr = ostr.substr(1);\n\t\t\t\tout[0].v = \"-\" + out[0].v;\n\t\t\t}\n\t\t}\n\t\tjj=ostr.length-1;\n\t\tvar decpt = out.length;\n\t\tfor(i=0; i < out.length; ++i) if(out[i] != null && out[i].t != 't' && out[i].v.indexOf(\".\") > -1) { decpt = i; break; }\n\t\tvar lasti=out.length;\n\t\tif(decpt === out.length && ostr.indexOf(\"E\") === -1) {\n\t\t\tfor(i=out.length-1; i>= 0;--i) {\n\t\t\t\tif(out[i] == null || 'n?'.indexOf(out[i].t) === -1) continue;\n\t\t\t\tif(jj>=out[i].v.length-1) { jj -= out[i].v.length; out[i].v = ostr.substr(jj+1, out[i].v.length); }\n\t\t\t\telse if(jj < 0) out[i].v = \"\";\n\t\t\t\telse { out[i].v = ostr.substr(0, jj+1); jj = -1; }\n\t\t\t\tout[i].t = 't';\n\t\t\t\tlasti = i;\n\t\t\t}\n\t\t\tif(jj>=0 && lasti<out.length) out[lasti].v = ostr.substr(0,jj+1) + out[lasti].v;\n\t\t}\n\t\telse if(decpt !== out.length && ostr.indexOf(\"E\") === -1) {\n\t\t\tjj = ostr.indexOf(\".\")-1;\n\t\t\tfor(i=decpt; i>= 0; --i) {\n\t\t\t\tif(out[i] == null || 'n?'.indexOf(out[i].t) === -1) continue;\n\t\t\t\tj=out[i].v.indexOf(\".\")>-1&&i===decpt?out[i].v.indexOf(\".\")-1:out[i].v.length-1;\n\t\t\t\tvv = out[i].v.substr(j+1);\n\t\t\t\tfor(; j>=0; --j) {\n\t\t\t\t\tif(jj>=0 && (out[i].v.charAt(j) === \"0\" || out[i].v.charAt(j) === \"#\")) vv = ostr.charAt(jj--) + vv;\n\t\t\t\t}\n\t\t\t\tout[i].v = vv;\n\t\t\t\tout[i].t = 't';\n\t\t\t\tlasti = i;\n\t\t\t}\n\t\t\tif(jj>=0 && lasti<out.length) out[lasti].v = ostr.substr(0,jj+1) + out[lasti].v;\n\t\t\tjj = ostr.indexOf(\".\")+1;\n\t\t\tfor(i=decpt; i<out.length; ++i) {\n\t\t\t\tif(out[i] == null || ('n?('.indexOf(out[i].t) === -1 && i !== decpt)) continue;\n\t\t\t\tj=out[i].v.indexOf(\".\")>-1&&i===decpt?out[i].v.indexOf(\".\")+1:0;\n\t\t\t\tvv = out[i].v.substr(0,j);\n\t\t\t\tfor(; j<out[i].v.length; ++j) {\n\t\t\t\t\tif(jj<ostr.length) vv += ostr.charAt(jj++);\n\t\t\t\t}\n\t\t\t\tout[i].v = vv;\n\t\t\t\tout[i].t = 't';\n\t\t\t\tlasti = i;\n\t\t\t}\n\t\t}\n\t}\n\tfor(i=0; i<out.length; ++i) if(out[i] != null && 'n?'.indexOf(out[i].t)>-1) {\n\t\tmyv = (flen >1 && v < 0 && i>0 && out[i-1].v === \"-\" ? -v:v);\n\t\tout[i].v = write_num(out[i].t, out[i].v, myv);\n\t\tout[i].t = 't';\n\t}\n\tvar retval = \"\";\n\tfor(i=0; i !== out.length; ++i) if(out[i] != null) retval += out[i].v;\n\treturn retval;\n}\nSSF._eval = eval_fmt;\nvar cfregex = /\\[[=<>]/;\nvar cfregex2 = /\\[(=|>[=]?|<[>=]?)(-?\\d+(?:\\.\\d*)?)\\]/;\nfunction chkcond(v, rr) {\n\tif(rr == null) return false;\n\tvar thresh = parseFloat(rr[2]);\n\tswitch(rr[1]) {\n\t\tcase \"=\":  if(v == thresh) return true; break;\n\t\tcase \">\":  if(v >  thresh) return true; break;\n\t\tcase \"<\":  if(v <  thresh) return true; break;\n\t\tcase \"<>\": if(v != thresh) return true; break;\n\t\tcase \">=\": if(v >= thresh) return true; break;\n\t\tcase \"<=\": if(v <= thresh) return true; break;\n\t}\n\treturn false;\n}\nfunction choose_fmt(f, v) {\n\tvar fmt = split_fmt(f);\n\tvar l = fmt.length, lat = fmt[l-1].indexOf(\"@\");\n\tif(l<4 && lat>-1) --l;\n\tif(fmt.length > 4) throw new Error(\"cannot find right format for |\" + fmt.join(\"|\") + \"|\");\n\tif(typeof v !== \"number\") return [4, fmt.length === 4 || lat>-1?fmt[fmt.length-1]:\"@\"];\n\tswitch(fmt.length) {\n\t\tcase 1: fmt = lat>-1 ? [\"General\", \"General\", \"General\", fmt[0]] : [fmt[0], fmt[0], fmt[0], \"@\"]; break;\n\t\tcase 2: fmt = lat>-1 ? [fmt[0], fmt[0], fmt[0], fmt[1]] : [fmt[0], fmt[1], fmt[0], \"@\"]; break;\n\t\tcase 3: fmt = lat>-1 ? [fmt[0], fmt[1], fmt[0], fmt[2]] : [fmt[0], fmt[1], fmt[2], \"@\"]; break;\n\t\tcase 4: break;\n\t}\n\tvar ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];\n\tif(fmt[0].indexOf(\"[\") === -1 && fmt[1].indexOf(\"[\") === -1) return [l, ff];\n\tif(fmt[0].match(cfregex) != null || fmt[1].match(cfregex) != null) {\n\t\tvar m1 = fmt[0].match(cfregex2);\n\t\tvar m2 = fmt[1].match(cfregex2);\n\t\treturn chkcond(v, m1) ? [l, fmt[0]] : chkcond(v, m2) ? [l, fmt[1]] : [l, fmt[m1 != null && m2 != null ? 2 : 1]];\n\t}\n\treturn [l, ff];\n}\nfunction format(fmt,v,o) {\n\tif(o == null) o = {};\n\tvar sfmt = \"\";\n\tswitch(typeof fmt) {\n\t\tcase \"string\":\n\t\t\tif(fmt == \"m/d/yy\" && o.dateNF) sfmt = o.dateNF;\n\t\t\telse sfmt = fmt;\n\t\t\tbreak;\n\t\tcase \"number\":\n\t\t\tif(fmt == 14 && o.dateNF) sfmt = o.dateNF;\n\t\t\telse sfmt = (o.table != null ? (o.table) : table_fmt)[fmt];\n\t\t\tif(sfmt == null) sfmt = (o.table && o.table[default_map[fmt]]) || table_fmt[default_map[fmt]];\n\t\t\tif(sfmt == null) sfmt = default_str[fmt] || \"General\";\n\t\t\tbreak;\n\t}\n\tif(isgeneral(sfmt,0)) return general_fmt(v, o);\n\tif(v instanceof Date) v = datenum_local(v, o.date1904);\n\tvar f = choose_fmt(sfmt, v);\n\tif(isgeneral(f[1])) return general_fmt(v, o);\n\tif(v === true) v = \"TRUE\"; else if(v === false) v = \"FALSE\";\n\telse if(v === \"\" || v == null) return \"\";\n\treturn eval_fmt(f[1], v, o, f[0]);\n}\nfunction load_entry(fmt, idx) {\n\tif(typeof idx != 'number') {\n\t\tidx = +idx || -1;\nfor(var i = 0; i < 0x0188; ++i) {\nif(table_fmt[i] == undefined) { if(idx < 0) idx = i; continue; }\n\t\t\tif(table_fmt[i] == fmt) { idx = i; break; }\n\t\t}\nif(idx < 0) idx = 0x187;\n\t}\ntable_fmt[idx] = fmt;\n\treturn idx;\n}\nSSF.load = load_entry;\nSSF._table = table_fmt;\nSSF.get_table = function get_table() { return table_fmt; };\nSSF.load_table = function load_table(tbl) {\n\tfor(var i=0; i!=0x0188; ++i)\n\t\tif(tbl[i] !== undefined) load_entry(tbl[i], i);\n};\nSSF.init_table = init_table;\nSSF.format = format;\n};\nmake_ssf(SSF);\n/* map from xlml named formats to SSF TODO: localize */\nvar XLMLFormatMap/*{[string]:string}*/ = ({\n\t\"General Number\": \"General\",\n\t\"General Date\": SSF._table[22],\n\t\"Long Date\": \"dddd, mmmm dd, yyyy\",\n\t\"Medium Date\": SSF._table[15],\n\t\"Short Date\": SSF._table[14],\n\t\"Long Time\": SSF._table[19],\n\t\"Medium Time\": SSF._table[18],\n\t\"Short Time\": SSF._table[20],\n\t\"Currency\": '\"$\"#,##0.00_);[Red]\\\\(\"$\"#,##0.00\\\\)',\n\t\"Fixed\": SSF._table[2],\n\t\"Standard\": SSF._table[4],\n\t\"Percent\": SSF._table[10],\n\t\"Scientific\": SSF._table[11],\n\t\"Yes/No\": '\"Yes\";\"Yes\";\"No\";@',\n\t\"True/False\": '\"True\";\"True\";\"False\";@',\n\t\"On/Off\": '\"Yes\";\"Yes\";\"No\";@'\n});\n\nvar SSFImplicit/*{[number]:string}*/ = ({\n\t\"5\": '\"$\"#,##0_);\\\\(\"$\"#,##0\\\\)',\n\t\"6\": '\"$\"#,##0_);[Red]\\\\(\"$\"#,##0\\\\)',\n\t\"7\": '\"$\"#,##0.00_);\\\\(\"$\"#,##0.00\\\\)',\n\t\"8\": '\"$\"#,##0.00_);[Red]\\\\(\"$\"#,##0.00\\\\)',\n\t\"23\": 'General', \"24\": 'General', \"25\": 'General', \"26\": 'General',\n\t\"27\": 'm/d/yy', \"28\": 'm/d/yy', \"29\": 'm/d/yy', \"30\": 'm/d/yy', \"31\": 'm/d/yy',\n\t\"32\": 'h:mm:ss', \"33\": 'h:mm:ss', \"34\": 'h:mm:ss', \"35\": 'h:mm:ss',\n\t\"36\": 'm/d/yy',\n\t\"41\": '_(* #,##0_);_(* \\(#,##0\\);_(* \"-\"_);_(@_)',\n\t\"42\": '_(\"$\"* #,##0_);_(\"$\"* \\(#,##0\\);_(\"$\"* \"-\"_);_(@_)',\n\t\"43\": '_(* #,##0.00_);_(* \\(#,##0.00\\);_(* \"-\"??_);_(@_)',\n\t\"44\": '_(\"$\"* #,##0.00_);_(\"$\"* \\(#,##0.00\\);_(\"$\"* \"-\"??_);_(@_)',\n\t\"50\": 'm/d/yy', \"51\": 'm/d/yy', \"52\": 'm/d/yy', \"53\": 'm/d/yy', \"54\": 'm/d/yy',\n\t\"55\": 'm/d/yy', \"56\": 'm/d/yy', \"57\": 'm/d/yy', \"58\": 'm/d/yy',\n\t\"59\": '0',\n\t\"60\": '0.00',\n\t\"61\": '#,##0',\n\t\"62\": '#,##0.00',\n\t\"63\": '\"$\"#,##0_);\\\\(\"$\"#,##0\\\\)',\n\t\"64\": '\"$\"#,##0_);[Red]\\\\(\"$\"#,##0\\\\)',\n\t\"65\": '\"$\"#,##0.00_);\\\\(\"$\"#,##0.00\\\\)',\n\t\"66\": '\"$\"#,##0.00_);[Red]\\\\(\"$\"#,##0.00\\\\)',\n\t\"67\": '0%',\n\t\"68\": '0.00%',\n\t\"69\": '# ?/?',\n\t\"70\": '# ??/??',\n\t\"71\": 'm/d/yy',\n\t\"72\": 'm/d/yy',\n\t\"73\": 'd-mmm-yy',\n\t\"74\": 'd-mmm',\n\t\"75\": 'mmm-yy',\n\t\"76\": 'h:mm',\n\t\"77\": 'h:mm:ss',\n\t\"78\": 'm/d/yy h:mm',\n\t\"79\": 'mm:ss',\n\t\"80\": '[h]:mm:ss',\n\t\"81\": 'mmss.0'\n});\n\n/* dateNF parse TODO: move to SSF */\nvar dateNFregex = /[dD]+|[mM]+|[yYeE]+|[Hh]+|[Ss]+/g;\nfunction dateNF_regex(dateNF) {\n\tvar fmt = typeof dateNF == \"number\" ? SSF._table[dateNF] : dateNF;\n\tfmt = fmt.replace(dateNFregex, \"(\\\\d+)\");\n\treturn new RegExp(\"^\" + fmt + \"$\");\n}\nfunction dateNF_fix(str, dateNF, match) {\n\tvar Y = -1, m = -1, d = -1, H = -1, M = -1, S = -1;\n\t(dateNF.match(dateNFregex)||[]).forEach(function(n, i) {\n\t\tvar v = parseInt(match[i+1], 10);\n\t\tswitch(n.toLowerCase().charAt(0)) {\n\t\t\tcase 'y': Y = v; break; case 'd': d = v; break;\n\t\t\tcase 'h': H = v; break; case 's': S = v; break;\n\t\t\tcase 'm': if(H >= 0) M = v; else m = v; break;\n\t\t}\n\t});\n\tif(S >= 0 && M == -1 && m >= 0) { M = m; m = -1; }\n\tvar datestr = ((\"\" + (Y>=0?Y: new Date().getFullYear())).slice(-4) + \"-\" + (\"00\" + (m>=1?m:1)).slice(-2) + \"-\" + (\"00\" + (d>=1?d:1)).slice(-2));\n\tif(datestr.length == 7) datestr = \"0\" + datestr;\n\tif(datestr.length == 8) datestr = \"20\" + datestr;\n\tvar timestr = ((\"00\" + (H>=0?H:0)).slice(-2) + \":\" + (\"00\" + (M>=0?M:0)).slice(-2) + \":\" + (\"00\" + (S>=0?S:0)).slice(-2));\n\tif(H == -1 && M == -1 && S == -1) return datestr;\n\tif(Y == -1 && m == -1 && d == -1) return timestr;\n\treturn datestr + \"T\" + timestr;\n}\n\nvar DO_NOT_EXPORT_CFB = true;\n/* cfb.js (C) 2013-present SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*jshint eqnull:true */\n/*exported CFB */\n/*global Uint8Array:false, Uint16Array:false */\n\n/* crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*exported CRC32 */\nvar CRC32;\n(function (factory) {\n\t/*jshint ignore:start */\n\t/*eslint-disable */\n\tfactory(CRC32 = {});\n\t/*eslint-enable */\n\t/*jshint ignore:end */\n}(function(CRC32) {\nCRC32.version = '1.2.0';\n/* see perf/crc32table.js */\n/*global Int32Array */\nfunction signed_crc_table() {\n\tvar c = 0, table = new Array(256);\n\n\tfor(var n =0; n != 256; ++n){\n\t\tc = n;\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\ttable[n] = c;\n\t}\n\n\treturn typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;\n}\n\nvar T = signed_crc_table();\nfunction crc32_bstr(bstr, seed) {\n\tvar C = seed ^ -1, L = bstr.length - 1;\n\tfor(var i = 0; i < L;) {\n\t\tC = (C>>>8) ^ T[(C^bstr.charCodeAt(i++))&0xFF];\n\t\tC = (C>>>8) ^ T[(C^bstr.charCodeAt(i++))&0xFF];\n\t}\n\tif(i === L) C = (C>>>8) ^ T[(C ^ bstr.charCodeAt(i))&0xFF];\n\treturn C ^ -1;\n}\n\nfunction crc32_buf(buf, seed) {\n\tif(buf.length > 10000) return crc32_buf_8(buf, seed);\n\tvar C = seed ^ -1, L = buf.length - 3;\n\tfor(var i = 0; i < L;) {\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t}\n\twhile(i < L+3) C = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\treturn C ^ -1;\n}\n\nfunction crc32_buf_8(buf, seed) {\n\tvar C = seed ^ -1, L = buf.length - 7;\n\tfor(var i = 0; i < L;) {\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t}\n\twhile(i < L+7) C = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\treturn C ^ -1;\n}\n\nfunction crc32_str(str, seed) {\n\tvar C = seed ^ -1;\n\tfor(var i = 0, L=str.length, c, d; i < L;) {\n\t\tc = str.charCodeAt(i++);\n\t\tif(c < 0x80) {\n\t\t\tC = (C>>>8) ^ T[(C ^ c)&0xFF];\n\t\t} else if(c < 0x800) {\n\t\t\tC = (C>>>8) ^ T[(C ^ (192|((c>>6)&31)))&0xFF];\n\t\t\tC = (C>>>8) ^ T[(C ^ (128|(c&63)))&0xFF];\n\t\t} else if(c >= 0xD800 && c < 0xE000) {\n\t\t\tc = (c&1023)+64; d = str.charCodeAt(i++)&1023;\n\t\t\tC = (C>>>8) ^ T[(C ^ (240|((c>>8)&7)))&0xFF];\n\t\t\tC = (C>>>8) ^ T[(C ^ (128|((c>>2)&63)))&0xFF];\n\t\t\tC = (C>>>8) ^ T[(C ^ (128|((d>>6)&15)|((c&3)<<4)))&0xFF];\n\t\t\tC = (C>>>8) ^ T[(C ^ (128|(d&63)))&0xFF];\n\t\t} else {\n\t\t\tC = (C>>>8) ^ T[(C ^ (224|((c>>12)&15)))&0xFF];\n\t\t\tC = (C>>>8) ^ T[(C ^ (128|((c>>6)&63)))&0xFF];\n\t\t\tC = (C>>>8) ^ T[(C ^ (128|(c&63)))&0xFF];\n\t\t}\n\t}\n\treturn C ^ -1;\n}\nCRC32.table = T;\nCRC32.bstr = crc32_bstr;\nCRC32.buf = crc32_buf;\nCRC32.str = crc32_str;\n}));\n/* [MS-CFB] v20171201 */\nvar CFB = (function _CFB(){\nvar exports = {};\nexports.version = '1.1.4';\n/* [MS-CFB] 2.6.4 */\nfunction namecmp(l, r) {\n\tvar L = l.split(\"/\"), R = r.split(\"/\");\n\tfor(var i = 0, c = 0, Z = Math.min(L.length, R.length); i < Z; ++i) {\n\t\tif((c = L[i].length - R[i].length)) return c;\n\t\tif(L[i] != R[i]) return L[i] < R[i] ? -1 : 1;\n\t}\n\treturn L.length - R.length;\n}\nfunction dirname(p) {\n\tif(p.charAt(p.length - 1) == \"/\") return (p.slice(0,-1).indexOf(\"/\") === -1) ? p : dirname(p.slice(0, -1));\n\tvar c = p.lastIndexOf(\"/\");\n\treturn (c === -1) ? p : p.slice(0, c+1);\n}\n\nfunction filename(p) {\n\tif(p.charAt(p.length - 1) == \"/\") return filename(p.slice(0, -1));\n\tvar c = p.lastIndexOf(\"/\");\n\treturn (c === -1) ? p : p.slice(c+1);\n}\n/* -------------------------------------------------------------------------- */\n/* DOS Date format:\n   high|YYYYYYYm.mmmddddd.HHHHHMMM.MMMSSSSS|low\n   add 1980 to stored year\n   stored second should be doubled\n*/\n\n/* write JS date to buf as a DOS date */\nfunction write_dos_date(buf, date) {\n\tif(typeof date === \"string\") date = new Date(date);\n\tvar hms = date.getHours();\n\thms = hms << 6 | date.getMinutes();\n\thms = hms << 5 | (date.getSeconds()>>>1);\n\tbuf.write_shift(2, hms);\n\tvar ymd = (date.getFullYear() - 1980);\n\tymd = ymd << 4 | (date.getMonth()+1);\n\tymd = ymd << 5 | date.getDate();\n\tbuf.write_shift(2, ymd);\n}\n\n/* read four bytes from buf and interpret as a DOS date */\nfunction parse_dos_date(buf) {\n\tvar hms = buf.read_shift(2) & 0xFFFF;\n\tvar ymd = buf.read_shift(2) & 0xFFFF;\n\tvar val = new Date();\n\tvar d = ymd & 0x1F; ymd >>>= 5;\n\tvar m = ymd & 0x0F; ymd >>>= 4;\n\tval.setMilliseconds(0);\n\tval.setFullYear(ymd + 1980);\n\tval.setMonth(m-1);\n\tval.setDate(d);\n\tvar S = hms & 0x1F; hms >>>= 5;\n\tvar M = hms & 0x3F; hms >>>= 6;\n\tval.setHours(hms);\n\tval.setMinutes(M);\n\tval.setSeconds(S<<1);\n\treturn val;\n}\nfunction parse_extra_field(blob) {\n\tprep_blob(blob, 0);\n\tvar o = {};\n\tvar flags = 0;\n\twhile(blob.l <= blob.length - 4) {\n\t\tvar type = blob.read_shift(2);\n\t\tvar sz = blob.read_shift(2), tgt = blob.l + sz;\n\t\tvar p = {};\n\t\tswitch(type) {\n\t\t\t/* UNIX-style Timestamps */\n\t\t\tcase 0x5455: {\n\t\t\t\tflags = blob.read_shift(1);\n\t\t\t\tif(flags & 1) p.mtime = blob.read_shift(4);\n\t\t\t\t/* for some reason, CD flag corresponds to LFH */\n\t\t\t\tif(sz > 5) {\n\t\t\t\t\tif(flags & 2) p.atime = blob.read_shift(4);\n\t\t\t\t\tif(flags & 4) p.ctime = blob.read_shift(4);\n\t\t\t\t}\n\t\t\t\tif(p.mtime) p.mt = new Date(p.mtime*1000);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tblob.l = tgt;\n\t\to[type] = p;\n\t}\n\treturn o;\n}\nvar fs;\nfunction get_fs() { return fs || (fs = __webpack_require__(/*! fs */ 2)); }\nfunction parse(file, options) {\nif(file[0] == 0x50 && file[1] == 0x4b) return parse_zip(file, options);\nif(file.length < 512) throw new Error(\"CFB file size \" + file.length + \" < 512\");\nvar mver = 3;\nvar ssz = 512;\nvar nmfs = 0; // number of mini FAT sectors\nvar difat_sec_cnt = 0;\nvar dir_start = 0;\nvar minifat_start = 0;\nvar difat_start = 0;\n\nvar fat_addrs = []; // locations of FAT sectors\n\n/* [MS-CFB] 2.2 Compound File Header */\nvar blob = file.slice(0,512);\nprep_blob(blob, 0);\n\n/* major version */\nvar mv = check_get_mver(blob);\nmver = mv[0];\nswitch(mver) {\n\tcase 3: ssz = 512; break; case 4: ssz = 4096; break;\n\tcase 0: if(mv[1] == 0) return parse_zip(file, options);\n\t/* falls through */\n\tdefault: throw new Error(\"Major Version: Expected 3 or 4 saw \" + mver);\n}\n\n/* reprocess header */\nif(ssz !== 512) { blob = file.slice(0,ssz); prep_blob(blob, 28 /* blob.l */); }\n/* Save header for final object */\nvar header = file.slice(0,ssz);\n\ncheck_shifts(blob, mver);\n\n// Number of Directory Sectors\nvar dir_cnt = blob.read_shift(4, 'i');\nif(mver === 3 && dir_cnt !== 0) throw new Error('# Directory Sectors: Expected 0 saw ' + dir_cnt);\n\n// Number of FAT Sectors\nblob.l += 4;\n\n// First Directory Sector Location\ndir_start = blob.read_shift(4, 'i');\n\n// Transaction Signature\nblob.l += 4;\n\n// Mini Stream Cutoff Size\nblob.chk('00100000', 'Mini Stream Cutoff Size: ');\n\n// First Mini FAT Sector Location\nminifat_start = blob.read_shift(4, 'i');\n\n// Number of Mini FAT Sectors\nnmfs = blob.read_shift(4, 'i');\n\n// First DIFAT sector location\ndifat_start = blob.read_shift(4, 'i');\n\n// Number of DIFAT Sectors\ndifat_sec_cnt = blob.read_shift(4, 'i');\n\n// Grab FAT Sector Locations\nfor(var q = -1, j = 0; j < 109; ++j) { /* 109 = (512 - blob.l)>>>2; */\n\tq = blob.read_shift(4, 'i');\n\tif(q<0) break;\n\tfat_addrs[j] = q;\n}\n\n/** Break the file up into sectors */\nvar sectors = sectorify(file, ssz);\n\nsleuth_fat(difat_start, difat_sec_cnt, sectors, ssz, fat_addrs);\n\n/** Chains */\nvar sector_list = make_sector_list(sectors, dir_start, fat_addrs, ssz);\n\nsector_list[dir_start].name = \"!Directory\";\nif(nmfs > 0 && minifat_start !== ENDOFCHAIN) sector_list[minifat_start].name = \"!MiniFAT\";\nsector_list[fat_addrs[0]].name = \"!FAT\";\nsector_list.fat_addrs = fat_addrs;\nsector_list.ssz = ssz;\n\n/* [MS-CFB] 2.6.1 Compound File Directory Entry */\nvar files = {}, Paths = [], FileIndex = [], FullPaths = [];\nread_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, minifat_start);\n\nbuild_full_paths(FileIndex, FullPaths, Paths);\nPaths.shift();\n\nvar o = {\n\tFileIndex: FileIndex,\n\tFullPaths: FullPaths\n};\n\n// $FlowIgnore\nif(options && options.raw) o.raw = {header: header, sectors: sectors};\nreturn o;\n} // parse\n\n/* [MS-CFB] 2.2 Compound File Header -- read up to major version */\nfunction check_get_mver(blob) {\n\tif(blob[blob.l] == 0x50 && blob[blob.l + 1] == 0x4b) return [0, 0];\n\t// header signature 8\n\tblob.chk(HEADER_SIGNATURE, 'Header Signature: ');\n\n\t// clsid 16\n\t//blob.chk(HEADER_CLSID, 'CLSID: ');\n\tblob.l += 16;\n\n\t// minor version 2\n\tvar mver = blob.read_shift(2, 'u');\n\n\treturn [blob.read_shift(2,'u'), mver];\n}\nfunction check_shifts(blob, mver) {\n\tvar shift = 0x09;\n\n\t// Byte Order\n\t//blob.chk('feff', 'Byte Order: '); // note: some writers put 0xffff\n\tblob.l += 2;\n\n\t// Sector Shift\n\tswitch((shift = blob.read_shift(2))) {\n\t\tcase 0x09: if(mver != 3) throw new Error('Sector Shift: Expected 9 saw ' + shift); break;\n\t\tcase 0x0c: if(mver != 4) throw new Error('Sector Shift: Expected 12 saw ' + shift); break;\n\t\tdefault: throw new Error('Sector Shift: Expected 9 or 12 saw ' + shift);\n\t}\n\n\t// Mini Sector Shift\n\tblob.chk('0600', 'Mini Sector Shift: ');\n\n\t// Reserved\n\tblob.chk('000000000000', 'Reserved: ');\n}\n\n/** Break the file up into sectors */\nfunction sectorify(file, ssz) {\n\tvar nsectors = Math.ceil(file.length/ssz)-1;\n\tvar sectors = [];\n\tfor(var i=1; i < nsectors; ++i) sectors[i-1] = file.slice(i*ssz,(i+1)*ssz);\n\tsectors[nsectors-1] = file.slice(nsectors*ssz);\n\treturn sectors;\n}\n\n/* [MS-CFB] 2.6.4 Red-Black Tree */\nfunction build_full_paths(FI, FP, Paths) {\n\tvar i = 0, L = 0, R = 0, C = 0, j = 0, pl = Paths.length;\n\tvar dad = [], q = [];\n\n\tfor(; i < pl; ++i) { dad[i]=q[i]=i; FP[i]=Paths[i]; }\n\n\tfor(; j < q.length; ++j) {\n\t\ti = q[j];\n\t\tL = FI[i].L; R = FI[i].R; C = FI[i].C;\n\t\tif(dad[i] === i) {\n\t\t\tif(L !== -1 /*NOSTREAM*/ && dad[L] !== L) dad[i] = dad[L];\n\t\t\tif(R !== -1 && dad[R] !== R) dad[i] = dad[R];\n\t\t}\n\t\tif(C !== -1 /*NOSTREAM*/) dad[C] = i;\n\t\tif(L !== -1 && i != dad[i]) { dad[L] = dad[i]; if(q.lastIndexOf(L) < j) q.push(L); }\n\t\tif(R !== -1 && i != dad[i]) { dad[R] = dad[i]; if(q.lastIndexOf(R) < j) q.push(R); }\n\t}\n\tfor(i=1; i < pl; ++i) if(dad[i] === i) {\n\t\tif(R !== -1 /*NOSTREAM*/ && dad[R] !== R) dad[i] = dad[R];\n\t\telse if(L !== -1 && dad[L] !== L) dad[i] = dad[L];\n\t}\n\n\tfor(i=1; i < pl; ++i) {\n\t\tif(FI[i].type === 0 /* unknown */) continue;\n\t\tj = i;\n\t\tif(j != dad[j]) do {\n\t\t\tj = dad[j];\n\t\t\tFP[i] = FP[j] + \"/\" + FP[i];\n\t\t} while (j !== 0 && -1 !== dad[j] && j != dad[j]);\n\t\tdad[i] = -1;\n\t}\n\n\tFP[0] += \"/\";\n\tfor(i=1; i < pl; ++i) {\n\t\tif(FI[i].type !== 2 /* stream */) FP[i] += \"/\";\n\t}\n}\n\nfunction get_mfat_entry(entry, payload, mini) {\n\tvar start = entry.start, size = entry.size;\n\t//return (payload.slice(start*MSSZ, start*MSSZ + size));\n\tvar o = [];\n\tvar idx = start;\n\twhile(mini && size > 0 && idx >= 0) {\n\t\to.push(payload.slice(idx * MSSZ, idx * MSSZ + MSSZ));\n\t\tsize -= MSSZ;\n\t\tidx = __readInt32LE(mini, idx * 4);\n\t}\n\tif(o.length === 0) return (new_buf(0));\n\treturn (bconcat(o).slice(0, entry.size));\n}\n\n/** Chase down the rest of the DIFAT chain to build a comprehensive list\n    DIFAT chains by storing the next sector number as the last 32 bits */\nfunction sleuth_fat(idx, cnt, sectors, ssz, fat_addrs) {\n\tvar q = ENDOFCHAIN;\n\tif(idx === ENDOFCHAIN) {\n\t\tif(cnt !== 0) throw new Error(\"DIFAT chain shorter than expected\");\n\t} else if(idx !== -1 /*FREESECT*/) {\n\t\tvar sector = sectors[idx], m = (ssz>>>2)-1;\n\t\tif(!sector) return;\n\t\tfor(var i = 0; i < m; ++i) {\n\t\t\tif((q = __readInt32LE(sector,i*4)) === ENDOFCHAIN) break;\n\t\t\tfat_addrs.push(q);\n\t\t}\n\t\tif(cnt >= 1) sleuth_fat(__readInt32LE(sector,ssz-4),cnt - 1, sectors, ssz, fat_addrs);\n\t}\n}\n\n/** Follow the linked list of sectors for a given starting point */\nfunction get_sector_list(sectors, start, fat_addrs, ssz, chkd) {\n\tvar buf = [], buf_chain = [];\n\tif(!chkd) chkd = [];\n\tvar modulus = ssz - 1, j = 0, jj = 0;\n\tfor(j=start; j>=0;) {\n\t\tchkd[j] = true;\n\t\tbuf[buf.length] = j;\n\t\tbuf_chain.push(sectors[j]);\n\t\tvar addr = fat_addrs[Math.floor(j*4/ssz)];\n\t\tjj = ((j*4) & modulus);\n\t\tif(ssz < 4 + jj) throw new Error(\"FAT boundary crossed: \" + j + \" 4 \"+ssz);\n\t\tif(!sectors[addr]) break;\n\t\tj = __readInt32LE(sectors[addr], jj);\n\t}\n\treturn {nodes: buf, data:__toBuffer([buf_chain])};\n}\n\n/** Chase down the sector linked lists */\nfunction make_sector_list(sectors, dir_start, fat_addrs, ssz) {\n\tvar sl = sectors.length, sector_list = ([]);\n\tvar chkd = [], buf = [], buf_chain = [];\n\tvar modulus = ssz - 1, i=0, j=0, k=0, jj=0;\n\tfor(i=0; i < sl; ++i) {\n\t\tbuf = ([]);\n\t\tk = (i + dir_start); if(k >= sl) k-=sl;\n\t\tif(chkd[k]) continue;\n\t\tbuf_chain = [];\n\t\tvar seen = [];\n\t\tfor(j=k; j>=0;) {\n\t\t\tseen[j] = true;\n\t\t\tchkd[j] = true;\n\t\t\tbuf[buf.length] = j;\n\t\t\tbuf_chain.push(sectors[j]);\n\t\t\tvar addr = fat_addrs[Math.floor(j*4/ssz)];\n\t\t\tjj = ((j*4) & modulus);\n\t\t\tif(ssz < 4 + jj) throw new Error(\"FAT boundary crossed: \" + j + \" 4 \"+ssz);\n\t\t\tif(!sectors[addr]) break;\n\t\t\tj = __readInt32LE(sectors[addr], jj);\n\t\t\tif(seen[j]) break;\n\t\t}\n\t\tsector_list[k] = ({nodes: buf, data:__toBuffer([buf_chain])});\n\t}\n\treturn sector_list;\n}\n\n/* [MS-CFB] 2.6.1 Compound File Directory Entry */\nfunction read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, mini) {\n\tvar minifat_store = 0, pl = (Paths.length?2:0);\n\tvar sector = sector_list[dir_start].data;\n\tvar i = 0, namelen = 0, name;\n\tfor(; i < sector.length; i+= 128) {\n\t\tvar blob = sector.slice(i, i+128);\n\t\tprep_blob(blob, 64);\n\t\tnamelen = blob.read_shift(2);\n\t\tname = __utf16le(blob,0,namelen-pl);\n\t\tPaths.push(name);\n\t\tvar o = ({\n\t\t\tname:  name,\n\t\t\ttype:  blob.read_shift(1),\n\t\t\tcolor: blob.read_shift(1),\n\t\t\tL:     blob.read_shift(4, 'i'),\n\t\t\tR:     blob.read_shift(4, 'i'),\n\t\t\tC:     blob.read_shift(4, 'i'),\n\t\t\tclsid: blob.read_shift(16),\n\t\t\tstate: blob.read_shift(4, 'i'),\n\t\t\tstart: 0,\n\t\t\tsize: 0\n\t\t});\n\t\tvar ctime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);\n\t\tif(ctime !== 0) o.ct = read_date(blob, blob.l-8);\n\t\tvar mtime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);\n\t\tif(mtime !== 0) o.mt = read_date(blob, blob.l-8);\n\t\to.start = blob.read_shift(4, 'i');\n\t\to.size = blob.read_shift(4, 'i');\n\t\tif(o.size < 0 && o.start < 0) { o.size = o.type = 0; o.start = ENDOFCHAIN; o.name = \"\"; }\n\t\tif(o.type === 5) { /* root */\n\t\t\tminifat_store = o.start;\n\t\t\tif(nmfs > 0 && minifat_store !== ENDOFCHAIN) sector_list[minifat_store].name = \"!StreamData\";\n\t\t\t/*minifat_size = o.size;*/\n\t\t} else if(o.size >= 4096 /* MSCSZ */) {\n\t\t\to.storage = 'fat';\n\t\t\tif(sector_list[o.start] === undefined) sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);\n\t\t\tsector_list[o.start].name = o.name;\n\t\t\to.content = (sector_list[o.start].data.slice(0,o.size));\n\t\t} else {\n\t\t\to.storage = 'minifat';\n\t\t\tif(o.size < 0) o.size = 0;\n\t\t\telse if(minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN && sector_list[minifat_store]) {\n\t\t\t\to.content = get_mfat_entry(o, sector_list[minifat_store].data, (sector_list[mini]||{}).data);\n\t\t\t}\n\t\t}\n\t\tif(o.content) prep_blob(o.content, 0);\n\t\tfiles[name] = o;\n\t\tFileIndex.push(o);\n\t}\n}\n\nfunction read_date(blob, offset) {\n\treturn new Date(( ( (__readUInt32LE(blob,offset+4)/1e7)*Math.pow(2,32)+__readUInt32LE(blob,offset)/1e7 ) - 11644473600)*1000);\n}\n\nfunction read_file(filename, options) {\n\tget_fs();\n\treturn parse(fs.readFileSync(filename), options);\n}\n\nfunction read(blob, options) {\n\tswitch(options && options.type || \"base64\") {\n\t\tcase \"file\": return read_file(blob, options);\n\t\tcase \"base64\": return parse(s2a(Base64.decode(blob)), options);\n\t\tcase \"binary\": return parse(s2a(blob), options);\n\t}\n\treturn parse(blob, options);\n}\n\nfunction init_cfb(cfb, opts) {\n\tvar o = opts || {}, root = o.root || \"Root Entry\";\n\tif(!cfb.FullPaths) cfb.FullPaths = [];\n\tif(!cfb.FileIndex) cfb.FileIndex = [];\n\tif(cfb.FullPaths.length !== cfb.FileIndex.length) throw new Error(\"inconsistent CFB structure\");\n\tif(cfb.FullPaths.length === 0) {\n\t\tcfb.FullPaths[0] = root + \"/\";\n\t\tcfb.FileIndex[0] = ({ name: root, type: 5 });\n\t}\n\tif(o.CLSID) cfb.FileIndex[0].clsid = o.CLSID;\n\tseed_cfb(cfb);\n}\nfunction seed_cfb(cfb) {\n\tvar nm = \"\\u0001Sh33tJ5\";\n\tif(CFB.find(cfb, \"/\" + nm)) return;\n\tvar p = new_buf(4); p[0] = 55; p[1] = p[3] = 50; p[2] = 54;\n\tcfb.FileIndex.push(({ name: nm, type: 2, content:p, size:4, L:69, R:69, C:69 }));\n\tcfb.FullPaths.push(cfb.FullPaths[0] + nm);\n\trebuild_cfb(cfb);\n}\nfunction rebuild_cfb(cfb, f) {\n\tinit_cfb(cfb);\n\tvar gc = false, s = false;\n\tfor(var i = cfb.FullPaths.length - 1; i >= 0; --i) {\n\t\tvar _file = cfb.FileIndex[i];\n\t\tswitch(_file.type) {\n\t\t\tcase 0:\n\t\t\t\tif(s) gc = true;\n\t\t\t\telse { cfb.FileIndex.pop(); cfb.FullPaths.pop(); }\n\t\t\t\tbreak;\n\t\t\tcase 1: case 2: case 5:\n\t\t\t\ts = true;\n\t\t\t\tif(isNaN(_file.R * _file.L * _file.C)) gc = true;\n\t\t\t\tif(_file.R > -1 && _file.L > -1 && _file.R == _file.L) gc = true;\n\t\t\t\tbreak;\n\t\t\tdefault: gc = true; break;\n\t\t}\n\t}\n\tif(!gc && !f) return;\n\n\tvar now = new Date(1987, 1, 19), j = 0;\n\tvar data = [];\n\tfor(i = 0; i < cfb.FullPaths.length; ++i) {\n\t\tif(cfb.FileIndex[i].type === 0) continue;\n\t\tdata.push([cfb.FullPaths[i], cfb.FileIndex[i]]);\n\t}\n\tfor(i = 0; i < data.length; ++i) {\n\t\tvar dad = dirname(data[i][0]);\n\t\ts = false;\n\t\tfor(j = 0; j < data.length; ++j) if(data[j][0] === dad) s = true;\n\t\tif(!s) data.push([dad, ({\n\t\t\tname: filename(dad).replace(\"/\",\"\"),\n\t\t\ttype: 1,\n\t\t\tclsid: HEADER_CLSID,\n\t\t\tct: now, mt: now,\n\t\t\tcontent: null\n\t\t})]);\n\t}\n\n\tdata.sort(function(x,y) { return namecmp(x[0], y[0]); });\n\tcfb.FullPaths = []; cfb.FileIndex = [];\n\tfor(i = 0; i < data.length; ++i) { cfb.FullPaths[i] = data[i][0]; cfb.FileIndex[i] = data[i][1]; }\n\tfor(i = 0; i < data.length; ++i) {\n\t\tvar elt = cfb.FileIndex[i];\n\t\tvar nm = cfb.FullPaths[i];\n\n\t\telt.name =  filename(nm).replace(\"/\",\"\");\n\t\telt.L = elt.R = elt.C = -(elt.color = 1);\n\t\telt.size = elt.content ? elt.content.length : 0;\n\t\telt.start = 0;\n\t\telt.clsid = (elt.clsid || HEADER_CLSID);\n\t\tif(i === 0) {\n\t\t\telt.C = data.length > 1 ? 1 : -1;\n\t\t\telt.size = 0;\n\t\t\telt.type = 5;\n\t\t} else if(nm.slice(-1) == \"/\") {\n\t\t\tfor(j=i+1;j < data.length; ++j) if(dirname(cfb.FullPaths[j])==nm) break;\n\t\t\telt.C = j >= data.length ? -1 : j;\n\t\t\tfor(j=i+1;j < data.length; ++j) if(dirname(cfb.FullPaths[j])==dirname(nm)) break;\n\t\t\telt.R = j >= data.length ? -1 : j;\n\t\t\telt.type = 1;\n\t\t} else {\n\t\t\tif(dirname(cfb.FullPaths[i+1]||\"\") == dirname(nm)) elt.R = i + 1;\n\t\t\telt.type = 2;\n\t\t}\n\t}\n\n}\n\nfunction _write(cfb, options) {\n\tvar _opts = options || {};\n\trebuild_cfb(cfb);\n\tif(_opts.fileType == 'zip') return write_zip(cfb, _opts);\n\tvar L = (function(cfb){\n\t\tvar mini_size = 0, fat_size = 0;\n\t\tfor(var i = 0; i < cfb.FileIndex.length; ++i) {\n\t\t\tvar file = cfb.FileIndex[i];\n\t\t\tif(!file.content) continue;\nvar flen = file.content.length;\n\t\t\tif(flen > 0){\n\t\t\t\tif(flen < 0x1000) mini_size += (flen + 0x3F) >> 6;\n\t\t\t\telse fat_size += (flen + 0x01FF) >> 9;\n\t\t\t}\n\t\t}\n\t\tvar dir_cnt = (cfb.FullPaths.length +3) >> 2;\n\t\tvar mini_cnt = (mini_size + 7) >> 3;\n\t\tvar mfat_cnt = (mini_size + 0x7F) >> 7;\n\t\tvar fat_base = mini_cnt + fat_size + dir_cnt + mfat_cnt;\n\t\tvar fat_cnt = (fat_base + 0x7F) >> 7;\n\t\tvar difat_cnt = fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt-109)/0x7F);\n\t\twhile(((fat_base + fat_cnt + difat_cnt + 0x7F) >> 7) > fat_cnt) difat_cnt = ++fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt-109)/0x7F);\n\t\tvar L =  [1, difat_cnt, fat_cnt, mfat_cnt, dir_cnt, fat_size, mini_size, 0];\n\t\tcfb.FileIndex[0].size = mini_size << 6;\n\t\tL[7] = (cfb.FileIndex[0].start=L[0]+L[1]+L[2]+L[3]+L[4]+L[5])+((L[6]+7) >> 3);\n\t\treturn L;\n\t})(cfb);\n\tvar o = new_buf(L[7] << 9);\n\tvar i = 0, T = 0;\n\t{\n\t\tfor(i = 0; i < 8; ++i) o.write_shift(1, HEADER_SIG[i]);\n\t\tfor(i = 0; i < 8; ++i) o.write_shift(2, 0);\n\t\to.write_shift(2, 0x003E);\n\t\to.write_shift(2, 0x0003);\n\t\to.write_shift(2, 0xFFFE);\n\t\to.write_shift(2, 0x0009);\n\t\to.write_shift(2, 0x0006);\n\t\tfor(i = 0; i < 3; ++i) o.write_shift(2, 0);\n\t\to.write_shift(4, 0);\n\t\to.write_shift(4, L[2]);\n\t\to.write_shift(4, L[0] + L[1] + L[2] + L[3] - 1);\n\t\to.write_shift(4, 0);\n\t\to.write_shift(4, 1<<12);\n\t\to.write_shift(4, L[3] ? L[0] + L[1] + L[2] - 1: ENDOFCHAIN);\n\t\to.write_shift(4, L[3]);\n\t\to.write_shift(-4, L[1] ? L[0] - 1: ENDOFCHAIN);\n\t\to.write_shift(4, L[1]);\n\t\tfor(i = 0; i < 109; ++i) o.write_shift(-4, i < L[2] ? L[1] + i : -1);\n\t}\n\tif(L[1]) {\n\t\tfor(T = 0; T < L[1]; ++T) {\n\t\t\tfor(; i < 236 + T * 127; ++i) o.write_shift(-4, i < L[2] ? L[1] + i : -1);\n\t\t\to.write_shift(-4, T === L[1] - 1 ? ENDOFCHAIN : T + 1);\n\t\t}\n\t}\n\tvar chainit = function(w) {\n\t\tfor(T += w; i<T-1; ++i) o.write_shift(-4, i+1);\n\t\tif(w) { ++i; o.write_shift(-4, ENDOFCHAIN); }\n\t};\n\tT = i = 0;\n\tfor(T+=L[1]; i<T; ++i) o.write_shift(-4, consts.DIFSECT);\n\tfor(T+=L[2]; i<T; ++i) o.write_shift(-4, consts.FATSECT);\n\tchainit(L[3]);\n\tchainit(L[4]);\n\tvar j = 0, flen = 0;\n\tvar file = cfb.FileIndex[0];\n\tfor(; j < cfb.FileIndex.length; ++j) {\n\t\tfile = cfb.FileIndex[j];\n\t\tif(!file.content) continue;\nflen = file.content.length;\n\t\tif(flen < 0x1000) continue;\n\t\tfile.start = T;\n\t\tchainit((flen + 0x01FF) >> 9);\n\t}\n\tchainit((L[6] + 7) >> 3);\n\twhile(o.l & 0x1FF) o.write_shift(-4, consts.ENDOFCHAIN);\n\tT = i = 0;\n\tfor(j = 0; j < cfb.FileIndex.length; ++j) {\n\t\tfile = cfb.FileIndex[j];\n\t\tif(!file.content) continue;\nflen = file.content.length;\n\t\tif(!flen || flen >= 0x1000) continue;\n\t\tfile.start = T;\n\t\tchainit((flen + 0x3F) >> 6);\n\t}\n\twhile(o.l & 0x1FF) o.write_shift(-4, consts.ENDOFCHAIN);\n\tfor(i = 0; i < L[4]<<2; ++i) {\n\t\tvar nm = cfb.FullPaths[i];\n\t\tif(!nm || nm.length === 0) {\n\t\t\tfor(j = 0; j < 17; ++j) o.write_shift(4, 0);\n\t\t\tfor(j = 0; j < 3; ++j) o.write_shift(4, -1);\n\t\t\tfor(j = 0; j < 12; ++j) o.write_shift(4, 0);\n\t\t\tcontinue;\n\t\t}\n\t\tfile = cfb.FileIndex[i];\n\t\tif(i === 0) file.start = file.size ? file.start - 1 : ENDOFCHAIN;\n\t\tvar _nm = (i === 0 && _opts.root) || file.name;\n\t\tflen = 2*(_nm.length+1);\n\t\to.write_shift(64, _nm, \"utf16le\");\n\t\to.write_shift(2, flen);\n\t\to.write_shift(1, file.type);\n\t\to.write_shift(1, file.color);\n\t\to.write_shift(-4, file.L);\n\t\to.write_shift(-4, file.R);\n\t\to.write_shift(-4, file.C);\n\t\tif(!file.clsid) for(j = 0; j < 4; ++j) o.write_shift(4, 0);\n\t\telse o.write_shift(16, file.clsid, \"hex\");\n\t\to.write_shift(4, file.state || 0);\n\t\to.write_shift(4, 0); o.write_shift(4, 0);\n\t\to.write_shift(4, 0); o.write_shift(4, 0);\n\t\to.write_shift(4, file.start);\n\t\to.write_shift(4, file.size); o.write_shift(4, 0);\n\t}\n\tfor(i = 1; i < cfb.FileIndex.length; ++i) {\n\t\tfile = cfb.FileIndex[i];\nif(file.size >= 0x1000) {\n\t\t\to.l = (file.start+1) << 9;\n\t\t\tfor(j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);\n\t\t\tfor(; j & 0x1FF; ++j) o.write_shift(1, 0);\n\t\t}\n\t}\n\tfor(i = 1; i < cfb.FileIndex.length; ++i) {\n\t\tfile = cfb.FileIndex[i];\nif(file.size > 0 && file.size < 0x1000) {\n\t\t\tfor(j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);\n\t\t\tfor(; j & 0x3F; ++j) o.write_shift(1, 0);\n\t\t}\n\t}\n\twhile(o.l < o.length) o.write_shift(1, 0);\n\treturn o;\n}\n/* [MS-CFB] 2.6.4 (Unicode 3.0.1 case conversion) */\nfunction find(cfb, path) {\n\tvar UCFullPaths = cfb.FullPaths.map(function(x) { return x.toUpperCase(); });\n\tvar UCPaths = UCFullPaths.map(function(x) { var y = x.split(\"/\"); return y[y.length - (x.slice(-1) == \"/\" ? 2 : 1)]; });\n\tvar k = false;\n\tif(path.charCodeAt(0) === 47 /* \"/\" */) { k = true; path = UCFullPaths[0].slice(0, -1) + path; }\n\telse k = path.indexOf(\"/\") !== -1;\n\tvar UCPath = path.toUpperCase();\n\tvar w = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);\n\tif(w !== -1) return cfb.FileIndex[w];\n\n\tvar m = !UCPath.match(chr1);\n\tUCPath = UCPath.replace(chr0,'');\n\tif(m) UCPath = UCPath.replace(chr1,'!');\n\tfor(w = 0; w < UCFullPaths.length; ++w) {\n\t\tif((m ? UCFullPaths[w].replace(chr1,'!') : UCFullPaths[w]).replace(chr0,'') == UCPath) return cfb.FileIndex[w];\n\t\tif((m ? UCPaths[w].replace(chr1,'!') : UCPaths[w]).replace(chr0,'') == UCPath) return cfb.FileIndex[w];\n\t}\n\treturn null;\n}\n/** CFB Constants */\nvar MSSZ = 64; /* Mini Sector Size = 1<<6 */\n//var MSCSZ = 4096; /* Mini Stream Cutoff Size */\n/* 2.1 Compound File Sector Numbers and Types */\nvar ENDOFCHAIN = -2;\n/* 2.2 Compound File Header */\nvar HEADER_SIGNATURE = 'd0cf11e0a1b11ae1';\nvar HEADER_SIG = [0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1];\nvar HEADER_CLSID = '00000000000000000000000000000000';\nvar consts = {\n\t/* 2.1 Compund File Sector Numbers and Types */\n\tMAXREGSECT: -6,\n\tDIFSECT: -4,\n\tFATSECT: -3,\n\tENDOFCHAIN: ENDOFCHAIN,\n\tFREESECT: -1,\n\t/* 2.2 Compound File Header */\n\tHEADER_SIGNATURE: HEADER_SIGNATURE,\n\tHEADER_MINOR_VERSION: '3e00',\n\tMAXREGSID: -6,\n\tNOSTREAM: -1,\n\tHEADER_CLSID: HEADER_CLSID,\n\t/* 2.6.1 Compound File Directory Entry */\n\tEntryTypes: ['unknown','storage','stream','lockbytes','property','root']\n};\n\nfunction write_file(cfb, filename, options) {\n\tget_fs();\n\tvar o = _write(cfb, options);\nfs.writeFileSync(filename, o);\n}\n\nfunction a2s(o) {\n\tvar out = new Array(o.length);\n\tfor(var i = 0; i < o.length; ++i) out[i] = String.fromCharCode(o[i]);\n\treturn out.join(\"\");\n}\n\nfunction write(cfb, options) {\n\tvar o = _write(cfb, options);\n\tswitch(options && options.type) {\n\t\tcase \"file\": get_fs(); fs.writeFileSync(options.filename, (o)); return o;\n\t\tcase \"binary\": return a2s(o);\n\t\tcase \"base64\": return Base64.encode(a2s(o));\n\t}\n\treturn o;\n}\n/* node < 8.1 zlib does not expose bytesRead, so default to pure JS */\nvar _zlib;\nfunction use_zlib(zlib) { try {\n\tvar InflateRaw = zlib.InflateRaw;\n\tvar InflRaw = new InflateRaw();\n\tInflRaw._processChunk(new Uint8Array([3, 0]), InflRaw._finishFlushFlag);\n\tif(InflRaw.bytesRead) _zlib = zlib;\n\telse throw new Error(\"zlib does not expose bytesRead\");\n} catch(e) {console.error(\"cannot use native zlib: \" + (e.message || e)); } }\n\nfunction _inflateRawSync(payload, usz) {\n\tif(!_zlib) return _inflate(payload, usz);\n\tvar InflateRaw = _zlib.InflateRaw;\n\tvar InflRaw = new InflateRaw();\n\tvar out = InflRaw._processChunk(payload.slice(payload.l), InflRaw._finishFlushFlag);\n\tpayload.l += InflRaw.bytesRead;\n\treturn out;\n}\n\nfunction _deflateRawSync(payload) {\n\treturn _zlib ? _zlib.deflateRawSync(payload) : _deflate(payload);\n}\nvar CLEN_ORDER = [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n/*  LEN_ID = [ 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285 ]; */\nvar LEN_LN = [   3,   4,   5,   6,   7,   8,   9,  10,  11,  13 , 15,  17,  19,  23,  27,  31,  35,  43,  51,  59,  67,  83,  99, 115, 131, 163, 195, 227, 258 ];\n\n/*  DST_ID = [  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13,  14,  15,  16,  17,  18,  19,   20,   21,   22,   23,   24,   25,   26,    27,    28,    29 ]; */\nvar DST_LN = [  1,  2,  3,  4,  5,  7,  9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577 ];\n\nfunction bit_swap_8(n) { var t = (((((n<<1)|(n<<11)) & 0x22110) | (((n<<5)|(n<<15)) & 0x88440))); return ((t>>16) | (t>>8) |t)&0xFF; }\n\nvar use_typed_arrays = typeof Uint8Array !== 'undefined';\n\nvar bitswap8 = use_typed_arrays ? new Uint8Array(1<<8) : [];\nfor(var q = 0; q < (1<<8); ++q) bitswap8[q] = bit_swap_8(q);\n\nfunction bit_swap_n(n, b) {\n\tvar rev = bitswap8[n & 0xFF];\n\tif(b <= 8) return rev >>> (8-b);\n\trev = (rev << 8) | bitswap8[(n>>8)&0xFF];\n\tif(b <= 16) return rev >>> (16-b);\n\trev = (rev << 8) | bitswap8[(n>>16)&0xFF];\n\treturn rev >>> (24-b);\n}\n\n/* helpers for unaligned bit reads */\nfunction read_bits_2(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 6 ? 0 : buf[h+1]<<8))>>>w)& 0x03; }\nfunction read_bits_3(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 5 ? 0 : buf[h+1]<<8))>>>w)& 0x07; }\nfunction read_bits_4(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 4 ? 0 : buf[h+1]<<8))>>>w)& 0x0F; }\nfunction read_bits_5(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 3 ? 0 : buf[h+1]<<8))>>>w)& 0x1F; }\nfunction read_bits_7(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 1 ? 0 : buf[h+1]<<8))>>>w)& 0x7F; }\n\n/* works up to n = 3 * 8 + 1 = 25 */\nfunction read_bits_n(buf, bl, n) {\n\tvar w = (bl&7), h = (bl>>>3), f = ((1<<n)-1);\n\tvar v = buf[h] >>> w;\n\tif(n < 8 - w) return v & f;\n\tv |= buf[h+1]<<(8-w);\n\tif(n < 16 - w) return v & f;\n\tv |= buf[h+2]<<(16-w);\n\tif(n < 24 - w) return v & f;\n\tv |= buf[h+3]<<(24-w);\n\treturn v & f;\n}\n\n/* until ArrayBuffer#realloc is a thing, fake a realloc */\nfunction realloc(b, sz) {\n\tvar L = b.length, M = 2*L > sz ? 2*L : sz + 5, i = 0;\n\tif(L >= sz) return b;\n\tif(has_buf) {\n\t\tvar o = new_unsafe_buf(M);\n\t\t// $FlowIgnore\n\t\tif(b.copy) b.copy(o);\n\t\telse for(; i < b.length; ++i) o[i] = b[i];\n\t\treturn o;\n\t} else if(use_typed_arrays) {\n\t\tvar a = new Uint8Array(M);\n\t\tif(a.set) a.set(b);\n\t\telse for(; i < b.length; ++i) a[i] = b[i];\n\t\treturn a;\n\t}\n\tb.length = M;\n\treturn b;\n}\n\n/* zero-filled arrays for older browsers */\nfunction zero_fill_array(n) {\n\tvar o = new Array(n);\n\tfor(var i = 0; i < n; ++i) o[i] = 0;\n\treturn o;\n}var _deflate = (function() {\nvar _deflateRaw = (function() {\n\treturn function deflateRaw(data, out) {\n\t\tvar boff = 0;\n\t\twhile(boff < data.length) {\n\t\t\tvar L = Math.min(0xFFFF, data.length - boff);\n\t\t\tvar h = boff + L == data.length;\n\t\t\t/* TODO: this is only type 0 stored */\n\t\t\tout.write_shift(1, +h);\n\t\t\tout.write_shift(2, L);\n\t\t\tout.write_shift(2, (~L) & 0xFFFF);\n\t\t\twhile(L-- > 0) out[out.l++] = data[boff++];\n\t\t}\n\t\treturn out.l;\n\t};\n})();\n\nreturn function(data) {\n\tvar buf = new_buf(50+Math.floor(data.length*1.1));\n\tvar off = _deflateRaw(data, buf);\n\treturn buf.slice(0, off);\n};\n})();\n/* modified inflate function also moves original read head */\n\n/* build tree (used for literals and lengths) */\nfunction build_tree(clens, cmap, MAX) {\n\tvar maxlen = 1, w = 0, i = 0, j = 0, ccode = 0, L = clens.length;\n\n\tvar bl_count  = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);\n\tfor(i = 0; i < 32; ++i) bl_count[i] = 0;\n\n\tfor(i = L; i < MAX; ++i) clens[i] = 0;\n\tL = clens.length;\n\n\tvar ctree = use_typed_arrays ? new Uint16Array(L) : zero_fill_array(L); // []\n\n\t/* build code tree */\n\tfor(i = 0; i < L; ++i) {\n\t\tbl_count[(w = clens[i])]++;\n\t\tif(maxlen < w) maxlen = w;\n\t\tctree[i] = 0;\n\t}\n\tbl_count[0] = 0;\n\tfor(i = 1; i <= maxlen; ++i) bl_count[i+16] = (ccode = (ccode + bl_count[i-1])<<1);\n\tfor(i = 0; i < L; ++i) {\n\t\tccode = clens[i];\n\t\tif(ccode != 0) ctree[i] = bl_count[ccode+16]++;\n\t}\n\n\t/* cmap[maxlen + 4 bits] = (off&15) + (lit<<4) reverse mapping */\n\tvar cleni = 0;\n\tfor(i = 0; i < L; ++i) {\n\t\tcleni = clens[i];\n\t\tif(cleni != 0) {\n\t\t\tccode = bit_swap_n(ctree[i], maxlen)>>(maxlen-cleni);\n\t\t\tfor(j = (1<<(maxlen + 4 - cleni)) - 1; j>=0; --j)\n\t\t\t\tcmap[ccode|(j<<cleni)] = (cleni&15) | (i<<4);\n\t\t}\n\t}\n\treturn maxlen;\n}\n\nvar fix_lmap = use_typed_arrays ? new Uint16Array(512) : zero_fill_array(512);\nvar fix_dmap = use_typed_arrays ? new Uint16Array(32)  : zero_fill_array(32);\nif(!use_typed_arrays) {\n\tfor(var i = 0; i < 512; ++i) fix_lmap[i] = 0;\n\tfor(i = 0; i < 32; ++i) fix_dmap[i] = 0;\n}\n(function() {\n\tvar dlens = [];\n\tvar i = 0;\n\tfor(;i<32; i++) dlens.push(5);\n\tbuild_tree(dlens, fix_dmap, 32);\n\n\tvar clens = [];\n\ti = 0;\n\tfor(; i<=143; i++) clens.push(8);\n\tfor(; i<=255; i++) clens.push(9);\n\tfor(; i<=279; i++) clens.push(7);\n\tfor(; i<=287; i++) clens.push(8);\n\tbuild_tree(clens, fix_lmap, 288);\n})();\n\nvar dyn_lmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);\nvar dyn_dmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);\nvar dyn_cmap = use_typed_arrays ? new Uint16Array(128)   : zero_fill_array(128);\nvar dyn_len_1 = 1, dyn_len_2 = 1;\n\n/* 5.5.3 Expanding Huffman Codes */\nfunction dyn(data, boff) {\n\t/* nomenclature from RFC1951 refers to bit values; these are offset by the implicit constant */\n\tvar _HLIT = read_bits_5(data, boff) + 257; boff += 5;\n\tvar _HDIST = read_bits_5(data, boff) + 1; boff += 5;\n\tvar _HCLEN = read_bits_4(data, boff) + 4; boff += 4;\n\tvar w = 0;\n\n\t/* grab and store code lengths */\n\tvar clens = use_typed_arrays ? new Uint8Array(19) : zero_fill_array(19);\n\tvar ctree = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];\n\tvar maxlen = 1;\n\tvar bl_count =  use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);\n\tvar next_code = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);\n\tvar L = clens.length; /* 19 */\n\tfor(var i = 0; i < _HCLEN; ++i) {\n\t\tclens[CLEN_ORDER[i]] = w = read_bits_3(data, boff);\n\t\tif(maxlen < w) maxlen = w;\n\t\tbl_count[w]++;\n\t\tboff += 3;\n\t}\n\n\t/* build code tree */\n\tvar ccode = 0;\n\tbl_count[0] = 0;\n\tfor(i = 1; i <= maxlen; ++i) next_code[i] = ccode = (ccode + bl_count[i-1])<<1;\n\tfor(i = 0; i < L; ++i) if((ccode = clens[i]) != 0) ctree[i] = next_code[ccode]++;\n\t/* cmap[7 bits from stream] = (off&7) + (lit<<3) */\n\tvar cleni = 0;\n\tfor(i = 0; i < L; ++i) {\n\t\tcleni = clens[i];\n\t\tif(cleni != 0) {\n\t\t\tccode = bitswap8[ctree[i]]>>(8-cleni);\n\t\t\tfor(var j = (1<<(7-cleni))-1; j>=0; --j) dyn_cmap[ccode|(j<<cleni)] = (cleni&7) | (i<<3);\n\t\t}\n\t}\n\n\t/* read literal and dist codes at once */\n\tvar hcodes = [];\n\tmaxlen = 1;\n\tfor(; hcodes.length < _HLIT + _HDIST;) {\n\t\tccode = dyn_cmap[read_bits_7(data, boff)];\n\t\tboff += ccode & 7;\n\t\tswitch((ccode >>>= 3)) {\n\t\t\tcase 16:\n\t\t\t\tw = 3 + read_bits_2(data, boff); boff += 2;\n\t\t\t\tccode = hcodes[hcodes.length - 1];\n\t\t\t\twhile(w-- > 0) hcodes.push(ccode);\n\t\t\t\tbreak;\n\t\t\tcase 17:\n\t\t\t\tw = 3 + read_bits_3(data, boff); boff += 3;\n\t\t\t\twhile(w-- > 0) hcodes.push(0);\n\t\t\t\tbreak;\n\t\t\tcase 18:\n\t\t\t\tw = 11 + read_bits_7(data, boff); boff += 7;\n\t\t\t\twhile(w -- > 0) hcodes.push(0);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\thcodes.push(ccode);\n\t\t\t\tif(maxlen < ccode) maxlen = ccode;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/* build literal / length trees */\n\tvar h1 = hcodes.slice(0, _HLIT), h2 = hcodes.slice(_HLIT);\n\tfor(i = _HLIT; i < 286; ++i) h1[i] = 0;\n\tfor(i = _HDIST; i < 30; ++i) h2[i] = 0;\n\tdyn_len_1 = build_tree(h1, dyn_lmap, 286);\n\tdyn_len_2 = build_tree(h2, dyn_dmap, 30);\n\treturn boff;\n}\n\n/* return [ data, bytesRead ] */\nfunction inflate(data, usz) {\n\t/* shortcircuit for empty buffer [0x03, 0x00] */\n\tif(data[0] == 3 && !(data[1] & 0x3)) { return [new_raw_buf(usz), 2]; }\n\n\t/* bit offset */\n\tvar boff = 0;\n\n\t/* header includes final bit and type bits */\n\tvar header = 0;\n\n\tvar outbuf = new_unsafe_buf(usz ? usz : (1<<18));\n\tvar woff = 0;\n\tvar OL = outbuf.length>>>0;\n\tvar max_len_1 = 0, max_len_2 = 0;\n\n\twhile((header&1) == 0) {\n\t\theader = read_bits_3(data, boff); boff += 3;\n\t\tif((header >>> 1) == 0) {\n\t\t\t/* Stored block */\n\t\t\tif(boff & 7) boff += 8 - (boff&7);\n\t\t\t/* 2 bytes sz, 2 bytes bit inverse */\n\t\t\tvar sz = data[boff>>>3] | data[(boff>>>3)+1]<<8;\n\t\t\tboff += 32;\n\t\t\t/* push sz bytes */\n\t\t\tif(!usz && OL < woff + sz) { outbuf = realloc(outbuf, woff + sz); OL = outbuf.length; }\n\t\t\tif(typeof data.copy === 'function') {\n\t\t\t\t// $FlowIgnore\n\t\t\t\tdata.copy(outbuf, woff, boff>>>3, (boff>>>3)+sz);\n\t\t\t\twoff += sz; boff += 8*sz;\n\t\t\t} else while(sz-- > 0) { outbuf[woff++] = data[boff>>>3]; boff += 8; }\n\t\t\tcontinue;\n\t\t} else if((header >>> 1) == 1) {\n\t\t\t/* Fixed Huffman */\n\t\t\tmax_len_1 = 9; max_len_2 = 5;\n\t\t} else {\n\t\t\t/* Dynamic Huffman */\n\t\t\tboff = dyn(data, boff);\n\t\t\tmax_len_1 = dyn_len_1; max_len_2 = dyn_len_2;\n\t\t}\n\t\tif(!usz && (OL < woff + 32767)) { outbuf = realloc(outbuf, woff + 32767); OL = outbuf.length; }\n\t\tfor(;;) { // while(true) is apparently out of vogue in modern JS circles\n\t\t\t/* ingest code and move read head */\n\t\t\tvar bits = read_bits_n(data, boff, max_len_1);\n\t\t\tvar code = (header>>>1) == 1 ? fix_lmap[bits] : dyn_lmap[bits];\n\t\t\tboff += code & 15; code >>>= 4;\n\t\t\t/* 0-255 are literals, 256 is end of block token, 257+ are copy tokens */\n\t\t\tif(((code>>>8)&0xFF) === 0) outbuf[woff++] = code;\n\t\t\telse if(code == 256) break;\n\t\t\telse {\n\t\t\t\tcode -= 257;\n\t\t\t\tvar len_eb = (code < 8) ? 0 : ((code-4)>>2); if(len_eb > 5) len_eb = 0;\n\t\t\t\tvar tgt = woff + LEN_LN[code];\n\t\t\t\t/* length extra bits */\n\t\t\t\tif(len_eb > 0) {\n\t\t\t\t\ttgt += read_bits_n(data, boff, len_eb);\n\t\t\t\t\tboff += len_eb;\n\t\t\t\t}\n\n\t\t\t\t/* dist code */\n\t\t\t\tbits = read_bits_n(data, boff, max_len_2);\n\t\t\t\tcode = (header>>>1) == 1 ? fix_dmap[bits] : dyn_dmap[bits];\n\t\t\t\tboff += code & 15; code >>>= 4;\n\t\t\t\tvar dst_eb = (code < 4 ? 0 : (code-2)>>1);\n\t\t\t\tvar dst = DST_LN[code];\n\t\t\t\t/* dist extra bits */\n\t\t\t\tif(dst_eb > 0) {\n\t\t\t\t\tdst += read_bits_n(data, boff, dst_eb);\n\t\t\t\t\tboff += dst_eb;\n\t\t\t\t}\n\n\t\t\t\t/* in the common case, manual byte copy is faster than TA set / Buffer copy */\n\t\t\t\tif(!usz && OL < tgt) { outbuf = realloc(outbuf, tgt); OL = outbuf.length; }\n\t\t\t\twhile(woff < tgt) { outbuf[woff] = outbuf[woff - dst]; ++woff; }\n\t\t\t}\n\t\t}\n\t}\n\treturn [usz ? outbuf : outbuf.slice(0, woff), (boff+7)>>>3];\n}\n\nfunction _inflate(payload, usz) {\n\tvar data = payload.slice(payload.l||0);\n\tvar out = inflate(data, usz);\n\tpayload.l += out[1];\n\treturn out[0];\n}\n\nfunction warn_or_throw(wrn, msg) {\n\tif(wrn) { if(typeof console !== 'undefined') console.error(msg); }\n\telse throw new Error(msg);\n}\n\nfunction parse_zip(file, options) {\n\tvar blob = file;\n\tprep_blob(blob, 0);\n\n\tvar FileIndex = [], FullPaths = [];\n\tvar o = {\n\t\tFileIndex: FileIndex,\n\t\tFullPaths: FullPaths\n\t};\n\tinit_cfb(o, { root: options.root });\n\n\t/* find end of central directory, start just after signature */\n\tvar i = blob.length - 4;\n\twhile((blob[i] != 0x50 || blob[i+1] != 0x4b || blob[i+2] != 0x05 || blob[i+3] != 0x06) && i >= 0) --i;\n\tblob.l = i + 4;\n\n\t/* parse end of central directory */\n\tblob.l += 4;\n\tvar fcnt = blob.read_shift(2);\n\tblob.l += 6;\n\tvar start_cd = blob.read_shift(4);\n\n\t/* parse central directory */\n\tblob.l = start_cd;\n\n\tfor(i = 0; i < fcnt; ++i) {\n\t\t/* trust local file header instead of CD entry */\n\t\tblob.l += 20;\n\t\tvar csz = blob.read_shift(4);\n\t\tvar usz = blob.read_shift(4);\n\t\tvar namelen = blob.read_shift(2);\n\t\tvar efsz = blob.read_shift(2);\n\t\tvar fcsz = blob.read_shift(2);\n\t\tblob.l += 8;\n\t\tvar offset = blob.read_shift(4);\n\t\tvar EF = parse_extra_field(blob.slice(blob.l+namelen, blob.l+namelen+efsz));\n\t\tblob.l += namelen + efsz + fcsz;\n\n\t\tvar L = blob.l;\n\t\tblob.l = offset + 4;\n\t\tparse_local_file(blob, csz, usz, o, EF);\n\t\tblob.l = L;\n\t}\n\n\treturn o;\n}\n\n\n/* head starts just after local file header signature */\nfunction parse_local_file(blob, csz, usz, o, EF) {\n\t/* [local file header] */\n\tblob.l += 2;\n\tvar flags = blob.read_shift(2);\n\tvar meth = blob.read_shift(2);\n\tvar date = parse_dos_date(blob);\n\n\tif(flags & 0x2041) throw new Error(\"Unsupported ZIP encryption\");\n\tvar crc32 = blob.read_shift(4);\n\tvar _csz = blob.read_shift(4);\n\tvar _usz = blob.read_shift(4);\n\n\tvar namelen = blob.read_shift(2);\n\tvar efsz = blob.read_shift(2);\n\n\t// TODO: flags & (1<<11) // UTF8\n\tvar name = \"\"; for(var i = 0; i < namelen; ++i) name += String.fromCharCode(blob[blob.l++]);\n\tif(efsz) {\n\t\tvar ef = parse_extra_field(blob.slice(blob.l, blob.l + efsz));\n\t\tif((ef[0x5455]||{}).mt) date = ef[0x5455].mt;\n\t\tif(((EF||{})[0x5455]||{}).mt) date = EF[0x5455].mt;\n\t}\n\tblob.l += efsz;\n\n\t/* [encryption header] */\n\n\t/* [file data] */\n\tvar data = blob.slice(blob.l, blob.l + _csz);\n\tswitch(meth) {\n\t\tcase 8: data = _inflateRawSync(blob, _usz); break;\n\t\tcase 0: break;\n\t\tdefault: throw new Error(\"Unsupported ZIP Compression method \" + meth);\n\t}\n\n\t/* [data descriptor] */\n\tvar wrn = false;\n\tif(flags & 8) {\n\t\tcrc32 = blob.read_shift(4);\n\t\tif(crc32 == 0x08074b50) { crc32 = blob.read_shift(4); wrn = true; }\n\t\t_csz = blob.read_shift(4);\n\t\t_usz = blob.read_shift(4);\n\t}\n\n\tif(_csz != csz) warn_or_throw(wrn, \"Bad compressed size: \" + csz + \" != \" + _csz);\n\tif(_usz != usz) warn_or_throw(wrn, \"Bad uncompressed size: \" + usz + \" != \" + _usz);\n\tvar _crc32 = CRC32.buf(data, 0);\n\tif((crc32>>0) != (_crc32>>0)) warn_or_throw(wrn, \"Bad CRC32 checksum: \" + crc32 + \" != \" + _crc32);\n\tcfb_add(o, name, data, {unsafe: true, mt: date});\n}\nfunction write_zip(cfb, options) {\n\tvar _opts = options || {};\n\tvar out = [], cdirs = [];\n\tvar o = new_buf(1);\n\tvar method = (_opts.compression ? 8 : 0), flags = 0;\n\tvar desc = false;\n\tif(desc) flags |= 8;\n\tvar i = 0, j = 0;\n\n\tvar start_cd = 0, fcnt = 0;\n\tvar root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];\n\tvar crcs = [];\n\tvar sz_cd = 0;\n\n\tfor(i = 1; i < cfb.FullPaths.length; ++i) {\n\t\tfp = cfb.FullPaths[i].slice(root.length); fi = cfb.FileIndex[i];\n\t\tif(!fi.size || !fi.content || fp == \"\\u0001Sh33tJ5\") continue;\n\t\tvar start = start_cd;\n\n\t\t/* TODO: CP437 filename */\n\t\tvar namebuf = new_buf(fp.length);\n\t\tfor(j = 0; j < fp.length; ++j) namebuf.write_shift(1, fp.charCodeAt(j) & 0x7F);\n\t\tnamebuf = namebuf.slice(0, namebuf.l);\n\t\tcrcs[fcnt] = CRC32.buf(fi.content, 0);\n\n\t\tvar outbuf = fi.content;\n\t\tif(method == 8) outbuf = _deflateRawSync(outbuf);\n\n\t\t/* local file header */\n\t\to = new_buf(30);\n\t\to.write_shift(4, 0x04034b50);\n\t\to.write_shift(2, 20);\n\t\to.write_shift(2, flags);\n\t\to.write_shift(2, method);\n\t\t/* TODO: last mod file time/date */\n\t\tif(fi.mt) write_dos_date(o, fi.mt);\n\t\telse o.write_shift(4, 0);\n\t\to.write_shift(-4, (flags & 8) ? 0 : crcs[fcnt]);\n\t\to.write_shift(4,  (flags & 8) ? 0 : outbuf.length);\n\t\to.write_shift(4,  (flags & 8) ? 0 : fi.content.length);\n\t\to.write_shift(2, namebuf.length);\n\t\to.write_shift(2, 0);\n\n\t\tstart_cd += o.length;\n\t\tout.push(o);\n\t\tstart_cd += namebuf.length;\n\t\tout.push(namebuf);\n\n\t\t/* TODO: encryption header ? */\n\t\tstart_cd += outbuf.length;\n\t\tout.push(outbuf);\n\n\t\t/* data descriptor */\n\t\tif(flags & 8) {\n\t\t\to = new_buf(12);\n\t\t\to.write_shift(-4, crcs[fcnt]);\n\t\t\to.write_shift(4, outbuf.length);\n\t\t\to.write_shift(4, fi.content.length);\n\t\t\tstart_cd += o.l;\n\t\t\tout.push(o);\n\t\t}\n\n\t\t/* central directory */\n\t\to = new_buf(46);\n\t\to.write_shift(4, 0x02014b50);\n\t\to.write_shift(2, 0);\n\t\to.write_shift(2, 20);\n\t\to.write_shift(2, flags);\n\t\to.write_shift(2, method);\n\t\to.write_shift(4, 0); /* TODO: last mod file time/date */\n\t\to.write_shift(-4, crcs[fcnt]);\n\n\t\to.write_shift(4, outbuf.length);\n\t\to.write_shift(4, fi.content.length);\n\t\to.write_shift(2, namebuf.length);\n\t\to.write_shift(2, 0);\n\t\to.write_shift(2, 0);\n\t\to.write_shift(2, 0);\n\t\to.write_shift(2, 0);\n\t\to.write_shift(4, 0);\n\t\to.write_shift(4, start);\n\n\t\tsz_cd += o.l;\n\t\tcdirs.push(o);\n\t\tsz_cd += namebuf.length;\n\t\tcdirs.push(namebuf);\n\t\t++fcnt;\n\t}\n\n\t/* end of central directory */\n\to = new_buf(22);\n\to.write_shift(4, 0x06054b50);\n\to.write_shift(2, 0);\n\to.write_shift(2, 0);\n\to.write_shift(2, fcnt);\n\to.write_shift(2, fcnt);\n\to.write_shift(4, sz_cd);\n\to.write_shift(4, start_cd);\n\to.write_shift(2, 0);\n\n\treturn bconcat(([bconcat((out)), bconcat(cdirs), o]));\n}\nfunction cfb_new(opts) {\n\tvar o = ({});\n\tinit_cfb(o, opts);\n\treturn o;\n}\n\nfunction cfb_add(cfb, name, content, opts) {\n\tvar unsafe = opts && opts.unsafe;\n\tif(!unsafe) init_cfb(cfb);\n\tvar file = !unsafe && CFB.find(cfb, name);\n\tif(!file) {\n\t\tvar fpath = cfb.FullPaths[0];\n\t\tif(name.slice(0, fpath.length) == fpath) fpath = name;\n\t\telse {\n\t\t\tif(fpath.slice(-1) != \"/\") fpath += \"/\";\n\t\t\tfpath = (fpath + name).replace(\"//\",\"/\");\n\t\t}\n\t\tfile = ({name: filename(name), type: 2});\n\t\tcfb.FileIndex.push(file);\n\t\tcfb.FullPaths.push(fpath);\n\t\tif(!unsafe) CFB.utils.cfb_gc(cfb);\n\t}\nfile.content = (content);\n\tfile.size = content ? content.length : 0;\n\tif(opts) {\n\t\tif(opts.CLSID) file.clsid = opts.CLSID;\n\t\tif(opts.mt) file.mt = opts.mt;\n\t\tif(opts.ct) file.ct = opts.ct;\n\t}\n\treturn file;\n}\n\nfunction cfb_del(cfb, name) {\n\tinit_cfb(cfb);\n\tvar file = CFB.find(cfb, name);\n\tif(file) for(var j = 0; j < cfb.FileIndex.length; ++j) if(cfb.FileIndex[j] == file) {\n\t\tcfb.FileIndex.splice(j, 1);\n\t\tcfb.FullPaths.splice(j, 1);\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction cfb_mov(cfb, old_name, new_name) {\n\tinit_cfb(cfb);\n\tvar file = CFB.find(cfb, old_name);\n\tif(file) for(var j = 0; j < cfb.FileIndex.length; ++j) if(cfb.FileIndex[j] == file) {\n\t\tcfb.FileIndex[j].name = filename(new_name);\n\t\tcfb.FullPaths[j] = new_name;\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction cfb_gc(cfb) { rebuild_cfb(cfb, true); }\n\nexports.find = find;\nexports.read = read;\nexports.parse = parse;\nexports.write = write;\nexports.writeFile = write_file;\nexports.utils = {\n\tcfb_new: cfb_new,\n\tcfb_add: cfb_add,\n\tcfb_del: cfb_del,\n\tcfb_mov: cfb_mov,\n\tcfb_gc: cfb_gc,\n\tReadShift: ReadShift,\n\tCheckField: CheckField,\n\tprep_blob: prep_blob,\n\tbconcat: bconcat,\n\tuse_zlib: use_zlib,\n\t_deflateRaw: _deflate,\n\t_inflateRaw: _inflate,\n\tconsts: consts\n};\n\nreturn exports;\n})();\n\nif( true && typeof DO_NOT_EXPORT_CFB === 'undefined') { module.exports = CFB; }\nvar _fs;\nif(true) try { _fs = __webpack_require__(/*! fs */ 2); } catch(e) {}\n\n/* normalize data for blob ctor */\nfunction blobify(data) {\n\tif(typeof data === \"string\") return s2ab(data);\n\tif(Array.isArray(data)) return a2u(data);\n\treturn data;\n}\n/* write or download file */\nfunction write_dl(fname, payload, enc) {\n\t/*global IE_SaveFile, Blob, navigator, saveAs, document, File, chrome */\n\tif(typeof _fs !== 'undefined' && _fs.writeFileSync) return enc ? _fs.writeFileSync(fname, payload, enc) : _fs.writeFileSync(fname, payload);\n\tvar data = (enc == \"utf8\") ? utf8write(payload) : payload;\nif(typeof IE_SaveFile !== 'undefined') return IE_SaveFile(data, fname);\n\tif(typeof Blob !== 'undefined') {\n\t\tvar blob = new Blob([blobify(data)], {type:\"application/octet-stream\"});\nif(typeof navigator !== 'undefined' && navigator.msSaveBlob) return navigator.msSaveBlob(blob, fname);\nif(typeof saveAs !== 'undefined') return saveAs(blob, fname);\n\t\tif(typeof URL !== 'undefined' && typeof document !== 'undefined' && document.createElement && URL.createObjectURL) {\n\t\t\tvar url = URL.createObjectURL(blob);\nif(typeof chrome === 'object' && typeof (chrome.downloads||{}).download == \"function\") {\n\t\t\t\tif(URL.revokeObjectURL && typeof setTimeout !== 'undefined') setTimeout(function() { URL.revokeObjectURL(url); }, 60000);\n\t\t\t\treturn chrome.downloads.download({ url: url, filename: fname, saveAs: true});\n\t\t\t}\n\t\t\tvar a = document.createElement(\"a\");\n\t\t\tif(a.download != null) {\na.download = fname; a.href = url; document.body.appendChild(a); a.click();\ndocument.body.removeChild(a);\n\t\t\t\tif(URL.revokeObjectURL && typeof setTimeout !== 'undefined') setTimeout(function() { URL.revokeObjectURL(url); }, 60000);\n\t\t\t\treturn url;\n\t\t\t}\n\t\t}\n\t}\n\t// $FlowIgnore\n\tif(typeof $ !== 'undefined' && typeof File !== 'undefined' && typeof Folder !== 'undefined') try { // extendscript\n\t\t// $FlowIgnore\n\t\tvar out = File(fname); out.open(\"w\"); out.encoding = \"binary\";\n\t\tif(Array.isArray(payload)) payload = a2s(payload);\n\t\tout.write(payload); out.close(); return payload;\n\t} catch(e) { if(!e.message || !e.message.match(/onstruct/)) throw e; }\n\tthrow new Error(\"cannot save file \" + fname);\n}\n\n/* read binary data from file */\nfunction read_binary(path) {\n\tif(typeof _fs !== 'undefined') return _fs.readFileSync(path);\n\t// $FlowIgnore\n\tif(typeof $ !== 'undefined' && typeof File !== 'undefined' && typeof Folder !== 'undefined') try { // extendscript\n\t\t// $FlowIgnore\n\t\tvar infile = File(path); infile.open(\"r\"); infile.encoding = \"binary\";\n\t\tvar data = infile.read(); infile.close();\n\t\treturn data;\n\t} catch(e) { if(!e.message || !e.message.match(/onstruct/)) throw e; }\n\tthrow new Error(\"Cannot access file \" + path);\n}\nfunction keys(o) {\n\tvar ks = Object.keys(o), o2 = [];\n\tfor(var i = 0; i < ks.length; ++i) if(Object.prototype.hasOwnProperty.call(o, ks[i])) o2.push(ks[i]);\n\treturn o2;\n}\n\nfunction evert_key(obj, key) {\n\tvar o = ([]), K = keys(obj);\n\tfor(var i = 0; i !== K.length; ++i) if(o[obj[K[i]][key]] == null) o[obj[K[i]][key]] = K[i];\n\treturn o;\n}\n\nfunction evert(obj) {\n\tvar o = ([]), K = keys(obj);\n\tfor(var i = 0; i !== K.length; ++i) o[obj[K[i]]] = K[i];\n\treturn o;\n}\n\nfunction evert_num(obj) {\n\tvar o = ([]), K = keys(obj);\n\tfor(var i = 0; i !== K.length; ++i) o[obj[K[i]]] = parseInt(K[i],10);\n\treturn o;\n}\n\nfunction evert_arr(obj) {\n\tvar o = ([]), K = keys(obj);\n\tfor(var i = 0; i !== K.length; ++i) {\n\t\tif(o[obj[K[i]]] == null) o[obj[K[i]]] = [];\n\t\to[obj[K[i]]].push(K[i]);\n\t}\n\treturn o;\n}\n\nvar basedate = new Date(1899, 11, 30, 0, 0, 0); // 2209161600000\nfunction datenum(v, date1904) {\n\tvar epoch = v.getTime();\n\tif(date1904) epoch -= 1462*24*60*60*1000;\n\tvar dnthresh = basedate.getTime() + (v.getTimezoneOffset() - basedate.getTimezoneOffset()) * 60000;\n\treturn (epoch - dnthresh) / (24 * 60 * 60 * 1000);\n}\nvar refdate = new Date();\nvar dnthresh = basedate.getTime() + (refdate.getTimezoneOffset() - basedate.getTimezoneOffset()) * 60000;\nvar refoffset = refdate.getTimezoneOffset();\nfunction numdate(v) {\n\tvar out = new Date();\n\tout.setTime(v * 24 * 60 * 60 * 1000 + dnthresh);\n\tif (out.getTimezoneOffset() !== refoffset) {\n\t\tout.setTime(out.getTime() + (out.getTimezoneOffset() - refoffset) * 60000);\n\t}\n\treturn out;\n}\n\n/* ISO 8601 Duration */\nfunction parse_isodur(s) {\n\tvar sec = 0, mt = 0, time = false;\n\tvar m = s.match(/P([0-9\\.]+Y)?([0-9\\.]+M)?([0-9\\.]+D)?T([0-9\\.]+H)?([0-9\\.]+M)?([0-9\\.]+S)?/);\n\tif(!m) throw new Error(\"|\" + s + \"| is not an ISO8601 Duration\");\n\tfor(var i = 1; i != m.length; ++i) {\n\t\tif(!m[i]) continue;\n\t\tmt = 1;\n\t\tif(i > 3) time = true;\n\t\tswitch(m[i].slice(m[i].length-1)) {\n\t\t\tcase 'Y':\n\t\t\t\tthrow new Error(\"Unsupported ISO Duration Field: \" + m[i].slice(m[i].length-1));\n\t\t\tcase 'D': mt *= 24;\n\t\t\t\t/* falls through */\n\t\t\tcase 'H': mt *= 60;\n\t\t\t\t/* falls through */\n\t\t\tcase 'M':\n\t\t\t\tif(!time) throw new Error(\"Unsupported ISO Duration Field: M\");\n\t\t\t\telse mt *= 60;\n\t\t\t\t/* falls through */\n\t\t\tcase 'S': break;\n\t\t}\n\t\tsec += mt * parseInt(m[i], 10);\n\t}\n\treturn sec;\n}\n\nvar good_pd_date = new Date('2017-02-19T19:06:09.000Z');\nif(isNaN(good_pd_date.getFullYear())) good_pd_date = new Date('2/19/17');\nvar good_pd = good_pd_date.getFullYear() == 2017;\n/* parses a date as a local date */\nfunction parseDate(str, fixdate) {\n\tvar d = new Date(str);\n\tif(good_pd) {\nif(fixdate > 0) d.setTime(d.getTime() + d.getTimezoneOffset() * 60 * 1000);\n\t\telse if(fixdate < 0) d.setTime(d.getTime() - d.getTimezoneOffset() * 60 * 1000);\n\t\treturn d;\n\t}\n\tif(str instanceof Date) return str;\n\tif(good_pd_date.getFullYear() == 1917 && !isNaN(d.getFullYear())) {\n\t\tvar s = d.getFullYear();\n\t\tif(str.indexOf(\"\" + s) > -1) return d;\n\t\td.setFullYear(d.getFullYear() + 100); return d;\n\t}\n\tvar n = str.match(/\\d+/g)||[\"2017\",\"2\",\"19\",\"0\",\"0\",\"0\"];\n\tvar out = new Date(+n[0], +n[1] - 1, +n[2], (+n[3]||0), (+n[4]||0), (+n[5]||0));\n\tif(str.indexOf(\"Z\") > -1) out = new Date(out.getTime() - out.getTimezoneOffset() * 60 * 1000);\n\treturn out;\n}\n\nfunction cc2str(arr) {\n\tvar o = \"\";\n\tfor(var i = 0; i != arr.length; ++i) o += String.fromCharCode(arr[i]);\n\treturn o;\n}\n\nfunction dup(o) {\n\tif(typeof JSON != 'undefined' && !Array.isArray(o)) return JSON.parse(JSON.stringify(o));\n\tif(typeof o != 'object' || o == null) return o;\n\tif(o instanceof Date) return new Date(o.getTime());\n\tvar out = {};\n\tfor(var k in o) if(Object.prototype.hasOwnProperty.call(o, k)) out[k] = dup(o[k]);\n\treturn out;\n}\n\nfunction fill(c,l) { var o = \"\"; while(o.length < l) o+=c; return o; }\n\n/* TODO: stress test */\nfunction fuzzynum(s) {\n\tvar v = Number(s);\n\tif(isFinite(v)) return v;\n\tif(!isNaN(v)) return NaN;\n\tif(!/\\d/.test(s)) return v;\n\tvar wt = 1;\n\tvar ss = s.replace(/([\\d]),([\\d])/g,\"$1$2\").replace(/[$]/g,\"\").replace(/[%]/g, function() { wt *= 100; return \"\";});\n\tif(!isNaN(v = Number(ss))) return v / wt;\n\tss = ss.replace(/[(](.*)[)]/,function($$, $1) { wt = -wt; return $1;});\n\tif(!isNaN(v = Number(ss))) return v / wt;\n\treturn v;\n}\nfunction fuzzydate(s) {\n\tvar o = new Date(s), n = new Date(NaN);\n\tvar y = o.getYear(), m = o.getMonth(), d = o.getDate();\n\tif(isNaN(d)) return n;\n\tif(y < 0 || y > 8099) return n;\n\tif((m > 0 || d > 1) && y != 101) return o;\n\tif(s.toLowerCase().match(/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/)) return o;\n\tif(s.match(/[^-0-9:,\\/\\\\]/)) return n;\n\treturn o;\n}\n\nvar safe_split_regex = \"abacaba\".split(/(:?b)/i).length == 5;\nfunction split_regex(str, re, def) {\n\tif(safe_split_regex || typeof re == \"string\") return str.split(re);\n\tvar p = str.split(re), o = [p[0]];\n\tfor(var i = 1; i < p.length; ++i) { o.push(def); o.push(p[i]); }\n\treturn o;\n}\nfunction getdatastr(data) {\n\tif(!data) return null;\n\tif(data.data) return debom(data.data);\n\tif(data.asNodeBuffer && has_buf) return debom(data.asNodeBuffer().toString('binary'));\n\tif(data.asBinary) return debom(data.asBinary());\n\tif(data._data && data._data.getContent) return debom(cc2str(Array.prototype.slice.call(data._data.getContent(),0)));\n\tif(data.content && data.type) return debom(cc2str(data.content));\n\treturn null;\n}\n\nfunction getdatabin(data) {\n\tif(!data) return null;\n\tif(data.data) return char_codes(data.data);\n\tif(data.asNodeBuffer && has_buf) return data.asNodeBuffer();\n\tif(data._data && data._data.getContent) {\n\t\tvar o = data._data.getContent();\n\t\tif(typeof o == \"string\") return char_codes(o);\n\t\treturn Array.prototype.slice.call(o);\n\t}\n\tif(data.content && data.type) return data.content;\n\treturn null;\n}\n\nfunction getdata(data) { return (data && data.name.slice(-4) === \".bin\") ? getdatabin(data) : getdatastr(data); }\n\n/* Part 2 Section 10.1.2 \"Mapping Content Types\" Names are case-insensitive */\n/* OASIS does not comment on filename case sensitivity */\nfunction safegetzipfile(zip, file) {\n\tvar k = zip.FullPaths || keys(zip.files);\n\tvar f = file.toLowerCase().replace(/[\\/]/g, '\\\\'), g = f.replace(/\\\\/g,'\\/');\n\tfor(var i=0; i<k.length; ++i) {\n\t\tvar n = k[i].replace(/^Root Entry[\\/]/,\"\").toLowerCase();\n\t\tif(f == n || g == n) return zip.files ? zip.files[k[i]] : zip.FileIndex[i];\n\t}\n\treturn null;\n}\n\nfunction getzipfile(zip, file) {\n\tvar o = safegetzipfile(zip, file);\n\tif(o == null) throw new Error(\"Cannot find file \" + file + \" in zip\");\n\treturn o;\n}\n\nfunction getzipdata(zip, file, safe) {\n\tif(!safe) return getdata(getzipfile(zip, file));\n\tif(!file) return null;\n\ttry { return getzipdata(zip, file); } catch(e) { return null; }\n}\n\nfunction getzipstr(zip, file, safe) {\n\tif(!safe) return getdatastr(getzipfile(zip, file));\n\tif(!file) return null;\n\ttry { return getzipstr(zip, file); } catch(e) { return null; }\n}\n\nfunction zipentries(zip) {\n\tvar k = zip.FullPaths || keys(zip.files), o = [];\n\tfor(var i = 0; i < k.length; ++i) if(k[i].slice(-1) != '/') o.push(k[i]);\n\treturn o.sort();\n}\n\nfunction zip_add_file(zip, path, content) {\n\tif(zip.FullPaths) CFB.utils.cfb_add(zip, path, content);\n\telse zip.file(path, content);\n}\n\nvar jszip;\n/*global JSZipSync:true */\nif(typeof JSZipSync !== 'undefined') jszip = JSZipSync;\nif(true) {\n\tif( true && module.exports) {\n\t\tif(typeof jszip === 'undefined') jszip = __webpack_require__(/*! ./jszip.js */ \"./node_modules/xlsx/jszip.js\");\n\t}\n}\n\nfunction zip_new() {\n\tif(!jszip) return CFB.utils.cfb_new();\n\treturn new jszip();\n}\n\nfunction zip_read(d, o) {\n\tvar zip;\n\tif(jszip) switch(o.type) {\n\t\tcase \"base64\": zip = new jszip(d, { base64:true }); break;\n\t\tcase \"binary\": case \"array\": zip = new jszip(d, { base64:false }); break;\n\t\tcase \"buffer\": zip = new jszip(d); break;\n\t\tdefault: throw new Error(\"Unrecognized type \" + o.type);\n\t}\n\telse switch(o.type) {\n\t\tcase \"base64\": zip = CFB.read(d, { type: \"base64\" }); break;\n\t\tcase \"binary\": zip = CFB.read(d, { type: \"binary\" }); break;\n\t\tcase \"buffer\": case \"array\": zip = CFB.read(d, { type: \"buffer\" }); break;\n\t\tdefault: throw new Error(\"Unrecognized type \" + o.type);\n\t}\n\treturn zip;\n}\n\nfunction resolve_path(path, base) {\n\tif(path.charAt(0) == \"/\") return path.slice(1);\n\tvar result = base.split('/');\n\tif(base.slice(-1) != \"/\") result.pop(); // folder path\n\tvar target = path.split('/');\n\twhile (target.length !== 0) {\n\t\tvar step = target.shift();\n\t\tif (step === '..') result.pop();\n\t\telse if (step !== '.') result.push(step);\n\t}\n\treturn result.join('/');\n}\nvar XML_HEADER = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\r\\n';\nvar attregexg=/([^\"\\s?>\\/]+)\\s*=\\s*((?:\")([^\"]*)(?:\")|(?:')([^']*)(?:')|([^'\">\\s]+))/g;\nvar tagregex=/<[\\/\\?]?[a-zA-Z0-9:_-]+(?:\\s+[^\"\\s?>\\/]+\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^'\">\\s=]+))*\\s*[\\/\\?]?>/mg;\n\nif(!(XML_HEADER.match(tagregex))) tagregex = /<[^>]*>/g;\nvar nsregex=/<\\w*:/, nsregex2 = /<(\\/?)\\w+:/;\nfunction parsexmltag(tag, skip_root, skip_LC) {\n\tvar z = ({});\n\tvar eq = 0, c = 0;\n\tfor(; eq !== tag.length; ++eq) if((c = tag.charCodeAt(eq)) === 32 || c === 10 || c === 13) break;\n\tif(!skip_root) z[0] = tag.slice(0, eq);\n\tif(eq === tag.length) return z;\n\tvar m = tag.match(attregexg), j=0, v=\"\", i=0, q=\"\", cc=\"\", quot = 1;\n\tif(m) for(i = 0; i != m.length; ++i) {\n\t\tcc = m[i];\n\t\tfor(c=0; c != cc.length; ++c) if(cc.charCodeAt(c) === 61) break;\n\t\tq = cc.slice(0,c).trim();\n\t\twhile(cc.charCodeAt(c+1) == 32) ++c;\n\t\tquot = ((eq=cc.charCodeAt(c+1)) == 34 || eq == 39) ? 1 : 0;\n\t\tv = cc.slice(c+1+quot, cc.length-quot);\n\t\tfor(j=0;j!=q.length;++j) if(q.charCodeAt(j) === 58) break;\n\t\tif(j===q.length) {\n\t\t\tif(q.indexOf(\"_\") > 0) q = q.slice(0, q.indexOf(\"_\")); // from ods\n\t\t\tz[q] = v;\n\t\t\tif(!skip_LC) z[q.toLowerCase()] = v;\n\t\t}\n\t\telse {\n\t\t\tvar k = (j===5 && q.slice(0,5)===\"xmlns\"?\"xmlns\":\"\")+q.slice(j+1);\n\t\t\tif(z[k] && q.slice(j-3,j) == \"ext\") continue; // from ods\n\t\t\tz[k] = v;\n\t\t\tif(!skip_LC) z[k.toLowerCase()] = v;\n\t\t}\n\t}\n\treturn z;\n}\nfunction strip_ns(x) { return x.replace(nsregex2, \"<$1\"); }\n\nvar encodings = {\n\t'&quot;': '\"',\n\t'&apos;': \"'\",\n\t'&gt;': '>',\n\t'&lt;': '<',\n\t'&amp;': '&'\n};\nvar rencoding = evert(encodings);\n//var rencstr = \"&<>'\\\"\".split(\"\");\n\n// TODO: CP remap (need to read file version to determine OS)\nvar unescapexml = (function() {\n\t/* 22.4.2.4 bstr (Basic String) */\n\tvar encregex = /&(?:quot|apos|gt|lt|amp|#x?([\\da-fA-F]+));/ig, coderegex = /_x([\\da-fA-F]{4})_/ig;\n\treturn function unescapexml(text) {\n\t\tvar s = text + '', i = s.indexOf(\"<![CDATA[\");\n\t\tif(i == -1) return s.replace(encregex, function($$, $1) { return encodings[$$]||String.fromCharCode(parseInt($1,$$.indexOf(\"x\")>-1?16:10))||$$; }).replace(coderegex,function(m,c) {return String.fromCharCode(parseInt(c,16));});\n\t\tvar j = s.indexOf(\"]]>\");\n\t\treturn unescapexml(s.slice(0, i)) + s.slice(i+9,j) + unescapexml(s.slice(j+3));\n\t};\n})();\n\nvar decregex=/[&<>'\"]/g, charegex = /[\\u0000-\\u0008\\u000b-\\u001f]/g;\nfunction escapexml(text){\n\tvar s = text + '';\n\treturn s.replace(decregex, function(y) { return rencoding[y]; }).replace(charegex,function(s) { return \"_x\" + (\"000\"+s.charCodeAt(0).toString(16)).slice(-4) + \"_\";});\n}\nfunction escapexmltag(text){ return escapexml(text).replace(/ /g,\"_x0020_\"); }\n\nvar htmlcharegex = /[\\u0000-\\u001f]/g;\nfunction escapehtml(text){\n\tvar s = text + '';\n\treturn s.replace(decregex, function(y) { return rencoding[y]; }).replace(/\\n/g, \"<br/>\").replace(htmlcharegex,function(s) { return \"&#x\" + (\"000\"+s.charCodeAt(0).toString(16)).slice(-4) + \";\"; });\n}\n\nfunction escapexlml(text){\n\tvar s = text + '';\n\treturn s.replace(decregex, function(y) { return rencoding[y]; }).replace(htmlcharegex,function(s) { return \"&#x\" + (s.charCodeAt(0).toString(16)).toUpperCase() + \";\"; });\n}\n\n/* TODO: handle codepages */\nvar xlml_fixstr = (function() {\n\tvar entregex = /&#(\\d+);/g;\n\tfunction entrepl($$,$1) { return String.fromCharCode(parseInt($1,10)); }\n\treturn function xlml_fixstr(str) { return str.replace(entregex,entrepl); };\n})();\nvar xlml_unfixstr = (function() {\n\treturn function xlml_unfixstr(str) { return str.replace(/(\\r\\n|[\\r\\n])/g,\"\\&#10;\"); };\n})();\n\nfunction parsexmlbool(value) {\n\tswitch(value) {\n\t\tcase 1: case true: case '1': case 'true': case 'TRUE': return true;\n\t\t/* case '0': case 'false': case 'FALSE':*/\n\t\tdefault: return false;\n\t}\n}\n\nvar utf8read = function utf8reada(orig) {\n\tvar out = \"\", i = 0, c = 0, d = 0, e = 0, f = 0, w = 0;\n\twhile (i < orig.length) {\n\t\tc = orig.charCodeAt(i++);\n\t\tif (c < 128) { out += String.fromCharCode(c); continue; }\n\t\td = orig.charCodeAt(i++);\n\t\tif (c>191 && c<224) { f = ((c & 31) << 6); f |= (d & 63); out += String.fromCharCode(f); continue; }\n\t\te = orig.charCodeAt(i++);\n\t\tif (c < 240) { out += String.fromCharCode(((c & 15) << 12) | ((d & 63) << 6) | (e & 63)); continue; }\n\t\tf = orig.charCodeAt(i++);\n\t\tw = (((c & 7) << 18) | ((d & 63) << 12) | ((e & 63) << 6) | (f & 63))-65536;\n\t\tout += String.fromCharCode(0xD800 + ((w>>>10)&1023));\n\t\tout += String.fromCharCode(0xDC00 + (w&1023));\n\t}\n\treturn out;\n};\n\nvar utf8write = function(orig) {\n\tvar out = [], i = 0, c = 0, d = 0;\n\twhile(i < orig.length) {\n\t\tc = orig.charCodeAt(i++);\n\t\tswitch(true) {\n\t\t\tcase c < 128: out.push(String.fromCharCode(c)); break;\n\t\t\tcase c < 2048:\n\t\t\t\tout.push(String.fromCharCode(192 + (c >> 6)));\n\t\t\t\tout.push(String.fromCharCode(128 + (c & 63)));\n\t\t\t\tbreak;\n\t\t\tcase c >= 55296 && c < 57344:\n\t\t\t\tc -= 55296; d = orig.charCodeAt(i++) - 56320 + (c<<10);\n\t\t\t\tout.push(String.fromCharCode(240 + ((d >>18) & 7)));\n\t\t\t\tout.push(String.fromCharCode(144 + ((d >>12) & 63)));\n\t\t\t\tout.push(String.fromCharCode(128 + ((d >> 6) & 63)));\n\t\t\t\tout.push(String.fromCharCode(128 + (d & 63)));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tout.push(String.fromCharCode(224 + (c >> 12)));\n\t\t\t\tout.push(String.fromCharCode(128 + ((c >> 6) & 63)));\n\t\t\t\tout.push(String.fromCharCode(128 + (c & 63)));\n\t\t}\n\t}\n\treturn out.join(\"\");\n};\n\nif(has_buf) {\n\tvar utf8readb = function utf8readb(data) {\n\t\tvar out = Buffer.alloc(2*data.length), w, i, j = 1, k = 0, ww=0, c;\n\t\tfor(i = 0; i < data.length; i+=j) {\n\t\t\tj = 1;\n\t\t\tif((c=data.charCodeAt(i)) < 128) w = c;\n\t\t\telse if(c < 224) { w = (c&31)*64+(data.charCodeAt(i+1)&63); j=2; }\n\t\t\telse if(c < 240) { w=(c&15)*4096+(data.charCodeAt(i+1)&63)*64+(data.charCodeAt(i+2)&63); j=3; }\n\t\t\telse { j = 4;\n\t\t\t\tw = (c & 7)*262144+(data.charCodeAt(i+1)&63)*4096+(data.charCodeAt(i+2)&63)*64+(data.charCodeAt(i+3)&63);\n\t\t\t\tw -= 65536; ww = 0xD800 + ((w>>>10)&1023); w = 0xDC00 + (w&1023);\n\t\t\t}\n\t\t\tif(ww !== 0) { out[k++] = ww&255; out[k++] = ww>>>8; ww = 0; }\n\t\t\tout[k++] = w%256; out[k++] = w>>>8;\n\t\t}\n\t\treturn out.slice(0,k).toString('ucs2');\n\t};\n\tvar corpus = \"foo bar baz\\u00e2\\u0098\\u0083\\u00f0\\u009f\\u008d\\u00a3\";\n\tif(utf8read(corpus) == utf8readb(corpus)) utf8read = utf8readb;\n\tvar utf8readc = function utf8readc(data) { return Buffer_from(data, 'binary').toString('utf8'); };\n\tif(utf8read(corpus) == utf8readc(corpus)) utf8read = utf8readc;\n\n\tutf8write = function(data) { return Buffer_from(data, 'utf8').toString(\"binary\"); };\n}\n\n// matches <foo>...</foo> extracts content\nvar matchtag = (function() {\n\tvar mtcache = ({});\n\treturn function matchtag(f,g) {\n\t\tvar t = f+\"|\"+(g||\"\");\n\t\tif(mtcache[t]) return mtcache[t];\n\t\treturn (mtcache[t] = new RegExp('<(?:\\\\w+:)?'+f+'(?: xml:space=\"preserve\")?(?:[^>]*)>([\\\\s\\\\S]*?)</(?:\\\\w+:)?'+f+'>',((g||\"\"))));\n\t};\n})();\n\nvar htmldecode = (function() {\n\tvar entities = [\n\t\t['nbsp', ' '], ['middot', '·'],\n\t\t['quot', '\"'], ['apos', \"'\"], ['gt',   '>'], ['lt',   '<'], ['amp',  '&']\n\t].map(function(x) { return [new RegExp('&' + x[0] + ';', \"ig\"), x[1]]; });\n\treturn function htmldecode(str) {\n\t\tvar o = str\n\t\t\t\t// Remove new lines and spaces from start of content\n\t\t\t\t.replace(/^[\\t\\n\\r ]+/, \"\")\n\t\t\t\t// Remove new lines and spaces from end of content\n\t\t\t\t.replace(/[\\t\\n\\r ]+$/,\"\")\n\t\t\t\t// Added line which removes any white space characters after and before html tags\n\t\t\t\t.replace(/>\\s+/g,\">\").replace(/\\s+</g,\"<\")\n\t\t\t\t// Replace remaining new lines and spaces with space\n\t\t\t\t.replace(/[\\t\\n\\r ]+/g, \" \")\n\t\t\t\t// Replace <br> tags with new lines\n\t\t\t\t.replace(/<\\s*[bB][rR]\\s*\\/?>/g,\"\\n\")\n\t\t\t\t// Strip HTML elements\n\t\t\t\t.replace(/<[^>]*>/g,\"\");\n\t\tfor(var i = 0; i < entities.length; ++i) o = o.replace(entities[i][0], entities[i][1]);\n\t\treturn o;\n\t};\n})();\n\nvar vtregex = (function(){ var vt_cache = {};\n\treturn function vt_regex(bt) {\n\t\tif(vt_cache[bt] !== undefined) return vt_cache[bt];\n\t\treturn (vt_cache[bt] = new RegExp(\"<(?:vt:)?\" + bt + \">([\\\\s\\\\S]*?)</(?:vt:)?\" + bt + \">\", 'g') );\n};})();\nvar vtvregex = /<\\/?(?:vt:)?variant>/g, vtmregex = /<(?:vt:)([^>]*)>([\\s\\S]*)</;\nfunction parseVector(data, opts) {\n\tvar h = parsexmltag(data);\n\n\tvar matches = data.match(vtregex(h.baseType))||[];\n\tvar res = [];\n\tif(matches.length != h.size) {\n\t\tif(opts.WTF) throw new Error(\"unexpected vector length \" + matches.length + \" != \" + h.size);\n\t\treturn res;\n\t}\n\tmatches.forEach(function(x) {\n\t\tvar v = x.replace(vtvregex,\"\").match(vtmregex);\n\t\tif(v) res.push({v:utf8read(v[2]), t:v[1]});\n\t});\n\treturn res;\n}\n\nvar wtregex = /(^\\s|\\s$|\\n)/;\nfunction writetag(f,g) { return '<' + f + (g.match(wtregex)?' xml:space=\"preserve\"' : \"\") + '>' + g + '</' + f + '>'; }\n\nfunction wxt_helper(h) { return keys(h).map(function(k) { return \" \" + k + '=\"' + h[k] + '\"';}).join(\"\"); }\nfunction writextag(f,g,h) { return '<' + f + ((h != null) ? wxt_helper(h) : \"\") + ((g != null) ? (g.match(wtregex)?' xml:space=\"preserve\"' : \"\") + '>' + g + '</' + f : \"/\") + '>';}\n\nfunction write_w3cdtf(d, t) { try { return d.toISOString().replace(/\\.\\d*/,\"\"); } catch(e) { if(t) throw e; } return \"\"; }\n\nfunction write_vt(s, xlsx) {\n\tswitch(typeof s) {\n\t\tcase 'string':\n\t\t\tvar o = writextag('vt:lpwstr', escapexml(s));\n\t\t\tif(xlsx) o = o.replace(/&quot;/g, \"_x0022_\");\n\t\t\treturn o;\n\t\tcase 'number': return writextag((s|0)==s?'vt:i4':'vt:r8', escapexml(String(s)));\n\t\tcase 'boolean': return writextag('vt:bool',s?'true':'false');\n\t}\n\tif(s instanceof Date) return writextag('vt:filetime', write_w3cdtf(s));\n\tthrow new Error(\"Unable to serialize \" + s);\n}\n\nvar XMLNS = ({\n\t'dc': 'http://purl.org/dc/elements/1.1/',\n\t'dcterms': 'http://purl.org/dc/terms/',\n\t'dcmitype': 'http://purl.org/dc/dcmitype/',\n\t'mx': 'http://schemas.microsoft.com/office/mac/excel/2008/main',\n\t'r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n\t'sjs': 'http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties',\n\t'vt': 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes',\n\t'xsi': 'http://www.w3.org/2001/XMLSchema-instance',\n\t'xsd': 'http://www.w3.org/2001/XMLSchema'\n});\n\nXMLNS.main = [\n\t'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n\t'http://purl.oclc.org/ooxml/spreadsheetml/main',\n\t'http://schemas.microsoft.com/office/excel/2006/main',\n\t'http://schemas.microsoft.com/office/excel/2006/2'\n];\n\nvar XLMLNS = ({\n\t'o':    'urn:schemas-microsoft-com:office:office',\n\t'x':    'urn:schemas-microsoft-com:office:excel',\n\t'ss':   'urn:schemas-microsoft-com:office:spreadsheet',\n\t'dt':   'uuid:C2F41010-65B3-11d1-A29F-00AA00C14882',\n\t'mv':   'http://macVmlSchemaUri',\n\t'v':    'urn:schemas-microsoft-com:vml',\n\t'html': 'http://www.w3.org/TR/REC-html40'\n});\nfunction read_double_le(b, idx) {\n\tvar s = 1 - 2 * (b[idx + 7] >>> 7);\n\tvar e = ((b[idx + 7] & 0x7f) << 4) + ((b[idx + 6] >>> 4) & 0x0f);\n\tvar m = (b[idx+6]&0x0f);\n\tfor(var i = 5; i >= 0; --i) m = m * 256 + b[idx + i];\n\tif(e == 0x7ff) return m == 0 ? (s * Infinity) : NaN;\n\tif(e == 0) e = -1022;\n\telse { e -= 1023; m += Math.pow(2,52); }\n\treturn s * Math.pow(2, e - 52) * m;\n}\n\nfunction write_double_le(b, v, idx) {\n\tvar bs = ((((v < 0) || (1/v == -Infinity)) ? 1 : 0) << 7), e = 0, m = 0;\n\tvar av = bs ? (-v) : v;\n\tif(!isFinite(av)) { e = 0x7ff; m = isNaN(v) ? 0x6969 : 0; }\n\telse if(av == 0) e = m = 0;\n\telse {\n\t\te = Math.floor(Math.log(av) / Math.LN2);\n\t\tm = av * Math.pow(2, 52 - e);\n\t\tif((e <= -1023) && (!isFinite(m) || (m < Math.pow(2,52)))) { e = -1022; }\n\t\telse { m -= Math.pow(2,52); e+=1023; }\n\t}\n\tfor(var i = 0; i <= 5; ++i, m/=256) b[idx + i] = m & 0xff;\n\tb[idx + 6] = ((e & 0x0f) << 4) | (m & 0xf);\n\tb[idx + 7] = (e >> 4) | bs;\n}\n\nvar __toBuffer = function(bufs) { var x=[],w=10240; for(var i=0;i<bufs[0].length;++i) if(bufs[0][i]) for(var j=0,L=bufs[0][i].length;j<L;j+=w) x.push.apply(x, bufs[0][i].slice(j,j+w)); return x; };\nvar ___toBuffer = __toBuffer;\nvar __utf16le = function(b,s,e) { var ss=[]; for(var i=s; i<e; i+=2) ss.push(String.fromCharCode(__readUInt16LE(b,i))); return ss.join(\"\").replace(chr0,''); };\nvar ___utf16le = __utf16le;\nvar __hexlify = function(b,s,l) { var ss=[]; for(var i=s; i<s+l; ++i) ss.push((\"0\" + b[i].toString(16)).slice(-2)); return ss.join(\"\"); };\nvar ___hexlify = __hexlify;\nvar __utf8 = function(b,s,e) { var ss=[]; for(var i=s; i<e; i++) ss.push(String.fromCharCode(__readUInt8(b,i))); return ss.join(\"\"); };\nvar ___utf8 = __utf8;\nvar __lpstr = function(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len-1) : \"\";};\nvar ___lpstr = __lpstr;\nvar __cpstr = function(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len-1) : \"\";};\nvar ___cpstr = __cpstr;\nvar __lpwstr = function(b,i) { var len = 2*__readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len-1) : \"\";};\nvar ___lpwstr = __lpwstr;\nvar __lpp4, ___lpp4;\n__lpp4 = ___lpp4 = function lpp4_(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? __utf16le(b, i+4,i+4+len) : \"\";};\nvar __8lpp4 = function(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len) : \"\";};\nvar ___8lpp4 = __8lpp4;\nvar __double, ___double;\n__double = ___double = function(b, idx) { return read_double_le(b, idx);};\nvar is_buf = function is_buf_a(a) { return Array.isArray(a); };\n\nif(has_buf) {\n\t__utf16le = function(b,s,e) { if(!Buffer.isBuffer(b)) return ___utf16le(b,s,e); return b.toString('utf16le',s,e).replace(chr0,'')/*.replace(chr1,'!')*/; };\n\t__hexlify = function(b,s,l) { return Buffer.isBuffer(b) ? b.toString('hex',s,s+l) : ___hexlify(b,s,l); };\n\t__lpstr = function lpstr_b(b, i) { if(!Buffer.isBuffer(b)) return ___lpstr(b, i); var len = b.readUInt32LE(i); return len > 0 ? b.toString('utf8',i+4,i+4+len-1) : \"\";};\n\t__cpstr = function cpstr_b(b, i) { if(!Buffer.isBuffer(b)) return ___cpstr(b, i); var len = b.readUInt32LE(i); return len > 0 ? b.toString('utf8',i+4,i+4+len-1) : \"\";};\n\t__lpwstr = function lpwstr_b(b, i) { if(!Buffer.isBuffer(b)) return ___lpwstr(b, i); var len = 2*b.readUInt32LE(i); return b.toString('utf16le',i+4,i+4+len-1);};\n\t__lpp4 = function lpp4_b(b, i) { if(!Buffer.isBuffer(b)) return ___lpp4(b, i); var len = b.readUInt32LE(i); return b.toString('utf16le',i+4,i+4+len);};\n\t__8lpp4 = function lpp4_8b(b, i) { if(!Buffer.isBuffer(b)) return ___8lpp4(b, i); var len = b.readUInt32LE(i); return b.toString('utf8',i+4,i+4+len);};\n\t__utf8 = function utf8_b(b, s, e) { return (Buffer.isBuffer(b)) ? b.toString('utf8',s,e) : ___utf8(b,s,e); };\n\t__toBuffer = function(bufs) { return (bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0])) ? Buffer.concat(bufs[0]) : ___toBuffer(bufs);};\n\tbconcat = function(bufs) { return Buffer.isBuffer(bufs[0]) ? Buffer.concat(bufs) : [].concat.apply([], bufs); };\n\t__double = function double_(b, i) { if(Buffer.isBuffer(b)) return b.readDoubleLE(i); return ___double(b,i); };\n\tis_buf = function is_buf_b(a) { return Buffer.isBuffer(a) || Array.isArray(a); };\n}\n\n/* from js-xls */\nif(typeof cptable !== 'undefined') {\n\t__utf16le = function(b,s,e) { return cptable.utils.decode(1200, b.slice(s,e)).replace(chr0, ''); };\n\t__utf8 = function(b,s,e) { return cptable.utils.decode(65001, b.slice(s,e)); };\n\t__lpstr = function(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? cptable.utils.decode(current_ansi, b.slice(i+4, i+4+len-1)) : \"\";};\n\t__cpstr = function(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? cptable.utils.decode(current_codepage, b.slice(i+4, i+4+len-1)) : \"\";};\n\t__lpwstr = function(b,i) { var len = 2*__readUInt32LE(b,i); return len > 0 ? cptable.utils.decode(1200, b.slice(i+4,i+4+len-1)) : \"\";};\n\t__lpp4 = function(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? cptable.utils.decode(1200, b.slice(i+4,i+4+len)) : \"\";};\n\t__8lpp4 = function(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? cptable.utils.decode(65001, b.slice(i+4,i+4+len)) : \"\";};\n}\n\nvar __readUInt8 = function(b, idx) { return b[idx]; };\nvar __readUInt16LE = function(b, idx) { return (b[idx+1]*(1<<8))+b[idx]; };\nvar __readInt16LE = function(b, idx) { var u = (b[idx+1]*(1<<8))+b[idx]; return (u < 0x8000) ? u : ((0xffff - u + 1) * -1); };\nvar __readUInt32LE = function(b, idx) { return b[idx+3]*(1<<24)+(b[idx+2]<<16)+(b[idx+1]<<8)+b[idx]; };\nvar __readInt32LE = function(b, idx) { return (b[idx+3]<<24)|(b[idx+2]<<16)|(b[idx+1]<<8)|b[idx]; };\nvar __readInt32BE = function(b, idx) { return (b[idx]<<24)|(b[idx+1]<<16)|(b[idx+2]<<8)|b[idx+3]; };\n\nfunction ReadShift(size, t) {\n\tvar o=\"\", oI, oR, oo=[], w, vv, i, loc;\n\tswitch(t) {\n\t\tcase 'dbcs':\n\t\t\tloc = this.l;\n\t\t\tif(has_buf && Buffer.isBuffer(this)) o = this.slice(this.l, this.l+2*size).toString(\"utf16le\");\n\t\t\telse for(i = 0; i < size; ++i) { o+=String.fromCharCode(__readUInt16LE(this, loc)); loc+=2; }\n\t\t\tsize *= 2;\n\t\t\tbreak;\n\n\t\tcase 'utf8': o = __utf8(this, this.l, this.l + size); break;\n\t\tcase 'utf16le': size *= 2; o = __utf16le(this, this.l, this.l + size); break;\n\n\t\tcase 'wstr':\n\t\t\tif(typeof cptable !== 'undefined') o = cptable.utils.decode(current_codepage, this.slice(this.l, this.l+2*size));\n\t\t\telse return ReadShift.call(this, size, 'dbcs');\n\t\t\tsize = 2 * size; break;\n\n\t\t/* [MS-OLEDS] 2.1.4 LengthPrefixedAnsiString */\n\t\tcase 'lpstr-ansi': o = __lpstr(this, this.l); size = 4 + __readUInt32LE(this, this.l); break;\n\t\tcase 'lpstr-cp': o = __cpstr(this, this.l); size = 4 + __readUInt32LE(this, this.l); break;\n\t\t/* [MS-OLEDS] 2.1.5 LengthPrefixedUnicodeString */\n\t\tcase 'lpwstr': o = __lpwstr(this, this.l); size = 4 + 2 * __readUInt32LE(this, this.l); break;\n\t\t/* [MS-OFFCRYPTO] 2.1.2 Length-Prefixed Padded Unicode String (UNICODE-LP-P4) */\n\t\tcase 'lpp4': size = 4 +  __readUInt32LE(this, this.l); o = __lpp4(this, this.l); if(size & 0x02) size += 2; break;\n\t\t/* [MS-OFFCRYPTO] 2.1.3 Length-Prefixed UTF-8 String (UTF-8-LP-P4) */\n\t\tcase '8lpp4': size = 4 +  __readUInt32LE(this, this.l); o = __8lpp4(this, this.l); if(size & 0x03) size += 4 - (size & 0x03); break;\n\n\t\tcase 'cstr': size = 0; o = \"\";\n\t\t\twhile((w=__readUInt8(this, this.l + size++))!==0) oo.push(_getchar(w));\n\t\t\to = oo.join(\"\"); break;\n\t\tcase '_wstr': size = 0; o = \"\";\n\t\t\twhile((w=__readUInt16LE(this,this.l +size))!==0){oo.push(_getchar(w));size+=2;}\n\t\t\tsize+=2; o = oo.join(\"\"); break;\n\n\t\t/* sbcs and dbcs support continue records in the SST way TODO codepages */\n\t\tcase 'dbcs-cont': o = \"\"; loc = this.l;\n\t\t\tfor(i = 0; i < size; ++i) {\n\t\t\t\tif(this.lens && this.lens.indexOf(loc) !== -1) {\n\t\t\t\t\tw = __readUInt8(this, loc);\n\t\t\t\t\tthis.l = loc + 1;\n\t\t\t\t\tvv = ReadShift.call(this, size-i, w ? 'dbcs-cont' : 'sbcs-cont');\n\t\t\t\t\treturn oo.join(\"\") + vv;\n\t\t\t\t}\n\t\t\t\too.push(_getchar(__readUInt16LE(this, loc)));\n\t\t\t\tloc+=2;\n\t\t\t} o = oo.join(\"\"); size *= 2; break;\n\n\t\tcase 'cpstr':\n\t\t\tif(typeof cptable !== 'undefined') {\n\t\t\t\to = cptable.utils.decode(current_codepage, this.slice(this.l, this.l + size));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t/* falls through */\n\t\tcase 'sbcs-cont': o = \"\"; loc = this.l;\n\t\t\tfor(i = 0; i != size; ++i) {\n\t\t\t\tif(this.lens && this.lens.indexOf(loc) !== -1) {\n\t\t\t\t\tw = __readUInt8(this, loc);\n\t\t\t\t\tthis.l = loc + 1;\n\t\t\t\t\tvv = ReadShift.call(this, size-i, w ? 'dbcs-cont' : 'sbcs-cont');\n\t\t\t\t\treturn oo.join(\"\") + vv;\n\t\t\t\t}\n\t\t\t\too.push(_getchar(__readUInt8(this, loc)));\n\t\t\t\tloc+=1;\n\t\t\t} o = oo.join(\"\"); break;\n\n\t\tdefault:\n\tswitch(size) {\n\t\tcase 1: oI = __readUInt8(this, this.l); this.l++; return oI;\n\t\tcase 2: oI = (t === 'i' ? __readInt16LE : __readUInt16LE)(this, this.l); this.l += 2; return oI;\n\t\tcase 4: case -4:\n\t\t\tif(t === 'i' || ((this[this.l+3] & 0x80)===0)) { oI = ((size > 0) ? __readInt32LE : __readInt32BE)(this, this.l); this.l += 4; return oI; }\n\t\t\telse { oR = __readUInt32LE(this, this.l); this.l += 4; } return oR;\n\t\tcase 8: case -8:\n\t\t\tif(t === 'f') {\n\t\t\t\tif(size == 8) oR = __double(this, this.l);\n\t\t\t\telse oR = __double([this[this.l+7],this[this.l+6],this[this.l+5],this[this.l+4],this[this.l+3],this[this.l+2],this[this.l+1],this[this.l+0]], 0);\n\t\t\t\tthis.l += 8; return oR;\n\t\t\t} else size = 8;\n\t\t/* falls through */\n\t\tcase 16: o = __hexlify(this, this.l, size); break;\n\t}}\n\tthis.l+=size; return o;\n}\n\nvar __writeUInt32LE = function(b, val, idx) { b[idx] = (val & 0xFF); b[idx+1] = ((val >>> 8) & 0xFF); b[idx+2] = ((val >>> 16) & 0xFF); b[idx+3] = ((val >>> 24) & 0xFF); };\nvar __writeInt32LE  = function(b, val, idx) { b[idx] = (val & 0xFF); b[idx+1] = ((val >> 8) & 0xFF); b[idx+2] = ((val >> 16) & 0xFF); b[idx+3] = ((val >> 24) & 0xFF); };\nvar __writeUInt16LE = function(b, val, idx) { b[idx] = (val & 0xFF); b[idx+1] = ((val >>> 8) & 0xFF); };\n\nfunction WriteShift(t, val, f) {\n\tvar size = 0, i = 0;\n\tif(f === 'dbcs') {\nfor(i = 0; i != val.length; ++i) __writeUInt16LE(this, val.charCodeAt(i), this.l + 2 * i);\n\t\tsize = 2 * val.length;\n\t} else if(f === 'sbcs') {\n\t\tif(typeof cptable !== 'undefined' && current_ansi == 874) {\n\t\t\t/* TODO: use tables directly, don't encode */\nfor(i = 0; i != val.length; ++i) {\n\t\t\t\tvar cppayload = cptable.utils.encode(current_ansi, val.charAt(i));\n\t\t\t\tthis[this.l + i] = cppayload[0];\n\t\t\t}\n\t\t} else {\nval = val.replace(/[^\\x00-\\x7F]/g, \"_\");\nfor(i = 0; i != val.length; ++i) this[this.l + i] = (val.charCodeAt(i) & 0xFF);\n\t\t}\n\t\tsize = val.length;\n\t} else if(f === 'hex') {\n\t\tfor(; i < t; ++i) {\nthis[this.l++] = (parseInt(val.slice(2*i, 2*i+2), 16)||0);\n\t\t} return this;\n\t} else if(f === 'utf16le') {\nvar end = Math.min(this.l + t, this.length);\n\t\t\tfor(i = 0; i < Math.min(val.length, t); ++i) {\n\t\t\t\tvar cc = val.charCodeAt(i);\n\t\t\t\tthis[this.l++] = (cc & 0xff);\n\t\t\t\tthis[this.l++] = (cc >> 8);\n\t\t\t}\n\t\t\twhile(this.l < end) this[this.l++] = 0;\n\t\t\treturn this;\n\t} else  switch(t) {\n\t\tcase  1: size = 1; this[this.l] = val&0xFF; break;\n\t\tcase  2: size = 2; this[this.l] = val&0xFF; val >>>= 8; this[this.l+1] = val&0xFF; break;\n\t\tcase  3: size = 3; this[this.l] = val&0xFF; val >>>= 8; this[this.l+1] = val&0xFF; val >>>= 8; this[this.l+2] = val&0xFF; break;\n\t\tcase  4: size = 4; __writeUInt32LE(this, val, this.l); break;\n\t\tcase  8: size = 8; if(f === 'f') { write_double_le(this, val, this.l); break; }\n\t\t/* falls through */\n\t\tcase 16: break;\n\t\tcase -4: size = 4; __writeInt32LE(this, val, this.l); break;\n\t}\n\tthis.l += size; return this;\n}\n\nfunction CheckField(hexstr, fld) {\n\tvar m = __hexlify(this,this.l,hexstr.length>>1);\n\tif(m !== hexstr) throw new Error(fld + 'Expected ' + hexstr + ' saw ' + m);\n\tthis.l += hexstr.length>>1;\n}\n\nfunction prep_blob(blob, pos) {\n\tblob.l = pos;\n\tblob.read_shift = ReadShift;\n\tblob.chk = CheckField;\n\tblob.write_shift = WriteShift;\n}\n\nfunction parsenoop(blob, length) { blob.l += length; }\n\nfunction new_buf(sz) {\n\tvar o = new_raw_buf(sz);\n\tprep_blob(o, 0);\n\treturn o;\n}\n\n/* [MS-XLSB] 2.1.4 Record */\nfunction recordhopper(data, cb, opts) {\n\tif(!data) return;\n\tvar tmpbyte, cntbyte, length;\n\tprep_blob(data, data.l || 0);\n\tvar L = data.length, RT = 0, tgt = 0;\n\twhile(data.l < L) {\n\t\tRT = data.read_shift(1);\n\t\tif(RT & 0x80) RT = (RT & 0x7F) + ((data.read_shift(1) & 0x7F)<<7);\n\t\tvar R = XLSBRecordEnum[RT] || XLSBRecordEnum[0xFFFF];\n\t\ttmpbyte = data.read_shift(1);\n\t\tlength = tmpbyte & 0x7F;\n\t\tfor(cntbyte = 1; cntbyte <4 && (tmpbyte & 0x80); ++cntbyte) length += ((tmpbyte = data.read_shift(1)) & 0x7F)<<(7*cntbyte);\n\t\ttgt = data.l + length;\n\t\tvar d = R.f && R.f(data, length, opts);\n\t\tdata.l = tgt;\n\t\tif(cb(d, R.n, RT)) return;\n\t}\n}\n\n/* control buffer usage for fixed-length buffers */\nfunction buf_array() {\n\tvar bufs = [], blksz = has_buf ? 256 : 2048;\n\tvar newblk = function ba_newblk(sz) {\n\t\tvar o = (new_buf(sz));\n\t\tprep_blob(o, 0);\n\t\treturn o;\n\t};\n\n\tvar curbuf = newblk(blksz);\n\n\tvar endbuf = function ba_endbuf() {\n\t\tif(!curbuf) return;\n\t\tif(curbuf.length > curbuf.l) { curbuf = curbuf.slice(0, curbuf.l); curbuf.l = curbuf.length; }\n\t\tif(curbuf.length > 0) bufs.push(curbuf);\n\t\tcurbuf = null;\n\t};\n\n\tvar next = function ba_next(sz) {\n\t\tif(curbuf && (sz < (curbuf.length - curbuf.l))) return curbuf;\n\t\tendbuf();\n\t\treturn (curbuf = newblk(Math.max(sz+1, blksz)));\n\t};\n\n\tvar end = function ba_end() {\n\t\tendbuf();\n\t\treturn __toBuffer([bufs]);\n\t};\n\n\tvar push = function ba_push(buf) { endbuf(); curbuf = buf; if(curbuf.l == null) curbuf.l = curbuf.length; next(blksz); };\n\n\treturn ({ next:next, push:push, end:end, _bufs:bufs });\n}\n\nfunction write_record(ba, type, payload, length) {\n\tvar t = +XLSBRE[type], l;\n\tif(isNaN(t)) return; // TODO: throw something here?\n\tif(!length) length = XLSBRecordEnum[t].p || (payload||[]).length || 0;\n\tl = 1 + (t >= 0x80 ? 1 : 0) + 1/* + length*/;\n\tif(length >= 0x80) ++l; if(length >= 0x4000) ++l; if(length >= 0x200000) ++l;\n\tvar o = ba.next(l);\n\tif(t <= 0x7F) o.write_shift(1, t);\n\telse {\n\t\to.write_shift(1, (t & 0x7F) + 0x80);\n\t\to.write_shift(1, (t >> 7));\n\t}\n\tfor(var i = 0; i != 4; ++i) {\n\t\tif(length >= 0x80) { o.write_shift(1, (length & 0x7F)+0x80); length >>= 7; }\n\t\telse { o.write_shift(1, length); break; }\n\t}\n\tif(length > 0 && is_buf(payload)) ba.push(payload);\n}\n/* XLS ranges enforced */\nfunction shift_cell_xls(cell, tgt, opts) {\n\tvar out = dup(cell);\n\tif(tgt.s) {\n\t\tif(out.cRel) out.c += tgt.s.c;\n\t\tif(out.rRel) out.r += tgt.s.r;\n\t} else {\n\t\tif(out.cRel) out.c += tgt.c;\n\t\tif(out.rRel) out.r += tgt.r;\n\t}\n\tif(!opts || opts.biff < 12) {\n\t\twhile(out.c >= 0x100) out.c -= 0x100;\n\t\twhile(out.r >= 0x10000) out.r -= 0x10000;\n\t}\n\treturn out;\n}\n\nfunction shift_range_xls(cell, range, opts) {\n\tvar out = dup(cell);\n\tout.s = shift_cell_xls(out.s, range.s, opts);\n\tout.e = shift_cell_xls(out.e, range.s, opts);\n\treturn out;\n}\n\nfunction encode_cell_xls(c, biff) {\n\tif(c.cRel && c.c < 0) { c = dup(c); while(c.c < 0) c.c += (biff > 8) ? 0x4000 : 0x100; }\n\tif(c.rRel && c.r < 0) { c = dup(c); while(c.r < 0) c.r += (biff > 8) ? 0x100000 : ((biff > 5) ? 0x10000 : 0x4000); }\n\tvar s = encode_cell(c);\n\tif(!c.cRel && c.cRel != null) s = fix_col(s);\n\tif(!c.rRel && c.rRel != null) s = fix_row(s);\n\treturn s;\n}\n\nfunction encode_range_xls(r, opts) {\n\tif(r.s.r == 0 && !r.s.rRel) {\n\t\tif(r.e.r == (opts.biff >= 12 ? 0xFFFFF : (opts.biff >= 8 ? 0x10000 : 0x4000)) && !r.e.rRel) {\n\t\t\treturn (r.s.cRel ? \"\" : \"$\") + encode_col(r.s.c) + \":\" + (r.e.cRel ? \"\" : \"$\") + encode_col(r.e.c);\n\t\t}\n\t}\n\tif(r.s.c == 0 && !r.s.cRel) {\n\t\tif(r.e.c == (opts.biff >= 12 ? 0x3FFF : 0xFF) && !r.e.cRel) {\n\t\t\treturn (r.s.rRel ? \"\" : \"$\") + encode_row(r.s.r) + \":\" + (r.e.rRel ? \"\" : \"$\") + encode_row(r.e.r);\n\t\t}\n\t}\n\treturn encode_cell_xls(r.s, opts.biff) + \":\" + encode_cell_xls(r.e, opts.biff);\n}\nvar OFFCRYPTO = {};\n\nvar make_offcrypto = function(O, _crypto) {\n\tvar crypto;\n\tif(typeof _crypto !== 'undefined') crypto = _crypto;\n\telse if(true) {\n\t\ttry { crypto = __webpack_require__(/*! crypto */ 3); }\n\t\tcatch(e) { crypto = null; }\n\t}\n\n\tO.rc4 = function(key, data) {\n\t\tvar S = new Array(256);\n\t\tvar c = 0, i = 0, j = 0, t = 0;\n\t\tfor(i = 0; i != 256; ++i) S[i] = i;\n\t\tfor(i = 0; i != 256; ++i) {\n\t\t\tj = (j + S[i] + (key[i%key.length]).charCodeAt(0))&255;\n\t\t\tt = S[i]; S[i] = S[j]; S[j] = t;\n\t\t}\n\t\t// $FlowIgnore\n\t\ti = j = 0; var out = new_raw_buf(data.length);\n\t\tfor(c = 0; c != data.length; ++c) {\n\t\t\ti = (i + 1)&255;\n\t\t\tj = (j + S[i])%256;\n\t\t\tt = S[i]; S[i] = S[j]; S[j] = t;\n\t\t\tout[c] = (data[c] ^ S[(S[i]+S[j])&255]);\n\t\t}\n\t\treturn out;\n\t};\n\n\tO.md5 = function(hex) {\n\t\tif(!crypto) throw new Error(\"Unsupported crypto\");\n\t\treturn crypto.createHash('md5').update(hex).digest('hex');\n\t};\n};\n/*global crypto:true */\nmake_offcrypto(OFFCRYPTO, typeof crypto !== \"undefined\" ? crypto : undefined);\n\nfunction decode_row(rowstr) { return parseInt(unfix_row(rowstr),10) - 1; }\nfunction encode_row(row) { return \"\" + (row + 1); }\nfunction fix_row(cstr) { return cstr.replace(/([A-Z]|^)(\\d+)$/,\"$1$$$2\"); }\nfunction unfix_row(cstr) { return cstr.replace(/\\$(\\d+)$/,\"$1\"); }\n\nfunction decode_col(colstr) { var c = unfix_col(colstr), d = 0, i = 0; for(; i !== c.length; ++i) d = 26*d + c.charCodeAt(i) - 64; return d - 1; }\nfunction encode_col(col) { if(col < 0) throw new Error(\"invalid column \" + col); var s=\"\"; for(++col; col; col=Math.floor((col-1)/26)) s = String.fromCharCode(((col-1)%26) + 65) + s; return s; }\nfunction fix_col(cstr) { return cstr.replace(/^([A-Z])/,\"$$$1\"); }\nfunction unfix_col(cstr) { return cstr.replace(/^\\$([A-Z])/,\"$1\"); }\n\nfunction split_cell(cstr) { return cstr.replace(/(\\$?[A-Z]*)(\\$?\\d*)/,\"$1,$2\").split(\",\"); }\n//function decode_cell(cstr) { var splt = split_cell(cstr); return { c:decode_col(splt[0]), r:decode_row(splt[1]) }; }\nfunction decode_cell(cstr) {\n\tvar R = 0, C = 0;\n\tfor(var i = 0; i < cstr.length; ++i) {\n\t\tvar cc = cstr.charCodeAt(i);\n\t\tif(cc >= 48 && cc <= 57) R = 10 * R + (cc - 48);\n\t\telse if(cc >= 65 && cc <= 90) C = 26 * C + (cc - 64);\n\t}\n\treturn { c: C - 1, r:R - 1 };\n}\n//function encode_cell(cell) { return encode_col(cell.c) + encode_row(cell.r); }\nfunction encode_cell(cell) {\n\tvar col = cell.c + 1;\n\tvar s=\"\";\n\tfor(; col; col=((col-1)/26)|0) s = String.fromCharCode(((col-1)%26) + 65) + s;\n\treturn s + (cell.r + 1);\n}\nfunction decode_range(range) {\n\tvar idx = range.indexOf(\":\");\n\tif(idx == -1) return { s: decode_cell(range), e: decode_cell(range) };\n\treturn { s: decode_cell(range.slice(0, idx)), e: decode_cell(range.slice(idx + 1)) };\n}\nfunction encode_range(cs,ce) {\n\tif(typeof ce === 'undefined' || typeof ce === 'number') {\nreturn encode_range(cs.s, cs.e);\n\t}\nif(typeof cs !== 'string') cs = encode_cell((cs));\n\tif(typeof ce !== 'string') ce = encode_cell((ce));\nreturn cs == ce ? cs : cs + \":\" + ce;\n}\n\nfunction safe_decode_range(range) {\n\tvar o = {s:{c:0,r:0},e:{c:0,r:0}};\n\tvar idx = 0, i = 0, cc = 0;\n\tvar len = range.length;\n\tfor(idx = 0; i < len; ++i) {\n\t\tif((cc=range.charCodeAt(i)-64) < 1 || cc > 26) break;\n\t\tidx = 26*idx + cc;\n\t}\n\to.s.c = --idx;\n\n\tfor(idx = 0; i < len; ++i) {\n\t\tif((cc=range.charCodeAt(i)-48) < 0 || cc > 9) break;\n\t\tidx = 10*idx + cc;\n\t}\n\to.s.r = --idx;\n\n\tif(i === len || range.charCodeAt(++i) === 58) { o.e.c=o.s.c; o.e.r=o.s.r; return o; }\n\n\tfor(idx = 0; i != len; ++i) {\n\t\tif((cc=range.charCodeAt(i)-64) < 1 || cc > 26) break;\n\t\tidx = 26*idx + cc;\n\t}\n\to.e.c = --idx;\n\n\tfor(idx = 0; i != len; ++i) {\n\t\tif((cc=range.charCodeAt(i)-48) < 0 || cc > 9) break;\n\t\tidx = 10*idx + cc;\n\t}\n\to.e.r = --idx;\n\treturn o;\n}\n\nfunction safe_format_cell(cell, v) {\n\tvar q = (cell.t == 'd' && v instanceof Date);\n\tif(cell.z != null) try { return (cell.w = SSF.format(cell.z, q ? datenum(v) : v)); } catch(e) { }\n\ttry { return (cell.w = SSF.format((cell.XF||{}).numFmtId||(q ? 14 : 0),  q ? datenum(v) : v)); } catch(e) { return ''+v; }\n}\n\nfunction format_cell(cell, v, o) {\n\tif(cell == null || cell.t == null || cell.t == 'z') return \"\";\n\tif(cell.w !== undefined) return cell.w;\n\tif(cell.t == 'd' && !cell.z && o && o.dateNF) cell.z = o.dateNF;\n\tif(cell.t == \"e\") return BErr[cell.v] || cell.v;\n\tif(v == undefined) return safe_format_cell(cell, cell.v);\n\treturn safe_format_cell(cell, v);\n}\n\nfunction sheet_to_workbook(sheet, opts) {\n\tvar n = opts && opts.sheet ? opts.sheet : \"Sheet1\";\n\tvar sheets = {}; sheets[n] = sheet;\n\treturn { SheetNames: [n], Sheets: sheets };\n}\n\nfunction sheet_add_aoa(_ws, data, opts) {\n\tvar o = opts || {};\n\tvar dense = _ws ? Array.isArray(_ws) : o.dense;\n\tif(DENSE != null && dense == null) dense = DENSE;\n\tvar ws = _ws || (dense ? ([]) : ({}));\n\tvar _R = 0, _C = 0;\n\tif(ws && o.origin != null) {\n\t\tif(typeof o.origin == 'number') _R = o.origin;\n\t\telse {\n\t\t\tvar _origin = typeof o.origin == \"string\" ? decode_cell(o.origin) : o.origin;\n\t\t\t_R = _origin.r; _C = _origin.c;\n\t\t}\n\t\tif(!ws[\"!ref\"]) ws[\"!ref\"] = \"A1:A1\";\n\t}\n\tvar range = ({s: {c:10000000, r:10000000}, e: {c:0, r:0}});\n\tif(ws['!ref']) {\n\t\tvar _range = safe_decode_range(ws['!ref']);\n\t\trange.s.c = _range.s.c;\n\t\trange.s.r = _range.s.r;\n\t\trange.e.c = Math.max(range.e.c, _range.e.c);\n\t\trange.e.r = Math.max(range.e.r, _range.e.r);\n\t\tif(_R == -1) range.e.r = _R = _range.e.r + 1;\n\t}\n\tfor(var R = 0; R != data.length; ++R) {\n\t\tif(!data[R]) continue;\n\t\tif(!Array.isArray(data[R])) throw new Error(\"aoa_to_sheet expects an array of arrays\");\n\t\tfor(var C = 0; C != data[R].length; ++C) {\n\t\t\tif(typeof data[R][C] === 'undefined') continue;\n\t\t\tvar cell = ({v: data[R][C] });\n\t\t\tvar __R = _R + R, __C = _C + C;\n\t\t\tif(range.s.r > __R) range.s.r = __R;\n\t\t\tif(range.s.c > __C) range.s.c = __C;\n\t\t\tif(range.e.r < __R) range.e.r = __R;\n\t\t\tif(range.e.c < __C) range.e.c = __C;\n\t\t\tif(data[R][C] && typeof data[R][C] === 'object' && !Array.isArray(data[R][C]) && !(data[R][C] instanceof Date)) cell = data[R][C];\n\t\t\telse {\n\t\t\t\tif(Array.isArray(cell.v)) { cell.f = data[R][C][1]; cell.v = cell.v[0]; }\n\t\t\t\tif(cell.v === null) {\n\t\t\t\t\tif(cell.f) cell.t = 'n';\n\t\t\t\t\telse if(o.nullError) { cell.t = 'e'; cell.v = 0; }\n\t\t\t\t\telse if(!o.sheetStubs) continue;\n\t\t\t\t\telse cell.t = 'z';\n\t\t\t\t}\n\t\t\t\telse if(typeof cell.v === 'number') cell.t = 'n';\n\t\t\t\telse if(typeof cell.v === 'boolean') cell.t = 'b';\n\t\t\t\telse if(cell.v instanceof Date) {\n\t\t\t\t\tcell.z = o.dateNF || SSF._table[14];\n\t\t\t\t\tif(o.cellDates) { cell.t = 'd'; cell.w = SSF.format(cell.z, datenum(cell.v)); }\n\t\t\t\t\telse { cell.t = 'n'; cell.v = datenum(cell.v); cell.w = SSF.format(cell.z, cell.v); }\n\t\t\t\t}\n\t\t\t\telse cell.t = 's';\n\t\t\t}\n\t\t\tif(dense) {\n\t\t\t\tif(!ws[__R]) ws[__R] = [];\n\t\t\t\tif(ws[__R][__C] && ws[__R][__C].z) cell.z = ws[__R][__C].z;\n\t\t\t\tws[__R][__C] = cell;\n\t\t\t} else {\n\t\t\t\tvar cell_ref = encode_cell(({c:__C,r:__R}));\n\t\t\t\tif(ws[cell_ref] && ws[cell_ref].z) cell.z = ws[cell_ref].z;\n\t\t\t\tws[cell_ref] = cell;\n\t\t\t}\n\t\t}\n\t}\n\tif(range.s.c < 10000000) ws['!ref'] = encode_range(range);\n\treturn ws;\n}\nfunction aoa_to_sheet(data, opts) { return sheet_add_aoa(null, data, opts); }\n\nfunction write_UInt32LE(x, o) {\n\tif (!o) o = new_buf(4);\n\to.write_shift(4, x);\n\treturn o;\n}\n\n/* [MS-XLSB] 2.5.168 */\nfunction parse_XLWideString(data) {\n\tvar cchCharacters = data.read_shift(4);\n\treturn cchCharacters === 0 ? \"\" : data.read_shift(cchCharacters, 'dbcs');\n}\nfunction write_XLWideString(data, o) {\n\tvar _null = false; if (o == null) { _null = true; o = new_buf(4 + 2 * data.length); }\n\to.write_shift(4, data.length);\n\tif (data.length > 0) o.write_shift(0, data, 'dbcs');\n\treturn _null ? o.slice(0, o.l) : o;\n}\n\n/* [MS-XLSB] 2.5.91 */\n//function parse_LPWideString(data) {\n//\tvar cchCharacters = data.read_shift(2);\n//\treturn cchCharacters === 0 ? \"\" : data.read_shift(cchCharacters, \"utf16le\");\n//}\n\n/* [MS-XLSB] 2.5.143 */\nfunction parse_StrRun(data) {\n\treturn { ich: data.read_shift(2), ifnt: data.read_shift(2) };\n}\nfunction write_StrRun(run, o) {\n\tif (!o) o = new_buf(4);\n\to.write_shift(2, run.ich || 0);\n\to.write_shift(2, run.ifnt || 0);\n\treturn o;\n}\n\n/* [MS-XLSB] 2.5.121 */\nfunction parse_RichStr(data, length) {\n\tvar start = data.l;\n\tvar flags = data.read_shift(1);\n\tvar str = parse_XLWideString(data);\n\tvar rgsStrRun = [];\n\tvar z = ({ t: str, h: str });\n\tif ((flags & 1) !== 0) { /* fRichStr */\n\t\t/* TODO: formatted string */\n\t\tvar dwSizeStrRun = data.read_shift(4);\n\t\tfor (var i = 0; i != dwSizeStrRun; ++i) rgsStrRun.push(parse_StrRun(data));\n\t\tz.r = rgsStrRun;\n\t}\n\telse z.r = [{ ich: 0, ifnt: 0 }];\n\t//if((flags & 2) !== 0) { /* fExtStr */\n\t//\t/* TODO: phonetic string */\n\t//}\n\tdata.l = start + length;\n\treturn z;\n}\nfunction write_RichStr(str, o) {\n\t/* TODO: formatted string */\n\tvar _null = false; if (o == null) { _null = true; o = new_buf(15 + 4 * str.t.length); }\n\to.write_shift(1, 0);\n\twrite_XLWideString(str.t, o);\n\treturn _null ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.4.328 BrtCommentText (RichStr w/1 run) */\nvar parse_BrtCommentText = parse_RichStr;\nfunction write_BrtCommentText(str, o) {\n\t/* TODO: formatted string */\n\tvar _null = false; if (o == null) { _null = true; o = new_buf(23 + 4 * str.t.length); }\n\to.write_shift(1, 1);\n\twrite_XLWideString(str.t, o);\n\to.write_shift(4, 1);\n\twrite_StrRun({ ich: 0, ifnt: 0 }, o);\n\treturn _null ? o.slice(0, o.l) : o;\n}\n\n/* [MS-XLSB] 2.5.9 */\nfunction parse_XLSBCell(data) {\n\tvar col = data.read_shift(4);\n\tvar iStyleRef = data.read_shift(2);\n\tiStyleRef += data.read_shift(1) << 16;\n\tdata.l++; //var fPhShow = data.read_shift(1);\n\treturn { c: col, iStyleRef: iStyleRef };\n}\nfunction write_XLSBCell(cell, o) {\n\tif (o == null) o = new_buf(8);\n\to.write_shift(-4, cell.c);\n\to.write_shift(3, cell.iStyleRef || cell.s);\n\to.write_shift(1, 0); /* fPhShow */\n\treturn o;\n}\n\n/* Short XLSB Cell does not include column */\nfunction parse_XLSBShortCell(data) {\n\tvar iStyleRef = data.read_shift(2);\n\tiStyleRef += data.read_shift(1) <<16;\n\tdata.l++; //var fPhShow = data.read_shift(1);\n\treturn { c:-1, iStyleRef: iStyleRef };\n}\nfunction write_XLSBShortCell(cell, o) {\n\tif(o == null) o = new_buf(4);\n\to.write_shift(3, cell.iStyleRef || cell.s);\n\to.write_shift(1, 0); /* fPhShow */\n\treturn o;\n}\n\n/* [MS-XLSB] 2.5.21 */\nvar parse_XLSBCodeName = parse_XLWideString;\nvar write_XLSBCodeName = write_XLWideString;\n\n/* [MS-XLSB] 2.5.166 */\nfunction parse_XLNullableWideString(data) {\n\tvar cchCharacters = data.read_shift(4);\n\treturn cchCharacters === 0 || cchCharacters === 0xFFFFFFFF ? \"\" : data.read_shift(cchCharacters, 'dbcs');\n}\nfunction write_XLNullableWideString(data, o) {\n\tvar _null = false; if (o == null) { _null = true; o = new_buf(127); }\n\to.write_shift(4, data.length > 0 ? data.length : 0xFFFFFFFF);\n\tif (data.length > 0) o.write_shift(0, data, 'dbcs');\n\treturn _null ? o.slice(0, o.l) : o;\n}\n\n/* [MS-XLSB] 2.5.165 */\nvar parse_XLNameWideString = parse_XLWideString;\n//var write_XLNameWideString = write_XLWideString;\n\n/* [MS-XLSB] 2.5.114 */\nvar parse_RelID = parse_XLNullableWideString;\nvar write_RelID = write_XLNullableWideString;\n\n\n/* [MS-XLS] 2.5.217 ; [MS-XLSB] 2.5.122 */\nfunction parse_RkNumber(data) {\n\tvar b = data.slice(data.l, data.l + 4);\n\tvar fX100 = (b[0] & 1), fInt = (b[0] & 2);\n\tdata.l += 4;\n\tb[0] &= 0xFC; // b[0] &= ~3;\n\tvar RK = fInt === 0 ? __double([0, 0, 0, 0, b[0], b[1], b[2], b[3]], 0) : __readInt32LE(b, 0) >> 2;\n\treturn fX100 ? (RK / 100) : RK;\n}\nfunction write_RkNumber(data, o) {\n\tif (o == null) o = new_buf(4);\n\tvar fX100 = 0, fInt = 0, d100 = data * 100;\n\tif ((data == (data | 0)) && (data >= -(1 << 29)) && (data < (1 << 29))) { fInt = 1; }\n\telse if ((d100 == (d100 | 0)) && (d100 >= -(1 << 29)) && (d100 < (1 << 29))) { fInt = 1; fX100 = 1; }\n\tif (fInt) o.write_shift(-4, ((fX100 ? d100 : data) << 2) + (fX100 + 2));\n\telse throw new Error(\"unsupported RkNumber \" + data); // TODO\n}\n\n\n/* [MS-XLSB] 2.5.117 RfX */\nfunction parse_RfX(data ) {\n\tvar cell = ({ s: {}, e: {} });\n\tcell.s.r = data.read_shift(4);\n\tcell.e.r = data.read_shift(4);\n\tcell.s.c = data.read_shift(4);\n\tcell.e.c = data.read_shift(4);\n\treturn cell;\n}\nfunction write_RfX(r, o) {\n\tif (!o) o = new_buf(16);\n\to.write_shift(4, r.s.r);\n\to.write_shift(4, r.e.r);\n\to.write_shift(4, r.s.c);\n\to.write_shift(4, r.e.c);\n\treturn o;\n}\n\n/* [MS-XLSB] 2.5.153 UncheckedRfX */\nvar parse_UncheckedRfX = parse_RfX;\nvar write_UncheckedRfX = write_RfX;\n\n/* [MS-XLSB] 2.5.155 UncheckedSqRfX */\n//function parse_UncheckedSqRfX(data) {\n//\tvar cnt = data.read_shift(4);\n//\tvar out = [];\n//\tfor(var i = 0; i < cnt; ++i) {\n//\t\tvar rng = parse_UncheckedRfX(data);\n//\t\tout.push(encode_range(rng));\n//\t}\n//\treturn out.join(\",\");\n//}\n//function write_UncheckedSqRfX(sqrfx) {\n//\tvar parts = sqrfx.split(/\\s*,\\s*/);\n//\tvar o = new_buf(4); o.write_shift(4, parts.length);\n//\tvar out = [o];\n//\tparts.forEach(function(rng) {\n//\t\tout.push(write_UncheckedRfX(safe_decode_range(rng)));\n//\t});\n//\treturn bconcat(out);\n//}\n\n/* [MS-XLS] 2.5.342 ; [MS-XLSB] 2.5.171 */\n/* TODO: error checking, NaN and Infinity values are not valid Xnum */\nfunction parse_Xnum(data) {\n\tif(data.length - data.l < 8) throw \"XLS Xnum Buffer underflow\";\n\treturn data.read_shift(8, 'f');\n}\nfunction write_Xnum(data, o) { return (o || new_buf(8)).write_shift(8, data, 'f'); }\n\n/* [MS-XLSB] 2.4.324 BrtColor */\nfunction parse_BrtColor(data) {\n\tvar out = {};\n\tvar d = data.read_shift(1);\n\n\t//var fValidRGB = d & 1;\n\tvar xColorType = d >>> 1;\n\n\tvar index = data.read_shift(1);\n\tvar nTS = data.read_shift(2, 'i');\n\tvar bR = data.read_shift(1);\n\tvar bG = data.read_shift(1);\n\tvar bB = data.read_shift(1);\n\tdata.l++; //var bAlpha = data.read_shift(1);\n\n\tswitch (xColorType) {\n\t\tcase 0: out.auto = 1; break;\n\t\tcase 1:\n\t\t\tout.index = index;\n\t\t\tvar icv = XLSIcv[index];\n\t\t\t/* automatic pseudo index 81 */\n\t\t\tif (icv) out.rgb = rgb2Hex(icv);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\t/* if(!fValidRGB) throw new Error(\"invalid\"); */\n\t\t\tout.rgb = rgb2Hex([bR, bG, bB]);\n\t\t\tbreak;\n\t\tcase 3: out.theme = index; break;\n\t}\n\tif (nTS != 0) out.tint = nTS > 0 ? nTS / 32767 : nTS / 32768;\n\n\treturn out;\n}\nfunction write_BrtColor(color, o) {\n\tif (!o) o = new_buf(8);\n\tif (!color || color.auto) { o.write_shift(4, 0); o.write_shift(4, 0); return o; }\n\tif (color.index != null) {\n\t\to.write_shift(1, 0x02);\n\t\to.write_shift(1, color.index);\n\t} else if (color.theme != null) {\n\t\to.write_shift(1, 0x06);\n\t\to.write_shift(1, color.theme);\n\t} else {\n\t\to.write_shift(1, 0x05);\n\t\to.write_shift(1, 0);\n\t}\n\tvar nTS = color.tint || 0;\n\tif (nTS > 0) nTS *= 32767;\n\telse if (nTS < 0) nTS *= 32768;\n\to.write_shift(2, nTS);\n\tif (!color.rgb || color.theme != null) {\n\t\to.write_shift(2, 0);\n\t\to.write_shift(1, 0);\n\t\to.write_shift(1, 0);\n\t} else {\n\t\tvar rgb = (color.rgb || 'FFFFFF');\n\t\tif (typeof rgb == 'number') rgb = (\"000000\" + rgb.toString(16)).slice(-6);\n\t\to.write_shift(1, parseInt(rgb.slice(0, 2), 16));\n\t\to.write_shift(1, parseInt(rgb.slice(2, 4), 16));\n\t\to.write_shift(1, parseInt(rgb.slice(4, 6), 16));\n\t\to.write_shift(1, 0xFF);\n\t}\n\treturn o;\n}\n\n/* [MS-XLSB] 2.5.52 */\nfunction parse_FontFlags(data) {\n\tvar d = data.read_shift(1);\n\tdata.l++;\n\tvar out = {\n\t\tfBold: d & 0x01,\n\t\tfItalic: d & 0x02,\n\t\tfUnderline: d & 0x04,\n\t\tfStrikeout: d & 0x08,\n\t\tfOutline: d & 0x10,\n\t\tfShadow: d & 0x20,\n\t\tfCondense: d & 0x40,\n\t\tfExtend: d & 0x80\n\t};\n\treturn out;\n}\nfunction write_FontFlags(font, o) {\n\tif (!o) o = new_buf(2);\n\tvar grbit =\n\t\t(font.italic ? 0x02 : 0) |\n\t\t(font.strike ? 0x08 : 0) |\n\t\t(font.outline ? 0x10 : 0) |\n\t\t(font.shadow ? 0x20 : 0) |\n\t\t(font.condense ? 0x40 : 0) |\n\t\t(font.extend ? 0x80 : 0);\n\to.write_shift(1, grbit);\n\to.write_shift(1, 0);\n\treturn o;\n}\n\n/* [MS-OLEDS] 2.3.1 and 2.3.2 */\nfunction parse_ClipboardFormatOrString(o, w) {\n\t// $FlowIgnore\n\tvar ClipFmt = { 2: \"BITMAP\", 3: \"METAFILEPICT\", 8: \"DIB\", 14: \"ENHMETAFILE\" };\n\tvar m = o.read_shift(4);\n\tswitch (m) {\n\t\tcase 0x00000000: return \"\";\n\t\tcase 0xffffffff: case 0xfffffffe: return ClipFmt[o.read_shift(4)] || \"\";\n\t}\n\tif (m > 0x190) throw new Error(\"Unsupported Clipboard: \" + m.toString(16));\n\to.l -= 4;\n\treturn o.read_shift(0, w == 1 ? \"lpstr\" : \"lpwstr\");\n}\nfunction parse_ClipboardFormatOrAnsiString(o) { return parse_ClipboardFormatOrString(o, 1); }\nfunction parse_ClipboardFormatOrUnicodeString(o) { return parse_ClipboardFormatOrString(o, 2); }\n\n/* [MS-OLEPS] 2.2 PropertyType */\n//var VT_EMPTY    = 0x0000;\n//var VT_NULL     = 0x0001;\nvar VT_I2       = 0x0002;\nvar VT_I4       = 0x0003;\n//var VT_R4       = 0x0004;\n//var VT_R8       = 0x0005;\n//var VT_CY       = 0x0006;\n//var VT_DATE     = 0x0007;\n//var VT_BSTR     = 0x0008;\n//var VT_ERROR    = 0x000A;\nvar VT_BOOL     = 0x000B;\nvar VT_VARIANT  = 0x000C;\n//var VT_DECIMAL  = 0x000E;\n//var VT_I1       = 0x0010;\n//var VT_UI1      = 0x0011;\n//var VT_UI2      = 0x0012;\nvar VT_UI4      = 0x0013;\n//var VT_I8       = 0x0014;\n//var VT_UI8      = 0x0015;\n//var VT_INT      = 0x0016;\n//var VT_UINT     = 0x0017;\nvar VT_LPSTR    = 0x001E;\n//var VT_LPWSTR   = 0x001F;\nvar VT_FILETIME = 0x0040;\nvar VT_BLOB     = 0x0041;\n//var VT_STREAM   = 0x0042;\n//var VT_STORAGE  = 0x0043;\n//var VT_STREAMED_Object  = 0x0044;\n//var VT_STORED_Object    = 0x0045;\n//var VT_BLOB_Object      = 0x0046;\nvar VT_CF       = 0x0047;\n//var VT_CLSID    = 0x0048;\n//var VT_VERSIONED_STREAM = 0x0049;\nvar VT_VECTOR   = 0x1000;\n//var VT_ARRAY    = 0x2000;\n\nvar VT_STRING   = 0x0050; // 2.3.3.1.11 VtString\nvar VT_USTR     = 0x0051; // 2.3.3.1.12 VtUnalignedString\nvar VT_CUSTOM   = [VT_STRING, VT_USTR];\n\n/* [MS-OSHARED] 2.3.3.2.2.1 Document Summary Information PIDDSI */\nvar DocSummaryPIDDSI = {\n0x01: { n: 'CodePage', t: VT_I2 },\n0x02: { n: 'Category', t: VT_STRING },\n0x03: { n: 'PresentationFormat', t: VT_STRING },\n0x04: { n: 'ByteCount', t: VT_I4 },\n0x05: { n: 'LineCount', t: VT_I4 },\n0x06: { n: 'ParagraphCount', t: VT_I4 },\n0x07: { n: 'SlideCount', t: VT_I4 },\n0x08: { n: 'NoteCount', t: VT_I4 },\n0x09: { n: 'HiddenCount', t: VT_I4 },\n0x0a: { n: 'MultimediaClipCount', t: VT_I4 },\n0x0b: { n: 'ScaleCrop', t: VT_BOOL },\n0x0c: { n: 'HeadingPairs', t: VT_VECTOR | VT_VARIANT },\n0x0d: { n: 'TitlesOfParts', t: VT_VECTOR | VT_LPSTR },\n0x0e: { n: 'Manager', t: VT_STRING },\n0x0f: { n: 'Company', t: VT_STRING },\n0x10: { n: 'LinksUpToDate', t: VT_BOOL },\n0x11: { n: 'CharacterCount', t: VT_I4 },\n0x13: { n: 'SharedDoc', t: VT_BOOL },\n0x16: { n: 'HyperlinksChanged', t: VT_BOOL },\n0x17: { n: 'AppVersion', t: VT_I4, p: 'version' },\n0x18: { n: 'DigSig', t: VT_BLOB },\n0x1A: { n: 'ContentType', t: VT_STRING },\n0x1B: { n: 'ContentStatus', t: VT_STRING },\n0x1C: { n: 'Language', t: VT_STRING },\n0x1D: { n: 'Version', t: VT_STRING },\n0xFF: {},\n\t/* [MS-OLEPS] 2.18 */\n0x80000000: { n: 'Locale', t: VT_UI4 },\n0x80000003: { n: 'Behavior', t: VT_UI4 },\n0x72627262: {}\n};\n\n/* [MS-OSHARED] 2.3.3.2.1.1 Summary Information Property Set PIDSI */\nvar SummaryPIDSI = {\n0x01: { n: 'CodePage', t: VT_I2 },\n0x02: { n: 'Title', t: VT_STRING },\n0x03: { n: 'Subject', t: VT_STRING },\n0x04: { n: 'Author', t: VT_STRING },\n0x05: { n: 'Keywords', t: VT_STRING },\n0x06: { n: 'Comments', t: VT_STRING },\n0x07: { n: 'Template', t: VT_STRING },\n0x08: { n: 'LastAuthor', t: VT_STRING },\n0x09: { n: 'RevNumber', t: VT_STRING },\n0x0A: { n: 'EditTime', t: VT_FILETIME },\n0x0B: { n: 'LastPrinted', t: VT_FILETIME },\n0x0C: { n: 'CreatedDate', t: VT_FILETIME },\n0x0D: { n: 'ModifiedDate', t: VT_FILETIME },\n0x0E: { n: 'PageCount', t: VT_I4 },\n0x0F: { n: 'WordCount', t: VT_I4 },\n0x10: { n: 'CharCount', t: VT_I4 },\n0x11: { n: 'Thumbnail', t: VT_CF },\n0x12: { n: 'Application', t: VT_STRING },\n0x13: { n: 'DocSecurity', t: VT_I4 },\n0xFF: {},\n\t/* [MS-OLEPS] 2.18 */\n0x80000000: { n: 'Locale', t: VT_UI4 },\n0x80000003: { n: 'Behavior', t: VT_UI4 },\n0x72627262: {}\n};\n\nvar DocSummaryRE = evert_key(DocSummaryPIDDSI, \"n\");\nvar SummaryRE = evert_key(SummaryPIDSI, \"n\");\n\n/* [MS-XLS] 2.4.63 Country/Region codes */\nvar CountryEnum = {\n0x0001: \"US\", // United States\n0x0002: \"CA\", // Canada\n0x0003: \"\", // Latin America (except Brazil)\n0x0007: \"RU\", // Russia\n0x0014: \"EG\", // Egypt\n0x001E: \"GR\", // Greece\n0x001F: \"NL\", // Netherlands\n0x0020: \"BE\", // Belgium\n0x0021: \"FR\", // France\n0x0022: \"ES\", // Spain\n0x0024: \"HU\", // Hungary\n0x0027: \"IT\", // Italy\n0x0029: \"CH\", // Switzerland\n0x002B: \"AT\", // Austria\n0x002C: \"GB\", // United Kingdom\n0x002D: \"DK\", // Denmark\n0x002E: \"SE\", // Sweden\n0x002F: \"NO\", // Norway\n0x0030: \"PL\", // Poland\n0x0031: \"DE\", // Germany\n0x0034: \"MX\", // Mexico\n0x0037: \"BR\", // Brazil\n0x003d: \"AU\", // Australia\n0x0040: \"NZ\", // New Zealand\n0x0042: \"TH\", // Thailand\n0x0051: \"JP\", // Japan\n0x0052: \"KR\", // Korea\n0x0054: \"VN\", // Viet Nam\n0x0056: \"CN\", // China\n0x005A: \"TR\", // Turkey\n0x0069: \"JS\", // Ramastan\n0x00D5: \"DZ\", // Algeria\n0x00D8: \"MA\", // Morocco\n0x00DA: \"LY\", // Libya\n0x015F: \"PT\", // Portugal\n0x0162: \"IS\", // Iceland\n0x0166: \"FI\", // Finland\n0x01A4: \"CZ\", // Czech Republic\n0x0376: \"TW\", // Taiwan\n0x03C1: \"LB\", // Lebanon\n0x03C2: \"JO\", // Jordan\n0x03C3: \"SY\", // Syria\n0x03C4: \"IQ\", // Iraq\n0x03C5: \"KW\", // Kuwait\n0x03C6: \"SA\", // Saudi Arabia\n0x03CB: \"AE\", // United Arab Emirates\n0x03CC: \"IL\", // Israel\n0x03CE: \"QA\", // Qatar\n0x03D5: \"IR\", // Iran\n0xFFFF: \"US\"  // United States\n};\n\n/* [MS-XLS] 2.5.127 */\nvar XLSFillPattern = [\n\tnull,\n\t'solid',\n\t'mediumGray',\n\t'darkGray',\n\t'lightGray',\n\t'darkHorizontal',\n\t'darkVertical',\n\t'darkDown',\n\t'darkUp',\n\t'darkGrid',\n\t'darkTrellis',\n\t'lightHorizontal',\n\t'lightVertical',\n\t'lightDown',\n\t'lightUp',\n\t'lightGrid',\n\t'lightTrellis',\n\t'gray125',\n\t'gray0625'\n];\n\nfunction rgbify(arr) { return arr.map(function(x) { return [(x>>16)&255,(x>>8)&255,x&255]; }); }\n\n/* [MS-XLS] 2.5.161 */\n/* [MS-XLSB] 2.5.75 Icv */\nvar _XLSIcv = rgbify([\n\t/* Color Constants */\n\t0x000000,\n\t0xFFFFFF,\n\t0xFF0000,\n\t0x00FF00,\n\t0x0000FF,\n\t0xFFFF00,\n\t0xFF00FF,\n\t0x00FFFF,\n\n\t/* Overridable Defaults */\n\t0x000000,\n\t0xFFFFFF,\n\t0xFF0000,\n\t0x00FF00,\n\t0x0000FF,\n\t0xFFFF00,\n\t0xFF00FF,\n\t0x00FFFF,\n\n\t0x800000,\n\t0x008000,\n\t0x000080,\n\t0x808000,\n\t0x800080,\n\t0x008080,\n\t0xC0C0C0,\n\t0x808080,\n\t0x9999FF,\n\t0x993366,\n\t0xFFFFCC,\n\t0xCCFFFF,\n\t0x660066,\n\t0xFF8080,\n\t0x0066CC,\n\t0xCCCCFF,\n\n\t0x000080,\n\t0xFF00FF,\n\t0xFFFF00,\n\t0x00FFFF,\n\t0x800080,\n\t0x800000,\n\t0x008080,\n\t0x0000FF,\n\t0x00CCFF,\n\t0xCCFFFF,\n\t0xCCFFCC,\n\t0xFFFF99,\n\t0x99CCFF,\n\t0xFF99CC,\n\t0xCC99FF,\n\t0xFFCC99,\n\n\t0x3366FF,\n\t0x33CCCC,\n\t0x99CC00,\n\t0xFFCC00,\n\t0xFF9900,\n\t0xFF6600,\n\t0x666699,\n\t0x969696,\n\t0x003366,\n\t0x339966,\n\t0x003300,\n\t0x333300,\n\t0x993300,\n\t0x993366,\n\t0x333399,\n\t0x333333,\n\n\t/* Other entries to appease BIFF8/12 */\n\t0xFFFFFF, /* 0x40 icvForeground ?? */\n\t0x000000, /* 0x41 icvBackground ?? */\n\t0x000000, /* 0x42 icvFrame ?? */\n\t0x000000, /* 0x43 icv3D ?? */\n\t0x000000, /* 0x44 icv3DText ?? */\n\t0x000000, /* 0x45 icv3DHilite ?? */\n\t0x000000, /* 0x46 icv3DShadow ?? */\n\t0x000000, /* 0x47 icvHilite ?? */\n\t0x000000, /* 0x48 icvCtlText ?? */\n\t0x000000, /* 0x49 icvCtlScrl ?? */\n\t0x000000, /* 0x4A icvCtlInv ?? */\n\t0x000000, /* 0x4B icvCtlBody ?? */\n\t0x000000, /* 0x4C icvCtlFrame ?? */\n\t0x000000, /* 0x4D icvCtlFore ?? */\n\t0x000000, /* 0x4E icvCtlBack ?? */\n\t0x000000, /* 0x4F icvCtlNeutral */\n\t0x000000, /* 0x50 icvInfoBk ?? */\n\t0x000000 /* 0x51 icvInfoText ?? */\n]);\nvar XLSIcv = dup(_XLSIcv);\n\n/* [MS-XLSB] 2.5.97.2 */\nvar BErr = {\n0x00: \"#NULL!\",\n0x07: \"#DIV/0!\",\n0x0F: \"#VALUE!\",\n0x17: \"#REF!\",\n0x1D: \"#NAME?\",\n0x24: \"#NUM!\",\n0x2A: \"#N/A\",\n0x2B: \"#GETTING_DATA\",\n0xFF: \"#WTF?\"\n};\nvar RBErr = evert_num(BErr);\n/* Parts enumerated in OPC spec, MS-XLSB and MS-XLSX */\n/* 12.3 Part Summary <SpreadsheetML> */\n/* 14.2 Part Summary <DrawingML> */\n/* [MS-XLSX] 2.1 Part Enumerations ; [MS-XLSB] 2.1.7 Part Enumeration */\nvar ct2type/*{[string]:string}*/ = ({\n\t/* Workbook */\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\": \"workbooks\",\n\n\t/* Worksheet */\n\t\"application/vnd.ms-excel.binIndexWs\": \"TODO\", /* Binary Index */\n\n\t/* Macrosheet */\n\t\"application/vnd.ms-excel.intlmacrosheet\": \"TODO\",\n\t\"application/vnd.ms-excel.binIndexMs\": \"TODO\", /* Binary Index */\n\n\t/* File Properties */\n\t\"application/vnd.openxmlformats-package.core-properties+xml\": \"coreprops\",\n\t\"application/vnd.openxmlformats-officedocument.custom-properties+xml\": \"custprops\",\n\t\"application/vnd.openxmlformats-officedocument.extended-properties+xml\": \"extprops\",\n\n\t/* Custom Data Properties */\n\t\"application/vnd.openxmlformats-officedocument.customXmlProperties+xml\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.customProperty\": \"TODO\",\n\n\t/* PivotTable */\n\t\"application/vnd.ms-excel.pivotTable\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml\": \"TODO\",\n\n\t/* Chart Objects */\n\t\"application/vnd.openxmlformats-officedocument.drawingml.chart+xml\": \"TODO\",\n\n\t/* Chart Colors */\n\t\"application/vnd.ms-office.chartcolorstyle+xml\": \"TODO\",\n\n\t/* Chart Style */\n\t\"application/vnd.ms-office.chartstyle+xml\": \"TODO\",\n\n\t/* Chart Advanced */\n\t\"application/vnd.ms-office.chartex+xml\": \"TODO\",\n\n\t/* Calculation Chain */\n\t\"application/vnd.ms-excel.calcChain\": \"calcchains\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml\": \"calcchains\",\n\n\t/* Printer Settings */\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings\": \"TODO\",\n\n\t/* ActiveX */\n\t\"application/vnd.ms-office.activeX\": \"TODO\",\n\t\"application/vnd.ms-office.activeX+xml\": \"TODO\",\n\n\t/* Custom Toolbars */\n\t\"application/vnd.ms-excel.attachedToolbars\": \"TODO\",\n\n\t/* External Data Connections */\n\t\"application/vnd.ms-excel.connections\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml\": \"TODO\",\n\n\t/* External Links */\n\t\"application/vnd.ms-excel.externalLink\": \"links\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml\": \"links\",\n\n\t/* Metadata */\n\t\"application/vnd.ms-excel.sheetMetadata\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml\": \"TODO\",\n\n\t/* PivotCache */\n\t\"application/vnd.ms-excel.pivotCacheDefinition\": \"TODO\",\n\t\"application/vnd.ms-excel.pivotCacheRecords\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml\": \"TODO\",\n\n\t/* Query Table */\n\t\"application/vnd.ms-excel.queryTable\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml\": \"TODO\",\n\n\t/* Shared Workbook */\n\t\"application/vnd.ms-excel.userNames\": \"TODO\",\n\t\"application/vnd.ms-excel.revisionHeaders\": \"TODO\",\n\t\"application/vnd.ms-excel.revisionLog\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml\": \"TODO\",\n\n\t/* Single Cell Table */\n\t\"application/vnd.ms-excel.tableSingleCells\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml\": \"TODO\",\n\n\t/* Slicer */\n\t\"application/vnd.ms-excel.slicer\": \"TODO\",\n\t\"application/vnd.ms-excel.slicerCache\": \"TODO\",\n\t\"application/vnd.ms-excel.slicer+xml\": \"TODO\",\n\t\"application/vnd.ms-excel.slicerCache+xml\": \"TODO\",\n\n\t/* Sort Map */\n\t\"application/vnd.ms-excel.wsSortMap\": \"TODO\",\n\n\t/* Table */\n\t\"application/vnd.ms-excel.table\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\": \"TODO\",\n\n\t/* Themes */\n\t\"application/vnd.openxmlformats-officedocument.theme+xml\": \"themes\",\n\n\t/* Theme Override */\n\t\"application/vnd.openxmlformats-officedocument.themeOverride+xml\": \"TODO\",\n\n\t/* Timeline */\n\t\"application/vnd.ms-excel.Timeline+xml\": \"TODO\", /* verify */\n\t\"application/vnd.ms-excel.TimelineCache+xml\": \"TODO\", /* verify */\n\n\t/* VBA */\n\t\"application/vnd.ms-office.vbaProject\": \"vba\",\n\t\"application/vnd.ms-office.vbaProjectSignature\": \"vba\",\n\n\t/* Volatile Dependencies */\n\t\"application/vnd.ms-office.volatileDependencies\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml\": \"TODO\",\n\n\t/* Control Properties */\n\t\"application/vnd.ms-excel.controlproperties+xml\": \"TODO\",\n\n\t/* Data Model */\n\t\"application/vnd.openxmlformats-officedocument.model+data\": \"TODO\",\n\n\t/* Survey */\n\t\"application/vnd.ms-excel.Survey+xml\": \"TODO\",\n\n\t/* Drawing */\n\t\"application/vnd.openxmlformats-officedocument.drawing+xml\": \"drawings\",\n\t\"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml\": \"TODO\",\n\n\t/* VML */\n\t\"application/vnd.openxmlformats-officedocument.vmlDrawing\": \"TODO\",\n\n\t\"application/vnd.openxmlformats-package.relationships+xml\": \"rels\",\n\t\"application/vnd.openxmlformats-officedocument.oleObject\": \"TODO\",\n\n\t/* Image */\n\t\"image/png\": \"TODO\",\n\n\t\"sheet\": \"js\"\n});\n\nvar CT_LIST = (function(){\n\tvar o = {\n\t\tworkbooks: {\n\t\t\txlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\",\n\t\t\txlsm: \"application/vnd.ms-excel.sheet.macroEnabled.main+xml\",\n\t\t\txlsb: \"application/vnd.ms-excel.sheet.binary.macroEnabled.main\",\n\t\t\txlam: \"application/vnd.ms-excel.addin.macroEnabled.main+xml\",\n\t\t\txltx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml\"\n\t\t},\n\t\tstrs: { /* Shared Strings */\n\t\t\txlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\",\n\t\t\txlsb: \"application/vnd.ms-excel.sharedStrings\"\n\t\t},\n\t\tcomments: { /* Comments */\n\t\t\txlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml\",\n\t\t\txlsb: \"application/vnd.ms-excel.comments\"\n\t\t},\n\t\tsheets: { /* Worksheet */\n\t\t\txlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\",\n\t\t\txlsb: \"application/vnd.ms-excel.worksheet\"\n\t\t},\n\t\tcharts: { /* Chartsheet */\n\t\t\txlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml\",\n\t\t\txlsb: \"application/vnd.ms-excel.chartsheet\"\n\t\t},\n\t\tdialogs: { /* Dialogsheet */\n\t\t\txlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml\",\n\t\t\txlsb: \"application/vnd.ms-excel.dialogsheet\"\n\t\t},\n\t\tmacros: { /* Macrosheet (Excel 4.0 Macros) */\n\t\t\txlsx: \"application/vnd.ms-excel.macrosheet+xml\",\n\t\t\txlsb: \"application/vnd.ms-excel.macrosheet\"\n\t\t},\n\t\tstyles: { /* Styles */\n\t\t\txlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\",\n\t\t\txlsb: \"application/vnd.ms-excel.styles\"\n\t\t}\n\t};\n\tkeys(o).forEach(function(k) { [\"xlsm\", \"xlam\"].forEach(function(v) { if(!o[k][v]) o[k][v] = o[k].xlsx; }); });\n\tkeys(o).forEach(function(k){ keys(o[k]).forEach(function(v) { ct2type[o[k][v]] = k; }); });\n\treturn o;\n})();\n\nvar type2ct/*{[string]:Array<string>}*/ = evert_arr(ct2type);\n\nXMLNS.CT = 'http://schemas.openxmlformats.org/package/2006/content-types';\n\nfunction new_ct() {\n\treturn ({\n\t\tworkbooks:[], sheets:[], charts:[], dialogs:[], macros:[],\n\t\trels:[], strs:[], comments:[], links:[],\n\t\tcoreprops:[], extprops:[], custprops:[], themes:[], styles:[],\n\t\tcalcchains:[], vba: [], drawings: [],\n\t\tTODO:[], xmlns: \"\" });\n}\n\nfunction parse_ct(data) {\n\tvar ct = new_ct();\n\tif(!data || !data.match) return ct;\n\tvar ctext = {};\n\t(data.match(tagregex)||[]).forEach(function(x) {\n\t\tvar y = parsexmltag(x);\n\t\tswitch(y[0].replace(nsregex,\"<\")) {\n\t\t\tcase '<?xml': break;\n\t\t\tcase '<Types': ct.xmlns = y['xmlns' + (y[0].match(/<(\\w+):/)||[\"\",\"\"])[1] ]; break;\n\t\t\tcase '<Default': ctext[y.Extension] = y.ContentType; break;\n\t\t\tcase '<Override':\n\t\t\t\tif(ct[ct2type[y.ContentType]] !== undefined) ct[ct2type[y.ContentType]].push(y.PartName);\n\t\t\t\tbreak;\n\t\t}\n\t});\n\tif(ct.xmlns !== XMLNS.CT) throw new Error(\"Unknown Namespace: \" + ct.xmlns);\n\tct.calcchain = ct.calcchains.length > 0 ? ct.calcchains[0] : \"\";\n\tct.sst = ct.strs.length > 0 ? ct.strs[0] : \"\";\n\tct.style = ct.styles.length > 0 ? ct.styles[0] : \"\";\n\tct.defaults = ctext;\n\tdelete ct.calcchains;\n\treturn ct;\n}\n\nvar CTYPE_XML_ROOT = writextag('Types', null, {\n\t'xmlns': XMLNS.CT,\n\t'xmlns:xsd': XMLNS.xsd,\n\t'xmlns:xsi': XMLNS.xsi\n});\n\nvar CTYPE_DEFAULTS = [\n\t['xml', 'application/xml'],\n\t['bin', 'application/vnd.ms-excel.sheet.binary.macroEnabled.main'],\n\t['vml', 'application/vnd.openxmlformats-officedocument.vmlDrawing'],\n\t['data', 'application/vnd.openxmlformats-officedocument.model+data'],\n\t/* from test files */\n\t['bmp', 'image/bmp'],\n\t['png', 'image/png'],\n\t['gif', 'image/gif'],\n\t['emf', 'image/x-emf'],\n\t['wmf', 'image/x-wmf'],\n\t['jpg', 'image/jpeg'], ['jpeg', 'image/jpeg'],\n\t['tif', 'image/tiff'], ['tiff', 'image/tiff'],\n\t['pdf', 'application/pdf'],\n\t['rels', type2ct.rels[0]]\n].map(function(x) {\n\treturn writextag('Default', null, {'Extension':x[0], 'ContentType': x[1]});\n});\n\nfunction write_ct(ct, opts) {\n\tvar o = [], v;\n\to[o.length] = (XML_HEADER);\n\to[o.length] = (CTYPE_XML_ROOT);\n\to = o.concat(CTYPE_DEFAULTS);\n\n\t/* only write first instance */\n\tvar f1 = function(w) {\n\t\tif(ct[w] && ct[w].length > 0) {\n\t\t\tv = ct[w][0];\n\t\t\to[o.length] = (writextag('Override', null, {\n\t\t\t\t'PartName': (v[0] == '/' ? \"\":\"/\") + v,\n\t\t\t\t'ContentType': CT_LIST[w][opts.bookType || 'xlsx']\n\t\t\t}));\n\t\t}\n\t};\n\n\t/* book type-specific */\n\tvar f2 = function(w) {\n\t\t(ct[w]||[]).forEach(function(v) {\n\t\t\to[o.length] = (writextag('Override', null, {\n\t\t\t\t'PartName': (v[0] == '/' ? \"\":\"/\") + v,\n\t\t\t\t'ContentType': CT_LIST[w][opts.bookType || 'xlsx']\n\t\t\t}));\n\t\t});\n\t};\n\n\t/* standard type */\n\tvar f3 = function(t) {\n\t\t(ct[t]||[]).forEach(function(v) {\n\t\t\to[o.length] = (writextag('Override', null, {\n\t\t\t\t'PartName': (v[0] == '/' ? \"\":\"/\") + v,\n\t\t\t\t'ContentType': type2ct[t][0]\n\t\t\t}));\n\t\t});\n\t};\n\n\tf1('workbooks');\n\tf2('sheets');\n\tf2('charts');\n\tf3('themes');\n\t['strs', 'styles'].forEach(f1);\n\t['coreprops', 'extprops', 'custprops'].forEach(f3);\n\tf3('vba');\n\tf3('comments');\n\tf3('drawings');\n\tif(o.length>2){ o[o.length] = ('</Types>'); o[1]=o[1].replace(\"/>\",\">\"); }\n\treturn o.join(\"\");\n}\n/* 9.3 Relationships */\nvar RELS = ({\n\tWB: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\n\tSHEET: \"http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\n\tHLINK: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\n\tVML: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing\",\n\tXPATH: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLinkPath\",\n\tXMISS: \"http://schemas.microsoft.com/office/2006/relationships/xlExternalLinkPath/xlPathMissing\",\n\tXLINK: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLink\",\n\tCXML: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml\",\n\tCXMLP: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps\",\n\tVBA: \"http://schemas.microsoft.com/office/2006/relationships/vbaProject\"\n});\n\n/* 9.3.3 Representing Relationships */\nfunction get_rels_path(file) {\n\tvar n = file.lastIndexOf(\"/\");\n\treturn file.slice(0,n+1) + '_rels/' + file.slice(n+1) + \".rels\";\n}\n\nfunction parse_rels(data, currentFilePath) {\n\tvar rels = {\"!id\":{}};\n\tif (!data) return rels;\n\tif (currentFilePath.charAt(0) !== '/') {\n\t\tcurrentFilePath = '/'+currentFilePath;\n\t}\n\tvar hash = {};\n\n\t(data.match(tagregex)||[]).forEach(function(x) {\n\t\tvar y = parsexmltag(x);\n\t\t/* 9.3.2.2 OPC_Relationships */\n\t\tif (y[0] === '<Relationship') {\n\t\t\tvar rel = {}; rel.Type = y.Type; rel.Target = y.Target; rel.Id = y.Id; rel.TargetMode = y.TargetMode;\n\t\t\tvar canonictarget = y.TargetMode === 'External' ? y.Target : resolve_path(y.Target, currentFilePath);\n\t\t\trels[canonictarget] = rel;\n\t\t\thash[y.Id] = rel;\n\t\t}\n\t});\n\trels[\"!id\"] = hash;\n\treturn rels;\n}\n\nXMLNS.RELS = 'http://schemas.openxmlformats.org/package/2006/relationships';\n\nvar RELS_ROOT = writextag('Relationships', null, {\n\t//'xmlns:ns0': XMLNS.RELS,\n\t'xmlns': XMLNS.RELS\n});\n\n/* TODO */\nfunction write_rels(rels) {\n\tvar o = [XML_HEADER, RELS_ROOT];\n\tkeys(rels['!id']).forEach(function(rid) {\n\t\to[o.length] = (writextag('Relationship', null, rels['!id'][rid]));\n\t});\n\tif(o.length>2){ o[o.length] = ('</Relationships>'); o[1]=o[1].replace(\"/>\",\">\"); }\n\treturn o.join(\"\");\n}\n\nvar RELS_EXTERN = [RELS.HLINK, RELS.XPATH, RELS.XMISS];\nfunction add_rels(rels, rId, f, type, relobj, targetmode) {\n\tif(!relobj) relobj = {};\n\tif(!rels['!id']) rels['!id'] = {};\n\tif(rId < 0) for(rId = 1; rels['!id']['rId' + rId]; ++rId){/* empty */}\n\trelobj.Id = 'rId' + rId;\n\trelobj.Type = type;\n\trelobj.Target = f;\n\tif(targetmode) relobj.TargetMode = targetmode;\n\telse if(RELS_EXTERN.indexOf(relobj.Type) > -1) relobj.TargetMode = \"External\";\n\tif(rels['!id'][relobj.Id]) throw new Error(\"Cannot rewrite rId \" + rId);\n\trels['!id'][relobj.Id] = relobj;\n\trels[('/' + relobj.Target).replace(\"//\",\"/\")] = relobj;\n\treturn rId;\n}\n/* Open Document Format for Office Applications (OpenDocument) Version 1.2 */\n/* Part 3 Section 4 Manifest File */\nvar CT_ODS = \"application/vnd.oasis.opendocument.spreadsheet\";\nfunction parse_manifest(d, opts) {\n\tvar str = xlml_normalize(d);\n\tvar Rn;\n\tvar FEtag;\n\twhile((Rn = xlmlregex.exec(str))) switch(Rn[3]) {\n\t\tcase 'manifest': break; // 4.2 <manifest:manifest>\n\t\tcase 'file-entry': // 4.3 <manifest:file-entry>\n\t\t\tFEtag = parsexmltag(Rn[0], false);\n\t\t\tif(FEtag.path == '/' && FEtag.type !== CT_ODS) throw new Error(\"This OpenDocument is not a spreadsheet\");\n\t\t\tbreak;\n\t\tcase 'encryption-data': // 4.4 <manifest:encryption-data>\n\t\tcase 'algorithm': // 4.5 <manifest:algorithm>\n\t\tcase 'start-key-generation': // 4.6 <manifest:start-key-generation>\n\t\tcase 'key-derivation': // 4.7 <manifest:key-derivation>\n\t\t\tthrow new Error(\"Unsupported ODS Encryption\");\n\t\tdefault: if(opts && opts.WTF) throw Rn;\n\t}\n}\n\nfunction write_manifest(manifest) {\n\tvar o = [XML_HEADER];\n\to.push('<manifest:manifest xmlns:manifest=\"urn:oasis:names:tc:opendocument:xmlns:manifest:1.0\" manifest:version=\"1.2\">\\n');\n\to.push('  <manifest:file-entry manifest:full-path=\"/\" manifest:version=\"1.2\" manifest:media-type=\"application/vnd.oasis.opendocument.spreadsheet\"/>\\n');\n\tfor(var i = 0; i < manifest.length; ++i) o.push('  <manifest:file-entry manifest:full-path=\"' + manifest[i][0] + '\" manifest:media-type=\"' + manifest[i][1] + '\"/>\\n');\n\to.push('</manifest:manifest>');\n\treturn o.join(\"\");\n}\n\n/* Part 3 Section 6 Metadata Manifest File */\nfunction write_rdf_type(file, res, tag) {\n\treturn [\n\t\t'  <rdf:Description rdf:about=\"' + file + '\">\\n',\n\t\t'    <rdf:type rdf:resource=\"http://docs.oasis-open.org/ns/office/1.2/meta/' + (tag || \"odf\") + '#' + res + '\"/>\\n',\n\t\t'  </rdf:Description>\\n'\n\t].join(\"\");\n}\nfunction write_rdf_has(base, file) {\n\treturn [\n\t\t'  <rdf:Description rdf:about=\"' + base + '\">\\n',\n\t\t'    <ns0:hasPart xmlns:ns0=\"http://docs.oasis-open.org/ns/office/1.2/meta/pkg#\" rdf:resource=\"' + file + '\"/>\\n',\n\t\t'  </rdf:Description>\\n'\n\t].join(\"\");\n}\nfunction write_rdf(rdf) {\n\tvar o = [XML_HEADER];\n\to.push('<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\\n');\n\tfor(var i = 0; i != rdf.length; ++i) {\n\t\to.push(write_rdf_type(rdf[i][0], rdf[i][1]));\n\t\to.push(write_rdf_has(\"\",rdf[i][0]));\n\t}\n\to.push(write_rdf_type(\"\",\"Document\", \"pkg\"));\n\to.push('</rdf:RDF>');\n\treturn o.join(\"\");\n}\n/* TODO: pull properties */\nvar write_meta_ods = (function() {\n\tvar payload = '<office:document-meta xmlns:office=\"urn:oasis:names:tc:opendocument:xmlns:office:1.0\" xmlns:meta=\"urn:oasis:names:tc:opendocument:xmlns:meta:1.0\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" office:version=\"1.2\"><office:meta><meta:generator>Sheet' + 'JS ' + XLSX.version + '</meta:generator></office:meta></office:document-meta>';\n\treturn function wmo() {\n\t\treturn payload;\n\t};\n})();\n\n/* ECMA-376 Part II 11.1 Core Properties Part */\n/* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */\nvar CORE_PROPS = [\n\t[\"cp:category\", \"Category\"],\n\t[\"cp:contentStatus\", \"ContentStatus\"],\n\t[\"cp:keywords\", \"Keywords\"],\n\t[\"cp:lastModifiedBy\", \"LastAuthor\"],\n\t[\"cp:lastPrinted\", \"LastPrinted\"],\n\t[\"cp:revision\", \"RevNumber\"],\n\t[\"cp:version\", \"Version\"],\n\t[\"dc:creator\", \"Author\"],\n\t[\"dc:description\", \"Comments\"],\n\t[\"dc:identifier\", \"Identifier\"],\n\t[\"dc:language\", \"Language\"],\n\t[\"dc:subject\", \"Subject\"],\n\t[\"dc:title\", \"Title\"],\n\t[\"dcterms:created\", \"CreatedDate\", 'date'],\n\t[\"dcterms:modified\", \"ModifiedDate\", 'date']\n];\n\nXMLNS.CORE_PROPS = \"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\";\nRELS.CORE_PROPS  = 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties';\n\nvar CORE_PROPS_REGEX = (function() {\n\tvar r = new Array(CORE_PROPS.length);\n\tfor(var i = 0; i < CORE_PROPS.length; ++i) {\n\t\tvar f = CORE_PROPS[i];\n\t\tvar g = \"(?:\"+ f[0].slice(0,f[0].indexOf(\":\")) +\":)\"+ f[0].slice(f[0].indexOf(\":\")+1);\n\t\tr[i] = new RegExp(\"<\" + g + \"[^>]*>([\\\\s\\\\S]*?)<\\/\" + g + \">\");\n\t}\n\treturn r;\n})();\n\nfunction parse_core_props(data) {\n\tvar p = {};\n\tdata = utf8read(data);\n\n\tfor(var i = 0; i < CORE_PROPS.length; ++i) {\n\t\tvar f = CORE_PROPS[i], cur = data.match(CORE_PROPS_REGEX[i]);\n\t\tif(cur != null && cur.length > 0) p[f[1]] = unescapexml(cur[1]);\n\t\tif(f[2] === 'date' && p[f[1]]) p[f[1]] = parseDate(p[f[1]]);\n\t}\n\n\treturn p;\n}\n\nvar CORE_PROPS_XML_ROOT = writextag('cp:coreProperties', null, {\n\t//'xmlns': XMLNS.CORE_PROPS,\n\t'xmlns:cp': XMLNS.CORE_PROPS,\n\t'xmlns:dc': XMLNS.dc,\n\t'xmlns:dcterms': XMLNS.dcterms,\n\t'xmlns:dcmitype': XMLNS.dcmitype,\n\t'xmlns:xsi': XMLNS.xsi\n});\n\nfunction cp_doit(f, g, h, o, p) {\n\tif(p[f] != null || g == null || g === \"\") return;\n\tp[f] = g;\n\tg = escapexml(g);\n\to[o.length] = (h ? writextag(f,g,h) : writetag(f,g));\n}\n\nfunction write_core_props(cp, _opts) {\n\tvar opts = _opts || {};\n\tvar o = [XML_HEADER, CORE_PROPS_XML_ROOT], p = {};\n\tif(!cp && !opts.Props) return o.join(\"\");\n\n\tif(cp) {\n\t\tif(cp.CreatedDate != null) cp_doit(\"dcterms:created\", typeof cp.CreatedDate === \"string\" ? cp.CreatedDate : write_w3cdtf(cp.CreatedDate, opts.WTF), {\"xsi:type\":\"dcterms:W3CDTF\"}, o, p);\n\t\tif(cp.ModifiedDate != null) cp_doit(\"dcterms:modified\", typeof cp.ModifiedDate === \"string\" ? cp.ModifiedDate : write_w3cdtf(cp.ModifiedDate, opts.WTF), {\"xsi:type\":\"dcterms:W3CDTF\"}, o, p);\n\t}\n\n\tfor(var i = 0; i != CORE_PROPS.length; ++i) {\n\t\tvar f = CORE_PROPS[i];\n\t\tvar v = opts.Props && opts.Props[f[1]] != null ? opts.Props[f[1]] : cp ? cp[f[1]] : null;\n\t\tif(v === true) v = \"1\";\n\t\telse if(v === false) v = \"0\";\n\t\telse if(typeof v == \"number\") v = String(v);\n\t\tif(v != null) cp_doit(f[0], v, null, o, p);\n\t}\n\tif(o.length>2){ o[o.length] = ('</cp:coreProperties>'); o[1]=o[1].replace(\"/>\",\">\"); }\n\treturn o.join(\"\");\n}\n/* 15.2.12.3 Extended File Properties Part */\n/* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */\nvar EXT_PROPS = [\n\t[\"Application\", \"Application\", \"string\"],\n\t[\"AppVersion\", \"AppVersion\", \"string\"],\n\t[\"Company\", \"Company\", \"string\"],\n\t[\"DocSecurity\", \"DocSecurity\", \"string\"],\n\t[\"Manager\", \"Manager\", \"string\"],\n\t[\"HyperlinksChanged\", \"HyperlinksChanged\", \"bool\"],\n\t[\"SharedDoc\", \"SharedDoc\", \"bool\"],\n\t[\"LinksUpToDate\", \"LinksUpToDate\", \"bool\"],\n\t[\"ScaleCrop\", \"ScaleCrop\", \"bool\"],\n\t[\"HeadingPairs\", \"HeadingPairs\", \"raw\"],\n\t[\"TitlesOfParts\", \"TitlesOfParts\", \"raw\"]\n];\n\nXMLNS.EXT_PROPS = \"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\";\nRELS.EXT_PROPS  = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties';\n\nvar PseudoPropsPairs = [\n\t\"Worksheets\",  \"SheetNames\",\n\t\"NamedRanges\", \"DefinedNames\",\n\t\"Chartsheets\", \"ChartNames\"\n];\nfunction load_props_pairs(HP, TOP, props, opts) {\n\tvar v = [];\n\tif(typeof HP == \"string\") v = parseVector(HP, opts);\n\telse for(var j = 0; j < HP.length; ++j) v = v.concat(HP[j].map(function(hp) { return {v:hp}; }));\n\tvar parts = (typeof TOP == \"string\") ? parseVector(TOP, opts).map(function (x) { return x.v; }) : TOP;\n\tvar idx = 0, len = 0;\n\tif(parts.length > 0) for(var i = 0; i !== v.length; i += 2) {\n\t\tlen = +(v[i+1].v);\n\t\tswitch(v[i].v) {\n\t\t\tcase \"Worksheets\":\n\t\t\tcase \"工作表\":\n\t\t\tcase \"Листы\":\n\t\t\tcase \"أوراق العمل\":\n\t\t\tcase \"ワークシート\":\n\t\t\tcase \"גליונות עבודה\":\n\t\t\tcase \"Arbeitsblätter\":\n\t\t\tcase \"Çalışma Sayfaları\":\n\t\t\tcase \"Feuilles de calcul\":\n\t\t\tcase \"Fogli di lavoro\":\n\t\t\tcase \"Folhas de cálculo\":\n\t\t\tcase \"Planilhas\":\n\t\t\tcase \"Regneark\":\n\t\t\tcase \"Hojas de cálculo\":\n\t\t\tcase \"Werkbladen\":\n\t\t\t\tprops.Worksheets = len;\n\t\t\t\tprops.SheetNames = parts.slice(idx, idx + len);\n\t\t\t\tbreak;\n\n\t\t\tcase \"Named Ranges\":\n\t\t\tcase \"Rangos con nombre\":\n\t\t\tcase \"名前付き一覧\":\n\t\t\tcase \"Benannte Bereiche\":\n\t\t\tcase \"Navngivne områder\":\n\t\t\t\tprops.NamedRanges = len;\n\t\t\t\tprops.DefinedNames = parts.slice(idx, idx + len);\n\t\t\t\tbreak;\n\n\t\t\tcase \"Charts\":\n\t\t\tcase \"Diagramme\":\n\t\t\t\tprops.Chartsheets = len;\n\t\t\t\tprops.ChartNames = parts.slice(idx, idx + len);\n\t\t\t\tbreak;\n\t\t}\n\t\tidx += len;\n\t}\n}\n\nfunction parse_ext_props(data, p, opts) {\n\tvar q = {}; if(!p) p = {};\n\tdata = utf8read(data);\n\n\tEXT_PROPS.forEach(function(f) {\n\t\tvar xml = (data.match(matchtag(f[0]))||[])[1];\n\t\tswitch(f[2]) {\n\t\t\tcase \"string\": if(xml) p[f[1]] = unescapexml(xml); break;\n\t\t\tcase \"bool\": p[f[1]] = xml === \"true\"; break;\n\t\t\tcase \"raw\":\n\t\t\t\tvar cur = data.match(new RegExp(\"<\" + f[0] + \"[^>]*>([\\\\s\\\\S]*?)<\\/\" + f[0] + \">\"));\n\t\t\t\tif(cur && cur.length > 0) q[f[1]] = cur[1];\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\tif(q.HeadingPairs && q.TitlesOfParts) load_props_pairs(q.HeadingPairs, q.TitlesOfParts, p, opts);\n\n\treturn p;\n}\n\nvar EXT_PROPS_XML_ROOT = writextag('Properties', null, {\n\t'xmlns': XMLNS.EXT_PROPS,\n\t'xmlns:vt': XMLNS.vt\n});\n\nfunction write_ext_props(cp) {\n\tvar o = [], W = writextag;\n\tif(!cp) cp = {};\n\tcp.Application = \"SheetJS\";\n\to[o.length] = (XML_HEADER);\n\to[o.length] = (EXT_PROPS_XML_ROOT);\n\n\tEXT_PROPS.forEach(function(f) {\n\t\tif(cp[f[1]] === undefined) return;\n\t\tvar v;\n\t\tswitch(f[2]) {\n\t\t\tcase 'string': v = escapexml(String(cp[f[1]])); break;\n\t\t\tcase 'bool': v = cp[f[1]] ? 'true' : 'false'; break;\n\t\t}\n\t\tif(v !== undefined) o[o.length] = (W(f[0], v));\n\t});\n\n\t/* TODO: HeadingPairs, TitlesOfParts */\n\to[o.length] = (W('HeadingPairs', W('vt:vector', W('vt:variant', '<vt:lpstr>Worksheets</vt:lpstr>')+W('vt:variant', W('vt:i4', String(cp.Worksheets))), {size:2, baseType:\"variant\"})));\n\to[o.length] = (W('TitlesOfParts', W('vt:vector', cp.SheetNames.map(function(s) { return \"<vt:lpstr>\" + escapexml(s) + \"</vt:lpstr>\"; }).join(\"\"), {size: cp.Worksheets, baseType:\"lpstr\"})));\n\tif(o.length>2){ o[o.length] = ('</Properties>'); o[1]=o[1].replace(\"/>\",\">\"); }\n\treturn o.join(\"\");\n}\n/* 15.2.12.2 Custom File Properties Part */\nXMLNS.CUST_PROPS = \"http://schemas.openxmlformats.org/officeDocument/2006/custom-properties\";\nRELS.CUST_PROPS  = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties';\n\nvar custregex = /<[^>]+>[^<]*/g;\nfunction parse_cust_props(data, opts) {\n\tvar p = {}, name = \"\";\n\tvar m = data.match(custregex);\n\tif(m) for(var i = 0; i != m.length; ++i) {\n\t\tvar x = m[i], y = parsexmltag(x);\n\t\tswitch(y[0]) {\n\t\t\tcase '<?xml': break;\n\t\t\tcase '<Properties': break;\n\t\t\tcase '<property': name = unescapexml(y.name); break;\n\t\t\tcase '</property>': name = null; break;\n\t\t\tdefault: if (x.indexOf('<vt:') === 0) {\n\t\t\t\tvar toks = x.split('>');\n\t\t\t\tvar type = toks[0].slice(4), text = toks[1];\n\t\t\t\t/* 22.4.2.32 (CT_Variant). Omit the binary types from 22.4 (Variant Types) */\n\t\t\t\tswitch(type) {\n\t\t\t\t\tcase 'lpstr': case 'bstr': case 'lpwstr':\n\t\t\t\t\t\tp[name] = unescapexml(text);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'bool':\n\t\t\t\t\t\tp[name] = parsexmlbool(text);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'i1': case 'i2': case 'i4': case 'i8': case 'int': case 'uint':\n\t\t\t\t\t\tp[name] = parseInt(text, 10);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'r4': case 'r8': case 'decimal':\n\t\t\t\t\t\tp[name] = parseFloat(text);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'filetime': case 'date':\n\t\t\t\t\t\tp[name] = parseDate(text);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'cy': case 'error':\n\t\t\t\t\t\tp[name] = unescapexml(text);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif(type.slice(-1) == '/') break;\n\t\t\t\t\t\tif(opts.WTF && typeof console !== 'undefined') console.warn('Unexpected', x, type, toks);\n\t\t\t\t}\n\t\t\t} else if(x.slice(0,2) === \"</\") {/* empty */\n\t\t\t} else if(opts.WTF) throw new Error(x);\n\t\t}\n\t}\n\treturn p;\n}\n\nvar CUST_PROPS_XML_ROOT = writextag('Properties', null, {\n\t'xmlns': XMLNS.CUST_PROPS,\n\t'xmlns:vt': XMLNS.vt\n});\n\nfunction write_cust_props(cp) {\n\tvar o = [XML_HEADER, CUST_PROPS_XML_ROOT];\n\tif(!cp) return o.join(\"\");\n\tvar pid = 1;\n\tkeys(cp).forEach(function custprop(k) { ++pid;\n\t\to[o.length] = (writextag('property', write_vt(cp[k], true), {\n\t\t\t'fmtid': '{D5CDD505-2E9C-101B-9397-08002B2CF9AE}',\n\t\t\t'pid': pid,\n\t\t\t'name': escapexml(k)\n\t\t}));\n\t});\n\tif(o.length>2){ o[o.length] = '</Properties>'; o[1]=o[1].replace(\"/>\",\">\"); }\n\treturn o.join(\"\");\n}\n/* Common Name -> XLML Name */\nvar XLMLDocPropsMap = {\n\tTitle: 'Title',\n\tSubject: 'Subject',\n\tAuthor: 'Author',\n\tKeywords: 'Keywords',\n\tComments: 'Description',\n\tLastAuthor: 'LastAuthor',\n\tRevNumber: 'Revision',\n\tApplication: 'AppName',\n\t/* TotalTime: 'TotalTime', */\n\tLastPrinted: 'LastPrinted',\n\tCreatedDate: 'Created',\n\tModifiedDate: 'LastSaved',\n\t/* Pages */\n\t/* Words */\n\t/* Characters */\n\tCategory: 'Category',\n\t/* PresentationFormat */\n\tManager: 'Manager',\n\tCompany: 'Company',\n\t/* Guid */\n\t/* HyperlinkBase */\n\t/* Bytes */\n\t/* Lines */\n\t/* Paragraphs */\n\t/* CharactersWithSpaces */\n\tAppVersion: 'Version',\n\n\tContentStatus: 'ContentStatus', /* NOTE: missing from schema */\n\tIdentifier: 'Identifier', /* NOTE: missing from schema */\n\tLanguage: 'Language' /* NOTE: missing from schema */\n};\nvar evert_XLMLDPM = evert(XLMLDocPropsMap);\n\nfunction xlml_set_prop(Props, tag, val) {\n\ttag = evert_XLMLDPM[tag] || tag;\n\tProps[tag] = val;\n}\n\nfunction xlml_write_docprops(Props, opts) {\n\tvar o = [];\n\tkeys(XLMLDocPropsMap).map(function(m) {\n\t\tfor(var i = 0; i < CORE_PROPS.length; ++i) if(CORE_PROPS[i][1] == m) return CORE_PROPS[i];\n\t\tfor(i = 0; i < EXT_PROPS.length; ++i) if(EXT_PROPS[i][1] == m) return EXT_PROPS[i];\n\t\tthrow m;\n\t}).forEach(function(p) {\n\t\tif(Props[p[1]] == null) return;\n\t\tvar m = opts && opts.Props && opts.Props[p[1]] != null ? opts.Props[p[1]] : Props[p[1]];\n\t\tswitch(p[2]) {\n\t\t\tcase 'date': m = new Date(m).toISOString().replace(/\\.\\d*Z/,\"Z\"); break;\n\t\t}\n\t\tif(typeof m == 'number') m = String(m);\n\t\telse if(m === true || m === false) { m = m ? \"1\" : \"0\"; }\n\t\telse if(m instanceof Date) m = new Date(m).toISOString().replace(/\\.\\d*Z/,\"\");\n\t\to.push(writetag(XLMLDocPropsMap[p[1]] || p[1], m));\n\t});\n\treturn writextag('DocumentProperties', o.join(\"\"), {xmlns:XLMLNS.o });\n}\nfunction xlml_write_custprops(Props, Custprops) {\n\tvar BLACKLIST = [\"Worksheets\",\"SheetNames\"];\n\tvar T = 'CustomDocumentProperties';\n\tvar o = [];\n\tif(Props) keys(Props).forEach(function(k) {\nif(!Object.prototype.hasOwnProperty.call(Props, k)) return;\n\t\tfor(var i = 0; i < CORE_PROPS.length; ++i) if(k == CORE_PROPS[i][1]) return;\n\t\tfor(i = 0; i < EXT_PROPS.length; ++i) if(k == EXT_PROPS[i][1]) return;\n\t\tfor(i = 0; i < BLACKLIST.length; ++i) if(k == BLACKLIST[i]) return;\n\n\t\tvar m = Props[k];\n\t\tvar t = \"string\";\n\t\tif(typeof m == 'number') { t = \"float\"; m = String(m); }\n\t\telse if(m === true || m === false) { t = \"boolean\"; m = m ? \"1\" : \"0\"; }\n\t\telse m = String(m);\n\t\to.push(writextag(escapexmltag(k), m, {\"dt:dt\":t}));\n\t});\n\tif(Custprops) keys(Custprops).forEach(function(k) {\nif(!Object.prototype.hasOwnProperty.call(Custprops, k)) return;\n\t\tif(Props && Object.prototype.hasOwnProperty.call(Props, k)) return;\n\t\tvar m = Custprops[k];\n\t\tvar t = \"string\";\n\t\tif(typeof m == 'number') { t = \"float\"; m = String(m); }\n\t\telse if(m === true || m === false) { t = \"boolean\"; m = m ? \"1\" : \"0\"; }\n\t\telse if(m instanceof Date) { t = \"dateTime.tz\"; m = m.toISOString(); }\n\t\telse m = String(m);\n\t\to.push(writextag(escapexmltag(k), m, {\"dt:dt\":t}));\n\t});\n\treturn '<' + T + ' xmlns=\"' + XLMLNS.o + '\">' + o.join(\"\") + '</' + T + '>';\n}\n/* [MS-DTYP] 2.3.3 FILETIME */\n/* [MS-OLEDS] 2.1.3 FILETIME (Packet Version) */\n/* [MS-OLEPS] 2.8 FILETIME (Packet Version) */\nfunction parse_FILETIME(blob) {\n\tvar dwLowDateTime = blob.read_shift(4), dwHighDateTime = blob.read_shift(4);\n\treturn new Date(((dwHighDateTime/1e7*Math.pow(2,32) + dwLowDateTime/1e7) - 11644473600)*1000).toISOString().replace(/\\.000/,\"\");\n}\nfunction write_FILETIME(time) {\n\tvar date = (typeof time == \"string\") ? new Date(Date.parse(time)) : time;\n\tvar t = date.getTime() / 1000 + 11644473600;\n\tvar l = t % Math.pow(2,32), h = (t - l) / Math.pow(2,32);\n\tl *= 1e7; h *= 1e7;\n\tvar w = (l / Math.pow(2,32)) | 0;\n\tif(w > 0) { l = l % Math.pow(2,32); h += w; }\n\tvar o = new_buf(8); o.write_shift(4, l); o.write_shift(4, h); return o;\n}\n\n/* [MS-OSHARED] 2.3.3.1.4 Lpstr */\nfunction parse_lpstr(blob, type, pad) {\n\tvar start = blob.l;\n\tvar str = blob.read_shift(0, 'lpstr-cp');\n\tif(pad) while((blob.l - start) & 3) ++blob.l;\n\treturn str;\n}\n\n/* [MS-OSHARED] 2.3.3.1.6 Lpwstr */\nfunction parse_lpwstr(blob, type, pad) {\n\tvar str = blob.read_shift(0, 'lpwstr');\n\tif(pad) blob.l += (4 - ((str.length+1) & 3)) & 3;\n\treturn str;\n}\n\n\n/* [MS-OSHARED] 2.3.3.1.11 VtString */\n/* [MS-OSHARED] 2.3.3.1.12 VtUnalignedString */\nfunction parse_VtStringBase(blob, stringType, pad) {\n\tif(stringType === 0x1F /*VT_LPWSTR*/) return parse_lpwstr(blob);\n\treturn parse_lpstr(blob, stringType, pad);\n}\n\nfunction parse_VtString(blob, t, pad) { return parse_VtStringBase(blob, t, pad === false ? 0: 4); }\nfunction parse_VtUnalignedString(blob, t) { if(!t) throw new Error(\"VtUnalignedString must have positive length\"); return parse_VtStringBase(blob, t, 0); }\n\n/* [MS-OSHARED] 2.3.3.1.7 VtVecLpwstrValue */\nfunction parse_VtVecLpwstrValue(blob) {\n\tvar length = blob.read_shift(4);\n\tvar ret = [];\n\tfor(var i = 0; i != length; ++i) {\n\t\tvar start = blob.l;\n\t\tret[i] = blob.read_shift(0, 'lpwstr').replace(chr0,'');\n\t\tif((blob.l - start) & 0x02) blob.l += 2;\n\t}\n\treturn ret;\n}\n\n/* [MS-OSHARED] 2.3.3.1.9 VtVecUnalignedLpstrValue */\nfunction parse_VtVecUnalignedLpstrValue(blob) {\n\tvar length = blob.read_shift(4);\n\tvar ret = [];\n\tfor(var i = 0; i != length; ++i) ret[i] = blob.read_shift(0, 'lpstr-cp').replace(chr0,'');\n\treturn ret;\n}\n\n\n/* [MS-OSHARED] 2.3.3.1.13 VtHeadingPair */\nfunction parse_VtHeadingPair(blob) {\n\tvar start = blob.l;\n\tvar headingString = parse_TypedPropertyValue(blob, VT_USTR);\n\tif(blob[blob.l] == 0x00 && blob[blob.l+1] == 0x00 && ((blob.l - start) & 0x02)) blob.l += 2;\n\tvar headerParts = parse_TypedPropertyValue(blob, VT_I4);\n\treturn [headingString, headerParts];\n}\n\n/* [MS-OSHARED] 2.3.3.1.14 VtVecHeadingPairValue */\nfunction parse_VtVecHeadingPairValue(blob) {\n\tvar cElements = blob.read_shift(4);\n\tvar out = [];\n\tfor(var i = 0; i < cElements / 2; ++i) out.push(parse_VtHeadingPair(blob));\n\treturn out;\n}\n\n/* [MS-OLEPS] 2.18.1 Dictionary (uses 2.17, 2.16) */\nfunction parse_dictionary(blob,CodePage) {\n\tvar cnt = blob.read_shift(4);\n\tvar dict = ({});\n\tfor(var j = 0; j != cnt; ++j) {\n\t\tvar pid = blob.read_shift(4);\n\t\tvar len = blob.read_shift(4);\n\t\tdict[pid] = blob.read_shift(len, (CodePage === 0x4B0 ?'utf16le':'utf8')).replace(chr0,'').replace(chr1,'!');\n\t\tif(CodePage === 0x4B0 && (len % 2)) blob.l += 2;\n\t}\n\tif(blob.l & 3) blob.l = (blob.l>>2+1)<<2;\n\treturn dict;\n}\n\n/* [MS-OLEPS] 2.9 BLOB */\nfunction parse_BLOB(blob) {\n\tvar size = blob.read_shift(4);\n\tvar bytes = blob.slice(blob.l,blob.l+size);\n\tblob.l += size;\n\tif((size & 3) > 0) blob.l += (4 - (size & 3)) & 3;\n\treturn bytes;\n}\n\n/* [MS-OLEPS] 2.11 ClipboardData */\nfunction parse_ClipboardData(blob) {\n\t// TODO\n\tvar o = {};\n\to.Size = blob.read_shift(4);\n\t//o.Format = blob.read_shift(4);\n\tblob.l += o.Size + 3 - (o.Size - 1) % 4;\n\treturn o;\n}\n\n/* [MS-OLEPS] 2.15 TypedPropertyValue */\nfunction parse_TypedPropertyValue(blob, type, _opts) {\n\tvar t = blob.read_shift(2), ret, opts = _opts||{};\n\tblob.l += 2;\n\tif(type !== VT_VARIANT)\n\tif(t !== type && VT_CUSTOM.indexOf(type)===-1 && !((type & 0xFFFE) == 0x101E && (t & 0xFFFE) == 0x101E)) throw new Error('Expected type ' + type + ' saw ' + t);\n\tswitch(type === VT_VARIANT ? t : type) {\n\t\tcase 0x02 /*VT_I2*/: ret = blob.read_shift(2, 'i'); if(!opts.raw) blob.l += 2; return ret;\n\t\tcase 0x03 /*VT_I4*/: ret = blob.read_shift(4, 'i'); return ret;\n\t\tcase 0x0B /*VT_BOOL*/: return blob.read_shift(4) !== 0x0;\n\t\tcase 0x13 /*VT_UI4*/: ret = blob.read_shift(4); return ret;\n\t\tcase 0x1E /*VT_LPSTR*/: return parse_lpstr(blob, t, 4).replace(chr0,'');\n\t\tcase 0x1F /*VT_LPWSTR*/: return parse_lpwstr(blob);\n\t\tcase 0x40 /*VT_FILETIME*/: return parse_FILETIME(blob);\n\t\tcase 0x41 /*VT_BLOB*/: return parse_BLOB(blob);\n\t\tcase 0x47 /*VT_CF*/: return parse_ClipboardData(blob);\n\t\tcase 0x50 /*VT_STRING*/: return parse_VtString(blob, t, !opts.raw).replace(chr0,'');\n\t\tcase 0x51 /*VT_USTR*/: return parse_VtUnalignedString(blob, t/*, 4*/).replace(chr0,'');\n\t\tcase 0x100C /*VT_VECTOR|VT_VARIANT*/: return parse_VtVecHeadingPairValue(blob);\n\t\tcase 0x101E /*VT_VECTOR|VT_LPSTR*/:\n\t\tcase 0x101F /*VT_VECTOR|VT_LPWSTR*/:\n\t\t\treturn t == 0x101F ? parse_VtVecLpwstrValue(blob) : parse_VtVecUnalignedLpstrValue(blob);\n\t\tdefault: throw new Error(\"TypedPropertyValue unrecognized type \" + type + \" \" + t);\n\t}\n}\nfunction write_TypedPropertyValue(type, value) {\n\tvar o = new_buf(4), p = new_buf(4);\n\to.write_shift(4, type == 0x50 ? 0x1F : type);\n\tswitch(type) {\n\t\tcase 0x03 /*VT_I4*/: p.write_shift(-4, value); break;\n\t\tcase 0x05 /*VT_I4*/: p = new_buf(8); p.write_shift(8, value, 'f'); break;\n\t\tcase 0x0B /*VT_BOOL*/: p.write_shift(4, value ? 0x01 : 0x00); break;\n\t\tcase 0x40 /*VT_FILETIME*/:  p = write_FILETIME(value); break;\n\t\tcase 0x1F /*VT_LPWSTR*/:\n\t\tcase 0x50 /*VT_STRING*/:\np = new_buf(4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));\n\t\t\tp.write_shift(4, value.length + 1);\n\t\t\tp.write_shift(0, value, \"dbcs\");\n\t\t\twhile(p.l != p.length) p.write_shift(1, 0);\n\t\t\tbreak;\n\t\tdefault: throw new Error(\"TypedPropertyValue unrecognized type \" + type + \" \" + value);\n\t}\n\treturn bconcat([o, p]);\n}\n\n/* [MS-OLEPS] 2.20 PropertySet */\nfunction parse_PropertySet(blob, PIDSI) {\n\tvar start_addr = blob.l;\n\tvar size = blob.read_shift(4);\n\tvar NumProps = blob.read_shift(4);\n\tvar Props = [], i = 0;\n\tvar CodePage = 0;\n\tvar Dictionary = -1, DictObj = ({});\n\tfor(i = 0; i != NumProps; ++i) {\n\t\tvar PropID = blob.read_shift(4);\n\t\tvar Offset = blob.read_shift(4);\n\t\tProps[i] = [PropID, Offset + start_addr];\n\t}\n\tProps.sort(function(x,y) { return x[1] - y[1]; });\n\tvar PropH = {};\n\tfor(i = 0; i != NumProps; ++i) {\n\t\tif(blob.l !== Props[i][1]) {\n\t\t\tvar fail = true;\n\t\t\tif(i>0 && PIDSI) switch(PIDSI[Props[i-1][0]].t) {\n\t\t\t\tcase 0x02 /*VT_I2*/: if(blob.l+2 === Props[i][1]) { blob.l+=2; fail = false; } break;\n\t\t\t\tcase 0x50 /*VT_STRING*/: if(blob.l <= Props[i][1]) { blob.l=Props[i][1]; fail = false; } break;\n\t\t\t\tcase 0x100C /*VT_VECTOR|VT_VARIANT*/: if(blob.l <= Props[i][1]) { blob.l=Props[i][1]; fail = false; } break;\n\t\t\t}\n\t\t\tif((!PIDSI||i==0) && blob.l <= Props[i][1]) { fail=false; blob.l = Props[i][1]; }\n\t\t\tif(fail) throw new Error(\"Read Error: Expected address \" + Props[i][1] + ' at ' + blob.l + ' :' + i);\n\t\t}\n\t\tif(PIDSI) {\n\t\t\tvar piddsi = PIDSI[Props[i][0]];\n\t\t\tPropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, {raw:true});\n\t\t\tif(piddsi.p === 'version') PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + \".\" + (\"0000\" + String(PropH[piddsi.n] & 0xFFFF)).slice(-4);\n\t\t\tif(piddsi.n == \"CodePage\") switch(PropH[piddsi.n]) {\n\t\t\t\tcase 0: PropH[piddsi.n] = 1252;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase 874:\n\t\t\t\tcase 932:\n\t\t\t\tcase 936:\n\t\t\t\tcase 949:\n\t\t\t\tcase 950:\n\t\t\t\tcase 1250:\n\t\t\t\tcase 1251:\n\t\t\t\tcase 1253:\n\t\t\t\tcase 1254:\n\t\t\t\tcase 1255:\n\t\t\t\tcase 1256:\n\t\t\t\tcase 1257:\n\t\t\t\tcase 1258:\n\t\t\t\tcase 10000:\n\t\t\t\tcase 1200:\n\t\t\t\tcase 1201:\n\t\t\t\tcase 1252:\n\t\t\t\tcase 65000: case -536:\n\t\t\t\tcase 65001: case -535:\n\t\t\t\t\tset_cp(CodePage = (PropH[piddsi.n]>>>0) & 0xFFFF); break;\n\t\t\t\tdefault: throw new Error(\"Unsupported CodePage: \" + PropH[piddsi.n]);\n\t\t\t}\n\t\t} else {\n\t\t\tif(Props[i][0] === 0x1) {\n\t\t\t\tCodePage = PropH.CodePage = (parse_TypedPropertyValue(blob, VT_I2));\n\t\t\t\tset_cp(CodePage);\n\t\t\t\tif(Dictionary !== -1) {\n\t\t\t\t\tvar oldpos = blob.l;\n\t\t\t\t\tblob.l = Props[Dictionary][1];\n\t\t\t\t\tDictObj = parse_dictionary(blob,CodePage);\n\t\t\t\t\tblob.l = oldpos;\n\t\t\t\t}\n\t\t\t} else if(Props[i][0] === 0) {\n\t\t\t\tif(CodePage === 0) { Dictionary = i; blob.l = Props[i+1][1]; continue; }\n\t\t\t\tDictObj = parse_dictionary(blob,CodePage);\n\t\t\t} else {\n\t\t\t\tvar name = DictObj[Props[i][0]];\n\t\t\t\tvar val;\n\t\t\t\t/* [MS-OSHARED] 2.3.3.2.3.1.2 + PROPVARIANT */\n\t\t\t\tswitch(blob[blob.l]) {\n\t\t\t\t\tcase 0x41 /*VT_BLOB*/: blob.l += 4; val = parse_BLOB(blob); break;\n\t\t\t\t\tcase 0x1E /*VT_LPSTR*/: blob.l += 4; val = parse_VtString(blob, blob[blob.l-4]).replace(/\\u0000+$/,\"\"); break;\n\t\t\t\t\tcase 0x1F /*VT_LPWSTR*/: blob.l += 4; val = parse_VtString(blob, blob[blob.l-4]).replace(/\\u0000+$/,\"\"); break;\n\t\t\t\t\tcase 0x03 /*VT_I4*/: blob.l += 4; val = blob.read_shift(4, 'i'); break;\n\t\t\t\t\tcase 0x13 /*VT_UI4*/: blob.l += 4; val = blob.read_shift(4); break;\n\t\t\t\t\tcase 0x05 /*VT_R8*/: blob.l += 4; val = blob.read_shift(8, 'f'); break;\n\t\t\t\t\tcase 0x0B /*VT_BOOL*/: blob.l += 4; val = parsebool(blob, 4); break;\n\t\t\t\t\tcase 0x40 /*VT_FILETIME*/: blob.l += 4; val = parseDate(parse_FILETIME(blob)); break;\n\t\t\t\t\tdefault: throw new Error(\"unparsed value: \" + blob[blob.l]);\n\t\t\t\t}\n\t\t\t\tPropH[name] = val;\n\t\t\t}\n\t\t}\n\t}\n\tblob.l = start_addr + size; /* step ahead to skip padding */\n\treturn PropH;\n}\nvar XLSPSSkip = [ \"CodePage\", \"Thumbnail\", \"_PID_LINKBASE\", \"_PID_HLINKS\", \"SystemIdentifier\", \"FMTID\" ].concat(PseudoPropsPairs);\nfunction guess_property_type(val) {\n\tswitch(typeof val) {\n\t\tcase \"boolean\": return 0x0B;\n\t\tcase \"number\": return ((val|0)==val) ? 0x03 : 0x05;\n\t\tcase \"string\": return 0x1F;\n\t\tcase \"object\": if(val instanceof Date) return 0x40; break;\n\t}\n\treturn -1;\n}\nfunction write_PropertySet(entries, RE, PIDSI) {\n\tvar hdr = new_buf(8), piao = [], prop = [];\n\tvar sz = 8, i = 0;\n\n\tvar pr = new_buf(8), pio = new_buf(8);\n\tpr.write_shift(4, 0x0002);\n\tpr.write_shift(4, 0x04B0);\n\tpio.write_shift(4, 0x0001);\n\tprop.push(pr); piao.push(pio);\n\tsz += 8 + pr.length;\n\n\tif(!RE) {\n\t\tpio = new_buf(8);\n\t\tpio.write_shift(4, 0);\n\t\tpiao.unshift(pio);\n\n\t\tvar bufs = [new_buf(4)];\n\t\tbufs[0].write_shift(4, entries.length);\n\t\tfor(i = 0; i < entries.length; ++i) {\n\t\t\tvar value = entries[i][0];\n\t\t\tpr = new_buf(4 + 4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));\n\t\t\tpr.write_shift(4, i+2);\n\t\t\tpr.write_shift(4, value.length + 1);\n\t\t\tpr.write_shift(0, value, \"dbcs\");\n\t\t\twhile(pr.l != pr.length) pr.write_shift(1, 0);\n\t\t\tbufs.push(pr);\n\t\t}\n\t\tpr = bconcat(bufs);\n\t\tprop.unshift(pr);\n\t\tsz += 8 + pr.length;\n\t}\n\n\tfor(i = 0; i < entries.length; ++i) {\n\t\tif(RE && !RE[entries[i][0]]) continue;\n\t\tif(XLSPSSkip.indexOf(entries[i][0]) > -1) continue;\n\t\tif(entries[i][1] == null) continue;\n\n\t\tvar val = entries[i][1], idx = 0;\n\t\tif(RE) {\n\t\t\tidx = +RE[entries[i][0]];\n\t\t\tvar pinfo = (PIDSI)[idx];\n\t\t\tif(pinfo.p == \"version\" && typeof val == \"string\") {\nvar arr = val.split(\".\");\n\t\t\t\tval = ((+arr[0])<<16) + ((+arr[1])||0);\n\t\t\t}\n\t\t\tpr = write_TypedPropertyValue(pinfo.t, val);\n\t\t} else {\n\t\t\tvar T = guess_property_type(val);\n\t\t\tif(T == -1) { T = 0x1F; val = String(val); }\n\t\t\tpr = write_TypedPropertyValue(T, val);\n\t\t}\n\t\tprop.push(pr);\n\n\t\tpio = new_buf(8);\n\t\tpio.write_shift(4, !RE ? 2+i : idx);\n\t\tpiao.push(pio);\n\n\t\tsz += 8 + pr.length;\n\t}\n\n\tvar w = 8 * (prop.length + 1);\n\tfor(i = 0; i < prop.length; ++i) { piao[i].write_shift(4, w); w += prop[i].length; }\n\thdr.write_shift(4, sz);\n\thdr.write_shift(4, prop.length);\n\treturn bconcat([hdr].concat(piao).concat(prop));\n}\n\n/* [MS-OLEPS] 2.21 PropertySetStream */\nfunction parse_PropertySetStream(file, PIDSI, clsid) {\n\tvar blob = file.content;\n\tif(!blob) return ({});\n\tprep_blob(blob, 0);\n\n\tvar NumSets, FMTID0, FMTID1, Offset0, Offset1 = 0;\n\tblob.chk('feff', 'Byte Order: ');\n\n\t/*var vers = */blob.read_shift(2); // TODO: check version\n\tvar SystemIdentifier = blob.read_shift(4);\n\tvar CLSID = blob.read_shift(16);\n\tif(CLSID !== CFB.utils.consts.HEADER_CLSID && CLSID !== clsid) throw new Error(\"Bad PropertySet CLSID \" + CLSID);\n\tNumSets = blob.read_shift(4);\n\tif(NumSets !== 1 && NumSets !== 2) throw new Error(\"Unrecognized #Sets: \" + NumSets);\n\tFMTID0 = blob.read_shift(16); Offset0 = blob.read_shift(4);\n\n\tif(NumSets === 1 && Offset0 !== blob.l) throw new Error(\"Length mismatch: \" + Offset0 + \" !== \" + blob.l);\n\telse if(NumSets === 2) { FMTID1 = blob.read_shift(16); Offset1 = blob.read_shift(4); }\n\tvar PSet0 = parse_PropertySet(blob, PIDSI);\n\n\tvar rval = ({ SystemIdentifier: SystemIdentifier });\n\tfor(var y in PSet0) rval[y] = PSet0[y];\n\t//rval.blob = blob;\n\trval.FMTID = FMTID0;\n\t//rval.PSet0 = PSet0;\n\tif(NumSets === 1) return rval;\n\tif(Offset1 - blob.l == 2) blob.l += 2;\n\tif(blob.l !== Offset1) throw new Error(\"Length mismatch 2: \" + blob.l + \" !== \" + Offset1);\n\tvar PSet1;\n\ttry { PSet1 = parse_PropertySet(blob, null); } catch(e) {/* empty */}\n\tfor(y in PSet1) rval[y] = PSet1[y];\n\trval.FMTID = [FMTID0, FMTID1]; // TODO: verify FMTID0/1\n\treturn rval;\n}\nfunction write_PropertySetStream(entries, clsid, RE, PIDSI, entries2, clsid2) {\n\tvar hdr = new_buf(entries2 ? 68 : 48);\n\tvar bufs = [hdr];\n\thdr.write_shift(2, 0xFFFE);\n\thdr.write_shift(2, 0x0000); /* TODO: type 1 props */\n\thdr.write_shift(4, 0x32363237);\n\thdr.write_shift(16, CFB.utils.consts.HEADER_CLSID, \"hex\");\n\thdr.write_shift(4, (entries2 ? 2 : 1));\n\thdr.write_shift(16, clsid, \"hex\");\n\thdr.write_shift(4, (entries2 ? 68 : 48));\n\tvar ps0 = write_PropertySet(entries, RE, PIDSI);\n\tbufs.push(ps0);\n\n\tif(entries2) {\n\t\tvar ps1 = write_PropertySet(entries2, null, null);\n\t\thdr.write_shift(16, clsid2, \"hex\");\n\t\thdr.write_shift(4, 68 + ps0.length);\n\t\tbufs.push(ps1);\n\t}\n\treturn bconcat(bufs);\n}\n\nfunction parsenoop2(blob, length) { blob.read_shift(length); return null; }\nfunction writezeroes(n, o) { if(!o) o=new_buf(n); for(var j=0; j<n; ++j) o.write_shift(1, 0); return o; }\n\nfunction parslurp(blob, length, cb) {\n\tvar arr = [], target = blob.l + length;\n\twhile(blob.l < target) arr.push(cb(blob, target - blob.l));\n\tif(target !== blob.l) throw new Error(\"Slurp error\");\n\treturn arr;\n}\n\nfunction parsebool(blob, length) { return blob.read_shift(length) === 0x1; }\nfunction writebool(v, o) { if(!o) o=new_buf(2); o.write_shift(2, +!!v); return o; }\n\nfunction parseuint16(blob) { return blob.read_shift(2, 'u'); }\nfunction writeuint16(v, o) { if(!o) o=new_buf(2); o.write_shift(2, v); return o; }\nfunction parseuint16a(blob, length) { return parslurp(blob,length,parseuint16);}\n\n/* --- 2.5 Structures --- */\n\n/* [MS-XLS] 2.5.10 Bes (boolean or error) */\nfunction parse_Bes(blob) {\n\tvar v = blob.read_shift(1), t = blob.read_shift(1);\n\treturn t === 0x01 ? v : v === 0x01;\n}\nfunction write_Bes(v, t, o) {\n\tif(!o) o = new_buf(2);\n\to.write_shift(1, ((t == 'e') ? +v : +!!v));\n\to.write_shift(1, ((t == 'e') ? 1 : 0));\n\treturn o;\n}\n\n/* [MS-XLS] 2.5.240 ShortXLUnicodeString */\nfunction parse_ShortXLUnicodeString(blob, length, opts) {\n\tvar cch = blob.read_shift(opts && opts.biff >= 12 ? 2 : 1);\n\tvar encoding = 'sbcs-cont';\n\tvar cp = current_codepage;\n\tif(opts && opts.biff >= 8) current_codepage = 1200;\n\tif(!opts || opts.biff == 8 ) {\n\t\tvar fHighByte = blob.read_shift(1);\n\t\tif(fHighByte) { encoding = 'dbcs-cont'; }\n\t} else if(opts.biff == 12) {\n\t\tencoding = 'wstr';\n\t}\n\tif(opts.biff >= 2 && opts.biff <= 5) encoding = 'cpstr';\n\tvar o = cch ? blob.read_shift(cch, encoding) : \"\";\n\tcurrent_codepage = cp;\n\treturn o;\n}\n\n/* 2.5.293 XLUnicodeRichExtendedString */\nfunction parse_XLUnicodeRichExtendedString(blob) {\n\tvar cp = current_codepage;\n\tcurrent_codepage = 1200;\n\tvar cch = blob.read_shift(2), flags = blob.read_shift(1);\n\tvar /*fHighByte = flags & 0x1,*/ fExtSt = flags & 0x4, fRichSt = flags & 0x8;\n\tvar width = 1 + (flags & 0x1); // 0x0 -> utf8, 0x1 -> dbcs\n\tvar cRun = 0, cbExtRst;\n\tvar z = {};\n\tif(fRichSt) cRun = blob.read_shift(2);\n\tif(fExtSt) cbExtRst = blob.read_shift(4);\n\tvar encoding = width == 2 ? 'dbcs-cont' : 'sbcs-cont';\n\tvar msg = cch === 0 ? \"\" : blob.read_shift(cch, encoding);\n\tif(fRichSt) blob.l += 4 * cRun; //TODO: parse this\n\tif(fExtSt) blob.l += cbExtRst; //TODO: parse this\n\tz.t = msg;\n\tif(!fRichSt) { z.raw = \"<t>\" + z.t + \"</t>\"; z.r = z.t; }\n\tcurrent_codepage = cp;\n\treturn z;\n}\nfunction write_XLUnicodeRichExtendedString(xlstr) {\n\tvar str = (xlstr.t||\"\"), nfmts = 1;\n\n\tvar hdr = new_buf(3 + (nfmts > 1 ? 2 : 0));\n\thdr.write_shift(2, str.length);\n\thdr.write_shift(1, (nfmts > 1 ? 0x08 : 0x00) | 0x01);\n\tif(nfmts > 1) hdr.write_shift(2, nfmts);\n\n\tvar otext = new_buf(2 * str.length);\n\totext.write_shift(2 * str.length, str, 'utf16le');\n\n\tvar out = [hdr, otext];\n\n\treturn bconcat(out);\n}\n\n/* 2.5.296 XLUnicodeStringNoCch */\nfunction parse_XLUnicodeStringNoCch(blob, cch, opts) {\n\tvar retval;\n\tif(opts) {\n\t\tif(opts.biff >= 2 && opts.biff <= 5) return blob.read_shift(cch, 'cpstr');\n\t\tif(opts.biff >= 12) return blob.read_shift(cch, 'dbcs-cont');\n\t}\n\tvar fHighByte = blob.read_shift(1);\n\tif(fHighByte===0) { retval = blob.read_shift(cch, 'sbcs-cont'); }\n\telse { retval = blob.read_shift(cch, 'dbcs-cont'); }\n\treturn retval;\n}\n\n/* 2.5.294 XLUnicodeString */\nfunction parse_XLUnicodeString(blob, length, opts) {\n\tvar cch = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);\n\tif(cch === 0) { blob.l++; return \"\"; }\n\treturn parse_XLUnicodeStringNoCch(blob, cch, opts);\n}\n/* BIFF5 override */\nfunction parse_XLUnicodeString2(blob, length, opts) {\n\tif(opts.biff > 5) return parse_XLUnicodeString(blob, length, opts);\n\tvar cch = blob.read_shift(1);\n\tif(cch === 0) { blob.l++; return \"\"; }\n\treturn blob.read_shift(cch, (opts.biff <= 4 || !blob.lens ) ? 'cpstr' : 'sbcs-cont');\n}\n/* TODO: BIFF5 and lower, codepage awareness */\nfunction write_XLUnicodeString(str, opts, o) {\n\tif(!o) o = new_buf(3 + 2 * str.length);\n\to.write_shift(2, str.length);\n\to.write_shift(1, 1);\n\to.write_shift(31, str, 'utf16le');\n\treturn o;\n}\n\n/* [MS-XLS] 2.5.61 ControlInfo */\nfunction parse_ControlInfo(blob) {\n\tvar flags = blob.read_shift(1);\n\tblob.l++;\n\tvar accel = blob.read_shift(2);\n\tblob.l += 2;\n\treturn [flags, accel];\n}\n\n/* [MS-OSHARED] 2.3.7.6 URLMoniker TODO: flags */\nfunction parse_URLMoniker(blob) {\n\tvar len = blob.read_shift(4), start = blob.l;\n\tvar extra = false;\n\tif(len > 24) {\n\t\t/* look ahead */\n\t\tblob.l += len - 24;\n\t\tif(blob.read_shift(16) === \"795881f43b1d7f48af2c825dc4852763\") extra = true;\n\t\tblob.l = start;\n\t}\n\tvar url = blob.read_shift((extra?len-24:len)>>1, 'utf16le').replace(chr0,\"\");\n\tif(extra) blob.l += 24;\n\treturn url;\n}\n\n/* [MS-OSHARED] 2.3.7.8 FileMoniker TODO: all fields */\nfunction parse_FileMoniker(blob) {\n\tvar cAnti = blob.read_shift(2);\n\tvar preamble = \"\"; while(cAnti-- > 0) preamble += \"../\";\n\tvar ansiPath = blob.read_shift(0, 'lpstr-ansi');\n\tblob.l += 2; //var endServer = blob.read_shift(2);\n\tif(blob.read_shift(2) != 0xDEAD) throw new Error(\"Bad FileMoniker\");\n\tvar sz = blob.read_shift(4);\n\tif(sz === 0) return preamble + ansiPath.replace(/\\\\/g,\"/\");\n\tvar bytes = blob.read_shift(4);\n\tif(blob.read_shift(2) != 3) throw new Error(\"Bad FileMoniker\");\n\tvar unicodePath = blob.read_shift(bytes>>1, 'utf16le').replace(chr0,\"\");\n\treturn preamble + unicodePath;\n}\n\n/* [MS-OSHARED] 2.3.7.2 HyperlinkMoniker TODO: all the monikers */\nfunction parse_HyperlinkMoniker(blob, length) {\n\tvar clsid = blob.read_shift(16); length -= 16;\n\tswitch(clsid) {\n\t\tcase \"e0c9ea79f9bace118c8200aa004ba90b\": return parse_URLMoniker(blob, length);\n\t\tcase \"0303000000000000c000000000000046\": return parse_FileMoniker(blob, length);\n\t\tdefault: throw new Error(\"Unsupported Moniker \" + clsid);\n\t}\n}\n\n/* [MS-OSHARED] 2.3.7.9 HyperlinkString */\nfunction parse_HyperlinkString(blob) {\n\tvar len = blob.read_shift(4);\n\tvar o = len > 0 ? blob.read_shift(len, 'utf16le').replace(chr0, \"\") : \"\";\n\treturn o;\n}\nfunction write_HyperlinkString(str, o) {\n\tif(!o) o = new_buf(6 + str.length * 2);\n\to.write_shift(4, 1 + str.length);\n\tfor(var i = 0; i < str.length; ++i) o.write_shift(2, str.charCodeAt(i));\n\to.write_shift(2, 0);\n\treturn o;\n}\n\n/* [MS-OSHARED] 2.3.7.1 Hyperlink Object */\nfunction parse_Hyperlink(blob, length) {\n\tvar end = blob.l + length;\n\tvar sVer = blob.read_shift(4);\n\tif(sVer !== 2) throw new Error(\"Unrecognized streamVersion: \" + sVer);\n\tvar flags = blob.read_shift(2);\n\tblob.l += 2;\n\tvar displayName, targetFrameName, moniker, oleMoniker, Loc=\"\", guid, fileTime;\n\tif(flags & 0x0010) displayName = parse_HyperlinkString(blob, end - blob.l);\n\tif(flags & 0x0080) targetFrameName = parse_HyperlinkString(blob, end - blob.l);\n\tif((flags & 0x0101) === 0x0101) moniker = parse_HyperlinkString(blob, end - blob.l);\n\tif((flags & 0x0101) === 0x0001) oleMoniker = parse_HyperlinkMoniker(blob, end - blob.l);\n\tif(flags & 0x0008) Loc = parse_HyperlinkString(blob, end - blob.l);\n\tif(flags & 0x0020) guid = blob.read_shift(16);\n\tif(flags & 0x0040) fileTime = parse_FILETIME(blob/*, 8*/);\n\tblob.l = end;\n\tvar target = targetFrameName||moniker||oleMoniker||\"\";\n\tif(target && Loc) target+=\"#\"+Loc;\n\tif(!target) target = \"#\" + Loc;\n\tif((flags & 0x0002) && target.charAt(0) == \"/\" && target.charAt(1) != \"/\") target = \"file://\" + target;\n\tvar out = ({Target:target});\n\tif(guid) out.guid = guid;\n\tif(fileTime) out.time = fileTime;\n\tif(displayName) out.Tooltip = displayName;\n\treturn out;\n}\nfunction write_Hyperlink(hl) {\n\tvar out = new_buf(512), i = 0;\n\tvar Target = hl.Target;\n\tif(Target.slice(0,7) == \"file://\") Target = Target.slice(7);\n\tvar hashidx = Target.indexOf(\"#\");\n\tvar F = hashidx > -1 ? 0x1f : 0x17;\n\tswitch(Target.charAt(0)) { case \"#\": F=0x1c; break; case \".\": F&=~2; break; }\n\tout.write_shift(4,2); out.write_shift(4, F);\n\tvar data = [8,6815827,6619237,4849780,83]; for(i = 0; i < data.length; ++i) out.write_shift(4, data[i]);\n\tif(F == 0x1C) {\n\t\tTarget = Target.slice(1);\n\t\twrite_HyperlinkString(Target, out);\n\t} else if(F & 0x02) {\n\t\tdata = \"e0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b\".split(\" \");\n\t\tfor(i = 0; i < data.length; ++i) out.write_shift(1, parseInt(data[i], 16));\n\t\tvar Pretarget = hashidx > -1 ? Target.slice(0, hashidx) : Target;\n\t\tout.write_shift(4, 2*(Pretarget.length + 1));\n\t\tfor(i = 0; i < Pretarget.length; ++i) out.write_shift(2, Pretarget.charCodeAt(i));\n\t\tout.write_shift(2, 0);\n\t\tif(F & 0x08) write_HyperlinkString(hashidx > -1 ? Target.slice(hashidx+1): \"\", out);\n\t} else {\n\t\tdata = \"03 03 00 00 00 00 00 00 c0 00 00 00 00 00 00 46\".split(\" \");\n\t\tfor(i = 0; i < data.length; ++i) out.write_shift(1, parseInt(data[i], 16));\n\t\tvar P = 0;\n\t\twhile(Target.slice(P*3,P*3+3)==\"../\"||Target.slice(P*3,P*3+3)==\"..\\\\\") ++P;\n\t\tout.write_shift(2, P);\n\t\tout.write_shift(4, Target.length - 3 * P + 1);\n\t\tfor(i = 0; i < Target.length - 3 * P; ++i) out.write_shift(1, Target.charCodeAt(i + 3 * P) & 0xFF);\n\t\tout.write_shift(1, 0);\n\t\tout.write_shift(2, 0xFFFF);\n\t\tout.write_shift(2, 0xDEAD);\n\t\tfor(i = 0; i < 6; ++i) out.write_shift(4, 0);\n\t}\n\treturn out.slice(0, out.l);\n}\n\n/* 2.5.178 LongRGBA */\nfunction parse_LongRGBA(blob) { var r = blob.read_shift(1), g = blob.read_shift(1), b = blob.read_shift(1), a = blob.read_shift(1); return [r,g,b,a]; }\n\n/* 2.5.177 LongRGB */\nfunction parse_LongRGB(blob, length) { var x = parse_LongRGBA(blob, length); x[3] = 0; return x; }\n\n\n/* [MS-XLS] 2.5.19 */\nfunction parse_XLSCell(blob) {\n\tvar rw = blob.read_shift(2); // 0-indexed\n\tvar col = blob.read_shift(2);\n\tvar ixfe = blob.read_shift(2);\n\treturn ({r:rw, c:col, ixfe:ixfe});\n}\nfunction write_XLSCell(R, C, ixfe, o) {\n\tif(!o) o = new_buf(6);\n\to.write_shift(2, R);\n\to.write_shift(2, C);\n\to.write_shift(2, ixfe||0);\n\treturn o;\n}\n\n/* [MS-XLS] 2.5.134 */\nfunction parse_frtHeader(blob) {\n\tvar rt = blob.read_shift(2);\n\tvar flags = blob.read_shift(2); // TODO: parse these flags\n\tblob.l += 8;\n\treturn {type: rt, flags: flags};\n}\n\n\n\nfunction parse_OptXLUnicodeString(blob, length, opts) { return length === 0 ? \"\" : parse_XLUnicodeString2(blob, length, opts); }\n\n/* [MS-XLS] 2.5.344 */\nfunction parse_XTI(blob, length, opts) {\n\tvar w = opts.biff > 8 ? 4 : 2;\n\tvar iSupBook = blob.read_shift(w), itabFirst = blob.read_shift(w,'i'), itabLast = blob.read_shift(w,'i');\n\treturn [iSupBook, itabFirst, itabLast];\n}\n\n/* [MS-XLS] 2.5.218 */\nfunction parse_RkRec(blob) {\n\tvar ixfe = blob.read_shift(2);\n\tvar RK = parse_RkNumber(blob);\n\treturn [ixfe, RK];\n}\n\n/* [MS-XLS] 2.5.1 */\nfunction parse_AddinUdf(blob, length, opts) {\n\tblob.l += 4; length -= 4;\n\tvar l = blob.l + length;\n\tvar udfName = parse_ShortXLUnicodeString(blob, length, opts);\n\tvar cb = blob.read_shift(2);\n\tl -= blob.l;\n\tif(cb !== l) throw new Error(\"Malformed AddinUdf: padding = \" + l + \" != \" + cb);\n\tblob.l += cb;\n\treturn udfName;\n}\n\n/* [MS-XLS] 2.5.209 TODO: Check sizes */\nfunction parse_Ref8U(blob) {\n\tvar rwFirst = blob.read_shift(2);\n\tvar rwLast = blob.read_shift(2);\n\tvar colFirst = blob.read_shift(2);\n\tvar colLast = blob.read_shift(2);\n\treturn {s:{c:colFirst, r:rwFirst}, e:{c:colLast,r:rwLast}};\n}\nfunction write_Ref8U(r, o) {\n\tif(!o) o = new_buf(8);\n\to.write_shift(2, r.s.r);\n\to.write_shift(2, r.e.r);\n\to.write_shift(2, r.s.c);\n\to.write_shift(2, r.e.c);\n\treturn o;\n}\n\n/* [MS-XLS] 2.5.211 */\nfunction parse_RefU(blob) {\n\tvar rwFirst = blob.read_shift(2);\n\tvar rwLast = blob.read_shift(2);\n\tvar colFirst = blob.read_shift(1);\n\tvar colLast = blob.read_shift(1);\n\treturn {s:{c:colFirst, r:rwFirst}, e:{c:colLast,r:rwLast}};\n}\n\n/* [MS-XLS] 2.5.207 */\nvar parse_Ref = parse_RefU;\n\n/* [MS-XLS] 2.5.143 */\nfunction parse_FtCmo(blob) {\n\tblob.l += 4;\n\tvar ot = blob.read_shift(2);\n\tvar id = blob.read_shift(2);\n\tvar flags = blob.read_shift(2);\n\tblob.l+=12;\n\treturn [id, ot, flags];\n}\n\n/* [MS-XLS] 2.5.149 */\nfunction parse_FtNts(blob) {\n\tvar out = {};\n\tblob.l += 4;\n\tblob.l += 16; // GUID TODO\n\tout.fSharedNote = blob.read_shift(2);\n\tblob.l += 4;\n\treturn out;\n}\n\n/* [MS-XLS] 2.5.142 */\nfunction parse_FtCf(blob) {\n\tvar out = {};\n\tblob.l += 4;\n\tblob.cf = blob.read_shift(2);\n\treturn out;\n}\n\n/* [MS-XLS] 2.5.140 - 2.5.154 and friends */\nfunction parse_FtSkip(blob) { blob.l += 2; blob.l += blob.read_shift(2); }\nvar FtTab = {\n0x00: parse_FtSkip,      /* FtEnd */\n0x04: parse_FtSkip,      /* FtMacro */\n0x05: parse_FtSkip,      /* FtButton */\n0x06: parse_FtSkip,      /* FtGmo */\n0x07: parse_FtCf,        /* FtCf */\n0x08: parse_FtSkip,      /* FtPioGrbit */\n0x09: parse_FtSkip,      /* FtPictFmla */\n0x0A: parse_FtSkip,      /* FtCbls */\n0x0B: parse_FtSkip,      /* FtRbo */\n0x0C: parse_FtSkip,      /* FtSbs */\n0x0D: parse_FtNts,       /* FtNts */\n0x0E: parse_FtSkip,      /* FtSbsFmla */\n0x0F: parse_FtSkip,      /* FtGboData */\n0x10: parse_FtSkip,      /* FtEdoData */\n0x11: parse_FtSkip,      /* FtRboData */\n0x12: parse_FtSkip,      /* FtCblsData */\n0x13: parse_FtSkip,      /* FtLbsData */\n0x14: parse_FtSkip,      /* FtCblsFmla */\n0x15: parse_FtCmo\n};\nfunction parse_FtArray(blob, length) {\n\tvar tgt = blob.l + length;\n\tvar fts = [];\n\twhile(blob.l < tgt) {\n\t\tvar ft = blob.read_shift(2);\n\t\tblob.l-=2;\n\t\ttry {\n\t\t\tfts.push(FtTab[ft](blob, tgt - blob.l));\n\t\t} catch(e) { blob.l = tgt; return fts; }\n\t}\n\tif(blob.l != tgt) blob.l = tgt; //throw new Error(\"bad Object Ft-sequence\");\n\treturn fts;\n}\n\n/* --- 2.4 Records --- */\n\n/* [MS-XLS] 2.4.21 */\nfunction parse_BOF(blob, length) {\n\tvar o = {BIFFVer:0, dt:0};\n\to.BIFFVer = blob.read_shift(2); length -= 2;\n\tif(length >= 2) { o.dt = blob.read_shift(2); blob.l -= 2; }\n\tswitch(o.BIFFVer) {\n\t\tcase 0x0600: /* BIFF8 */\n\t\tcase 0x0500: /* BIFF5 */\n\t\tcase 0x0400: /* BIFF4 */\n\t\tcase 0x0300: /* BIFF3 */\n\t\tcase 0x0200: /* BIFF2 */\n\t\tcase 0x0002: case 0x0007: /* BIFF2 */\n\t\t\tbreak;\n\t\tdefault: if(length > 6) throw new Error(\"Unexpected BIFF Ver \" + o.BIFFVer);\n\t}\n\n\tblob.read_shift(length);\n\treturn o;\n}\nfunction write_BOF(wb, t, o) {\n\tvar h = 0x0600, w = 16;\n\tswitch(o.bookType) {\n\t\tcase 'biff8': break;\n\t\tcase 'biff5': h = 0x0500; w = 8; break;\n\t\tcase 'biff4': h = 0x0004; w = 6; break;\n\t\tcase 'biff3': h = 0x0003; w = 6; break;\n\t\tcase 'biff2': h = 0x0002; w = 4; break;\n\t\tcase 'xla': break;\n\t\tdefault: throw new Error(\"unsupported BIFF version\");\n\t}\n\tvar out = new_buf(w);\n\tout.write_shift(2, h);\n\tout.write_shift(2, t);\n\tif(w > 4) out.write_shift(2, 0x7262);\n\tif(w > 6) out.write_shift(2, 0x07CD);\n\tif(w > 8) {\n\t\tout.write_shift(2, 0xC009);\n\t\tout.write_shift(2, 0x0001);\n\t\tout.write_shift(2, 0x0706);\n\t\tout.write_shift(2, 0x0000);\n\t}\n\treturn out;\n}\n\n\n/* [MS-XLS] 2.4.146 */\nfunction parse_InterfaceHdr(blob, length) {\n\tif(length === 0) return 0x04b0;\n\tif((blob.read_shift(2))!==0x04b0){/* empty */}\n\treturn 0x04b0;\n}\n\n\n/* [MS-XLS] 2.4.349 */\nfunction parse_WriteAccess(blob, length, opts) {\n\tif(opts.enc) { blob.l += length; return \"\"; }\n\tvar l = blob.l;\n\t// TODO: make sure XLUnicodeString doesnt overrun\n\tvar UserName = parse_XLUnicodeString2(blob, 0, opts);\n\tblob.read_shift(length + l - blob.l);\n\treturn UserName;\n}\nfunction write_WriteAccess(s, opts) {\n\tvar b8 = !opts || opts.biff == 8;\n\tvar o = new_buf(b8 ? 112 : 54);\n\to.write_shift(opts.biff == 8 ? 2 : 1, 7);\n\tif(b8) o.write_shift(1, 0);\n\to.write_shift(4, 0x33336853);\n\to.write_shift(4, (0x00534A74 | (b8 ? 0 : 0x20000000)));\n\twhile(o.l < o.length) o.write_shift(1, (b8 ? 0 : 32));\n\treturn o;\n}\n\n/* [MS-XLS] 2.4.351 */\nfunction parse_WsBool(blob, length, opts) {\n\tvar flags = opts && opts.biff == 8 || length == 2 ? blob.read_shift(2) : (blob.l += length, 0);\n\treturn { fDialog: flags & 0x10, fBelow: flags & 0x40, fRight: flags & 0x80 };\n}\n\n/* [MS-XLS] 2.4.28 */\nfunction parse_BoundSheet8(blob, length, opts) {\n\tvar pos = blob.read_shift(4);\n\tvar hidden = blob.read_shift(1) & 0x03;\n\tvar dt = blob.read_shift(1);\n\tswitch(dt) {\n\t\tcase 0: dt = 'Worksheet'; break;\n\t\tcase 1: dt = 'Macrosheet'; break;\n\t\tcase 2: dt = 'Chartsheet'; break;\n\t\tcase 6: dt = 'VBAModule'; break;\n\t}\n\tvar name = parse_ShortXLUnicodeString(blob, 0, opts);\n\tif(name.length === 0) name = \"Sheet1\";\n\treturn { pos:pos, hs:hidden, dt:dt, name:name };\n}\nfunction write_BoundSheet8(data, opts) {\n\tvar w = (!opts || opts.biff >= 8 ? 2 : 1);\n\tvar o = new_buf(8 + w * data.name.length);\n\to.write_shift(4, data.pos);\n\to.write_shift(1, data.hs || 0);\n\to.write_shift(1, data.dt);\n\to.write_shift(1, data.name.length);\n\tif(opts.biff >= 8) o.write_shift(1, 1);\n\to.write_shift(w * data.name.length, data.name, opts.biff < 8 ? 'sbcs' : 'utf16le');\n\tvar out = o.slice(0, o.l);\n\tout.l = o.l; return out;\n}\n\n/* [MS-XLS] 2.4.265 TODO */\nfunction parse_SST(blob, length) {\n\tvar end = blob.l + length;\n\tvar cnt = blob.read_shift(4);\n\tvar ucnt = blob.read_shift(4);\n\tvar strs = ([]);\n\tfor(var i = 0; i != ucnt && blob.l < end; ++i) {\n\t\tstrs.push(parse_XLUnicodeRichExtendedString(blob));\n\t}\n\tstrs.Count = cnt; strs.Unique = ucnt;\n\treturn strs;\n}\nfunction write_SST(sst, opts) {\n\tvar header = new_buf(8);\n\theader.write_shift(4, sst.Count);\n\theader.write_shift(4, sst.Unique);\n\tvar strs = [];\n\tfor(var j = 0; j < sst.length; ++j) strs[j] = write_XLUnicodeRichExtendedString(sst[j], opts);\n\tvar o = bconcat([header].concat(strs));\no.parts = [header.length].concat(strs.map(function(str) { return str.length; }));\n\treturn o;\n}\n\n/* [MS-XLS] 2.4.107 */\nfunction parse_ExtSST(blob, length) {\n\tvar extsst = {};\n\textsst.dsst = blob.read_shift(2);\n\tblob.l += length-2;\n\treturn extsst;\n}\n\n\n/* [MS-XLS] 2.4.221 TODO: check BIFF2-4 */\nfunction parse_Row(blob) {\n\tvar z = ({});\n\tz.r = blob.read_shift(2);\n\tz.c = blob.read_shift(2);\n\tz.cnt = blob.read_shift(2) - z.c;\n\tvar miyRw = blob.read_shift(2);\n\tblob.l += 4; // reserved(2), unused(2)\n\tvar flags = blob.read_shift(1); // various flags\n\tblob.l += 3; // reserved(8), ixfe(12), flags(4)\n\tif(flags & 0x07) z.level = flags & 0x07;\n\t// collapsed: flags & 0x10\n\tif(flags & 0x20) z.hidden = true;\n\tif(flags & 0x40) z.hpt = miyRw / 20;\n\treturn z;\n}\n\n\n/* [MS-XLS] 2.4.125 */\nfunction parse_ForceFullCalculation(blob) {\n\tvar header = parse_frtHeader(blob);\n\tif(header.type != 0x08A3) throw new Error(\"Invalid Future Record \" + header.type);\n\tvar fullcalc = blob.read_shift(4);\n\treturn fullcalc !== 0x0;\n}\n\n\n\n\n\n/* [MS-XLS] 2.4.215 rt */\nfunction parse_RecalcId(blob) {\n\tblob.read_shift(2);\n\treturn blob.read_shift(4);\n}\n\n/* [MS-XLS] 2.4.87 */\nfunction parse_DefaultRowHeight(blob, length, opts) {\n\tvar f = 0;\n\tif(!(opts && opts.biff == 2)) {\n\t\tf = blob.read_shift(2);\n\t}\n\tvar miyRw = blob.read_shift(2);\n\tif((opts && opts.biff == 2)) {\n\t\tf = 1 - (miyRw >> 15); miyRw &= 0x7fff;\n\t}\n\tvar fl = {Unsynced:f&1,DyZero:(f&2)>>1,ExAsc:(f&4)>>2,ExDsc:(f&8)>>3};\n\treturn [fl, miyRw];\n}\n\n/* [MS-XLS] 2.4.345 TODO */\nfunction parse_Window1(blob) {\n\tvar xWn = blob.read_shift(2), yWn = blob.read_shift(2), dxWn = blob.read_shift(2), dyWn = blob.read_shift(2);\n\tvar flags = blob.read_shift(2), iTabCur = blob.read_shift(2), iTabFirst = blob.read_shift(2);\n\tvar ctabSel = blob.read_shift(2), wTabRatio = blob.read_shift(2);\n\treturn { Pos: [xWn, yWn], Dim: [dxWn, dyWn], Flags: flags, CurTab: iTabCur,\n\t\tFirstTab: iTabFirst, Selected: ctabSel, TabRatio: wTabRatio };\n}\nfunction write_Window1() {\n\tvar o = new_buf(18);\n\to.write_shift(2, 0);\n\to.write_shift(2, 0);\n\to.write_shift(2, 0x7260);\n\to.write_shift(2, 0x44c0);\n\to.write_shift(2, 0x38);\n\to.write_shift(2, 0);\n\to.write_shift(2, 0);\n\to.write_shift(2, 1);\n\to.write_shift(2, 0x01f4);\n\treturn o;\n}\n/* [MS-XLS] 2.4.346 TODO */\nfunction parse_Window2(blob, length, opts) {\n\tif(opts && opts.biff >= 2 && opts.biff < 5) return {};\n\tvar f = blob.read_shift(2);\n\treturn { RTL: f & 0x40 };\n}\nfunction write_Window2(view) {\n\tvar o = new_buf(18), f = 0x6b6;\n\tif(view && view.RTL) f |= 0x40;\n\to.write_shift(2, f);\n\to.write_shift(4, 0);\n\to.write_shift(4, 64);\n\to.write_shift(4, 0);\n\to.write_shift(4, 0);\n\treturn o;\n}\n\n/* [MS-XLS] 2.4.189 TODO */\nfunction parse_Pane(/*blob, length, opts*/) {\n}\n\n/* [MS-XLS] 2.4.122 TODO */\nfunction parse_Font(blob, length, opts) {\n\tvar o = {\n\t\tdyHeight: blob.read_shift(2),\n\t\tfl: blob.read_shift(2)\n\t};\n\tswitch((opts && opts.biff) || 8) {\n\t\tcase 2: break;\n\t\tcase 3: case 4: blob.l += 2; break;\n\t\tdefault: blob.l += 10; break;\n\t}\n\to.name = parse_ShortXLUnicodeString(blob, 0, opts);\n\treturn o;\n}\nfunction write_Font(data, opts) {\n\tvar name = data.name || \"Arial\";\n\tvar b5 = (opts && (opts.biff == 5)), w = (b5 ? (15 + name.length) : (16 + 2 * name.length));\n\tvar o = new_buf(w);\n\to.write_shift(2, (data.sz || 12) * 20);\n\to.write_shift(4, 0);\n\to.write_shift(2, 400);\n\to.write_shift(4, 0);\n\to.write_shift(2, 0);\n\to.write_shift(1, name.length);\n\tif(!b5) o.write_shift(1, 1);\n\to.write_shift((b5 ? 1 : 2) * name.length, name, (b5 ? \"sbcs\" : \"utf16le\"));\n\treturn o;\n}\n\n/* [MS-XLS] 2.4.149 */\nfunction parse_LabelSst(blob) {\n\tvar cell = parse_XLSCell(blob);\n\tcell.isst = blob.read_shift(4);\n\treturn cell;\n}\nfunction write_LabelSst(R, C, v, os ) {\n\tvar o = new_buf(10);\n\twrite_XLSCell(R, C, os, o);\n\to.write_shift(4, v);\n\treturn o;\n}\n\n/* [MS-XLS] 2.4.148 */\nfunction parse_Label(blob, length, opts) {\n\tif(opts.biffguess && opts.biff == 2) opts.biff = 5;\n\tvar target = blob.l + length;\n\tvar cell = parse_XLSCell(blob, 6);\n\tif(opts.biff == 2) blob.l++;\n\tvar str = parse_XLUnicodeString(blob, target - blob.l, opts);\n\tcell.val = str;\n\treturn cell;\n}\nfunction write_Label(R, C, v, os, opts) {\n\tvar b8 = !opts || opts.biff == 8;\n\tvar o = new_buf(6 + 2 + (+b8) + (1 + b8) * v.length);\n\twrite_XLSCell(R, C, os, o);\n\to.write_shift(2, v.length);\n\tif(b8) o.write_shift(1, 1);\n\to.write_shift((1 + b8) * v.length, v, b8 ? 'utf16le' : 'sbcs');\n\treturn o;\n}\n\n\n/* [MS-XLS] 2.4.126 Number Formats */\nfunction parse_Format(blob, length, opts) {\n\tvar numFmtId = blob.read_shift(2);\n\tvar fmtstr = parse_XLUnicodeString2(blob, 0, opts);\n\treturn [numFmtId, fmtstr];\n}\nfunction write_Format(i, f, opts, o) {\n\tvar b5 = (opts && (opts.biff == 5));\n\tif(!o) o = new_buf(b5 ? (3 + f.length) : (5 + 2 * f.length));\n\to.write_shift(2, i);\n\to.write_shift((b5 ? 1 : 2), f.length);\n\tif(!b5) o.write_shift(1, 1);\n\to.write_shift((b5 ? 1 : 2) * f.length, f, (b5 ? 'sbcs' : 'utf16le'));\n\tvar out = (o.length > o.l) ? o.slice(0, o.l) : o;\n\tif(out.l == null) out.l = out.length;\n\treturn out;\n}\nvar parse_BIFF2Format = parse_XLUnicodeString2;\n\n/* [MS-XLS] 2.4.90 */\nfunction parse_Dimensions(blob, length, opts) {\n\tvar end = blob.l + length;\n\tvar w = opts.biff == 8 || !opts.biff ? 4 : 2;\n\tvar r = blob.read_shift(w), R = blob.read_shift(w);\n\tvar c = blob.read_shift(2), C = blob.read_shift(2);\n\tblob.l = end;\n\treturn {s: {r:r, c:c}, e: {r:R, c:C}};\n}\nfunction write_Dimensions(range, opts) {\n\tvar w = opts.biff == 8 || !opts.biff ? 4 : 2;\n\tvar o = new_buf(2*w + 6);\n\to.write_shift(w, range.s.r);\n\to.write_shift(w, range.e.r + 1);\n\to.write_shift(2, range.s.c);\n\to.write_shift(2, range.e.c + 1);\n\to.write_shift(2, 0);\n\treturn o;\n}\n\n/* [MS-XLS] 2.4.220 */\nfunction parse_RK(blob) {\n\tvar rw = blob.read_shift(2), col = blob.read_shift(2);\n\tvar rkrec = parse_RkRec(blob);\n\treturn {r:rw, c:col, ixfe:rkrec[0], rknum:rkrec[1]};\n}\n\n/* [MS-XLS] 2.4.175 */\nfunction parse_MulRk(blob, length) {\n\tvar target = blob.l + length - 2;\n\tvar rw = blob.read_shift(2), col = blob.read_shift(2);\n\tvar rkrecs = [];\n\twhile(blob.l < target) rkrecs.push(parse_RkRec(blob));\n\tif(blob.l !== target) throw new Error(\"MulRK read error\");\n\tvar lastcol = blob.read_shift(2);\n\tif(rkrecs.length != lastcol - col + 1) throw new Error(\"MulRK length mismatch\");\n\treturn {r:rw, c:col, C:lastcol, rkrec:rkrecs};\n}\n/* [MS-XLS] 2.4.174 */\nfunction parse_MulBlank(blob, length) {\n\tvar target = blob.l + length - 2;\n\tvar rw = blob.read_shift(2), col = blob.read_shift(2);\n\tvar ixfes = [];\n\twhile(blob.l < target) ixfes.push(blob.read_shift(2));\n\tif(blob.l !== target) throw new Error(\"MulBlank read error\");\n\tvar lastcol = blob.read_shift(2);\n\tif(ixfes.length != lastcol - col + 1) throw new Error(\"MulBlank length mismatch\");\n\treturn {r:rw, c:col, C:lastcol, ixfe:ixfes};\n}\n\n/* [MS-XLS] 2.5.20 2.5.249 TODO: interpret values here */\nfunction parse_CellStyleXF(blob, length, style, opts) {\n\tvar o = {};\n\tvar a = blob.read_shift(4), b = blob.read_shift(4);\n\tvar c = blob.read_shift(4), d = blob.read_shift(2);\n\to.patternType = XLSFillPattern[c >> 26];\n\n\tif(!opts.cellStyles) return o;\n\to.alc = a & 0x07;\n\to.fWrap = (a >> 3) & 0x01;\n\to.alcV = (a >> 4) & 0x07;\n\to.fJustLast = (a >> 7) & 0x01;\n\to.trot = (a >> 8) & 0xFF;\n\to.cIndent = (a >> 16) & 0x0F;\n\to.fShrinkToFit = (a >> 20) & 0x01;\n\to.iReadOrder = (a >> 22) & 0x02;\n\to.fAtrNum = (a >> 26) & 0x01;\n\to.fAtrFnt = (a >> 27) & 0x01;\n\to.fAtrAlc = (a >> 28) & 0x01;\n\to.fAtrBdr = (a >> 29) & 0x01;\n\to.fAtrPat = (a >> 30) & 0x01;\n\to.fAtrProt = (a >> 31) & 0x01;\n\n\to.dgLeft = b & 0x0F;\n\to.dgRight = (b >> 4) & 0x0F;\n\to.dgTop = (b >> 8) & 0x0F;\n\to.dgBottom = (b >> 12) & 0x0F;\n\to.icvLeft = (b >> 16) & 0x7F;\n\to.icvRight = (b >> 23) & 0x7F;\n\to.grbitDiag = (b >> 30) & 0x03;\n\n\to.icvTop = c & 0x7F;\n\to.icvBottom = (c >> 7) & 0x7F;\n\to.icvDiag = (c >> 14) & 0x7F;\n\to.dgDiag = (c >> 21) & 0x0F;\n\n\to.icvFore = d & 0x7F;\n\to.icvBack = (d >> 7) & 0x7F;\n\to.fsxButton = (d >> 14) & 0x01;\n\treturn o;\n}\n//function parse_CellXF(blob, length, opts) {return parse_CellStyleXF(blob,length,0, opts);}\n//function parse_StyleXF(blob, length, opts) {return parse_CellStyleXF(blob,length,1, opts);}\n\n/* [MS-XLS] 2.4.353 TODO: actually do this right */\nfunction parse_XF(blob, length, opts) {\n\tvar o = {};\n\to.ifnt = blob.read_shift(2); o.numFmtId = blob.read_shift(2); o.flags = blob.read_shift(2);\n\to.fStyle = (o.flags >> 2) & 0x01;\n\tlength -= 6;\n\to.data = parse_CellStyleXF(blob, length, o.fStyle, opts);\n\treturn o;\n}\nfunction write_XF(data, ixfeP, opts, o) {\n\tvar b5 = (opts && (opts.biff == 5));\n\tif(!o) o = new_buf(b5 ? 16 : 20);\n\to.write_shift(2, 0);\n\tif(data.style) {\n\t\to.write_shift(2, (data.numFmtId||0));\n\t\to.write_shift(2, 0xFFF4);\n\t} else {\n\t\to.write_shift(2, (data.numFmtId||0));\n\t\to.write_shift(2, (ixfeP<<4));\n\t}\n\tvar f = 0;\n\tif(data.numFmtId > 0 && b5) f |= 0x0400;\n\to.write_shift(4, f);\n\to.write_shift(4, 0);\n\tif(!b5) o.write_shift(4, 0);\n\to.write_shift(2, 0);\n\treturn o;\n}\n\n/* [MS-XLS] 2.4.134 */\nfunction parse_Guts(blob) {\n\tblob.l += 4;\n\tvar out = [blob.read_shift(2), blob.read_shift(2)];\n\tif(out[0] !== 0) out[0]--;\n\tif(out[1] !== 0) out[1]--;\n\tif(out[0] > 7 || out[1] > 7) throw new Error(\"Bad Gutters: \" + out.join(\"|\"));\n\treturn out;\n}\nfunction write_Guts(guts) {\n\tvar o = new_buf(8);\n\to.write_shift(4, 0);\n\to.write_shift(2, guts[0] ? guts[0] + 1 : 0);\n\to.write_shift(2, guts[1] ? guts[1] + 1 : 0);\n\treturn o;\n}\n\n/* [MS-XLS] 2.4.24 */\nfunction parse_BoolErr(blob, length, opts) {\n\tvar cell = parse_XLSCell(blob, 6);\n\tif(opts.biff == 2 || length == 9) ++blob.l;\n\tvar val = parse_Bes(blob, 2);\n\tcell.val = val;\n\tcell.t = (val === true || val === false) ? 'b' : 'e';\n\treturn cell;\n}\nfunction write_BoolErr(R, C, v, os, opts, t) {\n\tvar o = new_buf(8);\n\twrite_XLSCell(R, C, os, o);\n\twrite_Bes(v, t, o);\n\treturn o;\n}\n\n/* [MS-XLS] 2.4.180 Number */\nfunction parse_Number(blob, length, opts) {\n\tif(opts.biffguess && opts.biff == 2) opts.biff = 5;\n\tvar cell = parse_XLSCell(blob, 6);\n\tvar xnum = parse_Xnum(blob, 8);\n\tcell.val = xnum;\n\treturn cell;\n}\nfunction write_Number(R, C, v, os) {\n\tvar o = new_buf(14);\n\twrite_XLSCell(R, C, os, o);\n\twrite_Xnum(v, o);\n\treturn o;\n}\n\nvar parse_XLHeaderFooter = parse_OptXLUnicodeString; // TODO: parse 2.4.136\n\n/* [MS-XLS] 2.4.271 */\nfunction parse_SupBook(blob, length, opts) {\n\tvar end = blob.l + length;\n\tvar ctab = blob.read_shift(2);\n\tvar cch = blob.read_shift(2);\n\topts.sbcch = cch;\n\tif(cch == 0x0401 || cch == 0x3A01) return [cch, ctab];\n\tif(cch < 0x01 || cch >0xff) throw new Error(\"Unexpected SupBook type: \"+cch);\n\tvar virtPath = parse_XLUnicodeStringNoCch(blob, cch);\n\t/* TODO: 2.5.277 Virtual Path */\n\tvar rgst = [];\n\twhile(end > blob.l) rgst.push(parse_XLUnicodeString(blob));\n\treturn [cch, ctab, virtPath, rgst];\n}\n\n/* [MS-XLS] 2.4.105 TODO */\nfunction parse_ExternName(blob, length, opts) {\n\tvar flags = blob.read_shift(2);\n\tvar body;\n\tvar o = ({\n\t\tfBuiltIn: flags & 0x01,\n\t\tfWantAdvise: (flags >>> 1) & 0x01,\n\t\tfWantPict: (flags >>> 2) & 0x01,\n\t\tfOle: (flags >>> 3) & 0x01,\n\t\tfOleLink: (flags >>> 4) & 0x01,\n\t\tcf: (flags >>> 5) & 0x3FF,\n\t\tfIcon: flags >>> 15 & 0x01\n\t});\n\tif(opts.sbcch === 0x3A01) body = parse_AddinUdf(blob, length-2, opts);\n\t//else throw new Error(\"unsupported SupBook cch: \" + opts.sbcch);\n\to.body = body || blob.read_shift(length-2);\n\tif(typeof body === \"string\") o.Name = body;\n\treturn o;\n}\n\n/* [MS-XLS] 2.4.150 TODO */\nvar XLSLblBuiltIn = [\n\t\"_xlnm.Consolidate_Area\",\n\t\"_xlnm.Auto_Open\",\n\t\"_xlnm.Auto_Close\",\n\t\"_xlnm.Extract\",\n\t\"_xlnm.Database\",\n\t\"_xlnm.Criteria\",\n\t\"_xlnm.Print_Area\",\n\t\"_xlnm.Print_Titles\",\n\t\"_xlnm.Recorder\",\n\t\"_xlnm.Data_Form\",\n\t\"_xlnm.Auto_Activate\",\n\t\"_xlnm.Auto_Deactivate\",\n\t\"_xlnm.Sheet_Title\",\n\t\"_xlnm._FilterDatabase\"\n];\nfunction parse_Lbl(blob, length, opts) {\n\tvar target = blob.l + length;\n\tvar flags = blob.read_shift(2);\n\tvar chKey = blob.read_shift(1);\n\tvar cch = blob.read_shift(1);\n\tvar cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);\n\tvar itab = 0;\n\tif(!opts || opts.biff >= 5) {\n\t\tif(opts.biff != 5) blob.l += 2;\n\t\titab = blob.read_shift(2);\n\t\tif(opts.biff == 5) blob.l += 2;\n\t\tblob.l += 4;\n\t}\n\tvar name = parse_XLUnicodeStringNoCch(blob, cch, opts);\n\tif(flags & 0x20) name = XLSLblBuiltIn[name.charCodeAt(0)];\n\tvar npflen = target - blob.l; if(opts && opts.biff == 2) --npflen;\n\tvar rgce = (target == blob.l || cce === 0 || !(npflen > 0)) ? [] : parse_NameParsedFormula(blob, npflen, opts, cce);\n\treturn {\n\t\tchKey: chKey,\n\t\tName: name,\n\t\titab: itab,\n\t\trgce: rgce\n\t};\n}\n\n/* [MS-XLS] 2.4.106 TODO: verify filename encoding */\nfunction parse_ExternSheet(blob, length, opts) {\n\tif(opts.biff < 8) return parse_BIFF5ExternSheet(blob, length, opts);\n\tvar o = [], target = blob.l + length, len = blob.read_shift(opts.biff > 8 ? 4 : 2);\n\twhile(len-- !== 0) o.push(parse_XTI(blob, opts.biff > 8 ? 12 : 6, opts));\n\t\t// [iSupBook, itabFirst, itabLast];\n\tif(blob.l != target) throw new Error(\"Bad ExternSheet: \" + blob.l + \" != \" + target);\n\treturn o;\n}\nfunction parse_BIFF5ExternSheet(blob, length, opts) {\n\tif(blob[blob.l + 1] == 0x03) blob[blob.l]++;\n\tvar o = parse_ShortXLUnicodeString(blob, length, opts);\n\treturn o.charCodeAt(0) == 0x03 ? o.slice(1) : o;\n}\n\n/* [MS-XLS] 2.4.176 TODO: check older biff */\nfunction parse_NameCmt(blob, length, opts) {\n\tif(opts.biff < 8) { blob.l += length; return; }\n\tvar cchName = blob.read_shift(2);\n\tvar cchComment = blob.read_shift(2);\n\tvar name = parse_XLUnicodeStringNoCch(blob, cchName, opts);\n\tvar comment = parse_XLUnicodeStringNoCch(blob, cchComment, opts);\n\treturn [name, comment];\n}\n\n/* [MS-XLS] 2.4.260 */\nfunction parse_ShrFmla(blob, length, opts) {\n\tvar ref = parse_RefU(blob, 6);\n\tblob.l++;\n\tvar cUse = blob.read_shift(1);\n\tlength -= 8;\n\treturn [parse_SharedParsedFormula(blob, length, opts), cUse, ref];\n}\n\n/* [MS-XLS] 2.4.4 TODO */\nfunction parse_Array(blob, length, opts) {\n\tvar ref = parse_Ref(blob, 6);\n\t/* TODO: fAlwaysCalc */\n\tswitch(opts.biff) {\n\t\tcase 2: blob.l ++; length -= 7; break;\n\t\tcase 3: case 4: blob.l += 2; length -= 8; break;\n\t\tdefault: blob.l += 6; length -= 12;\n\t}\n\treturn [ref, parse_ArrayParsedFormula(blob, length, opts, ref)];\n}\n\n/* [MS-XLS] 2.4.173 */\nfunction parse_MTRSettings(blob) {\n\tvar fMTREnabled = blob.read_shift(4) !== 0x00;\n\tvar fUserSetThreadCount = blob.read_shift(4) !== 0x00;\n\tvar cUserThreadCount = blob.read_shift(4);\n\treturn [fMTREnabled, fUserSetThreadCount, cUserThreadCount];\n}\n\n/* [MS-XLS] 2.5.186 TODO: BIFF5 */\nfunction parse_NoteSh(blob, length, opts) {\n\tif(opts.biff < 8) return;\n\tvar row = blob.read_shift(2), col = blob.read_shift(2);\n\tvar flags = blob.read_shift(2), idObj = blob.read_shift(2);\n\tvar stAuthor = parse_XLUnicodeString2(blob, 0, opts);\n\tif(opts.biff < 8) blob.read_shift(1);\n\treturn [{r:row,c:col}, stAuthor, idObj, flags];\n}\n\n/* [MS-XLS] 2.4.179 */\nfunction parse_Note(blob, length, opts) {\n\t/* TODO: Support revisions */\n\treturn parse_NoteSh(blob, length, opts);\n}\n\n/* [MS-XLS] 2.4.168 */\nfunction parse_MergeCells(blob, length) {\n\tvar merges = [];\n\tvar cmcs = blob.read_shift(2);\n\twhile (cmcs--) merges.push(parse_Ref8U(blob,length));\n\treturn merges;\n}\nfunction write_MergeCells(merges) {\n\tvar o = new_buf(2 + merges.length * 8);\n\to.write_shift(2, merges.length);\n\tfor(var i = 0; i < merges.length; ++i) write_Ref8U(merges[i], o);\n\treturn o;\n}\n\n/* [MS-XLS] 2.4.181 TODO: parse all the things! */\nfunction parse_Obj(blob, length, opts) {\n\tif(opts && opts.biff < 8) return parse_BIFF5Obj(blob, length, opts);\n\tvar cmo = parse_FtCmo(blob, 22); // id, ot, flags\n\tvar fts = parse_FtArray(blob, length-22, cmo[1]);\n\treturn { cmo: cmo, ft:fts };\n}\n/* from older spec */\nvar parse_BIFF5OT = [];\nparse_BIFF5OT[0x08] = function(blob, length) {\n\tvar tgt = blob.l + length;\n\tblob.l += 10; // todo\n\tvar cf = blob.read_shift(2);\n\tblob.l += 4;\n\tblob.l += 2; //var cbPictFmla = blob.read_shift(2);\n\tblob.l += 2;\n\tblob.l += 2; //var grbit = blob.read_shift(2);\n\tblob.l += 4;\n\tvar cchName = blob.read_shift(1);\n\tblob.l += cchName; // TODO: stName\n\tblob.l = tgt; // TODO: fmla\n\treturn { fmt:cf };\n};\n\nfunction parse_BIFF5Obj(blob, length, opts) {\n\tblob.l += 4; //var cnt = blob.read_shift(4);\n\tvar ot = blob.read_shift(2);\n\tvar id = blob.read_shift(2);\n\tvar grbit = blob.read_shift(2);\n\tblob.l += 2; //var colL = blob.read_shift(2);\n\tblob.l += 2; //var dxL = blob.read_shift(2);\n\tblob.l += 2; //var rwT = blob.read_shift(2);\n\tblob.l += 2; //var dyT = blob.read_shift(2);\n\tblob.l += 2; //var colR = blob.read_shift(2);\n\tblob.l += 2; //var dxR = blob.read_shift(2);\n\tblob.l += 2; //var rwB = blob.read_shift(2);\n\tblob.l += 2; //var dyB = blob.read_shift(2);\n\tblob.l += 2; //var cbMacro = blob.read_shift(2);\n\tblob.l += 6;\n\tlength -= 36;\n\tvar fts = [];\n\tfts.push((parse_BIFF5OT[ot]||parsenoop)(blob, length, opts));\n\treturn { cmo: [id, ot, grbit], ft:fts };\n}\n\n/* [MS-XLS] 2.4.329 TODO: parse properly */\nfunction parse_TxO(blob, length, opts) {\n\tvar s = blob.l;\n\tvar texts = \"\";\ntry {\n\tblob.l += 4;\n\tvar ot = (opts.lastobj||{cmo:[0,0]}).cmo[1];\n\tvar controlInfo; // eslint-disable-line no-unused-vars\n\tif([0,5,7,11,12,14].indexOf(ot) == -1) blob.l += 6;\n\telse controlInfo = parse_ControlInfo(blob, 6, opts);\n\tvar cchText = blob.read_shift(2);\n\t/*var cbRuns = */blob.read_shift(2);\n\t/*var ifntEmpty = */parseuint16(blob, 2);\n\tvar len = blob.read_shift(2);\n\tblob.l += len;\n\t//var fmla = parse_ObjFmla(blob, s + length - blob.l);\n\n\tfor(var i = 1; i < blob.lens.length-1; ++i) {\n\t\tif(blob.l-s != blob.lens[i]) throw new Error(\"TxO: bad continue record\");\n\t\tvar hdr = blob[blob.l];\n\t\tvar t = parse_XLUnicodeStringNoCch(blob, blob.lens[i+1]-blob.lens[i]-1);\n\t\ttexts += t;\n\t\tif(texts.length >= (hdr ? cchText : 2*cchText)) break;\n\t}\n\tif(texts.length !== cchText && texts.length !== cchText*2) {\n\t\tthrow new Error(\"cchText: \" + cchText + \" != \" + texts.length);\n\t}\n\n\tblob.l = s + length;\n\t/* [MS-XLS] 2.5.272 TxORuns */\n//\tvar rgTxoRuns = [];\n//\tfor(var j = 0; j != cbRuns/8-1; ++j) blob.l += 8;\n//\tvar cchText2 = blob.read_shift(2);\n//\tif(cchText2 !== cchText) throw new Error(\"TxOLastRun mismatch: \" + cchText2 + \" \" + cchText);\n//\tblob.l += 6;\n//\tif(s + length != blob.l) throw new Error(\"TxO \" + (s + length) + \", at \" + blob.l);\n\treturn { t: texts };\n} catch(e) { blob.l = s + length; return { t: texts }; }\n}\n\n/* [MS-XLS] 2.4.140 */\nfunction parse_HLink(blob, length) {\n\tvar ref = parse_Ref8U(blob, 8);\n\tblob.l += 16; /* CLSID */\n\tvar hlink = parse_Hyperlink(blob, length-24);\n\treturn [ref, hlink];\n}\nfunction write_HLink(hl) {\n\tvar O = new_buf(24);\n\tvar ref = decode_cell(hl[0]);\n\tO.write_shift(2, ref.r); O.write_shift(2, ref.r);\n\tO.write_shift(2, ref.c); O.write_shift(2, ref.c);\n\tvar clsid = \"d0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b\".split(\" \");\n\tfor(var i = 0; i < 16; ++i) O.write_shift(1, parseInt(clsid[i], 16));\n\treturn bconcat([O, write_Hyperlink(hl[1])]);\n}\n\n\n/* [MS-XLS] 2.4.141 */\nfunction parse_HLinkTooltip(blob, length) {\n\tblob.read_shift(2);\n\tvar ref = parse_Ref8U(blob, 8);\n\tvar wzTooltip = blob.read_shift((length-10)/2, 'dbcs-cont');\n\twzTooltip = wzTooltip.replace(chr0,\"\");\n\treturn [ref, wzTooltip];\n}\nfunction write_HLinkTooltip(hl) {\n\tvar TT = hl[1].Tooltip;\n\tvar O = new_buf(10 + 2 * (TT.length + 1));\n\tO.write_shift(2, 0x0800);\n\tvar ref = decode_cell(hl[0]);\n\tO.write_shift(2, ref.r); O.write_shift(2, ref.r);\n\tO.write_shift(2, ref.c); O.write_shift(2, ref.c);\n\tfor(var i = 0; i < TT.length; ++i) O.write_shift(2, TT.charCodeAt(i));\n\tO.write_shift(2, 0);\n\treturn O;\n}\n\n/* [MS-XLS] 2.4.63 */\nfunction parse_Country(blob) {\n\tvar o = [0,0], d;\n\td = blob.read_shift(2); o[0] = CountryEnum[d] || d;\n\td = blob.read_shift(2); o[1] = CountryEnum[d] || d;\n\treturn o;\n}\nfunction write_Country(o) {\n\tif(!o) o = new_buf(4);\n\to.write_shift(2, 0x01);\n\to.write_shift(2, 0x01);\n\treturn o;\n}\n\n/* [MS-XLS] 2.4.50 ClrtClient */\nfunction parse_ClrtClient(blob) {\n\tvar ccv = blob.read_shift(2);\n\tvar o = [];\n\twhile(ccv-->0) o.push(parse_LongRGB(blob, 8));\n\treturn o;\n}\n\n/* [MS-XLS] 2.4.188 */\nfunction parse_Palette(blob) {\n\tvar ccv = blob.read_shift(2);\n\tvar o = [];\n\twhile(ccv-->0) o.push(parse_LongRGB(blob, 8));\n\treturn o;\n}\n\n/* [MS-XLS] 2.4.354 */\nfunction parse_XFCRC(blob) {\n\tblob.l += 2;\n\tvar o = {cxfs:0, crc:0};\n\to.cxfs = blob.read_shift(2);\n\to.crc = blob.read_shift(4);\n\treturn o;\n}\n\n/* [MS-XLS] 2.4.53 TODO: parse flags */\n/* [MS-XLSB] 2.4.323 TODO: parse flags */\nfunction parse_ColInfo(blob, length, opts) {\n\tif(!opts.cellStyles) return parsenoop(blob, length);\n\tvar w = opts && opts.biff >= 12 ? 4 : 2;\n\tvar colFirst = blob.read_shift(w);\n\tvar colLast = blob.read_shift(w);\n\tvar coldx = blob.read_shift(w);\n\tvar ixfe = blob.read_shift(w);\n\tvar flags = blob.read_shift(2);\n\tif(w == 2) blob.l += 2;\n\tvar o = ({s:colFirst, e:colLast, w:coldx, ixfe:ixfe, flags:flags});\n\tif(opts.biff >= 5 || !opts.biff) o.level = (flags >> 8) & 0x7;\n\treturn o;\n}\nfunction write_ColInfo(col, idx) {\n\tvar o = new_buf(12);\n\to.write_shift(2, idx);\n\to.write_shift(2, idx);\n\to.write_shift(2, col.width * 256);\n\to.write_shift(2, 0);\n\tvar f = 0;\n\tif(col.hidden) f |= 1;\n\to.write_shift(1, f);\n\tf = col.level || 0;\n\to.write_shift(1, f);\n\to.write_shift(2, 0);\n\treturn o;\n}\n\n/* [MS-XLS] 2.4.257 */\nfunction parse_Setup(blob, length) {\n\tvar o = {};\n\tif(length < 32) return o;\n\tblob.l += 16;\n\to.header = parse_Xnum(blob, 8);\n\to.footer = parse_Xnum(blob, 8);\n\tblob.l += 2;\n\treturn o;\n}\n\n/* [MS-XLS] 2.4.261 */\nfunction parse_ShtProps(blob, length, opts) {\n\tvar def = {area:false};\n\tif(opts.biff != 5) { blob.l += length; return def; }\n\tvar d = blob.read_shift(1); blob.l += 3;\n\tif((d & 0x10)) def.area = true;\n\treturn def;\n}\n\n/* [MS-XLS] 2.4.241 */\nfunction write_RRTabId(n) {\n\tvar out = new_buf(2 * n);\n\tfor(var i = 0; i < n; ++i) out.write_shift(2, i+1);\n\treturn out;\n}\n\nvar parse_Blank = parse_XLSCell; /* [MS-XLS] 2.4.20 Just the cell */\nvar parse_Scl = parseuint16a; /* [MS-XLS] 2.4.247 num, den */\nvar parse_String = parse_XLUnicodeString; /* [MS-XLS] 2.4.268 */\n\n/* --- Specific to versions before BIFF8 --- */\nfunction parse_ImData(blob) {\n\tvar cf = blob.read_shift(2);\n\tvar env = blob.read_shift(2);\n\tvar lcb = blob.read_shift(4);\n\tvar o = {fmt:cf, env:env, len:lcb, data:blob.slice(blob.l,blob.l+lcb)};\n\tblob.l += lcb;\n\treturn o;\n}\n\n/* BIFF2_??? where ??? is the name from [XLS] */\nfunction parse_BIFF2STR(blob, length, opts) {\n\tif(opts.biffguess && opts.biff == 5) opts.biff = 2;\n\tvar cell = parse_XLSCell(blob, 6);\n\t++blob.l;\n\tvar str = parse_XLUnicodeString2(blob, length-7, opts);\n\tcell.t = 'str';\n\tcell.val = str;\n\treturn cell;\n}\n\nfunction parse_BIFF2NUM(blob) {\n\tvar cell = parse_XLSCell(blob, 6);\n\t++blob.l;\n\tvar num = parse_Xnum(blob, 8);\n\tcell.t = 'n';\n\tcell.val = num;\n\treturn cell;\n}\nfunction write_BIFF2NUM(r, c, val) {\n\tvar out = new_buf(15);\n\twrite_BIFF2Cell(out, r, c);\n\tout.write_shift(8, val, 'f');\n\treturn out;\n}\n\nfunction parse_BIFF2INT(blob) {\n\tvar cell = parse_XLSCell(blob, 6);\n\t++blob.l;\n\tvar num = blob.read_shift(2);\n\tcell.t = 'n';\n\tcell.val = num;\n\treturn cell;\n}\nfunction write_BIFF2INT(r, c, val) {\n\tvar out = new_buf(9);\n\twrite_BIFF2Cell(out, r, c);\n\tout.write_shift(2, val);\n\treturn out;\n}\n\nfunction parse_BIFF2STRING(blob) {\n\tvar cch = blob.read_shift(1);\n\tif(cch === 0) { blob.l++; return \"\"; }\n\treturn blob.read_shift(cch, 'sbcs-cont');\n}\n\n/* TODO: convert to BIFF8 font struct */\nfunction parse_BIFF2FONTXTRA(blob, length) {\n\tblob.l += 6; // unknown\n\tblob.l += 2; // font weight \"bls\"\n\tblob.l += 1; // charset\n\tblob.l += 3; // unknown\n\tblob.l += 1; // font family\n\tblob.l += length - 13;\n}\n\n/* TODO: parse rich text runs */\nfunction parse_RString(blob, length, opts) {\n\tvar end = blob.l + length;\n\tvar cell = parse_XLSCell(blob, 6);\n\tvar cch = blob.read_shift(2);\n\tvar str = parse_XLUnicodeStringNoCch(blob, cch, opts);\n\tblob.l = end;\n\tcell.t = 'str';\n\tcell.val = str;\n\treturn cell;\n}\n/* from js-harb (C) 2014-present  SheetJS */\nvar DBF = (function() {\nvar dbf_codepage_map = {\n\t/* Code Pages Supported by Visual FoxPro */\n0x01:   437,           0x02:   850,\n0x03:  1252,           0x04: 10000,\n0x64:   852,           0x65:   866,\n0x66:   865,           0x67:   861,\n0x68:   895,           0x69:   620,\n0x6A:   737,           0x6B:   857,\n0x78:   950,           0x79:   949,\n0x7A:   936,           0x7B:   932,\n0x7C:   874,           0x7D:  1255,\n0x7E:  1256,           0x96: 10007,\n0x97: 10029,           0x98: 10006,\n0xC8:  1250,           0xC9:  1251,\n0xCA:  1254,           0xCB:  1253,\n\n\t/* shapefile DBF extension */\n0x00: 20127,           0x08:   865,\n0x09:   437,           0x0A:   850,\n0x0B:   437,           0x0D:   437,\n0x0E:   850,           0x0F:   437,\n0x10:   850,           0x11:   437,\n0x12:   850,           0x13:   932,\n0x14:   850,           0x15:   437,\n0x16:   850,           0x17:   865,\n0x18:   437,           0x19:   437,\n0x1A:   850,           0x1B:   437,\n0x1C:   863,           0x1D:   850,\n0x1F:   852,           0x22:   852,\n0x23:   852,           0x24:   860,\n0x25:   850,           0x26:   866,\n0x37:   850,           0x40:   852,\n0x4D:   936,           0x4E:   949,\n0x4F:   950,           0x50:   874,\n0x57:  1252,           0x58:  1252,\n0x59:  1252,           0x6C:   863,\n0x86:   737,           0x87:   852,\n0x88:   857,           0xCC:  1257,\n\n0xFF: 16969\n};\nvar dbf_reverse_map = evert({\n0x01:   437,           0x02:   850,\n0x03:  1252,           0x04: 10000,\n0x64:   852,           0x65:   866,\n0x66:   865,           0x67:   861,\n0x68:   895,           0x69:   620,\n0x6A:   737,           0x6B:   857,\n0x78:   950,           0x79:   949,\n0x7A:   936,           0x7B:   932,\n0x7C:   874,           0x7D:  1255,\n0x7E:  1256,           0x96: 10007,\n0x97: 10029,           0x98: 10006,\n0xC8:  1250,           0xC9:  1251,\n0xCA:  1254,           0xCB:  1253,\n0x00: 20127\n});\nvar DBF_SUPPORTED_VERSIONS = [0x02, 0x03, 0x30, 0x31, 0x83, 0x8B, 0x8C, 0xF5];\n/* TODO: find an actual specification */\nfunction dbf_to_aoa(buf, opts) {\n\tvar out = [];\n\tvar d = (new_raw_buf(1));\n\tswitch(opts.type) {\n\t\tcase 'base64': d = s2a(Base64.decode(buf)); break;\n\t\tcase 'binary': d = s2a(buf); break;\n\t\tcase 'buffer':\n\t\tcase 'array': d = buf; break;\n\t}\n\tprep_blob(d, 0);\n\n\t/* header */\n\tvar ft = d.read_shift(1);\n\tvar memo = !!(ft & 0x88);\n\tvar vfp = false, l7 = false;\n\tswitch(ft) {\n\t\tcase 0x02: break; // dBASE II\n\t\tcase 0x03: break; // dBASE III\n\t\tcase 0x30: vfp = true; memo = true; break; // VFP\n\t\tcase 0x31: vfp = true; memo = true; break; // VFP with autoincrement\n\t\t// 0x43 dBASE IV SQL table files\n\t\t// 0x63 dBASE IV SQL system files\n\t\tcase 0x83: break; // dBASE III with memo\n\t\tcase 0x8B: break; // dBASE IV with memo\n\t\tcase 0x8C: l7 = true; break; // dBASE Level 7 with memo\n\t\t// case 0xCB dBASE IV SQL table files with memo\n\t\tcase 0xF5: break; // FoxPro 2.x with memo\n\t\t// case 0xFB FoxBASE\n\t\tdefault: throw new Error(\"DBF Unsupported Version: \" + ft.toString(16));\n\t}\n\n\tvar nrow = 0, fpos = 0x0209;\n\tif(ft == 0x02) nrow = d.read_shift(2);\n\td.l += 3; // dBASE II stores DDMMYY date, others use YYMMDD\n\tif(ft != 0x02) nrow = d.read_shift(4);\n\tif(nrow > 1048576) nrow = 1e6;\n\n\tif(ft != 0x02) fpos = d.read_shift(2); // header length\n\tvar rlen = d.read_shift(2); // record length\n\n\tvar /*flags = 0,*/ current_cp = opts.codepage || 1252;\n\tif(ft != 0x02) { // 20 reserved bytes\n\t\td.l+=16;\n\t\t/*flags = */d.read_shift(1);\n\t\t//if(memo && ((flags & 0x02) === 0)) throw new Error(\"DBF Flags \" + flags.toString(16) + \" ft \" + ft.toString(16));\n\n\t\t/* codepage present in FoxPro and dBASE Level 7 */\n\t\tif(d[d.l] !== 0) current_cp = dbf_codepage_map[d[d.l]];\n\t\td.l+=1;\n\n\t\td.l+=2;\n\t}\n\tif(l7) d.l += 36; // Level 7: 32 byte \"Language driver name\", 4 byte reserved\n\nvar fields = [], field = ({});\n\tvar hend = Math.min(d.length, (ft == 0x02 ? 0x209 : (fpos - 10 - (vfp ? 264 : 0))));\n\tvar ww = l7 ? 32 : 11;\n\twhile(d.l < hend && d[d.l] != 0x0d) {\n\t\tfield = ({});\n\t\tfield.name = cptable.utils.decode(current_cp, d.slice(d.l, d.l+ww)).replace(/[\\u0000\\r\\n].*$/g,\"\");\n\t\td.l += ww;\n\t\tfield.type = String.fromCharCode(d.read_shift(1));\n\t\tif(ft != 0x02 && !l7) field.offset = d.read_shift(4);\n\t\tfield.len = d.read_shift(1);\n\t\tif(ft == 0x02) field.offset = d.read_shift(2);\n\t\tfield.dec = d.read_shift(1);\n\t\tif(field.name.length) fields.push(field);\n\t\tif(ft != 0x02) d.l += l7 ? 13 : 14;\n\t\tswitch(field.type) {\n\t\t\tcase 'B': // Double (VFP) / Binary (dBASE L7)\n\t\t\t\tif((!vfp || field.len != 8) && opts.WTF) console.log('Skipping ' + field.name + ':' + field.type);\n\t\t\t\tbreak;\n\t\t\tcase 'G': // General (FoxPro and dBASE L7)\n\t\t\tcase 'P': // Picture (FoxPro and dBASE L7)\n\t\t\t\tif(opts.WTF) console.log('Skipping ' + field.name + ':' + field.type);\n\t\t\t\tbreak;\n\t\t\tcase '+': // Autoincrement (dBASE L7 only)\n\t\t\tcase '0': // _NullFlags (VFP only)\n\t\t\tcase '@': // Timestamp (dBASE L7 only)\n\t\t\tcase 'C': // Character (dBASE II)\n\t\t\tcase 'D': // Date (dBASE III)\n\t\t\tcase 'F': // Float (dBASE IV)\n\t\t\tcase 'I': // Long (VFP and dBASE L7)\n\t\t\tcase 'L': // Logical (dBASE II)\n\t\t\tcase 'M': // Memo (dBASE III)\n\t\t\tcase 'N': // Number (dBASE II)\n\t\t\tcase 'O': // Double (dBASE L7 only)\n\t\t\tcase 'T': // Datetime (VFP only)\n\t\t\tcase 'Y': // Currency (VFP only)\n\t\t\t\tbreak;\n\t\t\tdefault: throw new Error('Unknown Field Type: ' + field.type);\n\t\t}\n\t}\n\n\tif(d[d.l] !== 0x0D) d.l = fpos-1;\n\tif(d.read_shift(1) !== 0x0D) throw new Error(\"DBF Terminator not found \" + d.l + \" \" + d[d.l]);\n\td.l = fpos;\n\n\t/* data */\n\tvar R = 0, C = 0;\n\tout[0] = [];\n\tfor(C = 0; C != fields.length; ++C) out[0][C] = fields[C].name;\n\twhile(nrow-- > 0) {\n\t\tif(d[d.l] === 0x2A) {\n\t\t\t// TODO: record marked as deleted -- create a hidden row?\n\t\t\td.l+=rlen;\n\t\t\tcontinue;\n\t\t}\n\t\t++d.l;\n\t\tout[++R] = []; C = 0;\n\t\tfor(C = 0; C != fields.length; ++C) {\n\t\t\tvar dd = d.slice(d.l, d.l+fields[C].len); d.l+=fields[C].len;\n\t\t\tprep_blob(dd, 0);\n\t\t\tvar s = cptable.utils.decode(current_cp, dd);\n\t\t\tswitch(fields[C].type) {\n\t\t\t\tcase 'C':\n\t\t\t\t\t// NOTE: it is conventional to write '  /  /  ' for empty dates\n\t\t\t\t\tif(s.trim().length) out[R][C] = s.replace(/\\s+$/,\"\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'D':\n\t\t\t\t\tif(s.length === 8) out[R][C] = new Date(+s.slice(0,4), +s.slice(4,6)-1, +s.slice(6,8));\n\t\t\t\t\telse out[R][C] = s;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'F': out[R][C] = parseFloat(s.trim()); break;\n\t\t\t\tcase '+': case 'I': out[R][C] = l7 ? dd.read_shift(-4, 'i') ^ 0x80000000 : dd.read_shift(4, 'i'); break;\n\t\t\t\tcase 'L': switch(s.trim().toUpperCase()) {\n\t\t\t\t\tcase 'Y': case 'T': out[R][C] = true; break;\n\t\t\t\t\tcase 'N': case 'F': out[R][C] = false; break;\n\t\t\t\t\tcase '': case '?': break;\n\t\t\t\t\tdefault: throw new Error(\"DBF Unrecognized L:|\" + s + \"|\");\n\t\t\t\t\t} break;\n\t\t\t\tcase 'M': /* TODO: handle memo files */\n\t\t\t\t\tif(!memo) throw new Error(\"DBF Unexpected MEMO for type \" + ft.toString(16));\n\t\t\t\t\tout[R][C] = \"##MEMO##\" + (l7 ? parseInt(s.trim(), 10): dd.read_shift(4));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'N':\n\t\t\t\t\ts = s.replace(/\\u0000/g,\"\").trim();\n\t\t\t\t\t// NOTE: dBASE II interprets \"  .  \" as 0\n\t\t\t\t\tif(s && s != \".\") out[R][C] = +s || 0; break;\n\t\t\t\tcase '@':\n\t\t\t\t\t// NOTE: dBASE specs appear to be incorrect\n\t\t\t\t\tout[R][C] = new Date(dd.read_shift(-8, 'f') - 0x388317533400);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'T': out[R][C] = new Date((dd.read_shift(4) - 0x253D8C) * 0x5265C00 + dd.read_shift(4)); break;\n\t\t\t\tcase 'Y': out[R][C] = dd.read_shift(4,'i')/1e4; break;\n\t\t\t\tcase 'O': out[R][C] = -dd.read_shift(-8, 'f'); break;\n\t\t\t\tcase 'B': if(vfp && fields[C].len == 8) { out[R][C] = dd.read_shift(8,'f'); break; }\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase 'G': case 'P': dd.l += fields[C].len; break;\n\t\t\t\tcase '0':\n\t\t\t\t\tif(fields[C].name === '_NullFlags') break;\n\t\t\t\t\t/* falls through */\n\t\t\t\tdefault: throw new Error(\"DBF Unsupported data type \" + fields[C].type);\n\t\t\t}\n\t\t}\n\t}\n\tif(ft != 0x02) if(d.l < d.length && d[d.l++] != 0x1A) throw new Error(\"DBF EOF Marker missing \" + (d.l-1) + \" of \" + d.length + \" \" + d[d.l-1].toString(16));\n\tif(opts && opts.sheetRows) out = out.slice(0, opts.sheetRows);\n\treturn out;\n}\n\nfunction dbf_to_sheet(buf, opts) {\n\tvar o = opts || {};\n\tif(!o.dateNF) o.dateNF = \"yyyymmdd\";\n\treturn aoa_to_sheet(dbf_to_aoa(buf, o), o);\n}\n\nfunction dbf_to_workbook(buf, opts) {\n\ttry { return sheet_to_workbook(dbf_to_sheet(buf, opts), opts); }\n\tcatch(e) { if(opts && opts.WTF) throw e; }\n\treturn ({SheetNames:[],Sheets:{}});\n}\n\nvar _RLEN = { 'B': 8, 'C': 250, 'L': 1, 'D': 8, '?': 0, '': 0 };\nfunction sheet_to_dbf(ws, opts) {\n\tvar o = opts || {};\n\tif(+o.codepage >= 0) set_cp(+o.codepage);\n\tif(o.type == \"string\") throw new Error(\"Cannot write DBF to JS string\");\n\tvar ba = buf_array();\n\tvar aoa = sheet_to_json(ws, {header:1, raw:true, cellDates:true});\n\tvar headers = aoa[0], data = aoa.slice(1);\n\tvar i = 0, j = 0, hcnt = 0, rlen = 1;\n\tfor(i = 0; i < headers.length; ++i) {\n\t\tif(i == null) continue;\n\t\t++hcnt;\n\t\tif(typeof headers[i] === 'number') headers[i] = headers[i].toString(10);\n\t\tif(typeof headers[i] !== 'string') throw new Error(\"DBF Invalid column name \" + headers[i] + \" |\" + (typeof headers[i]) + \"|\");\n\t\tif(headers.indexOf(headers[i]) !== i) for(j=0; j<1024;++j)\n\t\t\tif(headers.indexOf(headers[i] + \"_\" + j) == -1) { headers[i] += \"_\" + j; break; }\n\t}\n\tvar range = safe_decode_range(ws['!ref']);\n\tvar coltypes = [];\n\tfor(i = 0; i <= range.e.c - range.s.c; ++i) {\n\t\tvar col = [];\n\t\tfor(j=0; j < data.length; ++j) {\n\t\t\tif(data[j][i] != null) col.push(data[j][i]);\n\t\t}\n\t\tif(col.length == 0 || headers[i] == null) { coltypes[i] = '?'; continue; }\n\t\tvar guess = '', _guess = '';\n\t\tfor(j = 0; j < col.length; ++j) {\n\t\t\tswitch(typeof col[j]) {\n\t\t\t\t/* TODO: check if L2 compat is desired */\n\t\t\t\tcase 'number': _guess = 'B'; break;\n\t\t\t\tcase 'string': _guess = 'C'; break;\n\t\t\t\tcase 'boolean': _guess = 'L'; break;\n\t\t\t\tcase 'object': _guess = col[j] instanceof Date ? 'D' : 'C'; break;\n\t\t\t\tdefault: _guess = 'C';\n\t\t\t}\n\t\t\tguess = guess && guess != _guess ? 'C' : _guess;\n\t\t\tif(guess == 'C') break;\n\t\t}\n\t\trlen += _RLEN[guess] || 0;\n\t\tcoltypes[i] = guess;\n\t}\n\n\tvar h = ba.next(32);\n\th.write_shift(4, 0x13021130);\n\th.write_shift(4, data.length);\n\th.write_shift(2, 296 + 32 * hcnt);\n\th.write_shift(2, rlen);\n\tfor(i=0; i < 4; ++i) h.write_shift(4, 0);\n\th.write_shift(4, 0x00000000 | ((+dbf_reverse_map[current_ansi] || 0x03)<<8));\n\n\tfor(i = 0, j = 0; i < headers.length; ++i) {\n\t\tif(headers[i] == null) continue;\n\t\tvar hf = ba.next(32);\n\t\tvar _f = (headers[i].slice(-10) + \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\").slice(0, 11);\n\t\thf.write_shift(1, _f, \"sbcs\");\n\t\thf.write_shift(1, coltypes[i] == '?' ? 'C' : coltypes[i], \"sbcs\");\n\t\thf.write_shift(4, j);\n\t\thf.write_shift(1, _RLEN[coltypes[i]] || 0);\n\t\thf.write_shift(1, 0);\n\t\thf.write_shift(1, 0x02);\n\t\thf.write_shift(4, 0);\n\t\thf.write_shift(1, 0);\n\t\thf.write_shift(4, 0);\n\t\thf.write_shift(4, 0);\n\t\tj += _RLEN[coltypes[i]] || 0;\n\t}\n\n\tvar hb = ba.next(264);\n\thb.write_shift(4, 0x0000000D);\n\tfor(i=0; i < 65;++i) hb.write_shift(4, 0x00000000);\n\tfor(i=0; i < data.length; ++i) {\n\t\tvar rout = ba.next(rlen);\n\t\trout.write_shift(1, 0);\n\t\tfor(j=0; j<headers.length; ++j) {\n\t\t\tif(headers[j] == null) continue;\n\t\t\tswitch(coltypes[j]) {\n\t\t\t\tcase 'L': rout.write_shift(1, data[i][j] == null ? 0x3F : data[i][j] ? 0x54 : 0x46); break;\n\t\t\t\tcase 'B': rout.write_shift(8, data[i][j]||0, 'f'); break;\n\t\t\t\tcase 'D':\n\t\t\t\t\tif(!data[i][j]) rout.write_shift(8, \"00000000\", \"sbcs\");\n\t\t\t\t\telse {\n\t\t\t\t\t\trout.write_shift(4, (\"0000\"+data[i][j].getFullYear()).slice(-4), \"sbcs\");\n\t\t\t\t\t\trout.write_shift(2, (\"00\"+(data[i][j].getMonth()+1)).slice(-2), \"sbcs\");\n\t\t\t\t\t\trout.write_shift(2, (\"00\"+data[i][j].getDate()).slice(-2), \"sbcs\");\n\t\t\t\t\t} break;\n\t\t\t\tcase 'C':\n\t\t\t\t\tvar _s = String(data[i][j]||\"\");\n\t\t\t\t\trout.write_shift(1, _s, \"sbcs\");\n\t\t\t\t\tfor(hcnt=0; hcnt < 250-_s.length; ++hcnt) rout.write_shift(1, 0x20); break;\n\t\t\t}\n\t\t}\n\t\t// data\n\t}\n\tba.next(1).write_shift(1, 0x1A);\n\treturn ba.end();\n}\n\treturn {\n\t\tversions: DBF_SUPPORTED_VERSIONS,\n\t\tto_workbook: dbf_to_workbook,\n\t\tto_sheet: dbf_to_sheet,\n\t\tfrom_sheet: sheet_to_dbf\n\t};\n})();\n\nvar SYLK = (function() {\n\t/* TODO: stress test sequences */\n\tvar sylk_escapes = ({\n\t\tAA:'À', BA:'Á', CA:'Â', DA:195, HA:'Ä', JA:197,\n\t\tAE:'È', BE:'É', CE:'Ê',         HE:'Ë',\n\t\tAI:'Ì', BI:'Í', CI:'Î',         HI:'Ï',\n\t\tAO:'Ò', BO:'Ó', CO:'Ô', DO:213, HO:'Ö',\n\t\tAU:'Ù', BU:'Ú', CU:'Û',         HU:'Ü',\n\t\tAa:'à', Ba:'á', Ca:'â', Da:227, Ha:'ä', Ja:229,\n\t\tAe:'è', Be:'é', Ce:'ê',         He:'ë',\n\t\tAi:'ì', Bi:'í', Ci:'î',         Hi:'ï',\n\t\tAo:'ò', Bo:'ó', Co:'ô', Do:245, Ho:'ö',\n\t\tAu:'ù', Bu:'ú', Cu:'û',         Hu:'ü',\n\t\tKC:'Ç', Kc:'ç', q:'æ',  z:'œ',  a:'Æ',  j:'Œ',\n\t\tDN:209, Dn:241, Hy:255,\n\t\tS:169,  c:170,  R:174,  \"B \":180,\n0:176,    1:177,  2:178,\n3:179,    5:181,  6:182,\n7:183,    Q:185,  k:186,  b:208,  i:216,  l:222,  s:240,  y:248,\n\t\t\"!\":161, '\"':162, \"#\":163, \"(\":164, \"%\":165, \"'\":167, \"H \":168,\n\t\t\"+\":171, \";\":187, \"<\":188, \"=\":189, \">\":190, \"?\":191, \"{\":223\n\t});\n\tvar sylk_char_regex = new RegExp(\"\\u001BN(\" + keys(sylk_escapes).join(\"|\").replace(/\\|\\|\\|/, \"|\\\\||\").replace(/([?()+])/g,\"\\\\$1\") + \"|\\\\|)\", \"gm\");\n\tvar sylk_char_fn = function(_, $1){ var o = sylk_escapes[$1]; return typeof o == \"number\" ? _getansi(o) : o; };\n\tvar decode_sylk_char = function($$, $1, $2) { var newcc = (($1.charCodeAt(0) - 0x20)<<4) | ($2.charCodeAt(0) - 0x30); return newcc == 59 ? $$ : _getansi(newcc); };\n\tsylk_escapes[\"|\"] = 254;\n\t/* TODO: find an actual specification */\n\tfunction sylk_to_aoa(d, opts) {\n\t\tswitch(opts.type) {\n\t\t\tcase 'base64': return sylk_to_aoa_str(Base64.decode(d), opts);\n\t\t\tcase 'binary': return sylk_to_aoa_str(d, opts);\n\t\t\tcase 'buffer': return sylk_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d), opts);\n\t\t\tcase 'array': return sylk_to_aoa_str(cc2str(d), opts);\n\t\t}\n\t\tthrow new Error(\"Unrecognized type \" + opts.type);\n\t}\n\tfunction sylk_to_aoa_str(str, opts) {\n\t\tvar records = str.split(/[\\n\\r]+/), R = -1, C = -1, ri = 0, rj = 0, arr = [];\n\t\tvar formats = [];\n\t\tvar next_cell_format = null;\n\t\tvar sht = {}, rowinfo = [], colinfo = [], cw = [];\n\t\tvar Mval = 0, j;\n\t\tif(+opts.codepage >= 0) set_cp(+opts.codepage);\n\t\tfor (; ri !== records.length; ++ri) {\n\t\t\tMval = 0;\n\t\t\tvar rstr=records[ri].trim().replace(/\\x1B([\\x20-\\x2F])([\\x30-\\x3F])/g, decode_sylk_char).replace(sylk_char_regex, sylk_char_fn);\n\t\t\tvar record=rstr.replace(/;;/g, \"\\u0000\").split(\";\").map(function(x) { return x.replace(/\\u0000/g, \";\"); });\n\t\t\tvar RT=record[0], val;\n\t\t\tif(rstr.length > 0) switch(RT) {\n\t\t\tcase 'ID': break; /* header */\n\t\t\tcase 'E': break; /* EOF */\n\t\t\tcase 'B': break; /* dimensions */\n\t\t\tcase 'O': break; /* options? */\n\t\t\tcase 'W': break; /* window? */\n\t\t\tcase 'P':\n\t\t\t\tif(record[1].charAt(0) == 'P')\n\t\t\t\t\tformats.push(rstr.slice(3).replace(/;;/g, \";\"));\n\t\t\t\tbreak;\n\t\t\tcase 'C':\n\t\t\tvar C_seen_K = false, C_seen_X = false, C_seen_S = false, C_seen_E = false, _R = -1, _C = -1;\n\t\t\tfor(rj=1; rj<record.length; ++rj) switch(record[rj].charAt(0)) {\n\t\t\t\tcase 'A': break; // TODO: comment\n\t\t\t\tcase 'X': C = parseInt(record[rj].slice(1))-1; C_seen_X = true; break;\n\t\t\t\tcase 'Y':\n\t\t\t\t\tR = parseInt(record[rj].slice(1))-1; if(!C_seen_X) C = 0;\n\t\t\t\t\tfor(j = arr.length; j <= R; ++j) arr[j] = [];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'K':\n\t\t\t\t\tval = record[rj].slice(1);\n\t\t\t\t\tif(val.charAt(0) === '\"') val = val.slice(1,val.length - 1);\n\t\t\t\t\telse if(val === 'TRUE') val = true;\n\t\t\t\t\telse if(val === 'FALSE') val = false;\n\t\t\t\t\telse if(!isNaN(fuzzynum(val))) {\n\t\t\t\t\t\tval = fuzzynum(val);\n\t\t\t\t\t\tif(next_cell_format !== null && SSF.is_date(next_cell_format)) val = numdate(val);\n\t\t\t\t\t} else if(!isNaN(fuzzydate(val).getDate())) {\n\t\t\t\t\t\tval = parseDate(val);\n\t\t\t\t\t}\n\t\t\t\t\tif(typeof cptable !== 'undefined' && typeof val == \"string\" && ((opts||{}).type != \"string\") && (opts||{}).codepage) val = cptable.utils.decode(opts.codepage, val);\n\t\t\t\t\tC_seen_K = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'E':\n\t\t\t\t\tC_seen_E = true;\n\t\t\t\t\tvar formula = rc_to_a1(record[rj].slice(1), {r:R,c:C});\n\t\t\t\t\tarr[R][C] = [arr[R][C], formula];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'S':\n\t\t\t\t\tC_seen_S = true;\n\t\t\t\t\tarr[R][C] = [arr[R][C], \"S5S\"];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'G': break; // unknown\n\t\t\t\tcase 'R': _R = parseInt(record[rj].slice(1))-1; break;\n\t\t\t\tcase 'C': _C = parseInt(record[rj].slice(1))-1; break;\n\t\t\t\tdefault: if(opts && opts.WTF) throw new Error(\"SYLK bad record \" + rstr);\n\t\t\t}\n\t\t\tif(C_seen_K) {\n\t\t\t\tif(arr[R][C] && arr[R][C].length == 2) arr[R][C][0] = val;\n\t\t\t\telse arr[R][C] = val;\n\t\t\t\tnext_cell_format = null;\n\t\t\t}\n\t\t\tif(C_seen_S) {\n\t\t\t\tif(C_seen_E) throw new Error(\"SYLK shared formula cannot have own formula\");\n\t\t\t\tvar shrbase = _R > -1 && arr[_R][_C];\n\t\t\t\tif(!shrbase || !shrbase[1]) throw new Error(\"SYLK shared formula cannot find base\");\n\t\t\t\tarr[R][C][1] = shift_formula_str(shrbase[1], {r: R - _R, c: C - _C});\n\t\t\t}\n\t\t\tbreak;\n\t\t\tcase 'F':\n\t\t\tvar F_seen = 0;\n\t\t\tfor(rj=1; rj<record.length; ++rj) switch(record[rj].charAt(0)) {\n\t\t\t\tcase 'X': C = parseInt(record[rj].slice(1))-1; ++F_seen; break;\n\t\t\t\tcase 'Y':\n\t\t\t\t\tR = parseInt(record[rj].slice(1))-1; /*C = 0;*/\n\t\t\t\t\tfor(j = arr.length; j <= R; ++j) arr[j] = [];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'M': Mval = parseInt(record[rj].slice(1)) / 20; break;\n\t\t\t\tcase 'F': break; /* ??? */\n\t\t\t\tcase 'G': break; /* hide grid */\n\t\t\t\tcase 'P':\n\t\t\t\t\tnext_cell_format = formats[parseInt(record[rj].slice(1))];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'S': break; /* cell style */\n\t\t\t\tcase 'D': break; /* column */\n\t\t\t\tcase 'N': break; /* font */\n\t\t\t\tcase 'W':\n\t\t\t\t\tcw = record[rj].slice(1).split(\" \");\n\t\t\t\t\tfor(j = parseInt(cw[0], 10); j <= parseInt(cw[1], 10); ++j) {\n\t\t\t\t\t\tMval = parseInt(cw[2], 10);\n\t\t\t\t\t\tcolinfo[j-1] = Mval === 0 ? {hidden:true}: {wch:Mval}; process_col(colinfo[j-1]);\n\t\t\t\t\t} break;\n\t\t\t\tcase 'C': /* default column format */\n\t\t\t\t\tC = parseInt(record[rj].slice(1))-1;\n\t\t\t\t\tif(!colinfo[C]) colinfo[C] = {};\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'R': /* row properties */\n\t\t\t\t\tR = parseInt(record[rj].slice(1))-1;\n\t\t\t\t\tif(!rowinfo[R]) rowinfo[R] = {};\n\t\t\t\t\tif(Mval > 0) { rowinfo[R].hpt = Mval; rowinfo[R].hpx = pt2px(Mval); }\n\t\t\t\t\telse if(Mval === 0) rowinfo[R].hidden = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault: if(opts && opts.WTF) throw new Error(\"SYLK bad record \" + rstr);\n\t\t\t}\n\t\t\tif(F_seen < 1) next_cell_format = null; break;\n\t\t\tdefault: if(opts && opts.WTF) throw new Error(\"SYLK bad record \" + rstr);\n\t\t\t}\n\t\t}\n\t\tif(rowinfo.length > 0) sht['!rows'] = rowinfo;\n\t\tif(colinfo.length > 0) sht['!cols'] = colinfo;\n\t\tif(opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);\n\t\treturn [arr, sht];\n\t}\n\n\tfunction sylk_to_sheet(d, opts) {\n\t\tvar aoasht = sylk_to_aoa(d, opts);\n\t\tvar aoa = aoasht[0], ws = aoasht[1];\n\t\tvar o = aoa_to_sheet(aoa, opts);\n\t\tkeys(ws).forEach(function(k) { o[k] = ws[k]; });\n\t\treturn o;\n\t}\n\n\tfunction sylk_to_workbook(d, opts) { return sheet_to_workbook(sylk_to_sheet(d, opts), opts); }\n\n\tfunction write_ws_cell_sylk(cell, ws, R, C) {\n\t\tvar o = \"C;Y\" + (R+1) + \";X\" + (C+1) + \";K\";\n\t\tswitch(cell.t) {\n\t\t\tcase 'n':\n\t\t\t\to += (cell.v||0);\n\t\t\t\tif(cell.f && !cell.F) o += \";E\" + a1_to_rc(cell.f, {r:R, c:C}); break;\n\t\t\tcase 'b': o += cell.v ? \"TRUE\" : \"FALSE\"; break;\n\t\t\tcase 'e': o += cell.w || cell.v; break;\n\t\t\tcase 'd': o += '\"' + (cell.w || cell.v) + '\"'; break;\n\t\t\tcase 's': o += '\"' + cell.v.replace(/\"/g,\"\") + '\"'; break;\n\t\t}\n\t\treturn o;\n\t}\n\n\tfunction write_ws_cols_sylk(out, cols) {\n\t\tcols.forEach(function(col, i) {\n\t\t\tvar rec = \"F;W\" + (i+1) + \" \" + (i+1) + \" \";\n\t\t\tif(col.hidden) rec += \"0\";\n\t\t\telse {\n\t\t\t\tif(typeof col.width == 'number' && !col.wpx) col.wpx = width2px(col.width);\n\t\t\t\tif(typeof col.wpx == 'number' && !col.wch) col.wch = px2char(col.wpx);\n\t\t\t\tif(typeof col.wch == 'number') rec += Math.round(col.wch);\n\t\t\t}\n\t\t\tif(rec.charAt(rec.length - 1) != \" \") out.push(rec);\n\t\t});\n\t}\n\n\tfunction write_ws_rows_sylk(out, rows) {\n\t\trows.forEach(function(row, i) {\n\t\t\tvar rec = \"F;\";\n\t\t\tif(row.hidden) rec += \"M0;\";\n\t\t\telse if(row.hpt) rec += \"M\" + 20 * row.hpt + \";\";\n\t\t\telse if(row.hpx) rec += \"M\" + 20 * px2pt(row.hpx) + \";\";\n\t\t\tif(rec.length > 2) out.push(rec + \"R\" + (i+1));\n\t\t});\n\t}\n\n\tfunction sheet_to_sylk(ws, opts) {\n\t\tvar preamble = [\"ID;PWXL;N;E\"], o = [];\n\t\tvar r = safe_decode_range(ws['!ref']), cell;\n\t\tvar dense = Array.isArray(ws);\n\t\tvar RS = \"\\r\\n\";\n\n\t\tpreamble.push(\"P;PGeneral\");\n\t\tpreamble.push(\"F;P0;DG0G8;M255\");\n\t\tif(ws['!cols']) write_ws_cols_sylk(preamble, ws['!cols']);\n\t\tif(ws['!rows']) write_ws_rows_sylk(preamble, ws['!rows']);\n\n\t\tpreamble.push(\"B;Y\" + (r.e.r - r.s.r + 1) + \";X\" + (r.e.c - r.s.c + 1) + \";D\" + [r.s.c,r.s.r,r.e.c,r.e.r].join(\" \"));\n\t\tfor(var R = r.s.r; R <= r.e.r; ++R) {\n\t\t\tfor(var C = r.s.c; C <= r.e.c; ++C) {\n\t\t\t\tvar coord = encode_cell({r:R,c:C});\n\t\t\t\tcell = dense ? (ws[R]||[])[C]: ws[coord];\n\t\t\t\tif(!cell || (cell.v == null && (!cell.f || cell.F))) continue;\n\t\t\t\to.push(write_ws_cell_sylk(cell, ws, R, C, opts));\n\t\t\t}\n\t\t}\n\t\treturn preamble.join(RS) + RS + o.join(RS) + RS + \"E\" + RS;\n\t}\n\n\treturn {\n\t\tto_workbook: sylk_to_workbook,\n\t\tto_sheet: sylk_to_sheet,\n\t\tfrom_sheet: sheet_to_sylk\n\t};\n})();\n\nvar DIF = (function() {\n\tfunction dif_to_aoa(d, opts) {\n\t\tswitch(opts.type) {\n\t\t\tcase 'base64': return dif_to_aoa_str(Base64.decode(d), opts);\n\t\t\tcase 'binary': return dif_to_aoa_str(d, opts);\n\t\t\tcase 'buffer': return dif_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d), opts);\n\t\t\tcase 'array': return dif_to_aoa_str(cc2str(d), opts);\n\t\t}\n\t\tthrow new Error(\"Unrecognized type \" + opts.type);\n\t}\n\tfunction dif_to_aoa_str(str, opts) {\n\t\tvar records = str.split('\\n'), R = -1, C = -1, ri = 0, arr = [];\n\t\tfor (; ri !== records.length; ++ri) {\n\t\t\tif (records[ri].trim() === 'BOT') { arr[++R] = []; C = 0; continue; }\n\t\t\tif (R < 0) continue;\n\t\t\tvar metadata = records[ri].trim().split(\",\");\n\t\t\tvar type = metadata[0], value = metadata[1];\n\t\t\t++ri;\n\t\t\tvar data = records[ri] || \"\";\n\t\t\twhile(((data.match(/[\"]/g)||[]).length & 1) && ri < records.length - 1) data += \"\\n\" + records[++ri];\n\t\t\tdata = data.trim();\n\t\t\tswitch (+type) {\n\t\t\t\tcase -1:\n\t\t\t\t\tif (data === 'BOT') { arr[++R] = []; C = 0; continue; }\n\t\t\t\t\telse if (data !== 'EOD') throw new Error(\"Unrecognized DIF special command \" + data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 0:\n\t\t\t\t\tif(data === 'TRUE') arr[R][C] = true;\n\t\t\t\t\telse if(data === 'FALSE') arr[R][C] = false;\n\t\t\t\t\telse if(!isNaN(fuzzynum(value))) arr[R][C] = fuzzynum(value);\n\t\t\t\t\telse if(!isNaN(fuzzydate(value).getDate())) arr[R][C] = parseDate(value);\n\t\t\t\t\telse arr[R][C] = value;\n\t\t\t\t\t++C; break;\n\t\t\t\tcase 1:\n\t\t\t\t\tdata = data.slice(1,data.length-1);\n\t\t\t\t\tdata = data.replace(/\"\"/g, '\"');\n\t\t\t\t\tif(DIF_XL && data && data.match(/^=\".*\"$/)) data = data.slice(2, -1);\n\t\t\t\t\tarr[R][C++] = data !== '' ? data : null;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (data === 'EOD') break;\n\t\t}\n\t\tif(opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);\n\t\treturn arr;\n\t}\n\n\tfunction dif_to_sheet(str, opts) { return aoa_to_sheet(dif_to_aoa(str, opts), opts); }\n\tfunction dif_to_workbook(str, opts) { return sheet_to_workbook(dif_to_sheet(str, opts), opts); }\n\n\tvar sheet_to_dif = (function() {\n\t\tvar push_field = function pf(o, topic, v, n, s) {\n\t\t\to.push(topic);\n\t\t\to.push(v + \",\" + n);\n\t\t\to.push('\"' + s.replace(/\"/g,'\"\"') + '\"');\n\t\t};\n\t\tvar push_value = function po(o, type, v, s) {\n\t\t\to.push(type + \",\" + v);\n\t\t\to.push(type == 1 ? '\"' + s.replace(/\"/g,'\"\"') + '\"' : s);\n\t\t};\n\t\treturn function sheet_to_dif(ws) {\n\t\t\tvar o = [];\n\t\t\tvar r = safe_decode_range(ws['!ref']), cell;\n\t\t\tvar dense = Array.isArray(ws);\n\t\t\tpush_field(o, \"TABLE\", 0, 1, \"sheetjs\");\n\t\t\tpush_field(o, \"VECTORS\", 0, r.e.r - r.s.r + 1,\"\");\n\t\t\tpush_field(o, \"TUPLES\", 0, r.e.c - r.s.c + 1,\"\");\n\t\t\tpush_field(o, \"DATA\", 0, 0,\"\");\n\t\t\tfor(var R = r.s.r; R <= r.e.r; ++R) {\n\t\t\t\tpush_value(o, -1, 0, \"BOT\");\n\t\t\t\tfor(var C = r.s.c; C <= r.e.c; ++C) {\n\t\t\t\t\tvar coord = encode_cell({r:R,c:C});\n\t\t\t\t\tcell = dense ? (ws[R]||[])[C] : ws[coord];\n\t\t\t\t\tif(!cell) { push_value(o, 1, 0, \"\"); continue;}\n\t\t\t\t\tswitch(cell.t) {\n\t\t\t\t\t\tcase 'n':\n\t\t\t\t\t\t\tvar val = DIF_XL ? cell.w : cell.v;\n\t\t\t\t\t\t\tif(!val && cell.v != null) val = cell.v;\n\t\t\t\t\t\t\tif(val == null) {\n\t\t\t\t\t\t\t\tif(DIF_XL && cell.f && !cell.F) push_value(o, 1, 0, \"=\" + cell.f);\n\t\t\t\t\t\t\t\telse push_value(o, 1, 0, \"\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse push_value(o, 0, val, \"V\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t\tpush_value(o, 0, cell.v ? 1 : 0, cell.v ? \"TRUE\" : \"FALSE\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 's':\n\t\t\t\t\t\t\tpush_value(o, 1, 0, (!DIF_XL || isNaN(cell.v)) ? cell.v : '=\"' + cell.v + '\"');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'd':\n\t\t\t\t\t\t\tif(!cell.w) cell.w = SSF.format(cell.z || SSF._table[14], datenum(parseDate(cell.v)));\n\t\t\t\t\t\t\tif(DIF_XL) push_value(o, 0, cell.w, \"V\");\n\t\t\t\t\t\t\telse push_value(o, 1, 0, cell.w);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault: push_value(o, 1, 0, \"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpush_value(o, -1, 0, \"EOD\");\n\t\t\tvar RS = \"\\r\\n\";\n\t\t\tvar oo = o.join(RS);\n\t\t\t//while((oo.length & 0x7F) != 0) oo += \"\\0\";\n\t\t\treturn oo;\n\t\t};\n\t})();\n\treturn {\n\t\tto_workbook: dif_to_workbook,\n\t\tto_sheet: dif_to_sheet,\n\t\tfrom_sheet: sheet_to_dif\n\t};\n})();\n\nvar ETH = (function() {\n\tfunction decode(s) { return s.replace(/\\\\b/g,\"\\\\\").replace(/\\\\c/g,\":\").replace(/\\\\n/g,\"\\n\"); }\n\tfunction encode(s) { return s.replace(/\\\\/g, \"\\\\b\").replace(/:/g, \"\\\\c\").replace(/\\n/g,\"\\\\n\"); }\n\n\tfunction eth_to_aoa(str, opts) {\n\t\tvar records = str.split('\\n'), R = -1, C = -1, ri = 0, arr = [];\n\t\tfor (; ri !== records.length; ++ri) {\n\t\t\tvar record = records[ri].trim().split(\":\");\n\t\t\tif(record[0] !== 'cell') continue;\n\t\t\tvar addr = decode_cell(record[1]);\n\t\t\tif(arr.length <= addr.r) for(R = arr.length; R <= addr.r; ++R) if(!arr[R]) arr[R] = [];\n\t\t\tR = addr.r; C = addr.c;\n\t\t\tswitch(record[2]) {\n\t\t\t\tcase 't': arr[R][C] = decode(record[3]); break;\n\t\t\t\tcase 'v': arr[R][C] = +record[3]; break;\n\t\t\t\tcase 'vtf': var _f = record[record.length - 1];\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase 'vtc':\n\t\t\t\t\tswitch(record[3]) {\n\t\t\t\t\t\tcase 'nl': arr[R][C] = +record[4] ? true : false; break;\n\t\t\t\t\t\tdefault: arr[R][C] = +record[4]; break;\n\t\t\t\t\t}\n\t\t\t\t\tif(record[2] == 'vtf') arr[R][C] = [arr[R][C], _f];\n\t\t\t}\n\t\t}\n\t\tif(opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);\n\t\treturn arr;\n\t}\n\n\tfunction eth_to_sheet(d, opts) { return aoa_to_sheet(eth_to_aoa(d, opts), opts); }\n\tfunction eth_to_workbook(d, opts) { return sheet_to_workbook(eth_to_sheet(d, opts), opts); }\n\n\tvar header = [\n\t\t\"socialcalc:version:1.5\",\n\t\t\"MIME-Version: 1.0\",\n\t\t\"Content-Type: multipart/mixed; boundary=SocialCalcSpreadsheetControlSave\"\n\t].join(\"\\n\");\n\n\tvar sep = [\n\t\t\"--SocialCalcSpreadsheetControlSave\",\n\t\t\"Content-type: text/plain; charset=UTF-8\"\n\t].join(\"\\n\") + \"\\n\";\n\n\t/* TODO: the other parts */\n\tvar meta = [\n\t\t\"# SocialCalc Spreadsheet Control Save\",\n\t\t\"part:sheet\"\n\t].join(\"\\n\");\n\n\tvar end = \"--SocialCalcSpreadsheetControlSave--\";\n\n\tfunction sheet_to_eth_data(ws) {\n\t\tif(!ws || !ws['!ref']) return \"\";\n\t\tvar o = [], oo = [], cell, coord = \"\";\n\t\tvar r = decode_range(ws['!ref']);\n\t\tvar dense = Array.isArray(ws);\n\t\tfor(var R = r.s.r; R <= r.e.r; ++R) {\n\t\t\tfor(var C = r.s.c; C <= r.e.c; ++C) {\n\t\t\t\tcoord = encode_cell({r:R,c:C});\n\t\t\t\tcell = dense ? (ws[R]||[])[C] : ws[coord];\n\t\t\t\tif(!cell || cell.v == null || cell.t === 'z') continue;\n\t\t\t\too = [\"cell\", coord, 't'];\n\t\t\t\tswitch(cell.t) {\n\t\t\t\t\tcase 's': case 'str': oo.push(encode(cell.v)); break;\n\t\t\t\t\tcase 'n':\n\t\t\t\t\t\tif(!cell.f) { oo[2]='v'; oo[3]=cell.v; }\n\t\t\t\t\t\telse { oo[2]='vtf'; oo[3]='n'; oo[4]=cell.v; oo[5]=encode(cell.f); }\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'b':\n\t\t\t\t\t\too[2] = 'vt'+(cell.f?'f':'c'); oo[3]='nl'; oo[4]=cell.v?\"1\":\"0\";\n\t\t\t\t\t\too[5] = encode(cell.f||(cell.v?'TRUE':'FALSE'));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'd':\n\t\t\t\t\t\tvar t = datenum(parseDate(cell.v));\n\t\t\t\t\t\too[2] = 'vtc'; oo[3] = 'nd'; oo[4] = \"\"+t;\n\t\t\t\t\t\too[5] = cell.w || SSF.format(cell.z || SSF._table[14], t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'e': continue;\n\t\t\t\t}\n\t\t\t\to.push(oo.join(\":\"));\n\t\t\t}\n\t\t}\n\t\to.push(\"sheet:c:\" + (r.e.c-r.s.c+1) + \":r:\" + (r.e.r-r.s.r+1) + \":tvf:1\");\n\t\to.push(\"valueformat:1:text-wiki\");\n\t\t//o.push(\"copiedfrom:\" + ws['!ref']); // clipboard only\n\t\treturn o.join(\"\\n\");\n\t}\n\n\tfunction sheet_to_eth(ws) {\n\t\treturn [header, sep, meta, sep, sheet_to_eth_data(ws), end].join(\"\\n\");\n\t\t// return [\"version:1.5\", sheet_to_eth_data(ws)].join(\"\\n\"); // clipboard form\n\t}\n\n\treturn {\n\t\tto_workbook: eth_to_workbook,\n\t\tto_sheet: eth_to_sheet,\n\t\tfrom_sheet: sheet_to_eth\n\t};\n})();\n\nvar PRN = (function() {\n\tfunction set_text_arr(data, arr, R, C, o) {\n\t\tif(o.raw) arr[R][C] = data;\n\t\telse if(data === \"\"){/* empty */}\n\t\telse if(data === 'TRUE') arr[R][C] = true;\n\t\telse if(data === 'FALSE') arr[R][C] = false;\n\t\telse if(!isNaN(fuzzynum(data))) arr[R][C] = fuzzynum(data);\n\t\telse if(!isNaN(fuzzydate(data).getDate())) arr[R][C] = parseDate(data);\n\t\telse arr[R][C] = data;\n\t}\n\n\tfunction prn_to_aoa_str(f, opts) {\n\t\tvar o = opts || {};\n\t\tvar arr = ([]);\n\t\tif(!f || f.length === 0) return arr;\n\t\tvar lines = f.split(/[\\r\\n]/);\n\t\tvar L = lines.length - 1;\n\t\twhile(L >= 0 && lines[L].length === 0) --L;\n\t\tvar start = 10, idx = 0;\n\t\tvar R = 0;\n\t\tfor(; R <= L; ++R) {\n\t\t\tidx = lines[R].indexOf(\" \");\n\t\t\tif(idx == -1) idx = lines[R].length; else idx++;\n\t\t\tstart = Math.max(start, idx);\n\t\t}\n\t\tfor(R = 0; R <= L; ++R) {\n\t\t\tarr[R] = [];\n\t\t\t/* TODO: confirm that widths are always 10 */\n\t\t\tvar C = 0;\n\t\t\tset_text_arr(lines[R].slice(0, start).trim(), arr, R, C, o);\n\t\t\tfor(C = 1; C <= (lines[R].length - start)/10 + 1; ++C)\n\t\t\t\tset_text_arr(lines[R].slice(start+(C-1)*10,start+C*10).trim(),arr,R,C,o);\n\t\t}\n\t\tif(o.sheetRows) arr = arr.slice(0, o.sheetRows);\n\t\treturn arr;\n\t}\n\n\t// List of accepted CSV separators\n\tvar guess_seps = {\n0x2C: ',',\n0x09: \"\\t\",\n0x3B: ';',\n0x7C: '|'\n\t};\n\n\t// CSV separator weights to be used in case of equal numbers\n\tvar guess_sep_weights = {\n0x2C: 3,\n0x09: 2,\n0x3B: 1,\n0x7C: 0\n\t};\n\n\tfunction guess_sep(str) {\n\t\tvar cnt = {}, instr = false, end = 0, cc = 0;\n\t\tfor(;end < str.length;++end) {\n\t\t\tif((cc=str.charCodeAt(end)) == 0x22) instr = !instr;\n\t\t\telse if(!instr && cc in guess_seps) cnt[cc] = (cnt[cc]||0)+1;\n\t\t}\n\n\t\tcc = [];\n\t\tfor(end in cnt) if ( Object.prototype.hasOwnProperty.call(cnt, end) ) {\n\t\t\tcc.push([ cnt[end], end ]);\n\t\t}\n\n\t\tif ( !cc.length ) {\n\t\t\tcnt = guess_sep_weights;\n\t\t\tfor(end in cnt) if ( Object.prototype.hasOwnProperty.call(cnt, end) ) {\n\t\t\t\tcc.push([ cnt[end], end ]);\n\t\t\t}\n\t\t}\n\n\t\tcc.sort(function(a, b) { return a[0] - b[0] || guess_sep_weights[a[1]] - guess_sep_weights[b[1]]; });\n\n\t\treturn guess_seps[cc.pop()[1]] || 0x2C;\n\t}\n\n\tfunction dsv_to_sheet_str(str, opts) {\n\t\tvar o = opts || {};\n\t\tvar sep = \"\";\n\t\tif(DENSE != null && o.dense == null) o.dense = DENSE;\n\t\tvar ws = o.dense ? ([]) : ({});\n\t\tvar range = ({s: {c:0, r:0}, e: {c:0, r:0}});\n\n\t\tif(str.slice(0,4) == \"sep=\") {\n\t\t\t// If the line ends in \\r\\n\n\t\t\tif(str.charCodeAt(5) == 13 && str.charCodeAt(6) == 10 ) {\n\t\t\t\tsep = str.charAt(4); str = str.slice(7);\n\t\t\t}\n\t\t\t// If line ends in \\r OR \\n\n\t\t\telse if(str.charCodeAt(5) == 13 || str.charCodeAt(5) == 10 ) {\n\t\t\t\tsep = str.charAt(4); str = str.slice(6);\n\t\t\t}\n\t\t\telse sep = guess_sep(str.slice(0,1024));\n\t\t}\n\t\telse if(o && o.FS) sep = o.FS;\n\t\telse sep = guess_sep(str.slice(0,1024));\n\t\tvar R = 0, C = 0, v = 0;\n\t\tvar start = 0, end = 0, sepcc = sep.charCodeAt(0), instr = false, cc=0, startcc=str.charCodeAt(0);\n\t\tstr = str.replace(/\\r\\n/mg, \"\\n\");\n\t\tvar _re = o.dateNF != null ? dateNF_regex(o.dateNF) : null;\n\t\tfunction finish_cell() {\n\t\t\tvar s = str.slice(start, end);\n\t\t\tvar cell = ({});\n\t\t\tif(s.charAt(0) == '\"' && s.charAt(s.length - 1) == '\"') s = s.slice(1,-1).replace(/\"\"/g,'\"');\n\t\t\tif(s.length === 0) cell.t = 'z';\n\t\t\telse if(o.raw) { cell.t = 's'; cell.v = s; }\n\t\t\telse if(s.trim().length === 0) { cell.t = 's'; cell.v = s; }\n\t\t\telse if(s.charCodeAt(0) == 0x3D) {\n\t\t\t\tif(s.charCodeAt(1) == 0x22 && s.charCodeAt(s.length - 1) == 0x22) { cell.t = 's'; cell.v = s.slice(2,-1).replace(/\"\"/g,'\"'); }\n\t\t\t\telse if(fuzzyfmla(s)) { cell.t = 'n'; cell.f = s.slice(1); }\n\t\t\t\telse { cell.t = 's'; cell.v = s; } }\n\t\t\telse if(s == \"TRUE\") { cell.t = 'b'; cell.v = true; }\n\t\t\telse if(s == \"FALSE\") { cell.t = 'b'; cell.v = false; }\n\t\t\telse if(!isNaN(v = fuzzynum(s))) { cell.t = 'n'; if(o.cellText !== false) cell.w = s; cell.v = v; }\n\t\t\telse if(!isNaN(fuzzydate(s).getDate()) || _re && s.match(_re)) {\n\t\t\t\tcell.z = o.dateNF || SSF._table[14];\n\t\t\t\tvar k = 0;\n\t\t\t\tif(_re && s.match(_re)){ s=dateNF_fix(s, o.dateNF, (s.match(_re)||[])); k=1; }\n\t\t\t\tif(o.cellDates) { cell.t = 'd'; cell.v = parseDate(s, k); }\n\t\t\t\telse { cell.t = 'n'; cell.v = datenum(parseDate(s, k)); }\n\t\t\t\tif(o.cellText !== false) cell.w = SSF.format(cell.z, cell.v instanceof Date ? datenum(cell.v):cell.v);\n\t\t\t\tif(!o.cellNF) delete cell.z;\n\t\t\t} else {\n\t\t\t\tcell.t = 's';\n\t\t\t\tcell.v = s;\n\t\t\t}\n\t\t\tif(cell.t == 'z'){}\n\t\t\telse if(o.dense) { if(!ws[R]) ws[R] = []; ws[R][C] = cell; }\n\t\t\telse ws[encode_cell({c:C,r:R})] = cell;\n\t\t\tstart = end+1; startcc = str.charCodeAt(start);\n\t\t\tif(range.e.c < C) range.e.c = C;\n\t\t\tif(range.e.r < R) range.e.r = R;\n\t\t\tif(cc == sepcc) ++C; else { C = 0; ++R; if(o.sheetRows && o.sheetRows <= R) return true; }\n\t\t}\n\t\touter: for(;end < str.length;++end) switch((cc=str.charCodeAt(end))) {\n\t\t\tcase 0x22: if(startcc === 0x22) instr = !instr; break;\n\t\t\tcase sepcc: case 0x0a: case 0x0d: if(!instr && finish_cell()) break outer; break;\n\t\t\tdefault: break;\n\t\t}\n\t\tif(end - start > 0) finish_cell();\n\n\t\tws['!ref'] = encode_range(range);\n\t\treturn ws;\n\t}\n\n\tfunction prn_to_sheet_str(str, opts) {\n\t\tif(!(opts && opts.PRN)) return dsv_to_sheet_str(str, opts);\n\t\tif(opts.FS) return dsv_to_sheet_str(str, opts);\n\t\tif(str.slice(0,4) == \"sep=\") return dsv_to_sheet_str(str, opts);\n\t\tif(str.indexOf(\"\\t\") >= 0 || str.indexOf(\",\") >= 0 || str.indexOf(\";\") >= 0) return dsv_to_sheet_str(str, opts);\n\t\treturn aoa_to_sheet(prn_to_aoa_str(str, opts), opts);\n\t}\n\n\tfunction prn_to_sheet(d, opts) {\n\t\tvar str = \"\", bytes = opts.type == 'string' ? [0,0,0,0] : firstbyte(d, opts);\n\t\tswitch(opts.type) {\n\t\t\tcase 'base64': str = Base64.decode(d); break;\n\t\t\tcase 'binary': str = d; break;\n\t\t\tcase 'buffer':\n\t\t\t\tif(opts.codepage == 65001) str = d.toString('utf8'); // TODO: test if buf\n\t\t\t\telse if(opts.codepage && typeof cptable !== 'undefined') str = cptable.utils.decode(opts.codepage, d);\n\t\t\t\telse str = has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d);\n\t\t\t\tbreak;\n\t\t\tcase 'array': str = cc2str(d); break;\n\t\t\tcase 'string': str = d; break;\n\t\t\tdefault: throw new Error(\"Unrecognized type \" + opts.type);\n\t\t}\n\t\tif(bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) str = utf8read(str.slice(3));\n\t\telse if(opts.type != 'string' && opts.codepage == 65001) str = utf8read(str);\n\t\telse if((opts.type == 'binary') && typeof cptable !== 'undefined' && opts.codepage)  str = cptable.utils.decode(opts.codepage, cptable.utils.encode(28591,str));\n\t\tif(str.slice(0,19) == \"socialcalc:version:\") return ETH.to_sheet(opts.type == 'string' ? str : utf8read(str), opts);\n\t\treturn prn_to_sheet_str(str, opts);\n\t}\n\n\tfunction prn_to_workbook(d, opts) { return sheet_to_workbook(prn_to_sheet(d, opts), opts); }\n\n\tfunction sheet_to_prn(ws) {\n\t\tvar o = [];\n\t\tvar r = safe_decode_range(ws['!ref']), cell;\n\t\tvar dense = Array.isArray(ws);\n\t\tfor(var R = r.s.r; R <= r.e.r; ++R) {\n\t\t\tvar oo = [];\n\t\t\tfor(var C = r.s.c; C <= r.e.c; ++C) {\n\t\t\t\tvar coord = encode_cell({r:R,c:C});\n\t\t\t\tcell = dense ? (ws[R]||[])[C] : ws[coord];\n\t\t\t\tif(!cell || cell.v == null) { oo.push(\"          \"); continue; }\n\t\t\t\tvar w = (cell.w || (format_cell(cell), cell.w) || \"\").slice(0,10);\n\t\t\t\twhile(w.length < 10) w += \" \";\n\t\t\t\too.push(w + (C === 0 ? \" \" : \"\"));\n\t\t\t}\n\t\t\to.push(oo.join(\"\"));\n\t\t}\n\t\treturn o.join(\"\\n\");\n\t}\n\n\treturn {\n\t\tto_workbook: prn_to_workbook,\n\t\tto_sheet: prn_to_sheet,\n\t\tfrom_sheet: sheet_to_prn\n\t};\n})();\n\n/* Excel defaults to SYLK but warns if data is not valid */\nfunction read_wb_ID(d, opts) {\n\tvar o = opts || {}, OLD_WTF = !!o.WTF; o.WTF = true;\n\ttry {\n\t\tvar out = SYLK.to_workbook(d, o);\n\t\to.WTF = OLD_WTF;\n\t\treturn out;\n\t} catch(e) {\n\t\to.WTF = OLD_WTF;\n\t\tif(!e.message.match(/SYLK bad record ID/) && OLD_WTF) throw e;\n\t\treturn PRN.to_workbook(d, opts);\n\t}\n}\n\nvar WK_ =  (function() {\n\tfunction lotushopper(data, cb, opts) {\n\t\tif(!data) return;\n\t\tprep_blob(data, data.l || 0);\n\t\tvar Enum = opts.Enum || WK1Enum;\n\t\twhile(data.l < data.length) {\n\t\t\tvar RT = data.read_shift(2);\n\t\t\tvar R = Enum[RT] || Enum[0xFFFF];\n\t\t\tvar length = data.read_shift(2);\n\t\t\tvar tgt = data.l + length;\n\t\t\tvar d = R.f && R.f(data, length, opts);\n\t\t\tdata.l = tgt;\n\t\t\tif(cb(d, R, RT)) return;\n\t\t}\n\t}\n\n\tfunction lotus_to_workbook(d, opts) {\n\t\tswitch(opts.type) {\n\t\t\tcase 'base64': return lotus_to_workbook_buf(s2a(Base64.decode(d)), opts);\n\t\t\tcase 'binary': return lotus_to_workbook_buf(s2a(d), opts);\n\t\t\tcase 'buffer':\n\t\t\tcase 'array': return lotus_to_workbook_buf(d, opts);\n\t\t}\n\t\tthrow \"Unsupported type \" + opts.type;\n\t}\n\n\tfunction lotus_to_workbook_buf(d, opts) {\n\t\tif(!d) return d;\n\t\tvar o = opts || {};\n\t\tif(DENSE != null && o.dense == null) o.dense = DENSE;\n\t\tvar s = ((o.dense ? [] : {})), n = \"Sheet1\", sidx = 0;\n\t\tvar sheets = {}, snames = [n], realnames = [];\n\n\t\tvar refguess = {s: {r:0, c:0}, e: {r:0, c:0} };\n\t\tvar sheetRows = o.sheetRows || 0;\n\n\t\tif(d[2] == 0x02) {\n\t\t\to.Enum = WK1Enum;\n\t\t\tlotushopper(d, function(val, R, RT) { switch(RT) {\n\t\t\t\tcase 0x00: /* BOF */\n\t\t\t\t\to.vers = val;\n\t\t\t\t\tif(val >= 0x1000) o.qpro = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 0x06: refguess = val; break; /* RANGE */\n\t\t\t\tcase 0x0F: /* LABEL */\n\t\t\t\tcase 0x33: /* STRING */\n\t\t\t\t\tif(!o.qpro) val[1].v = val[1].v.slice(1);\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase 0x0D: /* INTEGER */\n\t\t\t\tcase 0x0E: /* NUMBER */\n\t\t\t\tcase 0x10: /* FORMULA */\n\t\t\t\t\t/* TODO: actual translation of the format code */\n\t\t\t\t\tif(RT == 0x0E && (val[2] & 0x70) == 0x70 && (val[2] & 0x0F) > 1 && (val[2] & 0x0F) < 15) {\n\t\t\t\t\t\tval[1].z = o.dateNF || SSF._table[14];\n\t\t\t\t\t\tif(o.cellDates) { val[1].t = 'd'; val[1].v = numdate(val[1].v); }\n\t\t\t\t\t}\n\t\t\t\t\tvar tmpcell = o.dense ? (s[val[0].r]||[])[val[0].c] : s[encode_cell(val[0])];\n\t\t\t\t\tif(tmpcell) {\n\t\t\t\t\t\ttmpcell.t = val[1].t; tmpcell.v = val[1].v;\n\t\t\t\t\t\tif(val[1].z != null) tmpcell.z = val[1].z;\n\t\t\t\t\t\tif(val[1].f != null) tmpcell.f = val[1].f;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(o.dense) {\n\t\t\t\t\t\tif(!s[val[0].r]) s[val[0].r] = [];\n\t\t\t\t\t\ts[val[0].r][val[0].c] = val[1];\n\t\t\t\t\t} else s[encode_cell(val[0])] = val[1];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t}}, o);\n\t\t} else if(d[2] == 0x1A || d[2] == 0x0E) {\n\t\t\to.Enum = WK3Enum;\n\t\t\tif(d[2] == 0x0E) { o.qpro = true; d.l = 0; }\n\t\t\tlotushopper(d, function(val, R, RT) { switch(RT) {\n\t\t\t\tcase 0x16: /* LABEL16 */\n\t\t\t\t\tval[1].v = val[1].v.slice(1);\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase 0x17: /* NUMBER17 */\n\t\t\t\tcase 0x18: /* NUMBER18 */\n\t\t\t\tcase 0x19: /* FORMULA19 */\n\t\t\t\tcase 0x25: /* NUMBER25 */\n\t\t\t\tcase 0x27: /* NUMBER27 */\n\t\t\t\tcase 0x28: /* FORMULA28 */\n\t\t\t\t\tif(val[3] > sidx) {\n\t\t\t\t\t\ts[\"!ref\"] = encode_range(refguess);\n\t\t\t\t\t\tsheets[n] = s;\n\t\t\t\t\t\ts = (o.dense ? [] : {});\n\t\t\t\t\t\trefguess = {s: {r:0, c:0}, e: {r:0, c:0} };\n\t\t\t\t\t\tsidx = val[3]; n = \"Sheet\" + (sidx + 1);\n\t\t\t\t\t\tsnames.push(n);\n\t\t\t\t\t}\n\t\t\t\t\tif(sheetRows > 0 && val[0].r >= sheetRows) break;\n\t\t\t\t\tif(o.dense) {\n\t\t\t\t\t\tif(!s[val[0].r]) s[val[0].r] = [];\n\t\t\t\t\t\ts[val[0].r][val[0].c] = val[1];\n\t\t\t\t\t} else s[encode_cell(val[0])] = val[1];\n\t\t\t\t\tif(refguess.e.c < val[0].c) refguess.e.c = val[0].c;\n\t\t\t\t\tif(refguess.e.r < val[0].r) refguess.e.r = val[0].r;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 0x1B: /* XFORMAT */\n\t\t\t\t\tif(val[0x36b0]) realnames[val[0x36b0][0]] = val[0x36b0][1];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault: break;\n\t\t\t}}, o);\n\t\t} else throw new Error(\"Unrecognized LOTUS BOF \" + d[2]);\n\n\t\ts[\"!ref\"] = encode_range(refguess);\n\t\tsheets[n] = s;\n\t\tif(!realnames.length) return { SheetNames: snames, Sheets: sheets };\n\t\tvar osheets = {}, rnames = [];\n\t\tfor(var i = 0; i < realnames.length; ++i) if(sheets[snames[i]]) {\n\t\t\trnames.push(realnames[i]);\n\t\t\tosheets[realnames[i]] = sheets[snames[i]];\n\t\t}\n\t\treturn { SheetNames: rnames, Sheets: osheets };\n\t}\n\n\tfunction sheet_to_wk1(ws, opts) {\n\t\tvar o = opts || {};\n\t\tif(+o.codepage >= 0) set_cp(+o.codepage);\n\t\tif(o.type == \"string\") throw new Error(\"Cannot write WK1 to JS string\");\n\t\tvar ba = buf_array();\n\t\tvar range = safe_decode_range(ws[\"!ref\"]);\n\t\tvar dense = Array.isArray(ws);\n\t\tvar cols = [];\n\n\t\twrite_biff_rec(ba, 0x00, write_BOF_WK1(0x0406));\n\t\twrite_biff_rec(ba, 0x06, write_RANGE(range));\n\t\tfor(var R = range.s.r; R <= range.e.r; ++R) {\n\t\t\tvar rr = encode_row(R);\n\t\t\tfor(var C = range.s.c; C <= range.e.c; ++C) {\n\t\t\t\tif(R === range.s.r) cols[C] = encode_col(C);\n\t\t\t\tvar ref = cols[C] + rr;\n\t\t\t\tvar cell = dense ? (ws[R]||[])[C] : ws[ref];\n\t\t\t\tif(!cell || cell.t == \"z\") continue;\n\t\t\t\t/* TODO: formula records */\n\t\t\t\tif(cell.t == \"n\") {\n\t\t\t\t\tif((cell.v|0)==cell.v && cell.v >= -32768 && cell.v <= 32767) write_biff_rec(ba, 0x0d, write_INTEGER(R, C, cell.v));\n\t\t\t\t\telse write_biff_rec(ba, 0x0e, write_NUMBER(R, C, cell.v));\n\t\t\t\t} else {\n\t\t\t\t\tvar str = format_cell(cell);\n\t\t\t\t\twrite_biff_rec(ba, 0x0F, write_LABEL(R, C, str.slice(0, 239)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\twrite_biff_rec(ba, 0x01);\n\t\treturn ba.end();\n\t}\n\n\tfunction book_to_wk3(wb, opts) {\n\t\tvar o = opts || {};\n\t\tif(+o.codepage >= 0) set_cp(+o.codepage);\n\t\tif(o.type == \"string\") throw new Error(\"Cannot write WK3 to JS string\");\n\t\tvar ba = buf_array();\n\n\t\twrite_biff_rec(ba, 0x00, write_BOF_WK3(wb));\n\n\t\tfor(var i = 0, cnt = 0; i < wb.SheetNames.length; ++i) if((wb.Sheets[wb.SheetNames[i]] || {})[\"!ref\"]) write_biff_rec(ba, 0x1b, write_XFORMAT_SHEETNAME(wb.SheetNames[i], cnt++));\n\n\t\tvar wsidx = 0;\n\t\tfor(i = 0; i < wb.SheetNames.length; ++i) {\n\t\t\tvar ws = wb.Sheets[wb.SheetNames[i]];\n\t\t\tif(!ws || !ws[\"!ref\"]) continue;\n\t\t\tvar range = safe_decode_range(ws[\"!ref\"]);\n\t\t\tvar dense = Array.isArray(ws);\n\t\t\tvar cols = [];\n\t\t\tfor(var R = range.s.r; R <= range.e.r; ++R) {\n\t\t\t\tvar rr = encode_row(R);\n\t\t\t\tfor(var C = range.s.c; C <= range.e.c; ++C) {\n\t\t\t\t\tif(R === range.s.r) cols[C] = encode_col(C);\n\t\t\t\t\tvar ref = cols[C] + rr;\n\t\t\t\t\tvar cell = dense ? (ws[R]||[])[C] : ws[ref];\n\t\t\t\t\tif(!cell || cell.t == \"z\") continue;\n\t\t\t\t\t/* TODO: FORMULA19 NUMBER18 records */\n\t\t\t\t\tif(cell.t == \"n\") {\n\t\t\t\t\t\twrite_biff_rec(ba, 0x17, write_NUMBER_17(R, C, wsidx, cell.v));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar str = format_cell(cell);\n\t\t\t\t\t\t/* TODO: max len? */\n\t\t\t\t\t\twrite_biff_rec(ba, 0x16, write_LABEL_16(R, C, wsidx, str.slice(0, 239)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t++wsidx;\n\t\t}\n\n\t\twrite_biff_rec(ba, 0x01);\n\t\treturn ba.end();\n\t}\n\n\n\tfunction write_BOF_WK1(v) {\n\t\tvar out = new_buf(2);\n\t\tout.write_shift(2, v);\n\t\treturn out;\n\t}\n\n\tfunction write_BOF_WK3(wb) {\n\t\tvar out = new_buf(26);\n\t\tout.write_shift(2, 0x1000);\n\t\tout.write_shift(2, 0x0004);\n\t\tout.write_shift(4, 0x0000);\n\t\tvar rows = 0, cols = 0, wscnt = 0;\n\t\tfor(var i = 0; i < wb.SheetNames.length; ++i) {\n\t\t\tvar name = wb.SheetNames[i];\n\t\t\tvar ws = wb.Sheets[name];\n\t\t\tif(!ws || !ws[\"!ref\"]) continue;\n\t\t\t++wscnt;\n\t\t\tvar range = decode_range(ws[\"!ref\"]);\n\t\t\tif(rows < range.e.r) rows = range.e.r;\n\t\t\tif(cols < range.e.c) cols = range.e.c;\n\t\t}\n\t\tout.write_shift(2, rows);\n\t\tout.write_shift(1, wscnt);\n\t\tout.write_shift(1, cols);\n\t\tout.write_shift(2, 0x00);\n\t\tout.write_shift(2, 0x00);\n\t\tout.write_shift(1, 0x01);\n\t\tout.write_shift(1, 0x02);\n\t\tout.write_shift(4, 0);\n\t\tout.write_shift(4, 0);\n\t\treturn out;\n\t}\n\n\tfunction parse_RANGE(blob) {\n\t\tvar o = {s:{c:0,r:0},e:{c:0,r:0}};\n\t\to.s.c = blob.read_shift(2);\n\t\to.s.r = blob.read_shift(2);\n\t\to.e.c = blob.read_shift(2);\n\t\to.e.r = blob.read_shift(2);\n\t\tif(o.s.c == 0xFFFF) o.s.c = o.e.c = o.s.r = o.e.r = 0;\n\t\treturn o;\n\t}\n\tfunction write_RANGE(range) {\n\t\tvar out = new_buf(8);\n\t\tout.write_shift(2, range.s.c);\n\t\tout.write_shift(2, range.s.r);\n\t\tout.write_shift(2, range.e.c);\n\t\tout.write_shift(2, range.e.r);\n\t\treturn out;\n\t}\n\n\tfunction parse_cell(blob, length, opts) {\n\t\tvar o = [{c:0,r:0}, {t:'n',v:0}, 0];\n\t\tif(opts.qpro && opts.vers != 0x5120) {\n\t\t\to[0].c = blob.read_shift(1);\n\t\t\tblob.l++;\n\t\t\to[0].r = blob.read_shift(2);\n\t\t\tblob.l+=2;\n\t\t} else {\n\t\t\to[2] = blob.read_shift(1);\n\t\t\to[0].c = blob.read_shift(2); o[0].r = blob.read_shift(2);\n\t\t}\n\t\treturn o;\n\t}\n\n\tfunction parse_LABEL(blob, length, opts) {\n\t\tvar tgt = blob.l + length;\n\t\tvar o = parse_cell(blob, length, opts);\n\t\to[1].t = 's';\n\t\tif(opts.vers == 0x5120) {\n\t\t\tblob.l++;\n\t\t\tvar len = blob.read_shift(1);\n\t\t\to[1].v = blob.read_shift(len, 'utf8');\n\t\t\treturn o;\n\t\t}\n\t\tif(opts.qpro) blob.l++;\n\t\to[1].v = blob.read_shift(tgt - blob.l, 'cstr');\n\t\treturn o;\n\t}\n\tfunction write_LABEL(R, C, s) {\n\t\t/* TODO: encoding */\n\t\tvar o = new_buf(7 + s.length);\n\t\to.write_shift(1, 0xFF);\n\t\to.write_shift(2, C);\n\t\to.write_shift(2, R);\n\t\to.write_shift(1, 0x27); // ??\n\t\tfor(var i = 0; i < o.length; ++i) {\n\t\t\tvar cc = s.charCodeAt(i);\n\t\t\to.write_shift(1, cc >= 0x80 ? 0x5F : cc);\n\t\t}\n\t\to.write_shift(1, 0);\n\t\treturn o;\n\t}\n\n\tfunction parse_INTEGER(blob, length, opts) {\n\t\tvar o = parse_cell(blob, length, opts);\n\t\to[1].v = blob.read_shift(2, 'i');\n\t\treturn o;\n\t}\n\tfunction write_INTEGER(R, C, v) {\n\t\tvar o = new_buf(7);\n\t\to.write_shift(1, 0xFF);\n\t\to.write_shift(2, C);\n\t\to.write_shift(2, R);\n\t\to.write_shift(2, v, 'i');\n\t\treturn o;\n\t}\n\n\tfunction parse_NUMBER(blob, length, opts) {\n\t\tvar o = parse_cell(blob, length, opts);\n\t\to[1].v = blob.read_shift(8, 'f');\n\t\treturn o;\n\t}\n\tfunction write_NUMBER(R, C, v) {\n\t\tvar o = new_buf(13);\n\t\to.write_shift(1, 0xFF);\n\t\to.write_shift(2, C);\n\t\to.write_shift(2, R);\n\t\to.write_shift(8, v, 'f');\n\t\treturn o;\n\t}\n\n\tfunction parse_FORMULA(blob, length, opts) {\n\t\tvar tgt = blob.l + length;\n\t\tvar o = parse_cell(blob, length, opts);\n\t\t/* TODO: formula */\n\t\to[1].v = blob.read_shift(8, 'f');\n\t\tif(opts.qpro) blob.l = tgt;\n\t\telse {\n\t\t\tvar flen = blob.read_shift(2);\n\t\t\twk1_fmla_to_csf(blob.slice(blob.l, blob.l + flen), o);\n\t\t\tblob.l += flen;\n\t\t}\n\t\treturn o;\n\t}\n\n\tfunction wk1_parse_rc(B, V, col) {\n\t\tvar rel = V & 0x8000;\n\t\tV &= ~0x8000;\n\t\tV = (rel ? B : 0) + ((V >= 0x2000) ? V - 0x4000 : V);\n\t\treturn (rel ? \"\" : \"$\") + (col ? encode_col(V) : encode_row(V));\n\t}\n\tvar oprec = [\n\t\t8, 8, 8, 8, 8, 8, 8, 8, 6, 4, 4, 5, 5, 7, 3, 3,\n\t\t3, 3, 3, 3, 1, 1, 2, 6, 8, 8, 8, 8, 8, 8, 8, 8\n\t];\n\t/* TODO: flesh out */\n\tvar FuncTab = {\n\t\t0x33: [\"FALSE\", 0],\n\t\t0x34: [\"TRUE\", 0],\n\t\t0x46: [\"LEN\", 1],\n\t\t0x50: [\"SUM\", 69],\n\t\t0x51: [\"AVERAGEA\", 69],\n\t\t0x52: [\"COUNTA\", 69],\n\t\t0x53: [\"MINA\", 69],\n\t\t0x54: [\"MAXA\", 69],\n\t\t0x6F: [\"T\", 1]\n\t};\n\tvar BinOpTab = [\n\t\t  \"\",   \"\",   \"\",   \"\",   \"\",   \"\",   \"\",   \"\",\n\t\t  \"\",  \"+\",  \"-\",  \"*\",  \"/\",  \"^\",  \"=\", \"<>\",\n\t\t\"<=\", \">=\",  \"<\",  \">\",   \"\",   \"\",   \"\",   \"\",\n\t\t \"&\",   \"\",   \"\",   \"\",   \"\",   \"\",   \"\",   \"\"\n\t];\n\n\tfunction wk1_fmla_to_csf(blob, o) {\n\t\tprep_blob(blob, 0);\n\t\tvar out = [], argc = 0, R = \"\", C = \"\";\n\t\twhile(blob.l < blob.length) {\n\t\t\tvar cc = blob[blob.l++];\n\t\t\tswitch(cc) {\n\t\t\t\tcase 0x00: out.push(blob.read_shift(8, 'f')); break;\n\t\t\t\tcase 0x01: {\n\t\t\t\t\tC = wk1_parse_rc(o[0].c, blob.read_shift(2), true);\n\t\t\t\t\tR = wk1_parse_rc(o[0].r, blob.read_shift(2), false);\n\t\t\t\t\tout.push(C + R);\n\t\t\t\t} break;\n\t\t\t\tcase 0x02: {\n\t\t\t\t\tvar c = wk1_parse_rc(o[0].c, blob.read_shift(2), true);\n\t\t\t\t\tvar r = wk1_parse_rc(o[0].r, blob.read_shift(2), false);\n\t\t\t\t\tC = wk1_parse_rc(o[0].c, blob.read_shift(2), true);\n\t\t\t\t\tR = wk1_parse_rc(o[0].r, blob.read_shift(2), false);\n\t\t\t\t\tout.push(c + r + \":\" + C + R);\n\t\t\t\t} break;\n\t\t\t\tcase 0x03:\n\t\t\t\t\tif(blob.l < blob.length) { console.error(\"WK1 premature formula end\"); return; }\n\t\t\t\t\tbreak;\n\t\t\t\tcase 0x04: out.push(\"(\" + out.pop() + \")\"); break;\n\t\t\t\tcase 0x05: out.push(blob.read_shift(2)); break;\n\t\t\t\tcase 0x06: {\n\t\t\t\t\t/* TODO: text encoding */\n\t\t\t\t\tvar Z = \"\"; while((cc = blob[blob.l++])) Z += String.fromCharCode(cc);\n\t\t\t\t\tout.push('\"' + Z.replace(/\"/g, '\"\"') + '\"'); break;\n\t\t\t\t} break;\n\n\t\t\t\tcase 0x08: out.push(\"-\" + out.pop()); break;\n\t\t\t\tcase 0x17: out.push(\"+\" + out.pop()); break;\n\t\t\t\tcase 0x16: out.push(\"NOT(\" + out.pop() + \")\"); break;\n\n\t\t\t\tcase 0x14: case 0x15: {\n\t\t\t\t\tvar argR = out.pop(), argL = out.pop();\n\t\t\t\t\tout.push([\"AND\", \"OR\"][cc - 0x14] + \"(\" + argL + \",\" + argR + \")\");\n\t\t\t\t} break;\n\n\t\t\t\tdefault:\n\t\t\t\t\tif(cc < 0x20 && BinOpTab[cc]) {\n\t\t\t\t\t\targR = out.pop(); argL = out.pop();\n\t\t\t\t\t\tout.push(argL + BinOpTab[cc] + argR);\n\t\t\t\t\t} else if(FuncTab[cc]) {\n\t\t\t\t\t\targc = FuncTab[cc][1];\n\t\t\t\t\t\tif(argc == 69) argc = blob[blob.l++];\n\t\t\t\t\t\tif(argc > out.length) { console.error(\"WK1 bad formula parse 0x\" + cc.toString(16) + \":|\" + out.join(\"|\") + \"|\"); return; }\n\t\t\t\t\t\tvar args = out.slice(-argc);\n\t\t\t\t\t\tout.length -= argc;\n\t\t\t\t\t\tout.push(FuncTab[cc][0] + \"(\" + args.join(\",\") + \")\");\n\t\t\t\t\t}\n\t\t\t\t\telse if(cc <= 0x07) return console.error(\"WK1 invalid opcode \" + cc.toString(16));\n\t\t\t\t\telse if(cc <= 0x18) return console.error(\"WK1 unsupported op \" + cc.toString(16));\n\t\t\t\t\telse if(cc <= 0x1E) return console.error(\"WK1 invalid opcode \" + cc.toString(16));\n\t\t\t\t\telse if(cc <= 0x73) return console.error(\"WK1 unsupported function opcode \" + cc.toString(16));\n\t\t\t\t\t// possible future functions ??\n\t\t\t\t\telse return console.error(\"WK1 unrecognized opcode \" + cc.toString(16));\n\t\t\t}\n\t\t}\n\t\tif(out.length == 1) o[1].f = \"\" + out[0];\n\t\telse console.error(\"WK1 bad formula parse |\" + out.join(\"|\") + \"|\");\n\t}\n\n\n\tfunction parse_cell_3(blob) {\n\t\tvar o = [{c:0,r:0}, {t:'n',v:0}, 0];\n\t\to[0].r = blob.read_shift(2); o[3] = blob[blob.l++]; o[0].c = blob[blob.l++];\n\t\treturn o;\n\t}\n\n\tfunction parse_LABEL_16(blob, length) {\n\t\tvar o = parse_cell_3(blob, length);\n\t\to[1].t = 's';\n\t\to[1].v = blob.read_shift(length - 4, 'cstr');\n\t\treturn o;\n\t}\n\tfunction write_LABEL_16(R, C, wsidx, s) {\n\t\t/* TODO: encoding */\n\t\tvar o = new_buf(6 + s.length);\n\t\to.write_shift(2, R);\n\t\to.write_shift(1, wsidx);\n\t\to.write_shift(1, C);\n\t\to.write_shift(1, 0x27);\n\t\tfor(var i = 0; i < s.length; ++i) {\n\t\t\tvar cc = s.charCodeAt(i);\n\t\t\to.write_shift(1, cc >= 0x80 ? 0x5F : cc);\n\t\t}\n\t\to.write_shift(1, 0);\n\t\treturn o;\n\t}\n\n\tfunction parse_NUMBER_18(blob, length) {\n\t\tvar o = parse_cell_3(blob, length);\n\t\to[1].v = blob.read_shift(2);\n\t\tvar v = o[1].v >> 1;\n\t\tif(o[1].v & 0x1) {\n\t\t\tswitch(v & 0x07) {\n\t\t\t\tcase 0: v = (v >> 3) * 5000; break;\n\t\t\t\tcase 1: v = (v >> 3) * 500; break;\n\t\t\t\tcase 2: v = (v >> 3) / 20; break;\n\t\t\t\tcase 3: v = (v >> 3) / 200; break;\n\t\t\t\tcase 4: v = (v >> 3) / 2000; break;\n\t\t\t\tcase 5: v = (v >> 3) / 20000; break;\n\t\t\t\tcase 6: v = (v >> 3) / 16; break;\n\t\t\t\tcase 7: v = (v >> 3) / 64; break;\n\t\t\t}\n\t\t}\n\t\to[1].v = v;\n\t\treturn o;\n\t}\n\n\tfunction parse_NUMBER_17(blob, length) {\n\t\tvar o = parse_cell_3(blob, length);\n\t\tvar v1 = blob.read_shift(4);\n\t\tvar v2 = blob.read_shift(4);\n\t\tvar e = blob.read_shift(2);\n\t\tif(e == 0xFFFF) {\n\t\t\tif(v1 === 0 && v2 === 0xC0000000) { o[1].t = \"e\"; o[1].v = 0x0F; } // ERR -> #VALUE!\n\t\t\telse if(v1 === 0 && v2 === 0xD0000000) { o[1].t = \"e\"; o[1].v = 0x2A; } // NA -> #N/A\n\t\t\telse o[1].v = 0;\n\t\t\treturn o;\n\t\t}\n\t\tvar s = e & 0x8000; e = (e&0x7FFF) - 16446;\n\t\to[1].v = (1 - s*2) * (v2 * Math.pow(2, e+32) + v1 * Math.pow(2, e));\n\t\treturn o;\n\t}\n\tfunction write_NUMBER_17(R, C, wsidx, v) {\n\t\tvar o = new_buf(14);\n\t\to.write_shift(2, R);\n\t\to.write_shift(1, wsidx);\n\t\to.write_shift(1, C);\n\t\tif(v == 0) {\n\t\t\to.write_shift(4, 0);\n\t\t\to.write_shift(4, 0);\n\t\t\to.write_shift(2, 0xFFFF);\n\t\t\treturn o;\n\t\t}\n\t\tvar s = 0, e = 0, v1 = 0, v2 = 0;\n\t\tif(v < 0) { s = 1; v = -v; }\n\t\te = Math.log2(v) | 0;\n\t\tv /= Math.pow(2, e-31);\n\t\tv2 = (v)>>>0;\n\t\tif((v2&0x80000000) == 0) { v/=2; ++e; v2 = v >>> 0; }\n\t\tv -= v2;\n\t\tv2 |= 0x80000000;\n\t\tv2 >>>= 0;\n\t\tv *= Math.pow(2, 32);\n\t\tv1 = v>>>0;\n\t\to.write_shift(4, v1);\n\t\to.write_shift(4, v2);\n\t\te += 0x3FFF + (s ? 0x8000 : 0);\n\t\to.write_shift(2, e);\n\t\treturn o;\n\t}\n\n\tfunction parse_FORMULA_19(blob, length) {\n\t\tvar o = parse_NUMBER_17(blob, 14);\n\t\tblob.l += length - 14; /* TODO: WK3 formula */\n\t\treturn o;\n\t}\n\n\tfunction parse_NUMBER_25(blob, length) {\n\t\tvar o = parse_cell_3(blob, length);\n\t\tvar v1 = blob.read_shift(4);\n\t\to[1].v = v1 >> 6;\n\t\treturn o;\n\t}\n\n\tfunction parse_NUMBER_27(blob, length) {\n\t\tvar o = parse_cell_3(blob, length);\n\t\tvar v1 = blob.read_shift(8,'f');\n\t\to[1].v = v1;\n\t\treturn o;\n\t}\n\n\tfunction parse_FORMULA_28(blob, length) {\n\t\tvar o = parse_NUMBER_27(blob, 14);\n\t\tblob.l += length - 10; /* TODO: formula */\n\t\treturn o;\n\t}\n\n\tfunction parse_XFORMAT(blob, length) {\n\t\tvar o = {}, tgt = blob.l + length;\n\t\twhile(blob.l < tgt) {\n\t\t\tvar dt = blob.read_shift(2);\n\t\t\tif(dt == 0x36b0) {\n\t\t\t\to[dt] = [0, \"\"];\n\t\t\t\to[dt][0] = blob.read_shift(2);\n\t\t\t\twhile(blob[blob.l]) { o[dt][1] += String.fromCharCode(blob[blob.l]); blob.l++; } blob.l++;\n\t\t\t}\n\t\t\t// TODO: 0x3a99 ??\n\t\t}\n\t\treturn o;\n\t}\n\tfunction write_XFORMAT_SHEETNAME(name, wsidx) {\n\t\tvar out = new_buf(5 + name.length);\n\t\tout.write_shift(2, 0x36b0);\n\t\tout.write_shift(2, wsidx);\n\t\tfor(var i = 0; i < name.length; ++i) {\n\t\t\tvar cc = name.charCodeAt(i);\n\t\t\tout[out.l++] = cc > 0x7F ? 0x5F : cc;\n\t\t}\n\t\tout[out.l++] = 0;\n\t\treturn out;\n\t}\n\n\tvar WK1Enum = {\n0x0000: { n:\"BOF\", f:parseuint16 },\n0x0001: { n:\"EOF\" },\n0x0002: { n:\"CALCMODE\" },\n0x0003: { n:\"CALCORDER\" },\n0x0004: { n:\"SPLIT\" },\n0x0005: { n:\"SYNC\" },\n0x0006: { n:\"RANGE\", f:parse_RANGE },\n0x0007: { n:\"WINDOW1\" },\n0x0008: { n:\"COLW1\" },\n0x0009: { n:\"WINTWO\" },\n0x000A: { n:\"COLW2\" },\n0x000B: { n:\"NAME\" },\n0x000C: { n:\"BLANK\" },\n0x000D: { n:\"INTEGER\", f:parse_INTEGER },\n0x000E: { n:\"NUMBER\", f:parse_NUMBER },\n0x000F: { n:\"LABEL\", f:parse_LABEL },\n0x0010: { n:\"FORMULA\", f:parse_FORMULA },\n0x0018: { n:\"TABLE\" },\n0x0019: { n:\"ORANGE\" },\n0x001A: { n:\"PRANGE\" },\n0x001B: { n:\"SRANGE\" },\n0x001C: { n:\"FRANGE\" },\n0x001D: { n:\"KRANGE1\" },\n0x0020: { n:\"HRANGE\" },\n0x0023: { n:\"KRANGE2\" },\n0x0024: { n:\"PROTEC\" },\n0x0025: { n:\"FOOTER\" },\n0x0026: { n:\"HEADER\" },\n0x0027: { n:\"SETUP\" },\n0x0028: { n:\"MARGINS\" },\n0x0029: { n:\"LABELFMT\" },\n0x002A: { n:\"TITLES\" },\n0x002B: { n:\"SHEETJS\" },\n0x002D: { n:\"GRAPH\" },\n0x002E: { n:\"NGRAPH\" },\n0x002F: { n:\"CALCCOUNT\" },\n0x0030: { n:\"UNFORMATTED\" },\n0x0031: { n:\"CURSORW12\" },\n0x0032: { n:\"WINDOW\" },\n0x0033: { n:\"STRING\", f:parse_LABEL },\n0x0037: { n:\"PASSWORD\" },\n0x0038: { n:\"LOCKED\" },\n0x003C: { n:\"QUERY\" },\n0x003D: { n:\"QUERYNAME\" },\n0x003E: { n:\"PRINT\" },\n0x003F: { n:\"PRINTNAME\" },\n0x0040: { n:\"GRAPH2\" },\n0x0041: { n:\"GRAPHNAME\" },\n0x0042: { n:\"ZOOM\" },\n0x0043: { n:\"SYMSPLIT\" },\n0x0044: { n:\"NSROWS\" },\n0x0045: { n:\"NSCOLS\" },\n0x0046: { n:\"RULER\" },\n0x0047: { n:\"NNAME\" },\n0x0048: { n:\"ACOMM\" },\n0x0049: { n:\"AMACRO\" },\n0x004A: { n:\"PARSE\" },\n0x0066: { n:\"PRANGES??\" },\n0x0067: { n:\"RRANGES??\" },\n0x0068: { n:\"FNAME??\" },\n0x0069: { n:\"MRANGES??\" },\n0xFFFF: { n:\"\" }\n\t};\n\n\tvar WK3Enum = {\n0x0000: { n:\"BOF\" },\n0x0001: { n:\"EOF\" },\n0x0002: { n:\"PASSWORD\" },\n0x0003: { n:\"CALCSET\" },\n0x0004: { n:\"WINDOWSET\" },\n0x0005: { n:\"SHEETCELLPTR\" },\n0x0006: { n:\"SHEETLAYOUT\" },\n0x0007: { n:\"COLUMNWIDTH\" },\n0x0008: { n:\"HIDDENCOLUMN\" },\n0x0009: { n:\"USERRANGE\" },\n0x000A: { n:\"SYSTEMRANGE\" },\n0x000B: { n:\"ZEROFORCE\" },\n0x000C: { n:\"SORTKEYDIR\" },\n0x000D: { n:\"FILESEAL\" },\n0x000E: { n:\"DATAFILLNUMS\" },\n0x000F: { n:\"PRINTMAIN\" },\n0x0010: { n:\"PRINTSTRING\" },\n0x0011: { n:\"GRAPHMAIN\" },\n0x0012: { n:\"GRAPHSTRING\" },\n0x0013: { n:\"??\" },\n0x0014: { n:\"ERRCELL\" },\n0x0015: { n:\"NACELL\" },\n0x0016: { n:\"LABEL16\", f:parse_LABEL_16},\n0x0017: { n:\"NUMBER17\", f:parse_NUMBER_17 },\n0x0018: { n:\"NUMBER18\", f:parse_NUMBER_18 },\n0x0019: { n:\"FORMULA19\", f:parse_FORMULA_19},\n0x001A: { n:\"FORMULA1A\" },\n0x001B: { n:\"XFORMAT\", f:parse_XFORMAT },\n0x001C: { n:\"DTLABELMISC\" },\n0x001D: { n:\"DTLABELCELL\" },\n0x001E: { n:\"GRAPHWINDOW\" },\n0x001F: { n:\"CPA\" },\n0x0020: { n:\"LPLAUTO\" },\n0x0021: { n:\"QUERY\" },\n0x0022: { n:\"HIDDENSHEET\" },\n0x0023: { n:\"??\" },\n0x0025: { n:\"NUMBER25\", f:parse_NUMBER_25 },\n0x0026: { n:\"??\" },\n0x0027: { n:\"NUMBER27\", f:parse_NUMBER_27 },\n0x0028: { n:\"FORMULA28\", f:parse_FORMULA_28 },\n0x008E: { n:\"??\" },\n0x0093: { n:\"??\" },\n0x0096: { n:\"??\" },\n0x0097: { n:\"??\" },\n0x0098: { n:\"??\" },\n0x0099: { n:\"??\" },\n0x009A: { n:\"??\" },\n0x009B: { n:\"??\" },\n0x009C: { n:\"??\" },\n0x00A3: { n:\"??\" },\n0x00AE: { n:\"??\" },\n0x00AF: { n:\"??\" },\n0x00B0: { n:\"??\" },\n0x00B1: { n:\"??\" },\n0x00B8: { n:\"??\" },\n0x00B9: { n:\"??\" },\n0x00BA: { n:\"??\" },\n0x00BB: { n:\"??\" },\n0x00BC: { n:\"??\" },\n0x00C3: { n:\"??\" },\n0x00C9: { n:\"??\" },\n0x00CD: { n:\"??\" },\n0x00CE: { n:\"??\" },\n0x00CF: { n:\"??\" },\n0x00D0: { n:\"??\" },\n0x0100: { n:\"??\" },\n0x0103: { n:\"??\" },\n0x0104: { n:\"??\" },\n0x0105: { n:\"??\" },\n0x0106: { n:\"??\" },\n0x0107: { n:\"??\" },\n0x0109: { n:\"??\" },\n0x010A: { n:\"??\" },\n0x010B: { n:\"??\" },\n0x010C: { n:\"??\" },\n0x010E: { n:\"??\" },\n0x010F: { n:\"??\" },\n0x0180: { n:\"??\" },\n0x0185: { n:\"??\" },\n0x0186: { n:\"??\" },\n0x0189: { n:\"??\" },\n0x018C: { n:\"??\" },\n0x0200: { n:\"??\" },\n0x0202: { n:\"??\" },\n0x0201: { n:\"??\" },\n0x0204: { n:\"??\" },\n0x0205: { n:\"??\" },\n0x0280: { n:\"??\" },\n0x0281: { n:\"??\" },\n0x0282: { n:\"??\" },\n0x0283: { n:\"??\" },\n0x0284: { n:\"??\" },\n0x0285: { n:\"??\" },\n0x0286: { n:\"??\" },\n0x0287: { n:\"??\" },\n0x0288: { n:\"??\" },\n0x0292: { n:\"??\" },\n0x0293: { n:\"??\" },\n0x0294: { n:\"??\" },\n0x0295: { n:\"??\" },\n0x0296: { n:\"??\" },\n0x0299: { n:\"??\" },\n0x029A: { n:\"??\" },\n0x0300: { n:\"??\" },\n0x0304: { n:\"??\" },\n0x0640: { n:\"??\" },\n0x0642: { n:\"??\" },\n0x0701: { n:\"??\" },\n0x0702: { n:\"??\" },\n0x0703: { n:\"??\" },\n0x0704: { n:\"??\" },\n0x0780: { n:\"??\" },\n0x0800: { n:\"??\" },\n0x0801: { n:\"??\" },\n0x0804: { n:\"??\" },\n0x0A80: { n:\"??\" },\n0x2AF6: { n:\"??\" },\n0x3231: { n:\"??\" },\n0x6E49: { n:\"??\" },\n0x6F44: { n:\"??\" },\n0xFFFF: { n:\"\" }\n\t};\n\treturn {\n\t\tsheet_to_wk1: sheet_to_wk1,\n\t\tbook_to_wk3: book_to_wk3,\n\t\tto_workbook: lotus_to_workbook\n\t};\n})();\n/* 18.4.7 rPr CT_RPrElt */\nfunction parse_rpr(rpr) {\n\tvar font = {}, m = rpr.match(tagregex), i = 0;\n\tvar pass = false;\n\tif(m) for(;i!=m.length; ++i) {\n\t\tvar y = parsexmltag(m[i]);\n\t\tswitch(y[0].replace(/\\w*:/g,\"\")) {\n\t\t\t/* 18.8.12 condense CT_BooleanProperty */\n\t\t\t/* ** not required . */\n\t\t\tcase '<condense': break;\n\t\t\t/* 18.8.17 extend CT_BooleanProperty */\n\t\t\t/* ** not required . */\n\t\t\tcase '<extend': break;\n\t\t\t/* 18.8.36 shadow CT_BooleanProperty */\n\t\t\t/* ** not required . */\n\t\t\tcase '<shadow':\n\t\t\t\tif(!y.val) break;\n\t\t\t\t/* falls through */\n\t\t\tcase '<shadow>':\n\t\t\tcase '<shadow/>': font.shadow = 1; break;\n\t\t\tcase '</shadow>': break;\n\n\t\t\t/* 18.4.1 charset CT_IntProperty TODO */\n\t\t\tcase '<charset':\n\t\t\t\tif(y.val == '1') break;\n\t\t\t\tfont.cp = CS2CP[parseInt(y.val, 10)];\n\t\t\t\tbreak;\n\n\t\t\t/* 18.4.2 outline CT_BooleanProperty TODO */\n\t\t\tcase '<outline':\n\t\t\t\tif(!y.val) break;\n\t\t\t\t/* falls through */\n\t\t\tcase '<outline>':\n\t\t\tcase '<outline/>': font.outline = 1; break;\n\t\t\tcase '</outline>': break;\n\n\t\t\t/* 18.4.5 rFont CT_FontName */\n\t\t\tcase '<rFont': font.name = y.val; break;\n\n\t\t\t/* 18.4.11 sz CT_FontSize */\n\t\t\tcase '<sz': font.sz = y.val; break;\n\n\t\t\t/* 18.4.10 strike CT_BooleanProperty */\n\t\t\tcase '<strike':\n\t\t\t\tif(!y.val) break;\n\t\t\t\t/* falls through */\n\t\t\tcase '<strike>':\n\t\t\tcase '<strike/>': font.strike = 1; break;\n\t\t\tcase '</strike>': break;\n\n\t\t\t/* 18.4.13 u CT_UnderlineProperty */\n\t\t\tcase '<u':\n\t\t\t\tif(!y.val) break;\n\t\t\t\tswitch(y.val) {\n\t\t\t\t\tcase 'double': font.uval = \"double\"; break;\n\t\t\t\t\tcase 'singleAccounting': font.uval = \"single-accounting\"; break;\n\t\t\t\t\tcase 'doubleAccounting': font.uval = \"double-accounting\"; break;\n\t\t\t\t}\n\t\t\t\t/* falls through */\n\t\t\tcase '<u>':\n\t\t\tcase '<u/>': font.u = 1; break;\n\t\t\tcase '</u>': break;\n\n\t\t\t/* 18.8.2 b */\n\t\t\tcase '<b':\n\t\t\t\tif(y.val == '0') break;\n\t\t\t\t/* falls through */\n\t\t\tcase '<b>':\n\t\t\tcase '<b/>': font.b = 1; break;\n\t\t\tcase '</b>': break;\n\n\t\t\t/* 18.8.26 i */\n\t\t\tcase '<i':\n\t\t\t\tif(y.val == '0') break;\n\t\t\t\t/* falls through */\n\t\t\tcase '<i>':\n\t\t\tcase '<i/>': font.i = 1; break;\n\t\t\tcase '</i>': break;\n\n\t\t\t/* 18.3.1.15 color CT_Color TODO: tint, theme, auto, indexed */\n\t\t\tcase '<color':\n\t\t\t\tif(y.rgb) font.color = y.rgb.slice(2,8);\n\t\t\t\tbreak;\n\n\t\t\t/* 18.8.18 family ST_FontFamily */\n\t\t\tcase '<family': font.family = y.val; break;\n\n\t\t\t/* 18.4.14 vertAlign CT_VerticalAlignFontProperty TODO */\n\t\t\tcase '<vertAlign': font.valign = y.val; break;\n\n\t\t\t/* 18.8.35 scheme CT_FontScheme TODO */\n\t\t\tcase '<scheme': break;\n\n\t\t\t/* 18.2.10 extLst CT_ExtensionList ? */\n\t\t\tcase '<extLst': case '<extLst>': case '</extLst>': break;\n\t\t\tcase '<ext': pass = true; break;\n\t\t\tcase '</ext>': pass = false; break;\n\t\t\tdefault:\n\t\t\t\tif(y[0].charCodeAt(1) !== 47 && !pass) throw new Error('Unrecognized rich format ' + y[0]);\n\t\t}\n\t}\n\treturn font;\n}\n\nvar parse_rs = (function() {\n\tvar tregex = matchtag(\"t\"), rpregex = matchtag(\"rPr\");\n\t/* 18.4.4 r CT_RElt */\n\tfunction parse_r(r) {\n\t\t/* 18.4.12 t ST_Xstring */\n\t\tvar t = r.match(tregex)/*, cp = 65001*/;\n\t\tif(!t) return {t:\"s\", v:\"\"};\n\n\t\tvar o = ({t:'s', v:unescapexml(t[1])});\n\t\tvar rpr = r.match(rpregex);\n\t\tif(rpr) o.s = parse_rpr(rpr[1]);\n\t\treturn o;\n\t}\n\tvar rregex = /<(?:\\w+:)?r>/g, rend = /<\\/(?:\\w+:)?r>/;\n\treturn function parse_rs(rs) {\n\t\treturn rs.replace(rregex,\"\").split(rend).map(parse_r).filter(function(r) { return r.v; });\n\t};\n})();\n\n\n/* Parse a list of <r> tags */\nvar rs_to_html = (function parse_rs_factory() {\n\tvar nlregex = /(\\r\\n|\\n)/g;\n\tfunction parse_rpr2(font, intro, outro) {\n\t\tvar style = [];\n\n\t\tif(font.u) style.push(\"text-decoration: underline;\");\n\t\tif(font.uval) style.push(\"text-underline-style:\" + font.uval + \";\");\n\t\tif(font.sz) style.push(\"font-size:\" + font.sz + \"pt;\");\n\t\tif(font.outline) style.push(\"text-effect: outline;\");\n\t\tif(font.shadow) style.push(\"text-shadow: auto;\");\n\t\tintro.push('<span style=\"' + style.join(\"\") + '\">');\n\n\t\tif(font.b) { intro.push(\"<b>\"); outro.push(\"</b>\"); }\n\t\tif(font.i) { intro.push(\"<i>\"); outro.push(\"</i>\"); }\n\t\tif(font.strike) { intro.push(\"<s>\"); outro.push(\"</s>\"); }\n\n\t\tvar align = font.valign || \"\";\n\t\tif(align == \"superscript\" || align == \"super\") align = \"sup\";\n\t\telse if(align == \"subscript\") align = \"sub\";\n\t\tif(align != \"\") { intro.push(\"<\" + align + \">\"); outro.push(\"</\" + align + \">\"); }\n\n\t\toutro.push(\"</span>\");\n\t\treturn font;\n\t}\n\n\t/* 18.4.4 r CT_RElt */\n\tfunction r_to_html(r) {\n\t\tvar terms = [[],r.v,[]];\n\t\tif(!r.v) return \"\";\n\n\t\tif(r.s) parse_rpr2(r.s, terms[0], terms[2]);\n\n\t\treturn terms[0].join(\"\") + terms[1].replace(nlregex,'<br/>') + terms[2].join(\"\");\n\t}\n\n\treturn function parse_rs(rs) {\n\t\treturn rs.map(r_to_html).join(\"\");\n\t};\n})();\n\n/* 18.4.8 si CT_Rst */\nvar sitregex = /<(?:\\w+:)?t[^>]*>([^<]*)<\\/(?:\\w+:)?t>/g, sirregex = /<(?:\\w+:)?r>/;\nvar sirphregex = /<(?:\\w+:)?rPh.*?>([\\s\\S]*?)<\\/(?:\\w+:)?rPh>/g;\nfunction parse_si(x, opts) {\n\tvar html = opts ? opts.cellHTML : true;\n\tvar z = {};\n\tif(!x) return { t: \"\" };\n\t//var y;\n\t/* 18.4.12 t ST_Xstring (Plaintext String) */\n\t// TODO: is whitespace actually valid here?\n\tif(x.match(/^\\s*<(?:\\w+:)?t[^>]*>/)) {\n\t\tz.t = unescapexml(utf8read(x.slice(x.indexOf(\">\")+1).split(/<\\/(?:\\w+:)?t>/)[0]||\"\"));\n\t\tz.r = utf8read(x);\n\t\tif(html) z.h = escapehtml(z.t);\n\t}\n\t/* 18.4.4 r CT_RElt (Rich Text Run) */\n\telse if((/*y = */x.match(sirregex))) {\n\t\tz.r = utf8read(x);\n\t\tz.t = unescapexml(utf8read((x.replace(sirphregex, '').match(sitregex)||[]).join(\"\").replace(tagregex,\"\")));\n\t\tif(html) z.h = rs_to_html(parse_rs(z.r));\n\t}\n\t/* 18.4.3 phoneticPr CT_PhoneticPr (TODO: needed for Asian support) */\n\t/* 18.4.6 rPh CT_PhoneticRun (TODO: needed for Asian support) */\n\treturn z;\n}\n\n/* 18.4 Shared String Table */\nvar sstr0 = /<(?:\\w+:)?sst([^>]*)>([\\s\\S]*)<\\/(?:\\w+:)?sst>/;\nvar sstr1 = /<(?:\\w+:)?(?:si|sstItem)>/g;\nvar sstr2 = /<\\/(?:\\w+:)?(?:si|sstItem)>/;\nfunction parse_sst_xml(data, opts) {\n\tvar s = ([]), ss = \"\";\n\tif(!data) return s;\n\t/* 18.4.9 sst CT_Sst */\n\tvar sst = data.match(sstr0);\n\tif(sst) {\n\t\tss = sst[2].replace(sstr1,\"\").split(sstr2);\n\t\tfor(var i = 0; i != ss.length; ++i) {\n\t\t\tvar o = parse_si(ss[i].trim(), opts);\n\t\t\tif(o != null) s[s.length] = o;\n\t\t}\n\t\tsst = parsexmltag(sst[1]); s.Count = sst.count; s.Unique = sst.uniqueCount;\n\t}\n\treturn s;\n}\n\nRELS.SST = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\";\nvar straywsregex = /^\\s|\\s$|[\\t\\n\\r]/;\nfunction write_sst_xml(sst, opts) {\n\tif(!opts.bookSST) return \"\";\n\tvar o = [XML_HEADER];\n\to[o.length] = (writextag('sst', null, {\n\t\txmlns: XMLNS.main[0],\n\t\tcount: sst.Count,\n\t\tuniqueCount: sst.Unique\n\t}));\n\tfor(var i = 0; i != sst.length; ++i) { if(sst[i] == null) continue;\n\t\tvar s = sst[i];\n\t\tvar sitag = \"<si>\";\n\t\tif(s.r) sitag += s.r;\n\t\telse {\n\t\t\tsitag += \"<t\";\n\t\t\tif(!s.t) s.t = \"\";\n\t\t\tif(s.t.match(straywsregex)) sitag += ' xml:space=\"preserve\"';\n\t\t\tsitag += \">\" + escapexml(s.t) + \"</t>\";\n\t\t}\n\t\tsitag += \"</si>\";\n\t\to[o.length] = (sitag);\n\t}\n\tif(o.length>2){ o[o.length] = ('</sst>'); o[1]=o[1].replace(\"/>\",\">\"); }\n\treturn o.join(\"\");\n}\n/* [MS-XLSB] 2.4.221 BrtBeginSst */\nfunction parse_BrtBeginSst(data) {\n\treturn [data.read_shift(4), data.read_shift(4)];\n}\n\n/* [MS-XLSB] 2.1.7.45 Shared Strings */\nfunction parse_sst_bin(data, opts) {\n\tvar s = ([]);\n\tvar pass = false;\n\trecordhopper(data, function hopper_sst(val, R_n, RT) {\n\t\tswitch(RT) {\n\t\t\tcase 0x009F: /* 'BrtBeginSst' */\n\t\t\t\ts.Count = val[0]; s.Unique = val[1]; break;\n\t\t\tcase 0x0013: /* 'BrtSSTItem' */\n\t\t\t\ts.push(val); break;\n\t\t\tcase 0x00A0: /* 'BrtEndSst' */\n\t\t\t\treturn true;\n\n\t\t\tcase 0x0023: /* 'BrtFRTBegin' */\n\t\t\t\tpass = true; break;\n\t\t\tcase 0x0024: /* 'BrtFRTEnd' */\n\t\t\t\tpass = false; break;\n\n\t\t\tdefault:\n\t\t\t\tif(R_n.indexOf(\"Begin\") > 0){/* empty */}\n\t\t\t\telse if(R_n.indexOf(\"End\") > 0){/* empty */}\n\t\t\t\tif(!pass || opts.WTF) throw new Error(\"Unexpected record \" + RT + \" \" + R_n);\n\t\t}\n\t});\n\treturn s;\n}\n\nfunction write_BrtBeginSst(sst, o) {\n\tif(!o) o = new_buf(8);\n\to.write_shift(4, sst.Count);\n\to.write_shift(4, sst.Unique);\n\treturn o;\n}\n\nvar write_BrtSSTItem = write_RichStr;\n\nfunction write_sst_bin(sst) {\n\tvar ba = buf_array();\n\twrite_record(ba, \"BrtBeginSst\", write_BrtBeginSst(sst));\n\tfor(var i = 0; i < sst.length; ++i) write_record(ba, \"BrtSSTItem\", write_BrtSSTItem(sst[i]));\n\t/* FRTSST */\n\twrite_record(ba, \"BrtEndSst\");\n\treturn ba.end();\n}\nfunction _JS2ANSI(str) {\n\tif(typeof cptable !== 'undefined') return cptable.utils.encode(current_ansi, str);\n\tvar o = [], oo = str.split(\"\");\n\tfor(var i = 0; i < oo.length; ++i) o[i] = oo[i].charCodeAt(0);\n\treturn o;\n}\n\n/* [MS-OFFCRYPTO] 2.1.4 Version */\nfunction parse_CRYPTOVersion(blob, length) {\n\tvar o = {};\n\to.Major = blob.read_shift(2);\n\to.Minor = blob.read_shift(2);\nif(length >= 4) blob.l += length - 4;\n\treturn o;\n}\n\n/* [MS-OFFCRYPTO] 2.1.5 DataSpaceVersionInfo */\nfunction parse_DataSpaceVersionInfo(blob) {\n\tvar o = {};\n\to.id = blob.read_shift(0, 'lpp4');\n\to.R = parse_CRYPTOVersion(blob, 4);\n\to.U = parse_CRYPTOVersion(blob, 4);\n\to.W = parse_CRYPTOVersion(blob, 4);\n\treturn o;\n}\n\n/* [MS-OFFCRYPTO] 2.1.6.1 DataSpaceMapEntry Structure */\nfunction parse_DataSpaceMapEntry(blob) {\n\tvar len = blob.read_shift(4);\n\tvar end = blob.l + len - 4;\n\tvar o = {};\n\tvar cnt = blob.read_shift(4);\n\tvar comps = [];\n\t/* [MS-OFFCRYPTO] 2.1.6.2 DataSpaceReferenceComponent Structure */\n\twhile(cnt-- > 0) comps.push({ t: blob.read_shift(4), v: blob.read_shift(0, 'lpp4') });\n\to.name = blob.read_shift(0, 'lpp4');\n\to.comps = comps;\n\tif(blob.l != end) throw new Error(\"Bad DataSpaceMapEntry: \" + blob.l + \" != \" + end);\n\treturn o;\n}\n\n/* [MS-OFFCRYPTO] 2.1.6 DataSpaceMap */\nfunction parse_DataSpaceMap(blob) {\n\tvar o = [];\n\tblob.l += 4; // must be 0x8\n\tvar cnt = blob.read_shift(4);\n\twhile(cnt-- > 0) o.push(parse_DataSpaceMapEntry(blob));\n\treturn o;\n}\n\n/* [MS-OFFCRYPTO] 2.1.7 DataSpaceDefinition */\nfunction parse_DataSpaceDefinition(blob) {\n\tvar o = [];\n\tblob.l += 4; // must be 0x8\n\tvar cnt = blob.read_shift(4);\n\twhile(cnt-- > 0) o.push(blob.read_shift(0, 'lpp4'));\n\treturn o;\n}\n\n/* [MS-OFFCRYPTO] 2.1.8 DataSpaceDefinition */\nfunction parse_TransformInfoHeader(blob) {\n\tvar o = {};\n\t/*var len = */blob.read_shift(4);\n\tblob.l += 4; // must be 0x1\n\to.id = blob.read_shift(0, 'lpp4');\n\to.name = blob.read_shift(0, 'lpp4');\n\to.R = parse_CRYPTOVersion(blob, 4);\n\to.U = parse_CRYPTOVersion(blob, 4);\n\to.W = parse_CRYPTOVersion(blob, 4);\n\treturn o;\n}\n\nfunction parse_Primary(blob) {\n\t/* [MS-OFFCRYPTO] 2.2.6 IRMDSTransformInfo */\n\tvar hdr = parse_TransformInfoHeader(blob);\n\t/* [MS-OFFCRYPTO] 2.1.9 EncryptionTransformInfo */\n\thdr.ename = blob.read_shift(0, '8lpp4');\n\thdr.blksz = blob.read_shift(4);\n\thdr.cmode = blob.read_shift(4);\n\tif(blob.read_shift(4) != 0x04) throw new Error(\"Bad !Primary record\");\n\treturn hdr;\n}\n\n/* [MS-OFFCRYPTO] 2.3.2 Encryption Header */\nfunction parse_EncryptionHeader(blob, length) {\n\tvar tgt = blob.l + length;\n\tvar o = {};\n\to.Flags = (blob.read_shift(4) & 0x3F);\n\tblob.l += 4;\n\to.AlgID = blob.read_shift(4);\n\tvar valid = false;\n\tswitch(o.AlgID) {\n\t\tcase 0x660E: case 0x660F: case 0x6610: valid = (o.Flags == 0x24); break;\n\t\tcase 0x6801: valid = (o.Flags == 0x04); break;\n\t\tcase 0: valid = (o.Flags == 0x10 || o.Flags == 0x04 || o.Flags == 0x24); break;\n\t\tdefault: throw 'Unrecognized encryption algorithm: ' + o.AlgID;\n\t}\n\tif(!valid) throw new Error(\"Encryption Flags/AlgID mismatch\");\n\to.AlgIDHash = blob.read_shift(4);\n\to.KeySize = blob.read_shift(4);\n\to.ProviderType = blob.read_shift(4);\n\tblob.l += 8;\n\to.CSPName = blob.read_shift((tgt-blob.l)>>1, 'utf16le');\n\tblob.l = tgt;\n\treturn o;\n}\n\n/* [MS-OFFCRYPTO] 2.3.3 Encryption Verifier */\nfunction parse_EncryptionVerifier(blob, length) {\n\tvar o = {}, tgt = blob.l + length;\n\tblob.l += 4; // SaltSize must be 0x10\n\to.Salt = blob.slice(blob.l, blob.l+16); blob.l += 16;\n\to.Verifier = blob.slice(blob.l, blob.l+16); blob.l += 16;\n\t/*var sz = */blob.read_shift(4);\n\to.VerifierHash = blob.slice(blob.l, tgt); blob.l = tgt;\n\treturn o;\n}\n\n/* [MS-OFFCRYPTO] 2.3.4.* EncryptionInfo Stream */\nfunction parse_EncryptionInfo(blob) {\n\tvar vers = parse_CRYPTOVersion(blob);\n\tswitch(vers.Minor) {\n\t\tcase 0x02: return [vers.Minor, parse_EncInfoStd(blob, vers)];\n\t\tcase 0x03: return [vers.Minor, parse_EncInfoExt(blob, vers)];\n\t\tcase 0x04: return [vers.Minor, parse_EncInfoAgl(blob, vers)];\n\t}\n\tthrow new Error(\"ECMA-376 Encrypted file unrecognized Version: \" + vers.Minor);\n}\n\n/* [MS-OFFCRYPTO] 2.3.4.5  EncryptionInfo Stream (Standard Encryption) */\nfunction parse_EncInfoStd(blob) {\n\tvar flags = blob.read_shift(4);\n\tif((flags & 0x3F) != 0x24) throw new Error(\"EncryptionInfo mismatch\");\n\tvar sz = blob.read_shift(4);\n\t//var tgt = blob.l + sz;\n\tvar hdr = parse_EncryptionHeader(blob, sz);\n\tvar verifier = parse_EncryptionVerifier(blob, blob.length - blob.l);\n\treturn { t:\"Std\", h:hdr, v:verifier };\n}\n/* [MS-OFFCRYPTO] 2.3.4.6  EncryptionInfo Stream (Extensible Encryption) */\nfunction parse_EncInfoExt() { throw new Error(\"File is password-protected: ECMA-376 Extensible\"); }\n/* [MS-OFFCRYPTO] 2.3.4.10 EncryptionInfo Stream (Agile Encryption) */\nfunction parse_EncInfoAgl(blob) {\n\tvar KeyData = [\"saltSize\",\"blockSize\",\"keyBits\",\"hashSize\",\"cipherAlgorithm\",\"cipherChaining\",\"hashAlgorithm\",\"saltValue\"];\n\tblob.l+=4;\n\tvar xml = blob.read_shift(blob.length - blob.l, 'utf8');\n\tvar o = {};\n\txml.replace(tagregex, function xml_agile(x) {\n\t\tvar y = parsexmltag(x);\n\t\tswitch(strip_ns(y[0])) {\n\t\t\tcase '<?xml': break;\n\t\t\tcase '<encryption': case '</encryption>': break;\n\t\t\tcase '<keyData': KeyData.forEach(function(k) { o[k] = y[k]; }); break;\n\t\t\tcase '<dataIntegrity': o.encryptedHmacKey = y.encryptedHmacKey; o.encryptedHmacValue = y.encryptedHmacValue; break;\n\t\t\tcase '<keyEncryptors>': case '<keyEncryptors': o.encs = []; break;\n\t\t\tcase '</keyEncryptors>': break;\n\n\t\t\tcase '<keyEncryptor': o.uri = y.uri; break;\n\t\t\tcase '</keyEncryptor>': break;\n\t\t\tcase '<encryptedKey': o.encs.push(y); break;\n\t\t\tdefault: throw y[0];\n\t\t}\n\t});\n\treturn o;\n}\n\n/* [MS-OFFCRYPTO] 2.3.5.1 RC4 CryptoAPI Encryption Header */\nfunction parse_RC4CryptoHeader(blob, length) {\n\tvar o = {};\n\tvar vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4); length -= 4;\n\tif(vers.Minor != 2) throw new Error('unrecognized minor version code: ' + vers.Minor);\n\tif(vers.Major > 4 || vers.Major < 2) throw new Error('unrecognized major version code: ' + vers.Major);\n\to.Flags = blob.read_shift(4); length -= 4;\n\tvar sz = blob.read_shift(4); length -= 4;\n\to.EncryptionHeader = parse_EncryptionHeader(blob, sz); length -= sz;\n\to.EncryptionVerifier = parse_EncryptionVerifier(blob, length);\n\treturn o;\n}\n/* [MS-OFFCRYPTO] 2.3.6.1 RC4 Encryption Header */\nfunction parse_RC4Header(blob) {\n\tvar o = {};\n\tvar vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);\n\tif(vers.Major != 1 || vers.Minor != 1) throw 'unrecognized version code ' + vers.Major + ' : ' + vers.Minor;\n\to.Salt = blob.read_shift(16);\n\to.EncryptedVerifier = blob.read_shift(16);\n\to.EncryptedVerifierHash = blob.read_shift(16);\n\treturn o;\n}\n\n/* [MS-OFFCRYPTO] 2.3.7.1 Binary Document Password Verifier Derivation */\nfunction crypto_CreatePasswordVerifier_Method1(Password) {\n\tvar Verifier = 0x0000, PasswordArray;\n\tvar PasswordDecoded = _JS2ANSI(Password);\n\tvar len = PasswordDecoded.length + 1, i, PasswordByte;\n\tvar Intermediate1, Intermediate2, Intermediate3;\n\tPasswordArray = new_raw_buf(len);\n\tPasswordArray[0] = PasswordDecoded.length;\n\tfor(i = 1; i != len; ++i) PasswordArray[i] = PasswordDecoded[i-1];\n\tfor(i = len-1; i >= 0; --i) {\n\t\tPasswordByte = PasswordArray[i];\n\t\tIntermediate1 = ((Verifier & 0x4000) === 0x0000) ? 0 : 1;\n\t\tIntermediate2 = (Verifier << 1) & 0x7FFF;\n\t\tIntermediate3 = Intermediate1 | Intermediate2;\n\t\tVerifier = Intermediate3 ^ PasswordByte;\n\t}\n\treturn Verifier ^ 0xCE4B;\n}\n\n/* [MS-OFFCRYPTO] 2.3.7.2 Binary Document XOR Array Initialization */\nvar crypto_CreateXorArray_Method1 = (function() {\n\tvar PadArray = [0xBB, 0xFF, 0xFF, 0xBA, 0xFF, 0xFF, 0xB9, 0x80, 0x00, 0xBE, 0x0F, 0x00, 0xBF, 0x0F, 0x00];\n\tvar InitialCode = [0xE1F0, 0x1D0F, 0xCC9C, 0x84C0, 0x110C, 0x0E10, 0xF1CE, 0x313E, 0x1872, 0xE139, 0xD40F, 0x84F9, 0x280C, 0xA96A, 0x4EC3];\n\tvar XorMatrix = [0xAEFC, 0x4DD9, 0x9BB2, 0x2745, 0x4E8A, 0x9D14, 0x2A09, 0x7B61, 0xF6C2, 0xFDA5, 0xEB6B, 0xC6F7, 0x9DCF, 0x2BBF, 0x4563, 0x8AC6, 0x05AD, 0x0B5A, 0x16B4, 0x2D68, 0x5AD0, 0x0375, 0x06EA, 0x0DD4, 0x1BA8, 0x3750, 0x6EA0, 0xDD40, 0xD849, 0xA0B3, 0x5147, 0xA28E, 0x553D, 0xAA7A, 0x44D5, 0x6F45, 0xDE8A, 0xAD35, 0x4A4B, 0x9496, 0x390D, 0x721A, 0xEB23, 0xC667, 0x9CEF, 0x29FF, 0x53FE, 0xA7FC, 0x5FD9, 0x47D3, 0x8FA6, 0x0F6D, 0x1EDA, 0x3DB4, 0x7B68, 0xF6D0, 0xB861, 0x60E3, 0xC1C6, 0x93AD, 0x377B, 0x6EF6, 0xDDEC, 0x45A0, 0x8B40, 0x06A1, 0x0D42, 0x1A84, 0x3508, 0x6A10, 0xAA51, 0x4483, 0x8906, 0x022D, 0x045A, 0x08B4, 0x1168, 0x76B4, 0xED68, 0xCAF1, 0x85C3, 0x1BA7, 0x374E, 0x6E9C, 0x3730, 0x6E60, 0xDCC0, 0xA9A1, 0x4363, 0x86C6, 0x1DAD, 0x3331, 0x6662, 0xCCC4, 0x89A9, 0x0373, 0x06E6, 0x0DCC, 0x1021, 0x2042, 0x4084, 0x8108, 0x1231, 0x2462, 0x48C4];\n\tvar Ror = function(Byte) { return ((Byte/2) | (Byte*128)) & 0xFF; };\n\tvar XorRor = function(byte1, byte2) { return Ror(byte1 ^ byte2); };\n\tvar CreateXorKey_Method1 = function(Password) {\n\t\tvar XorKey = InitialCode[Password.length - 1];\n\t\tvar CurrentElement = 0x68;\n\t\tfor(var i = Password.length-1; i >= 0; --i) {\n\t\t\tvar Char = Password[i];\n\t\t\tfor(var j = 0; j != 7; ++j) {\n\t\t\t\tif(Char & 0x40) XorKey ^= XorMatrix[CurrentElement];\n\t\t\t\tChar *= 2; --CurrentElement;\n\t\t\t}\n\t\t}\n\t\treturn XorKey;\n\t};\n\treturn function(password) {\n\t\tvar Password = _JS2ANSI(password);\n\t\tvar XorKey = CreateXorKey_Method1(Password);\n\t\tvar Index = Password.length;\n\t\tvar ObfuscationArray = new_raw_buf(16);\n\t\tfor(var i = 0; i != 16; ++i) ObfuscationArray[i] = 0x00;\n\t\tvar Temp, PasswordLastChar, PadIndex;\n\t\tif((Index & 1) === 1) {\n\t\t\tTemp = XorKey >> 8;\n\t\t\tObfuscationArray[Index] = XorRor(PadArray[0], Temp);\n\t\t\t--Index;\n\t\t\tTemp = XorKey & 0xFF;\n\t\t\tPasswordLastChar = Password[Password.length - 1];\n\t\t\tObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);\n\t\t}\n\t\twhile(Index > 0) {\n\t\t\t--Index;\n\t\t\tTemp = XorKey >> 8;\n\t\t\tObfuscationArray[Index] = XorRor(Password[Index], Temp);\n\t\t\t--Index;\n\t\t\tTemp = XorKey & 0xFF;\n\t\t\tObfuscationArray[Index] = XorRor(Password[Index], Temp);\n\t\t}\n\t\tIndex = 15;\n\t\tPadIndex = 15 - Password.length;\n\t\twhile(PadIndex > 0) {\n\t\t\tTemp = XorKey >> 8;\n\t\t\tObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);\n\t\t\t--Index;\n\t\t\t--PadIndex;\n\t\t\tTemp = XorKey & 0xFF;\n\t\t\tObfuscationArray[Index] = XorRor(Password[Index], Temp);\n\t\t\t--Index;\n\t\t\t--PadIndex;\n\t\t}\n\t\treturn ObfuscationArray;\n\t};\n})();\n\n/* [MS-OFFCRYPTO] 2.3.7.3 Binary Document XOR Data Transformation Method 1 */\nvar crypto_DecryptData_Method1 = function(password, Data, XorArrayIndex, XorArray, O) {\n\t/* If XorArray is set, use it; if O is not set, make changes in-place */\n\tif(!O) O = Data;\n\tif(!XorArray) XorArray = crypto_CreateXorArray_Method1(password);\n\tvar Index, Value;\n\tfor(Index = 0; Index != Data.length; ++Index) {\n\t\tValue = Data[Index];\n\t\tValue ^= XorArray[XorArrayIndex];\n\t\tValue = ((Value>>5) | (Value<<3)) & 0xFF;\n\t\tO[Index] = Value;\n\t\t++XorArrayIndex;\n\t}\n\treturn [O, XorArrayIndex, XorArray];\n};\n\nvar crypto_MakeXorDecryptor = function(password) {\n\tvar XorArrayIndex = 0, XorArray = crypto_CreateXorArray_Method1(password);\n\treturn function(Data) {\n\t\tvar O = crypto_DecryptData_Method1(\"\", Data, XorArrayIndex, XorArray);\n\t\tXorArrayIndex = O[1];\n\t\treturn O[0];\n\t};\n};\n\n/* 2.5.343 */\nfunction parse_XORObfuscation(blob, length, opts, out) {\n\tvar o = ({ key: parseuint16(blob), verificationBytes: parseuint16(blob) });\n\tif(opts.password) o.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);\n\tout.valid = o.verificationBytes === o.verifier;\n\tif(out.valid) out.insitu = crypto_MakeXorDecryptor(opts.password);\n\treturn o;\n}\n\n/* 2.4.117 */\nfunction parse_FilePassHeader(blob, length, oo) {\n\tvar o = oo || {}; o.Info = blob.read_shift(2); blob.l -= 2;\n\tif(o.Info === 1) o.Data = parse_RC4Header(blob, length);\n\telse o.Data = parse_RC4CryptoHeader(blob, length);\n\treturn o;\n}\nfunction parse_FilePass(blob, length, opts) {\n\tvar o = ({ Type: opts.biff >= 8 ? blob.read_shift(2) : 0 }); /* wEncryptionType */\n\tif(o.Type) parse_FilePassHeader(blob, length-2, o);\n\telse parse_XORObfuscation(blob, opts.biff >= 8 ? length : length - 2, opts, o);\n\treturn o;\n}\n\n\nvar RTF = (function() {\n\tfunction rtf_to_sheet(d, opts) {\n\t\tswitch(opts.type) {\n\t\t\tcase 'base64': return rtf_to_sheet_str(Base64.decode(d), opts);\n\t\t\tcase 'binary': return rtf_to_sheet_str(d, opts);\n\t\t\tcase 'buffer': return rtf_to_sheet_str(has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d), opts);\n\t\t\tcase 'array':  return rtf_to_sheet_str(cc2str(d), opts);\n\t\t}\n\t\tthrow new Error(\"Unrecognized type \" + opts.type);\n\t}\n\n\t/* TODO: this is a stub */\n\tfunction rtf_to_sheet_str(str, opts) {\n\t\tvar o = opts || {};\n\t\tvar ws = o.dense ? ([]) : ({});\n\n\t\tvar rows = str.match(/\\\\trowd.*?\\\\row\\b/g);\n\t\tif(!rows.length) throw new Error(\"RTF missing table\");\n\t\tvar range = ({s: {c:0, r:0}, e: {c:0, r:rows.length - 1}});\n\t\trows.forEach(function(rowtf, R) {\n\t\t\tif(Array.isArray(ws)) ws[R] = [];\n\t\t\tvar rtfre = /\\\\\\w+\\b/g;\n\t\t\tvar last_index = 0;\n\t\t\tvar res;\n\t\t\tvar C = -1;\n\t\t\twhile((res = rtfre.exec(rowtf))) {\n\t\t\t\tswitch(res[0]) {\n\t\t\t\t\tcase \"\\\\cell\":\n\t\t\t\t\t\tvar data = rowtf.slice(last_index, rtfre.lastIndex - res[0].length);\n\t\t\t\t\t\tif(data[0] == \" \") data = data.slice(1);\n\t\t\t\t\t\t++C;\n\t\t\t\t\t\tif(data.length) {\n\t\t\t\t\t\t\t// TODO: value parsing, including codepage adjustments\n\t\t\t\t\t\t\tvar cell = {v: data, t:\"s\"};\n\t\t\t\t\t\t\tif(Array.isArray(ws)) ws[R][C] = cell;\n\t\t\t\t\t\t\telse ws[encode_cell({r:R, c:C})] = cell;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlast_index = rtfre.lastIndex;\n\t\t\t}\n\t\t\tif(C > range.e.c) range.e.c = C;\n\t\t});\n\t\tws['!ref'] = encode_range(range);\n\t\treturn ws;\n\t}\n\n\tfunction rtf_to_workbook(d, opts) { return sheet_to_workbook(rtf_to_sheet(d, opts), opts); }\n\n\t/* TODO: this is a stub */\n\tfunction sheet_to_rtf(ws) {\n\t\tvar o = [\"{\\\\rtf1\\\\ansi\"];\n\t\tvar r = safe_decode_range(ws['!ref']), cell;\n\t\tvar dense = Array.isArray(ws);\n\t\tfor(var R = r.s.r; R <= r.e.r; ++R) {\n\t\t\to.push(\"\\\\trowd\\\\trautofit1\");\n\t\t\tfor(var C = r.s.c; C <= r.e.c; ++C) o.push(\"\\\\cellx\" + (C+1));\n\t\t\to.push(\"\\\\pard\\\\intbl\");\n\t\t\tfor(C = r.s.c; C <= r.e.c; ++C) {\n\t\t\t\tvar coord = encode_cell({r:R,c:C});\n\t\t\t\tcell = dense ? (ws[R]||[])[C]: ws[coord];\n\t\t\t\tif(!cell || cell.v == null && (!cell.f || cell.F)) continue;\n\t\t\t\to.push(\" \" + (cell.w || (format_cell(cell), cell.w)));\n\t\t\t\to.push(\"\\\\cell\");\n\t\t\t}\n\t\t\to.push(\"\\\\pard\\\\intbl\\\\row\");\n\t\t}\n\t\treturn o.join(\"\") + \"}\";\n\t}\n\n\treturn {\n\t\tto_workbook: rtf_to_workbook,\n\t\tto_sheet: rtf_to_sheet,\n\t\tfrom_sheet: sheet_to_rtf\n\t};\n})();\nfunction hex2RGB(h) {\n\tvar o = h.slice(h[0]===\"#\"?1:0).slice(0,6);\n\treturn [parseInt(o.slice(0,2),16),parseInt(o.slice(2,4),16),parseInt(o.slice(4,6),16)];\n}\nfunction rgb2Hex(rgb) {\n\tfor(var i=0,o=1; i!=3; ++i) o = o*256 + (rgb[i]>255?255:rgb[i]<0?0:rgb[i]);\n\treturn o.toString(16).toUpperCase().slice(1);\n}\n\nfunction rgb2HSL(rgb) {\n\tvar R = rgb[0]/255, G = rgb[1]/255, B=rgb[2]/255;\n\tvar M = Math.max(R, G, B), m = Math.min(R, G, B), C = M - m;\n\tif(C === 0) return [0, 0, R];\n\n\tvar H6 = 0, S = 0, L2 = (M + m);\n\tS = C / (L2 > 1 ? 2 - L2 : L2);\n\tswitch(M){\n\t\tcase R: H6 = ((G - B) / C + 6)%6; break;\n\t\tcase G: H6 = ((B - R) / C + 2); break;\n\t\tcase B: H6 = ((R - G) / C + 4); break;\n\t}\n\treturn [H6 / 6, S, L2 / 2];\n}\n\nfunction hsl2RGB(hsl){\n\tvar H = hsl[0], S = hsl[1], L = hsl[2];\n\tvar C = S * 2 * (L < 0.5 ? L : 1 - L), m = L - C/2;\n\tvar rgb = [m,m,m], h6 = 6*H;\n\n\tvar X;\n\tif(S !== 0) switch(h6|0) {\n\t\tcase 0: case 6: X = C * h6; rgb[0] += C; rgb[1] += X; break;\n\t\tcase 1: X = C * (2 - h6);   rgb[0] += X; rgb[1] += C; break;\n\t\tcase 2: X = C * (h6 - 2);   rgb[1] += C; rgb[2] += X; break;\n\t\tcase 3: X = C * (4 - h6);   rgb[1] += X; rgb[2] += C; break;\n\t\tcase 4: X = C * (h6 - 4);   rgb[2] += C; rgb[0] += X; break;\n\t\tcase 5: X = C * (6 - h6);   rgb[2] += X; rgb[0] += C; break;\n\t}\n\tfor(var i = 0; i != 3; ++i) rgb[i] = Math.round(rgb[i]*255);\n\treturn rgb;\n}\n\n/* 18.8.3 bgColor tint algorithm */\nfunction rgb_tint(hex, tint) {\n\tif(tint === 0) return hex;\n\tvar hsl = rgb2HSL(hex2RGB(hex));\n\tif (tint < 0) hsl[2] = hsl[2] * (1 + tint);\n\telse hsl[2] = 1 - (1 - hsl[2]) * (1 - tint);\n\treturn rgb2Hex(hsl2RGB(hsl));\n}\n\n/* 18.3.1.13 width calculations */\n/* [MS-OI29500] 2.1.595 Column Width & Formatting */\nvar DEF_MDW = 6, MAX_MDW = 15, MIN_MDW = 1, MDW = DEF_MDW;\nfunction width2px(width) { return Math.floor(( width + (Math.round(128/MDW))/256 )* MDW ); }\nfunction px2char(px) { return (Math.floor((px - 5)/MDW * 100 + 0.5))/100; }\nfunction char2width(chr) { return (Math.round((chr * MDW + 5)/MDW*256))/256; }\n//function px2char_(px) { return (((px - 5)/MDW * 100 + 0.5))/100; }\n//function char2width_(chr) { return (((chr * MDW + 5)/MDW*256))/256; }\nfunction cycle_width(collw) { return char2width(px2char(width2px(collw))); }\n/* XLSX/XLSB/XLS specify width in units of MDW */\nfunction find_mdw_colw(collw) {\n\tvar delta = Math.abs(collw - cycle_width(collw)), _MDW = MDW;\n\tif(delta > 0.005) for(MDW=MIN_MDW; MDW<MAX_MDW; ++MDW) if(Math.abs(collw - cycle_width(collw)) <= delta) { delta = Math.abs(collw - cycle_width(collw)); _MDW = MDW; }\n\tMDW = _MDW;\n}\n/* XLML specifies width in terms of pixels */\n/*function find_mdw_wpx(wpx) {\n\tvar delta = Infinity, guess = 0, _MDW = MIN_MDW;\n\tfor(MDW=MIN_MDW; MDW<MAX_MDW; ++MDW) {\n\t\tguess = char2width_(px2char_(wpx))*256;\n\t\tguess = (guess) % 1;\n\t\tif(guess > 0.5) guess--;\n\t\tif(Math.abs(guess) < delta) { delta = Math.abs(guess); _MDW = MDW; }\n\t}\n\tMDW = _MDW;\n}*/\n\nfunction process_col(coll) {\n\tif(coll.width) {\n\t\tcoll.wpx = width2px(coll.width);\n\t\tcoll.wch = px2char(coll.wpx);\n\t\tcoll.MDW = MDW;\n\t} else if(coll.wpx) {\n\t\tcoll.wch = px2char(coll.wpx);\n\t\tcoll.width = char2width(coll.wch);\n\t\tcoll.MDW = MDW;\n\t} else if(typeof coll.wch == 'number') {\n\t\tcoll.width = char2width(coll.wch);\n\t\tcoll.wpx = width2px(coll.width);\n\t\tcoll.MDW = MDW;\n\t}\n\tif(coll.customWidth) delete coll.customWidth;\n}\n\nvar DEF_PPI = 96, PPI = DEF_PPI;\nfunction px2pt(px) { return px * 96 / PPI; }\nfunction pt2px(pt) { return pt * PPI / 96; }\n\n/* [MS-EXSPXML3] 2.4.54 ST_enmPattern */\nvar XLMLPatternTypeMap = {\n\t\"None\": \"none\",\n\t\"Solid\": \"solid\",\n\t\"Gray50\": \"mediumGray\",\n\t\"Gray75\": \"darkGray\",\n\t\"Gray25\": \"lightGray\",\n\t\"HorzStripe\": \"darkHorizontal\",\n\t\"VertStripe\": \"darkVertical\",\n\t\"ReverseDiagStripe\": \"darkDown\",\n\t\"DiagStripe\": \"darkUp\",\n\t\"DiagCross\": \"darkGrid\",\n\t\"ThickDiagCross\": \"darkTrellis\",\n\t\"ThinHorzStripe\": \"lightHorizontal\",\n\t\"ThinVertStripe\": \"lightVertical\",\n\t\"ThinReverseDiagStripe\": \"lightDown\",\n\t\"ThinHorzCross\": \"lightGrid\"\n};\n\n/* 18.8.5 borders CT_Borders */\nfunction parse_borders(t, styles, themes, opts) {\n\tstyles.Borders = [];\n\tvar border = {};\n\tvar pass = false;\n\t(t[0].match(tagregex)||[]).forEach(function(x) {\n\t\tvar y = parsexmltag(x);\n\t\tswitch(strip_ns(y[0])) {\n\t\t\tcase '<borders': case '<borders>': case '</borders>': break;\n\n\t\t\t/* 18.8.4 border CT_Border */\n\t\t\tcase '<border': case '<border>': case '<border/>':\n\t\t\t\tborder = {};\n\t\t\t\tif(y.diagonalUp) border.diagonalUp = parsexmlbool(y.diagonalUp);\n\t\t\t\tif(y.diagonalDown) border.diagonalDown = parsexmlbool(y.diagonalDown);\n\t\t\t\tstyles.Borders.push(border);\n\t\t\t\tbreak;\n\t\t\tcase '</border>': break;\n\n\t\t\t/* note: not in spec, appears to be CT_BorderPr */\n\t\t\tcase '<left/>': break;\n\t\t\tcase '<left': case '<left>': break;\n\t\t\tcase '</left>': break;\n\n\t\t\t/* note: not in spec, appears to be CT_BorderPr */\n\t\t\tcase '<right/>': break;\n\t\t\tcase '<right': case '<right>': break;\n\t\t\tcase '</right>': break;\n\n\t\t\t/* 18.8.43 top CT_BorderPr */\n\t\t\tcase '<top/>': break;\n\t\t\tcase '<top': case '<top>': break;\n\t\t\tcase '</top>': break;\n\n\t\t\t/* 18.8.6 bottom CT_BorderPr */\n\t\t\tcase '<bottom/>': break;\n\t\t\tcase '<bottom': case '<bottom>': break;\n\t\t\tcase '</bottom>': break;\n\n\t\t\t/* 18.8.13 diagonal CT_BorderPr */\n\t\t\tcase '<diagonal': case '<diagonal>': case '<diagonal/>': break;\n\t\t\tcase '</diagonal>': break;\n\n\t\t\t/* 18.8.25 horizontal CT_BorderPr */\n\t\t\tcase '<horizontal': case '<horizontal>': case '<horizontal/>': break;\n\t\t\tcase '</horizontal>': break;\n\n\t\t\t/* 18.8.44 vertical CT_BorderPr */\n\t\t\tcase '<vertical': case '<vertical>': case '<vertical/>': break;\n\t\t\tcase '</vertical>': break;\n\n\t\t\t/* 18.8.37 start CT_BorderPr */\n\t\t\tcase '<start': case '<start>': case '<start/>': break;\n\t\t\tcase '</start>': break;\n\n\t\t\t/* 18.8.16 end CT_BorderPr */\n\t\t\tcase '<end': case '<end>': case '<end/>': break;\n\t\t\tcase '</end>': break;\n\n\t\t\t/* 18.8.? color CT_Color */\n\t\t\tcase '<color': case '<color>':\n\t\t\t\tbreak;\n\t\t\tcase '<color/>': case '</color>': break;\n\n\t\t\t/* 18.2.10 extLst CT_ExtensionList ? */\n\t\t\tcase '<extLst': case '<extLst>': case '</extLst>': break;\n\t\t\tcase '<ext': pass = true; break;\n\t\t\tcase '</ext>': pass = false; break;\n\t\t\tdefault: if(opts && opts.WTF) {\n\t\t\t\tif(!pass) throw new Error('unrecognized ' + y[0] + ' in borders');\n\t\t\t}\n\t\t}\n\t});\n}\n\n/* 18.8.21 fills CT_Fills */\nfunction parse_fills(t, styles, themes, opts) {\n\tstyles.Fills = [];\n\tvar fill = {};\n\tvar pass = false;\n\t(t[0].match(tagregex)||[]).forEach(function(x) {\n\t\tvar y = parsexmltag(x);\n\t\tswitch(strip_ns(y[0])) {\n\t\t\tcase '<fills': case '<fills>': case '</fills>': break;\n\n\t\t\t/* 18.8.20 fill CT_Fill */\n\t\t\tcase '<fill>': case '<fill': case '<fill/>':\n\t\t\t\tfill = {}; styles.Fills.push(fill); break;\n\t\t\tcase '</fill>': break;\n\n\t\t\t/* 18.8.24 gradientFill CT_GradientFill */\n\t\t\tcase '<gradientFill>': break;\n\t\t\tcase '<gradientFill':\n\t\t\tcase '</gradientFill>': styles.Fills.push(fill); fill = {}; break;\n\n\t\t\t/* 18.8.32 patternFill CT_PatternFill */\n\t\t\tcase '<patternFill': case '<patternFill>':\n\t\t\t\tif(y.patternType) fill.patternType = y.patternType;\n\t\t\t\tbreak;\n\t\t\tcase '<patternFill/>': case '</patternFill>': break;\n\n\t\t\t/* 18.8.3 bgColor CT_Color */\n\t\t\tcase '<bgColor':\n\t\t\t\tif(!fill.bgColor) fill.bgColor = {};\n\t\t\t\tif(y.indexed) fill.bgColor.indexed = parseInt(y.indexed, 10);\n\t\t\t\tif(y.theme) fill.bgColor.theme = parseInt(y.theme, 10);\n\t\t\t\tif(y.tint) fill.bgColor.tint = parseFloat(y.tint);\n\t\t\t\t/* Excel uses ARGB strings */\n\t\t\t\tif(y.rgb) fill.bgColor.rgb = y.rgb.slice(-6);\n\t\t\t\tbreak;\n\t\t\tcase '<bgColor/>': case '</bgColor>': break;\n\n\t\t\t/* 18.8.19 fgColor CT_Color */\n\t\t\tcase '<fgColor':\n\t\t\t\tif(!fill.fgColor) fill.fgColor = {};\n\t\t\t\tif(y.theme) fill.fgColor.theme = parseInt(y.theme, 10);\n\t\t\t\tif(y.tint) fill.fgColor.tint = parseFloat(y.tint);\n\t\t\t\t/* Excel uses ARGB strings */\n\t\t\t\tif(y.rgb != null) fill.fgColor.rgb = y.rgb.slice(-6);\n\t\t\t\tbreak;\n\t\t\tcase '<fgColor/>': case '</fgColor>': break;\n\n\t\t\t/* 18.8.38 stop CT_GradientStop */\n\t\t\tcase '<stop': case '<stop/>': break;\n\t\t\tcase '</stop>': break;\n\n\t\t\t/* 18.8.? color CT_Color */\n\t\t\tcase '<color': case '<color/>': break;\n\t\t\tcase '</color>': break;\n\n\t\t\t/* 18.2.10 extLst CT_ExtensionList ? */\n\t\t\tcase '<extLst': case '<extLst>': case '</extLst>': break;\n\t\t\tcase '<ext': pass = true; break;\n\t\t\tcase '</ext>': pass = false; break;\n\t\t\tdefault: if(opts && opts.WTF) {\n\t\t\t\tif(!pass) throw new Error('unrecognized ' + y[0] + ' in fills');\n\t\t\t}\n\t\t}\n\t});\n}\n\n/* 18.8.23 fonts CT_Fonts */\nfunction parse_fonts(t, styles, themes, opts) {\n\tstyles.Fonts = [];\n\tvar font = {};\n\tvar pass = false;\n\t(t[0].match(tagregex)||[]).forEach(function(x) {\n\t\tvar y = parsexmltag(x);\n\t\tswitch(strip_ns(y[0])) {\n\t\t\tcase '<fonts': case '<fonts>': case '</fonts>': break;\n\n\t\t\t/* 18.8.22 font CT_Font */\n\t\t\tcase '<font': case '<font>': break;\n\t\t\tcase '</font>': case '<font/>':\n\t\t\t\tstyles.Fonts.push(font);\n\t\t\t\tfont = {};\n\t\t\t\tbreak;\n\n\t\t\t/* 18.8.29 name CT_FontName */\n\t\t\tcase '<name': if(y.val) font.name = utf8read(y.val); break;\n\t\t\tcase '<name/>': case '</name>': break;\n\n\t\t\t/* 18.8.2  b CT_BooleanProperty */\n\t\t\tcase '<b': font.bold = y.val ? parsexmlbool(y.val) : 1; break;\n\t\t\tcase '<b/>': font.bold = 1; break;\n\n\t\t\t/* 18.8.26 i CT_BooleanProperty */\n\t\t\tcase '<i': font.italic = y.val ? parsexmlbool(y.val) : 1; break;\n\t\t\tcase '<i/>': font.italic = 1; break;\n\n\t\t\t/* 18.4.13 u CT_UnderlineProperty */\n\t\t\tcase '<u':\n\t\t\t\tswitch(y.val) {\n\t\t\t\t\tcase \"none\": font.underline = 0x00; break;\n\t\t\t\t\tcase \"single\": font.underline = 0x01; break;\n\t\t\t\t\tcase \"double\": font.underline = 0x02; break;\n\t\t\t\t\tcase \"singleAccounting\": font.underline = 0x21; break;\n\t\t\t\t\tcase \"doubleAccounting\": font.underline = 0x22; break;\n\t\t\t\t} break;\n\t\t\tcase '<u/>': font.underline = 1; break;\n\n\t\t\t/* 18.4.10 strike CT_BooleanProperty */\n\t\t\tcase '<strike': font.strike = y.val ? parsexmlbool(y.val) : 1; break;\n\t\t\tcase '<strike/>': font.strike = 1; break;\n\n\t\t\t/* 18.4.2  outline CT_BooleanProperty */\n\t\t\tcase '<outline': font.outline = y.val ? parsexmlbool(y.val) : 1; break;\n\t\t\tcase '<outline/>': font.outline = 1; break;\n\n\t\t\t/* 18.8.36 shadow CT_BooleanProperty */\n\t\t\tcase '<shadow': font.shadow = y.val ? parsexmlbool(y.val) : 1; break;\n\t\t\tcase '<shadow/>': font.shadow = 1; break;\n\n\t\t\t/* 18.8.12 condense CT_BooleanProperty */\n\t\t\tcase '<condense': font.condense = y.val ? parsexmlbool(y.val) : 1; break;\n\t\t\tcase '<condense/>': font.condense = 1; break;\n\n\t\t\t/* 18.8.17 extend CT_BooleanProperty */\n\t\t\tcase '<extend': font.extend = y.val ? parsexmlbool(y.val) : 1; break;\n\t\t\tcase '<extend/>': font.extend = 1; break;\n\n\t\t\t/* 18.4.11 sz CT_FontSize */\n\t\t\tcase '<sz': if(y.val) font.sz = +y.val; break;\n\t\t\tcase '<sz/>': case '</sz>': break;\n\n\t\t\t/* 18.4.14 vertAlign CT_VerticalAlignFontProperty */\n\t\t\tcase '<vertAlign': if(y.val) font.vertAlign = y.val; break;\n\t\t\tcase '<vertAlign/>': case '</vertAlign>': break;\n\n\t\t\t/* 18.8.18 family CT_FontFamily */\n\t\t\tcase '<family': if(y.val) font.family = parseInt(y.val,10); break;\n\t\t\tcase '<family/>': case '</family>': break;\n\n\t\t\t/* 18.8.35 scheme CT_FontScheme */\n\t\t\tcase '<scheme': if(y.val) font.scheme = y.val; break;\n\t\t\tcase '<scheme/>': case '</scheme>': break;\n\n\t\t\t/* 18.4.1 charset CT_IntProperty */\n\t\t\tcase '<charset':\n\t\t\t\tif(y.val == '1') break;\n\t\t\t\ty.codepage = CS2CP[parseInt(y.val, 10)];\n\t\t\t\tbreak;\n\n\t\t\t/* 18.?.? color CT_Color */\n\t\t\tcase '<color':\n\t\t\t\tif(!font.color) font.color = {};\n\t\t\t\tif(y.auto) font.color.auto = parsexmlbool(y.auto);\n\n\t\t\t\tif(y.rgb) font.color.rgb = y.rgb.slice(-6);\n\t\t\t\telse if(y.indexed) {\n\t\t\t\t\tfont.color.index = parseInt(y.indexed, 10);\n\t\t\t\t\tvar icv = XLSIcv[font.color.index];\n\t\t\t\t\tif(font.color.index == 81) icv = XLSIcv[1];\n\t\t\t\t\tif(!icv) icv = XLSIcv[1]; //throw new Error(x); // note: 206 is valid\n\t\t\t\t\tfont.color.rgb = icv[0].toString(16) + icv[1].toString(16) + icv[2].toString(16);\n\t\t\t\t} else if(y.theme) {\n\t\t\t\t\tfont.color.theme = parseInt(y.theme, 10);\n\t\t\t\t\tif(y.tint) font.color.tint = parseFloat(y.tint);\n\t\t\t\t\tif(y.theme && themes.themeElements && themes.themeElements.clrScheme) {\n\t\t\t\t\t\tfont.color.rgb = rgb_tint(themes.themeElements.clrScheme[font.color.theme].rgb, font.color.tint || 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase '<color/>': case '</color>': break;\n\n\t\t\t/* note: sometimes mc:AlternateContent appears bare */\n\t\t\tcase '<AlternateContent': pass = true; break;\n\t\t\tcase '</AlternateContent>': pass = false; break;\n\n\t\t\t/* 18.2.10 extLst CT_ExtensionList ? */\n\t\t\tcase '<extLst': case '<extLst>': case '</extLst>': break;\n\t\t\tcase '<ext': pass = true; break;\n\t\t\tcase '</ext>': pass = false; break;\n\t\t\tdefault: if(opts && opts.WTF) {\n\t\t\t\tif(!pass) throw new Error('unrecognized ' + y[0] + ' in fonts');\n\t\t\t}\n\t\t}\n\t});\n}\n\n/* 18.8.31 numFmts CT_NumFmts */\nfunction parse_numFmts(t, styles, opts) {\n\tstyles.NumberFmt = [];\n\tvar k/*Array<number>*/ = (keys(SSF._table));\n\tfor(var i=0; i < k.length; ++i) styles.NumberFmt[k[i]] = SSF._table[k[i]];\n\tvar m = t[0].match(tagregex);\n\tif(!m) return;\n\tfor(i=0; i < m.length; ++i) {\n\t\tvar y = parsexmltag(m[i]);\n\t\tswitch(strip_ns(y[0])) {\n\t\t\tcase '<numFmts': case '</numFmts>': case '<numFmts/>': case '<numFmts>': break;\n\t\t\tcase '<numFmt': {\n\t\t\t\tvar f=unescapexml(utf8read(y.formatCode)), j=parseInt(y.numFmtId,10);\n\t\t\t\tstyles.NumberFmt[j] = f;\n\t\t\t\tif(j>0) {\n\t\t\t\t\tif(j > 0x188) {\n\t\t\t\t\t\tfor(j = 0x188; j > 0x3c; --j) if(styles.NumberFmt[j] == null) break;\n\t\t\t\t\t\tstyles.NumberFmt[j] = f;\n\t\t\t\t\t}\n\t\t\t\t\tSSF.load(f,j);\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase '</numFmt>': break;\n\t\t\tdefault: if(opts.WTF) throw new Error('unrecognized ' + y[0] + ' in numFmts');\n\t\t}\n\t}\n}\n\nfunction write_numFmts(NF) {\n\tvar o = [\"<numFmts>\"];\n\t[[5,8],[23,26],[41,44],[/*63*/50,/*66],[164,*/392]].forEach(function(r) {\n\t\tfor(var i = r[0]; i <= r[1]; ++i) if(NF[i] != null) o[o.length] = (writextag('numFmt',null,{numFmtId:i,formatCode:escapexml(NF[i])}));\n\t});\n\tif(o.length === 1) return \"\";\n\to[o.length] = (\"</numFmts>\");\n\to[0] = writextag('numFmts', null, { count:o.length-2 }).replace(\"/>\", \">\");\n\treturn o.join(\"\");\n}\n\n/* 18.8.10 cellXfs CT_CellXfs */\nvar cellXF_uint = [ \"numFmtId\", \"fillId\", \"fontId\", \"borderId\", \"xfId\" ];\nvar cellXF_bool = [ \"applyAlignment\", \"applyBorder\", \"applyFill\", \"applyFont\", \"applyNumberFormat\", \"applyProtection\", \"pivotButton\", \"quotePrefix\" ];\nfunction parse_cellXfs(t, styles, opts) {\n\tstyles.CellXf = [];\n\tvar xf;\n\tvar pass = false;\n\t(t[0].match(tagregex)||[]).forEach(function(x) {\n\t\tvar y = parsexmltag(x), i = 0;\n\t\tswitch(strip_ns(y[0])) {\n\t\t\tcase '<cellXfs': case '<cellXfs>': case '<cellXfs/>': case '</cellXfs>': break;\n\n\t\t\t/* 18.8.45 xf CT_Xf */\n\t\t\tcase '<xf': case '<xf/>':\n\t\t\t\txf = y;\n\t\t\t\tdelete xf[0];\n\t\t\t\tfor(i = 0; i < cellXF_uint.length; ++i) if(xf[cellXF_uint[i]])\n\t\t\t\t\txf[cellXF_uint[i]] = parseInt(xf[cellXF_uint[i]], 10);\n\t\t\t\tfor(i = 0; i < cellXF_bool.length; ++i) if(xf[cellXF_bool[i]])\n\t\t\t\t\txf[cellXF_bool[i]] = parsexmlbool(xf[cellXF_bool[i]]);\n\t\t\t\tif(styles.NumberFmt && xf.numFmtId > 0x188) {\n\t\t\t\t\tfor(i = 0x188; i > 0x3c; --i) if(styles.NumberFmt[xf.numFmtId] == styles.NumberFmt[i]) { xf.numFmtId = i; break; }\n\t\t\t\t}\n\t\t\t\tstyles.CellXf.push(xf); break;\n\t\t\tcase '</xf>': break;\n\n\t\t\t/* 18.8.1 alignment CT_CellAlignment */\n\t\t\tcase '<alignment': case '<alignment/>':\n\t\t\t\tvar alignment = {};\n\t\t\t\tif(y.vertical) alignment.vertical = y.vertical;\n\t\t\t\tif(y.horizontal) alignment.horizontal = y.horizontal;\n\t\t\t\tif(y.textRotation != null) alignment.textRotation = y.textRotation;\n\t\t\t\tif(y.indent) alignment.indent = y.indent;\n\t\t\t\tif(y.wrapText) alignment.wrapText = parsexmlbool(y.wrapText);\n\t\t\t\txf.alignment = alignment;\n\t\t\t\tbreak;\n\t\t\tcase '</alignment>': break;\n\n\t\t\t/* 18.8.33 protection CT_CellProtection */\n\t\t\tcase '<protection':\n\t\t\t\tbreak;\n\t\t\tcase '</protection>': case '<protection/>': break;\n\n\t\t\t/* note: sometimes mc:AlternateContent appears bare */\n\t\t\tcase '<AlternateContent': pass = true; break;\n\t\t\tcase '</AlternateContent>': pass = false; break;\n\n\t\t\t/* 18.2.10 extLst CT_ExtensionList ? */\n\t\t\tcase '<extLst': case '<extLst>': case '</extLst>': break;\n\t\t\tcase '<ext': pass = true; break;\n\t\t\tcase '</ext>': pass = false; break;\n\t\t\tdefault: if(opts && opts.WTF) {\n\t\t\t\tif(!pass) throw new Error('unrecognized ' + y[0] + ' in cellXfs');\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction write_cellXfs(cellXfs) {\n\tvar o = [];\n\to[o.length] = (writextag('cellXfs',null));\n\tcellXfs.forEach(function(c) {\n\t\to[o.length] = (writextag('xf', null, c));\n\t});\n\to[o.length] = (\"</cellXfs>\");\n\tif(o.length === 2) return \"\";\n\to[0] = writextag('cellXfs',null, {count:o.length-2}).replace(\"/>\",\">\");\n\treturn o.join(\"\");\n}\n\n/* 18.8 Styles CT_Stylesheet*/\nvar parse_sty_xml= (function make_pstyx() {\nvar numFmtRegex = /<(?:\\w+:)?numFmts([^>]*)>[\\S\\s]*?<\\/(?:\\w+:)?numFmts>/;\nvar cellXfRegex = /<(?:\\w+:)?cellXfs([^>]*)>[\\S\\s]*?<\\/(?:\\w+:)?cellXfs>/;\nvar fillsRegex = /<(?:\\w+:)?fills([^>]*)>[\\S\\s]*?<\\/(?:\\w+:)?fills>/;\nvar fontsRegex = /<(?:\\w+:)?fonts([^>]*)>[\\S\\s]*?<\\/(?:\\w+:)?fonts>/;\nvar bordersRegex = /<(?:\\w+:)?borders([^>]*)>[\\S\\s]*?<\\/(?:\\w+:)?borders>/;\n\nreturn function parse_sty_xml(data, themes, opts) {\n\tvar styles = {};\n\tif(!data) return styles;\n\tdata = data.replace(/<!--([\\s\\S]*?)-->/mg,\"\").replace(/<!DOCTYPE[^\\[]*\\[[^\\]]*\\]>/gm,\"\");\n\t/* 18.8.39 styleSheet CT_Stylesheet */\n\tvar t;\n\n\t/* 18.8.31 numFmts CT_NumFmts ? */\n\tif((t=data.match(numFmtRegex))) parse_numFmts(t, styles, opts);\n\n\t/* 18.8.23 fonts CT_Fonts ? */\n\tif((t=data.match(fontsRegex))) parse_fonts(t, styles, themes, opts);\n\n\t/* 18.8.21 fills CT_Fills ? */\n\tif((t=data.match(fillsRegex))) parse_fills(t, styles, themes, opts);\n\n\t/* 18.8.5  borders CT_Borders ? */\n\tif((t=data.match(bordersRegex))) parse_borders(t, styles, themes, opts);\n\n\t/* 18.8.9  cellStyleXfs CT_CellStyleXfs ? */\n\t/* 18.8.8  cellStyles CT_CellStyles ? */\n\n\t/* 18.8.10 cellXfs CT_CellXfs ? */\n\tif((t=data.match(cellXfRegex))) parse_cellXfs(t, styles, opts);\n\n\t/* 18.8.15 dxfs CT_Dxfs ? */\n\t/* 18.8.42 tableStyles CT_TableStyles ? */\n\t/* 18.8.11 colors CT_Colors ? */\n\t/* 18.2.10 extLst CT_ExtensionList ? */\n\n\treturn styles;\n};\n})();\n\nvar STYLES_XML_ROOT = writextag('styleSheet', null, {\n\t'xmlns': XMLNS.main[0],\n\t'xmlns:vt': XMLNS.vt\n});\n\nRELS.STY = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\";\n\nfunction write_sty_xml(wb, opts) {\n\tvar o = [XML_HEADER, STYLES_XML_ROOT], w;\n\tif(wb.SSF && (w = write_numFmts(wb.SSF)) != null) o[o.length] = w;\n\to[o.length] = ('<fonts count=\"1\"><font><sz val=\"12\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts>');\n\to[o.length] = ('<fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills>');\n\to[o.length] = ('<borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders>');\n\to[o.length] = ('<cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs>');\n\tif((w = write_cellXfs(opts.cellXfs))) o[o.length] = (w);\n\to[o.length] = ('<cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles>');\n\to[o.length] = ('<dxfs count=\"0\"/>');\n\to[o.length] = ('<tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium9\" defaultPivotStyle=\"PivotStyleMedium4\"/>');\n\n\tif(o.length>2){ o[o.length] = ('</styleSheet>'); o[1]=o[1].replace(\"/>\",\">\"); }\n\treturn o.join(\"\");\n}\n/* [MS-XLSB] 2.4.657 BrtFmt */\nfunction parse_BrtFmt(data, length) {\n\tvar numFmtId = data.read_shift(2);\n\tvar stFmtCode = parse_XLWideString(data,length-2);\n\treturn [numFmtId, stFmtCode];\n}\nfunction write_BrtFmt(i, f, o) {\n\tif(!o) o = new_buf(6 + 4 * f.length);\n\to.write_shift(2, i);\n\twrite_XLWideString(f, o);\n\tvar out = (o.length > o.l) ? o.slice(0, o.l) : o;\n\tif(o.l == null) o.l = o.length;\n\treturn out;\n}\n\n/* [MS-XLSB] 2.4.659 BrtFont TODO */\nfunction parse_BrtFont(data, length, opts) {\n\tvar out = ({});\n\n\tout.sz = data.read_shift(2) / 20;\n\n\tvar grbit = parse_FontFlags(data, 2, opts);\n\tif(grbit.fItalic) out.italic = 1;\n\tif(grbit.fCondense) out.condense = 1;\n\tif(grbit.fExtend) out.extend = 1;\n\tif(grbit.fShadow) out.shadow = 1;\n\tif(grbit.fOutline) out.outline = 1;\n\tif(grbit.fStrikeout) out.strike = 1;\n\n\tvar bls = data.read_shift(2);\n\tif(bls === 0x02BC) out.bold = 1;\n\n\tswitch(data.read_shift(2)) {\n\t\t/* case 0: out.vertAlign = \"baseline\"; break; */\n\t\tcase 1: out.vertAlign = \"superscript\"; break;\n\t\tcase 2: out.vertAlign = \"subscript\"; break;\n\t}\n\n\tvar underline = data.read_shift(1);\n\tif(underline != 0) out.underline = underline;\n\n\tvar family = data.read_shift(1);\n\tif(family > 0) out.family = family;\n\n\tvar bCharSet = data.read_shift(1);\n\tif(bCharSet > 0) out.charset = bCharSet;\n\n\tdata.l++;\n\tout.color = parse_BrtColor(data, 8);\n\n\tswitch(data.read_shift(1)) {\n\t\t/* case 0: out.scheme = \"none\": break; */\n\t\tcase 1: out.scheme = \"major\"; break;\n\t\tcase 2: out.scheme = \"minor\"; break;\n\t}\n\n\tout.name = parse_XLWideString(data, length - 21);\n\n\treturn out;\n}\nfunction write_BrtFont(font, o) {\n\tif(!o) o = new_buf(25+4*32);\n\to.write_shift(2, font.sz * 20);\n\twrite_FontFlags(font, o);\n\to.write_shift(2, font.bold ? 0x02BC : 0x0190);\n\tvar sss = 0;\n\tif(font.vertAlign == \"superscript\") sss = 1;\n\telse if(font.vertAlign == \"subscript\") sss = 2;\n\to.write_shift(2, sss);\n\to.write_shift(1, font.underline || 0);\n\to.write_shift(1, font.family || 0);\n\to.write_shift(1, font.charset || 0);\n\to.write_shift(1, 0);\n\twrite_BrtColor(font.color, o);\n\tvar scheme = 0;\n\tif(font.scheme == \"major\") scheme = 1;\n\tif(font.scheme == \"minor\") scheme = 2;\n\to.write_shift(1, scheme);\n\twrite_XLWideString(font.name, o);\n\treturn o.length > o.l ? o.slice(0, o.l) : o;\n}\n\n/* [MS-XLSB] 2.4.650 BrtFill */\nvar XLSBFillPTNames = [\n\t\"none\",\n\t\"solid\",\n\t\"mediumGray\",\n\t\"darkGray\",\n\t\"lightGray\",\n\t\"darkHorizontal\",\n\t\"darkVertical\",\n\t\"darkDown\",\n\t\"darkUp\",\n\t\"darkGrid\",\n\t\"darkTrellis\",\n\t\"lightHorizontal\",\n\t\"lightVertical\",\n\t\"lightDown\",\n\t\"lightUp\",\n\t\"lightGrid\",\n\t\"lightTrellis\",\n\t\"gray125\",\n\t\"gray0625\"\n];\nvar rev_XLSBFillPTNames = (evert(XLSBFillPTNames));\n/* TODO: gradient fill representation */\nvar parse_BrtFill = parsenoop;\nfunction write_BrtFill(fill, o) {\n\tif(!o) o = new_buf(4*3 + 8*7 + 16*1);\n\tvar fls = rev_XLSBFillPTNames[fill.patternType];\n\tif(fls == null) fls = 0x28;\n\to.write_shift(4, fls);\n\tvar j = 0;\n\tif(fls != 0x28) {\n\t\t/* TODO: custom FG Color */\n\t\twrite_BrtColor({auto:1}, o);\n\t\t/* TODO: custom BG Color */\n\t\twrite_BrtColor({auto:1}, o);\n\n\t\tfor(; j < 12; ++j) o.write_shift(4, 0);\n\t} else {\n\t\tfor(; j < 4; ++j) o.write_shift(4, 0);\n\n\t\tfor(; j < 12; ++j) o.write_shift(4, 0); /* TODO */\n\t\t/* iGradientType */\n\t\t/* xnumDegree */\n\t\t/* xnumFillToLeft */\n\t\t/* xnumFillToRight */\n\t\t/* xnumFillToTop */\n\t\t/* xnumFillToBottom */\n\t\t/* cNumStop */\n\t\t/* xfillGradientStop */\n\t}\n\treturn o.length > o.l ? o.slice(0, o.l) : o;\n}\n\n/* [MS-XLSB] 2.4.824 BrtXF */\nfunction parse_BrtXF(data, length) {\n\tvar tgt = data.l + length;\n\tvar ixfeParent = data.read_shift(2);\n\tvar ifmt = data.read_shift(2);\n\tdata.l = tgt;\n\treturn {ixfe:ixfeParent, numFmtId:ifmt };\n}\nfunction write_BrtXF(data, ixfeP, o) {\n\tif(!o) o = new_buf(16);\n\to.write_shift(2, ixfeP||0);\n\to.write_shift(2, data.numFmtId||0);\n\to.write_shift(2, 0); /* iFont */\n\to.write_shift(2, 0); /* iFill */\n\to.write_shift(2, 0); /* ixBorder */\n\to.write_shift(1, 0); /* trot */\n\to.write_shift(1, 0); /* indent */\n\tvar flow = 0;\n\to.write_shift(1, flow); /* flags */\n\to.write_shift(1, 0); /* flags */\n\to.write_shift(1, 0); /* xfGrbitAtr */\n\to.write_shift(1, 0);\n\treturn o;\n}\n\n/* [MS-XLSB] 2.5.4 Blxf TODO */\nfunction write_Blxf(data, o) {\n\tif(!o) o = new_buf(10);\n\to.write_shift(1, 0); /* dg */\n\to.write_shift(1, 0);\n\to.write_shift(4, 0); /* color */\n\to.write_shift(4, 0); /* color */\n\treturn o;\n}\n/* [MS-XLSB] 2.4.302 BrtBorder TODO */\nvar parse_BrtBorder = parsenoop;\nfunction write_BrtBorder(border, o) {\n\tif(!o) o = new_buf(51);\n\to.write_shift(1, 0); /* diagonal */\n\twrite_Blxf(null, o); /* top */\n\twrite_Blxf(null, o); /* bottom */\n\twrite_Blxf(null, o); /* left */\n\twrite_Blxf(null, o); /* right */\n\twrite_Blxf(null, o); /* diag */\n\treturn o.length > o.l ? o.slice(0, o.l) : o;\n}\n\n/* [MS-XLSB] 2.4.763 BrtStyle TODO */\nfunction write_BrtStyle(style, o) {\n\tif(!o) o = new_buf(12+4*10);\n\to.write_shift(4, style.xfId);\n\to.write_shift(2, 1);\n\to.write_shift(1, +style.builtinId);\n\to.write_shift(1, 0); /* iLevel */\n\twrite_XLNullableWideString(style.name || \"\", o);\n\treturn o.length > o.l ? o.slice(0, o.l) : o;\n}\n\n/* [MS-XLSB] 2.4.272 BrtBeginTableStyles */\nfunction write_BrtBeginTableStyles(cnt, defTableStyle, defPivotStyle) {\n\tvar o = new_buf(4+256*2*4);\n\to.write_shift(4, cnt);\n\twrite_XLNullableWideString(defTableStyle, o);\n\twrite_XLNullableWideString(defPivotStyle, o);\n\treturn o.length > o.l ? o.slice(0, o.l) : o;\n}\n\n/* [MS-XLSB] 2.1.7.50 Styles */\nfunction parse_sty_bin(data, themes, opts) {\n\tvar styles = {};\n\tstyles.NumberFmt = ([]);\n\tfor(var y in SSF._table) styles.NumberFmt[y] = SSF._table[y];\n\n\tstyles.CellXf = [];\n\tstyles.Fonts = [];\n\tvar state = [];\n\tvar pass = false;\n\trecordhopper(data, function hopper_sty(val, R_n, RT) {\n\t\tswitch(RT) {\n\t\t\tcase 0x002C: /* 'BrtFmt' */\n\t\t\t\tstyles.NumberFmt[val[0]] = val[1]; SSF.load(val[1], val[0]);\n\t\t\t\tbreak;\n\t\t\tcase 0x002B: /* 'BrtFont' */\n\t\t\t\tstyles.Fonts.push(val);\n\t\t\t\tif(val.color.theme != null && themes && themes.themeElements && themes.themeElements.clrScheme) {\n\t\t\t\t\tval.color.rgb = rgb_tint(themes.themeElements.clrScheme[val.color.theme].rgb, val.color.tint || 0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 0x0401: /* 'BrtKnownFonts' */ break;\n\t\t\tcase 0x002D: /* 'BrtFill' */\n\t\t\t\tbreak;\n\t\t\tcase 0x002E: /* 'BrtBorder' */\n\t\t\t\tbreak;\n\t\t\tcase 0x002F: /* 'BrtXF' */\n\t\t\t\tif(state[state.length - 1] == \"BrtBeginCellXFs\") {\n\t\t\t\t\tstyles.CellXf.push(val);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 0x0030: /* 'BrtStyle' */\n\t\t\tcase 0x01FB: /* 'BrtDXF' */\n\t\t\tcase 0x023C: /* 'BrtMRUColor' */\n\t\t\tcase 0x01DB: /* 'BrtIndexedColor': */\n\t\t\t\tbreak;\n\n\t\t\tcase 0x0493: /* 'BrtDXF14' */\n\t\t\tcase 0x0836: /* 'BrtDXF15' */\n\t\t\tcase 0x046A: /* 'BrtSlicerStyleElement' */\n\t\t\tcase 0x0200: /* 'BrtTableStyleElement' */\n\t\t\tcase 0x082F: /* 'BrtTimelineStyleElement' */\n\t\t\tcase 0x0C00: /* 'BrtUid' */\n\t\t\t\tbreak;\n\n\t\t\tcase 0x0023: /* 'BrtFRTBegin' */\n\t\t\t\tpass = true; break;\n\t\t\tcase 0x0024: /* 'BrtFRTEnd' */\n\t\t\t\tpass = false; break;\n\t\t\tcase 0x0025: /* 'BrtACBegin' */\n\t\t\t\tstate.push(R_n); pass = true; break;\n\t\t\tcase 0x0026: /* 'BrtACEnd' */\n\t\t\t\tstate.pop(); pass = false; break;\n\n\t\t\tdefault:\n\t\t\t\tif((R_n||\"\").indexOf(\"Begin\") > 0) state.push(R_n);\n\t\t\t\telse if((R_n||\"\").indexOf(\"End\") > 0) state.pop();\n\t\t\t\telse if(!pass || (opts.WTF && state[state.length-1] != \"BrtACBegin\")) throw new Error(\"Unexpected record \" + RT + \" \" + R_n);\n\t\t}\n\t});\n\treturn styles;\n}\n\nfunction write_FMTS_bin(ba, NF) {\n\tif(!NF) return;\n\tvar cnt = 0;\n\t[[5,8],[23,26],[41,44],[/*63*/50,/*66],[164,*/392]].forEach(function(r) {\nfor(var i = r[0]; i <= r[1]; ++i) if(NF[i] != null) ++cnt;\n\t});\n\n\tif(cnt == 0) return;\n\twrite_record(ba, \"BrtBeginFmts\", write_UInt32LE(cnt));\n\t[[5,8],[23,26],[41,44],[/*63*/50,/*66],[164,*/392]].forEach(function(r) {\nfor(var i = r[0]; i <= r[1]; ++i) if(NF[i] != null) write_record(ba, \"BrtFmt\", write_BrtFmt(i, NF[i]));\n\t});\n\twrite_record(ba, \"BrtEndFmts\");\n}\n\nfunction write_FONTS_bin(ba) {\n\tvar cnt = 1;\n\n\tif(cnt == 0) return;\n\twrite_record(ba, \"BrtBeginFonts\", write_UInt32LE(cnt));\n\twrite_record(ba, \"BrtFont\", write_BrtFont({\n\t\tsz:12,\n\t\tcolor: {theme:1},\n\t\tname: \"Calibri\",\n\t\tfamily: 2,\n\t\tscheme: \"minor\"\n\t}));\n\t/* 1*65491BrtFont [ACFONTS] */\n\twrite_record(ba, \"BrtEndFonts\");\n}\n\nfunction write_FILLS_bin(ba) {\n\tvar cnt = 2;\n\n\tif(cnt == 0) return;\n\twrite_record(ba, \"BrtBeginFills\", write_UInt32LE(cnt));\n\twrite_record(ba, \"BrtFill\", write_BrtFill({patternType:\"none\"}));\n\twrite_record(ba, \"BrtFill\", write_BrtFill({patternType:\"gray125\"}));\n\t/* 1*65431BrtFill */\n\twrite_record(ba, \"BrtEndFills\");\n}\n\nfunction write_BORDERS_bin(ba) {\n\tvar cnt = 1;\n\n\tif(cnt == 0) return;\n\twrite_record(ba, \"BrtBeginBorders\", write_UInt32LE(cnt));\n\twrite_record(ba, \"BrtBorder\", write_BrtBorder({}));\n\t/* 1*65430BrtBorder */\n\twrite_record(ba, \"BrtEndBorders\");\n}\n\nfunction write_CELLSTYLEXFS_bin(ba) {\n\tvar cnt = 1;\n\twrite_record(ba, \"BrtBeginCellStyleXFs\", write_UInt32LE(cnt));\n\twrite_record(ba, \"BrtXF\", write_BrtXF({\n\t\tnumFmtId: 0,\n\t\tfontId:   0,\n\t\tfillId:   0,\n\t\tborderId: 0\n\t}, 0xFFFF));\n\t/* 1*65430(BrtXF *FRT) */\n\twrite_record(ba, \"BrtEndCellStyleXFs\");\n}\n\nfunction write_CELLXFS_bin(ba, data) {\n\twrite_record(ba, \"BrtBeginCellXFs\", write_UInt32LE(data.length));\n\tdata.forEach(function(c) { write_record(ba, \"BrtXF\", write_BrtXF(c,0)); });\n\t/* 1*65430(BrtXF *FRT) */\n\twrite_record(ba, \"BrtEndCellXFs\");\n}\n\nfunction write_STYLES_bin(ba) {\n\tvar cnt = 1;\n\n\twrite_record(ba, \"BrtBeginStyles\", write_UInt32LE(cnt));\n\twrite_record(ba, \"BrtStyle\", write_BrtStyle({\n\t\txfId:0,\n\t\tbuiltinId:0,\n\t\tname:\"Normal\"\n\t}));\n\t/* 1*65430(BrtStyle *FRT) */\n\twrite_record(ba, \"BrtEndStyles\");\n}\n\nfunction write_DXFS_bin(ba) {\n\tvar cnt = 0;\n\n\twrite_record(ba, \"BrtBeginDXFs\", write_UInt32LE(cnt));\n\t/* *2147483647(BrtDXF *FRT) */\n\twrite_record(ba, \"BrtEndDXFs\");\n}\n\nfunction write_TABLESTYLES_bin(ba) {\n\tvar cnt = 0;\n\n\twrite_record(ba, \"BrtBeginTableStyles\", write_BrtBeginTableStyles(cnt, \"TableStyleMedium9\", \"PivotStyleMedium4\"));\n\t/* *TABLESTYLE */\n\twrite_record(ba, \"BrtEndTableStyles\");\n}\n\nfunction write_COLORPALETTE_bin() {\n\treturn;\n\t/* BrtBeginColorPalette [INDEXEDCOLORS] [MRUCOLORS] BrtEndColorPalette */\n}\n\n/* [MS-XLSB] 2.1.7.50 Styles */\nfunction write_sty_bin(wb, opts) {\n\tvar ba = buf_array();\n\twrite_record(ba, \"BrtBeginStyleSheet\");\n\twrite_FMTS_bin(ba, wb.SSF);\n\twrite_FONTS_bin(ba, wb);\n\twrite_FILLS_bin(ba, wb);\n\twrite_BORDERS_bin(ba, wb);\n\twrite_CELLSTYLEXFS_bin(ba, wb);\n\twrite_CELLXFS_bin(ba, opts.cellXfs);\n\twrite_STYLES_bin(ba, wb);\n\twrite_DXFS_bin(ba, wb);\n\twrite_TABLESTYLES_bin(ba, wb);\n\twrite_COLORPALETTE_bin(ba, wb);\n\t/* FRTSTYLESHEET*/\n\twrite_record(ba, \"BrtEndStyleSheet\");\n\treturn ba.end();\n}\nRELS.THEME = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\";\n\n/* Even though theme layout is dk1 lt1 dk2 lt2, true order is lt1 dk1 lt2 dk2 */\nvar XLSXThemeClrScheme = [\n\t'</a:lt1>', '</a:dk1>', '</a:lt2>', '</a:dk2>',\n\t'</a:accent1>', '</a:accent2>', '</a:accent3>',\n\t'</a:accent4>', '</a:accent5>', '</a:accent6>',\n\t'</a:hlink>', '</a:folHlink>'\n];\n/* 20.1.6.2 clrScheme CT_ColorScheme */\nfunction parse_clrScheme(t, themes, opts) {\n\tthemes.themeElements.clrScheme = [];\n\tvar color = {};\n\t(t[0].match(tagregex)||[]).forEach(function(x) {\n\t\tvar y = parsexmltag(x);\n\t\tswitch(y[0]) {\n\t\t\t/* 20.1.6.2 clrScheme (Color Scheme) CT_ColorScheme */\n\t\t\tcase '<a:clrScheme': case '</a:clrScheme>': break;\n\n\t\t\t/* 20.1.2.3.32 srgbClr CT_SRgbColor */\n\t\t\tcase '<a:srgbClr':\n\t\t\t\tcolor.rgb = y.val; break;\n\n\t\t\t/* 20.1.2.3.33 sysClr CT_SystemColor */\n\t\t\tcase '<a:sysClr':\n\t\t\t\tcolor.rgb = y.lastClr; break;\n\n\t\t\t/* 20.1.4.1.1 accent1 (Accent 1) */\n\t\t\t/* 20.1.4.1.2 accent2 (Accent 2) */\n\t\t\t/* 20.1.4.1.3 accent3 (Accent 3) */\n\t\t\t/* 20.1.4.1.4 accent4 (Accent 4) */\n\t\t\t/* 20.1.4.1.5 accent5 (Accent 5) */\n\t\t\t/* 20.1.4.1.6 accent6 (Accent 6) */\n\t\t\t/* 20.1.4.1.9 dk1 (Dark 1) */\n\t\t\t/* 20.1.4.1.10 dk2 (Dark 2) */\n\t\t\t/* 20.1.4.1.15 folHlink (Followed Hyperlink) */\n\t\t\t/* 20.1.4.1.19 hlink (Hyperlink) */\n\t\t\t/* 20.1.4.1.22 lt1 (Light 1) */\n\t\t\t/* 20.1.4.1.23 lt2 (Light 2) */\n\t\t\tcase '<a:dk1>': case '</a:dk1>':\n\t\t\tcase '<a:lt1>': case '</a:lt1>':\n\t\t\tcase '<a:dk2>': case '</a:dk2>':\n\t\t\tcase '<a:lt2>': case '</a:lt2>':\n\t\t\tcase '<a:accent1>': case '</a:accent1>':\n\t\t\tcase '<a:accent2>': case '</a:accent2>':\n\t\t\tcase '<a:accent3>': case '</a:accent3>':\n\t\t\tcase '<a:accent4>': case '</a:accent4>':\n\t\t\tcase '<a:accent5>': case '</a:accent5>':\n\t\t\tcase '<a:accent6>': case '</a:accent6>':\n\t\t\tcase '<a:hlink>': case '</a:hlink>':\n\t\t\tcase '<a:folHlink>': case '</a:folHlink>':\n\t\t\t\tif (y[0].charAt(1) === '/') {\n\t\t\t\t\tthemes.themeElements.clrScheme[XLSXThemeClrScheme.indexOf(y[0])] = color;\n\t\t\t\t\tcolor = {};\n\t\t\t\t} else {\n\t\t\t\t\tcolor.name = y[0].slice(3, y[0].length - 1);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault: if(opts && opts.WTF) throw new Error('Unrecognized ' + y[0] + ' in clrScheme');\n\t\t}\n\t});\n}\n\n/* 20.1.4.1.18 fontScheme CT_FontScheme */\nfunction parse_fontScheme() { }\n\n/* 20.1.4.1.15 fmtScheme CT_StyleMatrix */\nfunction parse_fmtScheme() { }\n\nvar clrsregex = /<a:clrScheme([^>]*)>[\\s\\S]*<\\/a:clrScheme>/;\nvar fntsregex = /<a:fontScheme([^>]*)>[\\s\\S]*<\\/a:fontScheme>/;\nvar fmtsregex = /<a:fmtScheme([^>]*)>[\\s\\S]*<\\/a:fmtScheme>/;\n\n/* 20.1.6.10 themeElements CT_BaseStyles */\nfunction parse_themeElements(data, themes, opts) {\n\tthemes.themeElements = {};\n\n\tvar t;\n\n\t[\n\t\t/* clrScheme CT_ColorScheme */\n\t\t['clrScheme', clrsregex, parse_clrScheme],\n\t\t/* fontScheme CT_FontScheme */\n\t\t['fontScheme', fntsregex, parse_fontScheme],\n\t\t/* fmtScheme CT_StyleMatrix */\n\t\t['fmtScheme', fmtsregex, parse_fmtScheme]\n\t].forEach(function(m) {\n\t\tif(!(t=data.match(m[1]))) throw new Error(m[0] + ' not found in themeElements');\n\t\tm[2](t, themes, opts);\n\t});\n}\n\nvar themeltregex = /<a:themeElements([^>]*)>[\\s\\S]*<\\/a:themeElements>/;\n\n/* 14.2.7 Theme Part */\nfunction parse_theme_xml(data, opts) {\n\t/* 20.1.6.9 theme CT_OfficeStyleSheet */\n\tif(!data || data.length === 0) return parse_theme_xml(write_theme());\n\n\tvar t;\n\tvar themes = {};\n\n\t/* themeElements CT_BaseStyles */\n\tif(!(t=data.match(themeltregex))) throw new Error('themeElements not found in theme');\n\tparse_themeElements(t[0], themes, opts);\n\tthemes.raw = data;\n\treturn themes;\n}\n\nfunction write_theme(Themes, opts) {\n\tif(opts && opts.themeXLSX) return opts.themeXLSX;\n\tif(Themes && typeof Themes.raw == \"string\") return Themes.raw;\n\tvar o = [XML_HEADER];\n\to[o.length] = '<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\">';\n\to[o.length] =  '<a:themeElements>';\n\n\to[o.length] =   '<a:clrScheme name=\"Office\">';\n\to[o.length] =    '<a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1>';\n\to[o.length] =    '<a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1>';\n\to[o.length] =    '<a:dk2><a:srgbClr val=\"1F497D\"/></a:dk2>';\n\to[o.length] =    '<a:lt2><a:srgbClr val=\"EEECE1\"/></a:lt2>';\n\to[o.length] =    '<a:accent1><a:srgbClr val=\"4F81BD\"/></a:accent1>';\n\to[o.length] =    '<a:accent2><a:srgbClr val=\"C0504D\"/></a:accent2>';\n\to[o.length] =    '<a:accent3><a:srgbClr val=\"9BBB59\"/></a:accent3>';\n\to[o.length] =    '<a:accent4><a:srgbClr val=\"8064A2\"/></a:accent4>';\n\to[o.length] =    '<a:accent5><a:srgbClr val=\"4BACC6\"/></a:accent5>';\n\to[o.length] =    '<a:accent6><a:srgbClr val=\"F79646\"/></a:accent6>';\n\to[o.length] =    '<a:hlink><a:srgbClr val=\"0000FF\"/></a:hlink>';\n\to[o.length] =    '<a:folHlink><a:srgbClr val=\"800080\"/></a:folHlink>';\n\to[o.length] =   '</a:clrScheme>';\n\n\to[o.length] =   '<a:fontScheme name=\"Office\">';\n\to[o.length] =    '<a:majorFont>';\n\to[o.length] =     '<a:latin typeface=\"Cambria\"/>';\n\to[o.length] =     '<a:ea typeface=\"\"/>';\n\to[o.length] =     '<a:cs typeface=\"\"/>';\n\to[o.length] =     '<a:font script=\"Jpan\" typeface=\"ＭＳ Ｐゴシック\"/>';\n\to[o.length] =     '<a:font script=\"Hang\" typeface=\"맑은 고딕\"/>';\n\to[o.length] =     '<a:font script=\"Hans\" typeface=\"宋体\"/>';\n\to[o.length] =     '<a:font script=\"Hant\" typeface=\"新細明體\"/>';\n\to[o.length] =     '<a:font script=\"Arab\" typeface=\"Times New Roman\"/>';\n\to[o.length] =     '<a:font script=\"Hebr\" typeface=\"Times New Roman\"/>';\n\to[o.length] =     '<a:font script=\"Thai\" typeface=\"Tahoma\"/>';\n\to[o.length] =     '<a:font script=\"Ethi\" typeface=\"Nyala\"/>';\n\to[o.length] =     '<a:font script=\"Beng\" typeface=\"Vrinda\"/>';\n\to[o.length] =     '<a:font script=\"Gujr\" typeface=\"Shruti\"/>';\n\to[o.length] =     '<a:font script=\"Khmr\" typeface=\"MoolBoran\"/>';\n\to[o.length] =     '<a:font script=\"Knda\" typeface=\"Tunga\"/>';\n\to[o.length] =     '<a:font script=\"Guru\" typeface=\"Raavi\"/>';\n\to[o.length] =     '<a:font script=\"Cans\" typeface=\"Euphemia\"/>';\n\to[o.length] =     '<a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/>';\n\to[o.length] =     '<a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/>';\n\to[o.length] =     '<a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/>';\n\to[o.length] =     '<a:font script=\"Thaa\" typeface=\"MV Boli\"/>';\n\to[o.length] =     '<a:font script=\"Deva\" typeface=\"Mangal\"/>';\n\to[o.length] =     '<a:font script=\"Telu\" typeface=\"Gautami\"/>';\n\to[o.length] =     '<a:font script=\"Taml\" typeface=\"Latha\"/>';\n\to[o.length] =     '<a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/>';\n\to[o.length] =     '<a:font script=\"Orya\" typeface=\"Kalinga\"/>';\n\to[o.length] =     '<a:font script=\"Mlym\" typeface=\"Kartika\"/>';\n\to[o.length] =     '<a:font script=\"Laoo\" typeface=\"DokChampa\"/>';\n\to[o.length] =     '<a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/>';\n\to[o.length] =     '<a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/>';\n\to[o.length] =     '<a:font script=\"Viet\" typeface=\"Times New Roman\"/>';\n\to[o.length] =     '<a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/>';\n\to[o.length] =     '<a:font script=\"Geor\" typeface=\"Sylfaen\"/>';\n\to[o.length] =    '</a:majorFont>';\n\to[o.length] =    '<a:minorFont>';\n\to[o.length] =     '<a:latin typeface=\"Calibri\"/>';\n\to[o.length] =     '<a:ea typeface=\"\"/>';\n\to[o.length] =     '<a:cs typeface=\"\"/>';\n\to[o.length] =     '<a:font script=\"Jpan\" typeface=\"ＭＳ Ｐゴシック\"/>';\n\to[o.length] =     '<a:font script=\"Hang\" typeface=\"맑은 고딕\"/>';\n\to[o.length] =     '<a:font script=\"Hans\" typeface=\"宋体\"/>';\n\to[o.length] =     '<a:font script=\"Hant\" typeface=\"新細明體\"/>';\n\to[o.length] =     '<a:font script=\"Arab\" typeface=\"Arial\"/>';\n\to[o.length] =     '<a:font script=\"Hebr\" typeface=\"Arial\"/>';\n\to[o.length] =     '<a:font script=\"Thai\" typeface=\"Tahoma\"/>';\n\to[o.length] =     '<a:font script=\"Ethi\" typeface=\"Nyala\"/>';\n\to[o.length] =     '<a:font script=\"Beng\" typeface=\"Vrinda\"/>';\n\to[o.length] =     '<a:font script=\"Gujr\" typeface=\"Shruti\"/>';\n\to[o.length] =     '<a:font script=\"Khmr\" typeface=\"DaunPenh\"/>';\n\to[o.length] =     '<a:font script=\"Knda\" typeface=\"Tunga\"/>';\n\to[o.length] =     '<a:font script=\"Guru\" typeface=\"Raavi\"/>';\n\to[o.length] =     '<a:font script=\"Cans\" typeface=\"Euphemia\"/>';\n\to[o.length] =     '<a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/>';\n\to[o.length] =     '<a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/>';\n\to[o.length] =     '<a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/>';\n\to[o.length] =     '<a:font script=\"Thaa\" typeface=\"MV Boli\"/>';\n\to[o.length] =     '<a:font script=\"Deva\" typeface=\"Mangal\"/>';\n\to[o.length] =     '<a:font script=\"Telu\" typeface=\"Gautami\"/>';\n\to[o.length] =     '<a:font script=\"Taml\" typeface=\"Latha\"/>';\n\to[o.length] =     '<a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/>';\n\to[o.length] =     '<a:font script=\"Orya\" typeface=\"Kalinga\"/>';\n\to[o.length] =     '<a:font script=\"Mlym\" typeface=\"Kartika\"/>';\n\to[o.length] =     '<a:font script=\"Laoo\" typeface=\"DokChampa\"/>';\n\to[o.length] =     '<a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/>';\n\to[o.length] =     '<a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/>';\n\to[o.length] =     '<a:font script=\"Viet\" typeface=\"Arial\"/>';\n\to[o.length] =     '<a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/>';\n\to[o.length] =     '<a:font script=\"Geor\" typeface=\"Sylfaen\"/>';\n\to[o.length] =    '</a:minorFont>';\n\to[o.length] =   '</a:fontScheme>';\n\n\to[o.length] =   '<a:fmtScheme name=\"Office\">';\n\to[o.length] =    '<a:fillStyleLst>';\n\to[o.length] =     '<a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill>';\n\to[o.length] =     '<a:gradFill rotWithShape=\"1\">';\n\to[o.length] =      '<a:gsLst>';\n\to[o.length] =       '<a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"50000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs>';\n\to[o.length] =       '<a:gs pos=\"35000\"><a:schemeClr val=\"phClr\"><a:tint val=\"37000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs>';\n\to[o.length] =       '<a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:tint val=\"15000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs>';\n\to[o.length] =      '</a:gsLst>';\n\to[o.length] =      '<a:lin ang=\"16200000\" scaled=\"1\"/>';\n\to[o.length] =     '</a:gradFill>';\n\to[o.length] =     '<a:gradFill rotWithShape=\"1\">';\n\to[o.length] =      '<a:gsLst>';\n\to[o.length] =       '<a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"100000\"/><a:shade val=\"100000\"/><a:satMod val=\"130000\"/></a:schemeClr></a:gs>';\n\to[o.length] =       '<a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:tint val=\"50000\"/><a:shade val=\"100000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs>';\n\to[o.length] =      '</a:gsLst>';\n\to[o.length] =      '<a:lin ang=\"16200000\" scaled=\"0\"/>';\n\to[o.length] =     '</a:gradFill>';\n\to[o.length] =    '</a:fillStyleLst>';\n\to[o.length] =    '<a:lnStyleLst>';\n\to[o.length] =     '<a:ln w=\"9525\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"><a:shade val=\"95000\"/><a:satMod val=\"105000\"/></a:schemeClr></a:solidFill><a:prstDash val=\"solid\"/></a:ln>';\n\to[o.length] =     '<a:ln w=\"25400\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/></a:ln>';\n\to[o.length] =     '<a:ln w=\"38100\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/></a:ln>';\n\to[o.length] =    '</a:lnStyleLst>';\n\to[o.length] =    '<a:effectStyleLst>';\n\to[o.length] =     '<a:effectStyle>';\n\to[o.length] =      '<a:effectLst>';\n\to[o.length] =       '<a:outerShdw blurRad=\"40000\" dist=\"20000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"38000\"/></a:srgbClr></a:outerShdw>';\n\to[o.length] =      '</a:effectLst>';\n\to[o.length] =     '</a:effectStyle>';\n\to[o.length] =     '<a:effectStyle>';\n\to[o.length] =      '<a:effectLst>';\n\to[o.length] =       '<a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"35000\"/></a:srgbClr></a:outerShdw>';\n\to[o.length] =      '</a:effectLst>';\n\to[o.length] =     '</a:effectStyle>';\n\to[o.length] =     '<a:effectStyle>';\n\to[o.length] =      '<a:effectLst>';\n\to[o.length] =       '<a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"35000\"/></a:srgbClr></a:outerShdw>';\n\to[o.length] =      '</a:effectLst>';\n\to[o.length] =      '<a:scene3d><a:camera prst=\"orthographicFront\"><a:rot lat=\"0\" lon=\"0\" rev=\"0\"/></a:camera><a:lightRig rig=\"threePt\" dir=\"t\"><a:rot lat=\"0\" lon=\"0\" rev=\"1200000\"/></a:lightRig></a:scene3d>';\n\to[o.length] =      '<a:sp3d><a:bevelT w=\"63500\" h=\"25400\"/></a:sp3d>';\n\to[o.length] =     '</a:effectStyle>';\n\to[o.length] =    '</a:effectStyleLst>';\n\to[o.length] =    '<a:bgFillStyleLst>';\n\to[o.length] =     '<a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill>';\n\to[o.length] =     '<a:gradFill rotWithShape=\"1\">';\n\to[o.length] =      '<a:gsLst>';\n\to[o.length] =       '<a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"40000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs>';\n\to[o.length] =       '<a:gs pos=\"40000\"><a:schemeClr val=\"phClr\"><a:tint val=\"45000\"/><a:shade val=\"99000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs>';\n\to[o.length] =       '<a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"20000\"/><a:satMod val=\"255000\"/></a:schemeClr></a:gs>';\n\to[o.length] =      '</a:gsLst>';\n\to[o.length] =      '<a:path path=\"circle\"><a:fillToRect l=\"50000\" t=\"-80000\" r=\"50000\" b=\"180000\"/></a:path>';\n\to[o.length] =     '</a:gradFill>';\n\to[o.length] =     '<a:gradFill rotWithShape=\"1\">';\n\to[o.length] =      '<a:gsLst>';\n\to[o.length] =       '<a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"80000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs>';\n\to[o.length] =       '<a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"30000\"/><a:satMod val=\"200000\"/></a:schemeClr></a:gs>';\n\to[o.length] =      '</a:gsLst>';\n\to[o.length] =      '<a:path path=\"circle\"><a:fillToRect l=\"50000\" t=\"50000\" r=\"50000\" b=\"50000\"/></a:path>';\n\to[o.length] =     '</a:gradFill>';\n\to[o.length] =    '</a:bgFillStyleLst>';\n\to[o.length] =   '</a:fmtScheme>';\n\to[o.length] =  '</a:themeElements>';\n\n\to[o.length] =  '<a:objectDefaults>';\n\to[o.length] =   '<a:spDef>';\n\to[o.length] =    '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx=\"1\"><a:schemeClr val=\"accent1\"/></a:lnRef><a:fillRef idx=\"3\"><a:schemeClr val=\"accent1\"/></a:fillRef><a:effectRef idx=\"2\"><a:schemeClr val=\"accent1\"/></a:effectRef><a:fontRef idx=\"minor\"><a:schemeClr val=\"lt1\"/></a:fontRef></a:style>';\n\to[o.length] =   '</a:spDef>';\n\to[o.length] =   '<a:lnDef>';\n\to[o.length] =    '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx=\"2\"><a:schemeClr val=\"accent1\"/></a:lnRef><a:fillRef idx=\"0\"><a:schemeClr val=\"accent1\"/></a:fillRef><a:effectRef idx=\"1\"><a:schemeClr val=\"accent1\"/></a:effectRef><a:fontRef idx=\"minor\"><a:schemeClr val=\"tx1\"/></a:fontRef></a:style>';\n\to[o.length] =   '</a:lnDef>';\n\to[o.length] =  '</a:objectDefaults>';\n\to[o.length] =  '<a:extraClrSchemeLst/>';\n\to[o.length] = '</a:theme>';\n\treturn o.join(\"\");\n}\n/* [MS-XLS] 2.4.326 TODO: payload is a zip file */\nfunction parse_Theme(blob, length, opts) {\n\tvar end = blob.l + length;\n\tvar dwThemeVersion = blob.read_shift(4);\n\tif(dwThemeVersion === 124226) return;\n\tif(!opts.cellStyles) { blob.l = end; return; }\n\tvar data = blob.slice(blob.l);\n\tblob.l = end;\n\tvar zip; try { zip = zip_read(data, {type: \"array\"}); } catch(e) { return; }\n\tvar themeXML = getzipstr(zip, \"theme/theme/theme1.xml\", true);\n\tif(!themeXML) return;\n\treturn parse_theme_xml(themeXML, opts);\n}\n\n/* 2.5.49 */\nfunction parse_ColorTheme(blob) { return blob.read_shift(4); }\n\n/* 2.5.155 */\nfunction parse_FullColorExt(blob) {\n\tvar o = {};\n\to.xclrType = blob.read_shift(2);\n\to.nTintShade = blob.read_shift(2);\n\tswitch(o.xclrType) {\n\t\tcase 0: blob.l += 4; break;\n\t\tcase 1: o.xclrValue = parse_IcvXF(blob, 4); break;\n\t\tcase 2: o.xclrValue = parse_LongRGBA(blob, 4); break;\n\t\tcase 3: o.xclrValue = parse_ColorTheme(blob, 4); break;\n\t\tcase 4: blob.l += 4; break;\n\t}\n\tblob.l += 8;\n\treturn o;\n}\n\n/* 2.5.164 TODO: read 7 bits*/\nfunction parse_IcvXF(blob, length) {\n\treturn parsenoop(blob, length);\n}\n\n/* 2.5.280 */\nfunction parse_XFExtGradient(blob, length) {\n\treturn parsenoop(blob, length);\n}\n\n/* [MS-XLS] 2.5.108 */\nfunction parse_ExtProp(blob) {\n\tvar extType = blob.read_shift(2);\n\tvar cb = blob.read_shift(2) - 4;\n\tvar o = [extType];\n\tswitch(extType) {\n\t\tcase 0x04: case 0x05: case 0x07: case 0x08:\n\t\tcase 0x09: case 0x0A: case 0x0B: case 0x0D:\n\t\t\to[1] = parse_FullColorExt(blob, cb); break;\n\t\tcase 0x06: o[1] = parse_XFExtGradient(blob, cb); break;\n\t\tcase 0x0E: case 0x0F: o[1] = blob.read_shift(cb === 1 ? 1 : 2); break;\n\t\tdefault: throw new Error(\"Unrecognized ExtProp type: \" + extType + \" \" + cb);\n\t}\n\treturn o;\n}\n\n/* 2.4.355 */\nfunction parse_XFExt(blob, length) {\n\tvar end = blob.l + length;\n\tblob.l += 2;\n\tvar ixfe = blob.read_shift(2);\n\tblob.l += 2;\n\tvar cexts = blob.read_shift(2);\n\tvar ext = [];\n\twhile(cexts-- > 0) ext.push(parse_ExtProp(blob, end-blob.l));\n\treturn {ixfe:ixfe, ext:ext};\n}\n\n/* xf is an XF, see parse_XFExt for xfext */\nfunction update_xfext(xf, xfext) {\n\txfext.forEach(function(xfe) {\n\t\tswitch(xfe[0]) { /* 2.5.108 extPropData */\n\t\t\tcase 0x04: break; /* foreground color */\n\t\t\tcase 0x05: break; /* background color */\n\t\t\tcase 0x06: break; /* gradient fill */\n\t\t\tcase 0x07: break; /* top cell border color */\n\t\t\tcase 0x08: break; /* bottom cell border color */\n\t\t\tcase 0x09: break; /* left cell border color */\n\t\t\tcase 0x0a: break; /* right cell border color */\n\t\t\tcase 0x0b: break; /* diagonal cell border color */\n\t\t\tcase 0x0d: /* text color */\n\t\t\t\tbreak;\n\t\t\tcase 0x0e: break; /* font scheme */\n\t\t\tcase 0x0f: break; /* indentation level */\n\t\t}\n\t});\n}\n\n/* 18.6 Calculation Chain */\nfunction parse_cc_xml(data) {\n\tvar d = [];\n\tif(!data) return d;\n\tvar i = 1;\n\t(data.match(tagregex)||[]).forEach(function(x) {\n\t\tvar y = parsexmltag(x);\n\t\tswitch(y[0]) {\n\t\t\tcase '<?xml': break;\n\t\t\t/* 18.6.2  calcChain CT_CalcChain 1 */\n\t\t\tcase '<calcChain': case '<calcChain>': case '</calcChain>': break;\n\t\t\t/* 18.6.1  c CT_CalcCell 1 */\n\t\t\tcase '<c': delete y[0]; if(y.i) i = y.i; else y.i = i; d.push(y); break;\n\t\t}\n\t});\n\treturn d;\n}\n\n//function write_cc_xml(data, opts) { }\n\n/* [MS-XLSB] 2.6.4.1 */\nfunction parse_BrtCalcChainItem$(data) {\n\tvar out = {};\n\tout.i = data.read_shift(4);\n\tvar cell = {};\n\tcell.r = data.read_shift(4);\n\tcell.c = data.read_shift(4);\n\tout.r = encode_cell(cell);\n\tvar flags = data.read_shift(1);\n\tif(flags & 0x2) out.l = '1';\n\tif(flags & 0x8) out.a = '1';\n\treturn out;\n}\n\n/* 18.6 Calculation Chain */\nfunction parse_cc_bin(data, name, opts) {\n\tvar out = [];\n\tvar pass = false;\n\trecordhopper(data, function hopper_cc(val, R_n, RT) {\n\t\tswitch(RT) {\n\t\t\tcase 0x003F: /* 'BrtCalcChainItem$' */\n\t\t\t\tout.push(val); break;\n\n\t\t\tdefault:\n\t\t\t\tif((R_n||\"\").indexOf(\"Begin\") > 0){/* empty */}\n\t\t\t\telse if((R_n||\"\").indexOf(\"End\") > 0){/* empty */}\n\t\t\t\telse if(!pass || opts.WTF) throw new Error(\"Unexpected record \" + RT + \" \" + R_n);\n\t\t}\n\t});\n\treturn out;\n}\n\n//function write_cc_bin(data, opts) { }\n/* 18.14 Supplementary Workbook Data */\nfunction parse_xlink_xml() {\n\t//var opts = _opts || {};\n\t//if(opts.WTF) throw \"XLSX External Link\";\n}\n\n/* [MS-XLSB] 2.1.7.25 External Link */\nfunction parse_xlink_bin(data, rel, name, _opts) {\n\tif(!data) return data;\n\tvar opts = _opts || {};\n\n\tvar pass = false, end = false;\n\n\trecordhopper(data, function xlink_parse(val, R_n, RT) {\n\t\tif(end) return;\n\t\tswitch(RT) {\n\t\t\tcase 0x0167: /* 'BrtSupTabs' */\n\t\t\tcase 0x016B: /* 'BrtExternTableStart' */\n\t\t\tcase 0x016C: /* 'BrtExternTableEnd' */\n\t\t\tcase 0x016E: /* 'BrtExternRowHdr' */\n\t\t\tcase 0x016F: /* 'BrtExternCellBlank' */\n\t\t\tcase 0x0170: /* 'BrtExternCellReal' */\n\t\t\tcase 0x0171: /* 'BrtExternCellBool' */\n\t\t\tcase 0x0172: /* 'BrtExternCellError' */\n\t\t\tcase 0x0173: /* 'BrtExternCellString' */\n\t\t\tcase 0x01D8: /* 'BrtExternValueMeta' */\n\t\t\tcase 0x0241: /* 'BrtSupNameStart' */\n\t\t\tcase 0x0242: /* 'BrtSupNameValueStart' */\n\t\t\tcase 0x0243: /* 'BrtSupNameValueEnd' */\n\t\t\tcase 0x0244: /* 'BrtSupNameNum' */\n\t\t\tcase 0x0245: /* 'BrtSupNameErr' */\n\t\t\tcase 0x0246: /* 'BrtSupNameSt' */\n\t\t\tcase 0x0247: /* 'BrtSupNameNil' */\n\t\t\tcase 0x0248: /* 'BrtSupNameBool' */\n\t\t\tcase 0x0249: /* 'BrtSupNameFmla' */\n\t\t\tcase 0x024A: /* 'BrtSupNameBits' */\n\t\t\tcase 0x024B: /* 'BrtSupNameEnd' */\n\t\t\t\tbreak;\n\n\t\t\tcase 0x0023: /* 'BrtFRTBegin' */\n\t\t\t\tpass = true; break;\n\t\t\tcase 0x0024: /* 'BrtFRTEnd' */\n\t\t\t\tpass = false; break;\n\n\t\t\tdefault:\n\t\t\t\tif((R_n||\"\").indexOf(\"Begin\") > 0){/* empty */}\n\t\t\t\telse if((R_n||\"\").indexOf(\"End\") > 0){/* empty */}\n\t\t\t\telse if(!pass || opts.WTF) throw new Error(\"Unexpected record \" + RT.toString(16) + \" \" + R_n);\n\t\t}\n\t}, opts);\n}\n/* 20.5 DrawingML - SpreadsheetML Drawing */\nRELS.IMG = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\";\nRELS.DRAW = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing\";\n\n/* 20.5.2.35 wsDr CT_Drawing */\nfunction parse_drawing(data, rels) {\n\tif(!data) return \"??\";\n\t/*\n\t  Chartsheet Drawing:\n\t   - 20.5.2.35 wsDr CT_Drawing\n\t    - 20.5.2.1  absoluteAnchor CT_AbsoluteAnchor\n\t     - 20.5.2.16 graphicFrame CT_GraphicalObjectFrame\n\t      - 20.1.2.2.16 graphic CT_GraphicalObject\n\t       - 20.1.2.2.17 graphicData CT_GraphicalObjectData\n          - chart reference\n\t   the actual type is based on the URI of the graphicData\n\t\tTODO: handle embedded charts and other types of graphics\n\t*/\n\tvar id = (data.match(/<c:chart [^>]*r:id=\"([^\"]*)\"/)||[\"\",\"\"])[1];\n\n\treturn rels['!id'][id].Target;\n}\n\n/* L.5.5.2 SpreadsheetML Comments + VML Schema */\nvar _shapeid = 1024;\nfunction write_comments_vml(rId, comments) {\n\tvar csize = [21600, 21600];\n\t/* L.5.2.1.2 Path Attribute */\n\tvar bbox = [\"m0,0l0\",csize[1],csize[0],csize[1],csize[0],\"0xe\"].join(\",\");\n\tvar o = [\n\t\twritextag(\"xml\", null, { 'xmlns:v': XLMLNS.v, 'xmlns:o': XLMLNS.o, 'xmlns:x': XLMLNS.x, 'xmlns:mv': XLMLNS.mv }).replace(/\\/>/,\">\"),\n\t\twritextag(\"o:shapelayout\", writextag(\"o:idmap\", null, {'v:ext':\"edit\", 'data':rId}), {'v:ext':\"edit\"}),\n\t\twritextag(\"v:shapetype\", [\n\t\t\twritextag(\"v:stroke\", null, {joinstyle:\"miter\"}),\n\t\t\twritextag(\"v:path\", null, {gradientshapeok:\"t\", 'o:connecttype':\"rect\"})\n\t\t].join(\"\"), {id:\"_x0000_t202\", 'o:spt':202, coordsize:csize.join(\",\"),path:bbox})\n\t];\n\twhile(_shapeid < rId * 1000) _shapeid += 1000;\n\n\tcomments.forEach(function(x) {\n\tvar c = decode_cell(x[0]);\n\tvar fillopts = {'color2':\"#BEFF82\", 'type':\"gradient\"};\n\tif(fillopts.type == \"gradient\") fillopts.angle = \"-180\";\n\tvar fillparm = fillopts.type == \"gradient\" ? writextag(\"o:fill\", null, {type:\"gradientUnscaled\", 'v:ext':\"view\"}) : null;\n\tvar fillxml = writextag('v:fill', fillparm, fillopts);\n\n\tvar shadata = ({on:\"t\", 'obscured':\"t\"});\n\t++_shapeid;\n\n\to = o.concat([\n\t'<v:shape' + wxt_helper({\n\t\tid:'_x0000_s' + _shapeid,\n\t\ttype:\"#_x0000_t202\",\n\t\tstyle:\"position:absolute; margin-left:80pt;margin-top:5pt;width:104pt;height:64pt;z-index:10\" + (x[1].hidden ? \";visibility:hidden\" : \"\") ,\n\t\tfillcolor:\"#ECFAD4\",\n\t\tstrokecolor:\"#edeaa1\"\n\t}) + '>',\n\t\tfillxml,\n\t\twritextag(\"v:shadow\", null, shadata),\n\t\twritextag(\"v:path\", null, {'o:connecttype':\"none\"}),\n\t\t'<v:textbox><div style=\"text-align:left\"></div></v:textbox>',\n\t\t'<x:ClientData ObjectType=\"Note\">',\n\t\t\t'<x:MoveWithCells/>',\n\t\t\t'<x:SizeWithCells/>',\n\t\t\t/* Part 4 19.4.2.3 Anchor (Anchor) */\n\t\t\twritetag('x:Anchor', [c.c+1, 0, c.r+1, 0, c.c+3, 20, c.r+5, 20].join(\",\")),\n\t\t\twritetag('x:AutoFill', \"False\"),\n\t\t\twritetag('x:Row', String(c.r)),\n\t\t\twritetag('x:Column', String(c.c)),\n\t\t\tx[1].hidden ? '' : '<x:Visible/>',\n\t\t'</x:ClientData>',\n\t'</v:shape>'\n\t]); });\n\to.push('</xml>');\n\treturn o.join(\"\");\n}\nRELS.CMNT = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments\";\n\nfunction sheet_insert_comments(sheet, comments) {\n\tvar dense = Array.isArray(sheet);\n\tvar cell;\n\tcomments.forEach(function(comment) {\n\t\tvar r = decode_cell(comment.ref);\n\t\tif(dense) {\n\t\t\tif(!sheet[r.r]) sheet[r.r] = [];\n\t\t\tcell = sheet[r.r][r.c];\n\t\t} else cell = sheet[comment.ref];\n\t\tif (!cell) {\n\t\t\tcell = ({t:\"z\"});\n\t\t\tif(dense) sheet[r.r][r.c] = cell;\n\t\t\telse sheet[comment.ref] = cell;\n\t\t\tvar range = safe_decode_range(sheet[\"!ref\"]||\"BDWGO1000001:A1\");\n\t\t\tif(range.s.r > r.r) range.s.r = r.r;\n\t\t\tif(range.e.r < r.r) range.e.r = r.r;\n\t\t\tif(range.s.c > r.c) range.s.c = r.c;\n\t\t\tif(range.e.c < r.c) range.e.c = r.c;\n\t\t\tvar encoded = encode_range(range);\n\t\t\tif (encoded !== sheet[\"!ref\"]) sheet[\"!ref\"] = encoded;\n\t\t}\n\n\t\tif (!cell.c) cell.c = [];\n\t\tvar o = ({a: comment.author, t: comment.t, r: comment.r});\n\t\tif(comment.h) o.h = comment.h;\n\t\tcell.c.push(o);\n\t});\n}\n\n/* 18.7 Comments */\nfunction parse_comments_xml(data, opts) {\n\t/* 18.7.6 CT_Comments */\n\tif(data.match(/<(?:\\w+:)?comments *\\/>/)) return [];\n\tvar authors = [];\n\tvar commentList = [];\n\tvar authtag = data.match(/<(?:\\w+:)?authors>([\\s\\S]*)<\\/(?:\\w+:)?authors>/);\n\tif(authtag && authtag[1]) authtag[1].split(/<\\/\\w*:?author>/).forEach(function(x) {\n\t\tif(x === \"\" || x.trim() === \"\") return;\n\t\tvar a = x.match(/<(?:\\w+:)?author[^>]*>(.*)/);\n\t\tif(a) authors.push(a[1]);\n\t});\n\tvar cmnttag = data.match(/<(?:\\w+:)?commentList>([\\s\\S]*)<\\/(?:\\w+:)?commentList>/);\n\tif(cmnttag && cmnttag[1]) cmnttag[1].split(/<\\/\\w*:?comment>/).forEach(function(x) {\n\t\tif(x === \"\" || x.trim() === \"\") return;\n\t\tvar cm = x.match(/<(?:\\w+:)?comment[^>]*>/);\n\t\tif(!cm) return;\n\t\tvar y = parsexmltag(cm[0]);\n\t\tvar comment = ({ author: y.authorId && authors[y.authorId] || \"sheetjsghost\", ref: y.ref, guid: y.guid });\n\t\tvar cell = decode_cell(y.ref);\n\t\tif(opts.sheetRows && opts.sheetRows <= cell.r) return;\n\t\tvar textMatch = x.match(/<(?:\\w+:)?text>([\\s\\S]*)<\\/(?:\\w+:)?text>/);\n\t\tvar rt = !!textMatch && !!textMatch[1] && parse_si(textMatch[1]) || {r:\"\",t:\"\",h:\"\"};\n\t\tcomment.r = rt.r;\n\t\tif(rt.r == \"<t></t>\") rt.t = rt.h = \"\";\n\t\tcomment.t = (rt.t||\"\").replace(/\\r\\n/g,\"\\n\").replace(/\\r/g,\"\\n\");\n\t\tif(opts.cellHTML) comment.h = rt.h;\n\t\tcommentList.push(comment);\n\t});\n\treturn commentList;\n}\n\nvar CMNT_XML_ROOT = writextag('comments', null, { 'xmlns': XMLNS.main[0] });\nfunction write_comments_xml(data) {\n\tvar o = [XML_HEADER, CMNT_XML_ROOT];\n\n\tvar iauthor = [];\n\to.push(\"<authors>\");\n\tdata.forEach(function(x) { x[1].forEach(function(w) { var a = escapexml(w.a);\n\t\tif(iauthor.indexOf(a) > -1) return;\n\t\tiauthor.push(a);\n\t\to.push(\"<author>\" + a + \"</author>\");\n\t}); });\n\to.push(\"</authors>\");\n\to.push(\"<commentList>\");\n\tdata.forEach(function(d) {\n\t\td[1].forEach(function(c) {\n\t\t\t/* 18.7.3 CT_Comment */\n\t\t\to.push('<comment ref=\"' + d[0] + '\" authorId=\"' + iauthor.indexOf(escapexml(c.a)) + '\"><text>');\n\t\t\to.push(writetag(\"t\", c.t == null ? \"\" : escapexml(c.t)));\n\t\t\to.push('</text></comment>');\n\t\t});\n\t});\n\to.push(\"</commentList>\");\n\tif(o.length>2) { o[o.length] = ('</comments>'); o[1]=o[1].replace(\"/>\",\">\"); }\n\treturn o.join(\"\");\n}\n/* [MS-XLSB] 2.4.28 BrtBeginComment */\nfunction parse_BrtBeginComment(data) {\n\tvar out = {};\n\tout.iauthor = data.read_shift(4);\n\tvar rfx = parse_UncheckedRfX(data, 16);\n\tout.rfx = rfx.s;\n\tout.ref = encode_cell(rfx.s);\n\tdata.l += 16; /*var guid = parse_GUID(data); */\n\treturn out;\n}\nfunction write_BrtBeginComment(data, o) {\n\tif(o == null) o = new_buf(36);\n\to.write_shift(4, data[1].iauthor);\n\twrite_UncheckedRfX((data[0]), o);\n\to.write_shift(4, 0);\n\to.write_shift(4, 0);\n\to.write_shift(4, 0);\n\to.write_shift(4, 0);\n\treturn o;\n}\n\n/* [MS-XLSB] 2.4.327 BrtCommentAuthor */\nvar parse_BrtCommentAuthor = parse_XLWideString;\nfunction write_BrtCommentAuthor(data) { return write_XLWideString(data.slice(0, 54)); }\n\n/* [MS-XLSB] 2.1.7.8 Comments */\nfunction parse_comments_bin(data, opts) {\n\tvar out = [];\n\tvar authors = [];\n\tvar c = {};\n\tvar pass = false;\n\trecordhopper(data, function hopper_cmnt(val, R_n, RT) {\n\t\tswitch(RT) {\n\t\t\tcase 0x0278: /* 'BrtCommentAuthor' */\n\t\t\t\tauthors.push(val); break;\n\t\t\tcase 0x027B: /* 'BrtBeginComment' */\n\t\t\t\tc = val; break;\n\t\t\tcase 0x027D: /* 'BrtCommentText' */\n\t\t\t\tc.t = val.t; c.h = val.h; c.r = val.r; break;\n\t\t\tcase 0x027C: /* 'BrtEndComment' */\n\t\t\t\tc.author = authors[c.iauthor];\n\t\t\t\tdelete (c).iauthor;\n\t\t\t\tif(opts.sheetRows && c.rfx && opts.sheetRows <= c.rfx.r) break;\n\t\t\t\tif(!c.t) c.t = \"\";\n\t\t\t\tdelete c.rfx; out.push(c); break;\n\n\t\t\tcase 0x0C00: /* 'BrtUid' */\n\t\t\t\tbreak;\n\n\t\t\tcase 0x0023: /* 'BrtFRTBegin' */\n\t\t\t\tpass = true; break;\n\t\t\tcase 0x0024: /* 'BrtFRTEnd' */\n\t\t\t\tpass = false; break;\n\t\t\tcase 0x0025: /* 'BrtACBegin' */ break;\n\t\t\tcase 0x0026: /* 'BrtACEnd' */ break;\n\n\n\t\t\tdefault:\n\t\t\t\tif((R_n||\"\").indexOf(\"Begin\") > 0){/* empty */}\n\t\t\t\telse if((R_n||\"\").indexOf(\"End\") > 0){/* empty */}\n\t\t\t\telse if(!pass || opts.WTF) throw new Error(\"Unexpected record \" + RT + \" \" + R_n);\n\t\t}\n\t});\n\treturn out;\n}\n\nfunction write_comments_bin(data) {\n\tvar ba = buf_array();\n\tvar iauthor = [];\n\twrite_record(ba, \"BrtBeginComments\");\n\n\twrite_record(ba, \"BrtBeginCommentAuthors\");\n\tdata.forEach(function(comment) {\n\t\tcomment[1].forEach(function(c) {\n\t\t\tif(iauthor.indexOf(c.a) > -1) return;\n\t\t\tiauthor.push(c.a.slice(0,54));\n\t\t\twrite_record(ba, \"BrtCommentAuthor\", write_BrtCommentAuthor(c.a));\n\t\t});\n\t});\n\twrite_record(ba, \"BrtEndCommentAuthors\");\n\n\twrite_record(ba, \"BrtBeginCommentList\");\n\tdata.forEach(function(comment) {\n\t\tcomment[1].forEach(function(c) {\n\t\t\tc.iauthor = iauthor.indexOf(c.a);\n\t\t\tvar range = {s:decode_cell(comment[0]),e:decode_cell(comment[0])};\n\t\t\twrite_record(ba, \"BrtBeginComment\", write_BrtBeginComment([range, c]));\n\t\t\tif(c.t && c.t.length > 0) write_record(ba, \"BrtCommentText\", write_BrtCommentText(c));\n\t\t\twrite_record(ba, \"BrtEndComment\");\n\t\t\tdelete c.iauthor;\n\t\t});\n\t});\n\twrite_record(ba, \"BrtEndCommentList\");\n\n\twrite_record(ba, \"BrtEndComments\");\n\treturn ba.end();\n}\nvar CT_VBA = \"application/vnd.ms-office.vbaProject\";\nfunction make_vba_xls(cfb) {\n\tvar newcfb = CFB.utils.cfb_new({root:\"R\"});\n\tcfb.FullPaths.forEach(function(p, i) {\n\t\tif(p.slice(-1) === \"/\" || !p.match(/_VBA_PROJECT_CUR/)) return;\n\t\tvar newpath = p.replace(/^[^\\/]*/,\"R\").replace(/\\/_VBA_PROJECT_CUR\\u0000*/, \"\");\n\t\tCFB.utils.cfb_add(newcfb, newpath, cfb.FileIndex[i].content);\n\t});\n\treturn CFB.write(newcfb);\n}\n\nfunction fill_vba_xls(cfb, vba) {\n\tvba.FullPaths.forEach(function(p, i) {\n\t\tif(i == 0) return;\n\t\tvar newpath = p.replace(/[^\\/]*[\\/]/, \"/_VBA_PROJECT_CUR/\");\n\t\tif(newpath.slice(-1) !== \"/\") CFB.utils.cfb_add(cfb, newpath, vba.FileIndex[i].content);\n\t});\n}\n\nvar VBAFMTS = [ \"xlsb\", \"xlsm\", \"xlam\", \"biff8\", \"xla\" ];\n\nRELS.DS = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/dialogsheet\";\nRELS.MS = \"http://schemas.microsoft.com/office/2006/relationships/xlMacrosheet\";\n\n/* macro and dialog sheet stubs */\nfunction parse_ds_bin() { return {'!type':'dialog'}; }\nfunction parse_ds_xml() { return {'!type':'dialog'}; }\nfunction parse_ms_bin() { return {'!type':'macro'}; }\nfunction parse_ms_xml() { return {'!type':'macro'}; }\n/* TODO: it will be useful to parse the function str */\nvar rc_to_a1 = (function(){\n\tvar rcregex = /(^|[^A-Za-z_])R(\\[?-?\\d+\\]|[1-9]\\d*|)C(\\[?-?\\d+\\]|[1-9]\\d*|)(?![A-Za-z0-9_])/g;\n\tvar rcbase = ({r:0,c:0});\n\tfunction rcfunc($$,$1,$2,$3) {\n\t\tvar cRel = false, rRel = false;\n\n\t\tif($2.length == 0) rRel = true;\n\t\telse if($2.charAt(0) == \"[\") { rRel = true; $2 = $2.slice(1, -1); }\n\n\t\tif($3.length == 0) cRel = true;\n\t\telse if($3.charAt(0) == \"[\") { cRel = true; $3 = $3.slice(1, -1); }\n\n\t\tvar R = $2.length>0?parseInt($2,10)|0:0, C = $3.length>0?parseInt($3,10)|0:0;\n\n\t\tif(cRel) C += rcbase.c; else --C;\n\t\tif(rRel) R += rcbase.r; else --R;\n\t\treturn $1 + (cRel ? \"\" : \"$\") + encode_col(C) + (rRel ? \"\" : \"$\") + encode_row(R);\n\t}\n\treturn function rc_to_a1(fstr, base) {\n\t\trcbase = base;\n\t\treturn fstr.replace(rcregex, rcfunc);\n\t};\n})();\n\nvar crefregex = /(^|[^._A-Z0-9])([$]?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])([$]?)(10[0-3]\\d{4}|104[0-7]\\d{3}|1048[0-4]\\d{2}|10485[0-6]\\d|104857[0-6]|[1-9]\\d{0,5})(?![_.\\(A-Za-z0-9])/g;\nvar a1_to_rc =(function(){\n\treturn function a1_to_rc(fstr, base) {\n\t\treturn fstr.replace(crefregex, function($0, $1, $2, $3, $4, $5) {\n\t\t\tvar c = decode_col($3) - ($2 ? 0 : base.c);\n\t\t\tvar r = decode_row($5) - ($4 ? 0 : base.r);\n\t\t\tvar R = (r == 0 ? \"\" : !$4 ? \"[\" + r + \"]\" : (r+1));\n\t\t\tvar C = (c == 0 ? \"\" : !$2 ? \"[\" + c + \"]\" : (c+1));\n\t\t\treturn $1 + \"R\" + R + \"C\" + C;\n\t\t});\n\t};\n})();\n\n/* no defined name can collide with a valid cell address A1:XFD1048576 ... except LOG10! */\nfunction shift_formula_str(f, delta) {\n\treturn f.replace(crefregex, function($0, $1, $2, $3, $4, $5) {\n\t\treturn $1+($2==\"$\" ? $2+$3 : encode_col(decode_col($3)+delta.c))+($4==\"$\" ? $4+$5 : encode_row(decode_row($5) + delta.r));\n\t});\n}\n\nfunction shift_formula_xlsx(f, range, cell) {\n\tvar r = decode_range(range), s = r.s, c = decode_cell(cell);\n\tvar delta = {r:c.r - s.r, c:c.c - s.c};\n\treturn shift_formula_str(f, delta);\n}\n\n/* TODO: parse formula */\nfunction fuzzyfmla(f) {\n\tif(f.length == 1) return false;\n\treturn true;\n}\n\nfunction _xlfn(f) {\n\treturn f.replace(/_xlfn\\./g,\"\");\n}\nfunction parseread1(blob) { blob.l+=1; return; }\n\n/* [MS-XLS] 2.5.51 */\nfunction parse_ColRelU(blob, length) {\n\tvar c = blob.read_shift(length == 1 ? 1 : 2);\n\treturn [c & 0x3FFF, (c >> 14) & 1, (c >> 15) & 1];\n}\n\n/* [MS-XLS] 2.5.198.105 ; [MS-XLSB] 2.5.97.89 */\nfunction parse_RgceArea(blob, length, opts) {\n\tvar w = 2;\n\tif(opts) {\n\t\tif(opts.biff >= 2 && opts.biff <= 5) return parse_RgceArea_BIFF2(blob, length, opts);\n\t\telse if(opts.biff == 12) w = 4;\n\t}\n\tvar r=blob.read_shift(w), R=blob.read_shift(w);\n\tvar c=parse_ColRelU(blob, 2);\n\tvar C=parse_ColRelU(blob, 2);\n\treturn { s:{r:r, c:c[0], cRel:c[1], rRel:c[2]}, e:{r:R, c:C[0], cRel:C[1], rRel:C[2]} };\n}\n/* BIFF 2-5 encodes flags in the row field */\nfunction parse_RgceArea_BIFF2(blob) {\n\tvar r=parse_ColRelU(blob, 2), R=parse_ColRelU(blob, 2);\n\tvar c=blob.read_shift(1);\n\tvar C=blob.read_shift(1);\n\treturn { s:{r:r[0], c:c, cRel:r[1], rRel:r[2]}, e:{r:R[0], c:C, cRel:R[1], rRel:R[2]} };\n}\n\n/* [MS-XLS] 2.5.198.105 ; [MS-XLSB] 2.5.97.90 */\nfunction parse_RgceAreaRel(blob, length, opts) {\n\tif(opts.biff < 8) return parse_RgceArea_BIFF2(blob, length, opts);\n\tvar r=blob.read_shift(opts.biff == 12 ? 4 : 2), R=blob.read_shift(opts.biff == 12 ? 4 : 2);\n\tvar c=parse_ColRelU(blob, 2);\n\tvar C=parse_ColRelU(blob, 2);\n\treturn { s:{r:r, c:c[0], cRel:c[1], rRel:c[2]}, e:{r:R, c:C[0], cRel:C[1], rRel:C[2]} };\n}\n\n/* [MS-XLS] 2.5.198.109 ; [MS-XLSB] 2.5.97.91 */\nfunction parse_RgceLoc(blob, length, opts) {\n\tif(opts && opts.biff >= 2 && opts.biff <= 5) return parse_RgceLoc_BIFF2(blob, length, opts);\n\tvar r = blob.read_shift(opts && opts.biff == 12 ? 4 : 2);\n\tvar c = parse_ColRelU(blob, 2);\n\treturn {r:r, c:c[0], cRel:c[1], rRel:c[2]};\n}\nfunction parse_RgceLoc_BIFF2(blob) {\n\tvar r = parse_ColRelU(blob, 2);\n\tvar c = blob.read_shift(1);\n\treturn {r:r[0], c:c, cRel:r[1], rRel:r[2]};\n}\n\n/* [MS-XLS] 2.5.198.107, 2.5.47 */\nfunction parse_RgceElfLoc(blob) {\n\tvar r = blob.read_shift(2);\n\tvar c = blob.read_shift(2);\n\treturn {r:r, c:c & 0xFF, fQuoted:!!(c & 0x4000), cRel:c>>15, rRel:c>>15 };\n}\n\n/* [MS-XLS] 2.5.198.111 ; [MS-XLSB] 2.5.97.92 TODO */\nfunction parse_RgceLocRel(blob, length, opts) {\n\tvar biff = opts && opts.biff ? opts.biff : 8;\n\tif(biff >= 2 && biff <= 5) return parse_RgceLocRel_BIFF2(blob, length, opts);\n\tvar r = blob.read_shift(biff >= 12 ? 4 : 2);\n\tvar cl = blob.read_shift(2);\n\tvar cRel = (cl & 0x4000) >> 14, rRel = (cl & 0x8000) >> 15;\n\tcl &= 0x3FFF;\n\tif(rRel == 1) while(r > 0x7FFFF) r -= 0x100000;\n\tif(cRel == 1) while(cl > 0x1FFF) cl = cl - 0x4000;\n\treturn {r:r,c:cl,cRel:cRel,rRel:rRel};\n}\nfunction parse_RgceLocRel_BIFF2(blob) {\n\tvar rl = blob.read_shift(2);\n\tvar c = blob.read_shift(1);\n\tvar rRel = (rl & 0x8000) >> 15, cRel = (rl & 0x4000) >> 14;\n\trl &= 0x3FFF;\n\tif(rRel == 1 && rl >= 0x2000) rl = rl - 0x4000;\n\tif(cRel == 1 && c >= 0x80) c = c - 0x100;\n\treturn {r:rl,c:c,cRel:cRel,rRel:rRel};\n}\n\n/* [MS-XLS] 2.5.198.27 ; [MS-XLSB] 2.5.97.18 */\nfunction parse_PtgArea(blob, length, opts) {\n\tvar type = (blob[blob.l++] & 0x60) >> 5;\n\tvar area = parse_RgceArea(blob, opts.biff >= 2 && opts.biff <= 5 ? 6 : 8, opts);\n\treturn [type, area];\n}\n\n/* [MS-XLS] 2.5.198.28 ; [MS-XLSB] 2.5.97.19 */\nfunction parse_PtgArea3d(blob, length, opts) {\n\tvar type = (blob[blob.l++] & 0x60) >> 5;\n\tvar ixti = blob.read_shift(2, 'i');\n\tvar w = 8;\n\tif(opts) switch(opts.biff) {\n\t\tcase 5: blob.l += 12; w = 6; break;\n\t\tcase 12: w = 12; break;\n\t}\n\tvar area = parse_RgceArea(blob, w, opts);\n\treturn [type, ixti, area];\n}\n\n/* [MS-XLS] 2.5.198.29 ; [MS-XLSB] 2.5.97.20 */\nfunction parse_PtgAreaErr(blob, length, opts) {\n\tvar type = (blob[blob.l++] & 0x60) >> 5;\n\tblob.l += opts && (opts.biff > 8) ? 12 : (opts.biff < 8 ? 6 : 8);\n\treturn [type];\n}\n/* [MS-XLS] 2.5.198.30 ; [MS-XLSB] 2.5.97.21 */\nfunction parse_PtgAreaErr3d(blob, length, opts) {\n\tvar type = (blob[blob.l++] & 0x60) >> 5;\n\tvar ixti = blob.read_shift(2);\n\tvar w = 8;\n\tif(opts) switch(opts.biff) {\n\t\tcase 5: blob.l += 12; w = 6; break;\n\t\tcase 12: w = 12; break;\n\t}\n\tblob.l += w;\n\treturn [type, ixti];\n}\n\n/* [MS-XLS] 2.5.198.31 ; [MS-XLSB] 2.5.97.22 */\nfunction parse_PtgAreaN(blob, length, opts) {\n\tvar type = (blob[blob.l++] & 0x60) >> 5;\n\tvar area = parse_RgceAreaRel(blob, length - 1, opts);\n\treturn [type, area];\n}\n\n/* [MS-XLS] 2.5.198.32 ; [MS-XLSB] 2.5.97.23 */\nfunction parse_PtgArray(blob, length, opts) {\n\tvar type = (blob[blob.l++] & 0x60) >> 5;\n\tblob.l += opts.biff == 2 ? 6 : opts.biff == 12 ? 14 : 7;\n\treturn [type];\n}\n\n/* [MS-XLS] 2.5.198.33 ; [MS-XLSB] 2.5.97.24 */\nfunction parse_PtgAttrBaxcel(blob) {\n\tvar bitSemi = blob[blob.l+1] & 0x01; /* 1 = volatile */\n\tvar bitBaxcel = 1;\n\tblob.l += 4;\n\treturn [bitSemi, bitBaxcel];\n}\n\n/* [MS-XLS] 2.5.198.34 ; [MS-XLSB] 2.5.97.25 */\nfunction parse_PtgAttrChoose(blob, length, opts) {\n\tblob.l +=2;\n\tvar offset = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);\n\tvar o = [];\n\t/* offset is 1 less than the number of elements */\n\tfor(var i = 0; i <= offset; ++i) o.push(blob.read_shift(opts && opts.biff == 2 ? 1 : 2));\n\treturn o;\n}\n\n/* [MS-XLS] 2.5.198.35 ; [MS-XLSB] 2.5.97.26 */\nfunction parse_PtgAttrGoto(blob, length, opts) {\n\tvar bitGoto = (blob[blob.l+1] & 0xFF) ? 1 : 0;\n\tblob.l += 2;\n\treturn [bitGoto, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];\n}\n\n/* [MS-XLS] 2.5.198.36 ; [MS-XLSB] 2.5.97.27 */\nfunction parse_PtgAttrIf(blob, length, opts) {\n\tvar bitIf = (blob[blob.l+1] & 0xFF) ? 1 : 0;\n\tblob.l += 2;\n\treturn [bitIf, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];\n}\n\n/* [MS-XLSB] 2.5.97.28 */\nfunction parse_PtgAttrIfError(blob) {\n\tvar bitIf = (blob[blob.l+1] & 0xFF) ? 1 : 0;\n\tblob.l += 2;\n\treturn [bitIf, blob.read_shift(2)];\n}\n\n/* [MS-XLS] 2.5.198.37 ; [MS-XLSB] 2.5.97.29 */\nfunction parse_PtgAttrSemi(blob, length, opts) {\n\tvar bitSemi = (blob[blob.l+1] & 0xFF) ? 1 : 0;\n\tblob.l += opts && opts.biff == 2 ? 3 : 4;\n\treturn [bitSemi];\n}\n\n/* [MS-XLS] 2.5.198.40 ; [MS-XLSB] 2.5.97.32 */\nfunction parse_PtgAttrSpaceType(blob) {\n\tvar type = blob.read_shift(1), cch = blob.read_shift(1);\n\treturn [type, cch];\n}\n\n/* [MS-XLS] 2.5.198.38 ; [MS-XLSB] 2.5.97.30 */\nfunction parse_PtgAttrSpace(blob) {\n\tblob.read_shift(2);\n\treturn parse_PtgAttrSpaceType(blob, 2);\n}\n\n/* [MS-XLS] 2.5.198.39 ; [MS-XLSB] 2.5.97.31 */\nfunction parse_PtgAttrSpaceSemi(blob) {\n\tblob.read_shift(2);\n\treturn parse_PtgAttrSpaceType(blob, 2);\n}\n\n/* [MS-XLS] 2.5.198.84 ; [MS-XLSB] 2.5.97.68 TODO */\nfunction parse_PtgRef(blob, length, opts) {\n\t//var ptg = blob[blob.l] & 0x1F;\n\tvar type = (blob[blob.l] & 0x60)>>5;\n\tblob.l += 1;\n\tvar loc = parse_RgceLoc(blob, 0, opts);\n\treturn [type, loc];\n}\n\n/* [MS-XLS] 2.5.198.88 ; [MS-XLSB] 2.5.97.72 TODO */\nfunction parse_PtgRefN(blob, length, opts) {\n\tvar type = (blob[blob.l] & 0x60)>>5;\n\tblob.l += 1;\n\tvar loc = parse_RgceLocRel(blob, 0, opts);\n\treturn [type, loc];\n}\n\n/* [MS-XLS] 2.5.198.85 ; [MS-XLSB] 2.5.97.69 TODO */\nfunction parse_PtgRef3d(blob, length, opts) {\n\tvar type = (blob[blob.l] & 0x60)>>5;\n\tblob.l += 1;\n\tvar ixti = blob.read_shift(2); // XtiIndex\n\tif(opts && opts.biff == 5) blob.l += 12;\n\tvar loc = parse_RgceLoc(blob, 0, opts); // TODO: or RgceLocRel\n\treturn [type, ixti, loc];\n}\n\n\n/* [MS-XLS] 2.5.198.62 ; [MS-XLSB] 2.5.97.45 TODO */\nfunction parse_PtgFunc(blob, length, opts) {\n\t//var ptg = blob[blob.l] & 0x1F;\n\tvar type = (blob[blob.l] & 0x60)>>5;\n\tblob.l += 1;\n\tvar iftab = blob.read_shift(opts && opts.biff <= 3 ? 1 : 2);\n\treturn [FtabArgc[iftab], Ftab[iftab], type];\n}\n/* [MS-XLS] 2.5.198.63 ; [MS-XLSB] 2.5.97.46 TODO */\nfunction parse_PtgFuncVar(blob, length, opts) {\n\tvar type = blob[blob.l++];\n\tvar cparams = blob.read_shift(1), tab = opts && opts.biff <= 3 ? [(type == 0x58 ? -1 : 0), blob.read_shift(1)]: parsetab(blob);\n\treturn [cparams, (tab[0] === 0 ? Ftab : Cetab)[tab[1]]];\n}\n\nfunction parsetab(blob) {\n\treturn [blob[blob.l+1]>>7, blob.read_shift(2) & 0x7FFF];\n}\n\n/* [MS-XLS] 2.5.198.41 ; [MS-XLSB] 2.5.97.33 */\nfunction parse_PtgAttrSum(blob, length, opts) {\n\tblob.l += opts && opts.biff == 2 ? 3 : 4; return;\n}\n\n/* [MS-XLS] 2.5.198.58 ; [MS-XLSB] 2.5.97.40 */\nfunction parse_PtgExp(blob, length, opts) {\n\tblob.l++;\n\tif(opts && opts.biff == 12) return [blob.read_shift(4, 'i'), 0];\n\tvar row = blob.read_shift(2);\n\tvar col = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);\n\treturn [row, col];\n}\n\n/* [MS-XLS] 2.5.198.57 ; [MS-XLSB] 2.5.97.39 */\nfunction parse_PtgErr(blob) { blob.l++; return BErr[blob.read_shift(1)]; }\n\n/* [MS-XLS] 2.5.198.66 ; [MS-XLSB] 2.5.97.49 */\nfunction parse_PtgInt(blob) { blob.l++; return blob.read_shift(2); }\n\n/* [MS-XLS] 2.5.198.42 ; [MS-XLSB] 2.5.97.34 */\nfunction parse_PtgBool(blob) { blob.l++; return blob.read_shift(1)!==0;}\n\n/* [MS-XLS] 2.5.198.79 ; [MS-XLSB] 2.5.97.63 */\nfunction parse_PtgNum(blob) { blob.l++; return parse_Xnum(blob, 8); }\n\n/* [MS-XLS] 2.5.198.89 ; [MS-XLSB] 2.5.97.74 */\nfunction parse_PtgStr(blob, length, opts) { blob.l++; return parse_ShortXLUnicodeString(blob, length-1, opts); }\n\n/* [MS-XLS] 2.5.192.112 + 2.5.192.11{3,4,5,6,7} */\n/* [MS-XLSB] 2.5.97.93 + 2.5.97.9{4,5,6,7} */\nfunction parse_SerAr(blob, biff) {\n\tvar val = [blob.read_shift(1)];\n\tif(biff == 12) switch(val[0]) {\n\t\tcase 0x02: val[0] = 0x04; break; /* SerBool */\n\t\tcase 0x04: val[0] = 0x10; break; /* SerErr */\n\t\tcase 0x00: val[0] = 0x01; break; /* SerNum */\n\t\tcase 0x01: val[0] = 0x02; break; /* SerStr */\n\t}\n\tswitch(val[0]) {\n\t\tcase 0x04: /* SerBool -- boolean */\n\t\t\tval[1] = parsebool(blob, 1) ? 'TRUE' : 'FALSE';\n\t\t\tif(biff != 12) blob.l += 7; break;\n\t\tcase 0x25: /* appears to be an alias */\n\t\tcase 0x10: /* SerErr -- error */\n\t\t\tval[1] = BErr[blob[blob.l]];\n\t\t\tblob.l += ((biff == 12) ? 4 : 8); break;\n\t\tcase 0x00: /* SerNil -- honestly, I'm not sure how to reproduce this */\n\t\t\tblob.l += 8; break;\n\t\tcase 0x01: /* SerNum -- Xnum */\n\t\t\tval[1] = parse_Xnum(blob, 8); break;\n\t\tcase 0x02: /* SerStr -- XLUnicodeString (<256 chars) */\n\t\t\tval[1] = parse_XLUnicodeString2(blob, 0, {biff:biff > 0 && biff < 8 ? 2 : biff}); break;\n\t\tdefault: throw new Error(\"Bad SerAr: \" + val[0]); /* Unreachable */\n\t}\n\treturn val;\n}\n\n/* [MS-XLS] 2.5.198.61 ; [MS-XLSB] 2.5.97.44 */\nfunction parse_PtgExtraMem(blob, cce, opts) {\n\tvar count = blob.read_shift((opts.biff == 12) ? 4 : 2);\n\tvar out = [];\n\tfor(var i = 0; i != count; ++i) out.push(((opts.biff == 12) ? parse_UncheckedRfX : parse_Ref8U)(blob, 8));\n\treturn out;\n}\n\n/* [MS-XLS] 2.5.198.59 ; [MS-XLSB] 2.5.97.41 */\nfunction parse_PtgExtraArray(blob, length, opts) {\n\tvar rows = 0, cols = 0;\n\tif(opts.biff == 12) {\n\t\trows = blob.read_shift(4); // DRw\n\t\tcols = blob.read_shift(4); // DCol\n\t} else {\n\t\tcols = 1 + blob.read_shift(1); //DColByteU\n\t\trows = 1 + blob.read_shift(2); //DRw\n\t}\n\tif(opts.biff >= 2 && opts.biff < 8) { --rows; if(--cols == 0) cols = 0x100; }\n\t// $FlowIgnore\n\tfor(var i = 0, o = []; i != rows && (o[i] = []); ++i)\n\t\tfor(var j = 0; j != cols; ++j) o[i][j] = parse_SerAr(blob, opts.biff);\n\treturn o;\n}\n\n/* [MS-XLS] 2.5.198.76 ; [MS-XLSB] 2.5.97.60 */\nfunction parse_PtgName(blob, length, opts) {\n\tvar type = (blob.read_shift(1) >>> 5) & 0x03;\n\tvar w = (!opts || (opts.biff >= 8)) ? 4 : 2;\n\tvar nameindex = blob.read_shift(w);\n\tswitch(opts.biff) {\n\t\tcase 2: blob.l += 5; break;\n\t\tcase 3: case 4: blob.l += 8; break;\n\t\tcase 5: blob.l += 12; break;\n\t}\n\treturn [type, 0, nameindex];\n}\n\n/* [MS-XLS] 2.5.198.77 ; [MS-XLSB] 2.5.97.61 */\nfunction parse_PtgNameX(blob, length, opts) {\n\tif(opts.biff == 5) return parse_PtgNameX_BIFF5(blob, length, opts);\n\tvar type = (blob.read_shift(1) >>> 5) & 0x03;\n\tvar ixti = blob.read_shift(2); // XtiIndex\n\tvar nameindex = blob.read_shift(4);\n\treturn [type, ixti, nameindex];\n}\nfunction parse_PtgNameX_BIFF5(blob) {\n\tvar type = (blob.read_shift(1) >>> 5) & 0x03;\n\tvar ixti = blob.read_shift(2, 'i'); // XtiIndex\n\tblob.l += 8;\n\tvar nameindex = blob.read_shift(2);\n\tblob.l += 12;\n\treturn [type, ixti, nameindex];\n}\n\n/* [MS-XLS] 2.5.198.70 ; [MS-XLSB] 2.5.97.54 */\nfunction parse_PtgMemArea(blob, length, opts) {\n\tvar type = (blob.read_shift(1) >>> 5) & 0x03;\n\tblob.l += (opts && opts.biff == 2 ? 3 : 4);\n\tvar cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);\n\treturn [type, cce];\n}\n\n/* [MS-XLS] 2.5.198.72 ; [MS-XLSB] 2.5.97.56 */\nfunction parse_PtgMemFunc(blob, length, opts) {\n\tvar type = (blob.read_shift(1) >>> 5) & 0x03;\n\tvar cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);\n\treturn [type, cce];\n}\n\n\n/* [MS-XLS] 2.5.198.86 ; [MS-XLSB] 2.5.97.69 */\nfunction parse_PtgRefErr(blob, length, opts) {\n\tvar type = (blob.read_shift(1) >>> 5) & 0x03;\n\tblob.l += 4;\n\tif(opts.biff < 8) blob.l--;\n\tif(opts.biff == 12) blob.l += 2;\n\treturn [type];\n}\n\n/* [MS-XLS] 2.5.198.87 ; [MS-XLSB] 2.5.97.71 */\nfunction parse_PtgRefErr3d(blob, length, opts) {\n\tvar type = (blob[blob.l++] & 0x60) >> 5;\n\tvar ixti = blob.read_shift(2);\n\tvar w = 4;\n\tif(opts) switch(opts.biff) {\n\t\tcase 5: w = 15; break;\n\t\tcase 12: w = 6; break;\n\t}\n\tblob.l += w;\n\treturn [type, ixti];\n}\n\n/* [MS-XLS] 2.5.198.71 ; [MS-XLSB] 2.5.97.55 */\nvar parse_PtgMemErr = parsenoop;\n/* [MS-XLS] 2.5.198.73  ; [MS-XLSB] 2.5.97.57 */\nvar parse_PtgMemNoMem = parsenoop;\n/* [MS-XLS] 2.5.198.92 */\nvar parse_PtgTbl = parsenoop;\n\nfunction parse_PtgElfLoc(blob, length, opts) {\n\tblob.l += 2;\n\treturn [parse_RgceElfLoc(blob, 4, opts)];\n}\nfunction parse_PtgElfNoop(blob) {\n\tblob.l += 6;\n\treturn [];\n}\n/* [MS-XLS] 2.5.198.46 */\nvar parse_PtgElfCol = parse_PtgElfLoc;\n/* [MS-XLS] 2.5.198.47 */\nvar parse_PtgElfColS = parse_PtgElfNoop;\n/* [MS-XLS] 2.5.198.48 */\nvar parse_PtgElfColSV = parse_PtgElfNoop;\n/* [MS-XLS] 2.5.198.49 */\nvar parse_PtgElfColV = parse_PtgElfLoc;\n/* [MS-XLS] 2.5.198.50 */\nfunction parse_PtgElfLel(blob) {\n\tblob.l += 2;\n\treturn [parseuint16(blob), blob.read_shift(2) & 0x01];\n}\n/* [MS-XLS] 2.5.198.51 */\nvar parse_PtgElfRadical = parse_PtgElfLoc;\n/* [MS-XLS] 2.5.198.52 */\nvar parse_PtgElfRadicalLel = parse_PtgElfLel;\n/* [MS-XLS] 2.5.198.53 */\nvar parse_PtgElfRadicalS = parse_PtgElfNoop;\n/* [MS-XLS] 2.5.198.54 */\nvar parse_PtgElfRw = parse_PtgElfLoc;\n/* [MS-XLS] 2.5.198.55 */\nvar parse_PtgElfRwV = parse_PtgElfLoc;\n\n/* [MS-XLSB] 2.5.97.52 TODO */\nvar PtgListRT = [\n\t\"Data\",\n\t\"All\",\n\t\"Headers\",\n\t\"??\",\n\t\"?Data2\",\n\t\"??\",\n\t\"?DataHeaders\",\n\t\"??\",\n\t\"Totals\",\n\t\"??\",\n\t\"??\",\n\t\"??\",\n\t\"?DataTotals\",\n\t\"??\",\n\t\"??\",\n\t\"??\",\n\t\"?Current\"\n];\nfunction parse_PtgList(blob) {\n\tblob.l += 2;\n\tvar ixti = blob.read_shift(2);\n\tvar flags = blob.read_shift(2);\n\tvar idx = blob.read_shift(4);\n\tvar c = blob.read_shift(2);\n\tvar C = blob.read_shift(2);\n\tvar rt = PtgListRT[(flags >> 2) & 0x1F];\n\treturn {ixti: ixti, coltype:(flags&0x3), rt:rt, idx:idx, c:c, C:C};\n}\n/* [MS-XLS] 2.5.198.91 ; [MS-XLSB] 2.5.97.76 */\nfunction parse_PtgSxName(blob) {\n\tblob.l += 2;\n\treturn [blob.read_shift(4)];\n}\n\n/* [XLS] old spec */\nfunction parse_PtgSheet(blob, length, opts) {\n\tblob.l += 5;\n\tblob.l += 2;\n\tblob.l += (opts.biff == 2 ? 1 : 4);\n\treturn [\"PTGSHEET\"];\n}\nfunction parse_PtgEndSheet(blob, length, opts) {\n\tblob.l += (opts.biff == 2 ? 4 : 5);\n\treturn [\"PTGENDSHEET\"];\n}\nfunction parse_PtgMemAreaN(blob) {\n\tvar type = (blob.read_shift(1) >>> 5) & 0x03;\n\tvar cce = blob.read_shift(2);\n\treturn [type, cce];\n}\nfunction parse_PtgMemNoMemN(blob) {\n\tvar type = (blob.read_shift(1) >>> 5) & 0x03;\n\tvar cce = blob.read_shift(2);\n\treturn [type, cce];\n}\nfunction parse_PtgAttrNoop(blob) {\n\tblob.l += 4;\n\treturn [0, 0];\n}\n\n/* [MS-XLS] 2.5.198.25 ; [MS-XLSB] 2.5.97.16 */\nvar PtgTypes = {\n0x01: { n:'PtgExp', f:parse_PtgExp },\n0x02: { n:'PtgTbl', f:parse_PtgTbl },\n0x03: { n:'PtgAdd', f:parseread1 },\n0x04: { n:'PtgSub', f:parseread1 },\n0x05: { n:'PtgMul', f:parseread1 },\n0x06: { n:'PtgDiv', f:parseread1 },\n0x07: { n:'PtgPower', f:parseread1 },\n0x08: { n:'PtgConcat', f:parseread1 },\n0x09: { n:'PtgLt', f:parseread1 },\n0x0A: { n:'PtgLe', f:parseread1 },\n0x0B: { n:'PtgEq', f:parseread1 },\n0x0C: { n:'PtgGe', f:parseread1 },\n0x0D: { n:'PtgGt', f:parseread1 },\n0x0E: { n:'PtgNe', f:parseread1 },\n0x0F: { n:'PtgIsect', f:parseread1 },\n0x10: { n:'PtgUnion', f:parseread1 },\n0x11: { n:'PtgRange', f:parseread1 },\n0x12: { n:'PtgUplus', f:parseread1 },\n0x13: { n:'PtgUminus', f:parseread1 },\n0x14: { n:'PtgPercent', f:parseread1 },\n0x15: { n:'PtgParen', f:parseread1 },\n0x16: { n:'PtgMissArg', f:parseread1 },\n0x17: { n:'PtgStr', f:parse_PtgStr },\n0x1A: { n:'PtgSheet', f:parse_PtgSheet },\n0x1B: { n:'PtgEndSheet', f:parse_PtgEndSheet },\n0x1C: { n:'PtgErr', f:parse_PtgErr },\n0x1D: { n:'PtgBool', f:parse_PtgBool },\n0x1E: { n:'PtgInt', f:parse_PtgInt },\n0x1F: { n:'PtgNum', f:parse_PtgNum },\n0x20: { n:'PtgArray', f:parse_PtgArray },\n0x21: { n:'PtgFunc', f:parse_PtgFunc },\n0x22: { n:'PtgFuncVar', f:parse_PtgFuncVar },\n0x23: { n:'PtgName', f:parse_PtgName },\n0x24: { n:'PtgRef', f:parse_PtgRef },\n0x25: { n:'PtgArea', f:parse_PtgArea },\n0x26: { n:'PtgMemArea', f:parse_PtgMemArea },\n0x27: { n:'PtgMemErr', f:parse_PtgMemErr },\n0x28: { n:'PtgMemNoMem', f:parse_PtgMemNoMem },\n0x29: { n:'PtgMemFunc', f:parse_PtgMemFunc },\n0x2A: { n:'PtgRefErr', f:parse_PtgRefErr },\n0x2B: { n:'PtgAreaErr', f:parse_PtgAreaErr },\n0x2C: { n:'PtgRefN', f:parse_PtgRefN },\n0x2D: { n:'PtgAreaN', f:parse_PtgAreaN },\n0x2E: { n:'PtgMemAreaN', f:parse_PtgMemAreaN },\n0x2F: { n:'PtgMemNoMemN', f:parse_PtgMemNoMemN },\n0x39: { n:'PtgNameX', f:parse_PtgNameX },\n0x3A: { n:'PtgRef3d', f:parse_PtgRef3d },\n0x3B: { n:'PtgArea3d', f:parse_PtgArea3d },\n0x3C: { n:'PtgRefErr3d', f:parse_PtgRefErr3d },\n0x3D: { n:'PtgAreaErr3d', f:parse_PtgAreaErr3d },\n0xFF: {}\n};\n/* These are duplicated in the PtgTypes table */\nvar PtgDupes = {\n0x40: 0x20, 0x60: 0x20,\n0x41: 0x21, 0x61: 0x21,\n0x42: 0x22, 0x62: 0x22,\n0x43: 0x23, 0x63: 0x23,\n0x44: 0x24, 0x64: 0x24,\n0x45: 0x25, 0x65: 0x25,\n0x46: 0x26, 0x66: 0x26,\n0x47: 0x27, 0x67: 0x27,\n0x48: 0x28, 0x68: 0x28,\n0x49: 0x29, 0x69: 0x29,\n0x4A: 0x2A, 0x6A: 0x2A,\n0x4B: 0x2B, 0x6B: 0x2B,\n0x4C: 0x2C, 0x6C: 0x2C,\n0x4D: 0x2D, 0x6D: 0x2D,\n0x4E: 0x2E, 0x6E: 0x2E,\n0x4F: 0x2F, 0x6F: 0x2F,\n0x58: 0x22, 0x78: 0x22,\n0x59: 0x39, 0x79: 0x39,\n0x5A: 0x3A, 0x7A: 0x3A,\n0x5B: 0x3B, 0x7B: 0x3B,\n0x5C: 0x3C, 0x7C: 0x3C,\n0x5D: 0x3D, 0x7D: 0x3D\n};\n(function(){for(var y in PtgDupes) PtgTypes[y] = PtgTypes[PtgDupes[y]];})();\n\nvar Ptg18 = {\n0x01: { n:'PtgElfLel', f:parse_PtgElfLel },\n0x02: { n:'PtgElfRw', f:parse_PtgElfRw },\n0x03: { n:'PtgElfCol', f:parse_PtgElfCol },\n0x06: { n:'PtgElfRwV', f:parse_PtgElfRwV },\n0x07: { n:'PtgElfColV', f:parse_PtgElfColV },\n0x0A: { n:'PtgElfRadical', f:parse_PtgElfRadical },\n0x0B: { n:'PtgElfRadicalS', f:parse_PtgElfRadicalS },\n0x0D: { n:'PtgElfColS', f:parse_PtgElfColS },\n0x0F: { n:'PtgElfColSV', f:parse_PtgElfColSV },\n0x10: { n:'PtgElfRadicalLel', f:parse_PtgElfRadicalLel },\n0x19: { n:'PtgList', f:parse_PtgList },\n0x1D: { n:'PtgSxName', f:parse_PtgSxName },\n0xFF: {}\n};\nvar Ptg19 = {\n0x00: { n:'PtgAttrNoop', f:parse_PtgAttrNoop },\n0x01: { n:'PtgAttrSemi', f:parse_PtgAttrSemi },\n0x02: { n:'PtgAttrIf', f:parse_PtgAttrIf },\n0x04: { n:'PtgAttrChoose', f:parse_PtgAttrChoose },\n0x08: { n:'PtgAttrGoto', f:parse_PtgAttrGoto },\n0x10: { n:'PtgAttrSum', f:parse_PtgAttrSum },\n0x20: { n:'PtgAttrBaxcel', f:parse_PtgAttrBaxcel },\n0x40: { n:'PtgAttrSpace', f:parse_PtgAttrSpace },\n0x41: { n:'PtgAttrSpaceSemi', f:parse_PtgAttrSpaceSemi },\n0x80: { n:'PtgAttrIfError', f:parse_PtgAttrIfError },\n0xFF: {}\n};\nPtg19[0x21] = Ptg19[0x20];\n\n/* [MS-XLS] 2.5.198.103 ; [MS-XLSB] 2.5.97.87 */\nfunction parse_RgbExtra(blob, length, rgce, opts) {\n\tif(opts.biff < 8) return parsenoop(blob, length);\n\tvar target = blob.l + length;\n\tvar o = [];\n\tfor(var i = 0; i !== rgce.length; ++i) {\n\t\tswitch(rgce[i][0]) {\n\t\t\tcase 'PtgArray': /* PtgArray -> PtgExtraArray */\n\t\t\t\trgce[i][1] = parse_PtgExtraArray(blob, 0, opts);\n\t\t\t\to.push(rgce[i][1]);\n\t\t\t\tbreak;\n\t\t\tcase 'PtgMemArea': /* PtgMemArea -> PtgExtraMem */\n\t\t\t\trgce[i][2] = parse_PtgExtraMem(blob, rgce[i][1], opts);\n\t\t\t\to.push(rgce[i][2]);\n\t\t\t\tbreak;\n\t\t\tcase 'PtgExp': /* PtgExp -> PtgExtraCol */\n\t\t\t\tif(opts && opts.biff == 12) {\n\t\t\t\t\trgce[i][1][1] = blob.read_shift(4);\n\t\t\t\t\to.push(rgce[i][1]);\n\t\t\t\t} break;\n\t\t\tcase 'PtgList': /* TODO: PtgList -> PtgExtraList */\n\t\t\tcase 'PtgElfRadicalS': /* TODO: PtgElfRadicalS -> PtgExtraElf */\n\t\t\tcase 'PtgElfColS': /* TODO: PtgElfColS -> PtgExtraElf */\n\t\t\tcase 'PtgElfColSV': /* TODO: PtgElfColSV -> PtgExtraElf */\n\t\t\t\tthrow \"Unsupported \" + rgce[i][0];\n\t\t\tdefault: break;\n\t\t}\n\t}\n\tlength = target - blob.l;\n\t/* note: this is technically an error but Excel disregards */\n\t//if(target !== blob.l && blob.l !== target - length) throw new Error(target + \" != \" + blob.l);\n\tif(length !== 0) o.push(parsenoop(blob, length));\n\treturn o;\n}\n\n/* [MS-XLS] 2.5.198.104 ; [MS-XLSB] 2.5.97.88 */\nfunction parse_Rgce(blob, length, opts) {\n\tvar target = blob.l + length;\n\tvar R, id, ptgs = [];\n\twhile(target != blob.l) {\n\t\tlength = target - blob.l;\n\t\tid = blob[blob.l];\n\t\tR = PtgTypes[id];\n\t\tif(id === 0x18 || id === 0x19) R = (id === 0x18 ? Ptg18 : Ptg19)[blob[blob.l + 1]];\n\t\tif(!R || !R.f) { /*ptgs.push*/(parsenoop(blob, length)); }\n\t\telse { ptgs.push([R.n, R.f(blob, length, opts)]); }\n\t}\n\treturn ptgs;\n}\n\nfunction stringify_array(f) {\n\tvar o = [];\n\tfor(var i = 0; i < f.length; ++i) {\n\t\tvar x = f[i], r = [];\n\t\tfor(var j = 0; j < x.length; ++j) {\n\t\t\tvar y = x[j];\n\t\t\tif(y) switch(y[0]) {\n\t\t\t\t// TODO: handle embedded quotes\n\t\t\t\tcase 0x02:\nr.push('\"' + y[1].replace(/\"/g,'\"\"') + '\"'); break;\n\t\t\t\tdefault: r.push(y[1]);\n\t\t\t} else r.push(\"\");\n\t\t}\n\t\to.push(r.join(\",\"));\n\t}\n\treturn o.join(\";\");\n}\n\n/* [MS-XLS] 2.2.2 ; [MS-XLSB] 2.2.2 TODO */\nvar PtgBinOp = {\n\tPtgAdd: \"+\",\n\tPtgConcat: \"&\",\n\tPtgDiv: \"/\",\n\tPtgEq: \"=\",\n\tPtgGe: \">=\",\n\tPtgGt: \">\",\n\tPtgLe: \"<=\",\n\tPtgLt: \"<\",\n\tPtgMul: \"*\",\n\tPtgNe: \"<>\",\n\tPtgPower: \"^\",\n\tPtgSub: \"-\"\n};\n\n// List of invalid characters needs to be tested further\nvar quoteCharacters  = new RegExp(/[^\\w\\u4E00-\\u9FFF\\u3040-\\u30FF]/);\nfunction formula_quote_sheet_name(sname, opts) {\n\tif(!sname && !(opts && opts.biff <= 5 && opts.biff >= 2)) throw new Error(\"empty sheet name\");\n\tif (quoteCharacters.test(sname)) return \"'\" + sname + \"'\";\n\treturn sname;\n}\nfunction get_ixti_raw(supbooks, ixti, opts) {\n\tif(!supbooks) return \"SH33TJSERR0\";\n\tif(opts.biff > 8 && (!supbooks.XTI || !supbooks.XTI[ixti])) return supbooks.SheetNames[ixti];\n\tif(!supbooks.XTI) return \"SH33TJSERR6\";\n\tvar XTI = supbooks.XTI[ixti];\n\tif(opts.biff < 8) {\n\t\tif(ixti > 10000) ixti-= 65536;\n\t\tif(ixti < 0) ixti = -ixti;\n\t\treturn ixti == 0 ? \"\" : supbooks.XTI[ixti - 1];\n\t}\n\tif(!XTI) return \"SH33TJSERR1\";\n\tvar o = \"\";\n\tif(opts.biff > 8) switch(supbooks[XTI[0]][0]) {\n\t\tcase 0x0165: /* 'BrtSupSelf' */\n\t\t\to = XTI[1] == -1 ? \"#REF\" : supbooks.SheetNames[XTI[1]];\n\t\t\treturn XTI[1] == XTI[2] ? o : o + \":\" + supbooks.SheetNames[XTI[2]];\n\t\tcase 0x0166: /* 'BrtSupSame' */\n\t\t\tif(opts.SID != null) return supbooks.SheetNames[opts.SID];\n\t\t\treturn \"SH33TJSSAME\" + supbooks[XTI[0]][0];\n\t\tcase 0x0163: /* 'BrtSupBookSrc' */\n\t\t\t/* falls through */\n\t\tdefault: return \"SH33TJSSRC\" + supbooks[XTI[0]][0];\n\t}\n\tswitch(supbooks[XTI[0]][0][0]) {\n\t\tcase 0x0401:\n\t\t\to = XTI[1] == -1 ? \"#REF\" : (supbooks.SheetNames[XTI[1]] || \"SH33TJSERR3\");\n\t\t\treturn XTI[1] == XTI[2] ? o : o + \":\" + supbooks.SheetNames[XTI[2]];\n\t\tcase 0x3A01: return supbooks[XTI[0]].slice(1).map(function(name) { return name.Name; }).join(\";;\"); //return \"SH33TJSERR8\";\n\t\tdefault:\n\t\t\tif(!supbooks[XTI[0]][0][3]) return \"SH33TJSERR2\";\n\t\t\to = XTI[1] == -1 ? \"#REF\" : (supbooks[XTI[0]][0][3][XTI[1]] || \"SH33TJSERR4\");\n\t\t\treturn XTI[1] == XTI[2] ? o : o + \":\" + supbooks[XTI[0]][0][3][XTI[2]];\n\t}\n}\nfunction get_ixti(supbooks, ixti, opts) {\n\tvar ixtiraw = get_ixti_raw(supbooks, ixti, opts);\n\treturn ixtiraw == \"#REF\" ? ixtiraw : formula_quote_sheet_name(ixtiraw, opts);\n}\nfunction stringify_formula(formula/*Array<any>*/, range, cell, supbooks, opts) {\n\tvar biff = (opts && opts.biff) || 8;\n\tvar _range = /*range != null ? range :*/ {s:{c:0, r:0},e:{c:0, r:0}};\n\tvar stack = [], e1, e2,  c, ixti=0, nameidx=0, r, sname=\"\";\n\tif(!formula[0] || !formula[0][0]) return \"\";\n\tvar last_sp = -1, sp = \"\";\n\tfor(var ff = 0, fflen = formula[0].length; ff < fflen; ++ff) {\n\t\tvar f = formula[0][ff];\n\t\tswitch(f[0]) {\n\t\t\tcase 'PtgUminus': /* [MS-XLS] 2.5.198.93 */\n\t\t\t\tstack.push(\"-\" + stack.pop()); break;\n\t\t\tcase 'PtgUplus': /* [MS-XLS] 2.5.198.95 */\n\t\t\t\tstack.push(\"+\" + stack.pop()); break;\n\t\t\tcase 'PtgPercent': /* [MS-XLS] 2.5.198.81 */\n\t\t\t\tstack.push(stack.pop() + \"%\"); break;\n\n\t\t\tcase 'PtgAdd':    /* [MS-XLS] 2.5.198.26 */\n\t\t\tcase 'PtgConcat': /* [MS-XLS] 2.5.198.43 */\n\t\t\tcase 'PtgDiv':    /* [MS-XLS] 2.5.198.45 */\n\t\t\tcase 'PtgEq':     /* [MS-XLS] 2.5.198.56 */\n\t\t\tcase 'PtgGe':     /* [MS-XLS] 2.5.198.64 */\n\t\t\tcase 'PtgGt':     /* [MS-XLS] 2.5.198.65 */\n\t\t\tcase 'PtgLe':     /* [MS-XLS] 2.5.198.68 */\n\t\t\tcase 'PtgLt':     /* [MS-XLS] 2.5.198.69 */\n\t\t\tcase 'PtgMul':    /* [MS-XLS] 2.5.198.75 */\n\t\t\tcase 'PtgNe':     /* [MS-XLS] 2.5.198.78 */\n\t\t\tcase 'PtgPower':  /* [MS-XLS] 2.5.198.82 */\n\t\t\tcase 'PtgSub':    /* [MS-XLS] 2.5.198.90 */\n\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\tif(last_sp >= 0) {\n\t\t\t\t\tswitch(formula[0][last_sp][1][0]) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t// $FlowIgnore\n\t\t\t\t\t\t\tsp = fill(\" \", formula[0][last_sp][1][1]); break;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t// $FlowIgnore\n\t\t\t\t\t\t\tsp = fill(\"\\r\", formula[0][last_sp][1][1]); break;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tsp = \"\";\n\t\t\t\t\t\t\t// $FlowIgnore\n\t\t\t\t\t\t\tif(opts.WTF) throw new Error(\"Unexpected PtgAttrSpaceType \" + formula[0][last_sp][1][0]);\n\t\t\t\t\t}\n\t\t\t\t\te2 = e2 + sp;\n\t\t\t\t\tlast_sp = -1;\n\t\t\t\t}\n\t\t\t\tstack.push(e2+PtgBinOp[f[0]]+e1);\n\t\t\t\tbreak;\n\n\t\t\tcase 'PtgIsect': /* [MS-XLS] 2.5.198.67 */\n\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\tstack.push(e2+\" \"+e1);\n\t\t\t\tbreak;\n\t\t\tcase 'PtgUnion': /* [MS-XLS] 2.5.198.94 */\n\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\tstack.push(e2+\",\"+e1);\n\t\t\t\tbreak;\n\t\t\tcase 'PtgRange': /* [MS-XLS] 2.5.198.83 */\n\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\tstack.push(e2+\":\"+e1);\n\t\t\t\tbreak;\n\n\t\t\tcase 'PtgAttrChoose': /* [MS-XLS] 2.5.198.34 */\n\t\t\t\tbreak;\n\t\t\tcase 'PtgAttrGoto': /* [MS-XLS] 2.5.198.35 */\n\t\t\t\tbreak;\n\t\t\tcase 'PtgAttrIf': /* [MS-XLS] 2.5.198.36 */\n\t\t\t\tbreak;\n\t\t\tcase 'PtgAttrIfError': /* [MS-XLSB] 2.5.97.28 */\n\t\t\t\tbreak;\n\n\n\t\t\tcase 'PtgRef': /* [MS-XLS] 2.5.198.84 */\nc = shift_cell_xls((f[1][1]), _range, opts);\n\t\t\t\tstack.push(encode_cell_xls(c, biff));\n\t\t\t\tbreak;\n\t\t\tcase 'PtgRefN': /* [MS-XLS] 2.5.198.88 */\nc = cell ? shift_cell_xls((f[1][1]), cell, opts) : (f[1][1]);\n\t\t\t\tstack.push(encode_cell_xls(c, biff));\n\t\t\t\tbreak;\n\t\t\tcase 'PtgRef3d': /* [MS-XLS] 2.5.198.85 */\nixti = f[1][1]; c = shift_cell_xls((f[1][2]), _range, opts);\n\t\t\t\tsname = get_ixti(supbooks, ixti, opts);\n\t\t\t\tvar w = sname; /* IE9 fails on defined names */ // eslint-disable-line no-unused-vars\n\t\t\t\tstack.push(sname + \"!\" + encode_cell_xls(c, biff));\n\t\t\t\tbreak;\n\n\t\t\tcase 'PtgFunc': /* [MS-XLS] 2.5.198.62 */\n\t\t\tcase 'PtgFuncVar': /* [MS-XLS] 2.5.198.63 */\n\t\t\t\t/* f[1] = [argc, func, type] */\n\t\t\t\tvar argc = (f[1][0]), func = (f[1][1]);\n\t\t\t\tif(!argc) argc = 0;\n\t\t\t\targc &= 0x7F;\n\t\t\t\tvar args = argc == 0 ? [] : stack.slice(-argc);\n\t\t\t\tstack.length -= argc;\n\t\t\t\tif(func === 'User') func = args.shift();\n\t\t\t\tstack.push(func + \"(\" + args.join(\",\") + \")\");\n\t\t\t\tbreak;\n\n\t\t\tcase 'PtgBool': /* [MS-XLS] 2.5.198.42 */\n\t\t\t\tstack.push(f[1] ? \"TRUE\" : \"FALSE\"); break;\n\t\t\tcase 'PtgInt': /* [MS-XLS] 2.5.198.66 */\n\t\t\t\tstack.push(f[1]); break;\n\t\t\tcase 'PtgNum': /* [MS-XLS] 2.5.198.79 TODO: precision? */\n\t\t\t\tstack.push(String(f[1])); break;\n\t\t\tcase 'PtgStr': /* [MS-XLS] 2.5.198.89 */\n\t\t\t\t// $FlowIgnore\n\t\t\t\tstack.push('\"' + f[1].replace(/\"/g, '\"\"') + '\"'); break;\n\t\t\tcase 'PtgErr': /* [MS-XLS] 2.5.198.57 */\n\t\t\t\tstack.push(f[1]); break;\n\t\t\tcase 'PtgAreaN': /* [MS-XLS] 2.5.198.31 TODO */\nr = shift_range_xls(f[1][1], cell ? {s:cell} : _range, opts);\n\t\t\t\tstack.push(encode_range_xls((r), opts));\n\t\t\t\tbreak;\n\t\t\tcase 'PtgArea': /* [MS-XLS] 2.5.198.27 TODO: fixed points */\nr = shift_range_xls(f[1][1], _range, opts);\n\t\t\t\tstack.push(encode_range_xls((r), opts));\n\t\t\t\tbreak;\n\t\t\tcase 'PtgArea3d': /* [MS-XLS] 2.5.198.28 TODO */\nixti = f[1][1]; r = f[1][2];\n\t\t\t\tsname = get_ixti(supbooks, ixti, opts);\n\t\t\t\tstack.push(sname + \"!\" + encode_range_xls((r), opts));\n\t\t\t\tbreak;\n\t\t\tcase 'PtgAttrSum': /* [MS-XLS] 2.5.198.41 */\n\t\t\t\tstack.push(\"SUM(\" + stack.pop() + \")\");\n\t\t\t\tbreak;\n\n\t\t\tcase 'PtgAttrBaxcel': /* [MS-XLS] 2.5.198.33 */\n\t\t\tcase 'PtgAttrSemi': /* [MS-XLS] 2.5.198.37 */\n\t\t\t\tbreak;\n\n\t\t\tcase 'PtgName': /* [MS-XLS] 2.5.198.76 ; [MS-XLSB] 2.5.97.60 TODO: revisions */\n\t\t\t\t/* f[1] = type, 0, nameindex */\n\t\t\t\tnameidx = (f[1][2]);\n\t\t\t\tvar lbl = (supbooks.names||[])[nameidx-1] || (supbooks[0]||[])[nameidx];\n\t\t\t\tvar name = lbl ? lbl.Name : \"SH33TJSNAME\" + String(nameidx);\n\t\t\t\tif(name in XLSXFutureFunctions) name = XLSXFutureFunctions[name];\n\t\t\t\tstack.push(name);\n\t\t\t\tbreak;\n\n\t\t\tcase 'PtgNameX': /* [MS-XLS] 2.5.198.77 ; [MS-XLSB] 2.5.97.61 TODO: revisions */\n\t\t\t\t/* f[1] = type, ixti, nameindex */\n\t\t\t\tvar bookidx = (f[1][1]); nameidx = (f[1][2]); var externbook;\n\t\t\t\t/* TODO: Properly handle missing values -- this should be using get_ixti_raw primarily */\n\t\t\t\tif(opts.biff <= 5) {\n\t\t\t\t\tif(bookidx < 0) bookidx = -bookidx;\n\t\t\t\t\tif(supbooks[bookidx]) externbook = supbooks[bookidx][nameidx];\n\t\t\t\t} else {\n\t\t\t\t\tvar o = \"\";\n\t\t\t\t\tif(((supbooks[bookidx]||[])[0]||[])[0] == 0x3A01){/* empty */}\n\t\t\t\t\telse if(((supbooks[bookidx]||[])[0]||[])[0] == 0x0401){\n\t\t\t\t\t\tif(supbooks[bookidx][nameidx] && supbooks[bookidx][nameidx].itab > 0) {\n\t\t\t\t\t\t\to = supbooks.SheetNames[supbooks[bookidx][nameidx].itab-1] + \"!\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse o = supbooks.SheetNames[nameidx-1]+ \"!\";\n\t\t\t\t\tif(supbooks[bookidx] && supbooks[bookidx][nameidx]) o += supbooks[bookidx][nameidx].Name;\n\t\t\t\t\telse if(supbooks[0] && supbooks[0][nameidx]) o += supbooks[0][nameidx].Name;\n\t\t\t\t\telse {\n\t\t\t\t\t\tvar ixtidata = (get_ixti_raw(supbooks, bookidx, opts)||\"\").split(\";;\");\n\t\t\t\t\t\tif(ixtidata[nameidx - 1]) o = ixtidata[nameidx - 1]; // TODO: confirm this is correct\n\t\t\t\t\t\telse o += \"SH33TJSERRX\";\n\t\t\t\t\t}\n\t\t\t\t\tstack.push(o);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(!externbook) externbook = {Name: \"SH33TJSERRY\"};\n\t\t\t\tstack.push(externbook.Name);\n\t\t\t\tbreak;\n\n\t\t\tcase 'PtgParen': /* [MS-XLS] 2.5.198.80 */\n\t\t\t\tvar lp = '(', rp = ')';\n\t\t\t\tif(last_sp >= 0) {\n\t\t\t\t\tsp = \"\";\n\t\t\t\t\tswitch(formula[0][last_sp][1][0]) {\n\t\t\t\t\t\t// $FlowIgnore\n\t\t\t\t\t\tcase 2: lp = fill(\" \", formula[0][last_sp][1][1]) + lp; break;\n\t\t\t\t\t\t// $FlowIgnore\n\t\t\t\t\t\tcase 3: lp = fill(\"\\r\", formula[0][last_sp][1][1]) + lp; break;\n\t\t\t\t\t\t// $FlowIgnore\n\t\t\t\t\t\tcase 4: rp = fill(\" \", formula[0][last_sp][1][1]) + rp; break;\n\t\t\t\t\t\t// $FlowIgnore\n\t\t\t\t\t\tcase 5: rp = fill(\"\\r\", formula[0][last_sp][1][1]) + rp; break;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// $FlowIgnore\n\t\t\t\t\t\t\tif(opts.WTF) throw new Error(\"Unexpected PtgAttrSpaceType \" + formula[0][last_sp][1][0]);\n\t\t\t\t\t}\n\t\t\t\t\tlast_sp = -1;\n\t\t\t\t}\n\t\t\t\tstack.push(lp + stack.pop() + rp); break;\n\n\t\t\tcase 'PtgRefErr': /* [MS-XLS] 2.5.198.86 */\n\t\t\t\tstack.push('#REF!'); break;\n\n\t\t\tcase 'PtgRefErr3d': /* [MS-XLS] 2.5.198.87 */\n\t\t\t\tstack.push('#REF!'); break;\n\n\t\t\tcase 'PtgExp': /* [MS-XLS] 2.5.198.58 TODO */\n\t\t\t\tc = {c:(f[1][1]),r:(f[1][0])};\n\t\t\t\tvar q = ({c: cell.c, r:cell.r});\n\t\t\t\tif(supbooks.sharedf[encode_cell(c)]) {\n\t\t\t\t\tvar parsedf = (supbooks.sharedf[encode_cell(c)]);\n\t\t\t\t\tstack.push(stringify_formula(parsedf, _range, q, supbooks, opts));\n\t\t\t\t} else {\n\t\t\t\t\tvar fnd = false;\n\t\t\t\t\tfor(e1=0;e1!=supbooks.arrayf.length; ++e1) {\n\t\t\t\t\t\t/* TODO: should be something like range_has */\n\t\t\t\t\t\te2 = supbooks.arrayf[e1];\n\t\t\t\t\t\tif(c.c < e2[0].s.c || c.c > e2[0].e.c) continue;\n\t\t\t\t\t\tif(c.r < e2[0].s.r || c.r > e2[0].e.r) continue;\n\t\t\t\t\t\tstack.push(stringify_formula(e2[1], _range, q, supbooks, opts));\n\t\t\t\t\t\tfnd = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(!fnd) stack.push(f[1]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'PtgArray': /* [MS-XLS] 2.5.198.32 TODO */\n\t\t\t\tstack.push(\"{\" + stringify_array(f[1]) + \"}\");\n\t\t\t\tbreak;\n\n\t\t\tcase 'PtgMemArea': /* [MS-XLS] 2.5.198.70 TODO: confirm this is a non-display */\n\t\t\t\t//stack.push(\"(\" + f[2].map(encode_range).join(\",\") + \")\");\n\t\t\t\tbreak;\n\n\t\t\tcase 'PtgAttrSpace': /* [MS-XLS] 2.5.198.38 */\n\t\t\tcase 'PtgAttrSpaceSemi': /* [MS-XLS] 2.5.198.39 */\n\t\t\t\tlast_sp = ff;\n\t\t\t\tbreak;\n\n\t\t\tcase 'PtgTbl': /* [MS-XLS] 2.5.198.92 TODO */\n\t\t\t\tbreak;\n\n\t\t\tcase 'PtgMemErr': /* [MS-XLS] 2.5.198.71 */\n\t\t\t\tbreak;\n\n\t\t\tcase 'PtgMissArg': /* [MS-XLS] 2.5.198.74 */\n\t\t\t\tstack.push(\"\");\n\t\t\t\tbreak;\n\n\t\t\tcase 'PtgAreaErr': /* [MS-XLS] 2.5.198.29 */\n\t\t\t\tstack.push(\"#REF!\"); break;\n\n\t\t\tcase 'PtgAreaErr3d': /* [MS-XLS] 2.5.198.30 */\n\t\t\t\tstack.push(\"#REF!\"); break;\n\n\t\t\tcase 'PtgList': /* [MS-XLSB] 2.5.97.52 */\n\t\t\t\t// $FlowIgnore\n\t\t\t\tstack.push(\"Table\" + f[1].idx + \"[#\" + f[1].rt + \"]\");\n\t\t\t\tbreak;\n\n\t\t\tcase 'PtgMemAreaN':\n\t\t\tcase 'PtgMemNoMemN':\n\t\t\tcase 'PtgAttrNoop':\n\t\t\tcase 'PtgSheet':\n\t\t\tcase 'PtgEndSheet':\n\t\t\t\tbreak;\n\n\t\t\tcase 'PtgMemFunc': /* [MS-XLS] 2.5.198.72 TODO */\n\t\t\t\tbreak;\n\t\t\tcase 'PtgMemNoMem': /* [MS-XLS] 2.5.198.73 TODO */\n\t\t\t\tbreak;\n\n\t\t\tcase 'PtgElfCol': /* [MS-XLS] 2.5.198.46 */\n\t\t\tcase 'PtgElfColS': /* [MS-XLS] 2.5.198.47 */\n\t\t\tcase 'PtgElfColSV': /* [MS-XLS] 2.5.198.48 */\n\t\t\tcase 'PtgElfColV': /* [MS-XLS] 2.5.198.49 */\n\t\t\tcase 'PtgElfLel': /* [MS-XLS] 2.5.198.50 */\n\t\t\tcase 'PtgElfRadical': /* [MS-XLS] 2.5.198.51 */\n\t\t\tcase 'PtgElfRadicalLel': /* [MS-XLS] 2.5.198.52 */\n\t\t\tcase 'PtgElfRadicalS': /* [MS-XLS] 2.5.198.53 */\n\t\t\tcase 'PtgElfRw': /* [MS-XLS] 2.5.198.54 */\n\t\t\tcase 'PtgElfRwV': /* [MS-XLS] 2.5.198.55 */\n\t\t\t\tthrow new Error(\"Unsupported ELFs\");\n\n\t\t\tcase 'PtgSxName': /* [MS-XLS] 2.5.198.91 TODO -- find a test case */\n\t\t\t\tthrow new Error('Unrecognized Formula Token: ' + String(f));\n\t\t\tdefault: throw new Error('Unrecognized Formula Token: ' + String(f));\n\t\t}\n\t\tvar PtgNonDisp = ['PtgAttrSpace', 'PtgAttrSpaceSemi', 'PtgAttrGoto'];\n\t\tif(opts.biff != 3) if(last_sp >= 0 && PtgNonDisp.indexOf(formula[0][ff][0]) == -1) {\n\t\t\tf = formula[0][last_sp];\n\t\t\tvar _left = true;\n\t\t\tswitch(f[1][0]) {\n\t\t\t\t/* note: some bad XLSB files omit the PtgParen */\n\t\t\t\tcase 4: _left = false;\n\t\t\t\t/* falls through */\n\t\t\t\tcase 0:\n\t\t\t\t\t// $FlowIgnore\n\t\t\t\t\tsp = fill(\" \", f[1][1]); break;\n\t\t\t\tcase 5: _left = false;\n\t\t\t\t/* falls through */\n\t\t\t\tcase 1:\n\t\t\t\t\t// $FlowIgnore\n\t\t\t\t\tsp = fill(\"\\r\", f[1][1]); break;\n\t\t\t\tdefault:\n\t\t\t\t\tsp = \"\";\n\t\t\t\t\t// $FlowIgnore\n\t\t\t\t\tif(opts.WTF) throw new Error(\"Unexpected PtgAttrSpaceType \" + f[1][0]);\n\t\t\t}\n\t\t\tstack.push((_left ? sp : \"\") + stack.pop() + (_left ? \"\" : sp));\n\t\t\tlast_sp = -1;\n\t\t}\n\t}\n\tif(stack.length > 1 && opts.WTF) throw new Error(\"bad formula stack\");\n\treturn stack[0];\n}\n\n/* [MS-XLS] 2.5.198.1 TODO */\nfunction parse_ArrayParsedFormula(blob, length, opts) {\n\tvar target = blob.l + length, len = opts.biff == 2 ? 1 : 2;\n\tvar rgcb, cce = blob.read_shift(len); // length of rgce\n\tif(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];\n\tvar rgce = parse_Rgce(blob, cce, opts);\n\tif(length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);\n\tblob.l = target;\n\treturn [rgce, rgcb];\n}\n\n/* [MS-XLS] 2.5.198.3 TODO */\nfunction parse_XLSCellParsedFormula(blob, length, opts) {\n\tvar target = blob.l + length, len = opts.biff == 2 ? 1 : 2;\n\tvar rgcb, cce = blob.read_shift(len); // length of rgce\n\tif(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];\n\tvar rgce = parse_Rgce(blob, cce, opts);\n\tif(length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);\n\tblob.l = target;\n\treturn [rgce, rgcb];\n}\n\n/* [MS-XLS] 2.5.198.21 */\nfunction parse_NameParsedFormula(blob, length, opts, cce) {\n\tvar target = blob.l + length;\n\tvar rgce = parse_Rgce(blob, cce, opts);\n\tvar rgcb;\n\tif(target !== blob.l) rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);\n\treturn [rgce, rgcb];\n}\n\n/* [MS-XLS] 2.5.198.118 TODO */\nfunction parse_SharedParsedFormula(blob, length, opts) {\n\tvar target = blob.l + length;\n\tvar rgcb, cce = blob.read_shift(2); // length of rgce\n\tvar rgce = parse_Rgce(blob, cce, opts);\n\tif(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];\n\tif(length !== cce + 2) rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);\n\treturn [rgce, rgcb];\n}\n\n/* [MS-XLS] 2.5.133 TODO: how to emit empty strings? */\nfunction parse_FormulaValue(blob) {\n\tvar b;\n\tif(__readUInt16LE(blob,blob.l + 6) !== 0xFFFF) return [parse_Xnum(blob),'n'];\n\tswitch(blob[blob.l]) {\n\t\tcase 0x00: blob.l += 8; return [\"String\", 's'];\n\t\tcase 0x01: b = blob[blob.l+2] === 0x1; blob.l += 8; return [b,'b'];\n\t\tcase 0x02: b = blob[blob.l+2]; blob.l += 8; return [b,'e'];\n\t\tcase 0x03: blob.l += 8; return [\"\",'s'];\n\t}\n\treturn [];\n}\nfunction write_FormulaValue(value) {\n\tif(value == null) {\n\t\t// Blank String Value\n\t\tvar o = new_buf(8);\n\t\to.write_shift(1, 0x03);\n\t\to.write_shift(1, 0);\n\t\to.write_shift(2, 0);\n\t\to.write_shift(2, 0);\n\t\to.write_shift(2, 0xFFFF);\n\t\treturn o;\n\t} else if(typeof value == \"number\") return write_Xnum(value);\n\treturn write_Xnum(0);\n}\n\n/* [MS-XLS] 2.4.127 TODO */\nfunction parse_Formula(blob, length, opts) {\n\tvar end = blob.l + length;\n\tvar cell = parse_XLSCell(blob, 6);\n\tif(opts.biff == 2) ++blob.l;\n\tvar val = parse_FormulaValue(blob,8);\n\tvar flags = blob.read_shift(1);\n\tif(opts.biff != 2) {\n\t\tblob.read_shift(1);\n\t\tif(opts.biff >= 5) {\n\t\t\t/*var chn = */blob.read_shift(4);\n\t\t}\n\t}\n\tvar cbf = parse_XLSCellParsedFormula(blob, end - blob.l, opts);\n\treturn {cell:cell, val:val[0], formula:cbf, shared: (flags >> 3) & 1, tt:val[1]};\n}\nfunction write_Formula(cell, R, C, opts, os) {\n\t// Cell\n\tvar o1 = write_XLSCell(R, C, os);\n\n\t// FormulaValue\n\tvar o2 = write_FormulaValue(cell.v);\n\n\t// flags + cache\n\tvar o3 = new_buf(6);\n\tvar flags = 0x01 | 0x20;\n\to3.write_shift(2, flags);\n\to3.write_shift(4, 0);\n\n\t// CellParsedFormula\n\tvar bf = new_buf(cell.bf.length);\n\tfor(var i = 0; i < cell.bf.length; ++i) bf[i] = cell.bf[i];\n\n\tvar out = bconcat([o1, o2, o3, bf]);\n\treturn out;\n}\n\n\n/* XLSB Parsed Formula records have the same shape */\nfunction parse_XLSBParsedFormula(data, length, opts) {\n\tvar cce = data.read_shift(4);\n\tvar rgce = parse_Rgce(data, cce, opts);\n\tvar cb = data.read_shift(4);\n\tvar rgcb = cb > 0 ? parse_RgbExtra(data, cb, rgce, opts) : null;\n\treturn [rgce, rgcb];\n}\n\n/* [MS-XLSB] 2.5.97.1 ArrayParsedFormula */\nvar parse_XLSBArrayParsedFormula = parse_XLSBParsedFormula;\n/* [MS-XLSB] 2.5.97.4 CellParsedFormula */\nvar parse_XLSBCellParsedFormula = parse_XLSBParsedFormula;\n/* [MS-XLSB] 2.5.97.8 DVParsedFormula */\n//var parse_XLSBDVParsedFormula = parse_XLSBParsedFormula;\n/* [MS-XLSB] 2.5.97.9 FRTParsedFormula */\n//var parse_XLSBFRTParsedFormula = parse_XLSBParsedFormula2;\n/* [MS-XLSB] 2.5.97.12 NameParsedFormula */\nvar parse_XLSBNameParsedFormula = parse_XLSBParsedFormula;\n/* [MS-XLSB] 2.5.97.98 SharedParsedFormula */\nvar parse_XLSBSharedParsedFormula = parse_XLSBParsedFormula;\n/* [MS-XLS] 2.5.198.4 */\nvar Cetab = {\n0x0000: 'BEEP',\n0x0001: 'OPEN',\n0x0002: 'OPEN.LINKS',\n0x0003: 'CLOSE.ALL',\n0x0004: 'SAVE',\n0x0005: 'SAVE.AS',\n0x0006: 'FILE.DELETE',\n0x0007: 'PAGE.SETUP',\n0x0008: 'PRINT',\n0x0009: 'PRINTER.SETUP',\n0x000A: 'QUIT',\n0x000B: 'NEW.WINDOW',\n0x000C: 'ARRANGE.ALL',\n0x000D: 'WINDOW.SIZE',\n0x000E: 'WINDOW.MOVE',\n0x000F: 'FULL',\n0x0010: 'CLOSE',\n0x0011: 'RUN',\n0x0016: 'SET.PRINT.AREA',\n0x0017: 'SET.PRINT.TITLES',\n0x0018: 'SET.PAGE.BREAK',\n0x0019: 'REMOVE.PAGE.BREAK',\n0x001A: 'FONT',\n0x001B: 'DISPLAY',\n0x001C: 'PROTECT.DOCUMENT',\n0x001D: 'PRECISION',\n0x001E: 'A1.R1C1',\n0x001F: 'CALCULATE.NOW',\n0x0020: 'CALCULATION',\n0x0022: 'DATA.FIND',\n0x0023: 'EXTRACT',\n0x0024: 'DATA.DELETE',\n0x0025: 'SET.DATABASE',\n0x0026: 'SET.CRITERIA',\n0x0027: 'SORT',\n0x0028: 'DATA.SERIES',\n0x0029: 'TABLE',\n0x002A: 'FORMAT.NUMBER',\n0x002B: 'ALIGNMENT',\n0x002C: 'STYLE',\n0x002D: 'BORDER',\n0x002E: 'CELL.PROTECTION',\n0x002F: 'COLUMN.WIDTH',\n0x0030: 'UNDO',\n0x0031: 'CUT',\n0x0032: 'COPY',\n0x0033: 'PASTE',\n0x0034: 'CLEAR',\n0x0035: 'PASTE.SPECIAL',\n0x0036: 'EDIT.DELETE',\n0x0037: 'INSERT',\n0x0038: 'FILL.RIGHT',\n0x0039: 'FILL.DOWN',\n0x003D: 'DEFINE.NAME',\n0x003E: 'CREATE.NAMES',\n0x003F: 'FORMULA.GOTO',\n0x0040: 'FORMULA.FIND',\n0x0041: 'SELECT.LAST.CELL',\n0x0042: 'SHOW.ACTIVE.CELL',\n0x0043: 'GALLERY.AREA',\n0x0044: 'GALLERY.BAR',\n0x0045: 'GALLERY.COLUMN',\n0x0046: 'GALLERY.LINE',\n0x0047: 'GALLERY.PIE',\n0x0048: 'GALLERY.SCATTER',\n0x0049: 'COMBINATION',\n0x004A: 'PREFERRED',\n0x004B: 'ADD.OVERLAY',\n0x004C: 'GRIDLINES',\n0x004D: 'SET.PREFERRED',\n0x004E: 'AXES',\n0x004F: 'LEGEND',\n0x0050: 'ATTACH.TEXT',\n0x0051: 'ADD.ARROW',\n0x0052: 'SELECT.CHART',\n0x0053: 'SELECT.PLOT.AREA',\n0x0054: 'PATTERNS',\n0x0055: 'MAIN.CHART',\n0x0056: 'OVERLAY',\n0x0057: 'SCALE',\n0x0058: 'FORMAT.LEGEND',\n0x0059: 'FORMAT.TEXT',\n0x005A: 'EDIT.REPEAT',\n0x005B: 'PARSE',\n0x005C: 'JUSTIFY',\n0x005D: 'HIDE',\n0x005E: 'UNHIDE',\n0x005F: 'WORKSPACE',\n0x0060: 'FORMULA',\n0x0061: 'FORMULA.FILL',\n0x0062: 'FORMULA.ARRAY',\n0x0063: 'DATA.FIND.NEXT',\n0x0064: 'DATA.FIND.PREV',\n0x0065: 'FORMULA.FIND.NEXT',\n0x0066: 'FORMULA.FIND.PREV',\n0x0067: 'ACTIVATE',\n0x0068: 'ACTIVATE.NEXT',\n0x0069: 'ACTIVATE.PREV',\n0x006A: 'UNLOCKED.NEXT',\n0x006B: 'UNLOCKED.PREV',\n0x006C: 'COPY.PICTURE',\n0x006D: 'SELECT',\n0x006E: 'DELETE.NAME',\n0x006F: 'DELETE.FORMAT',\n0x0070: 'VLINE',\n0x0071: 'HLINE',\n0x0072: 'VPAGE',\n0x0073: 'HPAGE',\n0x0074: 'VSCROLL',\n0x0075: 'HSCROLL',\n0x0076: 'ALERT',\n0x0077: 'NEW',\n0x0078: 'CANCEL.COPY',\n0x0079: 'SHOW.CLIPBOARD',\n0x007A: 'MESSAGE',\n0x007C: 'PASTE.LINK',\n0x007D: 'APP.ACTIVATE',\n0x007E: 'DELETE.ARROW',\n0x007F: 'ROW.HEIGHT',\n0x0080: 'FORMAT.MOVE',\n0x0081: 'FORMAT.SIZE',\n0x0082: 'FORMULA.REPLACE',\n0x0083: 'SEND.KEYS',\n0x0084: 'SELECT.SPECIAL',\n0x0085: 'APPLY.NAMES',\n0x0086: 'REPLACE.FONT',\n0x0087: 'FREEZE.PANES',\n0x0088: 'SHOW.INFO',\n0x0089: 'SPLIT',\n0x008A: 'ON.WINDOW',\n0x008B: 'ON.DATA',\n0x008C: 'DISABLE.INPUT',\n0x008E: 'OUTLINE',\n0x008F: 'LIST.NAMES',\n0x0090: 'FILE.CLOSE',\n0x0091: 'SAVE.WORKBOOK',\n0x0092: 'DATA.FORM',\n0x0093: 'COPY.CHART',\n0x0094: 'ON.TIME',\n0x0095: 'WAIT',\n0x0096: 'FORMAT.FONT',\n0x0097: 'FILL.UP',\n0x0098: 'FILL.LEFT',\n0x0099: 'DELETE.OVERLAY',\n0x009B: 'SHORT.MENUS',\n0x009F: 'SET.UPDATE.STATUS',\n0x00A1: 'COLOR.PALETTE',\n0x00A2: 'DELETE.STYLE',\n0x00A3: 'WINDOW.RESTORE',\n0x00A4: 'WINDOW.MAXIMIZE',\n0x00A6: 'CHANGE.LINK',\n0x00A7: 'CALCULATE.DOCUMENT',\n0x00A8: 'ON.KEY',\n0x00A9: 'APP.RESTORE',\n0x00AA: 'APP.MOVE',\n0x00AB: 'APP.SIZE',\n0x00AC: 'APP.MINIMIZE',\n0x00AD: 'APP.MAXIMIZE',\n0x00AE: 'BRING.TO.FRONT',\n0x00AF: 'SEND.TO.BACK',\n0x00B9: 'MAIN.CHART.TYPE',\n0x00BA: 'OVERLAY.CHART.TYPE',\n0x00BB: 'SELECT.END',\n0x00BC: 'OPEN.MAIL',\n0x00BD: 'SEND.MAIL',\n0x00BE: 'STANDARD.FONT',\n0x00BF: 'CONSOLIDATE',\n0x00C0: 'SORT.SPECIAL',\n0x00C1: 'GALLERY.3D.AREA',\n0x00C2: 'GALLERY.3D.COLUMN',\n0x00C3: 'GALLERY.3D.LINE',\n0x00C4: 'GALLERY.3D.PIE',\n0x00C5: 'VIEW.3D',\n0x00C6: 'GOAL.SEEK',\n0x00C7: 'WORKGROUP',\n0x00C8: 'FILL.GROUP',\n0x00C9: 'UPDATE.LINK',\n0x00CA: 'PROMOTE',\n0x00CB: 'DEMOTE',\n0x00CC: 'SHOW.DETAIL',\n0x00CE: 'UNGROUP',\n0x00CF: 'OBJECT.PROPERTIES',\n0x00D0: 'SAVE.NEW.OBJECT',\n0x00D1: 'SHARE',\n0x00D2: 'SHARE.NAME',\n0x00D3: 'DUPLICATE',\n0x00D4: 'APPLY.STYLE',\n0x00D5: 'ASSIGN.TO.OBJECT',\n0x00D6: 'OBJECT.PROTECTION',\n0x00D7: 'HIDE.OBJECT',\n0x00D8: 'SET.EXTRACT',\n0x00D9: 'CREATE.PUBLISHER',\n0x00DA: 'SUBSCRIBE.TO',\n0x00DB: 'ATTRIBUTES',\n0x00DC: 'SHOW.TOOLBAR',\n0x00DE: 'PRINT.PREVIEW',\n0x00DF: 'EDIT.COLOR',\n0x00E0: 'SHOW.LEVELS',\n0x00E1: 'FORMAT.MAIN',\n0x00E2: 'FORMAT.OVERLAY',\n0x00E3: 'ON.RECALC',\n0x00E4: 'EDIT.SERIES',\n0x00E5: 'DEFINE.STYLE',\n0x00F0: 'LINE.PRINT',\n0x00F3: 'ENTER.DATA',\n0x00F9: 'GALLERY.RADAR',\n0x00FA: 'MERGE.STYLES',\n0x00FB: 'EDITION.OPTIONS',\n0x00FC: 'PASTE.PICTURE',\n0x00FD: 'PASTE.PICTURE.LINK',\n0x00FE: 'SPELLING',\n0x0100: 'ZOOM',\n0x0103: 'INSERT.OBJECT',\n0x0104: 'WINDOW.MINIMIZE',\n0x0109: 'SOUND.NOTE',\n0x010A: 'SOUND.PLAY',\n0x010B: 'FORMAT.SHAPE',\n0x010C: 'EXTEND.POLYGON',\n0x010D: 'FORMAT.AUTO',\n0x0110: 'GALLERY.3D.BAR',\n0x0111: 'GALLERY.3D.SURFACE',\n0x0112: 'FILL.AUTO',\n0x0114: 'CUSTOMIZE.TOOLBAR',\n0x0115: 'ADD.TOOL',\n0x0116: 'EDIT.OBJECT',\n0x0117: 'ON.DOUBLECLICK',\n0x0118: 'ON.ENTRY',\n0x0119: 'WORKBOOK.ADD',\n0x011A: 'WORKBOOK.MOVE',\n0x011B: 'WORKBOOK.COPY',\n0x011C: 'WORKBOOK.OPTIONS',\n0x011D: 'SAVE.WORKSPACE',\n0x0120: 'CHART.WIZARD',\n0x0121: 'DELETE.TOOL',\n0x0122: 'MOVE.TOOL',\n0x0123: 'WORKBOOK.SELECT',\n0x0124: 'WORKBOOK.ACTIVATE',\n0x0125: 'ASSIGN.TO.TOOL',\n0x0127: 'COPY.TOOL',\n0x0128: 'RESET.TOOL',\n0x0129: 'CONSTRAIN.NUMERIC',\n0x012A: 'PASTE.TOOL',\n0x012E: 'WORKBOOK.NEW',\n0x0131: 'SCENARIO.CELLS',\n0x0132: 'SCENARIO.DELETE',\n0x0133: 'SCENARIO.ADD',\n0x0134: 'SCENARIO.EDIT',\n0x0135: 'SCENARIO.SHOW',\n0x0136: 'SCENARIO.SHOW.NEXT',\n0x0137: 'SCENARIO.SUMMARY',\n0x0138: 'PIVOT.TABLE.WIZARD',\n0x0139: 'PIVOT.FIELD.PROPERTIES',\n0x013A: 'PIVOT.FIELD',\n0x013B: 'PIVOT.ITEM',\n0x013C: 'PIVOT.ADD.FIELDS',\n0x013E: 'OPTIONS.CALCULATION',\n0x013F: 'OPTIONS.EDIT',\n0x0140: 'OPTIONS.VIEW',\n0x0141: 'ADDIN.MANAGER',\n0x0142: 'MENU.EDITOR',\n0x0143: 'ATTACH.TOOLBARS',\n0x0144: 'VBAActivate',\n0x0145: 'OPTIONS.CHART',\n0x0148: 'VBA.INSERT.FILE',\n0x014A: 'VBA.PROCEDURE.DEFINITION',\n0x0150: 'ROUTING.SLIP',\n0x0152: 'ROUTE.DOCUMENT',\n0x0153: 'MAIL.LOGON',\n0x0156: 'INSERT.PICTURE',\n0x0157: 'EDIT.TOOL',\n0x0158: 'GALLERY.DOUGHNUT',\n0x015E: 'CHART.TREND',\n0x0160: 'PIVOT.ITEM.PROPERTIES',\n0x0162: 'WORKBOOK.INSERT',\n0x0163: 'OPTIONS.TRANSITION',\n0x0164: 'OPTIONS.GENERAL',\n0x0172: 'FILTER.ADVANCED',\n0x0175: 'MAIL.ADD.MAILER',\n0x0176: 'MAIL.DELETE.MAILER',\n0x0177: 'MAIL.REPLY',\n0x0178: 'MAIL.REPLY.ALL',\n0x0179: 'MAIL.FORWARD',\n0x017A: 'MAIL.NEXT.LETTER',\n0x017B: 'DATA.LABEL',\n0x017C: 'INSERT.TITLE',\n0x017D: 'FONT.PROPERTIES',\n0x017E: 'MACRO.OPTIONS',\n0x017F: 'WORKBOOK.HIDE',\n0x0180: 'WORKBOOK.UNHIDE',\n0x0181: 'WORKBOOK.DELETE',\n0x0182: 'WORKBOOK.NAME',\n0x0184: 'GALLERY.CUSTOM',\n0x0186: 'ADD.CHART.AUTOFORMAT',\n0x0187: 'DELETE.CHART.AUTOFORMAT',\n0x0188: 'CHART.ADD.DATA',\n0x0189: 'AUTO.OUTLINE',\n0x018A: 'TAB.ORDER',\n0x018B: 'SHOW.DIALOG',\n0x018C: 'SELECT.ALL',\n0x018D: 'UNGROUP.SHEETS',\n0x018E: 'SUBTOTAL.CREATE',\n0x018F: 'SUBTOTAL.REMOVE',\n0x0190: 'RENAME.OBJECT',\n0x019C: 'WORKBOOK.SCROLL',\n0x019D: 'WORKBOOK.NEXT',\n0x019E: 'WORKBOOK.PREV',\n0x019F: 'WORKBOOK.TAB.SPLIT',\n0x01A0: 'FULL.SCREEN',\n0x01A1: 'WORKBOOK.PROTECT',\n0x01A4: 'SCROLLBAR.PROPERTIES',\n0x01A5: 'PIVOT.SHOW.PAGES',\n0x01A6: 'TEXT.TO.COLUMNS',\n0x01A7: 'FORMAT.CHARTTYPE',\n0x01A8: 'LINK.FORMAT',\n0x01A9: 'TRACER.DISPLAY',\n0x01AE: 'TRACER.NAVIGATE',\n0x01AF: 'TRACER.CLEAR',\n0x01B0: 'TRACER.ERROR',\n0x01B1: 'PIVOT.FIELD.GROUP',\n0x01B2: 'PIVOT.FIELD.UNGROUP',\n0x01B3: 'CHECKBOX.PROPERTIES',\n0x01B4: 'LABEL.PROPERTIES',\n0x01B5: 'LISTBOX.PROPERTIES',\n0x01B6: 'EDITBOX.PROPERTIES',\n0x01B7: 'PIVOT.REFRESH',\n0x01B8: 'LINK.COMBO',\n0x01B9: 'OPEN.TEXT',\n0x01BA: 'HIDE.DIALOG',\n0x01BB: 'SET.DIALOG.FOCUS',\n0x01BC: 'ENABLE.OBJECT',\n0x01BD: 'PUSHBUTTON.PROPERTIES',\n0x01BE: 'SET.DIALOG.DEFAULT',\n0x01BF: 'FILTER',\n0x01C0: 'FILTER.SHOW.ALL',\n0x01C1: 'CLEAR.OUTLINE',\n0x01C2: 'FUNCTION.WIZARD',\n0x01C3: 'ADD.LIST.ITEM',\n0x01C4: 'SET.LIST.ITEM',\n0x01C5: 'REMOVE.LIST.ITEM',\n0x01C6: 'SELECT.LIST.ITEM',\n0x01C7: 'SET.CONTROL.VALUE',\n0x01C8: 'SAVE.COPY.AS',\n0x01CA: 'OPTIONS.LISTS.ADD',\n0x01CB: 'OPTIONS.LISTS.DELETE',\n0x01CC: 'SERIES.AXES',\n0x01CD: 'SERIES.X',\n0x01CE: 'SERIES.Y',\n0x01CF: 'ERRORBAR.X',\n0x01D0: 'ERRORBAR.Y',\n0x01D1: 'FORMAT.CHART',\n0x01D2: 'SERIES.ORDER',\n0x01D3: 'MAIL.LOGOFF',\n0x01D4: 'CLEAR.ROUTING.SLIP',\n0x01D5: 'APP.ACTIVATE.MICROSOFT',\n0x01D6: 'MAIL.EDIT.MAILER',\n0x01D7: 'ON.SHEET',\n0x01D8: 'STANDARD.WIDTH',\n0x01D9: 'SCENARIO.MERGE',\n0x01DA: 'SUMMARY.INFO',\n0x01DB: 'FIND.FILE',\n0x01DC: 'ACTIVE.CELL.FONT',\n0x01DD: 'ENABLE.TIPWIZARD',\n0x01DE: 'VBA.MAKE.ADDIN',\n0x01E0: 'INSERTDATATABLE',\n0x01E1: 'WORKGROUP.OPTIONS',\n0x01E2: 'MAIL.SEND.MAILER',\n0x01E5: 'AUTOCORRECT',\n0x01E9: 'POST.DOCUMENT',\n0x01EB: 'PICKLIST',\n0x01ED: 'VIEW.SHOW',\n0x01EE: 'VIEW.DEFINE',\n0x01EF: 'VIEW.DELETE',\n0x01FD: 'SHEET.BACKGROUND',\n0x01FE: 'INSERT.MAP.OBJECT',\n0x01FF: 'OPTIONS.MENONO',\n0x0205: 'MSOCHECKS',\n0x0206: 'NORMAL',\n0x0207: 'LAYOUT',\n0x0208: 'RM.PRINT.AREA',\n0x0209: 'CLEAR.PRINT.AREA',\n0x020A: 'ADD.PRINT.AREA',\n0x020B: 'MOVE.BRK',\n0x0221: 'HIDECURR.NOTE',\n0x0222: 'HIDEALL.NOTES',\n0x0223: 'DELETE.NOTE',\n0x0224: 'TRAVERSE.NOTES',\n0x0225: 'ACTIVATE.NOTES',\n0x026C: 'PROTECT.REVISIONS',\n0x026D: 'UNPROTECT.REVISIONS',\n0x0287: 'OPTIONS.ME',\n0x028D: 'WEB.PUBLISH',\n0x029B: 'NEWWEBQUERY',\n0x02A1: 'PIVOT.TABLE.CHART',\n0x02F1: 'OPTIONS.SAVE',\n0x02F3: 'OPTIONS.SPELL',\n0x0328: 'HIDEALL.INKANNOTS'\n};\n\n/* [MS-XLS] 2.5.198.17 */\n/* [MS-XLSB] 2.5.97.10 */\nvar Ftab = {\n0x0000: 'COUNT',\n0x0001: 'IF',\n0x0002: 'ISNA',\n0x0003: 'ISERROR',\n0x0004: 'SUM',\n0x0005: 'AVERAGE',\n0x0006: 'MIN',\n0x0007: 'MAX',\n0x0008: 'ROW',\n0x0009: 'COLUMN',\n0x000A: 'NA',\n0x000B: 'NPV',\n0x000C: 'STDEV',\n0x000D: 'DOLLAR',\n0x000E: 'FIXED',\n0x000F: 'SIN',\n0x0010: 'COS',\n0x0011: 'TAN',\n0x0012: 'ATAN',\n0x0013: 'PI',\n0x0014: 'SQRT',\n0x0015: 'EXP',\n0x0016: 'LN',\n0x0017: 'LOG10',\n0x0018: 'ABS',\n0x0019: 'INT',\n0x001A: 'SIGN',\n0x001B: 'ROUND',\n0x001C: 'LOOKUP',\n0x001D: 'INDEX',\n0x001E: 'REPT',\n0x001F: 'MID',\n0x0020: 'LEN',\n0x0021: 'VALUE',\n0x0022: 'TRUE',\n0x0023: 'FALSE',\n0x0024: 'AND',\n0x0025: 'OR',\n0x0026: 'NOT',\n0x0027: 'MOD',\n0x0028: 'DCOUNT',\n0x0029: 'DSUM',\n0x002A: 'DAVERAGE',\n0x002B: 'DMIN',\n0x002C: 'DMAX',\n0x002D: 'DSTDEV',\n0x002E: 'VAR',\n0x002F: 'DVAR',\n0x0030: 'TEXT',\n0x0031: 'LINEST',\n0x0032: 'TREND',\n0x0033: 'LOGEST',\n0x0034: 'GROWTH',\n0x0035: 'GOTO',\n0x0036: 'HALT',\n0x0037: 'RETURN',\n0x0038: 'PV',\n0x0039: 'FV',\n0x003A: 'NPER',\n0x003B: 'PMT',\n0x003C: 'RATE',\n0x003D: 'MIRR',\n0x003E: 'IRR',\n0x003F: 'RAND',\n0x0040: 'MATCH',\n0x0041: 'DATE',\n0x0042: 'TIME',\n0x0043: 'DAY',\n0x0044: 'MONTH',\n0x0045: 'YEAR',\n0x0046: 'WEEKDAY',\n0x0047: 'HOUR',\n0x0048: 'MINUTE',\n0x0049: 'SECOND',\n0x004A: 'NOW',\n0x004B: 'AREAS',\n0x004C: 'ROWS',\n0x004D: 'COLUMNS',\n0x004E: 'OFFSET',\n0x004F: 'ABSREF',\n0x0050: 'RELREF',\n0x0051: 'ARGUMENT',\n0x0052: 'SEARCH',\n0x0053: 'TRANSPOSE',\n0x0054: 'ERROR',\n0x0055: 'STEP',\n0x0056: 'TYPE',\n0x0057: 'ECHO',\n0x0058: 'SET.NAME',\n0x0059: 'CALLER',\n0x005A: 'DEREF',\n0x005B: 'WINDOWS',\n0x005C: 'SERIES',\n0x005D: 'DOCUMENTS',\n0x005E: 'ACTIVE.CELL',\n0x005F: 'SELECTION',\n0x0060: 'RESULT',\n0x0061: 'ATAN2',\n0x0062: 'ASIN',\n0x0063: 'ACOS',\n0x0064: 'CHOOSE',\n0x0065: 'HLOOKUP',\n0x0066: 'VLOOKUP',\n0x0067: 'LINKS',\n0x0068: 'INPUT',\n0x0069: 'ISREF',\n0x006A: 'GET.FORMULA',\n0x006B: 'GET.NAME',\n0x006C: 'SET.VALUE',\n0x006D: 'LOG',\n0x006E: 'EXEC',\n0x006F: 'CHAR',\n0x0070: 'LOWER',\n0x0071: 'UPPER',\n0x0072: 'PROPER',\n0x0073: 'LEFT',\n0x0074: 'RIGHT',\n0x0075: 'EXACT',\n0x0076: 'TRIM',\n0x0077: 'REPLACE',\n0x0078: 'SUBSTITUTE',\n0x0079: 'CODE',\n0x007A: 'NAMES',\n0x007B: 'DIRECTORY',\n0x007C: 'FIND',\n0x007D: 'CELL',\n0x007E: 'ISERR',\n0x007F: 'ISTEXT',\n0x0080: 'ISNUMBER',\n0x0081: 'ISBLANK',\n0x0082: 'T',\n0x0083: 'N',\n0x0084: 'FOPEN',\n0x0085: 'FCLOSE',\n0x0086: 'FSIZE',\n0x0087: 'FREADLN',\n0x0088: 'FREAD',\n0x0089: 'FWRITELN',\n0x008A: 'FWRITE',\n0x008B: 'FPOS',\n0x008C: 'DATEVALUE',\n0x008D: 'TIMEVALUE',\n0x008E: 'SLN',\n0x008F: 'SYD',\n0x0090: 'DDB',\n0x0091: 'GET.DEF',\n0x0092: 'REFTEXT',\n0x0093: 'TEXTREF',\n0x0094: 'INDIRECT',\n0x0095: 'REGISTER',\n0x0096: 'CALL',\n0x0097: 'ADD.BAR',\n0x0098: 'ADD.MENU',\n0x0099: 'ADD.COMMAND',\n0x009A: 'ENABLE.COMMAND',\n0x009B: 'CHECK.COMMAND',\n0x009C: 'RENAME.COMMAND',\n0x009D: 'SHOW.BAR',\n0x009E: 'DELETE.MENU',\n0x009F: 'DELETE.COMMAND',\n0x00A0: 'GET.CHART.ITEM',\n0x00A1: 'DIALOG.BOX',\n0x00A2: 'CLEAN',\n0x00A3: 'MDETERM',\n0x00A4: 'MINVERSE',\n0x00A5: 'MMULT',\n0x00A6: 'FILES',\n0x00A7: 'IPMT',\n0x00A8: 'PPMT',\n0x00A9: 'COUNTA',\n0x00AA: 'CANCEL.KEY',\n0x00AB: 'FOR',\n0x00AC: 'WHILE',\n0x00AD: 'BREAK',\n0x00AE: 'NEXT',\n0x00AF: 'INITIATE',\n0x00B0: 'REQUEST',\n0x00B1: 'POKE',\n0x00B2: 'EXECUTE',\n0x00B3: 'TERMINATE',\n0x00B4: 'RESTART',\n0x00B5: 'HELP',\n0x00B6: 'GET.BAR',\n0x00B7: 'PRODUCT',\n0x00B8: 'FACT',\n0x00B9: 'GET.CELL',\n0x00BA: 'GET.WORKSPACE',\n0x00BB: 'GET.WINDOW',\n0x00BC: 'GET.DOCUMENT',\n0x00BD: 'DPRODUCT',\n0x00BE: 'ISNONTEXT',\n0x00BF: 'GET.NOTE',\n0x00C0: 'NOTE',\n0x00C1: 'STDEVP',\n0x00C2: 'VARP',\n0x00C3: 'DSTDEVP',\n0x00C4: 'DVARP',\n0x00C5: 'TRUNC',\n0x00C6: 'ISLOGICAL',\n0x00C7: 'DCOUNTA',\n0x00C8: 'DELETE.BAR',\n0x00C9: 'UNREGISTER',\n0x00CC: 'USDOLLAR',\n0x00CD: 'FINDB',\n0x00CE: 'SEARCHB',\n0x00CF: 'REPLACEB',\n0x00D0: 'LEFTB',\n0x00D1: 'RIGHTB',\n0x00D2: 'MIDB',\n0x00D3: 'LENB',\n0x00D4: 'ROUNDUP',\n0x00D5: 'ROUNDDOWN',\n0x00D6: 'ASC',\n0x00D7: 'DBCS',\n0x00D8: 'RANK',\n0x00DB: 'ADDRESS',\n0x00DC: 'DAYS360',\n0x00DD: 'TODAY',\n0x00DE: 'VDB',\n0x00DF: 'ELSE',\n0x00E0: 'ELSE.IF',\n0x00E1: 'END.IF',\n0x00E2: 'FOR.CELL',\n0x00E3: 'MEDIAN',\n0x00E4: 'SUMPRODUCT',\n0x00E5: 'SINH',\n0x00E6: 'COSH',\n0x00E7: 'TANH',\n0x00E8: 'ASINH',\n0x00E9: 'ACOSH',\n0x00EA: 'ATANH',\n0x00EB: 'DGET',\n0x00EC: 'CREATE.OBJECT',\n0x00ED: 'VOLATILE',\n0x00EE: 'LAST.ERROR',\n0x00EF: 'CUSTOM.UNDO',\n0x00F0: 'CUSTOM.REPEAT',\n0x00F1: 'FORMULA.CONVERT',\n0x00F2: 'GET.LINK.INFO',\n0x00F3: 'TEXT.BOX',\n0x00F4: 'INFO',\n0x00F5: 'GROUP',\n0x00F6: 'GET.OBJECT',\n0x00F7: 'DB',\n0x00F8: 'PAUSE',\n0x00FB: 'RESUME',\n0x00FC: 'FREQUENCY',\n0x00FD: 'ADD.TOOLBAR',\n0x00FE: 'DELETE.TOOLBAR',\n0x00FF: 'User',\n0x0100: 'RESET.TOOLBAR',\n0x0101: 'EVALUATE',\n0x0102: 'GET.TOOLBAR',\n0x0103: 'GET.TOOL',\n0x0104: 'SPELLING.CHECK',\n0x0105: 'ERROR.TYPE',\n0x0106: 'APP.TITLE',\n0x0107: 'WINDOW.TITLE',\n0x0108: 'SAVE.TOOLBAR',\n0x0109: 'ENABLE.TOOL',\n0x010A: 'PRESS.TOOL',\n0x010B: 'REGISTER.ID',\n0x010C: 'GET.WORKBOOK',\n0x010D: 'AVEDEV',\n0x010E: 'BETADIST',\n0x010F: 'GAMMALN',\n0x0110: 'BETAINV',\n0x0111: 'BINOMDIST',\n0x0112: 'CHIDIST',\n0x0113: 'CHIINV',\n0x0114: 'COMBIN',\n0x0115: 'CONFIDENCE',\n0x0116: 'CRITBINOM',\n0x0117: 'EVEN',\n0x0118: 'EXPONDIST',\n0x0119: 'FDIST',\n0x011A: 'FINV',\n0x011B: 'FISHER',\n0x011C: 'FISHERINV',\n0x011D: 'FLOOR',\n0x011E: 'GAMMADIST',\n0x011F: 'GAMMAINV',\n0x0120: 'CEILING',\n0x0121: 'HYPGEOMDIST',\n0x0122: 'LOGNORMDIST',\n0x0123: 'LOGINV',\n0x0124: 'NEGBINOMDIST',\n0x0125: 'NORMDIST',\n0x0126: 'NORMSDIST',\n0x0127: 'NORMINV',\n0x0128: 'NORMSINV',\n0x0129: 'STANDARDIZE',\n0x012A: 'ODD',\n0x012B: 'PERMUT',\n0x012C: 'POISSON',\n0x012D: 'TDIST',\n0x012E: 'WEIBULL',\n0x012F: 'SUMXMY2',\n0x0130: 'SUMX2MY2',\n0x0131: 'SUMX2PY2',\n0x0132: 'CHITEST',\n0x0133: 'CORREL',\n0x0134: 'COVAR',\n0x0135: 'FORECAST',\n0x0136: 'FTEST',\n0x0137: 'INTERCEPT',\n0x0138: 'PEARSON',\n0x0139: 'RSQ',\n0x013A: 'STEYX',\n0x013B: 'SLOPE',\n0x013C: 'TTEST',\n0x013D: 'PROB',\n0x013E: 'DEVSQ',\n0x013F: 'GEOMEAN',\n0x0140: 'HARMEAN',\n0x0141: 'SUMSQ',\n0x0142: 'KURT',\n0x0143: 'SKEW',\n0x0144: 'ZTEST',\n0x0145: 'LARGE',\n0x0146: 'SMALL',\n0x0147: 'QUARTILE',\n0x0148: 'PERCENTILE',\n0x0149: 'PERCENTRANK',\n0x014A: 'MODE',\n0x014B: 'TRIMMEAN',\n0x014C: 'TINV',\n0x014E: 'MOVIE.COMMAND',\n0x014F: 'GET.MOVIE',\n0x0150: 'CONCATENATE',\n0x0151: 'POWER',\n0x0152: 'PIVOT.ADD.DATA',\n0x0153: 'GET.PIVOT.TABLE',\n0x0154: 'GET.PIVOT.FIELD',\n0x0155: 'GET.PIVOT.ITEM',\n0x0156: 'RADIANS',\n0x0157: 'DEGREES',\n0x0158: 'SUBTOTAL',\n0x0159: 'SUMIF',\n0x015A: 'COUNTIF',\n0x015B: 'COUNTBLANK',\n0x015C: 'SCENARIO.GET',\n0x015D: 'OPTIONS.LISTS.GET',\n0x015E: 'ISPMT',\n0x015F: 'DATEDIF',\n0x0160: 'DATESTRING',\n0x0161: 'NUMBERSTRING',\n0x0162: 'ROMAN',\n0x0163: 'OPEN.DIALOG',\n0x0164: 'SAVE.DIALOG',\n0x0165: 'VIEW.GET',\n0x0166: 'GETPIVOTDATA',\n0x0167: 'HYPERLINK',\n0x0168: 'PHONETIC',\n0x0169: 'AVERAGEA',\n0x016A: 'MAXA',\n0x016B: 'MINA',\n0x016C: 'STDEVPA',\n0x016D: 'VARPA',\n0x016E: 'STDEVA',\n0x016F: 'VARA',\n0x0170: 'BAHTTEXT',\n0x0171: 'THAIDAYOFWEEK',\n0x0172: 'THAIDIGIT',\n0x0173: 'THAIMONTHOFYEAR',\n0x0174: 'THAINUMSOUND',\n0x0175: 'THAINUMSTRING',\n0x0176: 'THAISTRINGLENGTH',\n0x0177: 'ISTHAIDIGIT',\n0x0178: 'ROUNDBAHTDOWN',\n0x0179: 'ROUNDBAHTUP',\n0x017A: 'THAIYEAR',\n0x017B: 'RTD',\n\n0x017C: 'CUBEVALUE',\n0x017D: 'CUBEMEMBER',\n0x017E: 'CUBEMEMBERPROPERTY',\n0x017F: 'CUBERANKEDMEMBER',\n0x0180: 'HEX2BIN',\n0x0181: 'HEX2DEC',\n0x0182: 'HEX2OCT',\n0x0183: 'DEC2BIN',\n0x0184: 'DEC2HEX',\n0x0185: 'DEC2OCT',\n0x0186: 'OCT2BIN',\n0x0187: 'OCT2HEX',\n0x0188: 'OCT2DEC',\n0x0189: 'BIN2DEC',\n0x018A: 'BIN2OCT',\n0x018B: 'BIN2HEX',\n0x018C: 'IMSUB',\n0x018D: 'IMDIV',\n0x018E: 'IMPOWER',\n0x018F: 'IMABS',\n0x0190: 'IMSQRT',\n0x0191: 'IMLN',\n0x0192: 'IMLOG2',\n0x0193: 'IMLOG10',\n0x0194: 'IMSIN',\n0x0195: 'IMCOS',\n0x0196: 'IMEXP',\n0x0197: 'IMARGUMENT',\n0x0198: 'IMCONJUGATE',\n0x0199: 'IMAGINARY',\n0x019A: 'IMREAL',\n0x019B: 'COMPLEX',\n0x019C: 'IMSUM',\n0x019D: 'IMPRODUCT',\n0x019E: 'SERIESSUM',\n0x019F: 'FACTDOUBLE',\n0x01A0: 'SQRTPI',\n0x01A1: 'QUOTIENT',\n0x01A2: 'DELTA',\n0x01A3: 'GESTEP',\n0x01A4: 'ISEVEN',\n0x01A5: 'ISODD',\n0x01A6: 'MROUND',\n0x01A7: 'ERF',\n0x01A8: 'ERFC',\n0x01A9: 'BESSELJ',\n0x01AA: 'BESSELK',\n0x01AB: 'BESSELY',\n0x01AC: 'BESSELI',\n0x01AD: 'XIRR',\n0x01AE: 'XNPV',\n0x01AF: 'PRICEMAT',\n0x01B0: 'YIELDMAT',\n0x01B1: 'INTRATE',\n0x01B2: 'RECEIVED',\n0x01B3: 'DISC',\n0x01B4: 'PRICEDISC',\n0x01B5: 'YIELDDISC',\n0x01B6: 'TBILLEQ',\n0x01B7: 'TBILLPRICE',\n0x01B8: 'TBILLYIELD',\n0x01B9: 'PRICE',\n0x01BA: 'YIELD',\n0x01BB: 'DOLLARDE',\n0x01BC: 'DOLLARFR',\n0x01BD: 'NOMINAL',\n0x01BE: 'EFFECT',\n0x01BF: 'CUMPRINC',\n0x01C0: 'CUMIPMT',\n0x01C1: 'EDATE',\n0x01C2: 'EOMONTH',\n0x01C3: 'YEARFRAC',\n0x01C4: 'COUPDAYBS',\n0x01C5: 'COUPDAYS',\n0x01C6: 'COUPDAYSNC',\n0x01C7: 'COUPNCD',\n0x01C8: 'COUPNUM',\n0x01C9: 'COUPPCD',\n0x01CA: 'DURATION',\n0x01CB: 'MDURATION',\n0x01CC: 'ODDLPRICE',\n0x01CD: 'ODDLYIELD',\n0x01CE: 'ODDFPRICE',\n0x01CF: 'ODDFYIELD',\n0x01D0: 'RANDBETWEEN',\n0x01D1: 'WEEKNUM',\n0x01D2: 'AMORDEGRC',\n0x01D3: 'AMORLINC',\n0x01D4: 'CONVERT',\n0x02D4: 'SHEETJS',\n0x01D5: 'ACCRINT',\n0x01D6: 'ACCRINTM',\n0x01D7: 'WORKDAY',\n0x01D8: 'NETWORKDAYS',\n0x01D9: 'GCD',\n0x01DA: 'MULTINOMIAL',\n0x01DB: 'LCM',\n0x01DC: 'FVSCHEDULE',\n0x01DD: 'CUBEKPIMEMBER',\n0x01DE: 'CUBESET',\n0x01DF: 'CUBESETCOUNT',\n0x01E0: 'IFERROR',\n0x01E1: 'COUNTIFS',\n0x01E2: 'SUMIFS',\n0x01E3: 'AVERAGEIF',\n0x01E4: 'AVERAGEIFS'\n};\nvar FtabArgc = {\n0x0002: 1, /* ISNA */\n0x0003: 1, /* ISERROR */\n0x000A: 0, /* NA */\n0x000F: 1, /* SIN */\n0x0010: 1, /* COS */\n0x0011: 1, /* TAN */\n0x0012: 1, /* ATAN */\n0x0013: 0, /* PI */\n0x0014: 1, /* SQRT */\n0x0015: 1, /* EXP */\n0x0016: 1, /* LN */\n0x0017: 1, /* LOG10 */\n0x0018: 1, /* ABS */\n0x0019: 1, /* INT */\n0x001A: 1, /* SIGN */\n0x001B: 2, /* ROUND */\n0x001E: 2, /* REPT */\n0x001F: 3, /* MID */\n0x0020: 1, /* LEN */\n0x0021: 1, /* VALUE */\n0x0022: 0, /* TRUE */\n0x0023: 0, /* FALSE */\n0x0026: 1, /* NOT */\n0x0027: 2, /* MOD */\n0x0028: 3, /* DCOUNT */\n0x0029: 3, /* DSUM */\n0x002A: 3, /* DAVERAGE */\n0x002B: 3, /* DMIN */\n0x002C: 3, /* DMAX */\n0x002D: 3, /* DSTDEV */\n0x002F: 3, /* DVAR */\n0x0030: 2, /* TEXT */\n0x0035: 1, /* GOTO */\n0x003D: 3, /* MIRR */\n0x003F: 0, /* RAND */\n0x0041: 3, /* DATE */\n0x0042: 3, /* TIME */\n0x0043: 1, /* DAY */\n0x0044: 1, /* MONTH */\n0x0045: 1, /* YEAR */\n0x0046: 1, /* WEEKDAY */\n0x0047: 1, /* HOUR */\n0x0048: 1, /* MINUTE */\n0x0049: 1, /* SECOND */\n0x004A: 0, /* NOW */\n0x004B: 1, /* AREAS */\n0x004C: 1, /* ROWS */\n0x004D: 1, /* COLUMNS */\n0x004F: 2, /* ABSREF */\n0x0050: 2, /* RELREF */\n0x0053: 1, /* TRANSPOSE */\n0x0055: 0, /* STEP */\n0x0056: 1, /* TYPE */\n0x0059: 0, /* CALLER */\n0x005A: 1, /* DEREF */\n0x005E: 0, /* ACTIVE.CELL */\n0x005F: 0, /* SELECTION */\n0x0061: 2, /* ATAN2 */\n0x0062: 1, /* ASIN */\n0x0063: 1, /* ACOS */\n0x0065: 3, /* HLOOKUP */\n0x0066: 3, /* VLOOKUP */\n0x0069: 1, /* ISREF */\n0x006A: 1, /* GET.FORMULA */\n0x006C: 2, /* SET.VALUE */\n0x006F: 1, /* CHAR */\n0x0070: 1, /* LOWER */\n0x0071: 1, /* UPPER */\n0x0072: 1, /* PROPER */\n0x0075: 2, /* EXACT */\n0x0076: 1, /* TRIM */\n0x0077: 4, /* REPLACE */\n0x0079: 1, /* CODE */\n0x007E: 1, /* ISERR */\n0x007F: 1, /* ISTEXT */\n0x0080: 1, /* ISNUMBER */\n0x0081: 1, /* ISBLANK */\n0x0082: 1, /* T */\n0x0083: 1, /* N */\n0x0085: 1, /* FCLOSE */\n0x0086: 1, /* FSIZE */\n0x0087: 1, /* FREADLN */\n0x0088: 2, /* FREAD */\n0x0089: 2, /* FWRITELN */\n0x008A: 2, /* FWRITE */\n0x008C: 1, /* DATEVALUE */\n0x008D: 1, /* TIMEVALUE */\n0x008E: 3, /* SLN */\n0x008F: 4, /* SYD */\n0x0090: 4, /* DDB */\n0x00A1: 1, /* DIALOG.BOX */\n0x00A2: 1, /* CLEAN */\n0x00A3: 1, /* MDETERM */\n0x00A4: 1, /* MINVERSE */\n0x00A5: 2, /* MMULT */\n0x00AC: 1, /* WHILE */\n0x00AF: 2, /* INITIATE */\n0x00B0: 2, /* REQUEST */\n0x00B1: 3, /* POKE */\n0x00B2: 2, /* EXECUTE */\n0x00B3: 1, /* TERMINATE */\n0x00B8: 1, /* FACT */\n0x00BA: 1, /* GET.WORKSPACE */\n0x00BD: 3, /* DPRODUCT */\n0x00BE: 1, /* ISNONTEXT */\n0x00C3: 3, /* DSTDEVP */\n0x00C4: 3, /* DVARP */\n0x00C5: 1, /* TRUNC */\n0x00C6: 1, /* ISLOGICAL */\n0x00C7: 3, /* DCOUNTA */\n0x00C9: 1, /* UNREGISTER */\n0x00CF: 4, /* REPLACEB */\n0x00D2: 3, /* MIDB */\n0x00D3: 1, /* LENB */\n0x00D4: 2, /* ROUNDUP */\n0x00D5: 2, /* ROUNDDOWN */\n0x00D6: 1, /* ASC */\n0x00D7: 1, /* DBCS */\n0x00E1: 0, /* END.IF */\n0x00E5: 1, /* SINH */\n0x00E6: 1, /* COSH */\n0x00E7: 1, /* TANH */\n0x00E8: 1, /* ASINH */\n0x00E9: 1, /* ACOSH */\n0x00EA: 1, /* ATANH */\n0x00EB: 3, /* DGET */\n0x00F4: 1, /* INFO */\n0x00F7: 4, /* DB */\n0x00FC: 2, /* FREQUENCY */\n0x0101: 1, /* EVALUATE */\n0x0105: 1, /* ERROR.TYPE */\n0x010F: 1, /* GAMMALN */\n0x0111: 4, /* BINOMDIST */\n0x0112: 2, /* CHIDIST */\n0x0113: 2, /* CHIINV */\n0x0114: 2, /* COMBIN */\n0x0115: 3, /* CONFIDENCE */\n0x0116: 3, /* CRITBINOM */\n0x0117: 1, /* EVEN */\n0x0118: 3, /* EXPONDIST */\n0x0119: 3, /* FDIST */\n0x011A: 3, /* FINV */\n0x011B: 1, /* FISHER */\n0x011C: 1, /* FISHERINV */\n0x011D: 2, /* FLOOR */\n0x011E: 4, /* GAMMADIST */\n0x011F: 3, /* GAMMAINV */\n0x0120: 2, /* CEILING */\n0x0121: 4, /* HYPGEOMDIST */\n0x0122: 3, /* LOGNORMDIST */\n0x0123: 3, /* LOGINV */\n0x0124: 3, /* NEGBINOMDIST */\n0x0125: 4, /* NORMDIST */\n0x0126: 1, /* NORMSDIST */\n0x0127: 3, /* NORMINV */\n0x0128: 1, /* NORMSINV */\n0x0129: 3, /* STANDARDIZE */\n0x012A: 1, /* ODD */\n0x012B: 2, /* PERMUT */\n0x012C: 3, /* POISSON */\n0x012D: 3, /* TDIST */\n0x012E: 4, /* WEIBULL */\n0x012F: 2, /* SUMXMY2 */\n0x0130: 2, /* SUMX2MY2 */\n0x0131: 2, /* SUMX2PY2 */\n0x0132: 2, /* CHITEST */\n0x0133: 2, /* CORREL */\n0x0134: 2, /* COVAR */\n0x0135: 3, /* FORECAST */\n0x0136: 2, /* FTEST */\n0x0137: 2, /* INTERCEPT */\n0x0138: 2, /* PEARSON */\n0x0139: 2, /* RSQ */\n0x013A: 2, /* STEYX */\n0x013B: 2, /* SLOPE */\n0x013C: 4, /* TTEST */\n0x0145: 2, /* LARGE */\n0x0146: 2, /* SMALL */\n0x0147: 2, /* QUARTILE */\n0x0148: 2, /* PERCENTILE */\n0x014B: 2, /* TRIMMEAN */\n0x014C: 2, /* TINV */\n0x0151: 2, /* POWER */\n0x0156: 1, /* RADIANS */\n0x0157: 1, /* DEGREES */\n0x015A: 2, /* COUNTIF */\n0x015B: 1, /* COUNTBLANK */\n0x015E: 4, /* ISPMT */\n0x015F: 3, /* DATEDIF */\n0x0160: 1, /* DATESTRING */\n0x0161: 2, /* NUMBERSTRING */\n0x0168: 1, /* PHONETIC */\n0x0170: 1, /* BAHTTEXT */\n0x0171: 1, /* THAIDAYOFWEEK */\n0x0172: 1, /* THAIDIGIT */\n0x0173: 1, /* THAIMONTHOFYEAR */\n0x0174: 1, /* THAINUMSOUND */\n0x0175: 1, /* THAINUMSTRING */\n0x0176: 1, /* THAISTRINGLENGTH */\n0x0177: 1, /* ISTHAIDIGIT */\n0x0178: 1, /* ROUNDBAHTDOWN */\n0x0179: 1, /* ROUNDBAHTUP */\n0x017A: 1, /* THAIYEAR */\n0x017E: 3, /* CUBEMEMBERPROPERTY */\n0x0181: 1, /* HEX2DEC */\n0x0188: 1, /* OCT2DEC */\n0x0189: 1, /* BIN2DEC */\n0x018C: 2, /* IMSUB */\n0x018D: 2, /* IMDIV */\n0x018E: 2, /* IMPOWER */\n0x018F: 1, /* IMABS */\n0x0190: 1, /* IMSQRT */\n0x0191: 1, /* IMLN */\n0x0192: 1, /* IMLOG2 */\n0x0193: 1, /* IMLOG10 */\n0x0194: 1, /* IMSIN */\n0x0195: 1, /* IMCOS */\n0x0196: 1, /* IMEXP */\n0x0197: 1, /* IMARGUMENT */\n0x0198: 1, /* IMCONJUGATE */\n0x0199: 1, /* IMAGINARY */\n0x019A: 1, /* IMREAL */\n0x019E: 4, /* SERIESSUM */\n0x019F: 1, /* FACTDOUBLE */\n0x01A0: 1, /* SQRTPI */\n0x01A1: 2, /* QUOTIENT */\n0x01A4: 1, /* ISEVEN */\n0x01A5: 1, /* ISODD */\n0x01A6: 2, /* MROUND */\n0x01A8: 1, /* ERFC */\n0x01A9: 2, /* BESSELJ */\n0x01AA: 2, /* BESSELK */\n0x01AB: 2, /* BESSELY */\n0x01AC: 2, /* BESSELI */\n0x01AE: 3, /* XNPV */\n0x01B6: 3, /* TBILLEQ */\n0x01B7: 3, /* TBILLPRICE */\n0x01B8: 3, /* TBILLYIELD */\n0x01BB: 2, /* DOLLARDE */\n0x01BC: 2, /* DOLLARFR */\n0x01BD: 2, /* NOMINAL */\n0x01BE: 2, /* EFFECT */\n0x01BF: 6, /* CUMPRINC */\n0x01C0: 6, /* CUMIPMT */\n0x01C1: 2, /* EDATE */\n0x01C2: 2, /* EOMONTH */\n0x01D0: 2, /* RANDBETWEEN */\n0x01D4: 3, /* CONVERT */\n0x01DC: 2, /* FVSCHEDULE */\n0x01DF: 1, /* CUBESETCOUNT */\n0x01E0: 2, /* IFERROR */\n0xFFFF: 0\n};\n/* [MS-XLSX] 2.2.3 Functions */\n/* [MS-XLSB] 2.5.97.10 Ftab */\nvar XLSXFutureFunctions = {\n\t\"_xlfn.ACOT\": \"ACOT\",\n\t\"_xlfn.ACOTH\": \"ACOTH\",\n\t\"_xlfn.AGGREGATE\": \"AGGREGATE\",\n\t\"_xlfn.ARABIC\": \"ARABIC\",\n\t\"_xlfn.AVERAGEIF\": \"AVERAGEIF\",\n\t\"_xlfn.AVERAGEIFS\": \"AVERAGEIFS\",\n\t\"_xlfn.BASE\": \"BASE\",\n\t\"_xlfn.BETA.DIST\": \"BETA.DIST\",\n\t\"_xlfn.BETA.INV\": \"BETA.INV\",\n\t\"_xlfn.BINOM.DIST\": \"BINOM.DIST\",\n\t\"_xlfn.BINOM.DIST.RANGE\": \"BINOM.DIST.RANGE\",\n\t\"_xlfn.BINOM.INV\": \"BINOM.INV\",\n\t\"_xlfn.BITAND\": \"BITAND\",\n\t\"_xlfn.BITLSHIFT\": \"BITLSHIFT\",\n\t\"_xlfn.BITOR\": \"BITOR\",\n\t\"_xlfn.BITRSHIFT\": \"BITRSHIFT\",\n\t\"_xlfn.BITXOR\": \"BITXOR\",\n\t\"_xlfn.CEILING.MATH\": \"CEILING.MATH\",\n\t\"_xlfn.CEILING.PRECISE\": \"CEILING.PRECISE\",\n\t\"_xlfn.CHISQ.DIST\": \"CHISQ.DIST\",\n\t\"_xlfn.CHISQ.DIST.RT\": \"CHISQ.DIST.RT\",\n\t\"_xlfn.CHISQ.INV\": \"CHISQ.INV\",\n\t\"_xlfn.CHISQ.INV.RT\": \"CHISQ.INV.RT\",\n\t\"_xlfn.CHISQ.TEST\": \"CHISQ.TEST\",\n\t\"_xlfn.COMBINA\": \"COMBINA\",\n\t\"_xlfn.CONCAT\": \"CONCAT\",\n\t\"_xlfn.CONFIDENCE.NORM\": \"CONFIDENCE.NORM\",\n\t\"_xlfn.CONFIDENCE.T\": \"CONFIDENCE.T\",\n\t\"_xlfn.COT\": \"COT\",\n\t\"_xlfn.COTH\": \"COTH\",\n\t\"_xlfn.COUNTIFS\": \"COUNTIFS\",\n\t\"_xlfn.COVARIANCE.P\": \"COVARIANCE.P\",\n\t\"_xlfn.COVARIANCE.S\": \"COVARIANCE.S\",\n\t\"_xlfn.CSC\": \"CSC\",\n\t\"_xlfn.CSCH\": \"CSCH\",\n\t\"_xlfn.DAYS\": \"DAYS\",\n\t\"_xlfn.DECIMAL\": \"DECIMAL\",\n\t\"_xlfn.ECMA.CEILING\": \"ECMA.CEILING\",\n\t\"_xlfn.ERF.PRECISE\": \"ERF.PRECISE\",\n\t\"_xlfn.ERFC.PRECISE\": \"ERFC.PRECISE\",\n\t\"_xlfn.EXPON.DIST\": \"EXPON.DIST\",\n\t\"_xlfn.F.DIST\": \"F.DIST\",\n\t\"_xlfn.F.DIST.RT\": \"F.DIST.RT\",\n\t\"_xlfn.F.INV\": \"F.INV\",\n\t\"_xlfn.F.INV.RT\": \"F.INV.RT\",\n\t\"_xlfn.F.TEST\": \"F.TEST\",\n\t\"_xlfn.FILTERXML\": \"FILTERXML\",\n\t\"_xlfn.FLOOR.MATH\": \"FLOOR.MATH\",\n\t\"_xlfn.FLOOR.PRECISE\": \"FLOOR.PRECISE\",\n\t\"_xlfn.FORECAST.ETS\": \"FORECAST.ETS\",\n\t\"_xlfn.FORECAST.ETS.CONFINT\": \"FORECAST.ETS.CONFINT\",\n\t\"_xlfn.FORECAST.ETS.SEASONALITY\": \"FORECAST.ETS.SEASONALITY\",\n\t\"_xlfn.FORECAST.ETS.STAT\": \"FORECAST.ETS.STAT\",\n\t\"_xlfn.FORECAST.LINEAR\": \"FORECAST.LINEAR\",\n\t\"_xlfn.FORMULATEXT\": \"FORMULATEXT\",\n\t\"_xlfn.GAMMA\": \"GAMMA\",\n\t\"_xlfn.GAMMA.DIST\": \"GAMMA.DIST\",\n\t\"_xlfn.GAMMA.INV\": \"GAMMA.INV\",\n\t\"_xlfn.GAMMALN.PRECISE\": \"GAMMALN.PRECISE\",\n\t\"_xlfn.GAUSS\": \"GAUSS\",\n\t\"_xlfn.HYPGEOM.DIST\": \"HYPGEOM.DIST\",\n\t\"_xlfn.IFERROR\": \"IFERROR\",\n\t\"_xlfn.IFNA\": \"IFNA\",\n\t\"_xlfn.IFS\": \"IFS\",\n\t\"_xlfn.IMCOSH\": \"IMCOSH\",\n\t\"_xlfn.IMCOT\": \"IMCOT\",\n\t\"_xlfn.IMCSC\": \"IMCSC\",\n\t\"_xlfn.IMCSCH\": \"IMCSCH\",\n\t\"_xlfn.IMSEC\": \"IMSEC\",\n\t\"_xlfn.IMSECH\": \"IMSECH\",\n\t\"_xlfn.IMSINH\": \"IMSINH\",\n\t\"_xlfn.IMTAN\": \"IMTAN\",\n\t\"_xlfn.ISFORMULA\": \"ISFORMULA\",\n\t\"_xlfn.ISO.CEILING\": \"ISO.CEILING\",\n\t\"_xlfn.ISOWEEKNUM\": \"ISOWEEKNUM\",\n\t\"_xlfn.LOGNORM.DIST\": \"LOGNORM.DIST\",\n\t\"_xlfn.LOGNORM.INV\": \"LOGNORM.INV\",\n\t\"_xlfn.MAXIFS\": \"MAXIFS\",\n\t\"_xlfn.MINIFS\": \"MINIFS\",\n\t\"_xlfn.MODE.MULT\": \"MODE.MULT\",\n\t\"_xlfn.MODE.SNGL\": \"MODE.SNGL\",\n\t\"_xlfn.MUNIT\": \"MUNIT\",\n\t\"_xlfn.NEGBINOM.DIST\": \"NEGBINOM.DIST\",\n\t\"_xlfn.NETWORKDAYS.INTL\": \"NETWORKDAYS.INTL\",\n\t\"_xlfn.NIGBINOM\": \"NIGBINOM\",\n\t\"_xlfn.NORM.DIST\": \"NORM.DIST\",\n\t\"_xlfn.NORM.INV\": \"NORM.INV\",\n\t\"_xlfn.NORM.S.DIST\": \"NORM.S.DIST\",\n\t\"_xlfn.NORM.S.INV\": \"NORM.S.INV\",\n\t\"_xlfn.NUMBERVALUE\": \"NUMBERVALUE\",\n\t\"_xlfn.PDURATION\": \"PDURATION\",\n\t\"_xlfn.PERCENTILE.EXC\": \"PERCENTILE.EXC\",\n\t\"_xlfn.PERCENTILE.INC\": \"PERCENTILE.INC\",\n\t\"_xlfn.PERCENTRANK.EXC\": \"PERCENTRANK.EXC\",\n\t\"_xlfn.PERCENTRANK.INC\": \"PERCENTRANK.INC\",\n\t\"_xlfn.PERMUTATIONA\": \"PERMUTATIONA\",\n\t\"_xlfn.PHI\": \"PHI\",\n\t\"_xlfn.POISSON.DIST\": \"POISSON.DIST\",\n\t\"_xlfn.QUARTILE.EXC\": \"QUARTILE.EXC\",\n\t\"_xlfn.QUARTILE.INC\": \"QUARTILE.INC\",\n\t\"_xlfn.QUERYSTRING\": \"QUERYSTRING\",\n\t\"_xlfn.RANK.AVG\": \"RANK.AVG\",\n\t\"_xlfn.RANK.EQ\": \"RANK.EQ\",\n\t\"_xlfn.RRI\": \"RRI\",\n\t\"_xlfn.SEC\": \"SEC\",\n\t\"_xlfn.SECH\": \"SECH\",\n\t\"_xlfn.SHEET\": \"SHEET\",\n\t\"_xlfn.SHEETS\": \"SHEETS\",\n\t\"_xlfn.SKEW.P\": \"SKEW.P\",\n\t\"_xlfn.STDEV.P\": \"STDEV.P\",\n\t\"_xlfn.STDEV.S\": \"STDEV.S\",\n\t\"_xlfn.SUMIFS\": \"SUMIFS\",\n\t\"_xlfn.SWITCH\": \"SWITCH\",\n\t\"_xlfn.T.DIST\": \"T.DIST\",\n\t\"_xlfn.T.DIST.2T\": \"T.DIST.2T\",\n\t\"_xlfn.T.DIST.RT\": \"T.DIST.RT\",\n\t\"_xlfn.T.INV\": \"T.INV\",\n\t\"_xlfn.T.INV.2T\": \"T.INV.2T\",\n\t\"_xlfn.T.TEST\": \"T.TEST\",\n\t\"_xlfn.TEXTJOIN\": \"TEXTJOIN\",\n\t\"_xlfn.UNICHAR\": \"UNICHAR\",\n\t\"_xlfn.UNICODE\": \"UNICODE\",\n\t\"_xlfn.VAR.P\": \"VAR.P\",\n\t\"_xlfn.VAR.S\": \"VAR.S\",\n\t\"_xlfn.WEBSERVICE\": \"WEBSERVICE\",\n\t\"_xlfn.WEIBULL.DIST\": \"WEIBULL.DIST\",\n\t\"_xlfn.WORKDAY.INTL\": \"WORKDAY.INTL\",\n\t\"_xlfn.XOR\": \"XOR\",\n\t\"_xlfn.Z.TEST\": \"Z.TEST\"\n};\n\n/* Part 3 TODO: actually parse formulae */\nfunction ods_to_csf_formula(f) {\n\tif(f.slice(0,3) == \"of:\") f = f.slice(3);\n\t/* 5.2 Basic Expressions */\n\tif(f.charCodeAt(0) == 61) {\n\t\tf = f.slice(1);\n\t\tif(f.charCodeAt(0) == 61) f = f.slice(1);\n\t}\n\tf = f.replace(/COM\\.MICROSOFT\\./g, \"\");\n\t/* Part 3 Section 5.8 References */\n\tf = f.replace(/\\[((?:\\.[A-Z]+[0-9]+)(?::\\.[A-Z]+[0-9]+)?)\\]/g, function($$, $1) { return $1.replace(/\\./g,\"\"); });\n\t/* TODO: something other than this */\n\tf = f.replace(/\\[.(#[A-Z]*[?!])\\]/g, \"$1\");\n\treturn f.replace(/[;~]/g,\",\").replace(/\\|/g,\";\");\n}\n\nfunction csf_to_ods_formula(f) {\n\tvar o = \"of:=\" + f.replace(crefregex, \"$1[.$2$3$4$5]\").replace(/\\]:\\[/g,\":\");\n\t/* TODO: something other than this */\n\treturn o.replace(/;/g, \"|\").replace(/,/g,\";\");\n}\n\nfunction ods_to_csf_3D(r) {\n\tvar a = r.split(\":\");\n\tvar s = a[0].split(\".\")[0];\n\treturn [s, a[0].split(\".\")[1] + (a.length > 1 ? (\":\" + (a[1].split(\".\")[1] || a[1].split(\".\")[0])) : \"\")];\n}\n\nfunction csf_to_ods_3D(r) {\n\treturn r.replace(/\\./,\"!\");\n}\n\nvar strs = {}; // shared strings\nvar _ssfopts = {}; // spreadsheet formatting options\n\nRELS.WS = [\n\t\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\",\n\t\"http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet\"\n];\n\n/*global Map */\nvar browser_has_Map = typeof Map !== 'undefined';\n\nfunction get_sst_id(sst, str, rev) {\n\tvar i = 0, len = sst.length;\n\tif(rev) {\n\t\tif(browser_has_Map ? rev.has(str) : Object.prototype.hasOwnProperty.call(rev, str)) {\n\t\t\tvar revarr = browser_has_Map ? rev.get(str) : rev[str];\n\t\t\tfor(; i < revarr.length; ++i) {\n\t\t\t\tif(sst[revarr[i]].t === str) { sst.Count ++; return revarr[i]; }\n\t\t\t}\n\t\t}\n\t} else for(; i < len; ++i) {\n\t\tif(sst[i].t === str) { sst.Count ++; return i; }\n\t}\n\tsst[len] = ({t:str}); sst.Count ++; sst.Unique ++;\n\tif(rev) {\n\t\tif(browser_has_Map) {\n\t\t\tif(!rev.has(str)) rev.set(str, []);\n\t\t\trev.get(str).push(len);\n\t\t} else {\n\t\t\tif(!Object.prototype.hasOwnProperty.call(rev, str)) rev[str] = [];\n\t\t\trev[str].push(len);\n\t\t}\n\t}\n\treturn len;\n}\n\nfunction col_obj_w(C, col) {\n\tvar p = ({min:C+1,max:C+1});\n\t/* wch (chars), wpx (pixels) */\n\tvar wch = -1;\n\tif(col.MDW) MDW = col.MDW;\n\tif(col.width != null) p.customWidth = 1;\n\telse if(col.wpx != null) wch = px2char(col.wpx);\n\telse if(col.wch != null) wch = col.wch;\n\tif(wch > -1) { p.width = char2width(wch); p.customWidth = 1; }\n\telse if(col.width != null) p.width = col.width;\n\tif(col.hidden) p.hidden = true;\n\tif(col.level != null) { p.outlineLevel = p.level = col.level; }\n\treturn p;\n}\n\nfunction default_margins(margins, mode) {\n\tif(!margins) return;\n\tvar defs = [0.7, 0.7, 0.75, 0.75, 0.3, 0.3];\n\tif(mode == 'xlml') defs = [1, 1, 1, 1, 0.5, 0.5];\n\tif(margins.left   == null) margins.left   = defs[0];\n\tif(margins.right  == null) margins.right  = defs[1];\n\tif(margins.top    == null) margins.top    = defs[2];\n\tif(margins.bottom == null) margins.bottom = defs[3];\n\tif(margins.header == null) margins.header = defs[4];\n\tif(margins.footer == null) margins.footer = defs[5];\n}\n\nfunction get_cell_style(styles, cell, opts) {\n\tvar z = opts.revssf[cell.z != null ? cell.z : \"General\"];\n\tvar i = 0x3c, len = styles.length;\n\tif(z == null && opts.ssf) {\n\t\tfor(; i < 0x188; ++i) if(opts.ssf[i] == null) {\n\t\t\tSSF.load(cell.z, i);\n\t\t\t// $FlowIgnore\n\t\t\topts.ssf[i] = cell.z;\n\t\t\topts.revssf[cell.z] = z = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(i = 0; i != len; ++i) if(styles[i].numFmtId === z) return i;\n\tstyles[len] = {\n\t\tnumFmtId:z,\n\t\tfontId:0,\n\t\tfillId:0,\n\t\tborderId:0,\n\t\txfId:0,\n\t\tapplyNumberFormat:1\n\t};\n\treturn len;\n}\n\nfunction safe_format(p, fmtid, fillid, opts, themes, styles) {\n\ttry {\n\t\tif(opts.cellNF) p.z = SSF._table[fmtid];\n\t} catch(e) { if(opts.WTF) throw e; }\n\tif(p.t === 'z' && !opts.cellStyles) return;\n\tif(p.t === 'd' && typeof p.v === 'string') p.v = parseDate(p.v);\n\tif((!opts || opts.cellText !== false) && p.t !== 'z') try {\n\t\tif(SSF._table[fmtid] == null) SSF.load(SSFImplicit[fmtid] || \"General\", fmtid);\n\t\tif(p.t === 'e') p.w = p.w || BErr[p.v];\n\t\telse if(fmtid === 0) {\n\t\t\tif(p.t === 'n') {\n\t\t\t\tif((p.v|0) === p.v) p.w = SSF._general_int(p.v);\n\t\t\t\telse p.w = SSF._general_num(p.v);\n\t\t\t}\n\t\t\telse if(p.t === 'd') {\n\t\t\t\tvar dd = datenum(p.v);\n\t\t\t\tif((dd|0) === dd) p.w = SSF._general_int(dd);\n\t\t\t\telse p.w = SSF._general_num(dd);\n\t\t\t}\n\t\t\telse if(p.v === undefined) return \"\";\n\t\t\telse p.w = SSF._general(p.v,_ssfopts);\n\t\t}\n\t\telse if(p.t === 'd') p.w = SSF.format(fmtid,datenum(p.v),_ssfopts);\n\t\telse p.w = SSF.format(fmtid,p.v,_ssfopts);\n\t} catch(e) { if(opts.WTF) throw e; }\n\tif(!opts.cellStyles) return;\n\tif(fillid != null) try {\n\t\tp.s = styles.Fills[fillid];\n\t\tif (p.s.fgColor && p.s.fgColor.theme && !p.s.fgColor.rgb) {\n\t\t\tp.s.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.fgColor.theme].rgb, p.s.fgColor.tint || 0);\n\t\t\tif(opts.WTF) p.s.fgColor.raw_rgb = themes.themeElements.clrScheme[p.s.fgColor.theme].rgb;\n\t\t}\n\t\tif (p.s.bgColor && p.s.bgColor.theme) {\n\t\t\tp.s.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.bgColor.theme].rgb, p.s.bgColor.tint || 0);\n\t\t\tif(opts.WTF) p.s.bgColor.raw_rgb = themes.themeElements.clrScheme[p.s.bgColor.theme].rgb;\n\t\t}\n\t} catch(e) { if(opts.WTF && styles.Fills) throw e; }\n}\n\nfunction check_ws(ws, sname, i) {\n\tif(ws && ws['!ref']) {\n\t\tvar range = safe_decode_range(ws['!ref']);\n\t\tif(range.e.c < range.s.c || range.e.r < range.s.r) throw new Error(\"Bad range (\" + i + \"): \" + ws['!ref']);\n\t}\n}\nfunction parse_ws_xml_dim(ws, s) {\n\tvar d = safe_decode_range(s);\n\tif(d.s.r<=d.e.r && d.s.c<=d.e.c && d.s.r>=0 && d.s.c>=0) ws[\"!ref\"] = encode_range(d);\n}\nvar mergecregex = /<(?:\\w:)?mergeCell ref=\"[A-Z0-9:]+\"\\s*[\\/]?>/g;\nvar sheetdataregex = /<(?:\\w+:)?sheetData[^>]*>([\\s\\S]*)<\\/(?:\\w+:)?sheetData>/;\nvar hlinkregex = /<(?:\\w:)?hyperlink [^>]*>/mg;\nvar dimregex = /\"(\\w*:\\w*)\"/;\nvar colregex = /<(?:\\w:)?col\\b[^>]*[\\/]?>/g;\nvar afregex = /<(?:\\w:)?autoFilter[^>]*([\\/]|>([\\s\\S]*)<\\/(?:\\w:)?autoFilter)>/g;\nvar marginregex= /<(?:\\w:)?pageMargins[^>]*\\/>/g;\nvar sheetprregex = /<(?:\\w:)?sheetPr\\b(?:[^>a-z][^>]*)?\\/>/;\nvar sheetprregex2= /<(?:\\w:)?sheetPr[^>]*(?:[\\/]|>([\\s\\S]*)<\\/(?:\\w:)?sheetPr)>/;\nvar svsregex = /<(?:\\w:)?sheetViews[^>]*(?:[\\/]|>([\\s\\S]*)<\\/(?:\\w:)?sheetViews)>/;\n\n/* 18.3 Worksheets */\nfunction parse_ws_xml(data, opts, idx, rels, wb, themes, styles) {\n\tif(!data) return data;\n\tif(!rels) rels = {'!id':{}};\n\tif(DENSE != null && opts.dense == null) opts.dense = DENSE;\n\n\t/* 18.3.1.99 worksheet CT_Worksheet */\n\tvar s = opts.dense ? ([]) : ({});\n\tvar refguess = ({s: {r:2000000, c:2000000}, e: {r:0, c:0} });\n\n\tvar data1 = \"\", data2 = \"\";\n\tvar mtch = data.match(sheetdataregex);\n\tif(mtch) {\n\t\tdata1 = data.slice(0, mtch.index);\n\t\tdata2 = data.slice(mtch.index + mtch[0].length);\n\t} else data1 = data2 = data;\n\n\t/* 18.3.1.82 sheetPr CT_SheetPr */\n\tvar sheetPr = data1.match(sheetprregex);\n\tif(sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);\n\telse if((sheetPr = data1.match(sheetprregex2))) parse_ws_xml_sheetpr2(sheetPr[0], sheetPr[1]||\"\", s, wb, idx, styles, themes);\n\n\t/* 18.3.1.35 dimension CT_SheetDimension */\n\tvar ridx = (data1.match(/<(?:\\w*:)?dimension/)||{index:-1}).index;\n\tif(ridx > 0) {\n\t\tvar ref = data1.slice(ridx,ridx+50).match(dimregex);\n\t\tif(ref) parse_ws_xml_dim(s, ref[1]);\n\t}\n\n\t/* 18.3.1.88 sheetViews CT_SheetViews */\n\tvar svs = data1.match(svsregex);\n\tif(svs && svs[1]) parse_ws_xml_sheetviews(svs[1], wb);\n\n\t/* 18.3.1.17 cols CT_Cols */\n\tvar columns = [];\n\tif(opts.cellStyles) {\n\t\t/* 18.3.1.13 col CT_Col */\n\t\tvar cols = data1.match(colregex);\n\t\tif(cols) parse_ws_xml_cols(columns, cols);\n\t}\n\n\t/* 18.3.1.80 sheetData CT_SheetData ? */\n\tif(mtch) parse_ws_xml_data(mtch[1], s, opts, refguess, themes, styles);\n\n\t/* 18.3.1.2  autoFilter CT_AutoFilter */\n\tvar afilter = data2.match(afregex);\n\tif(afilter) s['!autofilter'] = parse_ws_xml_autofilter(afilter[0]);\n\n\t/* 18.3.1.55 mergeCells CT_MergeCells */\n\tvar merges = [];\n\tvar _merge = data2.match(mergecregex);\n\tif(_merge) for(ridx = 0; ridx != _merge.length; ++ridx)\n\t\tmerges[ridx] = safe_decode_range(_merge[ridx].slice(_merge[ridx].indexOf(\"\\\"\")+1));\n\n\t/* 18.3.1.48 hyperlinks CT_Hyperlinks */\n\tvar hlink = data2.match(hlinkregex);\n\tif(hlink) parse_ws_xml_hlinks(s, hlink, rels);\n\n\t/* 18.3.1.62 pageMargins CT_PageMargins */\n\tvar margins = data2.match(marginregex);\n\tif(margins) s['!margins'] = parse_ws_xml_margins(parsexmltag(margins[0]));\n\n\tif(!s[\"!ref\"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r) s[\"!ref\"] = encode_range(refguess);\n\tif(opts.sheetRows > 0 && s[\"!ref\"]) {\n\t\tvar tmpref = safe_decode_range(s[\"!ref\"]);\n\t\tif(opts.sheetRows <= +tmpref.e.r) {\n\t\t\ttmpref.e.r = opts.sheetRows - 1;\n\t\t\tif(tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;\n\t\t\tif(tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;\n\t\t\tif(tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;\n\t\t\tif(tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;\n\t\t\ts[\"!fullref\"] = s[\"!ref\"];\n\t\t\ts[\"!ref\"] = encode_range(tmpref);\n\t\t}\n\t}\n\tif(columns.length > 0) s[\"!cols\"] = columns;\n\tif(merges.length > 0) s[\"!merges\"] = merges;\n\treturn s;\n}\n\nfunction write_ws_xml_merges(merges) {\n\tif(merges.length === 0) return \"\";\n\tvar o = '<mergeCells count=\"' + merges.length + '\">';\n\tfor(var i = 0; i != merges.length; ++i) o += '<mergeCell ref=\"' + encode_range(merges[i]) + '\"/>';\n\treturn o + '</mergeCells>';\n}\n\n/* 18.3.1.82-3 sheetPr CT_ChartsheetPr / CT_SheetPr */\nfunction parse_ws_xml_sheetpr(sheetPr, s, wb, idx) {\n\tvar data = parsexmltag(sheetPr);\n\tif(!wb.Sheets[idx]) wb.Sheets[idx] = {};\n\tif(data.codeName) wb.Sheets[idx].CodeName = unescapexml(utf8read(data.codeName));\n}\nfunction parse_ws_xml_sheetpr2(sheetPr, body, s, wb, idx, styles, themes) {\n\tparse_ws_xml_sheetpr(sheetPr.slice(0, sheetPr.indexOf(\">\")), s, wb, idx);\n}\nfunction write_ws_xml_sheetpr(ws, wb, idx, opts, o) {\n\tvar needed = false;\n\tvar props = {}, payload = null;\n\tif(opts.bookType !== 'xlsx' && wb.vbaraw) {\n\t\tvar cname = wb.SheetNames[idx];\n\t\ttry { if(wb.Workbook) cname = wb.Workbook.Sheets[idx].CodeName || cname; } catch(e) {}\n\t\tneeded = true;\n\t\tprops.codeName = utf8write(escapexml(cname));\n\t}\n\n\tif(ws && ws[\"!outline\"]) {\n\t\tvar outlineprops = {summaryBelow:1, summaryRight:1};\n\t\tif(ws[\"!outline\"].above) outlineprops.summaryBelow = 0;\n\t\tif(ws[\"!outline\"].left) outlineprops.summaryRight = 0;\n\t\tpayload = (payload||\"\") + writextag('outlinePr', null, outlineprops);\n\t}\n\n\tif(!needed && !payload) return;\n\to[o.length] = (writextag('sheetPr', payload, props));\n}\n\n/* 18.3.1.85 sheetProtection CT_SheetProtection */\nvar sheetprot_deffalse = [\"objects\", \"scenarios\", \"selectLockedCells\", \"selectUnlockedCells\"];\nvar sheetprot_deftrue = [\n\t\"formatColumns\", \"formatRows\", \"formatCells\",\n\t\"insertColumns\", \"insertRows\", \"insertHyperlinks\",\n\t\"deleteColumns\", \"deleteRows\",\n\t\"sort\", \"autoFilter\", \"pivotTables\"\n];\nfunction write_ws_xml_protection(sp) {\n\t// algorithmName, hashValue, saltValue, spinCount\n\tvar o = ({sheet:1});\n\tsheetprot_deffalse.forEach(function(n) { if(sp[n] != null && sp[n]) o[n] = \"1\"; });\n\tsheetprot_deftrue.forEach(function(n) { if(sp[n] != null && !sp[n]) o[n] = \"0\"; });\n\t/* TODO: algorithm */\n\tif(sp.password) o.password = crypto_CreatePasswordVerifier_Method1(sp.password).toString(16).toUpperCase();\n\treturn writextag('sheetProtection', null, o);\n}\n\nfunction parse_ws_xml_hlinks(s, data, rels) {\n\tvar dense = Array.isArray(s);\n\tfor(var i = 0; i != data.length; ++i) {\n\t\tvar val = parsexmltag(utf8read(data[i]), true);\n\t\tif(!val.ref) return;\n\t\tvar rel = ((rels || {})['!id']||[])[val.id];\n\t\tif(rel) {\n\t\t\tval.Target = rel.Target;\n\t\t\tif(val.location) val.Target += \"#\"+unescapexml(val.location);\n\t\t} else {\n\t\t\tval.Target = \"#\" + unescapexml(val.location);\n\t\t\trel = {Target: val.Target, TargetMode: 'Internal'};\n\t\t}\n\t\tval.Rel = rel;\n\t\tif(val.tooltip) { val.Tooltip = val.tooltip; delete val.tooltip; }\n\t\tvar rng = safe_decode_range(val.ref);\n\t\tfor(var R=rng.s.r;R<=rng.e.r;++R) for(var C=rng.s.c;C<=rng.e.c;++C) {\n\t\t\tvar addr = encode_cell({c:C,r:R});\n\t\t\tif(dense) {\n\t\t\t\tif(!s[R]) s[R] = [];\n\t\t\t\tif(!s[R][C]) s[R][C] = {t:\"z\",v:undefined};\n\t\t\t\ts[R][C].l = val;\n\t\t\t} else {\n\t\t\t\tif(!s[addr]) s[addr] = {t:\"z\",v:undefined};\n\t\t\t\ts[addr].l = val;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction parse_ws_xml_margins(margin) {\n\tvar o = {};\n\t[\"left\", \"right\", \"top\", \"bottom\", \"header\", \"footer\"].forEach(function(k) {\n\t\tif(margin[k]) o[k] = parseFloat(margin[k]);\n\t});\n\treturn o;\n}\nfunction write_ws_xml_margins(margin) {\n\tdefault_margins(margin);\n\treturn writextag('pageMargins', null, margin);\n}\n\nfunction parse_ws_xml_cols(columns, cols) {\n\tvar seencol = false;\n\tfor(var coli = 0; coli != cols.length; ++coli) {\n\t\tvar coll = parsexmltag(cols[coli], true);\n\t\tif(coll.hidden) coll.hidden = parsexmlbool(coll.hidden);\n\t\tvar colm=parseInt(coll.min, 10)-1, colM=parseInt(coll.max,10)-1;\n\t\tif(coll.outlineLevel) coll.level = (+coll.outlineLevel || 0);\n\t\tdelete coll.min; delete coll.max; coll.width = +coll.width;\n\t\tif(!seencol && coll.width) { seencol = true; find_mdw_colw(coll.width); }\n\t\tprocess_col(coll);\n\t\twhile(colm <= colM) columns[colm++] = dup(coll);\n\t}\n}\nfunction write_ws_xml_cols(ws, cols) {\n\tvar o = [\"<cols>\"], col;\n\tfor(var i = 0; i != cols.length; ++i) {\n\t\tif(!(col = cols[i])) continue;\n\t\to[o.length] = (writextag('col', null, col_obj_w(i, col)));\n\t}\n\to[o.length] = \"</cols>\";\n\treturn o.join(\"\");\n}\n\nfunction parse_ws_xml_autofilter(data) {\n\tvar o = { ref: (data.match(/ref=\"([^\"]*)\"/)||[])[1]};\n\treturn o;\n}\nfunction write_ws_xml_autofilter(data, ws, wb, idx) {\n\tvar ref = typeof data.ref == \"string\" ? data.ref : encode_range(data.ref);\n\tif(!wb.Workbook) wb.Workbook = ({Sheets:[]});\n\tif(!wb.Workbook.Names) wb.Workbook.Names = [];\n\tvar names = wb.Workbook.Names;\n\tvar range = decode_range(ref);\n\tif(range.s.r == range.e.r) { range.e.r = decode_range(ws[\"!ref\"]).e.r; ref = encode_range(range); }\n\tfor(var i = 0; i < names.length; ++i) {\n\t\tvar name = names[i];\n\t\tif(name.Name != '_xlnm._FilterDatabase') continue;\n\t\tif(name.Sheet != idx) continue;\n\t\tname.Ref = \"'\" + wb.SheetNames[idx] + \"'!\" + ref; break;\n\t}\n\tif(i == names.length) names.push({ Name: '_xlnm._FilterDatabase', Sheet: idx, Ref: \"'\" + wb.SheetNames[idx] + \"'!\" + ref  });\n\treturn writextag(\"autoFilter\", null, {ref:ref});\n}\n\n/* 18.3.1.88 sheetViews CT_SheetViews */\n/* 18.3.1.87 sheetView CT_SheetView */\nvar sviewregex = /<(?:\\w:)?sheetView(?:[^>a-z][^>]*)?\\/?>/;\nfunction parse_ws_xml_sheetviews(data, wb) {\n\tif(!wb.Views) wb.Views = [{}];\n\t(data.match(sviewregex)||[]).forEach(function(r, i) {\n\t\tvar tag = parsexmltag(r);\n\t\t// $FlowIgnore\n\t\tif(!wb.Views[i]) wb.Views[i] = {};\n\t\t// $FlowIgnore\n\t\tif(+tag.zoomScale) wb.Views[i].zoom = +tag.zoomScale;\n\t\t// $FlowIgnore\n\t\tif(parsexmlbool(tag.rightToLeft)) wb.Views[i].RTL = true;\n\t});\n}\nfunction write_ws_xml_sheetviews(ws, opts, idx, wb) {\n\tvar sview = ({workbookViewId:\"0\"});\n\t// $FlowIgnore\n\tif((((wb||{}).Workbook||{}).Views||[])[0]) sview.rightToLeft = wb.Workbook.Views[0].RTL ? \"1\" : \"0\";\n\treturn writextag(\"sheetViews\", writextag(\"sheetView\", null, sview), {});\n}\n\nfunction write_ws_xml_cell(cell, ref, ws, opts) {\n\tif(cell.v === undefined && typeof cell.f !== \"string\" || cell.t === 'z') return \"\";\n\tvar vv = \"\";\n\tvar oldt = cell.t, oldv = cell.v;\n\tif(cell.t !== \"z\") switch(cell.t) {\n\t\tcase 'b': vv = cell.v ? \"1\" : \"0\"; break;\n\t\tcase 'n': vv = ''+cell.v; break;\n\t\tcase 'e': vv = BErr[cell.v]; break;\n\t\tcase 'd':\n\t\t\tif(opts && opts.cellDates) vv = parseDate(cell.v, -1).toISOString();\n\t\t\telse {\n\t\t\t\tcell = dup(cell);\n\t\t\t\tcell.t = 'n';\n\t\t\t\tvv = ''+(cell.v = datenum(parseDate(cell.v)));\n\t\t\t}\n\t\t\tif(typeof cell.z === 'undefined') cell.z = SSF._table[14];\n\t\t\tbreak;\n\t\tdefault: vv = cell.v; break;\n\t}\n\tvar v = writetag('v', escapexml(vv)), o = ({r:ref});\n\t/* TODO: cell style */\n\tvar os = get_cell_style(opts.cellXfs, cell, opts);\n\tif(os !== 0) o.s = os;\n\tswitch(cell.t) {\n\t\tcase 'n': break;\n\t\tcase 'd': o.t = \"d\"; break;\n\t\tcase 'b': o.t = \"b\"; break;\n\t\tcase 'e': o.t = \"e\"; break;\n\t\tcase 'z': break;\n\t\tdefault: if(cell.v == null) { delete cell.t; break; }\n\t\t\tif(cell.v.length > 32767) throw new Error(\"Text length must not exceed 32767 characters\");\n\t\t\tif(opts && opts.bookSST) {\n\t\t\t\tv = writetag('v', ''+get_sst_id(opts.Strings, cell.v, opts.revStrings));\n\t\t\t\to.t = \"s\"; break;\n\t\t\t}\n\t\t\to.t = \"str\"; break;\n\t}\n\tif(cell.t != oldt) { cell.t = oldt; cell.v = oldv; }\n\tif(typeof cell.f == \"string\" && cell.f) {\n\t\tvar ff = cell.F && cell.F.slice(0, ref.length) == ref ? {t:\"array\", ref:cell.F} : null;\n\t\tv = writextag('f', escapexml(cell.f), ff) + (cell.v != null ? v : \"\");\n\t}\n\tif(cell.l) ws['!links'].push([ref, cell.l]);\n\tif(cell.c) ws['!comments'].push([ref, cell.c]);\n\treturn writextag('c', v, o);\n}\n\nvar parse_ws_xml_data = (function() {\n\tvar cellregex = /<(?:\\w+:)?c[ \\/>]/, rowregex = /<\\/(?:\\w+:)?row>/;\n\tvar rregex = /r=[\"']([^\"']*)[\"']/, isregex = /<(?:\\w+:)?is>([\\S\\s]*?)<\\/(?:\\w+:)?is>/;\n\tvar refregex = /ref=[\"']([^\"']*)[\"']/;\n\tvar match_v = matchtag(\"v\"), match_f = matchtag(\"f\");\n\nreturn function parse_ws_xml_data(sdata, s, opts, guess, themes, styles) {\n\tvar ri = 0, x = \"\", cells = [], cref = [], idx=0, i=0, cc=0, d=\"\", p;\n\tvar tag, tagr = 0, tagc = 0;\n\tvar sstr, ftag;\n\tvar fmtid = 0, fillid = 0;\n\tvar do_format = Array.isArray(styles.CellXf), cf;\n\tvar arrayf = [];\n\tvar sharedf = [];\n\tvar dense = Array.isArray(s);\n\tvar rows = [], rowobj = {}, rowrite = false;\n\tvar sheetStubs = !!opts.sheetStubs;\n\tfor(var marr = sdata.split(rowregex), mt = 0, marrlen = marr.length; mt != marrlen; ++mt) {\n\t\tx = marr[mt].trim();\n\t\tvar xlen = x.length;\n\t\tif(xlen === 0) continue;\n\n\t\t/* 18.3.1.73 row CT_Row */\n\t\tvar rstarti = 0;\n\t\touta: for(ri = 0; ri < xlen; ++ri) switch(/*x.charCodeAt(ri)*/x[ri]) {\n\t\t\tcase \">\" /*62*/:\n\t\t\t\tif(/*x.charCodeAt(ri-1) != 47*/x[ri-1] != \"/\") { ++ri; break outa; }\n\t\t\t\tif(opts && opts.cellStyles) {\n\t\t\t\t\t// TODO: avoid duplication\n\t\t\t\t\ttag = parsexmltag(x.slice(rstarti,ri), true);\n\t\t\t\t\ttagr = tag.r != null ? parseInt(tag.r, 10) : tagr+1; tagc = -1;\n\t\t\t\t\tif(opts.sheetRows && opts.sheetRows < tagr) continue;\n\t\t\t\t\trowobj = {}; rowrite = false;\n\t\t\t\t\tif(tag.ht) { rowrite = true; rowobj.hpt = parseFloat(tag.ht); rowobj.hpx = pt2px(rowobj.hpt); }\n\t\t\t\t\tif(tag.hidden == \"1\") { rowrite = true; rowobj.hidden = true; }\n\t\t\t\t\tif(tag.outlineLevel != null) { rowrite = true; rowobj.level = +tag.outlineLevel; }\n\t\t\t\t\tif(rowrite) rows[tagr-1] = rowobj;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"<\" /*60*/: rstarti = ri; break;\n\t\t}\n\t\tif(rstarti >= ri) break;\n\t\ttag = parsexmltag(x.slice(rstarti,ri), true);\n\t\ttagr = tag.r != null ? parseInt(tag.r, 10) : tagr+1; tagc = -1;\n\t\tif(opts.sheetRows && opts.sheetRows < tagr) continue;\n\t\tif(guess.s.r > tagr - 1) guess.s.r = tagr - 1;\n\t\tif(guess.e.r < tagr - 1) guess.e.r = tagr - 1;\n\n\t\tif(opts && opts.cellStyles) {\n\t\t\trowobj = {}; rowrite = false;\n\t\t\tif(tag.ht) { rowrite = true; rowobj.hpt = parseFloat(tag.ht); rowobj.hpx = pt2px(rowobj.hpt); }\n\t\t\tif(tag.hidden == \"1\") { rowrite = true; rowobj.hidden = true; }\n\t\t\tif(tag.outlineLevel != null) { rowrite = true; rowobj.level = +tag.outlineLevel; }\n\t\t\tif(rowrite) rows[tagr-1] = rowobj;\n\t\t}\n\n\t\t/* 18.3.1.4 c CT_Cell */\n\t\tcells = x.slice(ri).split(cellregex);\n\t\tfor(var rslice = 0; rslice != cells.length; ++rslice) if(cells[rslice].trim().charAt(0) != \"<\") break;\n\t\tcells = cells.slice(rslice);\n\t\tfor(ri = 0; ri != cells.length; ++ri) {\n\t\t\tx = cells[ri].trim();\n\t\t\tif(x.length === 0) continue;\n\t\t\tcref = x.match(rregex); idx = ri; i=0; cc=0;\n\t\t\tx = \"<c \" + (x.slice(0,1)==\"<\"?\">\":\"\") + x;\n\t\t\tif(cref != null && cref.length === 2) {\n\t\t\t\tidx = 0; d=cref[1];\n\t\t\t\tfor(i=0; i != d.length; ++i) {\n\t\t\t\t\tif((cc=d.charCodeAt(i)-64) < 1 || cc > 26) break;\n\t\t\t\t\tidx = 26*idx + cc;\n\t\t\t\t}\n\t\t\t\t--idx;\n\t\t\t\ttagc = idx;\n\t\t\t} else ++tagc;\n\t\t\tfor(i = 0; i != x.length; ++i) if(x.charCodeAt(i) === 62) break; ++i;\n\t\t\ttag = parsexmltag(x.slice(0,i), true);\n\t\t\tif(!tag.r) tag.r = encode_cell({r:tagr-1, c:tagc});\n\t\t\td = x.slice(i);\n\t\t\tp = ({t:\"\"});\n\n\t\t\tif((cref=d.match(match_v))!= null && cref[1] !== '') p.v=unescapexml(cref[1]);\n\t\t\tif(opts.cellFormula) {\n\t\t\t\tif((cref=d.match(match_f))!= null && cref[1] !== '') {\n\t\t\t\t\t/* TODO: match against XLSXFutureFunctions */\n\t\t\t\t\tp.f=unescapexml(utf8read(cref[1])).replace(/\\r\\n/g, \"\\n\");\n\t\t\t\t\tif(!opts.xlfn) p.f = _xlfn(p.f);\n\t\t\t\t\tif(cref[0].indexOf('t=\"array\"') > -1) {\n\t\t\t\t\t\tp.F = (d.match(refregex)||[])[1];\n\t\t\t\t\t\tif(p.F.indexOf(\":\") > -1) arrayf.push([safe_decode_range(p.F), p.F]);\n\t\t\t\t\t} else if(cref[0].indexOf('t=\"shared\"') > -1) {\n\t\t\t\t\t\t// TODO: parse formula\n\t\t\t\t\t\tftag = parsexmltag(cref[0]);\n\t\t\t\t\t\tvar ___f = unescapexml(utf8read(cref[1]));\n\t\t\t\t\t\tif(!opts.xlfn) ___f = _xlfn(___f);\n\t\t\t\t\t\tsharedf[parseInt(ftag.si, 10)] = [ftag, ___f, tag.r];\n\t\t\t\t\t}\n\t\t\t\t} else if((cref=d.match(/<f[^>]*\\/>/))) {\n\t\t\t\t\tftag = parsexmltag(cref[0]);\n\t\t\t\t\tif(sharedf[ftag.si]) p.f = shift_formula_xlsx(sharedf[ftag.si][1], sharedf[ftag.si][2]/*[0].ref*/, tag.r);\n\t\t\t\t}\n\t\t\t\t/* TODO: factor out contains logic */\n\t\t\t\tvar _tag = decode_cell(tag.r);\n\t\t\t\tfor(i = 0; i < arrayf.length; ++i)\n\t\t\t\t\tif(_tag.r >= arrayf[i][0].s.r && _tag.r <= arrayf[i][0].e.r)\n\t\t\t\t\t\tif(_tag.c >= arrayf[i][0].s.c && _tag.c <= arrayf[i][0].e.c)\n\t\t\t\t\t\t\tp.F = arrayf[i][1];\n\t\t\t}\n\n\t\t\tif(tag.t == null && p.v === undefined) {\n\t\t\t\tif(p.f || p.F) {\n\t\t\t\t\tp.v = 0; p.t = \"n\";\n\t\t\t\t} else if(!sheetStubs) continue;\n\t\t\t\telse p.t = \"z\";\n\t\t\t}\n\t\t\telse p.t = tag.t || \"n\";\n\t\t\tif(guess.s.c > tagc) guess.s.c = tagc;\n\t\t\tif(guess.e.c < tagc) guess.e.c = tagc;\n\t\t\t/* 18.18.11 t ST_CellType */\n\t\t\tswitch(p.t) {\n\t\t\t\tcase 'n':\n\t\t\t\t\tif(p.v == \"\" || p.v == null) {\n\t\t\t\t\t\tif(!sheetStubs) continue;\n\t\t\t\t\t\tp.t = 'z';\n\t\t\t\t\t} else p.v = parseFloat(p.v);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 's':\n\t\t\t\t\tif(typeof p.v == 'undefined') {\n\t\t\t\t\t\tif(!sheetStubs) continue;\n\t\t\t\t\t\tp.t = 'z';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsstr = strs[parseInt(p.v, 10)];\n\t\t\t\t\t\tp.v = sstr.t;\n\t\t\t\t\t\tp.r = sstr.r;\n\t\t\t\t\t\tif(opts.cellHTML) p.h = sstr.h;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'str':\n\t\t\t\t\tp.t = \"s\";\n\t\t\t\t\tp.v = (p.v!=null) ? utf8read(p.v) : '';\n\t\t\t\t\tif(opts.cellHTML) p.h = escapehtml(p.v);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'inlineStr':\n\t\t\t\t\tcref = d.match(isregex);\n\t\t\t\t\tp.t = 's';\n\t\t\t\t\tif(cref != null && (sstr = parse_si(cref[1]))) {\n\t\t\t\t\t\tp.v = sstr.t;\n\t\t\t\t\t\tif(opts.cellHTML) p.h = sstr.h;\n\t\t\t\t\t} else p.v = \"\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'b': p.v = parsexmlbool(p.v); break;\n\t\t\t\tcase 'd':\n\t\t\t\t\tif(opts.cellDates) p.v = parseDate(p.v, 1);\n\t\t\t\t\telse { p.v = datenum(parseDate(p.v, 1)); p.t = 'n'; }\n\t\t\t\t\tbreak;\n\t\t\t\t/* error string in .w, number in .v */\n\t\t\t\tcase 'e':\n\t\t\t\t\tif(!opts || opts.cellText !== false) p.w = p.v;\n\t\t\t\t\tp.v = RBErr[p.v]; break;\n\t\t\t}\n\t\t\t/* formatting */\n\t\t\tfmtid = fillid = 0;\n\t\t\tcf = null;\n\t\t\tif(do_format && tag.s !== undefined) {\n\t\t\t\tcf = styles.CellXf[tag.s];\n\t\t\t\tif(cf != null) {\n\t\t\t\t\tif(cf.numFmtId != null) fmtid = cf.numFmtId;\n\t\t\t\t\tif(opts.cellStyles) {\n\t\t\t\t\t\tif(cf.fillId != null) fillid = cf.fillId;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tsafe_format(p, fmtid, fillid, opts, themes, styles);\n\t\t\tif(opts.cellDates && do_format && p.t == 'n' && SSF.is_date(SSF._table[fmtid])) { p.t = 'd'; p.v = numdate(p.v); }\n\t\t\tif(dense) {\n\t\t\t\tvar _r = decode_cell(tag.r);\n\t\t\t\tif(!s[_r.r]) s[_r.r] = [];\n\t\t\t\ts[_r.r][_r.c] = p;\n\t\t\t} else s[tag.r] = p;\n\t\t}\n\t}\n\tif(rows.length > 0) s['!rows'] = rows;\n}; })();\n\nfunction write_ws_xml_data(ws, opts, idx, wb) {\n\tvar o = [], r = [], range = safe_decode_range(ws['!ref']), cell=\"\", ref, rr = \"\", cols = [], R=0, C=0, rows = ws['!rows'];\n\tvar dense = Array.isArray(ws);\n\tvar params = ({r:rr}), row, height = -1;\n\tfor(C = range.s.c; C <= range.e.c; ++C) cols[C] = encode_col(C);\n\tfor(R = range.s.r; R <= range.e.r; ++R) {\n\t\tr = [];\n\t\trr = encode_row(R);\n\t\tfor(C = range.s.c; C <= range.e.c; ++C) {\n\t\t\tref = cols[C] + rr;\n\t\t\tvar _cell = dense ? (ws[R]||[])[C]: ws[ref];\n\t\t\tif(_cell === undefined) continue;\n\t\t\tif((cell = write_ws_xml_cell(_cell, ref, ws, opts, idx, wb)) != null) r.push(cell);\n\t\t}\n\t\tif(r.length > 0 || (rows && rows[R])) {\n\t\t\tparams = ({r:rr});\n\t\t\tif(rows && rows[R]) {\n\t\t\t\trow = rows[R];\n\t\t\t\tif(row.hidden) params.hidden = 1;\n\t\t\t\theight = -1;\n\t\t\t\tif(row.hpx) height = px2pt(row.hpx);\n\t\t\t\telse if(row.hpt) height = row.hpt;\n\t\t\t\tif(height > -1) { params.ht = height; params.customHeight = 1; }\n\t\t\t\tif(row.level) { params.outlineLevel = row.level; }\n\t\t\t}\n\t\t\to[o.length] = (writextag('row', r.join(\"\"), params));\n\t\t}\n\t}\n\tif(rows) for(; R < rows.length; ++R) {\n\t\tif(rows && rows[R]) {\n\t\t\tparams = ({r:R+1});\n\t\t\trow = rows[R];\n\t\t\tif(row.hidden) params.hidden = 1;\n\t\t\theight = -1;\n\t\t\tif (row.hpx) height = px2pt(row.hpx);\n\t\t\telse if (row.hpt) height = row.hpt;\n\t\t\tif (height > -1) { params.ht = height; params.customHeight = 1; }\n\t\t\tif (row.level) { params.outlineLevel = row.level; }\n\t\t\to[o.length] = (writextag('row', \"\", params));\n\t\t}\n\t}\n\treturn o.join(\"\");\n}\n\nvar WS_XML_ROOT = writextag('worksheet', null, {\n\t'xmlns': XMLNS.main[0],\n\t'xmlns:r': XMLNS.r\n});\n\nfunction write_ws_xml(idx, opts, wb, rels) {\n\tvar o = [XML_HEADER, WS_XML_ROOT];\n\tvar s = wb.SheetNames[idx], sidx = 0, rdata = \"\";\n\tvar ws = wb.Sheets[s];\n\tif(ws == null) ws = {};\n\tvar ref = ws['!ref'] || 'A1';\n\tvar range = safe_decode_range(ref);\n\tif(range.e.c > 0x3FFF || range.e.r > 0xFFFFF) {\n\t\tif(opts.WTF) throw new Error(\"Range \" + ref + \" exceeds format limit A1:XFD1048576\");\n\t\trange.e.c = Math.min(range.e.c, 0x3FFF);\n\t\trange.e.r = Math.min(range.e.c, 0xFFFFF);\n\t\tref = encode_range(range);\n\t}\n\tif(!rels) rels = {};\n\tws['!comments'] = [];\n\tvar _drawing = [];\n\n\twrite_ws_xml_sheetpr(ws, wb, idx, opts, o);\n\n\to[o.length] = (writextag('dimension', null, {'ref': ref}));\n\n\to[o.length] = write_ws_xml_sheetviews(ws, opts, idx, wb);\n\n\t/* TODO: store in WB, process styles */\n\tif(opts.sheetFormat) o[o.length] = (writextag('sheetFormatPr', null, {\n\t\tdefaultRowHeight:opts.sheetFormat.defaultRowHeight||'16',\n\t\tbaseColWidth:opts.sheetFormat.baseColWidth||'10',\n\t\toutlineLevelRow:opts.sheetFormat.outlineLevelRow||'7'\n\t}));\n\n\tif(ws['!cols'] != null && ws['!cols'].length > 0) o[o.length] = (write_ws_xml_cols(ws, ws['!cols']));\n\n\to[sidx = o.length] = '<sheetData/>';\n\tws['!links'] = [];\n\tif(ws['!ref'] != null) {\n\t\trdata = write_ws_xml_data(ws, opts, idx, wb, rels);\n\t\tif(rdata.length > 0) o[o.length] = (rdata);\n\t}\n\tif(o.length>sidx+1) { o[o.length] = ('</sheetData>'); o[sidx]=o[sidx].replace(\"/>\",\">\"); }\n\n\t/* sheetCalcPr */\n\n\tif(ws['!protect']) o[o.length] = write_ws_xml_protection(ws['!protect']);\n\n\t/* protectedRanges */\n\t/* scenarios */\n\n\tif(ws['!autofilter'] != null) o[o.length] = write_ws_xml_autofilter(ws['!autofilter'], ws, wb, idx);\n\n\t/* sortState */\n\t/* dataConsolidate */\n\t/* customSheetViews */\n\n\tif(ws['!merges'] != null && ws['!merges'].length > 0) o[o.length] = (write_ws_xml_merges(ws['!merges']));\n\n\t/* phoneticPr */\n\t/* conditionalFormatting */\n\t/* dataValidations */\n\n\tvar relc = -1, rel, rId = -1;\n\tif(ws['!links'].length > 0) {\n\t\to[o.length] = \"<hyperlinks>\";\nws['!links'].forEach(function(l) {\n\t\t\tif(!l[1].Target) return;\n\t\t\trel = ({\"ref\":l[0]});\n\t\t\tif(l[1].Target.charAt(0) != \"#\") {\n\t\t\t\trId = add_rels(rels, -1, escapexml(l[1].Target).replace(/#.*$/, \"\"), RELS.HLINK);\n\t\t\t\trel[\"r:id\"] = \"rId\"+rId;\n\t\t\t}\n\t\t\tif((relc = l[1].Target.indexOf(\"#\")) > -1) rel.location = escapexml(l[1].Target.slice(relc+1));\n\t\t\tif(l[1].Tooltip) rel.tooltip = escapexml(l[1].Tooltip);\n\t\t\to[o.length] = writextag(\"hyperlink\",null,rel);\n\t\t});\n\t\to[o.length] = \"</hyperlinks>\";\n\t}\n\tdelete ws['!links'];\n\n\t/* printOptions */\n\n\tif(ws['!margins'] != null) o[o.length] =  write_ws_xml_margins(ws['!margins']);\n\n\t/* pageSetup */\n\t/* headerFooter */\n\t/* rowBreaks */\n\t/* colBreaks */\n\t/* customProperties */\n\t/* cellWatches */\n\n\tif(!opts || opts.ignoreEC || (opts.ignoreEC == (void 0))) o[o.length] = writetag(\"ignoredErrors\", writextag(\"ignoredError\", null, {numberStoredAsText:1, sqref:ref}));\n\n\t/* smartTags */\n\n\tif(_drawing.length > 0) {\n\t\trId = add_rels(rels, -1, \"../drawings/drawing\" + (idx+1) + \".xml\", RELS.DRAW);\n\t\to[o.length] = writextag(\"drawing\", null, {\"r:id\":\"rId\" + rId});\n\t\tws['!drawing'] = _drawing;\n\t}\n\n\tif(ws['!comments'].length > 0) {\n\t\trId = add_rels(rels, -1, \"../drawings/vmlDrawing\" + (idx+1) + \".vml\", RELS.VML);\n\t\to[o.length] = writextag(\"legacyDrawing\", null, {\"r:id\":\"rId\" + rId});\n\t\tws['!legacy'] = rId;\n\t}\n\n\t/* legacyDrawingHF */\n\t/* picture */\n\t/* oleObjects */\n\t/* controls */\n\t/* webPublishItems */\n\t/* tableParts */\n\t/* extLst */\n\n\tif(o.length>1) { o[o.length] = ('</worksheet>'); o[1]=o[1].replace(\"/>\",\">\"); }\n\treturn o.join(\"\");\n}\n\n/* [MS-XLSB] 2.4.726 BrtRowHdr */\nfunction parse_BrtRowHdr(data, length) {\n\tvar z = ({});\n\tvar tgt = data.l + length;\n\tz.r = data.read_shift(4);\n\tdata.l += 4; // TODO: ixfe\n\tvar miyRw = data.read_shift(2);\n\tdata.l += 1; // TODO: top/bot padding\n\tvar flags = data.read_shift(1);\n\tdata.l = tgt;\n\tif(flags & 0x07) z.level = flags & 0x07;\n\tif(flags & 0x10) z.hidden = true;\n\tif(flags & 0x20) z.hpt = miyRw / 20;\n\treturn z;\n}\nfunction write_BrtRowHdr(R, range, ws) {\n\tvar o = new_buf(17+8*16);\n\tvar row = (ws['!rows']||[])[R]||{};\n\to.write_shift(4, R);\n\n\to.write_shift(4, 0); /* TODO: ixfe */\n\n\tvar miyRw = 0x0140;\n\tif(row.hpx) miyRw = px2pt(row.hpx) * 20;\n\telse if(row.hpt) miyRw = row.hpt * 20;\n\to.write_shift(2, miyRw);\n\n\to.write_shift(1, 0); /* top/bot padding */\n\n\tvar flags = 0x0;\n\tif(row.level) flags |= row.level;\n\tif(row.hidden) flags |= 0x10;\n\tif(row.hpx || row.hpt) flags |= 0x20;\n\to.write_shift(1, flags);\n\n\to.write_shift(1, 0); /* phonetic guide */\n\n\t/* [MS-XLSB] 2.5.8 BrtColSpan explains the mechanism */\n\tvar ncolspan = 0, lcs = o.l;\n\to.l += 4;\n\n\tvar caddr = {r:R, c:0};\n\tfor(var i = 0; i < 16; ++i) {\n\t\tif((range.s.c > ((i+1) << 10)) || (range.e.c < (i << 10))) continue;\n\t\tvar first = -1, last = -1;\n\t\tfor(var j = (i<<10); j < ((i+1)<<10); ++j) {\n\t\t\tcaddr.c = j;\n\t\t\tvar cell = Array.isArray(ws) ? (ws[caddr.r]||[])[caddr.c] : ws[encode_cell(caddr)];\n\t\t\tif(cell) { if(first < 0) first = j; last = j; }\n\t\t}\n\t\tif(first < 0) continue;\n\t\t++ncolspan;\n\t\to.write_shift(4, first);\n\t\to.write_shift(4, last);\n\t}\n\n\tvar l = o.l;\n\to.l = lcs;\n\to.write_shift(4, ncolspan);\n\to.l = l;\n\n\treturn o.length > o.l ? o.slice(0, o.l) : o;\n}\nfunction write_row_header(ba, ws, range, R) {\n\tvar o = write_BrtRowHdr(R, range, ws);\n\tif((o.length > 17) || (ws['!rows']||[])[R]) write_record(ba, 'BrtRowHdr', o);\n}\n\n/* [MS-XLSB] 2.4.820 BrtWsDim */\nvar parse_BrtWsDim = parse_UncheckedRfX;\nvar write_BrtWsDim = write_UncheckedRfX;\n\n/* [MS-XLSB] 2.4.821 BrtWsFmtInfo */\nfunction parse_BrtWsFmtInfo() {\n}\n//function write_BrtWsFmtInfo(ws, o) { }\n\n/* [MS-XLSB] 2.4.823 BrtWsProp */\nfunction parse_BrtWsProp(data, length) {\n\tvar z = {};\n\tvar f = data[data.l]; ++data.l;\n\tz.above = !(f & 0x40);\n\tz.left  = !(f & 0x80);\n\t/* TODO: pull flags */\n\tdata.l += 18;\n\tz.name = parse_XLSBCodeName(data, length - 19);\n\treturn z;\n}\nfunction write_BrtWsProp(str, outl, o) {\n\tif(o == null) o = new_buf(84+4*str.length);\n\tvar f = 0xC0;\n\tif(outl) {\n\t\tif(outl.above) f &= ~0x40;\n\t\tif(outl.left)  f &= ~0x80;\n\t}\n\to.write_shift(1, f);\n\tfor(var i = 1; i < 3; ++i) o.write_shift(1,0);\n\twrite_BrtColor({auto:1}, o);\n\to.write_shift(-4,-1);\n\to.write_shift(-4,-1);\n\twrite_XLSBCodeName(str, o);\n\treturn o.slice(0, o.l);\n}\n\n/* [MS-XLSB] 2.4.306 BrtCellBlank */\nfunction parse_BrtCellBlank(data) {\n\tvar cell = parse_XLSBCell(data);\n\treturn [cell];\n}\nfunction write_BrtCellBlank(cell, ncell, o) {\n\tif(o == null) o = new_buf(8);\n\treturn write_XLSBCell(ncell, o);\n}\nfunction parse_BrtShortBlank(data) {\n\tvar cell = parse_XLSBShortCell(data);\n\treturn [cell];\n}\nfunction write_BrtShortBlank(cell, ncell, o) {\n\tif(o == null) o = new_buf(4);\n\treturn write_XLSBShortCell(ncell, o);\n}\n\n/* [MS-XLSB] 2.4.307 BrtCellBool */\nfunction parse_BrtCellBool(data) {\n\tvar cell = parse_XLSBCell(data);\n\tvar fBool = data.read_shift(1);\n\treturn [cell, fBool, 'b'];\n}\nfunction write_BrtCellBool(cell, ncell, o) {\n\tif(o == null) o = new_buf(9);\n\twrite_XLSBCell(ncell, o);\n\to.write_shift(1, cell.v ? 1 : 0);\n\treturn o;\n}\nfunction parse_BrtShortBool(data) {\n\tvar cell = parse_XLSBShortCell(data);\n\tvar fBool = data.read_shift(1);\n\treturn [cell, fBool, 'b'];\n}\nfunction write_BrtShortBool(cell, ncell, o) {\n\tif(o == null) o = new_buf(5);\n\twrite_XLSBShortCell(ncell, o);\n\to.write_shift(1, cell.v ? 1 : 0);\n\treturn o;\n}\n\n/* [MS-XLSB] 2.4.308 BrtCellError */\nfunction parse_BrtCellError(data) {\n\tvar cell = parse_XLSBCell(data);\n\tvar bError = data.read_shift(1);\n\treturn [cell, bError, 'e'];\n}\nfunction write_BrtCellError(cell, ncell, o) {\n\tif(o == null) o = new_buf(9);\n\twrite_XLSBCell(ncell, o);\n\to.write_shift(1, cell.v);\n\treturn o;\n}\nfunction parse_BrtShortError(data) {\n\tvar cell = parse_XLSBShortCell(data);\n\tvar bError = data.read_shift(1);\n\treturn [cell, bError, 'e'];\n}\nfunction write_BrtShortError(cell, ncell, o) {\n\tif(o == null) o = new_buf(8);\n\twrite_XLSBShortCell(ncell, o);\n\to.write_shift(1, cell.v);\n\to.write_shift(2, 0);\n\to.write_shift(1, 0);\n\treturn o;\n}\n\n\n/* [MS-XLSB] 2.4.311 BrtCellIsst */\nfunction parse_BrtCellIsst(data) {\n\tvar cell = parse_XLSBCell(data);\n\tvar isst = data.read_shift(4);\n\treturn [cell, isst, 's'];\n}\nfunction write_BrtCellIsst(cell, ncell, o) {\n\tif(o == null) o = new_buf(12);\n\twrite_XLSBCell(ncell, o);\n\to.write_shift(4, ncell.v);\n\treturn o;\n}\nfunction parse_BrtShortIsst(data) {\n\tvar cell = parse_XLSBShortCell(data);\n\tvar isst = data.read_shift(4);\n\treturn [cell, isst, 's'];\n}\nfunction write_BrtShortIsst(cell, ncell, o) {\n\tif(o == null) o = new_buf(8);\n\twrite_XLSBShortCell(ncell, o);\n\to.write_shift(4, ncell.v);\n\treturn o;\n}\n\n/* [MS-XLSB] 2.4.313 BrtCellReal */\nfunction parse_BrtCellReal(data) {\n\tvar cell = parse_XLSBCell(data);\n\tvar value = parse_Xnum(data);\n\treturn [cell, value, 'n'];\n}\nfunction write_BrtCellReal(cell, ncell, o) {\n\tif(o == null) o = new_buf(16);\n\twrite_XLSBCell(ncell, o);\n\twrite_Xnum(cell.v, o);\n\treturn o;\n}\nfunction parse_BrtShortReal(data) {\n\tvar cell = parse_XLSBShortCell(data);\n\tvar value = parse_Xnum(data);\n\treturn [cell, value, 'n'];\n}\nfunction write_BrtShortReal(cell, ncell, o) {\n\tif(o == null) o = new_buf(12);\n\twrite_XLSBShortCell(ncell, o);\n\twrite_Xnum(cell.v, o);\n\treturn o;\n}\n\n/* [MS-XLSB] 2.4.314 BrtCellRk */\nfunction parse_BrtCellRk(data) {\n\tvar cell = parse_XLSBCell(data);\n\tvar value = parse_RkNumber(data);\n\treturn [cell, value, 'n'];\n}\nfunction write_BrtCellRk(cell, ncell, o) {\n\tif(o == null) o = new_buf(12);\n\twrite_XLSBCell(ncell, o);\n\twrite_RkNumber(cell.v, o);\n\treturn o;\n}\nfunction parse_BrtShortRk(data) {\n\tvar cell = parse_XLSBShortCell(data);\n\tvar value = parse_RkNumber(data);\n\treturn [cell, value, 'n'];\n}\nfunction write_BrtShortRk(cell, ncell, o) {\n\tif(o == null) o = new_buf(8);\n\twrite_XLSBShortCell(ncell, o);\n\twrite_RkNumber(cell.v, o);\n\treturn o;\n}\n\n\n/* [MS-XLSB] 2.4.317 BrtCellSt */\nfunction parse_BrtCellSt(data) {\n\tvar cell = parse_XLSBCell(data);\n\tvar value = parse_XLWideString(data);\n\treturn [cell, value, 'str'];\n}\nfunction write_BrtCellSt(cell, ncell, o) {\n\tif(o == null) o = new_buf(12 + 4 * cell.v.length);\n\twrite_XLSBCell(ncell, o);\n\twrite_XLWideString(cell.v, o);\n\treturn o.length > o.l ? o.slice(0, o.l) : o;\n}\nfunction parse_BrtShortSt(data) {\n\tvar cell = parse_XLSBShortCell(data);\n\tvar value = parse_XLWideString(data);\n\treturn [cell, value, 'str'];\n}\nfunction write_BrtShortSt(cell, ncell, o) {\n\tif(o == null) o = new_buf(8 + 4 * cell.v.length);\n\twrite_XLSBShortCell(ncell, o);\n\twrite_XLWideString(cell.v, o);\n\treturn o.length > o.l ? o.slice(0, o.l) : o;\n}\n\n/* [MS-XLSB] 2.4.653 BrtFmlaBool */\nfunction parse_BrtFmlaBool(data, length, opts) {\n\tvar end = data.l + length;\n\tvar cell = parse_XLSBCell(data);\n\tcell.r = opts['!row'];\n\tvar value = data.read_shift(1);\n\tvar o = [cell, value, 'b'];\n\tif(opts.cellFormula) {\n\t\tdata.l += 2;\n\t\tvar formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);\n\t\to[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */\n\t}\n\telse data.l = end;\n\treturn o;\n}\n\n/* [MS-XLSB] 2.4.654 BrtFmlaError */\nfunction parse_BrtFmlaError(data, length, opts) {\n\tvar end = data.l + length;\n\tvar cell = parse_XLSBCell(data);\n\tcell.r = opts['!row'];\n\tvar value = data.read_shift(1);\n\tvar o = [cell, value, 'e'];\n\tif(opts.cellFormula) {\n\t\tdata.l += 2;\n\t\tvar formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);\n\t\to[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */\n\t}\n\telse data.l = end;\n\treturn o;\n}\n\n/* [MS-XLSB] 2.4.655 BrtFmlaNum */\nfunction parse_BrtFmlaNum(data, length, opts) {\n\tvar end = data.l + length;\n\tvar cell = parse_XLSBCell(data);\n\tcell.r = opts['!row'];\n\tvar value = parse_Xnum(data);\n\tvar o = [cell, value, 'n'];\n\tif(opts.cellFormula) {\n\t\tdata.l += 2;\n\t\tvar formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);\n\t\to[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */\n\t}\n\telse data.l = end;\n\treturn o;\n}\n\n/* [MS-XLSB] 2.4.656 BrtFmlaString */\nfunction parse_BrtFmlaString(data, length, opts) {\n\tvar end = data.l + length;\n\tvar cell = parse_XLSBCell(data);\n\tcell.r = opts['!row'];\n\tvar value = parse_XLWideString(data);\n\tvar o = [cell, value, 'str'];\n\tif(opts.cellFormula) {\n\t\tdata.l += 2;\n\t\tvar formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);\n\t\to[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */\n\t}\n\telse data.l = end;\n\treturn o;\n}\n\n/* [MS-XLSB] 2.4.682 BrtMergeCell */\nvar parse_BrtMergeCell = parse_UncheckedRfX;\nvar write_BrtMergeCell = write_UncheckedRfX;\n/* [MS-XLSB] 2.4.107 BrtBeginMergeCells */\nfunction write_BrtBeginMergeCells(cnt, o) {\n\tif(o == null) o = new_buf(4);\n\to.write_shift(4, cnt);\n\treturn o;\n}\n\n/* [MS-XLSB] 2.4.662 BrtHLink */\nfunction parse_BrtHLink(data, length) {\n\tvar end = data.l + length;\n\tvar rfx = parse_UncheckedRfX(data, 16);\n\tvar relId = parse_XLNullableWideString(data);\n\tvar loc = parse_XLWideString(data);\n\tvar tooltip = parse_XLWideString(data);\n\tvar display = parse_XLWideString(data);\n\tdata.l = end;\n\tvar o = ({rfx:rfx, relId:relId, loc:loc, display:display});\n\tif(tooltip) o.Tooltip = tooltip;\n\treturn o;\n}\nfunction write_BrtHLink(l, rId) {\n\tvar o = new_buf(50+4*(l[1].Target.length + (l[1].Tooltip || \"\").length));\n\twrite_UncheckedRfX({s:decode_cell(l[0]), e:decode_cell(l[0])}, o);\n\twrite_RelID(\"rId\" + rId, o);\n\tvar locidx = l[1].Target.indexOf(\"#\");\n\tvar loc = locidx == -1 ? \"\" : l[1].Target.slice(locidx+1);\n\twrite_XLWideString(loc || \"\", o);\n\twrite_XLWideString(l[1].Tooltip || \"\", o);\n\twrite_XLWideString(\"\", o);\n\treturn o.slice(0, o.l);\n}\n\n/* [MS-XLSB] 2.4.692 BrtPane */\nfunction parse_BrtPane(/*data, length, opts*/) {\n}\n\n/* [MS-XLSB] 2.4.6 BrtArrFmla */\nfunction parse_BrtArrFmla(data, length, opts) {\n\tvar end = data.l + length;\n\tvar rfx = parse_RfX(data, 16);\n\tvar fAlwaysCalc = data.read_shift(1);\n\tvar o = [rfx]; o[2] = fAlwaysCalc;\n\tif(opts.cellFormula) {\n\t\tvar formula = parse_XLSBArrayParsedFormula(data, end - data.l, opts);\n\t\to[1] = formula;\n\t} else data.l = end;\n\treturn o;\n}\n\n/* [MS-XLSB] 2.4.750 BrtShrFmla */\nfunction parse_BrtShrFmla(data, length, opts) {\n\tvar end = data.l + length;\n\tvar rfx = parse_UncheckedRfX(data, 16);\n\tvar o = [rfx];\n\tif(opts.cellFormula) {\n\t\tvar formula = parse_XLSBSharedParsedFormula(data, end - data.l, opts);\n\t\to[1] = formula;\n\t\tdata.l = end;\n\t} else data.l = end;\n\treturn o;\n}\n\n/* [MS-XLSB] 2.4.323 BrtColInfo */\n/* TODO: once XLS ColInfo is set, combine the functions */\nfunction write_BrtColInfo(C, col, o) {\n\tif(o == null) o = new_buf(18);\n\tvar p = col_obj_w(C, col);\n\to.write_shift(-4, C);\n\to.write_shift(-4, C);\n\to.write_shift(4, (p.width || 10) * 256);\n\to.write_shift(4, 0/*ixfe*/); // style\n\tvar flags = 0;\n\tif(col.hidden) flags |= 0x01;\n\tif(typeof p.width == 'number') flags |= 0x02;\n\tif(col.level) flags |= (col.level << 8);\n\to.write_shift(2, flags); // bit flag\n\treturn o;\n}\n\n/* [MS-XLSB] 2.4.678 BrtMargins */\nvar BrtMarginKeys = [\"left\",\"right\",\"top\",\"bottom\",\"header\",\"footer\"];\nfunction parse_BrtMargins(data) {\n\tvar margins = ({});\n\tBrtMarginKeys.forEach(function(k) { margins[k] = parse_Xnum(data, 8); });\n\treturn margins;\n}\nfunction write_BrtMargins(margins, o) {\n\tif(o == null) o = new_buf(6*8);\n\tdefault_margins(margins);\n\tBrtMarginKeys.forEach(function(k) { write_Xnum((margins)[k], o); });\n\treturn o;\n}\n\n/* [MS-XLSB] 2.4.299 BrtBeginWsView */\nfunction parse_BrtBeginWsView(data) {\n\tvar f = data.read_shift(2);\n\tdata.l += 28;\n\treturn { RTL: f & 0x20 };\n}\nfunction write_BrtBeginWsView(ws, Workbook, o) {\n\tif(o == null) o = new_buf(30);\n\tvar f = 0x39c;\n\tif((((Workbook||{}).Views||[])[0]||{}).RTL) f |= 0x20;\n\to.write_shift(2, f); // bit flag\n\to.write_shift(4, 0);\n\to.write_shift(4, 0); // view first row\n\to.write_shift(4, 0); // view first col\n\to.write_shift(1, 0); // gridline color ICV\n\to.write_shift(1, 0);\n\to.write_shift(2, 0);\n\to.write_shift(2, 100); // zoom scale\n\to.write_shift(2, 0);\n\to.write_shift(2, 0);\n\to.write_shift(2, 0);\n\to.write_shift(4, 0); // workbook view id\n\treturn o;\n}\n\n/* [MS-XLSB] 2.4.309 BrtCellIgnoreEC */\nfunction write_BrtCellIgnoreEC(ref) {\n\tvar o = new_buf(24);\n\to.write_shift(4, 4);\n\to.write_shift(4, 1);\n\twrite_UncheckedRfX(ref, o);\n\treturn o;\n}\n\n/* [MS-XLSB] 2.4.748 BrtSheetProtection */\nfunction write_BrtSheetProtection(sp, o) {\n\tif(o == null) o = new_buf(16*4+2);\n\to.write_shift(2, sp.password ? crypto_CreatePasswordVerifier_Method1(sp.password) : 0);\n\to.write_shift(4, 1); // this record should not be written if no protection\n\t[\n\t\t[\"objects\",             false], // fObjects\n\t\t[\"scenarios\",           false], // fScenarios\n\t\t[\"formatCells\",          true], // fFormatCells\n\t\t[\"formatColumns\",        true], // fFormatColumns\n\t\t[\"formatRows\",           true], // fFormatRows\n\t\t[\"insertColumns\",        true], // fInsertColumns\n\t\t[\"insertRows\",           true], // fInsertRows\n\t\t[\"insertHyperlinks\",     true], // fInsertHyperlinks\n\t\t[\"deleteColumns\",        true], // fDeleteColumns\n\t\t[\"deleteRows\",           true], // fDeleteRows\n\t\t[\"selectLockedCells\",   false], // fSelLockedCells\n\t\t[\"sort\",                 true], // fSort\n\t\t[\"autoFilter\",           true], // fAutoFilter\n\t\t[\"pivotTables\",          true], // fPivotTables\n\t\t[\"selectUnlockedCells\", false]  // fSelUnlockedCells\n\t].forEach(function(n) {\nif(n[1]) o.write_shift(4, sp[n[0]] != null && !sp[n[0]] ? 1 : 0);\n\t\telse      o.write_shift(4, sp[n[0]] != null && sp[n[0]] ? 0 : 1);\n\t});\n\treturn o;\n}\n\nfunction parse_BrtDVal(/*data, length, opts*/) {\n}\nfunction parse_BrtDVal14(/*data, length, opts*/) {\n}\n/* [MS-XLSB] 2.1.7.61 Worksheet */\nfunction parse_ws_bin(data, _opts, idx, rels, wb, themes, styles) {\n\tif(!data) return data;\n\tvar opts = _opts || {};\n\tif(!rels) rels = {'!id':{}};\n\tif(DENSE != null && opts.dense == null) opts.dense = DENSE;\n\tvar s = (opts.dense ? [] : {});\n\n\tvar ref;\n\tvar refguess = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };\n\n\tvar state = [];\n\tvar pass = false, end = false;\n\tvar row, p, cf, R, C, addr, sstr, rr, cell;\n\tvar merges = [];\n\topts.biff = 12;\n\topts['!row'] = 0;\n\n\tvar ai = 0, af = false;\n\n\tvar arrayf = [];\n\tvar sharedf = {};\n\tvar supbooks = opts.supbooks || wb.supbooks || ([[]]);\n\tsupbooks.sharedf = sharedf;\n\tsupbooks.arrayf = arrayf;\n\tsupbooks.SheetNames = wb.SheetNames || wb.Sheets.map(function(x) { return x.name; });\n\tif(!opts.supbooks) {\n\t\topts.supbooks = supbooks;\n\t\tif(wb.Names) for(var i = 0; i < wb.Names.length; ++i) supbooks[0][i+1] = wb.Names[i];\n\t}\n\n\tvar colinfo = [], rowinfo = [];\n\tvar seencol = false;\n\n\tXLSBRecordEnum[0x0010] = { n:\"BrtShortReal\", f:parse_BrtShortReal };\n\n\trecordhopper(data, function ws_parse(val, R_n, RT) {\n\t\tif(end) return;\n\t\tswitch(RT) {\n\t\t\tcase 0x0094: /* 'BrtWsDim' */\n\t\t\t\tref = val; break;\n\t\t\tcase 0x0000: /* 'BrtRowHdr' */\n\t\t\t\trow = val;\n\t\t\t\tif(opts.sheetRows && opts.sheetRows <= row.r) end=true;\n\t\t\t\trr = encode_row(R = row.r);\n\t\t\t\topts['!row'] = row.r;\n\t\t\t\tif(val.hidden || val.hpt || val.level != null) {\n\t\t\t\t\tif(val.hpt) val.hpx = pt2px(val.hpt);\n\t\t\t\t\trowinfo[val.r] = val;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 0x0002: /* 'BrtCellRk' */\n\t\t\tcase 0x0003: /* 'BrtCellError' */\n\t\t\tcase 0x0004: /* 'BrtCellBool' */\n\t\t\tcase 0x0005: /* 'BrtCellReal' */\n\t\t\tcase 0x0006: /* 'BrtCellSt' */\n\t\t\tcase 0x0007: /* 'BrtCellIsst' */\n\t\t\tcase 0x0008: /* 'BrtFmlaString' */\n\t\t\tcase 0x0009: /* 'BrtFmlaNum' */\n\t\t\tcase 0x000A: /* 'BrtFmlaBool' */\n\t\t\tcase 0x000B: /* 'BrtFmlaError' */\n\t\t\tcase 0x000D: /* 'BrtShortRk' */\n\t\t\tcase 0x000E: /* 'BrtShortError' */\n\t\t\tcase 0x000F: /* 'BrtShortBool' */\n\t\t\tcase 0x0010: /* 'BrtShortReal' */\n\t\t\tcase 0x0011: /* 'BrtShortSt' */\n\t\t\tcase 0x0012: /* 'BrtShortIsst' */\n\t\t\t\tp = ({t:val[2]});\n\t\t\t\tswitch(val[2]) {\n\t\t\t\t\tcase 'n': p.v = val[1]; break;\n\t\t\t\t\tcase 's': sstr = strs[val[1]]; p.v = sstr.t; p.r = sstr.r; break;\n\t\t\t\t\tcase 'b': p.v = val[1] ? true : false; break;\n\t\t\t\t\tcase 'e': p.v = val[1]; if(opts.cellText !== false) p.w = BErr[p.v]; break;\n\t\t\t\t\tcase 'str': p.t = 's'; p.v = val[1]; break;\n\t\t\t\t}\n\t\t\t\tif((cf = styles.CellXf[val[0].iStyleRef])) safe_format(p,cf.numFmtId,null,opts, themes, styles);\n\t\t\t\tC = val[0].c == -1 ? C + 1 : val[0].c;\n\t\t\t\tif(opts.dense) { if(!s[R]) s[R] = []; s[R][C] = p; }\n\t\t\t\telse s[encode_col(C) + rr] = p;\n\t\t\t\tif(opts.cellFormula) {\n\t\t\t\t\taf = false;\n\t\t\t\t\tfor(ai = 0; ai < arrayf.length; ++ai) {\n\t\t\t\t\t\tvar aii = arrayf[ai];\n\t\t\t\t\t\tif(row.r >= aii[0].s.r && row.r <= aii[0].e.r)\n\t\t\t\t\t\t\tif(C >= aii[0].s.c && C <= aii[0].e.c) {\n\t\t\t\t\t\t\t\tp.F = encode_range(aii[0]); af = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(!af && val.length > 3) p.f = val[3];\n\t\t\t\t}\n\t\t\t\tif(refguess.s.r > row.r) refguess.s.r = row.r;\n\t\t\t\tif(refguess.s.c > C) refguess.s.c = C;\n\t\t\t\tif(refguess.e.r < row.r) refguess.e.r = row.r;\n\t\t\t\tif(refguess.e.c < C) refguess.e.c = C;\n\t\t\t\tif(opts.cellDates && cf && p.t == 'n' && SSF.is_date(SSF._table[cf.numFmtId])) {\n\t\t\t\t\tvar _d = SSF.parse_date_code(p.v); if(_d) { p.t = 'd'; p.v = new Date(_d.y, _d.m-1,_d.d,_d.H,_d.M,_d.S,_d.u); }\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 0x0001: /* 'BrtCellBlank' */\n\t\t\tcase 0x000C: /* 'BrtShortBlank' */\n\t\t\t\tif(!opts.sheetStubs || pass) break;\n\t\t\t\tp = ({t:'z',v:undefined});\n\t\t\t\tC = val[0].c == -1 ? C + 1 : val[0].c;\n\t\t\t\tif(opts.dense) { if(!s[R]) s[R] = []; s[R][C] = p; }\n\t\t\t\telse s[encode_col(C) + rr] = p;\n\t\t\t\tif(refguess.s.r > row.r) refguess.s.r = row.r;\n\t\t\t\tif(refguess.s.c > C) refguess.s.c = C;\n\t\t\t\tif(refguess.e.r < row.r) refguess.e.r = row.r;\n\t\t\t\tif(refguess.e.c < C) refguess.e.c = C;\n\t\t\t\tbreak;\n\n\t\t\tcase 0x00B0: /* 'BrtMergeCell' */\n\t\t\t\tmerges.push(val); break;\n\n\t\t\tcase 0x01EE: /* 'BrtHLink' */\n\t\t\t\tvar rel = rels['!id'][val.relId];\n\t\t\t\tif(rel) {\n\t\t\t\t\tval.Target = rel.Target;\n\t\t\t\t\tif(val.loc) val.Target += \"#\"+val.loc;\n\t\t\t\t\tval.Rel = rel;\n\t\t\t\t} else if(val.relId == '') {\n\t\t\t\t\tval.Target = \"#\" + val.loc;\n\t\t\t\t}\n\t\t\t\tfor(R=val.rfx.s.r;R<=val.rfx.e.r;++R) for(C=val.rfx.s.c;C<=val.rfx.e.c;++C) {\n\t\t\t\t\tif(opts.dense) {\n\t\t\t\t\t\tif(!s[R]) s[R] = [];\n\t\t\t\t\t\tif(!s[R][C]) s[R][C] = {t:'z',v:undefined};\n\t\t\t\t\t\ts[R][C].l = val;\n\t\t\t\t\t} else {\n\t\t\t\t\t\taddr = encode_cell({c:C,r:R});\n\t\t\t\t\t\tif(!s[addr]) s[addr] = {t:'z',v:undefined};\n\t\t\t\t\t\ts[addr].l = val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 0x01AA: /* 'BrtArrFmla' */\n\t\t\t\tif(!opts.cellFormula) break;\n\t\t\t\tarrayf.push(val);\n\t\t\t\tcell = ((opts.dense ? s[R][C] : s[encode_col(C) + rr]));\n\t\t\t\tcell.f = stringify_formula(val[1], refguess, {r:row.r, c:C}, supbooks, opts);\n\t\t\t\tcell.F = encode_range(val[0]);\n\t\t\t\tbreak;\n\t\t\tcase 0x01AB: /* 'BrtShrFmla' */\n\t\t\t\tif(!opts.cellFormula) break;\n\t\t\t\tsharedf[encode_cell(val[0].s)] = val[1];\n\t\t\t\tcell = (opts.dense ? s[R][C] : s[encode_col(C) + rr]);\n\t\t\t\tcell.f = stringify_formula(val[1], refguess, {r:row.r, c:C}, supbooks, opts);\n\t\t\t\tbreak;\n\n\t\t\t/* identical to 'ColInfo' in XLS */\n\t\t\tcase 0x003C: /* 'BrtColInfo' */\n\t\t\t\tif(!opts.cellStyles) break;\n\t\t\t\twhile(val.e >= val.s) {\n\t\t\t\t\tcolinfo[val.e--] = { width: val.w/256, hidden: !!(val.flags & 0x01), level: val.level };\n\t\t\t\t\tif(!seencol) { seencol = true; find_mdw_colw(val.w/256); }\n\t\t\t\t\tprocess_col(colinfo[val.e+1]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 0x00A1: /* 'BrtBeginAFilter' */\n\t\t\t\ts['!autofilter'] = { ref:encode_range(val) };\n\t\t\t\tbreak;\n\n\t\t\tcase 0x01DC: /* 'BrtMargins' */\n\t\t\t\ts['!margins'] = val;\n\t\t\t\tbreak;\n\n\t\t\tcase 0x0093: /* 'BrtWsProp' */\n\t\t\t\tif(!wb.Sheets[idx]) wb.Sheets[idx] = {};\n\t\t\t\tif(val.name) wb.Sheets[idx].CodeName = val.name;\n\t\t\t\tif(val.above || val.left) s['!outline'] = { above: val.above, left: val.left };\n\t\t\t\tbreak;\n\n\t\t\tcase 0x0089: /* 'BrtBeginWsView' */\n\t\t\t\tif(!wb.Views) wb.Views = [{}];\n\t\t\t\tif(!wb.Views[0]) wb.Views[0] = {};\n\t\t\t\tif(val.RTL) wb.Views[0].RTL = true;\n\t\t\t\tbreak;\n\n\t\t\tcase 0x01E5: /* 'BrtWsFmtInfo' */\n\t\t\t\tbreak;\n\n\t\t\tcase 0x0040: /* 'BrtDVal' */\n\t\t\tcase 0x041D: /* 'BrtDVal14' */\n\t\t\t\tbreak;\n\n\t\t\tcase 0x0097: /* 'BrtPane' */\n\t\t\t\tbreak;\n\t\t\tcase 0x0098: /* 'BrtSel' */\n\t\t\tcase 0x00AF: /* 'BrtAFilterDateGroupItem' */\n\t\t\tcase 0x0284: /* 'BrtActiveX' */\n\t\t\tcase 0x0271: /* 'BrtBigName' */\n\t\t\tcase 0x0232: /* 'BrtBkHim' */\n\t\t\tcase 0x018C: /* 'BrtBrk' */\n\t\t\tcase 0x0458: /* 'BrtCFIcon' */\n\t\t\tcase 0x047A: /* 'BrtCFRuleExt' */\n\t\t\tcase 0x01D7: /* 'BrtCFVO' */\n\t\t\tcase 0x041A: /* 'BrtCFVO14' */\n\t\t\tcase 0x0289: /* 'BrtCellIgnoreEC' */\n\t\t\tcase 0x0451: /* 'BrtCellIgnoreEC14' */\n\t\t\tcase 0x0031: /* 'BrtCellMeta' */\n\t\t\tcase 0x024D: /* 'BrtCellSmartTagProperty' */\n\t\t\tcase 0x025F: /* 'BrtCellWatch' */\n\t\t\tcase 0x0234: /* 'BrtColor' */\n\t\t\tcase 0x041F: /* 'BrtColor14' */\n\t\t\tcase 0x00A8: /* 'BrtColorFilter' */\n\t\t\tcase 0x00AE: /* 'BrtCustomFilter' */\n\t\t\tcase 0x049C: /* 'BrtCustomFilter14' */\n\t\t\tcase 0x01F3: /* 'BrtDRef' */\n\t\t\tcase 0x01FB: /* 'BrtDXF' */\n\t\t\tcase 0x0226: /* 'BrtDrawing' */\n\t\t\tcase 0x00AB: /* 'BrtDynamicFilter' */\n\t\t\tcase 0x00A7: /* 'BrtFilter' */\n\t\t\tcase 0x0499: /* 'BrtFilter14' */\n\t\t\tcase 0x00A9: /* 'BrtIconFilter' */\n\t\t\tcase 0x049D: /* 'BrtIconFilter14' */\n\t\t\tcase 0x0227: /* 'BrtLegacyDrawing' */\n\t\t\tcase 0x0228: /* 'BrtLegacyDrawingHF' */\n\t\t\tcase 0x0295: /* 'BrtListPart' */\n\t\t\tcase 0x027F: /* 'BrtOleObject' */\n\t\t\tcase 0x01DE: /* 'BrtPageSetup' */\n\t\t\tcase 0x0219: /* 'BrtPhoneticInfo' */\n\t\t\tcase 0x01DD: /* 'BrtPrintOptions' */\n\t\t\tcase 0x0218: /* 'BrtRangeProtection' */\n\t\t\tcase 0x044F: /* 'BrtRangeProtection14' */\n\t\t\tcase 0x02A8: /* 'BrtRangeProtectionIso' */\n\t\t\tcase 0x0450: /* 'BrtRangeProtectionIso14' */\n\t\t\tcase 0x0400: /* 'BrtRwDescent' */\n\t\t\tcase 0x0297: /* 'BrtSheetCalcProp' */\n\t\t\tcase 0x0217: /* 'BrtSheetProtection' */\n\t\t\tcase 0x02A6: /* 'BrtSheetProtectionIso' */\n\t\t\tcase 0x01F8: /* 'BrtSlc' */\n\t\t\tcase 0x0413: /* 'BrtSparkline' */\n\t\t\tcase 0x01AC: /* 'BrtTable' */\n\t\t\tcase 0x00AA: /* 'BrtTop10Filter' */\n\t\t\tcase 0x0C00: /* 'BrtUid' */\n\t\t\tcase 0x0032: /* 'BrtValueMeta' */\n\t\t\tcase 0x0816: /* 'BrtWebExtension' */\n\t\t\tcase 0x0415: /* 'BrtWsFmtInfoEx14' */\n\t\t\t\tbreak;\n\n\t\t\tcase 0x0023: /* 'BrtFRTBegin' */\n\t\t\t\tpass = true; break;\n\t\t\tcase 0x0024: /* 'BrtFRTEnd' */\n\t\t\t\tpass = false; break;\n\t\t\tcase 0x0025: /* 'BrtACBegin' */\n\t\t\t\tstate.push(R_n); pass = true; break;\n\t\t\tcase 0x0026: /* 'BrtACEnd' */\n\t\t\t\tstate.pop(); pass = false; break;\n\n\t\t\tdefault:\n\t\t\t\tif((R_n||\"\").indexOf(\"Begin\") > 0){/* empty */}\n\t\t\t\telse if((R_n||\"\").indexOf(\"End\") > 0){/* empty */}\n\t\t\t\telse if(!pass || opts.WTF) throw new Error(\"Unexpected record \" + RT + \" \" + R_n);\n\t\t}\n\t}, opts);\n\n\tdelete opts.supbooks;\n\tdelete opts['!row'];\n\n\tif(!s[\"!ref\"] && (refguess.s.r < 2000000 || ref && (ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0))) s[\"!ref\"] = encode_range(ref || refguess);\n\tif(opts.sheetRows && s[\"!ref\"]) {\n\t\tvar tmpref = safe_decode_range(s[\"!ref\"]);\n\t\tif(opts.sheetRows <= +tmpref.e.r) {\n\t\t\ttmpref.e.r = opts.sheetRows - 1;\n\t\t\tif(tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;\n\t\t\tif(tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;\n\t\t\tif(tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;\n\t\t\tif(tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;\n\t\t\ts[\"!fullref\"] = s[\"!ref\"];\n\t\t\ts[\"!ref\"] = encode_range(tmpref);\n\t\t}\n\t}\n\tif(merges.length > 0) s[\"!merges\"] = merges;\n\tif(colinfo.length > 0) s[\"!cols\"] = colinfo;\n\tif(rowinfo.length > 0) s[\"!rows\"] = rowinfo;\n\treturn s;\n}\n\n/* TODO: something useful -- this is a stub */\nfunction write_ws_bin_cell(ba, cell, R, C, opts, ws, last_seen) {\n\tif(cell.v === undefined) return false;\n\tvar vv = \"\";\n\tswitch(cell.t) {\n\t\tcase 'b': vv = cell.v ? \"1\" : \"0\"; break;\n\t\tcase 'd': // no BrtCellDate :(\n\t\t\tcell = dup(cell);\n\t\t\tcell.z = cell.z || SSF._table[14];\n\t\t\tcell.v = datenum(parseDate(cell.v)); cell.t = 'n';\n\t\t\tbreak;\n\t\t/* falls through */\n\t\tcase 'n': case 'e': vv = ''+cell.v; break;\n\t\tdefault: vv = cell.v; break;\n\t}\n\tvar o = ({r:R, c:C});\n\t/* TODO: cell style */\n\to.s = get_cell_style(opts.cellXfs, cell, opts);\n\tif(cell.l) ws['!links'].push([encode_cell(o), cell.l]);\n\tif(cell.c) ws['!comments'].push([encode_cell(o), cell.c]);\n\tswitch(cell.t) {\n\t\tcase 's': case 'str':\n\t\t\tif(opts.bookSST) {\n\t\t\t\tvv = get_sst_id(opts.Strings, (cell.v), opts.revStrings);\n\t\t\t\to.t = \"s\"; o.v = vv;\n\t\t\t\tif(last_seen) write_record(ba, \"BrtShortIsst\", write_BrtShortIsst(cell, o));\n\t\t\t\telse write_record(ba, \"BrtCellIsst\", write_BrtCellIsst(cell, o));\n\t\t\t} else {\n\t\t\t\to.t = \"str\";\n\t\t\t\tif(last_seen) write_record(ba, \"BrtShortSt\", write_BrtShortSt(cell, o));\n\t\t\t\telse write_record(ba, \"BrtCellSt\", write_BrtCellSt(cell, o));\n\t\t\t}\n\t\t\treturn true;\n\t\tcase 'n':\n\t\t\t/* TODO: determine threshold for Real vs RK */\n\t\t\tif(cell.v == (cell.v | 0) && cell.v > -1000 && cell.v < 1000) {\n\t\t\t\tif(last_seen) write_record(ba, \"BrtShortRk\", write_BrtShortRk(cell, o));\n\t\t\t\telse write_record(ba, \"BrtCellRk\", write_BrtCellRk(cell, o));\n\t\t\t} else {\n\t\t\t\tif(last_seen) write_record(ba, \"BrtShortReal\", write_BrtShortReal(cell, o));\n\t\t\t\telse write_record(ba, \"BrtCellReal\", write_BrtCellReal(cell, o));\n\t\t\t} return true;\n\t\tcase 'b':\n\t\t\to.t = \"b\";\n\t\t\tif(last_seen) write_record(ba, \"BrtShortBool\", write_BrtShortBool(cell, o));\n\t\t\telse write_record(ba, \"BrtCellBool\", write_BrtCellBool(cell, o));\n\t\t\treturn true;\n\t\tcase 'e':\n\t\t\to.t = \"e\";\n\t\t\tif(last_seen) write_record(ba, \"BrtShortError\", write_BrtShortError(cell, o));\n\t\t\telse write_record(ba, \"BrtCellError\", write_BrtCellError(cell, o));\n\t\t\treturn true;\n\t}\n\tif(last_seen) write_record(ba, \"BrtShortBlank\", write_BrtShortBlank(cell, o));\n\telse write_record(ba, \"BrtCellBlank\", write_BrtCellBlank(cell, o));\n\treturn true;\n}\n\nfunction write_CELLTABLE(ba, ws, idx, opts) {\n\tvar range = safe_decode_range(ws['!ref'] || \"A1\"), ref, rr = \"\", cols = [];\n\twrite_record(ba, 'BrtBeginSheetData');\n\tvar dense = Array.isArray(ws);\n\tvar cap = range.e.r;\n\tif(ws['!rows']) cap = Math.max(range.e.r, ws['!rows'].length - 1);\n\tfor(var R = range.s.r; R <= cap; ++R) {\n\t\trr = encode_row(R);\n\t\t/* [ACCELLTABLE] */\n\t\t/* BrtRowHdr */\n\t\twrite_row_header(ba, ws, range, R);\n\t\tvar last_seen = false;\n\t\tif(R <= range.e.r) for(var C = range.s.c; C <= range.e.c; ++C) {\n\t\t\t/* *16384CELL */\n\t\t\tif(R === range.s.r) cols[C] = encode_col(C);\n\t\t\tref = cols[C] + rr;\n\t\t\tvar cell = dense ? (ws[R]||[])[C] : ws[ref];\n\t\t\tif(!cell) { last_seen = false; continue; }\n\t\t\t/* write cell */\n\t\t\tlast_seen = write_ws_bin_cell(ba, cell, R, C, opts, ws, last_seen);\n\t\t}\n\t}\n\twrite_record(ba, 'BrtEndSheetData');\n}\n\nfunction write_MERGECELLS(ba, ws) {\n\tif(!ws || !ws['!merges']) return;\n\twrite_record(ba, 'BrtBeginMergeCells', write_BrtBeginMergeCells(ws['!merges'].length));\n\tws['!merges'].forEach(function(m) { write_record(ba, 'BrtMergeCell', write_BrtMergeCell(m)); });\n\twrite_record(ba, 'BrtEndMergeCells');\n}\n\nfunction write_COLINFOS(ba, ws) {\n\tif(!ws || !ws['!cols']) return;\n\twrite_record(ba, 'BrtBeginColInfos');\n\tws['!cols'].forEach(function(m, i) { if(m) write_record(ba, 'BrtColInfo', write_BrtColInfo(i, m)); });\n\twrite_record(ba, 'BrtEndColInfos');\n}\n\nfunction write_IGNOREECS(ba, ws) {\n\tif(!ws || !ws['!ref']) return;\n\twrite_record(ba, 'BrtBeginCellIgnoreECs');\n\twrite_record(ba, 'BrtCellIgnoreEC', write_BrtCellIgnoreEC(safe_decode_range(ws['!ref'])));\n\twrite_record(ba, 'BrtEndCellIgnoreECs');\n}\n\nfunction write_HLINKS(ba, ws, rels) {\n\t/* *BrtHLink */\n\tws['!links'].forEach(function(l) {\n\t\tif(!l[1].Target) return;\n\t\tvar rId = add_rels(rels, -1, l[1].Target.replace(/#.*$/, \"\"), RELS.HLINK);\n\t\twrite_record(ba, \"BrtHLink\", write_BrtHLink(l, rId));\n\t});\n\tdelete ws['!links'];\n}\nfunction write_LEGACYDRAWING(ba, ws, idx, rels) {\n\t/* [BrtLegacyDrawing] */\n\tif(ws['!comments'].length > 0) {\n\t\tvar rId = add_rels(rels, -1, \"../drawings/vmlDrawing\" + (idx+1) + \".vml\", RELS.VML);\n\t\twrite_record(ba, \"BrtLegacyDrawing\", write_RelID(\"rId\" + rId));\n\t\tws['!legacy'] = rId;\n\t}\n}\n\nfunction write_AUTOFILTER(ba, ws, wb, idx) {\n\tif(!ws['!autofilter']) return;\n\tvar data = ws['!autofilter'];\n\tvar ref = typeof data.ref === \"string\" ? data.ref : encode_range(data.ref);\n\n\t/* Update FilterDatabase defined name for the worksheet */\n\tif(!wb.Workbook) wb.Workbook = ({Sheets:[]});\n\tif(!wb.Workbook.Names) wb.Workbook.Names = [];\n\tvar names = wb.Workbook.Names;\n\tvar range = decode_range(ref);\n\tif(range.s.r == range.e.r) { range.e.r = decode_range(ws[\"!ref\"]).e.r; ref = encode_range(range); }\n\tfor(var i = 0; i < names.length; ++i) {\n\t\tvar name = names[i];\n\t\tif(name.Name != '_xlnm._FilterDatabase') continue;\n\t\tif(name.Sheet != idx) continue;\n\t\tname.Ref = \"'\" + wb.SheetNames[idx] + \"'!\" + ref; break;\n\t}\n\tif(i == names.length) names.push({ Name: '_xlnm._FilterDatabase', Sheet: idx, Ref: \"'\" + wb.SheetNames[idx] + \"'!\" + ref  });\n\n\twrite_record(ba, \"BrtBeginAFilter\", write_UncheckedRfX(safe_decode_range(ref)));\n\t/* *FILTERCOLUMN */\n\t/* [SORTSTATE] */\n\t/* BrtEndAFilter */\n\twrite_record(ba, \"BrtEndAFilter\");\n}\n\nfunction write_WSVIEWS2(ba, ws, Workbook) {\n\twrite_record(ba, \"BrtBeginWsViews\");\n\t{ /* 1*WSVIEW2 */\n\t\t/* [ACUID] */\n\t\twrite_record(ba, \"BrtBeginWsView\", write_BrtBeginWsView(ws, Workbook));\n\t\t/* [BrtPane] */\n\t\t/* *4BrtSel */\n\t\t/* *4SXSELECT */\n\t\t/* *FRT */\n\t\twrite_record(ba, \"BrtEndWsView\");\n\t}\n\t/* *FRT */\n\twrite_record(ba, \"BrtEndWsViews\");\n}\n\nfunction write_WSFMTINFO() {\n\t/* [ACWSFMTINFO] */\n\t//write_record(ba, \"BrtWsFmtInfo\", write_BrtWsFmtInfo(ws));\n}\n\nfunction write_SHEETPROTECT(ba, ws) {\n\tif(!ws['!protect']) return;\n\t/* [BrtSheetProtectionIso] */\n\twrite_record(ba, \"BrtSheetProtection\", write_BrtSheetProtection(ws['!protect']));\n}\n\nfunction write_ws_bin(idx, opts, wb, rels) {\n\tvar ba = buf_array();\n\tvar s = wb.SheetNames[idx], ws = wb.Sheets[s] || {};\n\tvar c = s; try { if(wb && wb.Workbook) c = wb.Workbook.Sheets[idx].CodeName || c; } catch(e) {}\n\tvar r = safe_decode_range(ws['!ref'] || \"A1\");\n\tif(r.e.c > 0x3FFF || r.e.r > 0xFFFFF) {\n\t\tif(opts.WTF) throw new Error(\"Range \" + (ws['!ref'] || \"A1\") + \" exceeds format limit A1:XFD1048576\");\n\t\tr.e.c = Math.min(r.e.c, 0x3FFF);\n\t\tr.e.r = Math.min(r.e.c, 0xFFFFF);\n\t}\n\tws['!links'] = [];\n\t/* passed back to write_zip and removed there */\n\tws['!comments'] = [];\n\twrite_record(ba, \"BrtBeginSheet\");\n\tif(wb.vbaraw || ws['!outline']) write_record(ba, \"BrtWsProp\", write_BrtWsProp(c, ws['!outline']));\n\twrite_record(ba, \"BrtWsDim\", write_BrtWsDim(r));\n\twrite_WSVIEWS2(ba, ws, wb.Workbook);\n\twrite_WSFMTINFO(ba, ws);\n\twrite_COLINFOS(ba, ws, idx, opts, wb);\n\twrite_CELLTABLE(ba, ws, idx, opts, wb);\n\t/* [BrtSheetCalcProp] */\n\twrite_SHEETPROTECT(ba, ws);\n\t/* *([BrtRangeProtectionIso] BrtRangeProtection) */\n\t/* [SCENMAN] */\n\twrite_AUTOFILTER(ba, ws, wb, idx);\n\t/* [SORTSTATE] */\n\t/* [DCON] */\n\t/* [USERSHVIEWS] */\n\twrite_MERGECELLS(ba, ws);\n\t/* [BrtPhoneticInfo] */\n\t/* *CONDITIONALFORMATTING */\n\t/* [DVALS] */\n\twrite_HLINKS(ba, ws, rels);\n\t/* [BrtPrintOptions] */\n\tif(ws['!margins']) write_record(ba, \"BrtMargins\", write_BrtMargins(ws['!margins']));\n\t/* [BrtPageSetup] */\n\t/* [HEADERFOOTER] */\n\t/* [RWBRK] */\n\t/* [COLBRK] */\n\t/* *BrtBigName */\n\t/* [CELLWATCHES] */\n\tif(!opts || opts.ignoreEC || (opts.ignoreEC == (void 0))) write_IGNOREECS(ba, ws);\n\t/* [SMARTTAGS] */\n\t/* [BrtDrawing] */\n\twrite_LEGACYDRAWING(ba, ws, idx, rels);\n\t/* [BrtLegacyDrawingHF] */\n\t/* [BrtBkHim] */\n\t/* [OLEOBJECTS] */\n\t/* [ACTIVEXCONTROLS] */\n\t/* [WEBPUBITEMS] */\n\t/* [LISTPARTS] */\n\t/* FRTWORKSHEET */\n\twrite_record(ba, \"BrtEndSheet\");\n\treturn ba.end();\n}\nRELS.CHART = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart\";\nRELS.CHARTEX = \"http://schemas.microsoft.com/office/2014/relationships/chartEx\";\n\nfunction parse_Cache(data) {\n\tvar col = [];\n\tvar num = data.match(/^<c:numCache>/);\n\tvar f;\n\n\t/* 21.2.2.150 pt CT_NumVal */\n\t(data.match(/<c:pt idx=\"(\\d*)\">(.*?)<\\/c:pt>/mg)||[]).forEach(function(pt) {\n\t\tvar q = pt.match(/<c:pt idx=\"(\\d*?)\"><c:v>(.*)<\\/c:v><\\/c:pt>/);\n\t\tif(!q) return;\n\t\tcol[+q[1]] = num ? +q[2] : q[2];\n\t});\n\n\t/* 21.2.2.71 formatCode CT_Xstring */\n\tvar nf = unescapexml((data.match(/<c:formatCode>([\\s\\S]*?)<\\/c:formatCode>/) || [\"\",\"General\"])[1]);\n\n\t(data.match(/<c:f>(.*?)<\\/c:f>/mg)||[]).forEach(function(F) { f = F.replace(/<.*?>/g,\"\"); });\n\n\treturn [col, nf, f];\n}\n\n/* 21.2 DrawingML - Charts */\nfunction parse_chart(data, name, opts, rels, wb, csheet) {\n\tvar cs = ((csheet || {\"!type\":\"chart\"}));\n\tif(!data) return csheet;\n\t/* 21.2.2.27 chart CT_Chart */\n\n\tvar C = 0, R = 0, col = \"A\";\n\tvar refguess = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };\n\n\t/* 21.2.2.120 numCache CT_NumData */\n\t(data.match(/<c:numCache>[\\s\\S]*?<\\/c:numCache>/gm)||[]).forEach(function(nc) {\n\t\tvar cache = parse_Cache(nc);\n\t\trefguess.s.r = refguess.s.c = 0;\n\t\trefguess.e.c = C;\n\t\tcol = encode_col(C);\n\t\tcache[0].forEach(function(n,i) {\n\t\t\tcs[col + encode_row(i)] = {t:'n', v:n, z:cache[1] };\n\t\t\tR = i;\n\t\t});\n\t\tif(refguess.e.r < R) refguess.e.r = R;\n\t\t++C;\n\t});\n\tif(C > 0) cs[\"!ref\"] = encode_range(refguess);\n\treturn cs;\n}\nRELS.CS = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet\";\n\nvar CS_XML_ROOT = writextag('chartsheet', null, {\n\t'xmlns': XMLNS.main[0],\n\t'xmlns:r': XMLNS.r\n});\n\n/* 18.3 Worksheets also covers Chartsheets */\nfunction parse_cs_xml(data, opts, idx, rels, wb) {\n\tif(!data) return data;\n\t/* 18.3.1.12 chartsheet CT_ChartSheet */\n\tif(!rels) rels = {'!id':{}};\n\tvar s = ({'!type':\"chart\", '!drawel':null, '!rel':\"\"});\n\tvar m;\n\n\t/* 18.3.1.83 sheetPr CT_ChartsheetPr */\n\tvar sheetPr = data.match(sheetprregex);\n\tif(sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);\n\n\t/* 18.3.1.36 drawing CT_Drawing */\n\tif((m = data.match(/drawing r:id=\"(.*?)\"/))) s['!rel'] = m[1];\n\n\tif(rels['!id'][s['!rel']]) s['!drawel'] = rels['!id'][s['!rel']];\n\treturn s;\n}\nfunction write_cs_xml(idx, opts, wb, rels) {\n\tvar o = [XML_HEADER, CS_XML_ROOT];\n\to[o.length] = writextag(\"drawing\", null, {\"r:id\": \"rId1\"});\n\tadd_rels(rels, -1, \"../drawings/drawing\" + (idx+1) + \".xml\", RELS.DRAW);\n\tif(o.length>2) { o[o.length] = ('</chartsheet>'); o[1]=o[1].replace(\"/>\",\">\"); }\n\treturn o.join(\"\");\n}\n\n/* [MS-XLSB] 2.4.331 BrtCsProp */\nfunction parse_BrtCsProp(data, length) {\n\tdata.l += 10;\n\tvar name = parse_XLWideString(data, length - 10);\n\treturn { name: name };\n}\n\n/* [MS-XLSB] 2.1.7.7 Chart Sheet */\nfunction parse_cs_bin(data, opts, idx, rels, wb) {\n\tif(!data) return data;\n\tif(!rels) rels = {'!id':{}};\n\tvar s = {'!type':\"chart\", '!drawel':null, '!rel':\"\"};\n\tvar state = [];\n\tvar pass = false;\n\trecordhopper(data, function cs_parse(val, R_n, RT) {\n\t\tswitch(RT) {\n\n\t\t\tcase 0x0226: /* 'BrtDrawing' */\n\t\t\t\ts['!rel'] = val; break;\n\n\t\t\tcase 0x028B: /* 'BrtCsProp' */\n\t\t\t\tif(!wb.Sheets[idx]) wb.Sheets[idx] = {};\n\t\t\t\tif(val.name) wb.Sheets[idx].CodeName = val.name;\n\t\t\t\tbreak;\n\n\t\t\tcase 0x0232: /* 'BrtBkHim' */\n\t\t\tcase 0x028C: /* 'BrtCsPageSetup' */\n\t\t\tcase 0x029D: /* 'BrtCsProtection' */\n\t\t\tcase 0x02A7: /* 'BrtCsProtectionIso' */\n\t\t\tcase 0x0227: /* 'BrtLegacyDrawing' */\n\t\t\tcase 0x0228: /* 'BrtLegacyDrawingHF' */\n\t\t\tcase 0x01DC: /* 'BrtMargins' */\n\t\t\tcase 0x0C00: /* 'BrtUid' */\n\t\t\t\tbreak;\n\n\t\t\tcase 0x0023: /* 'BrtFRTBegin' */\n\t\t\t\tpass = true; break;\n\t\t\tcase 0x0024: /* 'BrtFRTEnd' */\n\t\t\t\tpass = false; break;\n\t\t\tcase 0x0025: /* 'BrtACBegin' */\n\t\t\t\tstate.push(R_n); break;\n\t\t\tcase 0x0026: /* 'BrtACEnd' */\n\t\t\t\tstate.pop(); break;\n\n\t\t\tdefault:\n\t\t\t\tif((R_n||\"\").indexOf(\"Begin\") > 0) state.push(R_n);\n\t\t\t\telse if((R_n||\"\").indexOf(\"End\") > 0) state.pop();\n\t\t\t\telse if(!pass || opts.WTF) throw new Error(\"Unexpected record \" + RT + \" \" + R_n);\n\t\t}\n\t}, opts);\n\n\tif(rels['!id'][s['!rel']]) s['!drawel'] = rels['!id'][s['!rel']];\n\treturn s;\n}\nfunction write_cs_bin() {\n\tvar ba = buf_array();\n\twrite_record(ba, \"BrtBeginSheet\");\n\t/* [BrtCsProp] */\n\t/* CSVIEWS */\n\t/* [[BrtCsProtectionIso] BrtCsProtection] */\n\t/* [USERCSVIEWS] */\n\t/* [BrtMargins] */\n\t/* [BrtCsPageSetup] */\n\t/* [HEADERFOOTER] */\n\t/* BrtDrawing */\n\t/* [BrtLegacyDrawing] */\n\t/* [BrtLegacyDrawingHF] */\n\t/* [BrtBkHim] */\n\t/* [WEBPUBITEMS] */\n\t/* FRTCHARTSHEET */\n\twrite_record(ba, \"BrtEndSheet\");\n\treturn ba.end();\n}\n/* 18.2.28 (CT_WorkbookProtection) Defaults */\nvar WBPropsDef = [\n\t['allowRefreshQuery',           false, \"bool\"],\n\t['autoCompressPictures',        true,  \"bool\"],\n\t['backupFile',                  false, \"bool\"],\n\t['checkCompatibility',          false, \"bool\"],\n\t['CodeName',                    ''],\n\t['date1904',                    false, \"bool\"],\n\t['defaultThemeVersion',         0,      \"int\"],\n\t['filterPrivacy',               false, \"bool\"],\n\t['hidePivotFieldList',          false, \"bool\"],\n\t['promptedSolutions',           false, \"bool\"],\n\t['publishItems',                false, \"bool\"],\n\t['refreshAllConnections',       false, \"bool\"],\n\t['saveExternalLinkValues',      true,  \"bool\"],\n\t['showBorderUnselectedTables',  true,  \"bool\"],\n\t['showInkAnnotation',           true,  \"bool\"],\n\t['showObjects',                 'all'],\n\t['showPivotChartFilter',        false, \"bool\"],\n\t['updateLinks', 'userSet']\n];\n\n/* 18.2.30 (CT_BookView) Defaults */\nvar WBViewDef = [\n\t['activeTab',                   0,      \"int\"],\n\t['autoFilterDateGrouping',      true,  \"bool\"],\n\t['firstSheet',                  0,      \"int\"],\n\t['minimized',                   false, \"bool\"],\n\t['showHorizontalScroll',        true,  \"bool\"],\n\t['showSheetTabs',               true,  \"bool\"],\n\t['showVerticalScroll',          true,  \"bool\"],\n\t['tabRatio',                    600,    \"int\"],\n\t['visibility',                  'visible']\n\t//window{Height,Width}, {x,y}Window\n];\n\n/* 18.2.19 (CT_Sheet) Defaults */\nvar SheetDef = [\n\t//['state', 'visible']\n];\n\n/* 18.2.2  (CT_CalcPr) Defaults */\nvar CalcPrDef = [\n\t['calcCompleted', 'true'],\n\t['calcMode', 'auto'],\n\t['calcOnSave', 'true'],\n\t['concurrentCalc', 'true'],\n\t['fullCalcOnLoad', 'false'],\n\t['fullPrecision', 'true'],\n\t['iterate', 'false'],\n\t['iterateCount', '100'],\n\t['iterateDelta', '0.001'],\n\t['refMode', 'A1']\n];\n\n/* 18.2.3 (CT_CustomWorkbookView) Defaults */\n/*var CustomWBViewDef = [\n\t['autoUpdate', 'false'],\n\t['changesSavedWin', 'false'],\n\t['includeHiddenRowCol', 'true'],\n\t['includePrintSettings', 'true'],\n\t['maximized', 'false'],\n\t['minimized', 'false'],\n\t['onlySync', 'false'],\n\t['personalView', 'false'],\n\t['showComments', 'commIndicator'],\n\t['showFormulaBar', 'true'],\n\t['showHorizontalScroll', 'true'],\n\t['showObjects', 'all'],\n\t['showSheetTabs', 'true'],\n\t['showStatusbar', 'true'],\n\t['showVerticalScroll', 'true'],\n\t['tabRatio', '600'],\n\t['xWindow', '0'],\n\t['yWindow', '0']\n];*/\n\nfunction push_defaults_array(target, defaults) {\n\tfor(var j = 0; j != target.length; ++j) { var w = target[j];\n\t\tfor(var i=0; i != defaults.length; ++i) { var z = defaults[i];\n\t\t\tif(w[z[0]] == null) w[z[0]] = z[1];\n\t\t\telse switch(z[2]) {\n\t\t\tcase \"bool\": if(typeof w[z[0]] == \"string\") w[z[0]] = parsexmlbool(w[z[0]]); break;\n\t\t\tcase \"int\": if(typeof w[z[0]] == \"string\") w[z[0]] = parseInt(w[z[0]], 10); break;\n\t\t\t}\n\t\t}\n\t}\n}\nfunction push_defaults(target, defaults) {\n\tfor(var i = 0; i != defaults.length; ++i) { var z = defaults[i];\n\t\tif(target[z[0]] == null) target[z[0]] = z[1];\n\t\telse switch(z[2]) {\n\t\t\tcase \"bool\": if(typeof target[z[0]] == \"string\") target[z[0]] = parsexmlbool(target[z[0]]); break;\n\t\t\tcase \"int\": if(typeof target[z[0]] == \"string\") target[z[0]] = parseInt(target[z[0]], 10); break;\n\t\t}\n\t}\n}\n\nfunction parse_wb_defaults(wb) {\n\tpush_defaults(wb.WBProps, WBPropsDef);\n\tpush_defaults(wb.CalcPr, CalcPrDef);\n\n\tpush_defaults_array(wb.WBView, WBViewDef);\n\tpush_defaults_array(wb.Sheets, SheetDef);\n\n\t_ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904);\n}\n\nfunction safe1904(wb) {\n\t/* TODO: store date1904 somewhere else */\n\tif(!wb.Workbook) return \"false\";\n\tif(!wb.Workbook.WBProps) return \"false\";\n\treturn parsexmlbool(wb.Workbook.WBProps.date1904) ? \"true\" : \"false\";\n}\n\nvar badchars = \"][*?\\/\\\\\".split(\"\");\nfunction check_ws_name(n, safe) {\n\tif(n.length > 31) { if(safe) return false; throw new Error(\"Sheet names cannot exceed 31 chars\"); }\n\tvar _good = true;\n\tbadchars.forEach(function(c) {\n\t\tif(n.indexOf(c) == -1) return;\n\t\tif(!safe) throw new Error(\"Sheet name cannot contain : \\\\ / ? * [ ]\");\n\t\t_good = false;\n\t});\n\treturn _good;\n}\nfunction check_wb_names(N, S, codes) {\n\tN.forEach(function(n,i) {\n\t\tcheck_ws_name(n);\n\t\tfor(var j = 0; j < i; ++j) if(n == N[j]) throw new Error(\"Duplicate Sheet Name: \" + n);\n\t\tif(codes) {\n\t\t\tvar cn = (S && S[i] && S[i].CodeName) || n;\n\t\t\tif(cn.charCodeAt(0) == 95 && cn.length > 22) throw new Error(\"Bad Code Name: Worksheet\" + cn);\n\t\t}\n\t});\n}\nfunction check_wb(wb) {\n\tif(!wb || !wb.SheetNames || !wb.Sheets) throw new Error(\"Invalid Workbook\");\n\tif(!wb.SheetNames.length) throw new Error(\"Workbook is empty\");\n\tvar Sheets = (wb.Workbook && wb.Workbook.Sheets) || [];\n\tcheck_wb_names(wb.SheetNames, Sheets, !!wb.vbaraw);\n\tfor(var i = 0; i < wb.SheetNames.length; ++i) check_ws(wb.Sheets[wb.SheetNames[i]], wb.SheetNames[i], i);\n\t/* TODO: validate workbook */\n}\n/* 18.2 Workbook */\nvar wbnsregex = /<\\w+:workbook/;\nfunction parse_wb_xml(data, opts) {\n\tif(!data) throw new Error(\"Could not find file\");\n\tvar wb = { AppVersion:{}, WBProps:{}, WBView:[], Sheets:[], CalcPr:{}, Names:[], xmlns: \"\" };\n\tvar pass = false, xmlns = \"xmlns\";\n\tvar dname = {}, dnstart = 0;\n\tdata.replace(tagregex, function xml_wb(x, idx) {\n\t\tvar y = parsexmltag(x);\n\t\tswitch(strip_ns(y[0])) {\n\t\t\tcase '<?xml': break;\n\n\t\t\t/* 18.2.27 workbook CT_Workbook 1 */\n\t\t\tcase '<workbook':\n\t\t\t\tif(x.match(wbnsregex)) xmlns = \"xmlns\" + x.match(/<(\\w+):/)[1];\n\t\t\t\twb.xmlns = y[xmlns];\n\t\t\t\tbreak;\n\t\t\tcase '</workbook>': break;\n\n\t\t\t/* 18.2.13 fileVersion CT_FileVersion ? */\n\t\t\tcase '<fileVersion': delete y[0]; wb.AppVersion = y; break;\n\t\t\tcase '<fileVersion/>': case '</fileVersion>': break;\n\n\t\t\t/* 18.2.12 fileSharing CT_FileSharing ? */\n\t\t\tcase '<fileSharing':\n\t\t\t\tbreak;\n\t\t\tcase '<fileSharing/>': break;\n\n\t\t\t/* 18.2.28 workbookPr CT_WorkbookPr ? */\n\t\t\tcase '<workbookPr':\n\t\t\tcase '<workbookPr/>':\n\t\t\t\tWBPropsDef.forEach(function(w) {\n\t\t\t\t\tif(y[w[0]] == null) return;\n\t\t\t\t\tswitch(w[2]) {\n\t\t\t\t\t\tcase \"bool\": wb.WBProps[w[0]] = parsexmlbool(y[w[0]]); break;\n\t\t\t\t\t\tcase \"int\": wb.WBProps[w[0]] = parseInt(y[w[0]], 10); break;\n\t\t\t\t\t\tdefault: wb.WBProps[w[0]] = y[w[0]];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif(y.codeName) wb.WBProps.CodeName = utf8read(y.codeName);\n\t\t\t\tbreak;\n\t\t\tcase '</workbookPr>': break;\n\n\t\t\t/* 18.2.29 workbookProtection CT_WorkbookProtection ? */\n\t\t\tcase '<workbookProtection':\n\t\t\t\tbreak;\n\t\t\tcase '<workbookProtection/>': break;\n\n\t\t\t/* 18.2.1  bookViews CT_BookViews ? */\n\t\t\tcase '<bookViews': case '<bookViews>': case '</bookViews>': break;\n\t\t\t/* 18.2.30   workbookView CT_BookView + */\n\t\t\tcase '<workbookView': case '<workbookView/>': delete y[0]; wb.WBView.push(y); break;\n\t\t\tcase '</workbookView>': break;\n\n\t\t\t/* 18.2.20 sheets CT_Sheets 1 */\n\t\t\tcase '<sheets': case '<sheets>': case '</sheets>': break; // aggregate sheet\n\t\t\t/* 18.2.19   sheet CT_Sheet + */\n\t\t\tcase '<sheet':\n\t\t\t\tswitch(y.state) {\n\t\t\t\t\tcase \"hidden\": y.Hidden = 1; break;\n\t\t\t\t\tcase \"veryHidden\": y.Hidden = 2; break;\n\t\t\t\t\tdefault: y.Hidden = 0;\n\t\t\t\t}\n\t\t\t\tdelete y.state;\n\t\t\t\ty.name = unescapexml(utf8read(y.name));\n\t\t\t\tdelete y[0]; wb.Sheets.push(y); break;\n\t\t\tcase '</sheet>': break;\n\n\t\t\t/* 18.2.15 functionGroups CT_FunctionGroups ? */\n\t\t\tcase '<functionGroups': case '<functionGroups/>': break;\n\t\t\t/* 18.2.14   functionGroup CT_FunctionGroup + */\n\t\t\tcase '<functionGroup': break;\n\n\t\t\t/* 18.2.9  externalReferences CT_ExternalReferences ? */\n\t\t\tcase '<externalReferences': case '</externalReferences>': case '<externalReferences>': break;\n\t\t\t/* 18.2.8    externalReference CT_ExternalReference + */\n\t\t\tcase '<externalReference': break;\n\n\t\t\t/* 18.2.6  definedNames CT_DefinedNames ? */\n\t\t\tcase '<definedNames/>': break;\n\t\t\tcase '<definedNames>': case '<definedNames': pass=true; break;\n\t\t\tcase '</definedNames>': pass=false; break;\n\t\t\t/* 18.2.5    definedName CT_DefinedName + */\n\t\t\tcase '<definedName': {\n\t\t\t\tdname = {};\n\t\t\t\tdname.Name = utf8read(y.name);\n\t\t\t\tif(y.comment) dname.Comment = y.comment;\n\t\t\t\tif(y.localSheetId) dname.Sheet = +y.localSheetId;\n\t\t\t\tif(parsexmlbool(y.hidden||\"0\")) dname.Hidden = true;\n\t\t\t\tdnstart = idx + x.length;\n\t\t\t}\tbreak;\n\t\t\tcase '</definedName>': {\n\t\t\t\tdname.Ref = unescapexml(utf8read(data.slice(dnstart, idx)));\n\t\t\t\twb.Names.push(dname);\n\t\t\t} break;\n\t\t\tcase '<definedName/>': break;\n\n\t\t\t/* 18.2.2  calcPr CT_CalcPr ? */\n\t\t\tcase '<calcPr': delete y[0]; wb.CalcPr = y; break;\n\t\t\tcase '<calcPr/>': delete y[0]; wb.CalcPr = y; break;\n\t\t\tcase '</calcPr>': break;\n\n\t\t\t/* 18.2.16 oleSize CT_OleSize ? (ref required) */\n\t\t\tcase '<oleSize': break;\n\n\t\t\t/* 18.2.4  customWorkbookViews CT_CustomWorkbookViews ? */\n\t\t\tcase '<customWorkbookViews>': case '</customWorkbookViews>': case '<customWorkbookViews': break;\n\t\t\t/* 18.2.3  customWorkbookView CT_CustomWorkbookView + */\n\t\t\tcase '<customWorkbookView': case '</customWorkbookView>': break;\n\n\t\t\t/* 18.2.18 pivotCaches CT_PivotCaches ? */\n\t\t\tcase '<pivotCaches>': case '</pivotCaches>': case '<pivotCaches': break;\n\t\t\t/* 18.2.17 pivotCache CT_PivotCache ? */\n\t\t\tcase '<pivotCache': break;\n\n\t\t\t/* 18.2.21 smartTagPr CT_SmartTagPr ? */\n\t\t\tcase '<smartTagPr': case '<smartTagPr/>': break;\n\n\t\t\t/* 18.2.23 smartTagTypes CT_SmartTagTypes ? */\n\t\t\tcase '<smartTagTypes': case '<smartTagTypes>': case '</smartTagTypes>': break;\n\t\t\t/* 18.2.22 smartTagType CT_SmartTagType ? */\n\t\t\tcase '<smartTagType': break;\n\n\t\t\t/* 18.2.24 webPublishing CT_WebPublishing ? */\n\t\t\tcase '<webPublishing': case '<webPublishing/>': break;\n\n\t\t\t/* 18.2.11 fileRecoveryPr CT_FileRecoveryPr ? */\n\t\t\tcase '<fileRecoveryPr': case '<fileRecoveryPr/>': break;\n\n\t\t\t/* 18.2.26 webPublishObjects CT_WebPublishObjects ? */\n\t\t\tcase '<webPublishObjects>': case '<webPublishObjects': case '</webPublishObjects>': break;\n\t\t\t/* 18.2.25 webPublishObject CT_WebPublishObject ? */\n\t\t\tcase '<webPublishObject': break;\n\n\t\t\t/* 18.2.10 extLst CT_ExtensionList ? */\n\t\t\tcase '<extLst': case '<extLst>': case '</extLst>': case '<extLst/>': break;\n\t\t\t/* 18.2.7  ext CT_Extension + */\n\t\t\tcase '<ext': pass=true; break; //TODO: check with versions of excel\n\t\t\tcase '</ext>': pass=false; break;\n\n\t\t\t/* Others */\n\t\t\tcase '<ArchID': break;\n\t\t\tcase '<AlternateContent':\n\t\t\tcase '<AlternateContent>': pass=true; break;\n\t\t\tcase '</AlternateContent>': pass=false; break;\n\n\t\t\t/* TODO */\n\t\t\tcase '<revisionPtr': break;\n\n\t\t\tdefault: if(!pass && opts.WTF) throw new Error('unrecognized ' + y[0] + ' in workbook');\n\t\t}\n\t\treturn x;\n\t});\n\tif(XMLNS.main.indexOf(wb.xmlns) === -1) throw new Error(\"Unknown Namespace: \" + wb.xmlns);\n\n\tparse_wb_defaults(wb);\n\n\treturn wb;\n}\n\nvar WB_XML_ROOT = writextag('workbook', null, {\n\t'xmlns': XMLNS.main[0],\n\t//'xmlns:mx': XMLNS.mx,\n\t//'xmlns:s': XMLNS.main[0],\n\t'xmlns:r': XMLNS.r\n});\n\nfunction write_wb_xml(wb) {\n\tvar o = [XML_HEADER];\n\to[o.length] = WB_XML_ROOT;\n\n\tvar write_names = (wb.Workbook && (wb.Workbook.Names||[]).length > 0);\n\n\t/* fileVersion */\n\t/* fileSharing */\n\n\tvar workbookPr = ({codeName:\"ThisWorkbook\"});\n\tif(wb.Workbook && wb.Workbook.WBProps) {\n\t\tWBPropsDef.forEach(function(x) {\nif((wb.Workbook.WBProps[x[0]]) == null) return;\n\t\t\tif((wb.Workbook.WBProps[x[0]]) == x[1]) return;\n\t\t\tworkbookPr[x[0]] = (wb.Workbook.WBProps[x[0]]);\n\t\t});\nif(wb.Workbook.WBProps.CodeName) { workbookPr.codeName = wb.Workbook.WBProps.CodeName; delete workbookPr.CodeName; }\n\t}\n\to[o.length] = (writextag('workbookPr', null, workbookPr));\n\n\t/* workbookProtection */\n\n\tvar sheets = wb.Workbook && wb.Workbook.Sheets || [];\n\tvar i = 0;\n\n\t/* bookViews only written if first worksheet is hidden */\n\tif(sheets && sheets[0] && !!sheets[0].Hidden) {\n\t\to[o.length] = \"<bookViews>\";\n\t\tfor(i = 0; i != wb.SheetNames.length; ++i) {\n\t\t\tif(!sheets[i]) break;\n\t\t\tif(!sheets[i].Hidden) break;\n\t\t}\n\t\tif(i == wb.SheetNames.length) i = 0;\n\t\to[o.length] = '<workbookView firstSheet=\"' + i + '\" activeTab=\"' + i + '\"/>';\n\t\to[o.length] = \"</bookViews>\";\n\t}\n\n\to[o.length] = \"<sheets>\";\n\tfor(i = 0; i != wb.SheetNames.length; ++i) {\n\t\tvar sht = ({name:escapexml(wb.SheetNames[i].slice(0,31))});\n\t\tsht.sheetId = \"\"+(i+1);\n\t\tsht[\"r:id\"] = \"rId\"+(i+1);\n\t\tif(sheets[i]) switch(sheets[i].Hidden) {\n\t\t\tcase 1: sht.state = \"hidden\"; break;\n\t\t\tcase 2: sht.state = \"veryHidden\"; break;\n\t\t}\n\t\to[o.length] = (writextag('sheet',null,sht));\n\t}\n\to[o.length] = \"</sheets>\";\n\n\t/* functionGroups */\n\t/* externalReferences */\n\n\tif(write_names) {\n\t\to[o.length] = \"<definedNames>\";\n\t\tif(wb.Workbook && wb.Workbook.Names) wb.Workbook.Names.forEach(function(n) {\n\t\t\tvar d = {name:n.Name};\n\t\t\tif(n.Comment) d.comment = n.Comment;\n\t\t\tif(n.Sheet != null) d.localSheetId = \"\"+n.Sheet;\n\t\t\tif(n.Hidden) d.hidden = \"1\";\n\t\t\tif(!n.Ref) return;\n\t\t\to[o.length] = writextag('definedName', escapexml(n.Ref), d);\n\t\t});\n\t\to[o.length] = \"</definedNames>\";\n\t}\n\n\t/* calcPr */\n\t/* oleSize */\n\t/* customWorkbookViews */\n\t/* pivotCaches */\n\t/* smartTagPr */\n\t/* smartTagTypes */\n\t/* webPublishing */\n\t/* fileRecoveryPr */\n\t/* webPublishObjects */\n\t/* extLst */\n\n\tif(o.length>2){ o[o.length] = '</workbook>'; o[1]=o[1].replace(\"/>\",\">\"); }\n\treturn o.join(\"\");\n}\n/* [MS-XLSB] 2.4.304 BrtBundleSh */\nfunction parse_BrtBundleSh(data, length) {\n\tvar z = {};\n\tz.Hidden = data.read_shift(4); //hsState ST_SheetState\n\tz.iTabID = data.read_shift(4);\n\tz.strRelID = parse_RelID(data,length-8);\n\tz.name = parse_XLWideString(data);\n\treturn z;\n}\nfunction write_BrtBundleSh(data, o) {\n\tif(!o) o = new_buf(127);\n\to.write_shift(4, data.Hidden);\n\to.write_shift(4, data.iTabID);\n\twrite_RelID(data.strRelID, o);\n\twrite_XLWideString(data.name.slice(0,31), o);\n\treturn o.length > o.l ? o.slice(0, o.l) : o;\n}\n\n/* [MS-XLSB] 2.4.815 BrtWbProp */\nfunction parse_BrtWbProp(data, length) {\n\tvar o = ({});\n\tvar flags = data.read_shift(4);\n\to.defaultThemeVersion = data.read_shift(4);\n\tvar strName = (length > 8) ? parse_XLWideString(data) : \"\";\n\tif(strName.length > 0) o.CodeName = strName;\n\to.autoCompressPictures = !!(flags & 0x10000);\n\to.backupFile = !!(flags & 0x40);\n\to.checkCompatibility = !!(flags & 0x1000);\n\to.date1904 = !!(flags & 0x01);\n\to.filterPrivacy = !!(flags & 0x08);\n\to.hidePivotFieldList = !!(flags & 0x400);\n\to.promptedSolutions = !!(flags & 0x10);\n\to.publishItems = !!(flags & 0x800);\n\to.refreshAllConnections = !!(flags & 0x40000);\n\to.saveExternalLinkValues = !!(flags & 0x80);\n\to.showBorderUnselectedTables = !!(flags & 0x04);\n\to.showInkAnnotation = !!(flags & 0x20);\n\to.showObjects = [\"all\", \"placeholders\", \"none\"][(flags >> 13) & 0x03];\n\to.showPivotChartFilter = !!(flags & 0x8000);\n\to.updateLinks = [\"userSet\", \"never\", \"always\"][(flags >> 8) & 0x03];\n\treturn o;\n}\nfunction write_BrtWbProp(data, o) {\n\tif(!o) o = new_buf(72);\n\tvar flags = 0;\n\tif(data) {\n\t\t/* TODO: mirror parse_BrtWbProp fields */\n\t\tif(data.filterPrivacy) flags |= 0x08;\n\t}\n\to.write_shift(4, flags);\n\to.write_shift(4, 0);\n\twrite_XLSBCodeName(data && data.CodeName || \"ThisWorkbook\", o);\n\treturn o.slice(0, o.l);\n}\n\nfunction parse_BrtFRTArchID$(data, length) {\n\tvar o = {};\n\tdata.read_shift(4);\n\to.ArchID = data.read_shift(4);\n\tdata.l += length - 8;\n\treturn o;\n}\n\n/* [MS-XLSB] 2.4.687 BrtName */\nfunction parse_BrtName(data, length, opts) {\n\tvar end = data.l + length;\n\tdata.l += 4; //var flags = data.read_shift(4);\n\tdata.l += 1; //var chKey = data.read_shift(1);\n\tvar itab = data.read_shift(4);\n\tvar name = parse_XLNameWideString(data);\n\tvar formula = parse_XLSBNameParsedFormula(data, 0, opts);\n\tvar comment = parse_XLNullableWideString(data);\n\t//if(0 /* fProc */) {\n\t\t// unusedstring1: XLNullableWideString\n\t\t// description: XLNullableWideString\n\t\t// helpTopic: XLNullableWideString\n\t\t// unusedstring2: XLNullableWideString\n\t//}\n\tdata.l = end;\n\tvar out = ({Name:name, Ptg:formula});\n\tif(itab < 0xFFFFFFF) out.Sheet = itab;\n\tif(comment) out.Comment = comment;\n\treturn out;\n}\n\n/* [MS-XLSB] 2.1.7.61 Workbook */\nfunction parse_wb_bin(data, opts) {\n\tvar wb = { AppVersion:{}, WBProps:{}, WBView:[], Sheets:[], CalcPr:{}, xmlns: \"\" };\n\tvar state = [];\n\tvar pass = false;\n\n\tif(!opts) opts = {};\n\topts.biff = 12;\n\n\tvar Names = [];\n\tvar supbooks = ([[]]);\n\tsupbooks.SheetNames = [];\n\tsupbooks.XTI = [];\n\n\tXLSBRecordEnum[0x0010] = { n:\"BrtFRTArchID$\", f:parse_BrtFRTArchID$ };\n\n\trecordhopper(data, function hopper_wb(val, R_n, RT) {\n\t\tswitch(RT) {\n\t\t\tcase 0x009C: /* 'BrtBundleSh' */\n\t\t\t\tsupbooks.SheetNames.push(val.name);\n\t\t\t\twb.Sheets.push(val); break;\n\n\t\t\tcase 0x0099: /* 'BrtWbProp' */\n\t\t\t\twb.WBProps = val; break;\n\n\t\t\tcase 0x0027: /* 'BrtName' */\n\t\t\t\tif(val.Sheet != null) opts.SID = val.Sheet;\n\t\t\t\tval.Ref = stringify_formula(val.Ptg, null, null, supbooks, opts);\n\t\t\t\tdelete opts.SID;\n\t\t\t\tdelete val.Ptg;\n\t\t\t\tNames.push(val);\n\t\t\t\tbreak;\n\t\t\tcase 0x040C: /* 'BrtNameExt' */ break;\n\n\t\t\tcase 0x0165: /* 'BrtSupSelf' */\n\t\t\tcase 0x0166: /* 'BrtSupSame' */\n\t\t\tcase 0x0163: /* 'BrtSupBookSrc' */\n\t\t\tcase 0x029B: /* 'BrtSupAddin' */\n\t\t\t\tif(!supbooks[0].length) supbooks[0] = [RT, val];\n\t\t\t\telse supbooks.push([RT, val]);\n\t\t\t\tsupbooks[supbooks.length - 1].XTI = [];\n\t\t\t\tbreak;\n\t\t\tcase 0x016A: /* 'BrtExternSheet' */\n\t\t\t\tif(supbooks.length === 0) { supbooks[0] = []; supbooks[0].XTI = []; }\n\t\t\t\tsupbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);\n\t\t\t\tsupbooks.XTI = supbooks.XTI.concat(val);\n\t\t\t\tbreak;\n\t\t\tcase 0x0169: /* 'BrtPlaceholderName' */\n\t\t\t\tbreak;\n\n\t\t\tcase 0x0817: /* 'BrtAbsPath15' */\n\t\t\tcase 0x009E: /* 'BrtBookView' */\n\t\t\tcase 0x008F: /* 'BrtBeginBundleShs' */\n\t\t\tcase 0x0298: /* 'BrtBeginFnGroup' */\n\t\t\tcase 0x0161: /* 'BrtBeginExternals' */\n\t\t\t\tbreak;\n\n\t\t\t/* case 'BrtModelTimeGroupingCalcCol' */\n\t\t\tcase 0x0C00: /* 'BrtUid' */\n\t\t\tcase 0x0C01: /* 'BrtRevisionPtr' */\n\t\t\tcase 0x0216: /* 'BrtBookProtection' */\n\t\t\tcase 0x02A5: /* 'BrtBookProtectionIso' */\n\t\t\tcase 0x009D: /* 'BrtCalcProp' */\n\t\t\tcase 0x0262: /* 'BrtCrashRecErr' */\n\t\t\tcase 0x0802: /* 'BrtDecoupledPivotCacheID' */\n\t\t\tcase 0x009B: /* 'BrtFileRecover' */\n\t\t\tcase 0x0224: /* 'BrtFileSharing' */\n\t\t\tcase 0x02A4: /* 'BrtFileSharingIso' */\n\t\t\tcase 0x0080: /* 'BrtFileVersion' */\n\t\t\tcase 0x0299: /* 'BrtFnGroup' */\n\t\t\tcase 0x0850: /* 'BrtModelRelationship' */\n\t\t\tcase 0x084D: /* 'BrtModelTable' */\n\t\t\tcase 0x0225: /* 'BrtOleSize' */\n\t\t\tcase 0x0805: /* 'BrtPivotTableRef' */\n\t\t\tcase 0x0254: /* 'BrtSmartTagType' */\n\t\t\tcase 0x081C: /* 'BrtTableSlicerCacheID' */\n\t\t\tcase 0x081B: /* 'BrtTableSlicerCacheIDs' */\n\t\t\tcase 0x0822: /* 'BrtTimelineCachePivotCacheID' */\n\t\t\tcase 0x018D: /* 'BrtUserBookView' */\n\t\t\tcase 0x009A: /* 'BrtWbFactoid' */\n\t\t\tcase 0x045D: /* 'BrtWbProp14' */\n\t\t\tcase 0x0229: /* 'BrtWebOpt' */\n\t\t\tcase 0x082B: /* 'BrtWorkBookPr15' */\n\t\t\t\tbreak;\n\n\t\t\tcase 0x0023: /* 'BrtFRTBegin' */\n\t\t\t\tstate.push(R_n); pass = true; break;\n\t\t\tcase 0x0024: /* 'BrtFRTEnd' */\n\t\t\t\tstate.pop(); pass = false; break;\n\t\t\tcase 0x0025: /* 'BrtACBegin' */\n\t\t\t\tstate.push(R_n); pass = true; break;\n\t\t\tcase 0x0026: /* 'BrtACEnd' */\n\t\t\t\tstate.pop(); pass = false; break;\n\n\t\t\tcase 0x0010: /* 'BrtFRTArchID$' */ break;\n\n\t\t\tdefault:\n\t\t\t\tif((R_n||\"\").indexOf(\"Begin\") > 0){/* empty */}\n\t\t\t\telse if((R_n||\"\").indexOf(\"End\") > 0){/* empty */}\n\t\t\t\telse if(!pass || (opts.WTF && state[state.length-1] != \"BrtACBegin\" && state[state.length-1] != \"BrtFRTBegin\")) throw new Error(\"Unexpected record \" + RT + \" \" + R_n);\n\t\t}\n\t}, opts);\n\n\tparse_wb_defaults(wb);\n\n\t// $FlowIgnore\n\twb.Names = Names;\n\n\t(wb).supbooks = supbooks;\n\treturn wb;\n}\n\nfunction write_BUNDLESHS(ba, wb) {\n\twrite_record(ba, \"BrtBeginBundleShs\");\n\tfor(var idx = 0; idx != wb.SheetNames.length; ++idx) {\n\t\tvar viz = wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx] && wb.Workbook.Sheets[idx].Hidden || 0;\n\t\tvar d = { Hidden: viz, iTabID: idx+1, strRelID: 'rId' + (idx+1), name: wb.SheetNames[idx] };\n\t\twrite_record(ba, \"BrtBundleSh\", write_BrtBundleSh(d));\n\t}\n\twrite_record(ba, \"BrtEndBundleShs\");\n}\n\n/* [MS-XLSB] 2.4.649 BrtFileVersion */\nfunction write_BrtFileVersion(data, o) {\n\tif(!o) o = new_buf(127);\n\tfor(var i = 0; i != 4; ++i) o.write_shift(4, 0);\n\twrite_XLWideString(\"SheetJS\", o);\n\twrite_XLWideString(XLSX.version, o);\n\twrite_XLWideString(XLSX.version, o);\n\twrite_XLWideString(\"7262\", o);\n\treturn o.length > o.l ? o.slice(0, o.l) : o;\n}\n\n/* [MS-XLSB] 2.4.301 BrtBookView */\nfunction write_BrtBookView(idx, o) {\n\tif(!o) o = new_buf(29);\n\to.write_shift(-4, 0);\n\to.write_shift(-4, 460);\n\to.write_shift(4,  28800);\n\to.write_shift(4,  17600);\n\to.write_shift(4,  500);\n\to.write_shift(4,  idx);\n\to.write_shift(4,  idx);\n\tvar flags = 0x78;\n\to.write_shift(1,  flags);\n\treturn o.length > o.l ? o.slice(0, o.l) : o;\n}\n\nfunction write_BOOKVIEWS(ba, wb) {\n\t/* required if hidden tab appears before visible tab */\n\tif(!wb.Workbook || !wb.Workbook.Sheets) return;\n\tvar sheets = wb.Workbook.Sheets;\n\tvar i = 0, vistab = -1, hidden = -1;\n\tfor(; i < sheets.length; ++i) {\n\t\tif(!sheets[i] || !sheets[i].Hidden && vistab == -1) vistab = i;\n\t\telse if(sheets[i].Hidden == 1 && hidden == -1) hidden = i;\n\t}\n\tif(hidden > vistab) return;\n\twrite_record(ba, \"BrtBeginBookViews\");\n\twrite_record(ba, \"BrtBookView\", write_BrtBookView(vistab));\n\t/* 1*(BrtBookView *FRT) */\n\twrite_record(ba, \"BrtEndBookViews\");\n}\n\n/* [MS-XLSB] 2.4.305 BrtCalcProp */\n/*function write_BrtCalcProp(data, o) {\n\tif(!o) o = new_buf(26);\n\to.write_shift(4,0); // force recalc\n\to.write_shift(4,1);\n\to.write_shift(4,0);\n\twrite_Xnum(0, o);\n\to.write_shift(-4, 1023);\n\to.write_shift(1, 0x33);\n\to.write_shift(1, 0x00);\n\treturn o;\n}*/\n\n/* [MS-XLSB] 2.4.646 BrtFileRecover */\n/*function write_BrtFileRecover(data, o) {\n\tif(!o) o = new_buf(1);\n\to.write_shift(1,0);\n\treturn o;\n}*/\n\n/* [MS-XLSB] 2.1.7.61 Workbook */\nfunction write_wb_bin(wb, opts) {\n\tvar ba = buf_array();\n\twrite_record(ba, \"BrtBeginBook\");\n\twrite_record(ba, \"BrtFileVersion\", write_BrtFileVersion());\n\t/* [[BrtFileSharingIso] BrtFileSharing] */\n\twrite_record(ba, \"BrtWbProp\", write_BrtWbProp(wb.Workbook && wb.Workbook.WBProps || null));\n\t/* [ACABSPATH] */\n\t/* [[BrtBookProtectionIso] BrtBookProtection] */\n\twrite_BOOKVIEWS(ba, wb, opts);\n\twrite_BUNDLESHS(ba, wb, opts);\n\t/* [FNGROUP] */\n\t/* [EXTERNALS] */\n\t/* *BrtName */\n\t/* write_record(ba, \"BrtCalcProp\", write_BrtCalcProp()); */\n\t/* [BrtOleSize] */\n\t/* *(BrtUserBookView *FRT) */\n\t/* [PIVOTCACHEIDS] */\n\t/* [BrtWbFactoid] */\n\t/* [SMARTTAGTYPES] */\n\t/* [BrtWebOpt] */\n\t/* write_record(ba, \"BrtFileRecover\", write_BrtFileRecover()); */\n\t/* [WEBPUBITEMS] */\n\t/* [CRERRS] */\n\t/* FRTWORKBOOK */\n\twrite_record(ba, \"BrtEndBook\");\n\n\treturn ba.end();\n}\nfunction parse_wb(data, name, opts) {\n\tif(name.slice(-4)===\".bin\") return parse_wb_bin((data), opts);\n\treturn parse_wb_xml((data), opts);\n}\n\nfunction parse_ws(data, name, idx, opts, rels, wb, themes, styles) {\n\tif(name.slice(-4)===\".bin\") return parse_ws_bin((data), opts, idx, rels, wb, themes, styles);\n\treturn parse_ws_xml((data), opts, idx, rels, wb, themes, styles);\n}\n\nfunction parse_cs(data, name, idx, opts, rels, wb, themes, styles) {\n\tif(name.slice(-4)===\".bin\") return parse_cs_bin((data), opts, idx, rels, wb, themes, styles);\n\treturn parse_cs_xml((data), opts, idx, rels, wb, themes, styles);\n}\n\nfunction parse_ms(data, name, idx, opts, rels, wb, themes, styles) {\n\tif(name.slice(-4)===\".bin\") return parse_ms_bin((data), opts, idx, rels, wb, themes, styles);\n\treturn parse_ms_xml((data), opts, idx, rels, wb, themes, styles);\n}\n\nfunction parse_ds(data, name, idx, opts, rels, wb, themes, styles) {\n\tif(name.slice(-4)===\".bin\") return parse_ds_bin((data), opts, idx, rels, wb, themes, styles);\n\treturn parse_ds_xml((data), opts, idx, rels, wb, themes, styles);\n}\n\nfunction parse_sty(data, name, themes, opts) {\n\tif(name.slice(-4)===\".bin\") return parse_sty_bin((data), themes, opts);\n\treturn parse_sty_xml((data), themes, opts);\n}\n\nfunction parse_theme(data, name, opts) {\n\treturn parse_theme_xml(data, opts);\n}\n\nfunction parse_sst(data, name, opts) {\n\tif(name.slice(-4)===\".bin\") return parse_sst_bin((data), opts);\n\treturn parse_sst_xml((data), opts);\n}\n\nfunction parse_cmnt(data, name, opts) {\n\tif(name.slice(-4)===\".bin\") return parse_comments_bin((data), opts);\n\treturn parse_comments_xml((data), opts);\n}\n\nfunction parse_cc(data, name, opts) {\n\tif(name.slice(-4)===\".bin\") return parse_cc_bin((data), name, opts);\n\treturn parse_cc_xml((data), name, opts);\n}\n\nfunction parse_xlink(data, rel, name, opts) {\n\tif(name.slice(-4)===\".bin\") return parse_xlink_bin((data), rel, name, opts);\n\treturn parse_xlink_xml((data), rel, name, opts);\n}\n\nfunction write_wb(wb, name, opts) {\n\treturn (name.slice(-4)===\".bin\" ? write_wb_bin : write_wb_xml)(wb, opts);\n}\n\nfunction write_ws(data, name, opts, wb, rels) {\n\treturn (name.slice(-4)===\".bin\" ? write_ws_bin : write_ws_xml)(data, opts, wb, rels);\n}\n\n// eslint-disable-next-line no-unused-vars\nfunction write_cs(data, name, opts, wb, rels) {\n\treturn (name.slice(-4)===\".bin\" ? write_cs_bin : write_cs_xml)(data, opts, wb, rels);\n}\n\nfunction write_sty(data, name, opts) {\n\treturn (name.slice(-4)===\".bin\" ? write_sty_bin : write_sty_xml)(data, opts);\n}\n\nfunction write_sst(data, name, opts) {\n\treturn (name.slice(-4)===\".bin\" ? write_sst_bin : write_sst_xml)(data, opts);\n}\n\nfunction write_cmnt(data, name, opts) {\n\treturn (name.slice(-4)===\".bin\" ? write_comments_bin : write_comments_xml)(data, opts);\n}\n/*\nfunction write_cc(data, name:string, opts) {\n\treturn (name.slice(-4)===\".bin\" ? write_cc_bin : write_cc_xml)(data, opts);\n}\n*/\nvar attregexg2=/([\\w:]+)=((?:\")([^\"]*)(?:\")|(?:')([^']*)(?:'))/g;\nvar attregex2=/([\\w:]+)=((?:\")(?:[^\"]*)(?:\")|(?:')(?:[^']*)(?:'))/;\nfunction xlml_parsexmltag(tag, skip_root) {\n\tvar words = tag.split(/\\s+/);\n\tvar z = ([]); if(!skip_root) z[0] = words[0];\n\tif(words.length === 1) return z;\n\tvar m = tag.match(attregexg2), y, j, w, i;\n\tif(m) for(i = 0; i != m.length; ++i) {\n\t\ty = m[i].match(attregex2);\nif((j=y[1].indexOf(\":\")) === -1) z[y[1]] = y[2].slice(1,y[2].length-1);\n\t\telse {\n\t\t\tif(y[1].slice(0,6) === \"xmlns:\") w = \"xmlns\"+y[1].slice(6);\n\t\t\telse w = y[1].slice(j+1);\n\t\t\tz[w] = y[2].slice(1,y[2].length-1);\n\t\t}\n\t}\n\treturn z;\n}\nfunction xlml_parsexmltagobj(tag) {\n\tvar words = tag.split(/\\s+/);\n\tvar z = {};\n\tif(words.length === 1) return z;\n\tvar m = tag.match(attregexg2), y, j, w, i;\n\tif(m) for(i = 0; i != m.length; ++i) {\n\t\ty = m[i].match(attregex2);\nif((j=y[1].indexOf(\":\")) === -1) z[y[1]] = y[2].slice(1,y[2].length-1);\n\t\telse {\n\t\t\tif(y[1].slice(0,6) === \"xmlns:\") w = \"xmlns\"+y[1].slice(6);\n\t\t\telse w = y[1].slice(j+1);\n\t\t\tz[w] = y[2].slice(1,y[2].length-1);\n\t\t}\n\t}\n\treturn z;\n}\n\n// ----\n\nfunction xlml_format(format, value) {\n\tvar fmt = XLMLFormatMap[format] || unescapexml(format);\n\tif(fmt === \"General\") return SSF._general(value);\n\treturn SSF.format(fmt, value);\n}\n\nfunction xlml_set_custprop(Custprops, key, cp, val) {\n\tvar oval = val;\n\tswitch((cp[0].match(/dt:dt=\"([\\w.]+)\"/)||[\"\",\"\"])[1]) {\n\t\tcase \"boolean\": oval = parsexmlbool(val); break;\n\t\tcase \"i2\": case \"int\": oval = parseInt(val, 10); break;\n\t\tcase \"r4\": case \"float\": oval = parseFloat(val); break;\n\t\tcase \"date\": case \"dateTime.tz\": oval = parseDate(val); break;\n\t\tcase \"i8\": case \"string\": case \"fixed\": case \"uuid\": case \"bin.base64\": break;\n\t\tdefault: throw new Error(\"bad custprop:\" + cp[0]);\n\t}\n\tCustprops[unescapexml(key)] = oval;\n}\n\nfunction safe_format_xlml(cell, nf, o) {\n\tif(cell.t === 'z') return;\n\tif(!o || o.cellText !== false) try {\n\t\tif(cell.t === 'e') { cell.w = cell.w || BErr[cell.v]; }\n\t\telse if(nf === \"General\") {\n\t\t\tif(cell.t === 'n') {\n\t\t\t\tif((cell.v|0) === cell.v) cell.w = SSF._general_int(cell.v);\n\t\t\t\telse cell.w = SSF._general_num(cell.v);\n\t\t\t}\n\t\t\telse cell.w = SSF._general(cell.v);\n\t\t}\n\t\telse cell.w = xlml_format(nf||\"General\", cell.v);\n\t} catch(e) { if(o.WTF) throw e; }\n\ttry {\n\t\tvar z = XLMLFormatMap[nf]||nf||\"General\";\n\t\tif(o.cellNF) cell.z = z;\n\t\tif(o.cellDates && cell.t == 'n' && SSF.is_date(z)) {\n\t\t\tvar _d = SSF.parse_date_code(cell.v); if(_d) { cell.t = 'd'; cell.v = new Date(_d.y, _d.m-1,_d.d,_d.H,_d.M,_d.S,_d.u); }\n\t\t}\n\t} catch(e) { if(o.WTF) throw e; }\n}\n\nfunction process_style_xlml(styles, stag, opts) {\n\tif(opts.cellStyles) {\n\t\tif(stag.Interior) {\n\t\t\tvar I = stag.Interior;\n\t\t\tif(I.Pattern) I.patternType = XLMLPatternTypeMap[I.Pattern] || I.Pattern;\n\t\t}\n\t}\n\tstyles[stag.ID] = stag;\n}\n\n/* TODO: there must exist some form of OSP-blessed spec */\nfunction parse_xlml_data(xml, ss, data, cell, base, styles, csty, row, arrayf, o) {\n\tvar nf = \"General\", sid = cell.StyleID, S = {}; o = o || {};\n\tvar interiors = [];\n\tvar i = 0;\n\tif(sid === undefined && row) sid = row.StyleID;\n\tif(sid === undefined && csty) sid = csty.StyleID;\n\twhile(styles[sid] !== undefined) {\n\t\tif(styles[sid].nf) nf = styles[sid].nf;\n\t\tif(styles[sid].Interior) interiors.push(styles[sid].Interior);\n\t\tif(!styles[sid].Parent) break;\n\t\tsid = styles[sid].Parent;\n\t}\n\tswitch(data.Type) {\n\t\tcase 'Boolean':\n\t\t\tcell.t = 'b';\n\t\t\tcell.v = parsexmlbool(xml);\n\t\t\tbreak;\n\t\tcase 'String':\n\t\t\tcell.t = 's'; cell.r = xlml_fixstr(unescapexml(xml));\n\t\t\tcell.v = (xml.indexOf(\"<\") > -1 ? unescapexml(ss||xml).replace(/<.*?>/g, \"\") : cell.r); // todo: BR etc\n\t\t\tbreak;\n\t\tcase 'DateTime':\n\t\t\tif(xml.slice(-1) != \"Z\") xml += \"Z\";\n\t\t\tcell.v = (parseDate(xml) - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);\n\t\t\tif(cell.v !== cell.v) cell.v = unescapexml(xml);\n\t\t\telse if(cell.v<60) cell.v = cell.v -1;\n\t\t\tif(!nf || nf == \"General\") nf = \"yyyy-mm-dd\";\n\t\t\t/* falls through */\n\t\tcase 'Number':\n\t\t\tif(cell.v === undefined) cell.v=+xml;\n\t\t\tif(!cell.t) cell.t = 'n';\n\t\t\tbreak;\n\t\tcase 'Error': cell.t = 'e'; cell.v = RBErr[xml]; if(o.cellText !== false) cell.w = xml; break;\n\t\tdefault:\n\t\t\tif(xml == \"\" && ss == \"\") { cell.t = 'z'; }\n\t\t\telse { cell.t = 's'; cell.v = xlml_fixstr(ss||xml); }\n\t\t\tbreak;\n\t}\n\tsafe_format_xlml(cell, nf, o);\n\tif(o.cellFormula !== false) {\n\t\tif(cell.Formula) {\n\t\t\tvar fstr = unescapexml(cell.Formula);\n\t\t\t/* strictly speaking, the leading = is required but some writers omit */\n\t\t\tif(fstr.charCodeAt(0) == 61 /* = */) fstr = fstr.slice(1);\n\t\t\tcell.f = rc_to_a1(fstr, base);\n\t\t\tdelete cell.Formula;\n\t\t\tif(cell.ArrayRange == \"RC\") cell.F = rc_to_a1(\"RC:RC\", base);\n\t\t\telse if(cell.ArrayRange) {\n\t\t\t\tcell.F = rc_to_a1(cell.ArrayRange, base);\n\t\t\t\tarrayf.push([safe_decode_range(cell.F), cell.F]);\n\t\t\t}\n\t\t} else {\n\t\t\tfor(i = 0; i < arrayf.length; ++i)\n\t\t\t\tif(base.r >= arrayf[i][0].s.r && base.r <= arrayf[i][0].e.r)\n\t\t\t\t\tif(base.c >= arrayf[i][0].s.c && base.c <= arrayf[i][0].e.c)\n\t\t\t\t\t\tcell.F = arrayf[i][1];\n\t\t}\n\t}\n\tif(o.cellStyles) {\n\t\tinteriors.forEach(function(x) {\n\t\t\tif(!S.patternType && x.patternType) S.patternType = x.patternType;\n\t\t});\n\t\tcell.s = S;\n\t}\n\tif(cell.StyleID !== undefined) cell.ixfe = cell.StyleID;\n}\n\nfunction xlml_clean_comment(comment) {\n\tcomment.t = comment.v || \"\";\n\tcomment.t = comment.t.replace(/\\r\\n/g,\"\\n\").replace(/\\r/g,\"\\n\");\n\tcomment.v = comment.w = comment.ixfe = undefined;\n}\n\nfunction xlml_normalize(d) {\n\tif(has_buf && Buffer.isBuffer(d)) return d.toString('utf8');\n\tif(typeof d === 'string') return d;\n\t/* duktape */\n\tif(typeof Uint8Array !== 'undefined' && d instanceof Uint8Array) return utf8read(a2s(ab2a(d)));\n\tthrow new Error(\"Bad input format: expected Buffer or string\");\n}\n\n/* TODO: Everything */\n/* UOS uses CJK in tags */\nvar xlmlregex = /<(\\/?)([^\\s?><!\\/:]*:|)([^\\s?<>:\\/]+)(?:[\\s?:\\/][^>]*)?>/mg;\n//var xlmlregex = /<(\\/?)([a-z0-9]*:|)(\\w+)[^>]*>/mg;\nfunction parse_xlml_xml(d, _opts) {\n\tvar opts = _opts || {};\n\tmake_ssf(SSF);\n\tvar str = debom(xlml_normalize(d));\n\tif(opts.type == 'binary' || opts.type == 'array' || opts.type == 'base64') {\n\t\tif(typeof cptable !== 'undefined') str = cptable.utils.decode(65001, char_codes(str));\n\t\telse str = utf8read(str);\n\t}\n\tvar opening = str.slice(0, 1024).toLowerCase(), ishtml = false;\n\tif((opening.indexOf(\">\") & 1023) > Math.min((opening.indexOf(\",\") & 1023), (opening.indexOf(\";\")&1023))) { var _o = dup(opts); _o.type = \"string\"; return PRN.to_workbook(str, _o); }\n\tif(opening.indexOf(\"<?xml\") == -1) [\"html\", \"table\", \"head\", \"meta\", \"script\", \"style\", \"div\"].forEach(function(tag) { if(opening.indexOf(\"<\" + tag) >= 0) ishtml = true; });\n\tif(ishtml) return HTML_.to_workbook(str, opts);\n\tvar Rn;\n\tvar state = [], tmp;\n\tif(DENSE != null && opts.dense == null) opts.dense = DENSE;\n\tvar sheets = {}, sheetnames = [], cursheet = (opts.dense ? [] : {}), sheetname = \"\";\n\tvar table = {}, cell = ({}), row = {};// eslint-disable-line no-unused-vars\n\tvar dtag = xlml_parsexmltag('<Data ss:Type=\"String\">'), didx = 0;\n\tvar c = 0, r = 0;\n\tvar refguess = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };\n\tvar styles = {}, stag = {};\n\tvar ss = \"\", fidx = 0;\n\tvar merges = [];\n\tvar Props = {}, Custprops = {}, pidx = 0, cp = [];\n\tvar comments = [], comment = ({});\n\tvar cstys = [], csty, seencol = false;\n\tvar arrayf = [];\n\tvar rowinfo = [], rowobj = {}, cc = 0, rr = 0;\n\tvar Workbook = ({ Sheets:[], WBProps:{date1904:false} }), wsprops = {};\n\txlmlregex.lastIndex = 0;\n\tstr = str.replace(/<!--([\\s\\S]*?)-->/mg,\"\");\n\tvar raw_Rn3 = \"\";\n\twhile((Rn = xlmlregex.exec(str))) switch((Rn[3] = (raw_Rn3 = Rn[3]).toLowerCase())) {\n\t\tcase 'data' /*case 'Data'*/:\n\t\t\tif(raw_Rn3 == \"data\") {\n\t\t\t\tif(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error(\"Bad state: \"+tmp.join(\"|\"));}\n\t\t\t\telse if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(state[state.length-1][1]) break;\n\t\t\tif(Rn[1]==='/') parse_xlml_data(str.slice(didx, Rn.index), ss, dtag, state[state.length-1][0]==/*\"Comment\"*/\"comment\"?comment:cell, {c:c,r:r}, styles, cstys[c], row, arrayf, opts);\n\t\t\telse { ss = \"\"; dtag = xlml_parsexmltag(Rn[0]); didx = Rn.index + Rn[0].length; }\n\t\t\tbreak;\n\t\tcase 'cell' /*case 'Cell'*/:\n\t\t\tif(Rn[1]==='/'){\n\t\t\t\tif(comments.length > 0) cell.c = comments;\n\t\t\t\tif((!opts.sheetRows || opts.sheetRows > r) && cell.v !== undefined) {\n\t\t\t\t\tif(opts.dense) {\n\t\t\t\t\t\tif(!cursheet[r]) cursheet[r] = [];\n\t\t\t\t\t\tcursheet[r][c] = cell;\n\t\t\t\t\t} else cursheet[encode_col(c) + encode_row(r)] = cell;\n\t\t\t\t}\n\t\t\t\tif(cell.HRef) {\n\t\t\t\t\tcell.l = ({Target:unescapexml(cell.HRef)});\n\t\t\t\t\tif(cell.HRefScreenTip) cell.l.Tooltip = cell.HRefScreenTip;\n\t\t\t\t\tdelete cell.HRef; delete cell.HRefScreenTip;\n\t\t\t\t}\n\t\t\t\tif(cell.MergeAcross || cell.MergeDown) {\n\t\t\t\t\tcc = c + (parseInt(cell.MergeAcross,10)|0);\n\t\t\t\t\trr = r + (parseInt(cell.MergeDown,10)|0);\n\t\t\t\t\tmerges.push({s:{c:c,r:r},e:{c:cc,r:rr}});\n\t\t\t\t}\n\t\t\t\tif(!opts.sheetStubs) { if(cell.MergeAcross) c = cc + 1; else ++c; }\n\t\t\t\telse if(cell.MergeAcross || cell.MergeDown) {\nfor(var cma = c; cma <= cc; ++cma) {\n\t\t\t\t\t\tfor(var cmd = r; cmd <= rr; ++cmd) {\n\t\t\t\t\t\t\tif(cma > c || cmd > r) {\n\t\t\t\t\t\t\t\tif(opts.dense) {\n\t\t\t\t\t\t\t\t\tif(!cursheet[cmd]) cursheet[cmd] = [];\n\t\t\t\t\t\t\t\t\tcursheet[cmd][cma] = {t:'z'};\n\t\t\t\t\t\t\t\t} else cursheet[encode_col(cma) + encode_row(cmd)] = {t:'z'};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tc = cc + 1;\n\t\t\t\t}\n\t\t\t\telse ++c;\n\t\t\t} else {\n\t\t\t\tcell = xlml_parsexmltagobj(Rn[0]);\n\t\t\t\tif(cell.Index) c = +cell.Index - 1;\n\t\t\t\tif(c < refguess.s.c) refguess.s.c = c;\n\t\t\t\tif(c > refguess.e.c) refguess.e.c = c;\n\t\t\t\tif(Rn[0].slice(-2) === \"/>\") ++c;\n\t\t\t\tcomments = [];\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'row' /*case 'Row'*/:\n\t\t\tif(Rn[1]==='/' || Rn[0].slice(-2) === \"/>\") {\n\t\t\t\tif(r < refguess.s.r) refguess.s.r = r;\n\t\t\t\tif(r > refguess.e.r) refguess.e.r = r;\n\t\t\t\tif(Rn[0].slice(-2) === \"/>\") {\n\t\t\t\t\trow = xlml_parsexmltag(Rn[0]);\n\t\t\t\t\tif(row.Index) r = +row.Index - 1;\n\t\t\t\t}\n\t\t\t\tc = 0; ++r;\n\t\t\t} else {\n\t\t\t\trow = xlml_parsexmltag(Rn[0]);\n\t\t\t\tif(row.Index) r = +row.Index - 1;\n\t\t\t\trowobj = {};\n\t\t\t\tif(row.AutoFitHeight == \"0\" || row.Height) {\n\t\t\t\t\trowobj.hpx = parseInt(row.Height, 10); rowobj.hpt = px2pt(rowobj.hpx);\n\t\t\t\t\trowinfo[r] = rowobj;\n\t\t\t\t}\n\t\t\t\tif(row.Hidden == \"1\") { rowobj.hidden = true; rowinfo[r] = rowobj; }\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'worksheet' /*case 'Worksheet'*/: /* TODO: read range from FullRows/FullColumns */\n\t\t\tif(Rn[1]==='/'){\n\t\t\t\tif((tmp=state.pop())[0]!==Rn[3]) throw new Error(\"Bad state: \"+tmp.join(\"|\"));\n\t\t\t\tsheetnames.push(sheetname);\n\t\t\t\tif(refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) {\n\t\t\t\t\tcursheet[\"!ref\"] = encode_range(refguess);\n\t\t\t\t\tif(opts.sheetRows && opts.sheetRows <= refguess.e.r) {\n\t\t\t\t\t\tcursheet[\"!fullref\"] = cursheet[\"!ref\"];\n\t\t\t\t\t\trefguess.e.r = opts.sheetRows - 1;\n\t\t\t\t\t\tcursheet[\"!ref\"] = encode_range(refguess);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(merges.length) cursheet[\"!merges\"] = merges;\n\t\t\t\tif(cstys.length > 0) cursheet[\"!cols\"] = cstys;\n\t\t\t\tif(rowinfo.length > 0) cursheet[\"!rows\"] = rowinfo;\n\t\t\t\tsheets[sheetname] = cursheet;\n\t\t\t} else {\n\t\t\t\trefguess = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };\n\t\t\t\tr = c = 0;\n\t\t\t\tstate.push([Rn[3], false]);\n\t\t\t\ttmp = xlml_parsexmltag(Rn[0]);\n\t\t\t\tsheetname = unescapexml(tmp.Name);\n\t\t\t\tcursheet = (opts.dense ? [] : {});\n\t\t\t\tmerges = [];\n\t\t\t\tarrayf = [];\n\t\t\t\trowinfo = [];\n\t\t\t\twsprops = {name:sheetname, Hidden:0};\n\t\t\t\tWorkbook.Sheets.push(wsprops);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'table' /*case 'Table'*/:\n\t\t\tif(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error(\"Bad state: \"+tmp.join(\"|\"));}\n\t\t\telse if(Rn[0].slice(-2) == \"/>\") break;\n\t\t\telse {\n\t\t\t\ttable = xlml_parsexmltag(Rn[0]);\n\t\t\t\tstate.push([Rn[3], false]);\n\t\t\t\tcstys = []; seencol = false;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'style' /*case 'Style'*/:\n\t\t\tif(Rn[1]==='/') process_style_xlml(styles, stag, opts);\n\t\t\telse stag = xlml_parsexmltag(Rn[0]);\n\t\t\tbreak;\n\n\t\tcase 'numberformat' /*case 'NumberFormat'*/:\n\t\t\tstag.nf = unescapexml(xlml_parsexmltag(Rn[0]).Format || \"General\");\n\t\t\tif(XLMLFormatMap[stag.nf]) stag.nf = XLMLFormatMap[stag.nf];\n\t\t\tfor(var ssfidx = 0; ssfidx != 0x188; ++ssfidx) if(SSF._table[ssfidx] == stag.nf) break;\n\t\t\tif(ssfidx == 0x188) for(ssfidx = 0x39; ssfidx != 0x188; ++ssfidx) if(SSF._table[ssfidx] == null) { SSF.load(stag.nf, ssfidx); break; }\n\t\t\tbreak;\n\n\t\tcase 'column' /*case 'Column'*/:\n\t\t\tif(state[state.length-1][0] !== /*'Table'*/'table') break;\n\t\t\tcsty = xlml_parsexmltag(Rn[0]);\n\t\t\tif(csty.Hidden) { csty.hidden = true; delete csty.Hidden; }\n\t\t\tif(csty.Width) csty.wpx = parseInt(csty.Width, 10);\n\t\t\tif(!seencol && csty.wpx > 10) {\n\t\t\t\tseencol = true; MDW = DEF_MDW; //find_mdw_wpx(csty.wpx);\n\t\t\t\tfor(var _col = 0; _col < cstys.length; ++_col) if(cstys[_col]) process_col(cstys[_col]);\n\t\t\t}\n\t\t\tif(seencol) process_col(csty);\n\t\t\tcstys[(csty.Index-1||cstys.length)] = csty;\n\t\t\tfor(var i = 0; i < +csty.Span; ++i) cstys[cstys.length] = dup(csty);\n\t\t\tbreak;\n\n\t\tcase 'namedrange' /*case 'NamedRange'*/:\n\t\t\tif(Rn[1]==='/') break;\n\t\t\tif(!Workbook.Names) Workbook.Names = [];\n\t\t\tvar _NamedRange = parsexmltag(Rn[0]);\n\t\t\tvar _DefinedName = ({\n\t\t\t\tName: _NamedRange.Name,\n\t\t\t\tRef: rc_to_a1(_NamedRange.RefersTo.slice(1), {r:0, c:0})\n\t\t\t});\n\t\t\tif(Workbook.Sheets.length>0) _DefinedName.Sheet=Workbook.Sheets.length-1;\nWorkbook.Names.push(_DefinedName);\n\t\t\tbreak;\n\n\t\tcase 'namedcell' /*case 'NamedCell'*/: break;\n\t\tcase 'b' /*case 'B'*/: break;\n\t\tcase 'i' /*case 'I'*/: break;\n\t\tcase 'u' /*case 'U'*/: break;\n\t\tcase 's' /*case 'S'*/: break;\n\t\tcase 'em' /*case 'EM'*/: break;\n\t\tcase 'h2' /*case 'H2'*/: break;\n\t\tcase 'h3' /*case 'H3'*/: break;\n\t\tcase 'sub' /*case 'Sub'*/: break;\n\t\tcase 'sup' /*case 'Sup'*/: break;\n\t\tcase 'span' /*case 'Span'*/: break;\n\t\tcase 'alignment' /*case 'Alignment'*/:\n\t\t\tbreak;\n\t\tcase 'borders' /*case 'Borders'*/: break;\n\t\tcase 'border' /*case 'Border'*/: break;\n\t\tcase 'font' /*case 'Font'*/:\n\t\t\tif(Rn[0].slice(-2) === \"/>\") break;\n\t\t\telse if(Rn[1]===\"/\") ss += str.slice(fidx, Rn.index);\n\t\t\telse fidx = Rn.index + Rn[0].length;\n\t\t\tbreak;\n\t\tcase 'interior' /*case 'Interior'*/:\n\t\t\tif(!opts.cellStyles) break;\n\t\t\tstag.Interior = xlml_parsexmltag(Rn[0]);\n\t\t\tbreak;\n\t\tcase 'protection' /*case 'Protection'*/: break;\n\n\t\tcase 'author' /*case 'Author'*/:\n\t\tcase 'title' /*case 'Title'*/:\n\t\tcase 'description' /*case 'Description'*/:\n\t\tcase 'created' /*case 'Created'*/:\n\t\tcase 'keywords' /*case 'Keywords'*/:\n\t\tcase 'subject' /*case 'Subject'*/:\n\t\tcase 'category' /*case 'Category'*/:\n\t\tcase 'company' /*case 'Company'*/:\n\t\tcase 'lastauthor' /*case 'LastAuthor'*/:\n\t\tcase 'lastsaved' /*case 'LastSaved'*/:\n\t\tcase 'lastprinted' /*case 'LastPrinted'*/:\n\t\tcase 'version' /*case 'Version'*/:\n\t\tcase 'revision' /*case 'Revision'*/:\n\t\tcase 'totaltime' /*case 'TotalTime'*/:\n\t\tcase 'hyperlinkbase' /*case 'HyperlinkBase'*/:\n\t\tcase 'manager' /*case 'Manager'*/:\n\t\tcase 'contentstatus' /*case 'ContentStatus'*/:\n\t\tcase 'identifier' /*case 'Identifier'*/:\n\t\tcase 'language' /*case 'Language'*/:\n\t\tcase 'appname' /*case 'AppName'*/:\n\t\t\tif(Rn[0].slice(-2) === \"/>\") break;\n\t\t\telse if(Rn[1]===\"/\") xlml_set_prop(Props, raw_Rn3, str.slice(pidx, Rn.index));\n\t\t\telse pidx = Rn.index + Rn[0].length;\n\t\t\tbreak;\n\t\tcase 'paragraphs' /*case 'Paragraphs'*/: break;\n\n\t\tcase 'styles' /*case 'Styles'*/:\n\t\tcase 'workbook' /*case 'Workbook'*/:\n\t\t\tif(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error(\"Bad state: \"+tmp.join(\"|\"));}\n\t\t\telse state.push([Rn[3], false]);\n\t\t\tbreak;\n\n\t\tcase 'comment' /*case 'Comment'*/:\n\t\t\tif(Rn[1]==='/'){\n\t\t\t\tif((tmp=state.pop())[0]!==Rn[3]) throw new Error(\"Bad state: \"+tmp.join(\"|\"));\n\t\t\t\txlml_clean_comment(comment);\n\t\t\t\tcomments.push(comment);\n\t\t\t} else {\n\t\t\t\tstate.push([Rn[3], false]);\n\t\t\t\ttmp = xlml_parsexmltag(Rn[0]);\n\t\t\t\tcomment = ({a:tmp.Author});\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'autofilter' /*case 'AutoFilter'*/:\n\t\t\tif(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error(\"Bad state: \"+tmp.join(\"|\"));}\n\t\t\telse if(Rn[0].charAt(Rn[0].length-2) !== '/') {\n\t\t\t\tvar AutoFilter = xlml_parsexmltag(Rn[0]);\n\t\t\t\tcursheet['!autofilter'] = { ref:rc_to_a1(AutoFilter.Range).replace(/\\$/g,\"\") };\n\t\t\t\tstate.push([Rn[3], true]);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'name' /*case 'Name'*/: break;\n\n\t\tcase 'datavalidation' /*case 'DataValidation'*/:\n\t\t\tif(Rn[1]==='/'){\n\t\t\t\tif((tmp=state.pop())[0]!==Rn[3]) throw new Error(\"Bad state: \"+tmp.join(\"|\"));\n\t\t\t} else {\n\t\t\t\tif(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'pixelsperinch' /*case 'PixelsPerInch'*/:\n\t\t\tbreak;\n\t\tcase 'componentoptions' /*case 'ComponentOptions'*/:\n\t\tcase 'documentproperties' /*case 'DocumentProperties'*/:\n\t\tcase 'customdocumentproperties' /*case 'CustomDocumentProperties'*/:\n\t\tcase 'officedocumentsettings' /*case 'OfficeDocumentSettings'*/:\n\t\tcase 'pivottable' /*case 'PivotTable'*/:\n\t\tcase 'pivotcache' /*case 'PivotCache'*/:\n\t\tcase 'names' /*case 'Names'*/:\n\t\tcase 'mapinfo' /*case 'MapInfo'*/:\n\t\tcase 'pagebreaks' /*case 'PageBreaks'*/:\n\t\tcase 'querytable' /*case 'QueryTable'*/:\n\t\tcase 'sorting' /*case 'Sorting'*/:\n\t\tcase 'schema' /*case 'Schema'*/: //case 'data' /*case 'data'*/:\n\t\tcase 'conditionalformatting' /*case 'ConditionalFormatting'*/:\n\t\tcase 'smarttagtype' /*case 'SmartTagType'*/:\n\t\tcase 'smarttags' /*case 'SmartTags'*/:\n\t\tcase 'excelworkbook' /*case 'ExcelWorkbook'*/:\n\t\tcase 'workbookoptions' /*case 'WorkbookOptions'*/:\n\t\tcase 'worksheetoptions' /*case 'WorksheetOptions'*/:\n\t\t\tif(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error(\"Bad state: \"+tmp.join(\"|\"));}\n\t\t\telse if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);\n\t\t\tbreak;\n\n\t\tcase 'null' /*case 'Null'*/: break;\n\n\t\tdefault:\n\t\t\t/* FODS file root is <office:document> */\n\t\t\tif(state.length == 0 && Rn[3] == \"document\") return parse_fods(str, opts);\n\t\t\t/* UOS file root is <uof:UOF> */\n\t\t\tif(state.length == 0 && Rn[3] == \"uof\"/*\"UOF\"*/) return parse_fods(str, opts);\n\n\t\t\tvar seen = true;\n\t\t\tswitch(state[state.length-1][0]) {\n\t\t\t\t/* OfficeDocumentSettings */\n\t\t\t\tcase 'officedocumentsettings' /*case 'OfficeDocumentSettings'*/: switch(Rn[3]) {\n\t\t\t\t\tcase 'allowpng' /*case 'AllowPNG'*/: break;\n\t\t\t\t\tcase 'removepersonalinformation' /*case 'RemovePersonalInformation'*/: break;\n\t\t\t\t\tcase 'downloadcomponents' /*case 'DownloadComponents'*/: break;\n\t\t\t\t\tcase 'locationofcomponents' /*case 'LocationOfComponents'*/: break;\n\t\t\t\t\tcase 'colors' /*case 'Colors'*/: break;\n\t\t\t\t\tcase 'color' /*case 'Color'*/: break;\n\t\t\t\t\tcase 'index' /*case 'Index'*/: break;\n\t\t\t\t\tcase 'rgb' /*case 'RGB'*/: break;\n\t\t\t\t\tcase 'targetscreensize' /*case 'TargetScreenSize'*/: break;\n\t\t\t\t\tcase 'readonlyrecommended' /*case 'ReadOnlyRecommended'*/: break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\t/* ComponentOptions */\n\t\t\t\tcase 'componentoptions' /*case 'ComponentOptions'*/: switch(Rn[3]) {\n\t\t\t\t\tcase 'toolbar' /*case 'Toolbar'*/: break;\n\t\t\t\t\tcase 'hideofficelogo' /*case 'HideOfficeLogo'*/: break;\n\t\t\t\t\tcase 'spreadsheetautofit' /*case 'SpreadsheetAutoFit'*/: break;\n\t\t\t\t\tcase 'label' /*case 'Label'*/: break;\n\t\t\t\t\tcase 'caption' /*case 'Caption'*/: break;\n\t\t\t\t\tcase 'maxheight' /*case 'MaxHeight'*/: break;\n\t\t\t\t\tcase 'maxwidth' /*case 'MaxWidth'*/: break;\n\t\t\t\t\tcase 'nextsheetnumber' /*case 'NextSheetNumber'*/: break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\t/* ExcelWorkbook */\n\t\t\t\tcase 'excelworkbook' /*case 'ExcelWorkbook'*/: switch(Rn[3]) {\n\t\t\t\t\tcase 'date1904' /*case 'Date1904'*/:\nWorkbook.WBProps.date1904 = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'windowheight' /*case 'WindowHeight'*/: break;\n\t\t\t\t\tcase 'windowwidth' /*case 'WindowWidth'*/: break;\n\t\t\t\t\tcase 'windowtopx' /*case 'WindowTopX'*/: break;\n\t\t\t\t\tcase 'windowtopy' /*case 'WindowTopY'*/: break;\n\t\t\t\t\tcase 'tabratio' /*case 'TabRatio'*/: break;\n\t\t\t\t\tcase 'protectstructure' /*case 'ProtectStructure'*/: break;\n\t\t\t\t\tcase 'protectwindow' /*case 'ProtectWindow'*/: break;\n\t\t\t\t\tcase 'protectwindows' /*case 'ProtectWindows'*/: break;\n\t\t\t\t\tcase 'activesheet' /*case 'ActiveSheet'*/: break;\n\t\t\t\t\tcase 'displayinknotes' /*case 'DisplayInkNotes'*/: break;\n\t\t\t\t\tcase 'firstvisiblesheet' /*case 'FirstVisibleSheet'*/: break;\n\t\t\t\t\tcase 'supbook' /*case 'SupBook'*/: break;\n\t\t\t\t\tcase 'sheetname' /*case 'SheetName'*/: break;\n\t\t\t\t\tcase 'sheetindex' /*case 'SheetIndex'*/: break;\n\t\t\t\t\tcase 'sheetindexfirst' /*case 'SheetIndexFirst'*/: break;\n\t\t\t\t\tcase 'sheetindexlast' /*case 'SheetIndexLast'*/: break;\n\t\t\t\t\tcase 'dll' /*case 'Dll'*/: break;\n\t\t\t\t\tcase 'acceptlabelsinformulas' /*case 'AcceptLabelsInFormulas'*/: break;\n\t\t\t\t\tcase 'donotsavelinkvalues' /*case 'DoNotSaveLinkValues'*/: break;\n\t\t\t\t\tcase 'iteration' /*case 'Iteration'*/: break;\n\t\t\t\t\tcase 'maxiterations' /*case 'MaxIterations'*/: break;\n\t\t\t\t\tcase 'maxchange' /*case 'MaxChange'*/: break;\n\t\t\t\t\tcase 'path' /*case 'Path'*/: break;\n\t\t\t\t\tcase 'xct' /*case 'Xct'*/: break;\n\t\t\t\t\tcase 'count' /*case 'Count'*/: break;\n\t\t\t\t\tcase 'selectedsheets' /*case 'SelectedSheets'*/: break;\n\t\t\t\t\tcase 'calculation' /*case 'Calculation'*/: break;\n\t\t\t\t\tcase 'uncalced' /*case 'Uncalced'*/: break;\n\t\t\t\t\tcase 'startupprompt' /*case 'StartupPrompt'*/: break;\n\t\t\t\t\tcase 'crn' /*case 'Crn'*/: break;\n\t\t\t\t\tcase 'externname' /*case 'ExternName'*/: break;\n\t\t\t\t\tcase 'formula' /*case 'Formula'*/: break;\n\t\t\t\t\tcase 'colfirst' /*case 'ColFirst'*/: break;\n\t\t\t\t\tcase 'collast' /*case 'ColLast'*/: break;\n\t\t\t\t\tcase 'wantadvise' /*case 'WantAdvise'*/: break;\n\t\t\t\t\tcase 'boolean' /*case 'Boolean'*/: break;\n\t\t\t\t\tcase 'error' /*case 'Error'*/: break;\n\t\t\t\t\tcase 'text' /*case 'Text'*/: break;\n\t\t\t\t\tcase 'ole' /*case 'OLE'*/: break;\n\t\t\t\t\tcase 'noautorecover' /*case 'NoAutoRecover'*/: break;\n\t\t\t\t\tcase 'publishobjects' /*case 'PublishObjects'*/: break;\n\t\t\t\t\tcase 'donotcalculatebeforesave' /*case 'DoNotCalculateBeforeSave'*/: break;\n\t\t\t\t\tcase 'number' /*case 'Number'*/: break;\n\t\t\t\t\tcase 'refmoder1c1' /*case 'RefModeR1C1'*/: break;\n\t\t\t\t\tcase 'embedsavesmarttags' /*case 'EmbedSaveSmartTags'*/: break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\t/* WorkbookOptions */\n\t\t\t\tcase 'workbookoptions' /*case 'WorkbookOptions'*/: switch(Rn[3]) {\n\t\t\t\t\tcase 'owcversion' /*case 'OWCVersion'*/: break;\n\t\t\t\t\tcase 'height' /*case 'Height'*/: break;\n\t\t\t\t\tcase 'width' /*case 'Width'*/: break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\t/* WorksheetOptions */\n\t\t\t\tcase 'worksheetoptions' /*case 'WorksheetOptions'*/: switch(Rn[3]) {\n\t\t\t\t\tcase 'visible' /*case 'Visible'*/:\n\t\t\t\t\t\tif(Rn[0].slice(-2) === \"/>\"){/* empty */}\n\t\t\t\t\t\telse if(Rn[1]===\"/\") switch(str.slice(pidx, Rn.index)) {\n\t\t\t\t\t\t\tcase \"SheetHidden\": wsprops.Hidden = 1; break;\n\t\t\t\t\t\t\tcase \"SheetVeryHidden\": wsprops.Hidden = 2; break;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse pidx = Rn.index + Rn[0].length;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'header' /*case 'Header'*/:\n\t\t\t\t\t\tif(!cursheet['!margins']) default_margins(cursheet['!margins']={}, 'xlml');\n\t\t\t\t\t\tcursheet['!margins'].header = parsexmltag(Rn[0]).Margin;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'footer' /*case 'Footer'*/:\n\t\t\t\t\t\tif(!cursheet['!margins']) default_margins(cursheet['!margins']={}, 'xlml');\n\t\t\t\t\t\tcursheet['!margins'].footer = parsexmltag(Rn[0]).Margin;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'pagemargins' /*case 'PageMargins'*/:\n\t\t\t\t\t\tvar pagemargins = parsexmltag(Rn[0]);\n\t\t\t\t\t\tif(!cursheet['!margins']) default_margins(cursheet['!margins']={},'xlml');\n\t\t\t\t\t\tif(pagemargins.Top) cursheet['!margins'].top = pagemargins.Top;\n\t\t\t\t\t\tif(pagemargins.Left) cursheet['!margins'].left = pagemargins.Left;\n\t\t\t\t\t\tif(pagemargins.Right) cursheet['!margins'].right = pagemargins.Right;\n\t\t\t\t\t\tif(pagemargins.Bottom) cursheet['!margins'].bottom = pagemargins.Bottom;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'displayrighttoleft' /*case 'DisplayRightToLeft'*/:\n\t\t\t\t\t\tif(!Workbook.Views) Workbook.Views = [];\n\t\t\t\t\t\tif(!Workbook.Views[0]) Workbook.Views[0] = {};\n\t\t\t\t\t\tWorkbook.Views[0].RTL = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'freezepanes' /*case 'FreezePanes'*/: break;\n\t\t\t\t\tcase 'frozennosplit' /*case 'FrozenNoSplit'*/: break;\n\n\t\t\t\t\tcase 'splithorizontal' /*case 'SplitHorizontal'*/:\n\t\t\t\t\tcase 'splitvertical' /*case 'SplitVertical'*/:\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'donotdisplaygridlines' /*case 'DoNotDisplayGridlines'*/:\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'activerow' /*case 'ActiveRow'*/: break;\n\t\t\t\t\tcase 'activecol' /*case 'ActiveCol'*/: break;\n\t\t\t\t\tcase 'toprowbottompane' /*case 'TopRowBottomPane'*/: break;\n\t\t\t\t\tcase 'leftcolumnrightpane' /*case 'LeftColumnRightPane'*/: break;\n\n\t\t\t\t\tcase 'unsynced' /*case 'Unsynced'*/: break;\n\t\t\t\t\tcase 'print' /*case 'Print'*/: break;\n\t\t\t\t\tcase 'printerrors' /*case 'PrintErrors'*/: break;\n\t\t\t\t\tcase 'panes' /*case 'Panes'*/: break;\n\t\t\t\t\tcase 'scale' /*case 'Scale'*/: break;\n\t\t\t\t\tcase 'pane' /*case 'Pane'*/: break;\n\t\t\t\t\tcase 'number' /*case 'Number'*/: break;\n\t\t\t\t\tcase 'layout' /*case 'Layout'*/: break;\n\t\t\t\t\tcase 'pagesetup' /*case 'PageSetup'*/: break;\n\t\t\t\t\tcase 'selected' /*case 'Selected'*/: break;\n\t\t\t\t\tcase 'protectobjects' /*case 'ProtectObjects'*/: break;\n\t\t\t\t\tcase 'enableselection' /*case 'EnableSelection'*/: break;\n\t\t\t\t\tcase 'protectscenarios' /*case 'ProtectScenarios'*/: break;\n\t\t\t\t\tcase 'validprinterinfo' /*case 'ValidPrinterInfo'*/: break;\n\t\t\t\t\tcase 'horizontalresolution' /*case 'HorizontalResolution'*/: break;\n\t\t\t\t\tcase 'verticalresolution' /*case 'VerticalResolution'*/: break;\n\t\t\t\t\tcase 'numberofcopies' /*case 'NumberofCopies'*/: break;\n\t\t\t\t\tcase 'activepane' /*case 'ActivePane'*/: break;\n\t\t\t\t\tcase 'toprowvisible' /*case 'TopRowVisible'*/: break;\n\t\t\t\t\tcase 'leftcolumnvisible' /*case 'LeftColumnVisible'*/: break;\n\t\t\t\t\tcase 'fittopage' /*case 'FitToPage'*/: break;\n\t\t\t\t\tcase 'rangeselection' /*case 'RangeSelection'*/: break;\n\t\t\t\t\tcase 'papersizeindex' /*case 'PaperSizeIndex'*/: break;\n\t\t\t\t\tcase 'pagelayoutzoom' /*case 'PageLayoutZoom'*/: break;\n\t\t\t\t\tcase 'pagebreakzoom' /*case 'PageBreakZoom'*/: break;\n\t\t\t\t\tcase 'filteron' /*case 'FilterOn'*/: break;\n\t\t\t\t\tcase 'fitwidth' /*case 'FitWidth'*/: break;\n\t\t\t\t\tcase 'fitheight' /*case 'FitHeight'*/: break;\n\t\t\t\t\tcase 'commentslayout' /*case 'CommentsLayout'*/: break;\n\t\t\t\t\tcase 'zoom' /*case 'Zoom'*/: break;\n\t\t\t\t\tcase 'lefttoright' /*case 'LeftToRight'*/: break;\n\t\t\t\t\tcase 'gridlines' /*case 'Gridlines'*/: break;\n\t\t\t\t\tcase 'allowsort' /*case 'AllowSort'*/: break;\n\t\t\t\t\tcase 'allowfilter' /*case 'AllowFilter'*/: break;\n\t\t\t\t\tcase 'allowinsertrows' /*case 'AllowInsertRows'*/: break;\n\t\t\t\t\tcase 'allowdeleterows' /*case 'AllowDeleteRows'*/: break;\n\t\t\t\t\tcase 'allowinsertcols' /*case 'AllowInsertCols'*/: break;\n\t\t\t\t\tcase 'allowdeletecols' /*case 'AllowDeleteCols'*/: break;\n\t\t\t\t\tcase 'allowinserthyperlinks' /*case 'AllowInsertHyperlinks'*/: break;\n\t\t\t\t\tcase 'allowformatcells' /*case 'AllowFormatCells'*/: break;\n\t\t\t\t\tcase 'allowsizecols' /*case 'AllowSizeCols'*/: break;\n\t\t\t\t\tcase 'allowsizerows' /*case 'AllowSizeRows'*/: break;\n\t\t\t\t\tcase 'nosummaryrowsbelowdetail' /*case 'NoSummaryRowsBelowDetail'*/:\n\t\t\t\t\t\tif(!cursheet[\"!outline\"]) cursheet[\"!outline\"] = {};\n\t\t\t\t\t\tcursheet[\"!outline\"].above = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'tabcolorindex' /*case 'TabColorIndex'*/: break;\n\t\t\t\t\tcase 'donotdisplayheadings' /*case 'DoNotDisplayHeadings'*/: break;\n\t\t\t\t\tcase 'showpagelayoutzoom' /*case 'ShowPageLayoutZoom'*/: break;\n\t\t\t\t\tcase 'nosummarycolumnsrightdetail' /*case 'NoSummaryColumnsRightDetail'*/:\n\t\t\t\t\t\tif(!cursheet[\"!outline\"]) cursheet[\"!outline\"] = {};\n\t\t\t\t\t\tcursheet[\"!outline\"].left = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'blackandwhite' /*case 'BlackAndWhite'*/: break;\n\t\t\t\t\tcase 'donotdisplayzeros' /*case 'DoNotDisplayZeros'*/: break;\n\t\t\t\t\tcase 'displaypagebreak' /*case 'DisplayPageBreak'*/: break;\n\t\t\t\t\tcase 'rowcolheadings' /*case 'RowColHeadings'*/: break;\n\t\t\t\t\tcase 'donotdisplayoutline' /*case 'DoNotDisplayOutline'*/: break;\n\t\t\t\t\tcase 'noorientation' /*case 'NoOrientation'*/: break;\n\t\t\t\t\tcase 'allowusepivottables' /*case 'AllowUsePivotTables'*/: break;\n\t\t\t\t\tcase 'zeroheight' /*case 'ZeroHeight'*/: break;\n\t\t\t\t\tcase 'viewablerange' /*case 'ViewableRange'*/: break;\n\t\t\t\t\tcase 'selection' /*case 'Selection'*/: break;\n\t\t\t\t\tcase 'protectcontents' /*case 'ProtectContents'*/: break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\t/* PivotTable */\n\t\t\t\tcase 'pivottable' /*case 'PivotTable'*/: case 'pivotcache' /*case 'PivotCache'*/: switch(Rn[3]) {\n\t\t\t\t\tcase 'immediateitemsondrop' /*case 'ImmediateItemsOnDrop'*/: break;\n\t\t\t\t\tcase 'showpagemultipleitemlabel' /*case 'ShowPageMultipleItemLabel'*/: break;\n\t\t\t\t\tcase 'compactrowindent' /*case 'CompactRowIndent'*/: break;\n\t\t\t\t\tcase 'location' /*case 'Location'*/: break;\n\t\t\t\t\tcase 'pivotfield' /*case 'PivotField'*/: break;\n\t\t\t\t\tcase 'orientation' /*case 'Orientation'*/: break;\n\t\t\t\t\tcase 'layoutform' /*case 'LayoutForm'*/: break;\n\t\t\t\t\tcase 'layoutsubtotallocation' /*case 'LayoutSubtotalLocation'*/: break;\n\t\t\t\t\tcase 'layoutcompactrow' /*case 'LayoutCompactRow'*/: break;\n\t\t\t\t\tcase 'position' /*case 'Position'*/: break;\n\t\t\t\t\tcase 'pivotitem' /*case 'PivotItem'*/: break;\n\t\t\t\t\tcase 'datatype' /*case 'DataType'*/: break;\n\t\t\t\t\tcase 'datafield' /*case 'DataField'*/: break;\n\t\t\t\t\tcase 'sourcename' /*case 'SourceName'*/: break;\n\t\t\t\t\tcase 'parentfield' /*case 'ParentField'*/: break;\n\t\t\t\t\tcase 'ptlineitems' /*case 'PTLineItems'*/: break;\n\t\t\t\t\tcase 'ptlineitem' /*case 'PTLineItem'*/: break;\n\t\t\t\t\tcase 'countofsameitems' /*case 'CountOfSameItems'*/: break;\n\t\t\t\t\tcase 'item' /*case 'Item'*/: break;\n\t\t\t\t\tcase 'itemtype' /*case 'ItemType'*/: break;\n\t\t\t\t\tcase 'ptsource' /*case 'PTSource'*/: break;\n\t\t\t\t\tcase 'cacheindex' /*case 'CacheIndex'*/: break;\n\t\t\t\t\tcase 'consolidationreference' /*case 'ConsolidationReference'*/: break;\n\t\t\t\t\tcase 'filename' /*case 'FileName'*/: break;\n\t\t\t\t\tcase 'reference' /*case 'Reference'*/: break;\n\t\t\t\t\tcase 'nocolumngrand' /*case 'NoColumnGrand'*/: break;\n\t\t\t\t\tcase 'norowgrand' /*case 'NoRowGrand'*/: break;\n\t\t\t\t\tcase 'blanklineafteritems' /*case 'BlankLineAfterItems'*/: break;\n\t\t\t\t\tcase 'hidden' /*case 'Hidden'*/: break;\n\t\t\t\t\tcase 'subtotal' /*case 'Subtotal'*/: break;\n\t\t\t\t\tcase 'basefield' /*case 'BaseField'*/: break;\n\t\t\t\t\tcase 'mapchilditems' /*case 'MapChildItems'*/: break;\n\t\t\t\t\tcase 'function' /*case 'Function'*/: break;\n\t\t\t\t\tcase 'refreshonfileopen' /*case 'RefreshOnFileOpen'*/: break;\n\t\t\t\t\tcase 'printsettitles' /*case 'PrintSetTitles'*/: break;\n\t\t\t\t\tcase 'mergelabels' /*case 'MergeLabels'*/: break;\n\t\t\t\t\tcase 'defaultversion' /*case 'DefaultVersion'*/: break;\n\t\t\t\t\tcase 'refreshname' /*case 'RefreshName'*/: break;\n\t\t\t\t\tcase 'refreshdate' /*case 'RefreshDate'*/: break;\n\t\t\t\t\tcase 'refreshdatecopy' /*case 'RefreshDateCopy'*/: break;\n\t\t\t\t\tcase 'versionlastrefresh' /*case 'VersionLastRefresh'*/: break;\n\t\t\t\t\tcase 'versionlastupdate' /*case 'VersionLastUpdate'*/: break;\n\t\t\t\t\tcase 'versionupdateablemin' /*case 'VersionUpdateableMin'*/: break;\n\t\t\t\t\tcase 'versionrefreshablemin' /*case 'VersionRefreshableMin'*/: break;\n\t\t\t\t\tcase 'calculation' /*case 'Calculation'*/: break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\t/* PageBreaks */\n\t\t\t\tcase 'pagebreaks' /*case 'PageBreaks'*/: switch(Rn[3]) {\n\t\t\t\t\tcase 'colbreaks' /*case 'ColBreaks'*/: break;\n\t\t\t\t\tcase 'colbreak' /*case 'ColBreak'*/: break;\n\t\t\t\t\tcase 'rowbreaks' /*case 'RowBreaks'*/: break;\n\t\t\t\t\tcase 'rowbreak' /*case 'RowBreak'*/: break;\n\t\t\t\t\tcase 'colstart' /*case 'ColStart'*/: break;\n\t\t\t\t\tcase 'colend' /*case 'ColEnd'*/: break;\n\t\t\t\t\tcase 'rowend' /*case 'RowEnd'*/: break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\t/* AutoFilter */\n\t\t\t\tcase 'autofilter' /*case 'AutoFilter'*/: switch(Rn[3]) {\n\t\t\t\t\tcase 'autofiltercolumn' /*case 'AutoFilterColumn'*/: break;\n\t\t\t\t\tcase 'autofiltercondition' /*case 'AutoFilterCondition'*/: break;\n\t\t\t\t\tcase 'autofilterand' /*case 'AutoFilterAnd'*/: break;\n\t\t\t\t\tcase 'autofilteror' /*case 'AutoFilterOr'*/: break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\t/* QueryTable */\n\t\t\t\tcase 'querytable' /*case 'QueryTable'*/: switch(Rn[3]) {\n\t\t\t\t\tcase 'id' /*case 'Id'*/: break;\n\t\t\t\t\tcase 'autoformatfont' /*case 'AutoFormatFont'*/: break;\n\t\t\t\t\tcase 'autoformatpattern' /*case 'AutoFormatPattern'*/: break;\n\t\t\t\t\tcase 'querysource' /*case 'QuerySource'*/: break;\n\t\t\t\t\tcase 'querytype' /*case 'QueryType'*/: break;\n\t\t\t\t\tcase 'enableredirections' /*case 'EnableRedirections'*/: break;\n\t\t\t\t\tcase 'refreshedinxl9' /*case 'RefreshedInXl9'*/: break;\n\t\t\t\t\tcase 'urlstring' /*case 'URLString'*/: break;\n\t\t\t\t\tcase 'htmltables' /*case 'HTMLTables'*/: break;\n\t\t\t\t\tcase 'connection' /*case 'Connection'*/: break;\n\t\t\t\t\tcase 'commandtext' /*case 'CommandText'*/: break;\n\t\t\t\t\tcase 'refreshinfo' /*case 'RefreshInfo'*/: break;\n\t\t\t\t\tcase 'notitles' /*case 'NoTitles'*/: break;\n\t\t\t\t\tcase 'nextid' /*case 'NextId'*/: break;\n\t\t\t\t\tcase 'columninfo' /*case 'ColumnInfo'*/: break;\n\t\t\t\t\tcase 'overwritecells' /*case 'OverwriteCells'*/: break;\n\t\t\t\t\tcase 'donotpromptforfile' /*case 'DoNotPromptForFile'*/: break;\n\t\t\t\t\tcase 'textwizardsettings' /*case 'TextWizardSettings'*/: break;\n\t\t\t\t\tcase 'source' /*case 'Source'*/: break;\n\t\t\t\t\tcase 'number' /*case 'Number'*/: break;\n\t\t\t\t\tcase 'decimal' /*case 'Decimal'*/: break;\n\t\t\t\t\tcase 'thousandseparator' /*case 'ThousandSeparator'*/: break;\n\t\t\t\t\tcase 'trailingminusnumbers' /*case 'TrailingMinusNumbers'*/: break;\n\t\t\t\t\tcase 'formatsettings' /*case 'FormatSettings'*/: break;\n\t\t\t\t\tcase 'fieldtype' /*case 'FieldType'*/: break;\n\t\t\t\t\tcase 'delimiters' /*case 'Delimiters'*/: break;\n\t\t\t\t\tcase 'tab' /*case 'Tab'*/: break;\n\t\t\t\t\tcase 'comma' /*case 'Comma'*/: break;\n\t\t\t\t\tcase 'autoformatname' /*case 'AutoFormatName'*/: break;\n\t\t\t\t\tcase 'versionlastedit' /*case 'VersionLastEdit'*/: break;\n\t\t\t\t\tcase 'versionlastrefresh' /*case 'VersionLastRefresh'*/: break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\tcase 'datavalidation' /*case 'DataValidation'*/:\n\t\t\t\tswitch(Rn[3]) {\n\t\t\t\t\tcase 'range' /*case 'Range'*/: break;\n\n\t\t\t\t\tcase 'type' /*case 'Type'*/: break;\n\t\t\t\t\tcase 'min' /*case 'Min'*/: break;\n\t\t\t\t\tcase 'max' /*case 'Max'*/: break;\n\t\t\t\t\tcase 'sort' /*case 'Sort'*/: break;\n\t\t\t\t\tcase 'descending' /*case 'Descending'*/: break;\n\t\t\t\t\tcase 'order' /*case 'Order'*/: break;\n\t\t\t\t\tcase 'casesensitive' /*case 'CaseSensitive'*/: break;\n\t\t\t\t\tcase 'value' /*case 'Value'*/: break;\n\t\t\t\t\tcase 'errorstyle' /*case 'ErrorStyle'*/: break;\n\t\t\t\t\tcase 'errormessage' /*case 'ErrorMessage'*/: break;\n\t\t\t\t\tcase 'errortitle' /*case 'ErrorTitle'*/: break;\n\t\t\t\t\tcase 'inputmessage' /*case 'InputMessage'*/: break;\n\t\t\t\t\tcase 'inputtitle' /*case 'InputTitle'*/: break;\n\t\t\t\t\tcase 'combohide' /*case 'ComboHide'*/: break;\n\t\t\t\t\tcase 'inputhide' /*case 'InputHide'*/: break;\n\t\t\t\t\tcase 'condition' /*case 'Condition'*/: break;\n\t\t\t\t\tcase 'qualifier' /*case 'Qualifier'*/: break;\n\t\t\t\t\tcase 'useblank' /*case 'UseBlank'*/: break;\n\t\t\t\t\tcase 'value1' /*case 'Value1'*/: break;\n\t\t\t\t\tcase 'value2' /*case 'Value2'*/: break;\n\t\t\t\t\tcase 'format' /*case 'Format'*/: break;\n\n\t\t\t\t\tcase 'cellrangelist' /*case 'CellRangeList'*/: break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\tcase 'sorting' /*case 'Sorting'*/:\n\t\t\t\tcase 'conditionalformatting' /*case 'ConditionalFormatting'*/:\n\t\t\t\tswitch(Rn[3]) {\n\t\t\t\t\tcase 'range' /*case 'Range'*/: break;\n\t\t\t\t\tcase 'type' /*case 'Type'*/: break;\n\t\t\t\t\tcase 'min' /*case 'Min'*/: break;\n\t\t\t\t\tcase 'max' /*case 'Max'*/: break;\n\t\t\t\t\tcase 'sort' /*case 'Sort'*/: break;\n\t\t\t\t\tcase 'descending' /*case 'Descending'*/: break;\n\t\t\t\t\tcase 'order' /*case 'Order'*/: break;\n\t\t\t\t\tcase 'casesensitive' /*case 'CaseSensitive'*/: break;\n\t\t\t\t\tcase 'value' /*case 'Value'*/: break;\n\t\t\t\t\tcase 'errorstyle' /*case 'ErrorStyle'*/: break;\n\t\t\t\t\tcase 'errormessage' /*case 'ErrorMessage'*/: break;\n\t\t\t\t\tcase 'errortitle' /*case 'ErrorTitle'*/: break;\n\t\t\t\t\tcase 'cellrangelist' /*case 'CellRangeList'*/: break;\n\t\t\t\t\tcase 'inputmessage' /*case 'InputMessage'*/: break;\n\t\t\t\t\tcase 'inputtitle' /*case 'InputTitle'*/: break;\n\t\t\t\t\tcase 'combohide' /*case 'ComboHide'*/: break;\n\t\t\t\t\tcase 'inputhide' /*case 'InputHide'*/: break;\n\t\t\t\t\tcase 'condition' /*case 'Condition'*/: break;\n\t\t\t\t\tcase 'qualifier' /*case 'Qualifier'*/: break;\n\t\t\t\t\tcase 'useblank' /*case 'UseBlank'*/: break;\n\t\t\t\t\tcase 'value1' /*case 'Value1'*/: break;\n\t\t\t\t\tcase 'value2' /*case 'Value2'*/: break;\n\t\t\t\t\tcase 'format' /*case 'Format'*/: break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\t/* MapInfo (schema) */\n\t\t\t\tcase 'mapinfo' /*case 'MapInfo'*/: case 'schema' /*case 'Schema'*/: case 'data' /*case 'data'*/: switch(Rn[3]) {\n\t\t\t\t\tcase 'map' /*case 'Map'*/: break;\n\t\t\t\t\tcase 'entry' /*case 'Entry'*/: break;\n\t\t\t\t\tcase 'range' /*case 'Range'*/: break;\n\t\t\t\t\tcase 'xpath' /*case 'XPath'*/: break;\n\t\t\t\t\tcase 'field' /*case 'Field'*/: break;\n\t\t\t\t\tcase 'xsdtype' /*case 'XSDType'*/: break;\n\t\t\t\t\tcase 'filteron' /*case 'FilterOn'*/: break;\n\t\t\t\t\tcase 'aggregate' /*case 'Aggregate'*/: break;\n\t\t\t\t\tcase 'elementtype' /*case 'ElementType'*/: break;\n\t\t\t\t\tcase 'attributetype' /*case 'AttributeType'*/: break;\n\t\t\t\t/* These are from xsd (XML Schema Definition) */\n\t\t\t\t\tcase 'schema' /*case 'schema'*/:\n\t\t\t\t\tcase 'element' /*case 'element'*/:\n\t\t\t\t\tcase 'complextype' /*case 'complexType'*/:\n\t\t\t\t\tcase 'datatype' /*case 'datatype'*/:\n\t\t\t\t\tcase 'all' /*case 'all'*/:\n\t\t\t\t\tcase 'attribute' /*case 'attribute'*/:\n\t\t\t\t\tcase 'extends' /*case 'extends'*/: break;\n\n\t\t\t\t\tcase 'row' /*case 'row'*/: break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\t/* SmartTags (can be anything) */\n\t\t\t\tcase 'smarttags' /*case 'SmartTags'*/: break;\n\n\t\t\t\tdefault: seen = false; break;\n\t\t\t}\n\t\t\tif(seen) break;\n\t\t\t/* CustomDocumentProperties */\n\t\t\tif(Rn[3].match(/!\\[CDATA/)) break;\n\t\t\tif(!state[state.length-1][1]) throw 'Unrecognized tag: ' + Rn[3] + \"|\" + state.join(\"|\");\n\t\t\tif(state[state.length-1][0]===/*'CustomDocumentProperties'*/'customdocumentproperties') {\n\t\t\t\tif(Rn[0].slice(-2) === \"/>\") break;\n\t\t\t\telse if(Rn[1]===\"/\") xlml_set_custprop(Custprops, raw_Rn3, cp, str.slice(pidx, Rn.index));\n\t\t\t\telse { cp = Rn; pidx = Rn.index + Rn[0].length; }\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(opts.WTF) throw 'Unrecognized tag: ' + Rn[3] + \"|\" + state.join(\"|\");\n\t}\n\tvar out = ({});\n\tif(!opts.bookSheets && !opts.bookProps) out.Sheets = sheets;\n\tout.SheetNames = sheetnames;\n\tout.Workbook = Workbook;\n\tout.SSF = SSF.get_table();\n\tout.Props = Props;\n\tout.Custprops = Custprops;\n\treturn out;\n}\n\nfunction parse_xlml(data, opts) {\n\tfix_read_opts(opts=opts||{});\n\tswitch(opts.type||\"base64\") {\n\t\tcase \"base64\": return parse_xlml_xml(Base64.decode(data), opts);\n\t\tcase \"binary\": case \"buffer\": case \"file\": return parse_xlml_xml(data, opts);\n\t\tcase \"array\": return parse_xlml_xml(a2s(data), opts);\n\t}\n}\n\n/* TODO */\nfunction write_props_xlml(wb, opts) {\n\tvar o = [];\n\t/* DocumentProperties */\n\tif(wb.Props) o.push(xlml_write_docprops(wb.Props, opts));\n\t/* CustomDocumentProperties */\n\tif(wb.Custprops) o.push(xlml_write_custprops(wb.Props, wb.Custprops, opts));\n\treturn o.join(\"\");\n}\n/* TODO */\nfunction write_wb_xlml() {\n\t/* OfficeDocumentSettings */\n\t/* ExcelWorkbook */\n\treturn \"\";\n}\n/* TODO */\nfunction write_sty_xlml(wb, opts) {\n\t/* Styles */\n\tvar styles = ['<Style ss:ID=\"Default\" ss:Name=\"Normal\"><NumberFormat/></Style>'];\n\topts.cellXfs.forEach(function(xf, id) {\n\t\tvar payload = [];\n\t\tpayload.push(writextag('NumberFormat', null, {\"ss:Format\": escapexml(SSF._table[xf.numFmtId])}));\n\n\t\tvar o = {\"ss:ID\": \"s\" + (21+id)};\n\t\tstyles.push(writextag('Style', payload.join(\"\"), o));\n\t});\n\treturn writextag(\"Styles\", styles.join(\"\"));\n}\nfunction write_name_xlml(n) { return writextag(\"NamedRange\", null, {\"ss:Name\": n.Name, \"ss:RefersTo\":\"=\" + a1_to_rc(n.Ref, {r:0,c:0})}); }\nfunction write_names_xlml(wb) {\n\tif(!((wb||{}).Workbook||{}).Names) return \"\";\nvar names = wb.Workbook.Names;\n\tvar out = [];\n\tfor(var i = 0; i < names.length; ++i) {\n\t\tvar n = names[i];\n\t\tif(n.Sheet != null) continue;\n\t\tif(n.Name.match(/^_xlfn\\./)) continue;\n\t\tout.push(write_name_xlml(n));\n\t}\n\treturn writextag(\"Names\", out.join(\"\"));\n}\nfunction write_ws_xlml_names(ws, opts, idx, wb) {\n\tif(!ws) return \"\";\n\tif(!((wb||{}).Workbook||{}).Names) return \"\";\nvar names = wb.Workbook.Names;\n\tvar out = [];\n\tfor(var i = 0; i < names.length; ++i) {\n\t\tvar n = names[i];\n\t\tif(n.Sheet != idx) continue;\n\t\t/*switch(n.Name) {\n\t\t\tcase \"_\": continue;\n\t\t}*/\n\t\tif(n.Name.match(/^_xlfn\\./)) continue;\n\t\tout.push(write_name_xlml(n));\n\t}\n\treturn out.join(\"\");\n}\n/* WorksheetOptions */\nfunction write_ws_xlml_wsopts(ws, opts, idx, wb) {\n\tif(!ws) return \"\";\n\tvar o = [];\n\t/* NOTE: spec technically allows any order, but stick with implied order */\n\n\t/* FitToPage */\n\t/* DoNotDisplayColHeaders */\n\t/* DoNotDisplayRowHeaders */\n\t/* ViewableRange */\n\t/* Selection */\n\t/* GridlineColor */\n\t/* Name */\n\t/* ExcelWorksheetType */\n\t/* IntlMacro */\n\t/* Unsynced */\n\t/* Selected */\n\t/* CodeName */\n\n\tif(ws['!margins']) {\n\t\to.push(\"<PageSetup>\");\n\t\tif(ws['!margins'].header) o.push(writextag(\"Header\", null, {'x:Margin':ws['!margins'].header}));\n\t\tif(ws['!margins'].footer) o.push(writextag(\"Footer\", null, {'x:Margin':ws['!margins'].footer}));\n\t\to.push(writextag(\"PageMargins\", null, {\n\t\t\t'x:Bottom': ws['!margins'].bottom || \"0.75\",\n\t\t\t'x:Left': ws['!margins'].left || \"0.7\",\n\t\t\t'x:Right': ws['!margins'].right || \"0.7\",\n\t\t\t'x:Top': ws['!margins'].top || \"0.75\"\n\t\t}));\n\t\to.push(\"</PageSetup>\");\n\t}\n\n\t/* PageSetup */\n\t/* DisplayPageBreak */\n\t/* TransitionExpressionEvaluation */\n\t/* TransitionFormulaEntry */\n\t/* Print */\n\t/* Zoom */\n\t/* PageLayoutZoom */\n\t/* PageBreakZoom */\n\t/* ShowPageBreakZoom */\n\t/* DefaultRowHeight */\n\t/* DefaultColumnWidth */\n\t/* StandardWidth */\n\n\tif(wb && wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx]) {\n\t\t/* Visible */\n\t\tif(wb.Workbook.Sheets[idx].Hidden) o.push(writextag(\"Visible\", (wb.Workbook.Sheets[idx].Hidden == 1 ? \"SheetHidden\" : \"SheetVeryHidden\"), {}));\n\t\telse {\n\t\t\t/* Selected */\n\t\t\tfor(var i = 0; i < idx; ++i) if(wb.Workbook.Sheets[i] && !wb.Workbook.Sheets[i].Hidden) break;\n\t\t\tif(i == idx) o.push(\"<Selected/>\");\n\t\t}\n\t}\n\n\t/* LeftColumnVisible */\n\n\tif(((((wb||{}).Workbook||{}).Views||[])[0]||{}).RTL) o.push(\"<DisplayRightToLeft/>\");\n\n\t/* GridlineColorIndex */\n\t/* DisplayFormulas */\n\t/* DoNotDisplayGridlines */\n\t/* DoNotDisplayHeadings */\n\t/* DoNotDisplayOutline */\n\t/* ApplyAutomaticOutlineStyles */\n\t/* NoSummaryRowsBelowDetail */\n\t/* NoSummaryColumnsRightDetail */\n\t/* DoNotDisplayZeros */\n\t/* ActiveRow */\n\t/* ActiveColumn */\n\t/* FilterOn */\n\t/* RangeSelection */\n\t/* TopRowVisible */\n\t/* TopRowBottomPane */\n\t/* LeftColumnRightPane */\n\t/* ActivePane */\n\t/* SplitHorizontal */\n\t/* SplitVertical */\n\t/* FreezePanes */\n\t/* FrozenNoSplit */\n\t/* TabColorIndex */\n\t/* Panes */\n\n\t/* NOTE: Password not supported in XLML Format */\n\tif(ws['!protect']) {\n\t\to.push(writetag(\"ProtectContents\", \"True\"));\n\t\tif(ws['!protect'].objects) o.push(writetag(\"ProtectObjects\", \"True\"));\n\t\tif(ws['!protect'].scenarios) o.push(writetag(\"ProtectScenarios\", \"True\"));\n\t\tif(ws['!protect'].selectLockedCells != null && !ws['!protect'].selectLockedCells) o.push(writetag(\"EnableSelection\", \"NoSelection\"));\n\t\telse if(ws['!protect'].selectUnlockedCells != null && !ws['!protect'].selectUnlockedCells) o.push(writetag(\"EnableSelection\", \"UnlockedCells\"));\n\t[\n\t\t[ \"formatCells\", \"AllowFormatCells\" ],\n\t\t[ \"formatColumns\", \"AllowSizeCols\" ],\n\t\t[ \"formatRows\", \"AllowSizeRows\" ],\n\t\t[ \"insertColumns\", \"AllowInsertCols\" ],\n\t\t[ \"insertRows\", \"AllowInsertRows\" ],\n\t\t[ \"insertHyperlinks\", \"AllowInsertHyperlinks\" ],\n\t\t[ \"deleteColumns\", \"AllowDeleteCols\" ],\n\t\t[ \"deleteRows\", \"AllowDeleteRows\" ],\n\t\t[ \"sort\", \"AllowSort\" ],\n\t\t[ \"autoFilter\", \"AllowFilter\" ],\n\t\t[ \"pivotTables\", \"AllowUsePivotTables\" ]\n\t].forEach(function(x) { if(ws['!protect'][x[0]]) o.push(\"<\"+x[1]+\"/>\"); });\n\t}\n\n\tif(o.length == 0) return \"\";\n\treturn writextag(\"WorksheetOptions\", o.join(\"\"), {xmlns:XLMLNS.x});\n}\nfunction write_ws_xlml_comment(comments) {\n\treturn comments.map(function(c) {\n\t\t// TODO: formatted text\n\t\tvar t = xlml_unfixstr(c.t||\"\");\n\t\tvar d =writextag(\"ss:Data\", t, {\"xmlns\":\"http://www.w3.org/TR/REC-html40\"});\n\t\treturn writextag(\"Comment\", d, {\"ss:Author\":c.a});\n\t}).join(\"\");\n}\nfunction write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr){\n\tif(!cell || (cell.v == undefined && cell.f == undefined)) return \"\";\n\n\tvar attr = {};\n\tif(cell.f) attr[\"ss:Formula\"] = \"=\" + escapexml(a1_to_rc(cell.f, addr));\n\tif(cell.F && cell.F.slice(0, ref.length) == ref) {\n\t\tvar end = decode_cell(cell.F.slice(ref.length + 1));\n\t\tattr[\"ss:ArrayRange\"] = \"RC:R\" + (end.r == addr.r ? \"\" : \"[\" + (end.r - addr.r) + \"]\") + \"C\" + (end.c == addr.c ? \"\" : \"[\" + (end.c - addr.c) + \"]\");\n\t}\n\n\tif(cell.l && cell.l.Target) {\n\t\tattr[\"ss:HRef\"] = escapexml(cell.l.Target);\n\t\tif(cell.l.Tooltip) attr[\"x:HRefScreenTip\"] = escapexml(cell.l.Tooltip);\n\t}\n\n\tif(ws['!merges']) {\n\t\tvar marr = ws['!merges'];\n\t\tfor(var mi = 0; mi != marr.length; ++mi) {\n\t\t\tif(marr[mi].s.c != addr.c || marr[mi].s.r != addr.r) continue;\n\t\t\tif(marr[mi].e.c > marr[mi].s.c) attr['ss:MergeAcross'] = marr[mi].e.c - marr[mi].s.c;\n\t\t\tif(marr[mi].e.r > marr[mi].s.r) attr['ss:MergeDown'] = marr[mi].e.r - marr[mi].s.r;\n\t\t}\n\t}\n\n\tvar t = \"\", p = \"\";\n\tswitch(cell.t) {\n\t\tcase 'z': if(!opts.sheetStubs) return \"\"; break;\n\t\tcase 'n': t = 'Number'; p = String(cell.v); break;\n\t\tcase 'b': t = 'Boolean'; p = (cell.v ? \"1\" : \"0\"); break;\n\t\tcase 'e': t = 'Error'; p = BErr[cell.v]; break;\n\t\tcase 'd': t = 'DateTime'; p = new Date(cell.v).toISOString(); if(cell.z == null) cell.z = cell.z || SSF._table[14]; break;\n\t\tcase 's': t = 'String'; p = escapexlml(cell.v||\"\"); break;\n\t}\n\t/* TODO: cell style */\n\tvar os = get_cell_style(opts.cellXfs, cell, opts);\n\tattr[\"ss:StyleID\"] = \"s\" + (21+os);\n\tattr[\"ss:Index\"] = addr.c + 1;\n\tvar _v = (cell.v != null ? p : \"\");\n\tvar m = cell.t == 'z' ? \"\" : ('<Data ss:Type=\"' + t + '\">' + _v + '</Data>');\n\n\tif((cell.c||[]).length > 0) m += write_ws_xlml_comment(cell.c);\n\n\treturn writextag(\"Cell\", m, attr);\n}\nfunction write_ws_xlml_row(R, row) {\n\tvar o = '<Row ss:Index=\"' + (R+1) + '\"';\n\tif(row) {\n\t\tif(row.hpt && !row.hpx) row.hpx = pt2px(row.hpt);\n\t\tif(row.hpx) o += ' ss:AutoFitHeight=\"0\" ss:Height=\"' + row.hpx + '\"';\n\t\tif(row.hidden) o += ' ss:Hidden=\"1\"';\n\t}\n\treturn o + '>';\n}\n/* TODO */\nfunction write_ws_xlml_table(ws, opts, idx, wb) {\n\tif(!ws['!ref']) return \"\";\n\tvar range = safe_decode_range(ws['!ref']);\n\tvar marr = ws['!merges'] || [], mi = 0;\n\tvar o = [];\n\tif(ws['!cols']) ws['!cols'].forEach(function(n, i) {\n\t\tprocess_col(n);\n\t\tvar w = !!n.width;\n\t\tvar p = col_obj_w(i, n);\n\t\tvar k = {\"ss:Index\":i+1};\n\t\tif(w) k['ss:Width'] = width2px(p.width);\n\t\tif(n.hidden) k['ss:Hidden']=\"1\";\n\t\to.push(writextag(\"Column\",null,k));\n\t});\n\tvar dense = Array.isArray(ws);\n\tfor(var R = range.s.r; R <= range.e.r; ++R) {\n\t\tvar row = [write_ws_xlml_row(R, (ws['!rows']||[])[R])];\n\t\tfor(var C = range.s.c; C <= range.e.c; ++C) {\n\t\t\tvar skip = false;\n\t\t\tfor(mi = 0; mi != marr.length; ++mi) {\n\t\t\t\tif(marr[mi].s.c > C) continue;\n\t\t\t\tif(marr[mi].s.r > R) continue;\n\t\t\t\tif(marr[mi].e.c < C) continue;\n\t\t\t\tif(marr[mi].e.r < R) continue;\n\t\t\t\tif(marr[mi].s.c != C || marr[mi].s.r != R) skip = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(skip) continue;\n\t\t\tvar addr = {r:R,c:C};\n\t\t\tvar ref = encode_cell(addr), cell = dense ? (ws[R]||[])[C] : ws[ref];\n\t\t\trow.push(write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr));\n\t\t}\n\t\trow.push(\"</Row>\");\n\t\tif(row.length > 2) o.push(row.join(\"\"));\n\t}\n\treturn o.join(\"\");\n}\nfunction write_ws_xlml(idx, opts, wb) {\n\tvar o = [];\n\tvar s = wb.SheetNames[idx];\n\tvar ws = wb.Sheets[s];\n\n\tvar t = ws ? write_ws_xlml_names(ws, opts, idx, wb) : \"\";\n\tif(t.length > 0) o.push(\"<Names>\" + t + \"</Names>\");\n\n\t/* Table */\n\tt = ws ? write_ws_xlml_table(ws, opts, idx, wb) : \"\";\n\tif(t.length > 0) o.push(\"<Table>\" + t + \"</Table>\");\n\n\t/* WorksheetOptions */\n\to.push(write_ws_xlml_wsopts(ws, opts, idx, wb));\n\n\treturn o.join(\"\");\n}\nfunction write_xlml(wb, opts) {\n\tif(!opts) opts = {};\n\tif(!wb.SSF) wb.SSF = SSF.get_table();\n\tif(wb.SSF) {\n\t\tmake_ssf(SSF); SSF.load_table(wb.SSF);\n\t\t// $FlowIgnore\n\t\topts.revssf = evert_num(wb.SSF); opts.revssf[wb.SSF[65535]] = 0;\n\t\topts.ssf = wb.SSF;\n\t\topts.cellXfs = [];\n\t\tget_cell_style(opts.cellXfs, {}, {revssf:{\"General\":0}});\n\t}\n\tvar d = [];\n\td.push(write_props_xlml(wb, opts));\n\td.push(write_wb_xlml(wb, opts));\n\td.push(\"\");\n\td.push(\"\");\n\tfor(var i = 0; i < wb.SheetNames.length; ++i)\n\t\td.push(writextag(\"Worksheet\", write_ws_xlml(i, opts, wb), {\"ss:Name\":escapexml(wb.SheetNames[i])}));\n\td[2] = write_sty_xlml(wb, opts);\n\td[3] = write_names_xlml(wb, opts);\n\treturn XML_HEADER + writextag(\"Workbook\", d.join(\"\"), {\n\t\t'xmlns':      XLMLNS.ss,\n\t\t'xmlns:o':    XLMLNS.o,\n\t\t'xmlns:x':    XLMLNS.x,\n\t\t'xmlns:ss':   XLMLNS.ss,\n\t\t'xmlns:dt':   XLMLNS.dt,\n\t\t'xmlns:html': XLMLNS.html\n\t});\n}\n/* [MS-OLEDS] 2.3.8 CompObjStream */\nfunction parse_compobj(obj) {\n\tvar v = {};\n\tvar o = obj.content;\n/* [MS-OLEDS] 2.3.7 CompObjHeader -- All fields MUST be ignored */\n\to.l = 28;\n\n\tv.AnsiUserType = o.read_shift(0, \"lpstr-ansi\");\n\tv.AnsiClipboardFormat = parse_ClipboardFormatOrAnsiString(o);\n\n\tif(o.length - o.l <= 4) return v;\n\n\tvar m = o.read_shift(4);\n\tif(m == 0 || m > 40) return v;\n\to.l-=4; v.Reserved1 = o.read_shift(0, \"lpstr-ansi\");\n\n\tif(o.length - o.l <= 4) return v;\n\tm = o.read_shift(4);\n\tif(m !== 0x71b239f4) return v;\n\tv.UnicodeClipboardFormat = parse_ClipboardFormatOrUnicodeString(o);\n\n\tm = o.read_shift(4);\n\tif(m == 0 || m > 40) return v;\n\to.l-=4; v.Reserved2 = o.read_shift(0, \"lpwstr\");\n}\n\n/*\n\tContinue logic for:\n\t- 2.4.58 Continue\n\t- 2.4.59 ContinueBigName\n\t- 2.4.60 ContinueFrt\n\t- 2.4.61 ContinueFrt11\n\t- 2.4.62 ContinueFrt12\n*/\nfunction slurp(R, blob, length, opts) {\n\tvar l = length;\n\tvar bufs = [];\n\tvar d = blob.slice(blob.l,blob.l+l);\n\tif(opts && opts.enc && opts.enc.insitu && d.length > 0) switch(R.n) {\n\tcase 'BOF': case 'FilePass': case 'FileLock': case 'InterfaceHdr': case 'RRDInfo': case 'RRDHead': case 'UsrExcl': case 'EOF':\n\t\tbreak;\n\tcase 'BoundSheet8':\n\t\tbreak;\n\tdefault:\n\t\topts.enc.insitu(d);\n\t}\n\tbufs.push(d);\n\tblob.l += l;\n\tvar next = (XLSRecordEnum[__readUInt16LE(blob,blob.l)]);\n\tvar start = 0;\n\twhile(next != null && next.n.slice(0,8) === 'Continue') {\n\t\tl = __readUInt16LE(blob,blob.l+2);\n\t\tstart = blob.l + 4;\n\t\tif(next.n == 'ContinueFrt') start += 4;\n\t\telse if(next.n.slice(0,11) == 'ContinueFrt') {\n\t\t\tstart += 12;\n\t\t}\n\t\td = blob.slice(start,blob.l+4+l);\n\t\tbufs.push(d);\n\t\tblob.l += 4+l;\n\t\tnext = (XLSRecordEnum[__readUInt16LE(blob, blob.l)]);\n\t}\n\tvar b = (bconcat(bufs));\n\tprep_blob(b, 0);\n\tvar ll = 0; b.lens = [];\n\tfor(var j = 0; j < bufs.length; ++j) { b.lens.push(ll); ll += bufs[j].length; }\n\tif(b.length < length) throw \"XLS Record \" + (R && R.n || \"??\") + \" Truncated: \" + b.length + \" < \" + length;\n\treturn R.f(b, b.length, opts);\n}\n\nfunction safe_format_xf(p, opts, date1904) {\n\tif(p.t === 'z') return;\n\tif(!p.XF) return;\n\tvar fmtid = 0;\n\ttry {\n\t\tfmtid = p.z || p.XF.numFmtId || 0;\n\t\tif(opts.cellNF) p.z = SSF._table[fmtid];\n\t} catch(e) { if(opts.WTF) throw e; }\n\tif(!opts || opts.cellText !== false) try {\n\t\tif(p.t === 'e') { p.w = p.w || BErr[p.v]; }\n\t\telse if(fmtid === 0 || fmtid == \"General\") {\n\t\t\tif(p.t === 'n') {\n\t\t\t\tif((p.v|0) === p.v) p.w = SSF._general_int(p.v);\n\t\t\t\telse p.w = SSF._general_num(p.v);\n\t\t\t}\n\t\t\telse p.w = SSF._general(p.v);\n\t\t}\n\t\telse p.w = SSF.format(fmtid,p.v, {date1904:!!date1904, dateNF: opts && opts.dateNF});\n\t} catch(e) { if(opts.WTF) throw e; }\n\tif(opts.cellDates && fmtid && p.t == 'n' && SSF.is_date(SSF._table[fmtid] || String(fmtid))) {\n\t\tvar _d = SSF.parse_date_code(p.v); if(_d) { p.t = 'd'; p.v = new Date(_d.y, _d.m-1,_d.d,_d.H,_d.M,_d.S,_d.u); }\n\t}\n}\n\nfunction make_cell(val, ixfe, t) {\n\treturn ({v:val, ixfe:ixfe, t:t});\n}\n\n// 2.3.2\nfunction parse_workbook(blob, options) {\n\tvar wb = ({opts:{}});\n\tvar Sheets = {};\n\tif(DENSE != null && options.dense == null) options.dense = DENSE;\n\tvar out = ((options.dense ? [] : {}));\n\tvar Directory = {};\n\tvar range = ({});\n\tvar last_formula = null;\n\tvar sst = ([]);\n\tvar cur_sheet = \"\";\n\tvar Preamble = {};\n\tvar lastcell, last_cell = \"\", cc, cmnt, rngC, rngR;\n\tvar sharedf = {};\n\tvar arrayf = [];\n\tvar temp_val;\n\tvar country;\n\tvar XFs = []; /* XF records */\n\tvar palette = [];\n\tvar Workbook = ({ Sheets:[], WBProps:{date1904:false}, Views:[{}] }), wsprops = {};\n\tvar get_rgb = function getrgb(icv) {\n\t\tif(icv < 8) return XLSIcv[icv];\n\t\tif(icv < 64) return palette[icv-8] || XLSIcv[icv];\n\t\treturn XLSIcv[icv];\n\t};\n\tvar process_cell_style = function pcs(cell, line, options) {\n\t\tvar xfd = line.XF.data;\n\t\tif(!xfd || !xfd.patternType || !options || !options.cellStyles) return;\n\t\tline.s = ({});\n\t\tline.s.patternType = xfd.patternType;\n\t\tvar t;\n\t\tif((t = rgb2Hex(get_rgb(xfd.icvFore)))) { line.s.fgColor = {rgb:t}; }\n\t\tif((t = rgb2Hex(get_rgb(xfd.icvBack)))) { line.s.bgColor = {rgb:t}; }\n\t};\n\tvar addcell = function addcell(cell, line, options) {\n\t\tif(file_depth > 1) return;\n\t\tif(options.sheetRows && cell.r >= options.sheetRows) return;\n\t\tif(options.cellStyles && line.XF && line.XF.data) process_cell_style(cell, line, options);\n\t\tdelete line.ixfe; delete line.XF;\n\t\tlastcell = cell;\n\t\tlast_cell = encode_cell(cell);\n\t\tif(!range || !range.s || !range.e) range = {s:{r:0,c:0},e:{r:0,c:0}};\n\t\tif(cell.r < range.s.r) range.s.r = cell.r;\n\t\tif(cell.c < range.s.c) range.s.c = cell.c;\n\t\tif(cell.r + 1 > range.e.r) range.e.r = cell.r + 1;\n\t\tif(cell.c + 1 > range.e.c) range.e.c = cell.c + 1;\n\t\tif(options.cellFormula && line.f) {\n\t\t\tfor(var afi = 0; afi < arrayf.length; ++afi) {\n\t\t\t\tif(arrayf[afi][0].s.c > cell.c || arrayf[afi][0].s.r > cell.r) continue;\n\t\t\t\tif(arrayf[afi][0].e.c < cell.c || arrayf[afi][0].e.r < cell.r) continue;\n\t\t\t\tline.F = encode_range(arrayf[afi][0]);\n\t\t\t\tif(arrayf[afi][0].s.c != cell.c || arrayf[afi][0].s.r != cell.r) delete line.f;\n\t\t\t\tif(line.f) line.f = \"\" + stringify_formula(arrayf[afi][1], range, cell, supbooks, opts);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t{\n\t\t\tif(options.dense) {\n\t\t\t\tif(!out[cell.r]) out[cell.r] = [];\n\t\t\t\tout[cell.r][cell.c] = line;\n\t\t\t} else out[last_cell] = line;\n\t\t}\n\t};\n\tvar opts = ({\n\t\tenc: false, // encrypted\n\t\tsbcch: 0, // cch in the preceding SupBook\n\t\tsnames: [], // sheetnames\n\t\tsharedf: sharedf, // shared formulae by address\n\t\tarrayf: arrayf, // array formulae array\n\t\trrtabid: [], // RRTabId\n\t\tlastuser: \"\", // Last User from WriteAccess\n\t\tbiff: 8, // BIFF version\n\t\tcodepage: 0, // CP from CodePage record\n\t\twinlocked: 0, // fLockWn from WinProtect\n\t\tcellStyles: !!options && !!options.cellStyles,\n\t\tWTF: !!options && !!options.wtf\n\t});\n\tif(options.password) opts.password = options.password;\n\tvar themes;\n\tvar merges = [];\n\tvar objects = [];\n\tvar colinfo = [], rowinfo = [];\n\t// eslint-disable-next-line no-unused-vars\n\tvar defwidth = 0, defheight = 0; // twips / MDW respectively\n\tvar seencol = false;\n\tvar supbooks = ([]); // 1-indexed, will hold extern names\n\tsupbooks.SheetNames = opts.snames;\n\tsupbooks.sharedf = opts.sharedf;\n\tsupbooks.arrayf = opts.arrayf;\n\tsupbooks.names = [];\n\tsupbooks.XTI = [];\n\tvar last_Rn = '';\n\tvar file_depth = 0; /* TODO: make a real stack */\n\tvar BIFF2Fmt = 0, BIFF2FmtTable = [];\n\tvar FilterDatabases = []; /* TODO: sort out supbooks and process elsewhere */\n\tvar last_lbl;\n\n\t/* explicit override for some broken writers */\n\topts.codepage = 1200;\n\tset_cp(1200);\n\tvar seen_codepage = false;\n\twhile(blob.l < blob.length - 1) {\n\t\tvar s = blob.l;\n\t\tvar RecordType = blob.read_shift(2);\n\t\tif(RecordType === 0 && last_Rn === 'EOF') break;\n\t\tvar length = (blob.l === blob.length ? 0 : blob.read_shift(2));\n\t\tvar R = XLSRecordEnum[RecordType];\n\t\t//console.log(RecordType.toString(16), RecordType, R, blob.l, length, blob.length);\n\t\t//if(!R) console.log(blob.slice(blob.l, blob.l + length));\n\t\tif(R && R.f) {\n\t\t\tif(options.bookSheets) {\n\t\t\t\tif(last_Rn === 'BoundSheet8' && R.n !== 'BoundSheet8') break;\n\t\t\t}\n\t\t\tlast_Rn = R.n;\n\t\t\tif(R.r === 2 || R.r == 12) {\n\t\t\t\tvar rt = blob.read_shift(2); length -= 2;\n\t\t\t\tif(!opts.enc && rt !== RecordType && (((rt&0xFF)<<8)|(rt>>8)) !== RecordType) throw new Error(\"rt mismatch: \" + rt + \"!=\" + RecordType);\n\t\t\t\tif(R.r == 12){\n\t\t\t\t\tblob.l += 10; length -= 10;\n\t\t\t\t} // skip FRT\n\t\t\t}\n\t\t\t//console.error(R,blob.l,length,blob.length);\n\t\t\tvar val = ({});\n\t\t\tif(R.n === 'EOF') val = R.f(blob, length, opts);\n\t\t\telse val = slurp(R, blob, length, opts);\n\t\t\tvar Rn = R.n;\nif(file_depth == 0 && Rn != 'BOF') continue;\n\t\t\t/* nested switch statements to workaround V8 128 limit */\n\t\t\tswitch(Rn) {\n\t\t\t\t/* Workbook Options */\n\t\t\t\tcase 'Date1904':\nwb.opts.Date1904 = Workbook.WBProps.date1904 = val; break;\n\t\t\t\tcase 'WriteProtect': wb.opts.WriteProtect = true; break;\n\t\t\t\tcase 'FilePass':\n\t\t\t\t\tif(!opts.enc) blob.l = 0;\n\t\t\t\t\topts.enc = val;\n\t\t\t\t\tif(!options.password) throw new Error(\"File is password-protected\");\n\t\t\t\t\tif(val.valid == null) throw new Error(\"Encryption scheme unsupported\");\n\t\t\t\t\tif(!val.valid) throw new Error(\"Password is incorrect\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'WriteAccess': opts.lastuser = val; break;\n\t\t\t\tcase 'FileSharing': break; //TODO\n\t\t\t\tcase 'CodePage':\n\t\t\t\t\tvar cpval = Number(val);\n\t\t\t\t\t/* overrides based on test cases */\n\t\t\t\t\tswitch(cpval) {\n\t\t\t\t\t\tcase 0x5212: cpval =  1200; break;\n\t\t\t\t\t\tcase 0x8000: cpval = 10000; break;\n\t\t\t\t\t\tcase 0x8001: cpval =  1252; break;\n\t\t\t\t\t}\n\t\t\t\t\tset_cp(opts.codepage = cpval);\n\t\t\t\t\tseen_codepage = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'RRTabId': opts.rrtabid = val; break;\n\t\t\t\tcase 'WinProtect': opts.winlocked = val; break;\n\t\t\t\tcase 'Template': break; // TODO\n\t\t\t\tcase 'BookBool': break; // TODO\n\t\t\t\tcase 'UsesELFs': break;\n\t\t\t\tcase 'MTRSettings': break;\n\t\t\t\tcase 'RefreshAll':\n\t\t\t\tcase 'CalcCount':\n\t\t\t\tcase 'CalcDelta':\n\t\t\t\tcase 'CalcIter':\n\t\t\t\tcase 'CalcMode':\n\t\t\t\tcase 'CalcPrecision':\n\t\t\t\tcase 'CalcSaveRecalc':\n\t\t\t\t\twb.opts[Rn] = val; break;\n\t\t\t\tcase 'CalcRefMode': opts.CalcRefMode = val; break; // TODO: implement R1C1\n\t\t\t\tcase 'Uncalced': break;\n\t\t\t\tcase 'ForceFullCalculation': wb.opts.FullCalc = val; break;\n\t\t\t\tcase 'WsBool':\n\t\t\t\t\tif(val.fDialog) out[\"!type\"] = \"dialog\";\n\t\t\t\t\tif(!val.fBelow) (out[\"!outline\"] || (out[\"!outline\"] = {})).above = true;\n\t\t\t\t\tif(!val.fRight) (out[\"!outline\"] || (out[\"!outline\"] = {})).left = true;\n\t\t\t\t\tbreak; // TODO\n\t\t\t\tcase 'XF':\n\t\t\t\t\tXFs.push(val); break;\n\t\t\t\tcase 'ExtSST': break; // TODO\n\t\t\t\tcase 'BookExt': break; // TODO\n\t\t\t\tcase 'RichTextStream': break;\n\t\t\t\tcase 'BkHim': break;\n\n\t\t\t\tcase 'SupBook':\n\t\t\t\t\tsupbooks.push([val]);\n\t\t\t\t\tsupbooks[supbooks.length-1].XTI = [];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ExternName':\n\t\t\t\t\tsupbooks[supbooks.length-1].push(val);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Index': break; // TODO\n\t\t\t\tcase 'Lbl':\n\t\t\t\t\tlast_lbl = ({\n\t\t\t\t\t\tName: val.Name,\n\t\t\t\t\t\tRef: stringify_formula(val.rgce,range,null,supbooks,opts)\n\t\t\t\t\t});\n\t\t\t\t\tif(val.itab > 0) last_lbl.Sheet = val.itab - 1;\n\t\t\t\t\tsupbooks.names.push(last_lbl);\n\t\t\t\t\tif(!supbooks[0]) { supbooks[0] = []; supbooks[0].XTI = []; }\n\t\t\t\t\tsupbooks[supbooks.length-1].push(val);\n\t\t\t\t\tif(val.Name == \"_xlnm._FilterDatabase\" && val.itab > 0)\n\t\t\t\t\t\tif(val.rgce && val.rgce[0] && val.rgce[0][0] && val.rgce[0][0][0] == 'PtgArea3d')\n\t\t\t\t\t\t\tFilterDatabases[val.itab - 1] = { ref: encode_range(val.rgce[0][0][1][2]) };\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ExternCount': opts.ExternCount = val; break;\n\t\t\t\tcase 'ExternSheet':\n\t\t\t\t\tif(supbooks.length == 0) { supbooks[0] = []; supbooks[0].XTI = []; }\n\t\t\t\t\tsupbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val); supbooks.XTI = supbooks.XTI.concat(val); break;\n\t\t\t\tcase 'NameCmt':\n\t\t\t\t\t/* TODO: search for correct name */\n\t\t\t\t\tif(opts.biff < 8) break;\n\t\t\t\t\tif(last_lbl != null) last_lbl.Comment = val[1];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Protect': out[\"!protect\"] = val; break; /* for sheet or book */\n\t\t\t\tcase 'Password': if(val !== 0 && opts.WTF) console.error(\"Password verifier: \" + val); break;\n\t\t\t\tcase 'Prot4Rev': case 'Prot4RevPass': break; /*TODO: Revision Control*/\n\n\t\t\t\tcase 'BoundSheet8': {\n\t\t\t\t\tDirectory[val.pos] = val;\n\t\t\t\t\topts.snames.push(val.name);\n\t\t\t\t} break;\n\t\t\t\tcase 'EOF': {\n\t\t\t\t\tif(--file_depth) break;\n\t\t\t\t\tif(range.e) {\n\t\t\t\t\t\tif(range.e.r > 0 && range.e.c > 0) {\n\t\t\t\t\t\t\trange.e.r--; range.e.c--;\n\t\t\t\t\t\t\tout[\"!ref\"] = encode_range(range);\n\t\t\t\t\t\t\tif(options.sheetRows && options.sheetRows <= range.e.r) {\n\t\t\t\t\t\t\t\tvar tmpri = range.e.r;\n\t\t\t\t\t\t\t\trange.e.r = options.sheetRows - 1;\n\t\t\t\t\t\t\t\tout[\"!fullref\"] = out[\"!ref\"];\n\t\t\t\t\t\t\t\tout[\"!ref\"] = encode_range(range);\n\t\t\t\t\t\t\t\trange.e.r = tmpri;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\trange.e.r++; range.e.c++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(merges.length > 0) out[\"!merges\"] = merges;\n\t\t\t\t\t\tif(objects.length > 0) out[\"!objects\"] = objects;\n\t\t\t\t\t\tif(colinfo.length > 0) out[\"!cols\"] = colinfo;\n\t\t\t\t\t\tif(rowinfo.length > 0) out[\"!rows\"] = rowinfo;\n\t\t\t\t\t\tWorkbook.Sheets.push(wsprops);\n\t\t\t\t\t}\n\t\t\t\t\tif(cur_sheet === \"\") Preamble = out; else Sheets[cur_sheet] = out;\n\t\t\t\t\tout = ((options.dense ? [] : {}));\n\t\t\t\t} break;\n\t\t\t\tcase 'BOF': {\n\t\t\t\t\tif(opts.biff === 8) opts.biff = {\n0x0009:2,\n0x0209:3,\n0x0409:4\n\t\t\t\t\t}[RecordType] || {\n0x0200:2,\n0x0300:3,\n0x0400:4,\n0x0500:5,\n0x0600:8,\n0x0002:2,\n0x0007:2\n\t\t\t\t\t}[val.BIFFVer] || 8;\n\t\t\t\t\topts.biffguess = val.BIFFVer == 0;\n\t\t\t\t\tif(val.BIFFVer == 0 && val.dt == 0x1000) { opts.biff = 5; seen_codepage = true; set_cp(opts.codepage = 28591); }\n\t\t\t\t\tif(opts.biff == 8 && val.BIFFVer == 0 && val.dt == 16) opts.biff = 2;\n\t\t\t\t\tif(file_depth++) break;\n\t\t\t\t\tout = ((options.dense ? [] : {}));\n\n\t\t\t\t\tif(opts.biff < 8 && !seen_codepage) { seen_codepage = true; set_cp(opts.codepage = options.codepage || 1252); }\n\n\t\t\t\t\tif(opts.biff < 5 || val.BIFFVer == 0 && val.dt == 0x1000) {\n\t\t\t\t\t\tif(cur_sheet === \"\") cur_sheet = \"Sheet1\";\n\t\t\t\t\t\trange = {s:{r:0,c:0},e:{r:0,c:0}};\n\t\t\t\t\t\t/* fake BoundSheet8 */\n\t\t\t\t\t\tvar fakebs8 = {pos: blob.l - length, name:cur_sheet};\n\t\t\t\t\t\tDirectory[fakebs8.pos] = fakebs8;\n\t\t\t\t\t\topts.snames.push(cur_sheet);\n\t\t\t\t\t}\n\t\t\t\t\telse cur_sheet = (Directory[s] || {name:\"\"}).name;\n\t\t\t\t\tif(val.dt == 0x20) out[\"!type\"] = \"chart\";\n\t\t\t\t\tif(val.dt == 0x40) out[\"!type\"] = \"macro\";\n\t\t\t\t\tmerges = [];\n\t\t\t\t\tobjects = [];\n\t\t\t\t\topts.arrayf = arrayf = [];\n\t\t\t\t\tcolinfo = []; rowinfo = [];\n\t\t\t\t\tdefwidth = defheight = 0;\n\t\t\t\t\tseencol = false;\n\t\t\t\t\twsprops = {Hidden:(Directory[s]||{hs:0}).hs, name:cur_sheet };\n\t\t\t\t} break;\n\n\t\t\t\tcase 'Number': case 'BIFF2NUM': case 'BIFF2INT': {\n\t\t\t\t\tif(out[\"!type\"] == \"chart\") if(options.dense ? (out[val.r]||[])[val.c]: out[encode_cell({c:val.c, r:val.r})]) ++val.c;\n\t\t\t\t\ttemp_val = ({ixfe: val.ixfe, XF: XFs[val.ixfe]||{}, v:val.val, t:'n'});\n\t\t\t\t\tif(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];\n\t\t\t\t\tsafe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\taddcell({c:val.c, r:val.r}, temp_val, options);\n\t\t\t\t} break;\n\t\t\t\tcase 'BoolErr': {\n\t\t\t\t\ttemp_val = ({ixfe: val.ixfe, XF: XFs[val.ixfe], v:val.val, t:val.t});\n\t\t\t\t\tif(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];\n\t\t\t\t\tsafe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\taddcell({c:val.c, r:val.r}, temp_val, options);\n\t\t\t\t} break;\n\t\t\t\tcase 'RK': {\n\t\t\t\t\ttemp_val = ({ixfe: val.ixfe, XF: XFs[val.ixfe], v:val.rknum, t:'n'});\n\t\t\t\t\tif(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];\n\t\t\t\t\tsafe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\taddcell({c:val.c, r:val.r}, temp_val, options);\n\t\t\t\t} break;\n\t\t\t\tcase 'MulRk': {\n\t\t\t\t\tfor(var j = val.c; j <= val.C; ++j) {\n\t\t\t\t\t\tvar ixfe = val.rkrec[j-val.c][0];\n\t\t\t\t\t\ttemp_val= ({ixfe:ixfe, XF:XFs[ixfe], v:val.rkrec[j-val.c][1], t:'n'});\n\t\t\t\t\t\tif(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];\n\t\t\t\t\t\tsafe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\t\taddcell({c:j, r:val.r}, temp_val, options);\n\t\t\t\t\t}\n\t\t\t\t} break;\n\t\t\t\tcase 'Formula': {\n\t\t\t\t\tif(val.val == 'String') { last_formula = val; break; }\n\t\t\t\t\ttemp_val = make_cell(val.val, val.cell.ixfe, val.tt);\n\t\t\t\t\ttemp_val.XF = XFs[temp_val.ixfe];\n\t\t\t\t\tif(options.cellFormula) {\n\t\t\t\t\t\tvar _f = val.formula;\n\t\t\t\t\t\tif(_f && _f[0] && _f[0][0] && _f[0][0][0] == 'PtgExp') {\n\t\t\t\t\t\t\tvar _fr = _f[0][0][1][0], _fc = _f[0][0][1][1];\n\t\t\t\t\t\t\tvar _fe = encode_cell({r:_fr, c:_fc});\n\t\t\t\t\t\t\tif(sharedf[_fe]) temp_val.f = \"\"+stringify_formula(val.formula,range,val.cell,supbooks, opts);\n\t\t\t\t\t\t\telse temp_val.F = ((options.dense ? (out[_fr]||[])[_fc]: out[_fe]) || {}).F;\n\t\t\t\t\t\t} else temp_val.f = \"\"+stringify_formula(val.formula,range,val.cell,supbooks, opts);\n\t\t\t\t\t}\n\t\t\t\t\tif(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];\n\t\t\t\t\tsafe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\taddcell(val.cell, temp_val, options);\n\t\t\t\t\tlast_formula = val;\n\t\t\t\t} break;\n\t\t\t\tcase 'String': {\n\t\t\t\t\tif(last_formula) { /* technically always true */\n\t\t\t\t\t\tlast_formula.val = val;\n\t\t\t\t\t\ttemp_val = make_cell(val, last_formula.cell.ixfe, 's');\n\t\t\t\t\t\ttemp_val.XF = XFs[temp_val.ixfe];\n\t\t\t\t\t\tif(options.cellFormula) {\n\t\t\t\t\t\t\ttemp_val.f = \"\"+stringify_formula(last_formula.formula, range, last_formula.cell, supbooks, opts);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];\n\t\t\t\t\t\tsafe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\t\taddcell(last_formula.cell, temp_val, options);\n\t\t\t\t\t\tlast_formula = null;\n\t\t\t\t\t} else throw new Error(\"String record expects Formula\");\n\t\t\t\t} break;\n\t\t\t\tcase 'Array': {\n\t\t\t\t\tarrayf.push(val);\n\t\t\t\t\tvar _arraystart = encode_cell(val[0].s);\n\t\t\t\t\tcc = options.dense ? (out[val[0].s.r]||[])[val[0].s.c] : out[_arraystart];\n\t\t\t\t\tif(options.cellFormula && cc) {\n\t\t\t\t\t\tif(!last_formula) break; /* technically unreachable */\n\t\t\t\t\t\tif(!_arraystart || !cc) break;\n\t\t\t\t\t\tcc.f = \"\"+stringify_formula(val[1], range, val[0], supbooks, opts);\n\t\t\t\t\t\tcc.F = encode_range(val[0]);\n\t\t\t\t\t}\n\t\t\t\t} break;\n\t\t\t\tcase 'ShrFmla': {\n\t\t\t\t\tif(!options.cellFormula) break;\n\t\t\t\t\tif(last_cell) {\n\t\t\t\t\t\t/* TODO: capture range */\n\t\t\t\t\t\tif(!last_formula) break; /* technically unreachable */\n\t\t\t\t\t\tsharedf[encode_cell(last_formula.cell)]= val[0];\n\t\t\t\t\t\tcc = options.dense ? (out[last_formula.cell.r]||[])[last_formula.cell.c] : out[encode_cell(last_formula.cell)];\n\t\t\t\t\t\t(cc||{}).f = \"\"+stringify_formula(val[0], range, lastcell, supbooks, opts);\n\t\t\t\t\t}\n\t\t\t\t} break;\n\t\t\t\tcase 'LabelSst':\n\t\t\t\t\ttemp_val=make_cell(sst[val.isst].t, val.ixfe, 's');\n\t\t\t\t\tif(sst[val.isst].h) temp_val.h = sst[val.isst].h;\n\t\t\t\t\ttemp_val.XF = XFs[temp_val.ixfe];\n\t\t\t\t\tif(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];\n\t\t\t\t\tsafe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\taddcell({c:val.c, r:val.r}, temp_val, options);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Blank': if(options.sheetStubs) {\n\t\t\t\t\ttemp_val = ({ixfe: val.ixfe, XF: XFs[val.ixfe], t:'z'});\n\t\t\t\t\tif(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];\n\t\t\t\t\tsafe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\taddcell({c:val.c, r:val.r}, temp_val, options);\n\t\t\t\t} break;\n\t\t\t\tcase 'MulBlank': if(options.sheetStubs) {\n\t\t\t\t\tfor(var _j = val.c; _j <= val.C; ++_j) {\n\t\t\t\t\t\tvar _ixfe = val.ixfe[_j-val.c];\n\t\t\t\t\t\ttemp_val= ({ixfe:_ixfe, XF:XFs[_ixfe], t:'z'});\n\t\t\t\t\t\tif(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];\n\t\t\t\t\t\tsafe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\t\taddcell({c:_j, r:val.r}, temp_val, options);\n\t\t\t\t\t}\n\t\t\t\t} break;\n\t\t\t\tcase 'RString':\n\t\t\t\tcase 'Label': case 'BIFF2STR':\n\t\t\t\t\ttemp_val=make_cell(val.val, val.ixfe, 's');\n\t\t\t\t\ttemp_val.XF = XFs[temp_val.ixfe];\n\t\t\t\t\tif(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];\n\t\t\t\t\tsafe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\taddcell({c:val.c, r:val.r}, temp_val, options);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Dimensions': {\n\t\t\t\t\tif(file_depth === 1) range = val; /* TODO: stack */\n\t\t\t\t} break;\n\t\t\t\tcase 'SST': {\n\t\t\t\t\tsst = val;\n\t\t\t\t} break;\n\t\t\t\tcase 'Format': { /* val = [id, fmt] */\n\t\t\t\t\tif(opts.biff == 4) {\n\t\t\t\t\t\tBIFF2FmtTable[BIFF2Fmt++] = val[1];\n\t\t\t\t\t\tfor(var b4idx = 0; b4idx < BIFF2Fmt + 163; ++b4idx) if(SSF._table[b4idx] == val[1]) break;\n\t\t\t\t\t\tif(b4idx >= 163) SSF.load(val[1], BIFF2Fmt + 163);\n\t\t\t\t\t}\n\t\t\t\t\telse SSF.load(val[1], val[0]);\n\t\t\t\t} break;\n\t\t\t\tcase 'BIFF2FORMAT': {\n\t\t\t\t\tBIFF2FmtTable[BIFF2Fmt++] = val;\n\t\t\t\t\tfor(var b2idx = 0; b2idx < BIFF2Fmt + 163; ++b2idx) if(SSF._table[b2idx] == val) break;\n\t\t\t\t\tif(b2idx >= 163) SSF.load(val, BIFF2Fmt + 163);\n\t\t\t\t} break;\n\n\t\t\t\tcase 'MergeCells': merges = merges.concat(val); break;\n\n\t\t\t\tcase 'Obj': objects[val.cmo[0]] = opts.lastobj = val; break;\n\t\t\t\tcase 'TxO': opts.lastobj.TxO = val; break;\n\t\t\t\tcase 'ImData': opts.lastobj.ImData = val; break;\n\n\t\t\t\tcase 'HLink': {\n\t\t\t\t\tfor(rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)\n\t\t\t\t\t\tfor(rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {\n\t\t\t\t\t\t\tcc = options.dense ? (out[rngR]||[])[rngC] : out[encode_cell({c:rngC,r:rngR})];\n\t\t\t\t\t\t\tif(cc) cc.l = val[1];\n\t\t\t\t\t\t}\n\t\t\t\t} break;\n\t\t\t\tcase 'HLinkTooltip': {\n\t\t\t\t\tfor(rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)\n\t\t\t\t\t\tfor(rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {\n\t\t\t\t\t\t\tcc = options.dense ? (out[rngR]||[])[rngC] : out[encode_cell({c:rngC,r:rngR})];\n\t\t\t\t\t\t\tif(cc && cc.l) cc.l.Tooltip = val[1];\n\t\t\t\t\t\t\t}\n\t\t\t\t} break;\n\n\t\t\t\t/* Comments */\n\t\t\t\tcase 'Note': {\n\t\t\t\t\tif(opts.biff <= 5 && opts.biff >= 2) break; /* TODO: BIFF5 */\n\t\t\t\t\tcc = options.dense ? (out[val[0].r]||[])[val[0].c] : out[encode_cell(val[0])];\n\t\t\t\t\tvar noteobj = objects[val[2]];\n\t\t\t\t\tif(!cc) {\n\t\t\t\t\t\tif(options.dense) {\n\t\t\t\t\t\t\tif(!out[val[0].r]) out[val[0].r] = [];\n\t\t\t\t\t\t\tcc = out[val[0].r][val[0].c] = ({t:\"z\"});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcc = out[encode_cell(val[0])] = ({t:\"z\"});\n\t\t\t\t\t\t}\n\t\t\t\t\t\trange.e.r = Math.max(range.e.r, val[0].r);\n\t\t\t\t\t\trange.s.r = Math.min(range.s.r, val[0].r);\n\t\t\t\t\t\trange.e.c = Math.max(range.e.c, val[0].c);\n\t\t\t\t\t\trange.s.c = Math.min(range.s.c, val[0].c);\n\t\t\t\t\t}\n\t\t\t\t\tif(!cc.c) cc.c = [];\n\t\t\t\t\tcmnt = {a:val[1],t:noteobj.TxO.t};\n\t\t\t\t\tcc.c.push(cmnt);\n\t\t\t\t} break;\n\n\t\t\t\tdefault: switch(R.n) { /* nested */\n\t\t\t\tcase 'ClrtClient': break;\n\t\t\t\tcase 'XFExt': update_xfext(XFs[val.ixfe], val.ext); break;\n\n\t\t\t\tcase 'DefColWidth': defwidth = val; break;\n\t\t\t\tcase 'DefaultRowHeight': defheight = val[1]; break; // TODO: flags\n\n\t\t\t\tcase 'ColInfo': {\n\t\t\t\t\tif(!opts.cellStyles) break;\n\t\t\t\t\twhile(val.e >= val.s) {\n\t\t\t\t\t\tcolinfo[val.e--] = { width: val.w/256, level: (val.level || 0), hidden: !!(val.flags & 1) };\n\t\t\t\t\t\tif(!seencol) { seencol = true; find_mdw_colw(val.w/256); }\n\t\t\t\t\t\tprocess_col(colinfo[val.e+1]);\n\t\t\t\t\t}\n\t\t\t\t} break;\n\t\t\t\tcase 'Row': {\n\t\t\t\t\tvar rowobj = {};\n\t\t\t\t\tif(val.level != null) { rowinfo[val.r] = rowobj; rowobj.level = val.level; }\n\t\t\t\t\tif(val.hidden) { rowinfo[val.r] = rowobj; rowobj.hidden = true; }\n\t\t\t\t\tif(val.hpt) {\n\t\t\t\t\t\trowinfo[val.r] = rowobj;\n\t\t\t\t\t\trowobj.hpt = val.hpt; rowobj.hpx = pt2px(val.hpt);\n\t\t\t\t\t}\n\t\t\t\t} break;\n\n\t\t\t\tcase 'LeftMargin':\n\t\t\t\tcase 'RightMargin':\n\t\t\t\tcase 'TopMargin':\n\t\t\t\tcase 'BottomMargin':\n\t\t\t\t\tif(!out['!margins']) default_margins(out['!margins'] = {});\n\t\t\t\t\tout['!margins'][Rn.slice(0,-6).toLowerCase()] = val;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Selection': break;\n\n\t\t\t\tcase 'Setup': // TODO\n\t\t\t\t\tif(!out['!margins']) default_margins(out['!margins'] = {});\n\t\t\t\t\tout['!margins'].header = val.header;\n\t\t\t\t\tout['!margins'].footer = val.footer;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Window2': // TODO\n\t\t\t\t\t// $FlowIgnore\n\t\t\t\t\tif(val.RTL) Workbook.Views[0].RTL = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Header': break; // TODO\n\t\t\t\tcase 'Footer': break; // TODO\n\t\t\t\tcase 'HCenter': break; // TODO\n\t\t\t\tcase 'VCenter': break; // TODO\n\t\t\t\tcase 'Pls': break; // TODO\n\t\t\t\tcase 'GCW': break;\n\t\t\t\tcase 'LHRecord': break;\n\t\t\t\tcase 'DBCell': break; // TODO\n\t\t\t\tcase 'EntExU2': break; // TODO\n\t\t\t\tcase 'SxView': break; // TODO\n\t\t\t\tcase 'Sxvd': break; // TODO\n\t\t\t\tcase 'SXVI': break; // TODO\n\t\t\t\tcase 'SXVDEx': break; // TODO\n\t\t\t\tcase 'SxIvd': break; // TODO\n\t\t\t\tcase 'SXString': break; // TODO\n\t\t\t\tcase 'Sync': break;\n\t\t\t\tcase 'Addin': break;\n\t\t\t\tcase 'SXDI': break; // TODO\n\t\t\t\tcase 'SXLI': break; // TODO\n\t\t\t\tcase 'SXEx': break; // TODO\n\t\t\t\tcase 'QsiSXTag': break; // TODO\n\t\t\t\tcase 'Feat': break;\n\t\t\t\tcase 'FeatHdr': case 'FeatHdr11': break;\n\t\t\t\tcase 'Feature11': case 'Feature12': case 'List12': break;\n\t\t\t\tcase 'Country': country = val; break;\n\t\t\t\tcase 'RecalcId': break;\n\t\t\t\tcase 'DxGCol': break; // TODO: htmlify\n\t\t\t\tcase 'Fbi': case 'Fbi2': case 'GelFrame': break;\n\t\t\t\tcase 'Font': break; // TODO\n\t\t\t\tcase 'XFCRC': break; // TODO\n\t\t\t\tcase 'Style': break; // TODO\n\t\t\t\tcase 'StyleExt': break; // TODO\n\t\t\t\tcase 'Palette': palette = val; break;\n\t\t\t\tcase 'Theme': themes = val; break;\n\t\t\t\t/* Protection */\n\t\t\t\tcase 'ScenarioProtect': break;\n\t\t\t\tcase 'ObjProtect': break;\n\n\t\t\t\t/* Conditional Formatting */\n\t\t\t\tcase 'CondFmt12': break;\n\n\t\t\t\t/* Table */\n\t\t\t\tcase 'Table': break; // TODO\n\t\t\t\tcase 'TableStyles': break; // TODO\n\t\t\t\tcase 'TableStyle': break; // TODO\n\t\t\t\tcase 'TableStyleElement': break; // TODO\n\n\t\t\t\t/* PivotTable */\n\t\t\t\tcase 'SXStreamID': break; // TODO\n\t\t\t\tcase 'SXVS': break; // TODO\n\t\t\t\tcase 'DConRef': break; // TODO\n\t\t\t\tcase 'SXAddl': break; // TODO\n\t\t\t\tcase 'DConBin': break; // TODO\n\t\t\t\tcase 'DConName': break; // TODO\n\t\t\t\tcase 'SXPI': break; // TODO\n\t\t\t\tcase 'SxFormat': break; // TODO\n\t\t\t\tcase 'SxSelect': break; // TODO\n\t\t\t\tcase 'SxRule': break; // TODO\n\t\t\t\tcase 'SxFilt': break; // TODO\n\t\t\t\tcase 'SxItm': break; // TODO\n\t\t\t\tcase 'SxDXF': break; // TODO\n\n\t\t\t\t/* Scenario Manager */\n\t\t\t\tcase 'ScenMan': break;\n\n\t\t\t\t/* Data Consolidation */\n\t\t\t\tcase 'DCon': break;\n\n\t\t\t\t/* Watched Cell */\n\t\t\t\tcase 'CellWatch': break;\n\n\t\t\t\t/* Print Settings */\n\t\t\t\tcase 'PrintRowCol': break;\n\t\t\t\tcase 'PrintGrid': break;\n\t\t\t\tcase 'PrintSize': break;\n\n\t\t\t\tcase 'XCT': break;\n\t\t\t\tcase 'CRN': break;\n\n\t\t\t\tcase 'Scl': {\n\t\t\t\t\t//console.log(\"Zoom Level:\", val[0]/val[1],val);\n\t\t\t\t} break;\n\t\t\t\tcase 'SheetExt': {\n\t\t\t\t\t/* empty */\n\t\t\t\t} break;\n\t\t\t\tcase 'SheetExtOptional': {\n\t\t\t\t\t/* empty */\n\t\t\t\t} break;\n\n\t\t\t\t/* VBA */\n\t\t\t\tcase 'ObNoMacros': {\n\t\t\t\t\t/* empty */\n\t\t\t\t} break;\n\t\t\t\tcase 'ObProj': {\n\t\t\t\t\t/* empty */\n\t\t\t\t} break;\n\t\t\t\tcase 'CodeName': {\nif(!cur_sheet) Workbook.WBProps.CodeName = val || \"ThisWorkbook\";\n\t\t\t\t\telse wsprops.CodeName = val || wsprops.name;\n\t\t\t\t} break;\n\t\t\t\tcase 'GUIDTypeLib': {\n\t\t\t\t\t/* empty */\n\t\t\t\t} break;\n\n\t\t\t\tcase 'WOpt': break; // TODO: WTF?\n\t\t\t\tcase 'PhoneticInfo': break;\n\n\t\t\t\tcase 'OleObjectSize': break;\n\n\t\t\t\t/* Differential Formatting */\n\t\t\t\tcase 'DXF': case 'DXFN': case 'DXFN12': case 'DXFN12List': case 'DXFN12NoCB': break;\n\n\t\t\t\t/* Data Validation */\n\t\t\t\tcase 'Dv': case 'DVal': break;\n\n\t\t\t\t/* Data Series */\n\t\t\t\tcase 'BRAI': case 'Series': case 'SeriesText': break;\n\n\t\t\t\t/* Data Connection */\n\t\t\t\tcase 'DConn': break;\n\t\t\t\tcase 'DbOrParamQry': break;\n\t\t\t\tcase 'DBQueryExt': break;\n\n\t\t\t\tcase 'OleDbConn': break;\n\t\t\t\tcase 'ExtString': break;\n\n\t\t\t\t/* Formatting */\n\t\t\t\tcase 'IFmtRecord': break;\n\t\t\t\tcase 'CondFmt': case 'CF': case 'CF12': case 'CFEx': break;\n\n\t\t\t\t/* Explicitly Ignored */\n\t\t\t\tcase 'Excel9File': break;\n\t\t\t\tcase 'Units': break;\n\t\t\t\tcase 'InterfaceHdr': case 'Mms': case 'InterfaceEnd': case 'DSF': break;\n\t\t\t\tcase 'BuiltInFnGroupCount': /* 2.4.30 0x0E or 0x10 but excel 2011 generates 0x11? */ break;\n\t\t\t\t/* View Stuff */\n\t\t\t\tcase 'Window1': case 'HideObj': case 'GridSet': case 'Guts':\n\t\t\t\tcase 'UserBView': case 'UserSViewBegin': case 'UserSViewEnd': break;\n\t\t\t\tcase 'Pane': break;\n\t\t\t\tdefault: switch(R.n) { /* nested */\n\t\t\t\t/* Chart */\n\t\t\t\tcase 'Dat':\n\t\t\t\tcase 'Begin': case 'End':\n\t\t\t\tcase 'StartBlock': case 'EndBlock':\n\t\t\t\tcase 'Frame': case 'Area':\n\t\t\t\tcase 'Axis': case 'AxisLine': case 'Tick': break;\n\t\t\t\tcase 'AxesUsed':\n\t\t\t\tcase 'CrtLayout12': case 'CrtLayout12A': case 'CrtLink': case 'CrtLine': case 'CrtMlFrt': case 'CrtMlFrtContinue': break;\n\t\t\t\tcase 'LineFormat': case 'AreaFormat':\n\t\t\t\tcase 'Chart': case 'Chart3d': case 'Chart3DBarShape': case 'ChartFormat': case 'ChartFrtInfo': break;\n\t\t\t\tcase 'PlotArea': case 'PlotGrowth': break;\n\t\t\t\tcase 'SeriesList': case 'SerParent': case 'SerAuxTrend': break;\n\t\t\t\tcase 'DataFormat': case 'SerToCrt': case 'FontX': break;\n\t\t\t\tcase 'CatSerRange': case 'AxcExt': case 'SerFmt': break;\n\t\t\t\tcase 'ShtProps': break;\n\t\t\t\tcase 'DefaultText': case 'Text': case 'CatLab': break;\n\t\t\t\tcase 'DataLabExtContents': break;\n\t\t\t\tcase 'Legend': case 'LegendException': break;\n\t\t\t\tcase 'Pie': case 'Scatter': break;\n\t\t\t\tcase 'PieFormat': case 'MarkerFormat': break;\n\t\t\t\tcase 'StartObject': case 'EndObject': break;\n\t\t\t\tcase 'AlRuns': case 'ObjectLink': break;\n\t\t\t\tcase 'SIIndex': break;\n\t\t\t\tcase 'AttachedLabel': case 'YMult': break;\n\n\t\t\t\t/* Chart Group */\n\t\t\t\tcase 'Line': case 'Bar': break;\n\t\t\t\tcase 'Surf': break;\n\n\t\t\t\t/* Axis Group */\n\t\t\t\tcase 'AxisParent': break;\n\t\t\t\tcase 'Pos': break;\n\t\t\t\tcase 'ValueRange': break;\n\n\t\t\t\t/* Pivot Chart */\n\t\t\t\tcase 'SXViewEx9': break; // TODO\n\t\t\t\tcase 'SXViewLink': break;\n\t\t\t\tcase 'PivotChartBits': break;\n\t\t\t\tcase 'SBaseRef': break;\n\t\t\t\tcase 'TextPropsStream': break;\n\n\t\t\t\t/* Chart Misc */\n\t\t\t\tcase 'LnExt': break;\n\t\t\t\tcase 'MkrExt': break;\n\t\t\t\tcase 'CrtCoopt': break;\n\n\t\t\t\t/* Query Table */\n\t\t\t\tcase 'Qsi': case 'Qsif': case 'Qsir': case 'QsiSXTag': break;\n\t\t\t\tcase 'TxtQry': break;\n\n\t\t\t\t/* Filter */\n\t\t\t\tcase 'FilterMode': break;\n\t\t\t\tcase 'AutoFilter': case 'AutoFilterInfo': break;\n\t\t\t\tcase 'AutoFilter12': break;\n\t\t\t\tcase 'DropDownObjIds': break;\n\t\t\t\tcase 'Sort': break;\n\t\t\t\tcase 'SortData': break;\n\n\t\t\t\t/* Drawing */\n\t\t\t\tcase 'ShapePropsStream': break;\n\t\t\t\tcase 'MsoDrawing': case 'MsoDrawingGroup': case 'MsoDrawingSelection': break;\n\t\t\t\t/* Pub Stuff */\n\t\t\t\tcase 'WebPub': case 'AutoWebPub': break;\n\n\t\t\t\t/* Print Stuff */\n\t\t\t\tcase 'HeaderFooter': case 'HFPicture': case 'PLV':\n\t\t\t\tcase 'HorizontalPageBreaks': case 'VerticalPageBreaks': break;\n\t\t\t\t/* Behavioral */\n\t\t\t\tcase 'Backup': case 'CompressPictures': case 'Compat12': break;\n\n\t\t\t\t/* Should not Happen */\n\t\t\t\tcase 'Continue': case 'ContinueFrt12': break;\n\n\t\t\t\t/* Future Records */\n\t\t\t\tcase 'FrtFontList': case 'FrtWrapper': break;\n\n\t\t\t\tdefault: switch(R.n) { /* nested */\n\t\t\t\t/* BIFF5 records */\n\t\t\t\tcase 'TabIdConf': case 'Radar': case 'RadarArea': case 'DropBar': case 'Intl': case 'CoordList': case 'SerAuxErrBar': break;\n\n\t\t\t\t/* BIFF2-4 records */\n\t\t\t\tcase 'BIFF2FONTCLR': case 'BIFF2FMTCNT': case 'BIFF2FONTXTRA': break;\n\t\t\t\tcase 'BIFF2XF': case 'BIFF3XF': case 'BIFF4XF': break;\n\t\t\t\tcase 'BIFF2XFINDEX': break;\n\t\t\t\tcase 'BIFF4FMTCNT': case 'BIFF2ROW': case 'BIFF2WINDOW2': break;\n\n\t\t\t\t/* Miscellaneous */\n\t\t\t\tcase 'SCENARIO': case 'DConBin': case 'PicF': case 'DataLabExt':\n\t\t\t\tcase 'Lel': case 'BopPop': case 'BopPopCustom': case 'RealTimeData':\n\t\t\t\tcase 'Name': break;\n\t\t\t\tcase 'LHNGraph': case 'FnGroupName': case 'AddMenu': case 'LPr': break;\n\t\t\t\tcase 'ListObj': case 'ListField': break;\n\t\t\t\tcase 'RRSort': break;\n\t\t\t\tcase 'BigName': break;\n\t\t\t\tcase 'ToolbarHdr': case 'ToolbarEnd': break;\n\t\t\t\tcase 'DDEObjName': break;\n\t\t\t\tcase 'FRTArchId$': break;\n\t\t\t\tdefault: if(options.WTF) throw 'Unrecognized Record ' + R.n;\n\t\t\t}}}}\n\t\t} else blob.l += length;\n\t}\n\twb.SheetNames=keys(Directory).sort(function(a,b) { return Number(a) - Number(b); }).map(function(x){return Directory[x].name;});\n\tif(!options.bookSheets) wb.Sheets=Sheets;\n\tif(!wb.SheetNames.length && Preamble[\"!ref\"]) {\n\t\twb.SheetNames.push(\"Sheet1\");\n\t\tif(wb.Sheets) wb.Sheets[\"Sheet1\"] = Preamble;\n\t} else wb.Preamble=Preamble;\n\tif(wb.Sheets) FilterDatabases.forEach(function(r,i) { wb.Sheets[wb.SheetNames[i]]['!autofilter'] = r; });\n\twb.Strings = sst;\n\twb.SSF = SSF.get_table();\n\tif(opts.enc) wb.Encryption = opts.enc;\n\tif(themes) wb.Themes = themes;\n\twb.Metadata = {};\n\tif(country !== undefined) wb.Metadata.Country = country;\n\tif(supbooks.names.length > 0) Workbook.Names = supbooks.names;\n\twb.Workbook = Workbook;\n\treturn wb;\n}\n\n/* TODO: split props*/\nvar PSCLSID = {\n\tSI: \"e0859ff2f94f6810ab9108002b27b3d9\",\n\tDSI: \"02d5cdd59c2e1b10939708002b2cf9ae\",\n\tUDI: \"05d5cdd59c2e1b10939708002b2cf9ae\"\n};\nfunction parse_xls_props(cfb, props, o) {\n\t/* [MS-OSHARED] 2.3.3.2.2 Document Summary Information Property Set */\n\tvar DSI = CFB.find(cfb, '!DocumentSummaryInformation');\n\tif(DSI && DSI.size > 0) try {\n\t\tvar DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI, PSCLSID.DSI);\n\t\tfor(var d in DocSummary) props[d] = DocSummary[d];\n\t} catch(e) {if(o.WTF) throw e;/* empty */}\n\n\t/* [MS-OSHARED] 2.3.3.2.1 Summary Information Property Set*/\n\tvar SI = CFB.find(cfb, '!SummaryInformation');\n\tif(SI && SI.size > 0) try {\n\t\tvar Summary = parse_PropertySetStream(SI, SummaryPIDSI, PSCLSID.SI);\n\t\tfor(var s in Summary) if(props[s] == null) props[s] = Summary[s];\n\t} catch(e) {if(o.WTF) throw e;/* empty */}\n\n\tif(props.HeadingPairs && props.TitlesOfParts) {\n\t\tload_props_pairs(props.HeadingPairs, props.TitlesOfParts, props, o);\n\t\tdelete props.HeadingPairs; delete props.TitlesOfParts;\n\t}\n}\nfunction write_xls_props(wb, cfb) {\n\tvar DSEntries = [], SEntries = [], CEntries = [];\n\tvar i = 0, Keys;\n\tif(wb.Props) {\n\t\tKeys = keys(wb.Props);\n\t\t// $FlowIgnore\n\t\tfor(i = 0; i < Keys.length; ++i) (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i]) ? SEntries : CEntries).push([Keys[i], wb.Props[Keys[i]]]);\n\t}\n\tif(wb.Custprops) {\n\t\tKeys = keys(wb.Custprops);\n\t\t// $FlowIgnore\n\t\tfor(i = 0; i < Keys.length; ++i) if(!Object.prototype.hasOwnProperty.call((wb.Props||{}), Keys[i])) (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i]) ? SEntries : CEntries).push([Keys[i], wb.Custprops[Keys[i]]]);\n\t}\n\tvar CEntries2 = [];\n\tfor(i = 0; i < CEntries.length; ++i) {\n\t\tif(XLSPSSkip.indexOf(CEntries[i][0]) > -1) continue;\n\t\tif(CEntries[i][1] == null) continue;\n\t\tCEntries2.push(CEntries[i]);\n\t}\n\tif(SEntries.length) CFB.utils.cfb_add(cfb, \"/\\u0005SummaryInformation\", write_PropertySetStream(SEntries, PSCLSID.SI, SummaryRE, SummaryPIDSI));\n\tif(DSEntries.length || CEntries2.length) CFB.utils.cfb_add(cfb, \"/\\u0005DocumentSummaryInformation\", write_PropertySetStream(DSEntries, PSCLSID.DSI, DocSummaryRE, DocSummaryPIDDSI, CEntries2.length ? CEntries2 : null, PSCLSID.UDI));\n}\n\nfunction parse_xlscfb(cfb, options) {\nif(!options) options = {};\nfix_read_opts(options);\nreset_cp();\nif(options.codepage) set_ansi(options.codepage);\nvar CompObj, WB;\nif(cfb.FullPaths) {\n\tif(CFB.find(cfb, '/encryption')) throw new Error(\"File is password-protected\");\n\tCompObj = CFB.find(cfb, '!CompObj');\n\tWB = CFB.find(cfb, '/Workbook') || CFB.find(cfb, '/Book');\n} else {\n\tswitch(options.type) {\n\t\tcase 'base64': cfb = s2a(Base64.decode(cfb)); break;\n\t\tcase 'binary': cfb = s2a(cfb); break;\n\t\tcase 'buffer': break;\n\t\tcase 'array': if(!Array.isArray(cfb)) cfb = Array.prototype.slice.call(cfb); break;\n\t}\n\tprep_blob(cfb, 0);\n\tWB = ({content: cfb});\n}\nvar WorkbookP;\n\nvar _data;\nif(CompObj) parse_compobj(CompObj);\nif(options.bookProps && !options.bookSheets) WorkbookP = ({});\nelse {\n\tvar T = has_buf ? 'buffer' : 'array';\n\tif(WB && WB.content) WorkbookP = parse_workbook(WB.content, options);\n\t/* Quattro Pro 7-8 */\n\telse if((_data=CFB.find(cfb, 'PerfectOffice_MAIN')) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));\n\t/* Quattro Pro 9 */\n\telse if((_data=CFB.find(cfb, 'NativeContent_MAIN')) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));\n\telse throw new Error(\"Cannot find Workbook stream\");\n\tif(options.bookVBA && cfb.FullPaths && CFB.find(cfb, '/_VBA_PROJECT_CUR/VBA/dir')) WorkbookP.vbaraw = make_vba_xls(cfb);\n}\n\nvar props = {};\nif(cfb.FullPaths) parse_xls_props(cfb, props, options);\n\nWorkbookP.Props = WorkbookP.Custprops = props; /* TODO: split up properties */\nif(options.bookFiles) WorkbookP.cfb = cfb;\n/*WorkbookP.CompObjP = CompObjP; // TODO: storage? */\nreturn WorkbookP;\n}\n\n\nfunction write_xlscfb(wb, opts) {\n\tvar o = opts || {};\n\tvar cfb = CFB.utils.cfb_new({root:\"R\"});\n\tvar wbpath = \"/Workbook\";\n\tswitch(o.bookType || \"xls\") {\n\t\tcase \"xls\": o.bookType = \"biff8\";\n\t\t/* falls through */\n\t\tcase \"xla\": if(!o.bookType) o.bookType = \"xla\";\n\t\t/* falls through */\n\t\tcase \"biff8\": wbpath = \"/Workbook\"; o.biff = 8; break;\n\t\tcase \"biff5\": wbpath = \"/Book\"; o.biff = 5; break;\n\t\tdefault: throw new Error(\"invalid type \" + o.bookType + \" for XLS CFB\");\n\t}\n\tCFB.utils.cfb_add(cfb, wbpath, write_biff_buf(wb, o));\n\tif(o.biff == 8 && (wb.Props || wb.Custprops)) write_xls_props(wb, cfb);\n\t// TODO: SI, DSI, CO\n\tif(o.biff == 8 && wb.vbaraw) fill_vba_xls(cfb, CFB.read(wb.vbaraw, {type: typeof wb.vbaraw == \"string\" ? \"binary\" : \"buffer\"}));\n\treturn cfb;\n}\n/* [MS-XLSB] 2.3 Record Enumeration */\nvar XLSBRecordEnum = {\n0x0000: { n:\"BrtRowHdr\", f:parse_BrtRowHdr },\n0x0001: { n:\"BrtCellBlank\", f:parse_BrtCellBlank },\n0x0002: { n:\"BrtCellRk\", f:parse_BrtCellRk },\n0x0003: { n:\"BrtCellError\", f:parse_BrtCellError },\n0x0004: { n:\"BrtCellBool\", f:parse_BrtCellBool },\n0x0005: { n:\"BrtCellReal\", f:parse_BrtCellReal },\n0x0006: { n:\"BrtCellSt\", f:parse_BrtCellSt },\n0x0007: { n:\"BrtCellIsst\", f:parse_BrtCellIsst },\n0x0008: { n:\"BrtFmlaString\", f:parse_BrtFmlaString },\n0x0009: { n:\"BrtFmlaNum\", f:parse_BrtFmlaNum },\n0x000A: { n:\"BrtFmlaBool\", f:parse_BrtFmlaBool },\n0x000B: { n:\"BrtFmlaError\", f:parse_BrtFmlaError },\n0x000C: { n:\"BrtShortBlank\", f:parse_BrtShortBlank },\n0x000D: { n:\"BrtShortRk\", f:parse_BrtShortRk },\n0x000E: { n:\"BrtShortError\", f:parse_BrtShortError },\n0x000F: { n:\"BrtShortBool\", f:parse_BrtShortBool },\n0x0010: { n:\"BrtShortReal\", f:parse_BrtShortReal },\n0x0011: { n:\"BrtShortSt\", f:parse_BrtShortSt },\n0x0012: { n:\"BrtShortIsst\", f:parse_BrtShortIsst },\n0x0013: { n:\"BrtSSTItem\", f:parse_RichStr },\n0x0014: { n:\"BrtPCDIMissing\" },\n0x0015: { n:\"BrtPCDINumber\" },\n0x0016: { n:\"BrtPCDIBoolean\" },\n0x0017: { n:\"BrtPCDIError\" },\n0x0018: { n:\"BrtPCDIString\" },\n0x0019: { n:\"BrtPCDIDatetime\" },\n0x001A: { n:\"BrtPCDIIndex\" },\n0x001B: { n:\"BrtPCDIAMissing\" },\n0x001C: { n:\"BrtPCDIANumber\" },\n0x001D: { n:\"BrtPCDIABoolean\" },\n0x001E: { n:\"BrtPCDIAError\" },\n0x001F: { n:\"BrtPCDIAString\" },\n0x0020: { n:\"BrtPCDIADatetime\" },\n0x0021: { n:\"BrtPCRRecord\" },\n0x0022: { n:\"BrtPCRRecordDt\" },\n0x0023: { n:\"BrtFRTBegin\" },\n0x0024: { n:\"BrtFRTEnd\" },\n0x0025: { n:\"BrtACBegin\" },\n0x0026: { n:\"BrtACEnd\" },\n0x0027: { n:\"BrtName\", f:parse_BrtName },\n0x0028: { n:\"BrtIndexRowBlock\" },\n0x002A: { n:\"BrtIndexBlock\" },\n0x002B: { n:\"BrtFont\", f:parse_BrtFont },\n0x002C: { n:\"BrtFmt\", f:parse_BrtFmt },\n0x002D: { n:\"BrtFill\", f:parse_BrtFill },\n0x002E: { n:\"BrtBorder\", f:parse_BrtBorder },\n0x002F: { n:\"BrtXF\", f:parse_BrtXF },\n0x0030: { n:\"BrtStyle\" },\n0x0031: { n:\"BrtCellMeta\" },\n0x0032: { n:\"BrtValueMeta\" },\n0x0033: { n:\"BrtMdb\" },\n0x0034: { n:\"BrtBeginFmd\" },\n0x0035: { n:\"BrtEndFmd\" },\n0x0036: { n:\"BrtBeginMdx\" },\n0x0037: { n:\"BrtEndMdx\" },\n0x0038: { n:\"BrtBeginMdxTuple\" },\n0x0039: { n:\"BrtEndMdxTuple\" },\n0x003A: { n:\"BrtMdxMbrIstr\" },\n0x003B: { n:\"BrtStr\" },\n0x003C: { n:\"BrtColInfo\", f:parse_ColInfo },\n0x003E: { n:\"BrtCellRString\" },\n0x003F: { n:\"BrtCalcChainItem$\", f:parse_BrtCalcChainItem$ },\n0x0040: { n:\"BrtDVal\", f:parse_BrtDVal },\n0x0041: { n:\"BrtSxvcellNum\" },\n0x0042: { n:\"BrtSxvcellStr\" },\n0x0043: { n:\"BrtSxvcellBool\" },\n0x0044: { n:\"BrtSxvcellErr\" },\n0x0045: { n:\"BrtSxvcellDate\" },\n0x0046: { n:\"BrtSxvcellNil\" },\n0x0080: { n:\"BrtFileVersion\" },\n0x0081: { n:\"BrtBeginSheet\" },\n0x0082: { n:\"BrtEndSheet\" },\n0x0083: { n:\"BrtBeginBook\", f:parsenoop, p:0 },\n0x0084: { n:\"BrtEndBook\" },\n0x0085: { n:\"BrtBeginWsViews\" },\n0x0086: { n:\"BrtEndWsViews\" },\n0x0087: { n:\"BrtBeginBookViews\" },\n0x0088: { n:\"BrtEndBookViews\" },\n0x0089: { n:\"BrtBeginWsView\", f:parse_BrtBeginWsView },\n0x008A: { n:\"BrtEndWsView\" },\n0x008B: { n:\"BrtBeginCsViews\" },\n0x008C: { n:\"BrtEndCsViews\" },\n0x008D: { n:\"BrtBeginCsView\" },\n0x008E: { n:\"BrtEndCsView\" },\n0x008F: { n:\"BrtBeginBundleShs\" },\n0x0090: { n:\"BrtEndBundleShs\" },\n0x0091: { n:\"BrtBeginSheetData\" },\n0x0092: { n:\"BrtEndSheetData\" },\n0x0093: { n:\"BrtWsProp\", f:parse_BrtWsProp },\n0x0094: { n:\"BrtWsDim\", f:parse_BrtWsDim, p:16 },\n0x0097: { n:\"BrtPane\", f:parse_BrtPane },\n0x0098: { n:\"BrtSel\" },\n0x0099: { n:\"BrtWbProp\", f:parse_BrtWbProp },\n0x009A: { n:\"BrtWbFactoid\" },\n0x009B: { n:\"BrtFileRecover\" },\n0x009C: { n:\"BrtBundleSh\", f:parse_BrtBundleSh },\n0x009D: { n:\"BrtCalcProp\" },\n0x009E: { n:\"BrtBookView\" },\n0x009F: { n:\"BrtBeginSst\", f:parse_BrtBeginSst },\n0x00A0: { n:\"BrtEndSst\" },\n0x00A1: { n:\"BrtBeginAFilter\", f:parse_UncheckedRfX },\n0x00A2: { n:\"BrtEndAFilter\" },\n0x00A3: { n:\"BrtBeginFilterColumn\" },\n0x00A4: { n:\"BrtEndFilterColumn\" },\n0x00A5: { n:\"BrtBeginFilters\" },\n0x00A6: { n:\"BrtEndFilters\" },\n0x00A7: { n:\"BrtFilter\" },\n0x00A8: { n:\"BrtColorFilter\" },\n0x00A9: { n:\"BrtIconFilter\" },\n0x00AA: { n:\"BrtTop10Filter\" },\n0x00AB: { n:\"BrtDynamicFilter\" },\n0x00AC: { n:\"BrtBeginCustomFilters\" },\n0x00AD: { n:\"BrtEndCustomFilters\" },\n0x00AE: { n:\"BrtCustomFilter\" },\n0x00AF: { n:\"BrtAFilterDateGroupItem\" },\n0x00B0: { n:\"BrtMergeCell\", f:parse_BrtMergeCell },\n0x00B1: { n:\"BrtBeginMergeCells\" },\n0x00B2: { n:\"BrtEndMergeCells\" },\n0x00B3: { n:\"BrtBeginPivotCacheDef\" },\n0x00B4: { n:\"BrtEndPivotCacheDef\" },\n0x00B5: { n:\"BrtBeginPCDFields\" },\n0x00B6: { n:\"BrtEndPCDFields\" },\n0x00B7: { n:\"BrtBeginPCDField\" },\n0x00B8: { n:\"BrtEndPCDField\" },\n0x00B9: { n:\"BrtBeginPCDSource\" },\n0x00BA: { n:\"BrtEndPCDSource\" },\n0x00BB: { n:\"BrtBeginPCDSRange\" },\n0x00BC: { n:\"BrtEndPCDSRange\" },\n0x00BD: { n:\"BrtBeginPCDFAtbl\" },\n0x00BE: { n:\"BrtEndPCDFAtbl\" },\n0x00BF: { n:\"BrtBeginPCDIRun\" },\n0x00C0: { n:\"BrtEndPCDIRun\" },\n0x00C1: { n:\"BrtBeginPivotCacheRecords\" },\n0x00C2: { n:\"BrtEndPivotCacheRecords\" },\n0x00C3: { n:\"BrtBeginPCDHierarchies\" },\n0x00C4: { n:\"BrtEndPCDHierarchies\" },\n0x00C5: { n:\"BrtBeginPCDHierarchy\" },\n0x00C6: { n:\"BrtEndPCDHierarchy\" },\n0x00C7: { n:\"BrtBeginPCDHFieldsUsage\" },\n0x00C8: { n:\"BrtEndPCDHFieldsUsage\" },\n0x00C9: { n:\"BrtBeginExtConnection\" },\n0x00CA: { n:\"BrtEndExtConnection\" },\n0x00CB: { n:\"BrtBeginECDbProps\" },\n0x00CC: { n:\"BrtEndECDbProps\" },\n0x00CD: { n:\"BrtBeginECOlapProps\" },\n0x00CE: { n:\"BrtEndECOlapProps\" },\n0x00CF: { n:\"BrtBeginPCDSConsol\" },\n0x00D0: { n:\"BrtEndPCDSConsol\" },\n0x00D1: { n:\"BrtBeginPCDSCPages\" },\n0x00D2: { n:\"BrtEndPCDSCPages\" },\n0x00D3: { n:\"BrtBeginPCDSCPage\" },\n0x00D4: { n:\"BrtEndPCDSCPage\" },\n0x00D5: { n:\"BrtBeginPCDSCPItem\" },\n0x00D6: { n:\"BrtEndPCDSCPItem\" },\n0x00D7: { n:\"BrtBeginPCDSCSets\" },\n0x00D8: { n:\"BrtEndPCDSCSets\" },\n0x00D9: { n:\"BrtBeginPCDSCSet\" },\n0x00DA: { n:\"BrtEndPCDSCSet\" },\n0x00DB: { n:\"BrtBeginPCDFGroup\" },\n0x00DC: { n:\"BrtEndPCDFGroup\" },\n0x00DD: { n:\"BrtBeginPCDFGItems\" },\n0x00DE: { n:\"BrtEndPCDFGItems\" },\n0x00DF: { n:\"BrtBeginPCDFGRange\" },\n0x00E0: { n:\"BrtEndPCDFGRange\" },\n0x00E1: { n:\"BrtBeginPCDFGDiscrete\" },\n0x00E2: { n:\"BrtEndPCDFGDiscrete\" },\n0x00E3: { n:\"BrtBeginPCDSDTupleCache\" },\n0x00E4: { n:\"BrtEndPCDSDTupleCache\" },\n0x00E5: { n:\"BrtBeginPCDSDTCEntries\" },\n0x00E6: { n:\"BrtEndPCDSDTCEntries\" },\n0x00E7: { n:\"BrtBeginPCDSDTCEMembers\" },\n0x00E8: { n:\"BrtEndPCDSDTCEMembers\" },\n0x00E9: { n:\"BrtBeginPCDSDTCEMember\" },\n0x00EA: { n:\"BrtEndPCDSDTCEMember\" },\n0x00EB: { n:\"BrtBeginPCDSDTCQueries\" },\n0x00EC: { n:\"BrtEndPCDSDTCQueries\" },\n0x00ED: { n:\"BrtBeginPCDSDTCQuery\" },\n0x00EE: { n:\"BrtEndPCDSDTCQuery\" },\n0x00EF: { n:\"BrtBeginPCDSDTCSets\" },\n0x00F0: { n:\"BrtEndPCDSDTCSets\" },\n0x00F1: { n:\"BrtBeginPCDSDTCSet\" },\n0x00F2: { n:\"BrtEndPCDSDTCSet\" },\n0x00F3: { n:\"BrtBeginPCDCalcItems\" },\n0x00F4: { n:\"BrtEndPCDCalcItems\" },\n0x00F5: { n:\"BrtBeginPCDCalcItem\" },\n0x00F6: { n:\"BrtEndPCDCalcItem\" },\n0x00F7: { n:\"BrtBeginPRule\" },\n0x00F8: { n:\"BrtEndPRule\" },\n0x00F9: { n:\"BrtBeginPRFilters\" },\n0x00FA: { n:\"BrtEndPRFilters\" },\n0x00FB: { n:\"BrtBeginPRFilter\" },\n0x00FC: { n:\"BrtEndPRFilter\" },\n0x00FD: { n:\"BrtBeginPNames\" },\n0x00FE: { n:\"BrtEndPNames\" },\n0x00FF: { n:\"BrtBeginPName\" },\n0x0100: { n:\"BrtEndPName\" },\n0x0101: { n:\"BrtBeginPNPairs\" },\n0x0102: { n:\"BrtEndPNPairs\" },\n0x0103: { n:\"BrtBeginPNPair\" },\n0x0104: { n:\"BrtEndPNPair\" },\n0x0105: { n:\"BrtBeginECWebProps\" },\n0x0106: { n:\"BrtEndECWebProps\" },\n0x0107: { n:\"BrtBeginEcWpTables\" },\n0x0108: { n:\"BrtEndECWPTables\" },\n0x0109: { n:\"BrtBeginECParams\" },\n0x010A: { n:\"BrtEndECParams\" },\n0x010B: { n:\"BrtBeginECParam\" },\n0x010C: { n:\"BrtEndECParam\" },\n0x010D: { n:\"BrtBeginPCDKPIs\" },\n0x010E: { n:\"BrtEndPCDKPIs\" },\n0x010F: { n:\"BrtBeginPCDKPI\" },\n0x0110: { n:\"BrtEndPCDKPI\" },\n0x0111: { n:\"BrtBeginDims\" },\n0x0112: { n:\"BrtEndDims\" },\n0x0113: { n:\"BrtBeginDim\" },\n0x0114: { n:\"BrtEndDim\" },\n0x0115: { n:\"BrtIndexPartEnd\" },\n0x0116: { n:\"BrtBeginStyleSheet\" },\n0x0117: { n:\"BrtEndStyleSheet\" },\n0x0118: { n:\"BrtBeginSXView\" },\n0x0119: { n:\"BrtEndSXVI\" },\n0x011A: { n:\"BrtBeginSXVI\" },\n0x011B: { n:\"BrtBeginSXVIs\" },\n0x011C: { n:\"BrtEndSXVIs\" },\n0x011D: { n:\"BrtBeginSXVD\" },\n0x011E: { n:\"BrtEndSXVD\" },\n0x011F: { n:\"BrtBeginSXVDs\" },\n0x0120: { n:\"BrtEndSXVDs\" },\n0x0121: { n:\"BrtBeginSXPI\" },\n0x0122: { n:\"BrtEndSXPI\" },\n0x0123: { n:\"BrtBeginSXPIs\" },\n0x0124: { n:\"BrtEndSXPIs\" },\n0x0125: { n:\"BrtBeginSXDI\" },\n0x0126: { n:\"BrtEndSXDI\" },\n0x0127: { n:\"BrtBeginSXDIs\" },\n0x0128: { n:\"BrtEndSXDIs\" },\n0x0129: { n:\"BrtBeginSXLI\" },\n0x012A: { n:\"BrtEndSXLI\" },\n0x012B: { n:\"BrtBeginSXLIRws\" },\n0x012C: { n:\"BrtEndSXLIRws\" },\n0x012D: { n:\"BrtBeginSXLICols\" },\n0x012E: { n:\"BrtEndSXLICols\" },\n0x012F: { n:\"BrtBeginSXFormat\" },\n0x0130: { n:\"BrtEndSXFormat\" },\n0x0131: { n:\"BrtBeginSXFormats\" },\n0x0132: { n:\"BrtEndSxFormats\" },\n0x0133: { n:\"BrtBeginSxSelect\" },\n0x0134: { n:\"BrtEndSxSelect\" },\n0x0135: { n:\"BrtBeginISXVDRws\" },\n0x0136: { n:\"BrtEndISXVDRws\" },\n0x0137: { n:\"BrtBeginISXVDCols\" },\n0x0138: { n:\"BrtEndISXVDCols\" },\n0x0139: { n:\"BrtEndSXLocation\" },\n0x013A: { n:\"BrtBeginSXLocation\" },\n0x013B: { n:\"BrtEndSXView\" },\n0x013C: { n:\"BrtBeginSXTHs\" },\n0x013D: { n:\"BrtEndSXTHs\" },\n0x013E: { n:\"BrtBeginSXTH\" },\n0x013F: { n:\"BrtEndSXTH\" },\n0x0140: { n:\"BrtBeginISXTHRws\" },\n0x0141: { n:\"BrtEndISXTHRws\" },\n0x0142: { n:\"BrtBeginISXTHCols\" },\n0x0143: { n:\"BrtEndISXTHCols\" },\n0x0144: { n:\"BrtBeginSXTDMPS\" },\n0x0145: { n:\"BrtEndSXTDMPs\" },\n0x0146: { n:\"BrtBeginSXTDMP\" },\n0x0147: { n:\"BrtEndSXTDMP\" },\n0x0148: { n:\"BrtBeginSXTHItems\" },\n0x0149: { n:\"BrtEndSXTHItems\" },\n0x014A: { n:\"BrtBeginSXTHItem\" },\n0x014B: { n:\"BrtEndSXTHItem\" },\n0x014C: { n:\"BrtBeginMetadata\" },\n0x014D: { n:\"BrtEndMetadata\" },\n0x014E: { n:\"BrtBeginEsmdtinfo\" },\n0x014F: { n:\"BrtMdtinfo\" },\n0x0150: { n:\"BrtEndEsmdtinfo\" },\n0x0151: { n:\"BrtBeginEsmdb\" },\n0x0152: { n:\"BrtEndEsmdb\" },\n0x0153: { n:\"BrtBeginEsfmd\" },\n0x0154: { n:\"BrtEndEsfmd\" },\n0x0155: { n:\"BrtBeginSingleCells\" },\n0x0156: { n:\"BrtEndSingleCells\" },\n0x0157: { n:\"BrtBeginList\" },\n0x0158: { n:\"BrtEndList\" },\n0x0159: { n:\"BrtBeginListCols\" },\n0x015A: { n:\"BrtEndListCols\" },\n0x015B: { n:\"BrtBeginListCol\" },\n0x015C: { n:\"BrtEndListCol\" },\n0x015D: { n:\"BrtBeginListXmlCPr\" },\n0x015E: { n:\"BrtEndListXmlCPr\" },\n0x015F: { n:\"BrtListCCFmla\" },\n0x0160: { n:\"BrtListTrFmla\" },\n0x0161: { n:\"BrtBeginExternals\" },\n0x0162: { n:\"BrtEndExternals\" },\n0x0163: { n:\"BrtSupBookSrc\", f:parse_RelID},\n0x0165: { n:\"BrtSupSelf\" },\n0x0166: { n:\"BrtSupSame\" },\n0x0167: { n:\"BrtSupTabs\" },\n0x0168: { n:\"BrtBeginSupBook\" },\n0x0169: { n:\"BrtPlaceholderName\" },\n0x016A: { n:\"BrtExternSheet\", f:parse_ExternSheet },\n0x016B: { n:\"BrtExternTableStart\" },\n0x016C: { n:\"BrtExternTableEnd\" },\n0x016E: { n:\"BrtExternRowHdr\" },\n0x016F: { n:\"BrtExternCellBlank\" },\n0x0170: { n:\"BrtExternCellReal\" },\n0x0171: { n:\"BrtExternCellBool\" },\n0x0172: { n:\"BrtExternCellError\" },\n0x0173: { n:\"BrtExternCellString\" },\n0x0174: { n:\"BrtBeginEsmdx\" },\n0x0175: { n:\"BrtEndEsmdx\" },\n0x0176: { n:\"BrtBeginMdxSet\" },\n0x0177: { n:\"BrtEndMdxSet\" },\n0x0178: { n:\"BrtBeginMdxMbrProp\" },\n0x0179: { n:\"BrtEndMdxMbrProp\" },\n0x017A: { n:\"BrtBeginMdxKPI\" },\n0x017B: { n:\"BrtEndMdxKPI\" },\n0x017C: { n:\"BrtBeginEsstr\" },\n0x017D: { n:\"BrtEndEsstr\" },\n0x017E: { n:\"BrtBeginPRFItem\" },\n0x017F: { n:\"BrtEndPRFItem\" },\n0x0180: { n:\"BrtBeginPivotCacheIDs\" },\n0x0181: { n:\"BrtEndPivotCacheIDs\" },\n0x0182: { n:\"BrtBeginPivotCacheID\" },\n0x0183: { n:\"BrtEndPivotCacheID\" },\n0x0184: { n:\"BrtBeginISXVIs\" },\n0x0185: { n:\"BrtEndISXVIs\" },\n0x0186: { n:\"BrtBeginColInfos\" },\n0x0187: { n:\"BrtEndColInfos\" },\n0x0188: { n:\"BrtBeginRwBrk\" },\n0x0189: { n:\"BrtEndRwBrk\" },\n0x018A: { n:\"BrtBeginColBrk\" },\n0x018B: { n:\"BrtEndColBrk\" },\n0x018C: { n:\"BrtBrk\" },\n0x018D: { n:\"BrtUserBookView\" },\n0x018E: { n:\"BrtInfo\" },\n0x018F: { n:\"BrtCUsr\" },\n0x0190: { n:\"BrtUsr\" },\n0x0191: { n:\"BrtBeginUsers\" },\n0x0193: { n:\"BrtEOF\" },\n0x0194: { n:\"BrtUCR\" },\n0x0195: { n:\"BrtRRInsDel\" },\n0x0196: { n:\"BrtRREndInsDel\" },\n0x0197: { n:\"BrtRRMove\" },\n0x0198: { n:\"BrtRREndMove\" },\n0x0199: { n:\"BrtRRChgCell\" },\n0x019A: { n:\"BrtRREndChgCell\" },\n0x019B: { n:\"BrtRRHeader\" },\n0x019C: { n:\"BrtRRUserView\" },\n0x019D: { n:\"BrtRRRenSheet\" },\n0x019E: { n:\"BrtRRInsertSh\" },\n0x019F: { n:\"BrtRRDefName\" },\n0x01A0: { n:\"BrtRRNote\" },\n0x01A1: { n:\"BrtRRConflict\" },\n0x01A2: { n:\"BrtRRTQSIF\" },\n0x01A3: { n:\"BrtRRFormat\" },\n0x01A4: { n:\"BrtRREndFormat\" },\n0x01A5: { n:\"BrtRRAutoFmt\" },\n0x01A6: { n:\"BrtBeginUserShViews\" },\n0x01A7: { n:\"BrtBeginUserShView\" },\n0x01A8: { n:\"BrtEndUserShView\" },\n0x01A9: { n:\"BrtEndUserShViews\" },\n0x01AA: { n:\"BrtArrFmla\", f:parse_BrtArrFmla },\n0x01AB: { n:\"BrtShrFmla\", f:parse_BrtShrFmla },\n0x01AC: { n:\"BrtTable\" },\n0x01AD: { n:\"BrtBeginExtConnections\" },\n0x01AE: { n:\"BrtEndExtConnections\" },\n0x01AF: { n:\"BrtBeginPCDCalcMems\" },\n0x01B0: { n:\"BrtEndPCDCalcMems\" },\n0x01B1: { n:\"BrtBeginPCDCalcMem\" },\n0x01B2: { n:\"BrtEndPCDCalcMem\" },\n0x01B3: { n:\"BrtBeginPCDHGLevels\" },\n0x01B4: { n:\"BrtEndPCDHGLevels\" },\n0x01B5: { n:\"BrtBeginPCDHGLevel\" },\n0x01B6: { n:\"BrtEndPCDHGLevel\" },\n0x01B7: { n:\"BrtBeginPCDHGLGroups\" },\n0x01B8: { n:\"BrtEndPCDHGLGroups\" },\n0x01B9: { n:\"BrtBeginPCDHGLGroup\" },\n0x01BA: { n:\"BrtEndPCDHGLGroup\" },\n0x01BB: { n:\"BrtBeginPCDHGLGMembers\" },\n0x01BC: { n:\"BrtEndPCDHGLGMembers\" },\n0x01BD: { n:\"BrtBeginPCDHGLGMember\" },\n0x01BE: { n:\"BrtEndPCDHGLGMember\" },\n0x01BF: { n:\"BrtBeginQSI\" },\n0x01C0: { n:\"BrtEndQSI\" },\n0x01C1: { n:\"BrtBeginQSIR\" },\n0x01C2: { n:\"BrtEndQSIR\" },\n0x01C3: { n:\"BrtBeginDeletedNames\" },\n0x01C4: { n:\"BrtEndDeletedNames\" },\n0x01C5: { n:\"BrtBeginDeletedName\" },\n0x01C6: { n:\"BrtEndDeletedName\" },\n0x01C7: { n:\"BrtBeginQSIFs\" },\n0x01C8: { n:\"BrtEndQSIFs\" },\n0x01C9: { n:\"BrtBeginQSIF\" },\n0x01CA: { n:\"BrtEndQSIF\" },\n0x01CB: { n:\"BrtBeginAutoSortScope\" },\n0x01CC: { n:\"BrtEndAutoSortScope\" },\n0x01CD: { n:\"BrtBeginConditionalFormatting\" },\n0x01CE: { n:\"BrtEndConditionalFormatting\" },\n0x01CF: { n:\"BrtBeginCFRule\" },\n0x01D0: { n:\"BrtEndCFRule\" },\n0x01D1: { n:\"BrtBeginIconSet\" },\n0x01D2: { n:\"BrtEndIconSet\" },\n0x01D3: { n:\"BrtBeginDatabar\" },\n0x01D4: { n:\"BrtEndDatabar\" },\n0x01D5: { n:\"BrtBeginColorScale\" },\n0x01D6: { n:\"BrtEndColorScale\" },\n0x01D7: { n:\"BrtCFVO\" },\n0x01D8: { n:\"BrtExternValueMeta\" },\n0x01D9: { n:\"BrtBeginColorPalette\" },\n0x01DA: { n:\"BrtEndColorPalette\" },\n0x01DB: { n:\"BrtIndexedColor\" },\n0x01DC: { n:\"BrtMargins\", f:parse_BrtMargins },\n0x01DD: { n:\"BrtPrintOptions\" },\n0x01DE: { n:\"BrtPageSetup\" },\n0x01DF: { n:\"BrtBeginHeaderFooter\" },\n0x01E0: { n:\"BrtEndHeaderFooter\" },\n0x01E1: { n:\"BrtBeginSXCrtFormat\" },\n0x01E2: { n:\"BrtEndSXCrtFormat\" },\n0x01E3: { n:\"BrtBeginSXCrtFormats\" },\n0x01E4: { n:\"BrtEndSXCrtFormats\" },\n0x01E5: { n:\"BrtWsFmtInfo\", f:parse_BrtWsFmtInfo },\n0x01E6: { n:\"BrtBeginMgs\" },\n0x01E7: { n:\"BrtEndMGs\" },\n0x01E8: { n:\"BrtBeginMGMaps\" },\n0x01E9: { n:\"BrtEndMGMaps\" },\n0x01EA: { n:\"BrtBeginMG\" },\n0x01EB: { n:\"BrtEndMG\" },\n0x01EC: { n:\"BrtBeginMap\" },\n0x01ED: { n:\"BrtEndMap\" },\n0x01EE: { n:\"BrtHLink\", f:parse_BrtHLink },\n0x01EF: { n:\"BrtBeginDCon\" },\n0x01F0: { n:\"BrtEndDCon\" },\n0x01F1: { n:\"BrtBeginDRefs\" },\n0x01F2: { n:\"BrtEndDRefs\" },\n0x01F3: { n:\"BrtDRef\" },\n0x01F4: { n:\"BrtBeginScenMan\" },\n0x01F5: { n:\"BrtEndScenMan\" },\n0x01F6: { n:\"BrtBeginSct\" },\n0x01F7: { n:\"BrtEndSct\" },\n0x01F8: { n:\"BrtSlc\" },\n0x01F9: { n:\"BrtBeginDXFs\" },\n0x01FA: { n:\"BrtEndDXFs\" },\n0x01FB: { n:\"BrtDXF\" },\n0x01FC: { n:\"BrtBeginTableStyles\" },\n0x01FD: { n:\"BrtEndTableStyles\" },\n0x01FE: { n:\"BrtBeginTableStyle\" },\n0x01FF: { n:\"BrtEndTableStyle\" },\n0x0200: { n:\"BrtTableStyleElement\" },\n0x0201: { n:\"BrtTableStyleClient\" },\n0x0202: { n:\"BrtBeginVolDeps\" },\n0x0203: { n:\"BrtEndVolDeps\" },\n0x0204: { n:\"BrtBeginVolType\" },\n0x0205: { n:\"BrtEndVolType\" },\n0x0206: { n:\"BrtBeginVolMain\" },\n0x0207: { n:\"BrtEndVolMain\" },\n0x0208: { n:\"BrtBeginVolTopic\" },\n0x0209: { n:\"BrtEndVolTopic\" },\n0x020A: { n:\"BrtVolSubtopic\" },\n0x020B: { n:\"BrtVolRef\" },\n0x020C: { n:\"BrtVolNum\" },\n0x020D: { n:\"BrtVolErr\" },\n0x020E: { n:\"BrtVolStr\" },\n0x020F: { n:\"BrtVolBool\" },\n0x0210: { n:\"BrtBeginCalcChain$\" },\n0x0211: { n:\"BrtEndCalcChain$\" },\n0x0212: { n:\"BrtBeginSortState\" },\n0x0213: { n:\"BrtEndSortState\" },\n0x0214: { n:\"BrtBeginSortCond\" },\n0x0215: { n:\"BrtEndSortCond\" },\n0x0216: { n:\"BrtBookProtection\" },\n0x0217: { n:\"BrtSheetProtection\" },\n0x0218: { n:\"BrtRangeProtection\" },\n0x0219: { n:\"BrtPhoneticInfo\" },\n0x021A: { n:\"BrtBeginECTxtWiz\" },\n0x021B: { n:\"BrtEndECTxtWiz\" },\n0x021C: { n:\"BrtBeginECTWFldInfoLst\" },\n0x021D: { n:\"BrtEndECTWFldInfoLst\" },\n0x021E: { n:\"BrtBeginECTwFldInfo\" },\n0x0224: { n:\"BrtFileSharing\" },\n0x0225: { n:\"BrtOleSize\" },\n0x0226: { n:\"BrtDrawing\", f:parse_RelID },\n0x0227: { n:\"BrtLegacyDrawing\" },\n0x0228: { n:\"BrtLegacyDrawingHF\" },\n0x0229: { n:\"BrtWebOpt\" },\n0x022A: { n:\"BrtBeginWebPubItems\" },\n0x022B: { n:\"BrtEndWebPubItems\" },\n0x022C: { n:\"BrtBeginWebPubItem\" },\n0x022D: { n:\"BrtEndWebPubItem\" },\n0x022E: { n:\"BrtBeginSXCondFmt\" },\n0x022F: { n:\"BrtEndSXCondFmt\" },\n0x0230: { n:\"BrtBeginSXCondFmts\" },\n0x0231: { n:\"BrtEndSXCondFmts\" },\n0x0232: { n:\"BrtBkHim\" },\n0x0234: { n:\"BrtColor\" },\n0x0235: { n:\"BrtBeginIndexedColors\" },\n0x0236: { n:\"BrtEndIndexedColors\" },\n0x0239: { n:\"BrtBeginMRUColors\" },\n0x023A: { n:\"BrtEndMRUColors\" },\n0x023C: { n:\"BrtMRUColor\" },\n0x023D: { n:\"BrtBeginDVals\" },\n0x023E: { n:\"BrtEndDVals\" },\n0x0241: { n:\"BrtSupNameStart\" },\n0x0242: { n:\"BrtSupNameValueStart\" },\n0x0243: { n:\"BrtSupNameValueEnd\" },\n0x0244: { n:\"BrtSupNameNum\" },\n0x0245: { n:\"BrtSupNameErr\" },\n0x0246: { n:\"BrtSupNameSt\" },\n0x0247: { n:\"BrtSupNameNil\" },\n0x0248: { n:\"BrtSupNameBool\" },\n0x0249: { n:\"BrtSupNameFmla\" },\n0x024A: { n:\"BrtSupNameBits\" },\n0x024B: { n:\"BrtSupNameEnd\" },\n0x024C: { n:\"BrtEndSupBook\" },\n0x024D: { n:\"BrtCellSmartTagProperty\" },\n0x024E: { n:\"BrtBeginCellSmartTag\" },\n0x024F: { n:\"BrtEndCellSmartTag\" },\n0x0250: { n:\"BrtBeginCellSmartTags\" },\n0x0251: { n:\"BrtEndCellSmartTags\" },\n0x0252: { n:\"BrtBeginSmartTags\" },\n0x0253: { n:\"BrtEndSmartTags\" },\n0x0254: { n:\"BrtSmartTagType\" },\n0x0255: { n:\"BrtBeginSmartTagTypes\" },\n0x0256: { n:\"BrtEndSmartTagTypes\" },\n0x0257: { n:\"BrtBeginSXFilters\" },\n0x0258: { n:\"BrtEndSXFilters\" },\n0x0259: { n:\"BrtBeginSXFILTER\" },\n0x025A: { n:\"BrtEndSXFilter\" },\n0x025B: { n:\"BrtBeginFills\" },\n0x025C: { n:\"BrtEndFills\" },\n0x025D: { n:\"BrtBeginCellWatches\" },\n0x025E: { n:\"BrtEndCellWatches\" },\n0x025F: { n:\"BrtCellWatch\" },\n0x0260: { n:\"BrtBeginCRErrs\" },\n0x0261: { n:\"BrtEndCRErrs\" },\n0x0262: { n:\"BrtCrashRecErr\" },\n0x0263: { n:\"BrtBeginFonts\" },\n0x0264: { n:\"BrtEndFonts\" },\n0x0265: { n:\"BrtBeginBorders\" },\n0x0266: { n:\"BrtEndBorders\" },\n0x0267: { n:\"BrtBeginFmts\" },\n0x0268: { n:\"BrtEndFmts\" },\n0x0269: { n:\"BrtBeginCellXFs\" },\n0x026A: { n:\"BrtEndCellXFs\" },\n0x026B: { n:\"BrtBeginStyles\" },\n0x026C: { n:\"BrtEndStyles\" },\n0x0271: { n:\"BrtBigName\" },\n0x0272: { n:\"BrtBeginCellStyleXFs\" },\n0x0273: { n:\"BrtEndCellStyleXFs\" },\n0x0274: { n:\"BrtBeginComments\" },\n0x0275: { n:\"BrtEndComments\" },\n0x0276: { n:\"BrtBeginCommentAuthors\" },\n0x0277: { n:\"BrtEndCommentAuthors\" },\n0x0278: { n:\"BrtCommentAuthor\", f:parse_BrtCommentAuthor },\n0x0279: { n:\"BrtBeginCommentList\" },\n0x027A: { n:\"BrtEndCommentList\" },\n0x027B: { n:\"BrtBeginComment\", f:parse_BrtBeginComment},\n0x027C: { n:\"BrtEndComment\" },\n0x027D: { n:\"BrtCommentText\", f:parse_BrtCommentText },\n0x027E: { n:\"BrtBeginOleObjects\" },\n0x027F: { n:\"BrtOleObject\" },\n0x0280: { n:\"BrtEndOleObjects\" },\n0x0281: { n:\"BrtBeginSxrules\" },\n0x0282: { n:\"BrtEndSxRules\" },\n0x0283: { n:\"BrtBeginActiveXControls\" },\n0x0284: { n:\"BrtActiveX\" },\n0x0285: { n:\"BrtEndActiveXControls\" },\n0x0286: { n:\"BrtBeginPCDSDTCEMembersSortBy\" },\n0x0288: { n:\"BrtBeginCellIgnoreECs\" },\n0x0289: { n:\"BrtCellIgnoreEC\" },\n0x028A: { n:\"BrtEndCellIgnoreECs\" },\n0x028B: { n:\"BrtCsProp\", f:parse_BrtCsProp },\n0x028C: { n:\"BrtCsPageSetup\" },\n0x028D: { n:\"BrtBeginUserCsViews\" },\n0x028E: { n:\"BrtEndUserCsViews\" },\n0x028F: { n:\"BrtBeginUserCsView\" },\n0x0290: { n:\"BrtEndUserCsView\" },\n0x0291: { n:\"BrtBeginPcdSFCIEntries\" },\n0x0292: { n:\"BrtEndPCDSFCIEntries\" },\n0x0293: { n:\"BrtPCDSFCIEntry\" },\n0x0294: { n:\"BrtBeginListParts\" },\n0x0295: { n:\"BrtListPart\" },\n0x0296: { n:\"BrtEndListParts\" },\n0x0297: { n:\"BrtSheetCalcProp\" },\n0x0298: { n:\"BrtBeginFnGroup\" },\n0x0299: { n:\"BrtFnGroup\" },\n0x029A: { n:\"BrtEndFnGroup\" },\n0x029B: { n:\"BrtSupAddin\" },\n0x029C: { n:\"BrtSXTDMPOrder\" },\n0x029D: { n:\"BrtCsProtection\" },\n0x029F: { n:\"BrtBeginWsSortMap\" },\n0x02A0: { n:\"BrtEndWsSortMap\" },\n0x02A1: { n:\"BrtBeginRRSort\" },\n0x02A2: { n:\"BrtEndRRSort\" },\n0x02A3: { n:\"BrtRRSortItem\" },\n0x02A4: { n:\"BrtFileSharingIso\" },\n0x02A5: { n:\"BrtBookProtectionIso\" },\n0x02A6: { n:\"BrtSheetProtectionIso\" },\n0x02A7: { n:\"BrtCsProtectionIso\" },\n0x02A8: { n:\"BrtRangeProtectionIso\" },\n0x02A9: { n:\"BrtDValList\" },\n0x0400: { n:\"BrtRwDescent\" },\n0x0401: { n:\"BrtKnownFonts\" },\n0x0402: { n:\"BrtBeginSXTupleSet\" },\n0x0403: { n:\"BrtEndSXTupleSet\" },\n0x0404: { n:\"BrtBeginSXTupleSetHeader\" },\n0x0405: { n:\"BrtEndSXTupleSetHeader\" },\n0x0406: { n:\"BrtSXTupleSetHeaderItem\" },\n0x0407: { n:\"BrtBeginSXTupleSetData\" },\n0x0408: { n:\"BrtEndSXTupleSetData\" },\n0x0409: { n:\"BrtBeginSXTupleSetRow\" },\n0x040A: { n:\"BrtEndSXTupleSetRow\" },\n0x040B: { n:\"BrtSXTupleSetRowItem\" },\n0x040C: { n:\"BrtNameExt\" },\n0x040D: { n:\"BrtPCDH14\" },\n0x040E: { n:\"BrtBeginPCDCalcMem14\" },\n0x040F: { n:\"BrtEndPCDCalcMem14\" },\n0x0410: { n:\"BrtSXTH14\" },\n0x0411: { n:\"BrtBeginSparklineGroup\" },\n0x0412: { n:\"BrtEndSparklineGroup\" },\n0x0413: { n:\"BrtSparkline\" },\n0x0414: { n:\"BrtSXDI14\" },\n0x0415: { n:\"BrtWsFmtInfoEx14\" },\n0x0416: { n:\"BrtBeginConditionalFormatting14\" },\n0x0417: { n:\"BrtEndConditionalFormatting14\" },\n0x0418: { n:\"BrtBeginCFRule14\" },\n0x0419: { n:\"BrtEndCFRule14\" },\n0x041A: { n:\"BrtCFVO14\" },\n0x041B: { n:\"BrtBeginDatabar14\" },\n0x041C: { n:\"BrtBeginIconSet14\" },\n0x041D: { n:\"BrtDVal14\", f: parse_BrtDVal14 },\n0x041E: { n:\"BrtBeginDVals14\" },\n0x041F: { n:\"BrtColor14\" },\n0x0420: { n:\"BrtBeginSparklines\" },\n0x0421: { n:\"BrtEndSparklines\" },\n0x0422: { n:\"BrtBeginSparklineGroups\" },\n0x0423: { n:\"BrtEndSparklineGroups\" },\n0x0425: { n:\"BrtSXVD14\" },\n0x0426: { n:\"BrtBeginSXView14\" },\n0x0427: { n:\"BrtEndSXView14\" },\n0x0428: { n:\"BrtBeginSXView16\" },\n0x0429: { n:\"BrtEndSXView16\" },\n0x042A: { n:\"BrtBeginPCD14\" },\n0x042B: { n:\"BrtEndPCD14\" },\n0x042C: { n:\"BrtBeginExtConn14\" },\n0x042D: { n:\"BrtEndExtConn14\" },\n0x042E: { n:\"BrtBeginSlicerCacheIDs\" },\n0x042F: { n:\"BrtEndSlicerCacheIDs\" },\n0x0430: { n:\"BrtBeginSlicerCacheID\" },\n0x0431: { n:\"BrtEndSlicerCacheID\" },\n0x0433: { n:\"BrtBeginSlicerCache\" },\n0x0434: { n:\"BrtEndSlicerCache\" },\n0x0435: { n:\"BrtBeginSlicerCacheDef\" },\n0x0436: { n:\"BrtEndSlicerCacheDef\" },\n0x0437: { n:\"BrtBeginSlicersEx\" },\n0x0438: { n:\"BrtEndSlicersEx\" },\n0x0439: { n:\"BrtBeginSlicerEx\" },\n0x043A: { n:\"BrtEndSlicerEx\" },\n0x043B: { n:\"BrtBeginSlicer\" },\n0x043C: { n:\"BrtEndSlicer\" },\n0x043D: { n:\"BrtSlicerCachePivotTables\" },\n0x043E: { n:\"BrtBeginSlicerCacheOlapImpl\" },\n0x043F: { n:\"BrtEndSlicerCacheOlapImpl\" },\n0x0440: { n:\"BrtBeginSlicerCacheLevelsData\" },\n0x0441: { n:\"BrtEndSlicerCacheLevelsData\" },\n0x0442: { n:\"BrtBeginSlicerCacheLevelData\" },\n0x0443: { n:\"BrtEndSlicerCacheLevelData\" },\n0x0444: { n:\"BrtBeginSlicerCacheSiRanges\" },\n0x0445: { n:\"BrtEndSlicerCacheSiRanges\" },\n0x0446: { n:\"BrtBeginSlicerCacheSiRange\" },\n0x0447: { n:\"BrtEndSlicerCacheSiRange\" },\n0x0448: { n:\"BrtSlicerCacheOlapItem\" },\n0x0449: { n:\"BrtBeginSlicerCacheSelections\" },\n0x044A: { n:\"BrtSlicerCacheSelection\" },\n0x044B: { n:\"BrtEndSlicerCacheSelections\" },\n0x044C: { n:\"BrtBeginSlicerCacheNative\" },\n0x044D: { n:\"BrtEndSlicerCacheNative\" },\n0x044E: { n:\"BrtSlicerCacheNativeItem\" },\n0x044F: { n:\"BrtRangeProtection14\" },\n0x0450: { n:\"BrtRangeProtectionIso14\" },\n0x0451: { n:\"BrtCellIgnoreEC14\" },\n0x0457: { n:\"BrtList14\" },\n0x0458: { n:\"BrtCFIcon\" },\n0x0459: { n:\"BrtBeginSlicerCachesPivotCacheIDs\" },\n0x045A: { n:\"BrtEndSlicerCachesPivotCacheIDs\" },\n0x045B: { n:\"BrtBeginSlicers\" },\n0x045C: { n:\"BrtEndSlicers\" },\n0x045D: { n:\"BrtWbProp14\" },\n0x045E: { n:\"BrtBeginSXEdit\" },\n0x045F: { n:\"BrtEndSXEdit\" },\n0x0460: { n:\"BrtBeginSXEdits\" },\n0x0461: { n:\"BrtEndSXEdits\" },\n0x0462: { n:\"BrtBeginSXChange\" },\n0x0463: { n:\"BrtEndSXChange\" },\n0x0464: { n:\"BrtBeginSXChanges\" },\n0x0465: { n:\"BrtEndSXChanges\" },\n0x0466: { n:\"BrtSXTupleItems\" },\n0x0468: { n:\"BrtBeginSlicerStyle\" },\n0x0469: { n:\"BrtEndSlicerStyle\" },\n0x046A: { n:\"BrtSlicerStyleElement\" },\n0x046B: { n:\"BrtBeginStyleSheetExt14\" },\n0x046C: { n:\"BrtEndStyleSheetExt14\" },\n0x046D: { n:\"BrtBeginSlicerCachesPivotCacheID\" },\n0x046E: { n:\"BrtEndSlicerCachesPivotCacheID\" },\n0x046F: { n:\"BrtBeginConditionalFormattings\" },\n0x0470: { n:\"BrtEndConditionalFormattings\" },\n0x0471: { n:\"BrtBeginPCDCalcMemExt\" },\n0x0472: { n:\"BrtEndPCDCalcMemExt\" },\n0x0473: { n:\"BrtBeginPCDCalcMemsExt\" },\n0x0474: { n:\"BrtEndPCDCalcMemsExt\" },\n0x0475: { n:\"BrtPCDField14\" },\n0x0476: { n:\"BrtBeginSlicerStyles\" },\n0x0477: { n:\"BrtEndSlicerStyles\" },\n0x0478: { n:\"BrtBeginSlicerStyleElements\" },\n0x0479: { n:\"BrtEndSlicerStyleElements\" },\n0x047A: { n:\"BrtCFRuleExt\" },\n0x047B: { n:\"BrtBeginSXCondFmt14\" },\n0x047C: { n:\"BrtEndSXCondFmt14\" },\n0x047D: { n:\"BrtBeginSXCondFmts14\" },\n0x047E: { n:\"BrtEndSXCondFmts14\" },\n0x0480: { n:\"BrtBeginSortCond14\" },\n0x0481: { n:\"BrtEndSortCond14\" },\n0x0482: { n:\"BrtEndDVals14\" },\n0x0483: { n:\"BrtEndIconSet14\" },\n0x0484: { n:\"BrtEndDatabar14\" },\n0x0485: { n:\"BrtBeginColorScale14\" },\n0x0486: { n:\"BrtEndColorScale14\" },\n0x0487: { n:\"BrtBeginSxrules14\" },\n0x0488: { n:\"BrtEndSxrules14\" },\n0x0489: { n:\"BrtBeginPRule14\" },\n0x048A: { n:\"BrtEndPRule14\" },\n0x048B: { n:\"BrtBeginPRFilters14\" },\n0x048C: { n:\"BrtEndPRFilters14\" },\n0x048D: { n:\"BrtBeginPRFilter14\" },\n0x048E: { n:\"BrtEndPRFilter14\" },\n0x048F: { n:\"BrtBeginPRFItem14\" },\n0x0490: { n:\"BrtEndPRFItem14\" },\n0x0491: { n:\"BrtBeginCellIgnoreECs14\" },\n0x0492: { n:\"BrtEndCellIgnoreECs14\" },\n0x0493: { n:\"BrtDxf14\" },\n0x0494: { n:\"BrtBeginDxF14s\" },\n0x0495: { n:\"BrtEndDxf14s\" },\n0x0499: { n:\"BrtFilter14\" },\n0x049A: { n:\"BrtBeginCustomFilters14\" },\n0x049C: { n:\"BrtCustomFilter14\" },\n0x049D: { n:\"BrtIconFilter14\" },\n0x049E: { n:\"BrtPivotCacheConnectionName\" },\n0x0800: { n:\"BrtBeginDecoupledPivotCacheIDs\" },\n0x0801: { n:\"BrtEndDecoupledPivotCacheIDs\" },\n0x0802: { n:\"BrtDecoupledPivotCacheID\" },\n0x0803: { n:\"BrtBeginPivotTableRefs\" },\n0x0804: { n:\"BrtEndPivotTableRefs\" },\n0x0805: { n:\"BrtPivotTableRef\" },\n0x0806: { n:\"BrtSlicerCacheBookPivotTables\" },\n0x0807: { n:\"BrtBeginSxvcells\" },\n0x0808: { n:\"BrtEndSxvcells\" },\n0x0809: { n:\"BrtBeginSxRow\" },\n0x080A: { n:\"BrtEndSxRow\" },\n0x080C: { n:\"BrtPcdCalcMem15\" },\n0x0813: { n:\"BrtQsi15\" },\n0x0814: { n:\"BrtBeginWebExtensions\" },\n0x0815: { n:\"BrtEndWebExtensions\" },\n0x0816: { n:\"BrtWebExtension\" },\n0x0817: { n:\"BrtAbsPath15\" },\n0x0818: { n:\"BrtBeginPivotTableUISettings\" },\n0x0819: { n:\"BrtEndPivotTableUISettings\" },\n0x081B: { n:\"BrtTableSlicerCacheIDs\" },\n0x081C: { n:\"BrtTableSlicerCacheID\" },\n0x081D: { n:\"BrtBeginTableSlicerCache\" },\n0x081E: { n:\"BrtEndTableSlicerCache\" },\n0x081F: { n:\"BrtSxFilter15\" },\n0x0820: { n:\"BrtBeginTimelineCachePivotCacheIDs\" },\n0x0821: { n:\"BrtEndTimelineCachePivotCacheIDs\" },\n0x0822: { n:\"BrtTimelineCachePivotCacheID\" },\n0x0823: { n:\"BrtBeginTimelineCacheIDs\" },\n0x0824: { n:\"BrtEndTimelineCacheIDs\" },\n0x0825: { n:\"BrtBeginTimelineCacheID\" },\n0x0826: { n:\"BrtEndTimelineCacheID\" },\n0x0827: { n:\"BrtBeginTimelinesEx\" },\n0x0828: { n:\"BrtEndTimelinesEx\" },\n0x0829: { n:\"BrtBeginTimelineEx\" },\n0x082A: { n:\"BrtEndTimelineEx\" },\n0x082B: { n:\"BrtWorkBookPr15\" },\n0x082C: { n:\"BrtPCDH15\" },\n0x082D: { n:\"BrtBeginTimelineStyle\" },\n0x082E: { n:\"BrtEndTimelineStyle\" },\n0x082F: { n:\"BrtTimelineStyleElement\" },\n0x0830: { n:\"BrtBeginTimelineStylesheetExt15\" },\n0x0831: { n:\"BrtEndTimelineStylesheetExt15\" },\n0x0832: { n:\"BrtBeginTimelineStyles\" },\n0x0833: { n:\"BrtEndTimelineStyles\" },\n0x0834: { n:\"BrtBeginTimelineStyleElements\" },\n0x0835: { n:\"BrtEndTimelineStyleElements\" },\n0x0836: { n:\"BrtDxf15\" },\n0x0837: { n:\"BrtBeginDxfs15\" },\n0x0838: { n:\"brtEndDxfs15\" },\n0x0839: { n:\"BrtSlicerCacheHideItemsWithNoData\" },\n0x083A: { n:\"BrtBeginItemUniqueNames\" },\n0x083B: { n:\"BrtEndItemUniqueNames\" },\n0x083C: { n:\"BrtItemUniqueName\" },\n0x083D: { n:\"BrtBeginExtConn15\" },\n0x083E: { n:\"BrtEndExtConn15\" },\n0x083F: { n:\"BrtBeginOledbPr15\" },\n0x0840: { n:\"BrtEndOledbPr15\" },\n0x0841: { n:\"BrtBeginDataFeedPr15\" },\n0x0842: { n:\"BrtEndDataFeedPr15\" },\n0x0843: { n:\"BrtTextPr15\" },\n0x0844: { n:\"BrtRangePr15\" },\n0x0845: { n:\"BrtDbCommand15\" },\n0x0846: { n:\"BrtBeginDbTables15\" },\n0x0847: { n:\"BrtEndDbTables15\" },\n0x0848: { n:\"BrtDbTable15\" },\n0x0849: { n:\"BrtBeginDataModel\" },\n0x084A: { n:\"BrtEndDataModel\" },\n0x084B: { n:\"BrtBeginModelTables\" },\n0x084C: { n:\"BrtEndModelTables\" },\n0x084D: { n:\"BrtModelTable\" },\n0x084E: { n:\"BrtBeginModelRelationships\" },\n0x084F: { n:\"BrtEndModelRelationships\" },\n0x0850: { n:\"BrtModelRelationship\" },\n0x0851: { n:\"BrtBeginECTxtWiz15\" },\n0x0852: { n:\"BrtEndECTxtWiz15\" },\n0x0853: { n:\"BrtBeginECTWFldInfoLst15\" },\n0x0854: { n:\"BrtEndECTWFldInfoLst15\" },\n0x0855: { n:\"BrtBeginECTWFldInfo15\" },\n0x0856: { n:\"BrtFieldListActiveItem\" },\n0x0857: { n:\"BrtPivotCacheIdVersion\" },\n0x0858: { n:\"BrtSXDI15\" },\n0x0859: { n:\"BrtBeginModelTimeGroupings\" },\n0x085A: { n:\"BrtEndModelTimeGroupings\" },\n0x085B: { n:\"BrtBeginModelTimeGrouping\" },\n0x085C: { n:\"BrtEndModelTimeGrouping\" },\n0x085D: { n:\"BrtModelTimeGroupingCalcCol\" },\n0x0C00: { n:\"BrtUid\" },\n0x0C01: { n:\"BrtRevisionPtr\" },\n0x13e7: { n:\"BrtBeginCalcFeatures\" },\n0x13e8: { n:\"BrtEndCalcFeatures\" },\n0x13e9: { n:\"BrtCalcFeature\" },\n0xFFFF: { n:\"\" }\n};\n\nvar XLSBRE = evert_key(XLSBRecordEnum, 'n');\nXLSBRE[\"BrtFRTArchID$\"] = 0x0010;\n\n/* [MS-XLS] 2.3 Record Enumeration (and other sources) */\nvar XLSRecordEnum = {\n\t/* [MS-XLS] 2.3 Record Enumeration 2021-08-17 */\n0x0006: { n:\"Formula\", f:parse_Formula },\n0x000a: { n:'EOF', f:parsenoop2 },\n0x000c: { n:\"CalcCount\", f:parseuint16 },\n0x000d: { n:\"CalcMode\", f:parseuint16 },\n0x000e: { n:\"CalcPrecision\", f:parsebool },\n0x000f: { n:\"CalcRefMode\", f:parsebool },\n0x0010: { n:\"CalcDelta\", f:parse_Xnum },\n0x0011: { n:\"CalcIter\", f:parsebool },\n0x0012: { n:\"Protect\", f:parsebool },\n0x0013: { n:\"Password\", f:parseuint16 },\n0x0014: { n:\"Header\", f:parse_XLHeaderFooter },\n0x0015: { n:\"Footer\", f:parse_XLHeaderFooter },\n0x0017: { n:\"ExternSheet\", f:parse_ExternSheet },\n0x0018: { n:\"Lbl\", f:parse_Lbl },\n0x0019: { n:\"WinProtect\", f:parsebool },\n0x001a: { n:\"VerticalPageBreaks\" },\n0x001b: { n:\"HorizontalPageBreaks\" },\n0x001c: { n:\"Note\", f:parse_Note },\n0x001d: { n:\"Selection\" },\n0x0022: { n:\"Date1904\", f:parsebool },\n0x0023: { n:\"ExternName\", f:parse_ExternName },\n0x0026: { n:\"LeftMargin\", f:parse_Xnum },\n0x0027: { n:\"RightMargin\", f:parse_Xnum },\n0x0028: { n:\"TopMargin\", f:parse_Xnum },\n0x0029: { n:\"BottomMargin\", f:parse_Xnum },\n0x002a: { n:\"PrintRowCol\", f:parsebool },\n0x002b: { n:\"PrintGrid\", f:parsebool },\n0x002f: { n:\"FilePass\", f:parse_FilePass },\n0x0031: { n:\"Font\", f:parse_Font },\n0x0033: { n:\"PrintSize\", f:parseuint16 },\n0x003c: { n:\"Continue\" },\n0x003d: { n:\"Window1\", f:parse_Window1 },\n0x0040: { n:\"Backup\", f:parsebool },\n0x0041: { n:\"Pane\", f:parse_Pane },\n0x0042: { n:'CodePage', f:parseuint16 },\n0x004d: { n:\"Pls\" },\n0x0050: { n:\"DCon\" },\n0x0051: { n:\"DConRef\" },\n0x0052: { n:\"DConName\" },\n0x0055: { n:\"DefColWidth\", f:parseuint16 },\n0x0059: { n:\"XCT\" },\n0x005a: { n:\"CRN\" },\n0x005b: { n:\"FileSharing\" },\n0x005c: { n:'WriteAccess', f:parse_WriteAccess },\n0x005d: { n:\"Obj\", f:parse_Obj },\n0x005e: { n:\"Uncalced\" },\n0x005f: { n:\"CalcSaveRecalc\", f:parsebool },\n0x0060: { n:\"Template\" },\n0x0061: { n:\"Intl\" },\n0x0063: { n:\"ObjProtect\", f:parsebool },\n0x007d: { n:\"ColInfo\", f:parse_ColInfo },\n0x0080: { n:\"Guts\", f:parse_Guts },\n0x0081: { n:\"WsBool\", f:parse_WsBool },\n0x0082: { n:\"GridSet\", f:parseuint16 },\n0x0083: { n:\"HCenter\", f:parsebool },\n0x0084: { n:\"VCenter\", f:parsebool },\n0x0085: { n:'BoundSheet8', f:parse_BoundSheet8 },\n0x0086: { n:\"WriteProtect\" },\n0x008c: { n:\"Country\", f:parse_Country },\n0x008d: { n:\"HideObj\", f:parseuint16 },\n0x0090: { n:\"Sort\" },\n0x0092: { n:\"Palette\", f:parse_Palette },\n0x0097: { n:\"Sync\" },\n0x0098: { n:\"LPr\" },\n0x0099: { n:\"DxGCol\" },\n0x009a: { n:\"FnGroupName\" },\n0x009b: { n:\"FilterMode\" },\n0x009c: { n:\"BuiltInFnGroupCount\", f:parseuint16 },\n0x009d: { n:\"AutoFilterInfo\" },\n0x009e: { n:\"AutoFilter\" },\n0x00a0: { n:\"Scl\", f:parse_Scl },\n0x00a1: { n:\"Setup\", f:parse_Setup },\n0x00ae: { n:\"ScenMan\" },\n0x00af: { n:\"SCENARIO\" },\n0x00b0: { n:\"SxView\" },\n0x00b1: { n:\"Sxvd\" },\n0x00b2: { n:\"SXVI\" },\n0x00b4: { n:\"SxIvd\" },\n0x00b5: { n:\"SXLI\" },\n0x00b6: { n:\"SXPI\" },\n0x00b8: { n:\"DocRoute\" },\n0x00b9: { n:\"RecipName\" },\n0x00bd: { n:\"MulRk\", f:parse_MulRk },\n0x00be: { n:\"MulBlank\", f:parse_MulBlank },\n0x00c1: { n:'Mms', f:parsenoop2 },\n0x00c5: { n:\"SXDI\" },\n0x00c6: { n:\"SXDB\" },\n0x00c7: { n:\"SXFDB\" },\n0x00c8: { n:\"SXDBB\" },\n0x00c9: { n:\"SXNum\" },\n0x00ca: { n:\"SxBool\", f:parsebool },\n0x00cb: { n:\"SxErr\" },\n0x00cc: { n:\"SXInt\" },\n0x00cd: { n:\"SXString\" },\n0x00ce: { n:\"SXDtr\" },\n0x00cf: { n:\"SxNil\" },\n0x00d0: { n:\"SXTbl\" },\n0x00d1: { n:\"SXTBRGIITM\" },\n0x00d2: { n:\"SxTbpg\" },\n0x00d3: { n:\"ObProj\" },\n0x00d5: { n:\"SXStreamID\" },\n0x00d7: { n:\"DBCell\" },\n0x00d8: { n:\"SXRng\" },\n0x00d9: { n:\"SxIsxoper\" },\n0x00da: { n:\"BookBool\", f:parseuint16 },\n0x00dc: { n:\"DbOrParamQry\" },\n0x00dd: { n:\"ScenarioProtect\", f:parsebool },\n0x00de: { n:\"OleObjectSize\" },\n0x00e0: { n:\"XF\", f:parse_XF },\n0x00e1: { n:'InterfaceHdr', f:parse_InterfaceHdr },\n0x00e2: { n:'InterfaceEnd', f:parsenoop2 },\n0x00e3: { n:\"SXVS\" },\n0x00e5: { n:\"MergeCells\", f:parse_MergeCells },\n0x00e9: { n:\"BkHim\" },\n0x00eb: { n:\"MsoDrawingGroup\" },\n0x00ec: { n:\"MsoDrawing\" },\n0x00ed: { n:\"MsoDrawingSelection\" },\n0x00ef: { n:\"PhoneticInfo\" },\n0x00f0: { n:\"SxRule\" },\n0x00f1: { n:\"SXEx\" },\n0x00f2: { n:\"SxFilt\" },\n0x00f4: { n:\"SxDXF\" },\n0x00f5: { n:\"SxItm\" },\n0x00f6: { n:\"SxName\" },\n0x00f7: { n:\"SxSelect\" },\n0x00f8: { n:\"SXPair\" },\n0x00f9: { n:\"SxFmla\" },\n0x00fb: { n:\"SxFormat\" },\n0x00fc: { n:\"SST\", f:parse_SST },\n0x00fd: { n:\"LabelSst\", f:parse_LabelSst },\n0x00ff: { n:\"ExtSST\", f:parse_ExtSST },\n0x0100: { n:\"SXVDEx\" },\n0x0103: { n:\"SXFormula\" },\n0x0122: { n:\"SXDBEx\" },\n0x0137: { n:\"RRDInsDel\" },\n0x0138: { n:\"RRDHead\" },\n0x013b: { n:\"RRDChgCell\" },\n0x013d: { n:\"RRTabId\", f:parseuint16a },\n0x013e: { n:\"RRDRenSheet\" },\n0x013f: { n:\"RRSort\" },\n0x0140: { n:\"RRDMove\" },\n0x014a: { n:\"RRFormat\" },\n0x014b: { n:\"RRAutoFmt\" },\n0x014d: { n:\"RRInsertSh\" },\n0x014e: { n:\"RRDMoveBegin\" },\n0x014f: { n:\"RRDMoveEnd\" },\n0x0150: { n:\"RRDInsDelBegin\" },\n0x0151: { n:\"RRDInsDelEnd\" },\n0x0152: { n:\"RRDConflict\" },\n0x0153: { n:\"RRDDefName\" },\n0x0154: { n:\"RRDRstEtxp\" },\n0x015f: { n:\"LRng\" },\n0x0160: { n:\"UsesELFs\", f:parsebool },\n0x0161: { n:\"DSF\", f:parsenoop2 },\n0x0191: { n:\"CUsr\" },\n0x0192: { n:\"CbUsr\" },\n0x0193: { n:\"UsrInfo\" },\n0x0194: { n:\"UsrExcl\" },\n0x0195: { n:\"FileLock\" },\n0x0196: { n:\"RRDInfo\" },\n0x0197: { n:\"BCUsrs\" },\n0x0198: { n:\"UsrChk\" },\n0x01a9: { n:\"UserBView\" },\n0x01aa: { n:\"UserSViewBegin\" },\n0x01ab: { n:\"UserSViewEnd\" },\n0x01ac: { n:\"RRDUserView\" },\n0x01ad: { n:\"Qsi\" },\n0x01ae: { n:\"SupBook\", f:parse_SupBook },\n0x01af: { n:\"Prot4Rev\", f:parsebool },\n0x01b0: { n:\"CondFmt\" },\n0x01b1: { n:\"CF\" },\n0x01b2: { n:\"DVal\" },\n0x01b5: { n:\"DConBin\" },\n0x01b6: { n:\"TxO\", f:parse_TxO },\n0x01b7: { n:\"RefreshAll\", f:parsebool },\n0x01b8: { n:\"HLink\", f:parse_HLink },\n0x01b9: { n:\"Lel\" },\n0x01ba: { n:\"CodeName\", f:parse_XLUnicodeString },\n0x01bb: { n:\"SXFDBType\" },\n0x01bc: { n:\"Prot4RevPass\", f:parseuint16 },\n0x01bd: { n:\"ObNoMacros\" },\n0x01be: { n:\"Dv\" },\n0x01c0: { n:\"Excel9File\", f:parsenoop2 },\n0x01c1: { n:\"RecalcId\", f:parse_RecalcId, r:2},\n0x01c2: { n:\"EntExU2\", f:parsenoop2 },\n0x0200: { n:\"Dimensions\", f:parse_Dimensions },\n0x0201: { n:\"Blank\", f:parse_Blank },\n0x0203: { n:\"Number\", f:parse_Number },\n0x0204: { n:\"Label\", f:parse_Label },\n0x0205: { n:\"BoolErr\", f:parse_BoolErr },\n0x0207: { n:\"String\", f:parse_String },\n0x0208: { n:'Row', f:parse_Row },\n0x020b: { n:\"Index\" },\n0x0221: { n:\"Array\", f:parse_Array },\n0x0225: { n:\"DefaultRowHeight\", f:parse_DefaultRowHeight },\n0x0236: { n:\"Table\" },\n0x023e: { n:\"Window2\", f:parse_Window2 },\n0x027e: { n:\"RK\", f:parse_RK },\n0x0293: { n:\"Style\" },\n0x0418: { n:\"BigName\" },\n0x041e: { n:\"Format\", f:parse_Format },\n0x043c: { n:\"ContinueBigName\" },\n0x04bc: { n:\"ShrFmla\", f:parse_ShrFmla },\n0x0800: { n:\"HLinkTooltip\", f:parse_HLinkTooltip },\n0x0801: { n:\"WebPub\" },\n0x0802: { n:\"QsiSXTag\" },\n0x0803: { n:\"DBQueryExt\" },\n0x0804: { n:\"ExtString\" },\n0x0805: { n:\"TxtQry\" },\n0x0806: { n:\"Qsir\" },\n0x0807: { n:\"Qsif\" },\n0x0808: { n:\"RRDTQSIF\" },\n0x0809: { n:'BOF', f:parse_BOF },\n0x080a: { n:\"OleDbConn\" },\n0x080b: { n:\"WOpt\" },\n0x080c: { n:\"SXViewEx\" },\n0x080d: { n:\"SXTH\" },\n0x080e: { n:\"SXPIEx\" },\n0x080f: { n:\"SXVDTEx\" },\n0x0810: { n:\"SXViewEx9\" },\n0x0812: { n:\"ContinueFrt\" },\n0x0813: { n:\"RealTimeData\" },\n0x0850: { n:\"ChartFrtInfo\" },\n0x0851: { n:\"FrtWrapper\" },\n0x0852: { n:\"StartBlock\" },\n0x0853: { n:\"EndBlock\" },\n0x0854: { n:\"StartObject\" },\n0x0855: { n:\"EndObject\" },\n0x0856: { n:\"CatLab\" },\n0x0857: { n:\"YMult\" },\n0x0858: { n:\"SXViewLink\" },\n0x0859: { n:\"PivotChartBits\" },\n0x085a: { n:\"FrtFontList\" },\n0x0862: { n:\"SheetExt\" },\n0x0863: { n:\"BookExt\", r:12},\n0x0864: { n:\"SXAddl\" },\n0x0865: { n:\"CrErr\" },\n0x0866: { n:\"HFPicture\" },\n0x0867: { n:'FeatHdr', f:parsenoop2 },\n0x0868: { n:\"Feat\" },\n0x086a: { n:\"DataLabExt\" },\n0x086b: { n:\"DataLabExtContents\" },\n0x086c: { n:\"CellWatch\" },\n0x0871: { n:\"FeatHdr11\" },\n0x0872: { n:\"Feature11\" },\n0x0874: { n:\"DropDownObjIds\" },\n0x0875: { n:\"ContinueFrt11\" },\n0x0876: { n:\"DConn\" },\n0x0877: { n:\"List12\" },\n0x0878: { n:\"Feature12\" },\n0x0879: { n:\"CondFmt12\" },\n0x087a: { n:\"CF12\" },\n0x087b: { n:\"CFEx\" },\n0x087c: { n:\"XFCRC\", f:parse_XFCRC, r:12 },\n0x087d: { n:\"XFExt\", f:parse_XFExt, r:12 },\n0x087e: { n:\"AutoFilter12\" },\n0x087f: { n:\"ContinueFrt12\" },\n0x0884: { n:\"MDTInfo\" },\n0x0885: { n:\"MDXStr\" },\n0x0886: { n:\"MDXTuple\" },\n0x0887: { n:\"MDXSet\" },\n0x0888: { n:\"MDXProp\" },\n0x0889: { n:\"MDXKPI\" },\n0x088a: { n:\"MDB\" },\n0x088b: { n:\"PLV\" },\n0x088c: { n:\"Compat12\", f:parsebool, r:12 },\n0x088d: { n:\"DXF\" },\n0x088e: { n:\"TableStyles\", r:12 },\n0x088f: { n:\"TableStyle\" },\n0x0890: { n:\"TableStyleElement\" },\n0x0892: { n:\"StyleExt\" },\n0x0893: { n:\"NamePublish\" },\n0x0894: { n:\"NameCmt\", f:parse_NameCmt, r:12 },\n0x0895: { n:\"SortData\" },\n0x0896: { n:\"Theme\", f:parse_Theme, r:12 },\n0x0897: { n:\"GUIDTypeLib\" },\n0x0898: { n:\"FnGrp12\" },\n0x0899: { n:\"NameFnGrp12\" },\n0x089a: { n:\"MTRSettings\", f:parse_MTRSettings, r:12 },\n0x089b: { n:\"CompressPictures\", f:parsenoop2 },\n0x089c: { n:\"HeaderFooter\" },\n0x089d: { n:\"CrtLayout12\" },\n0x089e: { n:\"CrtMlFrt\" },\n0x089f: { n:\"CrtMlFrtContinue\" },\n0x08a3: { n:\"ForceFullCalculation\", f:parse_ForceFullCalculation },\n0x08a4: { n:\"ShapePropsStream\" },\n0x08a5: { n:\"TextPropsStream\" },\n0x08a6: { n:\"RichTextStream\" },\n0x08a7: { n:\"CrtLayout12A\" },\n0x1001: { n:\"Units\" },\n0x1002: { n:\"Chart\" },\n0x1003: { n:\"Series\" },\n0x1006: { n:\"DataFormat\" },\n0x1007: { n:\"LineFormat\" },\n0x1009: { n:\"MarkerFormat\" },\n0x100a: { n:\"AreaFormat\" },\n0x100b: { n:\"PieFormat\" },\n0x100c: { n:\"AttachedLabel\" },\n0x100d: { n:\"SeriesText\" },\n0x1014: { n:\"ChartFormat\" },\n0x1015: { n:\"Legend\" },\n0x1016: { n:\"SeriesList\" },\n0x1017: { n:\"Bar\" },\n0x1018: { n:\"Line\" },\n0x1019: { n:\"Pie\" },\n0x101a: { n:\"Area\" },\n0x101b: { n:\"Scatter\" },\n0x101c: { n:\"CrtLine\" },\n0x101d: { n:\"Axis\" },\n0x101e: { n:\"Tick\" },\n0x101f: { n:\"ValueRange\" },\n0x1020: { n:\"CatSerRange\" },\n0x1021: { n:\"AxisLine\" },\n0x1022: { n:\"CrtLink\" },\n0x1024: { n:\"DefaultText\" },\n0x1025: { n:\"Text\" },\n0x1026: { n:\"FontX\", f:parseuint16 },\n0x1027: { n:\"ObjectLink\" },\n0x1032: { n:\"Frame\" },\n0x1033: { n:\"Begin\" },\n0x1034: { n:\"End\" },\n0x1035: { n:\"PlotArea\" },\n0x103a: { n:\"Chart3d\" },\n0x103c: { n:\"PicF\" },\n0x103d: { n:\"DropBar\" },\n0x103e: { n:\"Radar\" },\n0x103f: { n:\"Surf\" },\n0x1040: { n:\"RadarArea\" },\n0x1041: { n:\"AxisParent\" },\n0x1043: { n:\"LegendException\" },\n0x1044: { n:\"ShtProps\", f:parse_ShtProps },\n0x1045: { n:\"SerToCrt\" },\n0x1046: { n:\"AxesUsed\" },\n0x1048: { n:\"SBaseRef\" },\n0x104a: { n:\"SerParent\" },\n0x104b: { n:\"SerAuxTrend\" },\n0x104e: { n:\"IFmtRecord\" },\n0x104f: { n:\"Pos\" },\n0x1050: { n:\"AlRuns\" },\n0x1051: { n:\"BRAI\" },\n0x105b: { n:\"SerAuxErrBar\" },\n0x105c: { n:\"ClrtClient\", f:parse_ClrtClient },\n0x105d: { n:\"SerFmt\" },\n0x105f: { n:\"Chart3DBarShape\" },\n0x1060: { n:\"Fbi\" },\n0x1061: { n:\"BopPop\" },\n0x1062: { n:\"AxcExt\" },\n0x1063: { n:\"Dat\" },\n0x1064: { n:\"PlotGrowth\" },\n0x1065: { n:\"SIIndex\" },\n0x1066: { n:\"GelFrame\" },\n0x1067: { n:\"BopPopCustom\" },\n0x1068: { n:\"Fbi2\" },\n\n0x0000: { n:\"Dimensions\", f:parse_Dimensions },\n0x0001: { n:\"BIFF2BLANK\" },\n0x0002: { n:\"BIFF2INT\", f:parse_BIFF2INT },\n0x0003: { n:\"BIFF2NUM\", f:parse_BIFF2NUM },\n0x0004: { n:\"BIFF2STR\", f:parse_BIFF2STR },\n0x0005: { n:\"BoolErr\", f:parse_BoolErr },\n0x0007: { n:\"String\", f:parse_BIFF2STRING },\n0x0008: { n:\"BIFF2ROW\" },\n0x0009: { n:'BOF', f:parse_BOF },\n0x000b: { n:\"Index\" },\n0x0016: { n:\"ExternCount\", f:parseuint16 },\n0x001e: { n:\"BIFF2FORMAT\", f:parse_BIFF2Format },\n0x001f: { n:\"BIFF2FMTCNT\" }, /* 16-bit cnt of BIFF2FORMAT records */\n0x0020: { n:\"BIFF2COLINFO\" },\n0x0021: { n:\"Array\", f:parse_Array },\n0x0024: { n:\"COLWIDTH\" },\n0x0025: { n:\"DefaultRowHeight\", f:parse_DefaultRowHeight },\n\t// 0x2c ??\n\t// 0x2d ??\n\t// 0x2e ??\n\t// 0x30 FONTCOUNT: number of fonts\n0x0032: { n:\"BIFF2FONTXTRA\", f:parse_BIFF2FONTXTRA },\n\t// 0x35: INFOOPTS\n\t// 0x36: TABLE (BIFF2 only)\n\t// 0x37: TABLE2 (BIFF2 only)\n\t// 0x38: WNDESK\n\t// 0x39 ??\n\t// 0x3a: BEGINPREF\n\t// 0x3b: ENDPREF\n0x003e: { n:\"BIFF2WINDOW2\" },\n\t// 0x3f ??\n\t// 0x46: SHOWSCROLL\n\t// 0x47: SHOWFORMULA\n\t// 0x48: STATUSBAR\n\t// 0x49: SHORTMENUS\n\t// 0x4A:\n\t// 0x4B:\n\t// 0x4C:\n\t// 0x4E:\n\t// 0x4F:\n\t// 0x58: TOOLBAR (BIFF3)\n\n\t/* - - - */\n0x0034: { n:\"DDEObjName\" },\n0x0043: { n:\"BIFF2XF\" },\n0x0044: { n:\"BIFF2XFINDEX\", f:parseuint16 },\n0x0045: { n:\"BIFF2FONTCLR\" },\n0x0056: { n:\"BIFF4FMTCNT\" }, /* 16-bit cnt, similar to BIFF2 */\n0x007e: { n:\"RK\" }, /* Not necessarily same as 0x027e */\n0x007f: { n:\"ImData\", f:parse_ImData },\n0x0087: { n:\"Addin\" },\n0x0088: { n:\"Edg\" },\n0x0089: { n:\"Pub\" },\n\t// 0x8A\n\t// 0x8B LH: alternate menu key flag (BIFF3/4)\n\t// 0x8E\n\t// 0x8F\n0x0091: { n:\"Sub\" },\n\t// 0x93 STYLE\n0x0094: { n:\"LHRecord\" },\n0x0095: { n:\"LHNGraph\" },\n0x0096: { n:\"Sound\" },\n\t// 0xA2 FNPROTO: function prototypes (BIFF4)\n\t// 0xA3\n\t// 0xA8\n0x00a9: { n:\"CoordList\" },\n0x00ab: { n:\"GCW\" },\n0x00bc: { n:\"ShrFmla\" }, /* Not necessarily same as 0x04bc */\n0x00bf: { n:\"ToolbarHdr\" },\n0x00c0: { n:\"ToolbarEnd\" },\n0x00c2: { n:\"AddMenu\" },\n0x00c3: { n:\"DelMenu\" },\n0x00d6: { n:\"RString\", f:parse_RString },\n0x00df: { n:\"UDDesc\" },\n0x00ea: { n:\"TabIdConf\" },\n0x0162: { n:\"XL5Modify\" },\n0x01a5: { n:\"FileSharing2\" },\n0x0206: { n:\"Formula\", f:parse_Formula },\n0x0209: { n:'BOF', f:parse_BOF },\n0x0218: { n:\"Lbl\", f:parse_Lbl },\n0x0223: { n:\"ExternName\", f:parse_ExternName },\n0x0231: { n:\"Font\" },\n0x0243: { n:\"BIFF3XF\" },\n0x0406: { n:\"Formula\", f:parse_Formula },\n0x0409: { n:'BOF', f:parse_BOF },\n0x0443: { n:\"BIFF4XF\" },\n0x086d: { n:\"FeatInfo\" },\n0x0873: { n:\"FeatInfo11\" },\n0x0881: { n:\"SXAddl12\" },\n0x08c0: { n:\"AutoWebPub\" },\n0x08c1: { n:\"ListObj\" },\n0x08c2: { n:\"ListField\" },\n0x08c3: { n:\"ListDV\" },\n0x08c4: { n:\"ListCondFmt\" },\n0x08c5: { n:\"ListCF\" },\n0x08c6: { n:\"FMQry\" },\n0x08c7: { n:\"FMSQry\" },\n0x08c8: { n:\"PLV\" },\n0x08c9: { n:\"LnExt\" },\n0x08ca: { n:\"MkrExt\" },\n0x08cb: { n:\"CrtCoopt\" },\n0x08d6: { n:\"FRTArchId$\", r:12 },\n\n0x7262: {}\n};\n\nvar XLSRE = evert_key(XLSRecordEnum, 'n');\nfunction write_biff_rec(ba, type, payload, length) {\n\tvar t = typeof type == \"number\" ? type : (+type || +XLSRE[type]);\n\tif(isNaN(t)) return;\n\tvar len = length || (payload||[]).length || 0;\n\tvar o = ba.next(4);\n\to.write_shift(2, t);\n\to.write_shift(2, len);\n\tif(len > 0 && is_buf(payload)) ba.push(payload);\n}\n\nfunction write_biff_continue(ba, type, payload, length) {\n\tvar len = length || (payload||[]).length || 0;\n\tif(len <= 8224) return write_biff_rec(ba, type, payload, len);\n\tvar t = +type || +XLSRE[type];\n\tif(isNaN(t)) return;\n\tvar parts = payload.parts || [], sidx = 0;\n\tvar i = 0, w = 0;\n\twhile(w + (parts[sidx] || 8224) <= 8224) { w+= (parts[sidx] || 8224); sidx++; }\n\tvar o = ba.next(4);\n\to.write_shift(2, t);\n\to.write_shift(2, w);\n\tba.push(payload.slice(i, i + w));\n\ti += w;\n\twhile(i < len) {\n\t\to = ba.next(4);\n\t\to.write_shift(2, 0x3c); // TODO: figure out correct continue type\n\t\tw = 0;\n\t\twhile(w + (parts[sidx] || 8224) <= 8224) { w+= (parts[sidx] || 8224); sidx++; }\n\t\to.write_shift(2, w);\n\t\tba.push(payload.slice(i, i+w)); i+= w;\n\t}\n}\n\nfunction write_BIFF2Cell(out, r, c) {\n\tif(!out) out = new_buf(7);\n\tout.write_shift(2, r);\n\tout.write_shift(2, c);\n\tout.write_shift(2, 0);\n\tout.write_shift(1, 0);\n\treturn out;\n}\n\nfunction write_BIFF2BERR(r, c, val, t) {\n\tvar out = new_buf(9);\n\twrite_BIFF2Cell(out, r, c);\n\twrite_Bes(val, t || 'b', out);\n\treturn out;\n}\n\n/* TODO: codepage, large strings */\nfunction write_BIFF2LABEL(r, c, val) {\n\tvar out = new_buf(8 + 2*val.length);\n\twrite_BIFF2Cell(out, r, c);\n\tout.write_shift(1, val.length);\n\tout.write_shift(val.length, val, 'sbcs');\n\treturn out.l < out.length ? out.slice(0, out.l) : out;\n}\n\nfunction write_ws_biff2_cell(ba, cell, R, C) {\n\tif(cell.v != null) switch(cell.t) {\n\t\tcase 'd': case 'n':\n\t\t\tvar v = cell.t == 'd' ? datenum(parseDate(cell.v)) : cell.v;\n\t\t\tif((v == (v|0)) && (v >= 0) && (v < 65536))\n\t\t\t\twrite_biff_rec(ba, 0x0002, write_BIFF2INT(R, C, v));\n\t\t\telse\n\t\t\t\twrite_biff_rec(ba, 0x0003, write_BIFF2NUM(R,C, v));\n\t\t\treturn;\n\t\tcase 'b': case 'e': write_biff_rec(ba, 0x0005, write_BIFF2BERR(R, C, cell.v, cell.t)); return;\n\t\t/* TODO: codepage, sst */\n\t\tcase 's': case 'str':\n\t\t\twrite_biff_rec(ba, 0x0004, write_BIFF2LABEL(R, C, (cell.v||\"\").slice(0,255)));\n\t\t\treturn;\n\t}\n\twrite_biff_rec(ba, 0x0001, write_BIFF2Cell(null, R, C));\n}\n\nfunction write_ws_biff2(ba, ws, idx, opts) {\n\tvar dense = Array.isArray(ws);\n\tvar range = safe_decode_range(ws['!ref'] || \"A1\"), ref, rr = \"\", cols = [];\n\tif(range.e.c > 0xFF || range.e.r > 0x3FFF) {\n\t\tif(opts.WTF) throw new Error(\"Range \" + (ws['!ref'] || \"A1\") + \" exceeds format limit A1:IV16384\");\n\t\trange.e.c = Math.min(range.e.c, 0xFF);\n\t\trange.e.r = Math.min(range.e.c, 0x3FFF);\n\t\tref = encode_range(range);\n\t}\n\tfor(var R = range.s.r; R <= range.e.r; ++R) {\n\t\trr = encode_row(R);\n\t\tfor(var C = range.s.c; C <= range.e.c; ++C) {\n\t\t\tif(R === range.s.r) cols[C] = encode_col(C);\n\t\t\tref = cols[C] + rr;\n\t\t\tvar cell = dense ? (ws[R]||[])[C] : ws[ref];\n\t\t\tif(!cell) continue;\n\t\t\t/* write cell */\n\t\t\twrite_ws_biff2_cell(ba, cell, R, C, opts);\n\t\t}\n\t}\n}\n\n/* Based on test files */\nfunction write_biff2_buf(wb, opts) {\n\tvar o = opts || {};\n\tif(DENSE != null && o.dense == null) o.dense = DENSE;\n\tvar ba = buf_array();\n\tvar idx = 0;\n\tfor(var i=0;i<wb.SheetNames.length;++i) if(wb.SheetNames[i] == o.sheet) idx=i;\n\tif(idx == 0 && !!o.sheet && wb.SheetNames[0] != o.sheet) throw new Error(\"Sheet not found: \" + o.sheet);\n\twrite_biff_rec(ba, (o.biff == 4 ? 0x0409 : (o.biff == 3 ? 0x0209 : 0x0009)), write_BOF(wb, 0x10, o));\n\t/* ... */\n\twrite_ws_biff2(ba, wb.Sheets[wb.SheetNames[idx]], idx, o, wb);\n\t/* ... */\n\twrite_biff_rec(ba, 0x000A);\n\treturn ba.end();\n}\n\nfunction write_FONTS_biff8(ba, data, opts) {\n\twrite_biff_rec(ba, \"Font\", write_Font({\n\t\tsz:12,\n\t\tcolor: {theme:1},\n\t\tname: \"Arial\",\n\t\tfamily: 2,\n\t\tscheme: \"minor\"\n\t}, opts));\n}\n\n\nfunction write_FMTS_biff8(ba, NF, opts) {\n\tif(!NF) return;\n\t[[5,8],[23,26],[41,44],[/*63*/50,/*66],[164,*/392]].forEach(function(r) {\nfor(var i = r[0]; i <= r[1]; ++i) if(NF[i] != null) write_biff_rec(ba, \"Format\", write_Format(i, NF[i], opts));\n\t});\n}\n\nfunction write_FEAT(ba, ws) {\n\t/* [MS-XLS] 2.4.112 */\n\tvar o = new_buf(19);\n\to.write_shift(4, 0x867); o.write_shift(4, 0); o.write_shift(4, 0);\n\to.write_shift(2, 3); o.write_shift(1, 1); o.write_shift(4, 0);\n\twrite_biff_rec(ba, \"FeatHdr\", o);\n\t/* [MS-XLS] 2.4.111 */\n\to = new_buf(39);\n\to.write_shift(4, 0x868); o.write_shift(4, 0); o.write_shift(4, 0);\n\to.write_shift(2, 3); o.write_shift(1, 0); o.write_shift(4, 0);\n\to.write_shift(2, 1); o.write_shift(4, 4); o.write_shift(2, 0);\n\twrite_Ref8U(safe_decode_range(ws['!ref']||\"A1\"), o);\n\to.write_shift(4, 4);\n\twrite_biff_rec(ba, \"Feat\", o);\n}\n\nfunction write_CELLXFS_biff8(ba, opts) {\n\tfor(var i = 0; i < 16; ++i) write_biff_rec(ba, \"XF\", write_XF({numFmtId:0, style:true}, 0, opts));\n\topts.cellXfs.forEach(function(c) {\n\t\twrite_biff_rec(ba, \"XF\", write_XF(c, 0, opts));\n\t});\n}\n\nfunction write_ws_biff8_hlinks(ba, ws) {\n\tfor(var R=0; R<ws['!links'].length; ++R) {\n\t\tvar HL = ws['!links'][R];\n\t\twrite_biff_rec(ba, \"HLink\", write_HLink(HL));\n\t\tif(HL[1].Tooltip) write_biff_rec(ba, \"HLinkTooltip\", write_HLinkTooltip(HL));\n\t}\n\tdelete ws['!links'];\n}\n\nfunction write_ws_cols_biff8(ba, cols, ws) {\n\tif(!cols) return;\n\tvar cnt = 0;\n\tcols.forEach(function(col, idx) {\n\t\tif(++cnt <= 256 && col) {\n\t\t\twrite_biff_rec(ba, \"ColInfo\", write_ColInfo(col_obj_w(idx, col), idx));\n\t\t}\n\t});\n}\n\nfunction write_ws_biff8_cell(ba, cell, R, C, opts) {\n\tvar os = 16 + get_cell_style(opts.cellXfs, cell, opts);\n\tif(cell.v == null && !cell.bf) {\n\t\twrite_biff_rec(ba, \"Blank\", write_XLSCell(R, C, os));\n\t\treturn;\n\t}\n\tif(cell.bf) write_biff_rec(ba, \"Formula\", write_Formula(cell, R, C, opts, os));\n\telse switch(cell.t) {\n\t\tcase 'd': case 'n':\n\t\t\tvar v = cell.t == 'd' ? datenum(parseDate(cell.v)) : cell.v;\n\t\t\t/* TODO: emit RK as appropriate */\n\t\t\twrite_biff_rec(ba, \"Number\", write_Number(R, C, v, os, opts));\n\t\t\tbreak;\n\t\tcase 'b': case 'e':\n\t\t\twrite_biff_rec(ba, 0x0205, write_BoolErr(R, C, cell.v, os, opts, cell.t));\n\t\t\tbreak;\n\t\t/* TODO: codepage, sst */\n\t\tcase 's': case 'str':\n\t\t\tif(opts.bookSST) {\n\t\t\t\tvar isst = get_sst_id(opts.Strings, cell.v, opts.revStrings);\n\t\t\t\twrite_biff_rec(ba, \"LabelSst\", write_LabelSst(R, C, isst, os, opts));\n\t\t\t} else write_biff_rec(ba, \"Label\", write_Label(R, C, (cell.v||\"\").slice(0,255), os, opts));\n\t\t\tbreak;\n\t\tdefault:\n\t\t\twrite_biff_rec(ba, \"Blank\", write_XLSCell(R, C, os));\n\t}\n}\n\n/* [MS-XLS] 2.1.7.20.5 */\nfunction write_ws_biff8(idx, opts, wb) {\n\tvar ba = buf_array();\n\tvar s = wb.SheetNames[idx], ws = wb.Sheets[s] || {};\n\tvar _WB = ((wb||{}).Workbook||{});\n\tvar _sheet = ((_WB.Sheets||[])[idx]||{});\n\tvar dense = Array.isArray(ws);\n\tvar b8 = opts.biff == 8;\n\tvar ref, rr = \"\", cols = [];\n\tvar range = safe_decode_range(ws['!ref'] || \"A1\");\n\tvar MAX_ROWS = b8 ? 65536 : 16384;\n\tif(range.e.c > 0xFF || range.e.r >= MAX_ROWS) {\n\t\tif(opts.WTF) throw new Error(\"Range \" + (ws['!ref'] || \"A1\") + \" exceeds format limit A1:IV16384\");\n\t\trange.e.c = Math.min(range.e.c, 0xFF);\n\t\trange.e.r = Math.min(range.e.c, MAX_ROWS-1);\n\t}\n\n\twrite_biff_rec(ba, 0x0809, write_BOF(wb, 0x10, opts));\n\t/* [Uncalced] Index */\n\twrite_biff_rec(ba, \"CalcMode\", writeuint16(1));\n\twrite_biff_rec(ba, \"CalcCount\", writeuint16(100));\n\twrite_biff_rec(ba, \"CalcRefMode\", writebool(true));\n\twrite_biff_rec(ba, \"CalcIter\", writebool(false));\n\twrite_biff_rec(ba, \"CalcDelta\", write_Xnum(0.001));\n\twrite_biff_rec(ba, \"CalcSaveRecalc\", writebool(true));\n\twrite_biff_rec(ba, \"PrintRowCol\", writebool(false));\n\twrite_biff_rec(ba, \"PrintGrid\", writebool(false));\n\twrite_biff_rec(ba, \"GridSet\", writeuint16(1));\n\twrite_biff_rec(ba, \"Guts\", write_Guts([0,0]));\n\t/* DefaultRowHeight WsBool [Sync] [LPr] [HorizontalPageBreaks] [VerticalPageBreaks] */\n\t/* Header (string) */\n\t/* Footer (string) */\n\twrite_biff_rec(ba, \"HCenter\", writebool(false));\n\twrite_biff_rec(ba, \"VCenter\", writebool(false));\n\t/* ... */\n\tif(b8) write_ws_cols_biff8(ba, ws[\"!cols\"], ws);\n\t/* ... */\n\twrite_biff_rec(ba, 0x200, write_Dimensions(range, opts));\n\t/* ... */\n\n\tif(b8) ws['!links'] = [];\n\tfor(var R = range.s.r; R <= range.e.r; ++R) {\n\t\trr = encode_row(R);\n\t\tfor(var C = range.s.c; C <= range.e.c; ++C) {\n\t\t\tif(R === range.s.r) cols[C] = encode_col(C);\n\t\t\tref = cols[C] + rr;\n\t\t\tvar cell = dense ? (ws[R]||[])[C] : ws[ref];\n\t\t\tif(!cell) continue;\n\t\t\t/* write cell */\n\t\t\twrite_ws_biff8_cell(ba, cell, R, C, opts);\n\t\t\tif(b8 && cell.l) ws['!links'].push([ref, cell.l]);\n\t\t}\n\t}\n\tvar cname = _sheet.CodeName || _sheet.name || s;\n\t/* ... */\n\tif(b8) write_biff_rec(ba, \"Window2\", write_Window2((_WB.Views||[])[0]));\n\t/* ... */\n\tif(b8 && (ws['!merges']||[]).length) write_biff_rec(ba, \"MergeCells\", write_MergeCells(ws['!merges']));\n\t/* [LRng] *QUERYTABLE [PHONETICINFO] CONDFMTS */\n\tif(b8) write_ws_biff8_hlinks(ba, ws);\n\t/* [DVAL] */\n\twrite_biff_rec(ba, \"CodeName\", write_XLUnicodeString(cname, opts));\n\t/* *WebPub *CellWatch [SheetExt] */\n\tif(b8) write_FEAT(ba, ws);\n\t/* *FEAT11 *RECORD12 */\n\twrite_biff_rec(ba, \"EOF\");\n\treturn ba.end();\n}\n\n/* [MS-XLS] 2.1.7.20.3 */\nfunction write_biff8_global(wb, bufs, opts) {\n\tvar A = buf_array();\n\tvar _WB = ((wb||{}).Workbook||{});\n\tvar _sheets = (_WB.Sheets||[]);\n\tvar _wb = _WB.WBProps||{};\n\tvar b8 = opts.biff == 8, b5 = opts.biff == 5;\n\twrite_biff_rec(A, 0x0809, write_BOF(wb, 0x05, opts));\n\tif(opts.bookType == \"xla\") write_biff_rec(A, \"Addin\");\n\twrite_biff_rec(A, \"InterfaceHdr\", b8 ? writeuint16(0x04b0) : null);\n\twrite_biff_rec(A, \"Mms\", writezeroes(2));\n\tif(b5) write_biff_rec(A, \"ToolbarHdr\");\n\tif(b5) write_biff_rec(A, \"ToolbarEnd\");\n\twrite_biff_rec(A, \"InterfaceEnd\");\n\twrite_biff_rec(A, \"WriteAccess\", write_WriteAccess(\"SheetJS\", opts));\n\t/* [FileSharing] */\n\twrite_biff_rec(A, \"CodePage\", writeuint16(b8 ? 0x04b0 : 0x04E4));\n\t/* *2047 Lel */\n\tif(b8) write_biff_rec(A, \"DSF\", writeuint16(0));\n\tif(b8) write_biff_rec(A, \"Excel9File\");\n\twrite_biff_rec(A, \"RRTabId\", write_RRTabId(wb.SheetNames.length));\n\tif(b8 && wb.vbaraw) write_biff_rec(A, \"ObProj\");\n\t/* [ObNoMacros] */\n\tif(b8 && wb.vbaraw) {\n\t\tvar cname = _wb.CodeName || \"ThisWorkbook\";\n\t\twrite_biff_rec(A, \"CodeName\", write_XLUnicodeString(cname, opts));\n\t}\n\twrite_biff_rec(A, \"BuiltInFnGroupCount\", writeuint16(0x11));\n\t/* *FnGroupName *FnGrp12 */\n\t/* *Lbl */\n\t/* [OleObjectSize] */\n\twrite_biff_rec(A, \"WinProtect\", writebool(false));\n\twrite_biff_rec(A, \"Protect\", writebool(false));\n\twrite_biff_rec(A, \"Password\", writeuint16(0));\n\tif(b8) write_biff_rec(A, \"Prot4Rev\", writebool(false));\n\tif(b8) write_biff_rec(A, \"Prot4RevPass\", writeuint16(0));\n\twrite_biff_rec(A, \"Window1\", write_Window1(opts));\n\twrite_biff_rec(A, \"Backup\", writebool(false));\n\twrite_biff_rec(A, \"HideObj\", writeuint16(0));\n\twrite_biff_rec(A, \"Date1904\", writebool(safe1904(wb)==\"true\"));\n\twrite_biff_rec(A, \"CalcPrecision\", writebool(true));\n\tif(b8) write_biff_rec(A, \"RefreshAll\", writebool(false));\n\twrite_biff_rec(A, \"BookBool\", writeuint16(0));\n\t/* ... */\n\twrite_FONTS_biff8(A, wb, opts);\n\twrite_FMTS_biff8(A, wb.SSF, opts);\n\twrite_CELLXFS_biff8(A, opts);\n\t/* ... */\n\tif(b8) write_biff_rec(A, \"UsesELFs\", writebool(false));\n\tvar a = A.end();\n\n\tvar C = buf_array();\n\t/* METADATA [MTRSettings] [ForceFullCalculation] */\n\tif(b8) write_biff_rec(C, \"Country\", write_Country());\n\t/* *SUPBOOK *LBL *RTD [RecalcId] *HFPicture *MSODRAWINGGROUP */\n\n\t/* BIFF8: [SST *Continue] ExtSST */\n\tif(b8 && opts.Strings) write_biff_continue(C, \"SST\", write_SST(opts.Strings, opts));\n\n\t/* *WebPub [WOpt] [CrErr] [BookExt] *FeatHdr *DConn [THEME] [CompressPictures] [Compat12] [GUIDTypeLib] */\n\twrite_biff_rec(C, \"EOF\");\n\tvar c = C.end();\n\n\tvar B = buf_array();\n\tvar blen = 0, j = 0;\n\tfor(j = 0; j < wb.SheetNames.length; ++j) blen += (b8 ? 12 : 11) + (b8 ? 2 : 1) * wb.SheetNames[j].length;\n\tvar start = a.length + blen + c.length;\n\tfor(j = 0; j < wb.SheetNames.length; ++j) {\n\t\tvar _sheet = _sheets[j] || ({});\n\t\twrite_biff_rec(B, \"BoundSheet8\", write_BoundSheet8({pos:start, hs:_sheet.Hidden||0, dt:0, name:wb.SheetNames[j]}, opts));\n\t\tstart += bufs[j].length;\n\t}\n\t/* 1*BoundSheet8 */\n\tvar b = B.end();\n\tif(blen != b.length) throw new Error(\"BS8 \" + blen + \" != \" + b.length);\n\n\tvar out = [];\n\tif(a.length) out.push(a);\n\tif(b.length) out.push(b);\n\tif(c.length) out.push(c);\n\treturn __toBuffer([out]);\n}\n\n/* [MS-XLS] 2.1.7.20 Workbook Stream */\nfunction write_biff8_buf(wb, opts) {\n\tvar o = opts || {};\n\tvar bufs = [];\n\n\tif(wb && !wb.SSF) {\n\t\twb.SSF = SSF.get_table();\n\t}\n\tif(wb && wb.SSF) {\n\t\tmake_ssf(SSF); SSF.load_table(wb.SSF);\n\t\t// $FlowIgnore\n\t\to.revssf = evert_num(wb.SSF); o.revssf[wb.SSF[65535]] = 0;\n\t\to.ssf = wb.SSF;\n\t}\n\n\to.Strings = []; o.Strings.Count = 0; o.Strings.Unique = 0;\n\tfix_write_opts(o);\n\n\to.cellXfs = [];\n\tget_cell_style(o.cellXfs, {}, {revssf:{\"General\":0}});\n\n\tif(!wb.Props) wb.Props = {};\n\n\tfor(var i = 0; i < wb.SheetNames.length; ++i) bufs[bufs.length] = write_ws_biff8(i, o, wb);\n\tbufs.unshift(write_biff8_global(wb, bufs, o));\n\treturn __toBuffer([bufs]);\n}\n\nfunction write_biff_buf(wb, opts) {\n\tvar o = opts || {};\n\tswitch(o.biff || 2) {\n\t\tcase 8: case 5: return write_biff8_buf(wb, opts);\n\t\tcase 4: case 3: case 2: return write_biff2_buf(wb, opts);\n\t}\n\tthrow new Error(\"invalid type \" + o.bookType + \" for BIFF\");\n}\n/* note: browser DOM element cannot see mso- style attrs, must parse */\nvar HTML_ = (function() {\n\tfunction html_to_sheet(str, _opts) {\n\t\tvar opts = _opts || {};\n\t\tif(DENSE != null && opts.dense == null) opts.dense = DENSE;\n\t\tvar ws = opts.dense ? ([]) : ({});\n\t\tstr = str.replace(/<!--.*?-->/g, \"\");\n\t\tvar mtch = str.match(/<table/i);\n\t\tif(!mtch) throw new Error(\"Invalid HTML: could not find <table>\");\n\t\tvar mtch2 = str.match(/<\\/table/i);\n\t\tvar i = mtch.index, j = mtch2 && mtch2.index || str.length;\n\t\tvar rows = split_regex(str.slice(i, j), /(:?<tr[^>]*>)/i, \"<tr>\");\n\t\tvar R = -1, C = 0, RS = 0, CS = 0;\n\t\tvar range = {s:{r:10000000, c:10000000},e:{r:0,c:0}};\n\t\tvar merges = [];\n\t\tfor(i = 0; i < rows.length; ++i) {\n\t\t\tvar row = rows[i].trim();\n\t\t\tvar hd = row.slice(0,3).toLowerCase();\n\t\t\tif(hd == \"<tr\") { ++R; if(opts.sheetRows && opts.sheetRows <= R) { --R; break; } C = 0; continue; }\n\t\t\tif(hd != \"<td\" && hd != \"<th\") continue;\n\t\t\tvar cells = row.split(/<\\/t[dh]>/i);\n\t\t\tfor(j = 0; j < cells.length; ++j) {\n\t\t\t\tvar cell = cells[j].trim();\n\t\t\t\tif(!cell.match(/<t[dh]/i)) continue;\n\t\t\t\tvar m = cell, cc = 0;\n\t\t\t\t/* TODO: parse styles etc */\n\t\t\t\twhile(m.charAt(0) == \"<\" && (cc = m.indexOf(\">\")) > -1) m = m.slice(cc+1);\n\t\t\t\tfor(var midx = 0; midx < merges.length; ++midx) {\n\t\t\t\t\tvar _merge = merges[midx];\n\t\t\t\t\tif(_merge.s.c == C && _merge.s.r < R && R <= _merge.e.r) { C = _merge.e.c + 1; midx = -1; }\n\t\t\t\t}\n\t\t\t\tvar tag = parsexmltag(cell.slice(0, cell.indexOf(\">\")));\n\t\t\t\tCS = tag.colspan ? +tag.colspan : 1;\n\t\t\t\tif((RS = +tag.rowspan)>1 || CS>1) merges.push({s:{r:R,c:C},e:{r:R + (RS||1) - 1, c:C + CS - 1}});\n\t\t\t\tvar _t = tag.t || tag[\"data-t\"] || \"\";\n\t\t\t\t/* TODO: generate stub cells */\n\t\t\t\tif(!m.length) { C += CS; continue; }\n\t\t\t\tm = htmldecode(m);\n\t\t\t\tif(range.s.r > R) range.s.r = R; if(range.e.r < R) range.e.r = R;\n\t\t\t\tif(range.s.c > C) range.s.c = C; if(range.e.c < C) range.e.c = C;\n\t\t\t\tif(!m.length) continue;\n\t\t\t\tvar o = {t:'s', v:m};\n\t\t\t\tif(opts.raw || !m.trim().length || _t == 's'){}\n\t\t\t\telse if(m === 'TRUE') o = {t:'b', v:true};\n\t\t\t\telse if(m === 'FALSE') o = {t:'b', v:false};\n\t\t\t\telse if(!isNaN(fuzzynum(m))) o = {t:'n', v:fuzzynum(m)};\n\t\t\t\telse if(!isNaN(fuzzydate(m).getDate())) {\n\t\t\t\t\to = ({t:'d', v:parseDate(m)});\n\t\t\t\t\tif(!opts.cellDates) o = ({t:'n', v:datenum(o.v)});\n\t\t\t\t\to.z = opts.dateNF || SSF._table[14];\n\t\t\t\t}\n\t\t\t\tif(opts.dense) { if(!ws[R]) ws[R] = []; ws[R][C] = o; }\n\t\t\t\telse ws[encode_cell({r:R, c:C})] = o;\n\t\t\t\tC += CS;\n\t\t\t}\n\t\t}\n\t\tws['!ref'] = encode_range(range);\n\t\tif(merges.length) ws[\"!merges\"] = merges;\n\t\treturn ws;\n\t}\n\tfunction html_to_book(str, opts) {\n\t\tvar mtch = str.match(/<table.*?>[\\s\\S]*?<\\/table>/gi);\n\t\tif(!mtch || mtch.length == 0) throw new Error(\"Invalid HTML: could not find <table>\");\n\t\tif(mtch.length == 1) return sheet_to_workbook(html_to_sheet(mtch[0], opts), opts);\n\t\tvar wb = utils.book_new();\n\t\tmtch.forEach(function(s, idx) { utils.book_append_sheet(wb, html_to_sheet(s, opts), \"Sheet\" + (idx+1)); });\n\t\treturn wb;\n\t}\n\tfunction make_html_row(ws, r, R, o) {\n\t\tvar M = (ws['!merges'] ||[]);\n\t\tvar oo = [];\n\t\tfor(var C = r.s.c; C <= r.e.c; ++C) {\n\t\t\tvar RS = 0, CS = 0;\n\t\t\tfor(var j = 0; j < M.length; ++j) {\n\t\t\t\tif(M[j].s.r > R || M[j].s.c > C) continue;\n\t\t\t\tif(M[j].e.r < R || M[j].e.c < C) continue;\n\t\t\t\tif(M[j].s.r < R || M[j].s.c < C) { RS = -1; break; }\n\t\t\t\tRS = M[j].e.r - M[j].s.r + 1; CS = M[j].e.c - M[j].s.c + 1; break;\n\t\t\t}\n\t\t\tif(RS < 0) continue;\n\t\t\tvar coord = encode_cell({r:R,c:C});\n\t\t\tvar cell = o.dense ? (ws[R]||[])[C] : ws[coord];\n\t\t\t/* TODO: html entities */\n\t\t\tvar w = (cell && cell.v != null) && (cell.h || escapehtml(cell.w || (format_cell(cell), cell.w) || \"\")) || \"\";\n\t\t\tvar sp = ({});\n\t\t\tif(RS > 1) sp.rowspan = RS;\n\t\t\tif(CS > 1) sp.colspan = CS;\n\t\t\tif(o.editable) w = '<span contenteditable=\"true\">' + w + '</span>';\n\t\t\telse if(cell) {\n\t\t\t\tsp[\"data-t\"] = cell && cell.t || 'z';\n\t\t\t\tif(cell.v != null) sp[\"data-v\"] = cell.v;\n\t\t\t\tif(cell.z != null) sp[\"data-z\"] = cell.z;\n\t\t\t\tif(cell.l && (cell.l.Target || \"#\").charAt(0) != \"#\") w = '<a href=\"' + cell.l.Target +'\">' + w + '</a>';\n\t\t\t}\n\t\t\tsp.id = (o.id || \"sjs\") + \"-\" + coord;\n\t\t\too.push(writextag('td', w, sp));\n\t\t}\n\t\tvar preamble = \"<tr>\";\n\t\treturn preamble + oo.join(\"\") + \"</tr>\";\n\t}\n\tfunction make_html_preamble(ws, R, o) {\n\t\tvar out = [];\n\t\treturn out.join(\"\") + '<table' + (o && o.id ? ' id=\"' + o.id + '\"' : \"\") + '>';\n\t}\n\tvar _BEGIN = '<html><head><meta charset=\"utf-8\"/><title>SheetJS Table Export</title></head><body>';\n\tvar _END = '</body></html>';\n\tfunction sheet_to_html(ws, opts/*, wb:?Workbook*/) {\n\t\tvar o = opts || {};\n\t\tvar header = o.header != null ? o.header : _BEGIN;\n\t\tvar footer = o.footer != null ? o.footer : _END;\n\t\tvar out = [header];\n\t\tvar r = decode_range(ws['!ref']);\n\t\to.dense = Array.isArray(ws);\n\t\tout.push(make_html_preamble(ws, r, o));\n\t\tfor(var R = r.s.r; R <= r.e.r; ++R) out.push(make_html_row(ws, r, R, o));\n\t\tout.push(\"</table>\" + footer);\n\t\treturn out.join(\"\");\n\n\t}\n\treturn {\n\t\tto_workbook: html_to_book,\n\t\tto_sheet: html_to_sheet,\n\t\t_row: make_html_row,\n\t\tBEGIN: _BEGIN,\n\t\tEND: _END,\n\t\t_preamble: make_html_preamble,\n\t\tfrom_sheet: sheet_to_html\n\t};\n})();\n\nfunction sheet_add_dom(ws, table, _opts) {\n\tvar opts = _opts || {};\n\tif(DENSE != null) opts.dense = DENSE;\n\tvar or_R = 0, or_C = 0;\n\tif(opts.origin != null) {\n\t\tif(typeof opts.origin == 'number') or_R = opts.origin;\n\t\telse {\n\t\t\tvar _origin = typeof opts.origin == \"string\" ? decode_cell(opts.origin) : opts.origin;\n\t\t\tor_R = _origin.r; or_C = _origin.c;\n\t\t}\n\t}\n\tvar rows = table.getElementsByTagName('tr');\n\tvar sheetRows = Math.min(opts.sheetRows||10000000, rows.length);\n\tvar range = {s:{r:0,c:0},e:{r:or_R,c:or_C}};\n\tif(ws[\"!ref\"]) {\n\t\tvar _range = decode_range(ws[\"!ref\"]);\n\t\trange.s.r = Math.min(range.s.r, _range.s.r);\n\t\trange.s.c = Math.min(range.s.c, _range.s.c);\n\t\trange.e.r = Math.max(range.e.r, _range.e.r);\n\t\trange.e.c = Math.max(range.e.c, _range.e.c);\n\t\tif(or_R == -1) range.e.r = or_R = _range.e.r + 1;\n\t}\n\tvar merges = [], midx = 0;\n\tvar rowinfo = ws[\"!rows\"] || (ws[\"!rows\"] = []);\n\tvar _R = 0, R = 0, _C = 0, C = 0, RS = 0, CS = 0;\n\tif(!ws[\"!cols\"]) ws['!cols'] = [];\n\tfor(; _R < rows.length && R < sheetRows; ++_R) {\n\t\tvar row = rows[_R];\n\t\tif (is_dom_element_hidden(row)) {\n\t\t\tif (opts.display) continue;\n\t\t\trowinfo[R] = {hidden: true};\n\t\t}\n\t\tvar elts = (row.children);\n\t\tfor(_C = C = 0; _C < elts.length; ++_C) {\n\t\t\tvar elt = elts[_C];\n\t\t\tif (opts.display && is_dom_element_hidden(elt)) continue;\n\t\t\tvar v = elt.hasAttribute('data-v') ? elt.getAttribute('data-v') : elt.hasAttribute('v') ? elt.getAttribute('v') : htmldecode(elt.innerHTML);\n\t\t\tvar z = elt.getAttribute('data-z') || elt.getAttribute('z');\n\t\t\tfor(midx = 0; midx < merges.length; ++midx) {\n\t\t\t\tvar m = merges[midx];\n\t\t\t\tif(m.s.c == C + or_C && m.s.r < R + or_R && R + or_R <= m.e.r) { C = m.e.c+1 - or_C; midx = -1; }\n\t\t\t}\n\t\t\t/* TODO: figure out how to extract nonstandard mso- style */\n\t\t\tCS = +elt.getAttribute(\"colspan\") || 1;\n\t\t\tif( ((RS = (+elt.getAttribute(\"rowspan\") || 1)))>1 || CS>1) merges.push({s:{r:R + or_R,c:C + or_C},e:{r:R + or_R + (RS||1) - 1, c:C + or_C + (CS||1) - 1}});\n\t\t\tvar o = {t:'s', v:v};\n\t\t\tvar _t = elt.getAttribute(\"data-t\") || elt.getAttribute(\"t\") || \"\";\n\t\t\tif(v != null) {\n\t\t\t\tif(v.length == 0) o.t = _t || 'z';\n\t\t\t\telse if(opts.raw || v.trim().length == 0 || _t == \"s\"){}\n\t\t\t\telse if(v === 'TRUE') o = {t:'b', v:true};\n\t\t\t\telse if(v === 'FALSE') o = {t:'b', v:false};\n\t\t\t\telse if(!isNaN(fuzzynum(v))) o = {t:'n', v:fuzzynum(v)};\n\t\t\t\telse if(!isNaN(fuzzydate(v).getDate())) {\n\t\t\t\t\to = ({t:'d', v:parseDate(v)});\n\t\t\t\t\tif(!opts.cellDates) o = ({t:'n', v:datenum(o.v)});\n\t\t\t\t\to.z = opts.dateNF || SSF._table[14];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(o.z === undefined && z != null) o.z = z;\n\t\t\t/* The first link is used.  Links are assumed to be fully specified.\n\t\t\t * TODO: The right way to process relative links is to make a new <a> */\n\t\t\tvar l = \"\", Aelts = elt.getElementsByTagName(\"A\");\n\t\t\tif(Aelts && Aelts.length) for(var Aelti = 0; Aelti < Aelts.length; ++Aelti)\tif(Aelts[Aelti].hasAttribute(\"href\")) {\n\t\t\t\tl = Aelts[Aelti].getAttribute(\"href\"); if(l.charAt(0) != \"#\") break;\n\t\t\t}\n\t\t\tif(l && l.charAt(0) != \"#\") o.l = ({ Target: l });\n\t\t\tif(opts.dense) { if(!ws[R + or_R]) ws[R + or_R] = []; ws[R + or_R][C + or_C] = o; }\n\t\t\telse ws[encode_cell({c:C + or_C, r:R + or_R})] = o;\n\t\t\tif(range.e.c < C + or_C) range.e.c = C + or_C;\n\t\t\tC += CS;\n\t\t}\n\t\t++R;\n\t}\n\tif(merges.length) ws['!merges'] = (ws[\"!merges\"] || []).concat(merges);\n\trange.e.r = Math.max(range.e.r, R - 1 + or_R);\n\tws['!ref'] = encode_range(range);\n\tif(R >= sheetRows) ws['!fullref'] = encode_range((range.e.r = rows.length-_R+R-1 + or_R,range)); // We can count the real number of rows to parse but we don't to improve the performance\n\treturn ws;\n}\n\nfunction parse_dom_table(table, _opts) {\n\tvar opts = _opts || {};\n\tvar ws = opts.dense ? ([]) : ({});\n\treturn sheet_add_dom(ws, table, _opts);\n}\n\nfunction table_to_book(table, opts) {\n\treturn sheet_to_workbook(parse_dom_table(table, opts), opts);\n}\n\nfunction is_dom_element_hidden(element) {\n\tvar display = '';\n\tvar get_computed_style = get_get_computed_style_function(element);\n\tif(get_computed_style) display = get_computed_style(element).getPropertyValue('display');\n\tif(!display) display = element.style.display; // Fallback for cases when getComputedStyle is not available (e.g. an old browser or some Node.js environments) or doesn't work (e.g. if the element is not inserted to a document)\n\treturn display === 'none';\n}\n\n/* global getComputedStyle */\nfunction get_get_computed_style_function(element) {\n\t// The proper getComputedStyle implementation is the one defined in the element window\n\tif(element.ownerDocument.defaultView && typeof element.ownerDocument.defaultView.getComputedStyle === 'function') return element.ownerDocument.defaultView.getComputedStyle;\n\t// If it is not available, try to get one from the global namespace\n\tif(typeof getComputedStyle === 'function') return getComputedStyle;\n\treturn null;\n}\n/* OpenDocument */\nvar parse_content_xml = (function() {\n\n\tvar parse_text_p = function(text) {\n\t\t/* 6.1.2 White Space Characters */\n\t\tvar fixed = text\n\t\t\t.replace(/[\\t\\r\\n]/g, \" \").trim().replace(/ +/g, \" \")\n\t\t\t.replace(/<text:s\\/>/g,\" \")\n\t\t\t.replace(/<text:s text:c=\"(\\d+)\"\\/>/g, function($$,$1) { return Array(parseInt($1,10)+1).join(\" \"); })\n\t\t\t.replace(/<text:tab[^>]*\\/>/g,\"\\t\")\n\t\t\t.replace(/<text:line-break\\/>/g,\"\\n\");\n\t\tvar v = unescapexml(fixed.replace(/<[^>]*>/g,\"\"));\n\n\t\treturn [v];\n\t};\n\n\tvar number_formats = {\n\t\t/* ods name: [short ssf fmt, long ssf fmt] */\n\t\tday:           [\"d\",   \"dd\"],\n\t\tmonth:         [\"m\",   \"mm\"],\n\t\tyear:          [\"y\",   \"yy\"],\n\t\thours:         [\"h\",   \"hh\"],\n\t\tminutes:       [\"m\",   \"mm\"],\n\t\tseconds:       [\"s\",   \"ss\"],\n\t\t\"am-pm\":       [\"A/P\", \"AM/PM\"],\n\t\t\"day-of-week\": [\"ddd\", \"dddd\"],\n\t\tera:           [\"e\",   \"ee\"],\n\t\t/* there is no native representation of LO \"Q\" format */\n\t\tquarter:       [\"\\\\Qm\", \"m\\\\\\\"th quarter\\\"\"]\n\t};\n\n\treturn function pcx(d, _opts) {\n\t\tvar opts = _opts || {};\n\t\tif(DENSE != null && opts.dense == null) opts.dense = DENSE;\n\t\tvar str = xlml_normalize(d);\n\t\tvar state = [], tmp;\n\t\tvar tag;\n\t\tvar NFtag = {name:\"\"}, NF = \"\", pidx = 0;\n\t\tvar sheetag;\n\t\tvar rowtag;\n\t\tvar Sheets = {}, SheetNames = [];\n\t\tvar ws = opts.dense ? ([]) : ({});\n\t\tvar Rn, q;\n\t\tvar ctag = ({value:\"\"});\n\t\tvar textp = \"\", textpidx = 0, textptag;\n\t\tvar textR = [];\n\t\tvar R = -1, C = -1, range = {s: {r:1000000,c:10000000}, e: {r:0, c:0}};\n\t\tvar row_ol = 0;\n\t\tvar number_format_map = {};\n\t\tvar merges = [], mrange = {}, mR = 0, mC = 0;\n\t\tvar rowinfo = [], rowpeat = 1, colpeat = 1;\n\t\tvar arrayf = [];\n\t\tvar WB = {Names:[]};\n\t\tvar atag = ({});\n\t\tvar _Ref = [\"\", \"\"];\n\t\tvar comments = [], comment = ({});\n\t\tvar creator = \"\", creatoridx = 0;\n\t\tvar isstub = false, intable = false;\n\t\tvar i = 0;\n\t\txlmlregex.lastIndex = 0;\n\t\tstr = str.replace(/<!--([\\s\\S]*?)-->/mg,\"\").replace(/<!DOCTYPE[^\\[]*\\[[^\\]]*\\]>/gm,\"\");\n\t\twhile((Rn = xlmlregex.exec(str))) switch((Rn[3]=Rn[3].replace(/_.*$/,\"\"))) {\n\n\t\t\tcase 'table': case '工作表': // 9.1.2 <table:table>\n\t\t\t\tif(Rn[1]==='/') {\n\t\t\t\t\tif(range.e.c >= range.s.c && range.e.r >= range.s.r) ws['!ref'] = encode_range(range);\n\t\t\t\t\telse ws['!ref'] = \"A1:A1\";\n\t\t\t\t\tif(opts.sheetRows > 0 && opts.sheetRows <= range.e.r) {\n\t\t\t\t\t\tws['!fullref'] = ws['!ref'];\n\t\t\t\t\t\trange.e.r = opts.sheetRows - 1;\n\t\t\t\t\t\tws['!ref'] = encode_range(range);\n\t\t\t\t\t}\n\t\t\t\t\tif(merges.length) ws['!merges'] = merges;\n\t\t\t\t\tif(rowinfo.length) ws[\"!rows\"] = rowinfo;\n\t\t\t\t\tsheetag.name = sheetag['名称'] || sheetag.name;\n\t\t\t\t\tif(typeof JSON !== 'undefined') JSON.stringify(sheetag);\n\t\t\t\t\tSheetNames.push(sheetag.name);\n\t\t\t\t\tSheets[sheetag.name] = ws;\n\t\t\t\t\tintable = false;\n\t\t\t\t}\n\t\t\t\telse if(Rn[0].charAt(Rn[0].length-2) !== '/') {\n\t\t\t\t\tsheetag = parsexmltag(Rn[0], false);\n\t\t\t\t\tR = C = -1;\n\t\t\t\t\trange.s.r = range.s.c = 10000000; range.e.r = range.e.c = 0;\n\t\t\t\t\tws = opts.dense ? ([]) : ({}); merges = [];\n\t\t\t\t\trowinfo = [];\n\t\t\t\t\tintable = true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'table-row-group': // 9.1.9 <table:table-row-group>\n\t\t\t\tif(Rn[1] === \"/\") --row_ol; else ++row_ol;\n\t\t\t\tbreak;\n\t\t\tcase 'table-row': case '行': // 9.1.3 <table:table-row>\n\t\t\t\tif(Rn[1] === '/') { R+=rowpeat; rowpeat = 1; break; }\n\t\t\t\trowtag = parsexmltag(Rn[0], false);\n\t\t\t\tif(rowtag['行号']) R = rowtag['行号'] - 1; else if(R == -1) R = 0;\n\t\t\t\trowpeat = +rowtag['number-rows-repeated'] || 1;\n\t\t\t\t/* TODO: remove magic */\n\t\t\t\tif(rowpeat < 10) for(i = 0; i < rowpeat; ++i) if(row_ol > 0) rowinfo[R + i] = {level: row_ol};\n\t\t\t\tC = -1; break;\n\t\t\tcase 'covered-table-cell': // 9.1.5 <table:covered-table-cell>\n\t\t\t\tif(Rn[1] !== '/') ++C;\n\t\t\t\tif(opts.sheetStubs) {\n\t\t\t\t\tif(opts.dense) { if(!ws[R]) ws[R] = []; ws[R][C] = {t:'z'}; }\n\t\t\t\t\telse ws[encode_cell({r:R,c:C})] = {t:'z'};\n\t\t\t\t}\n\t\t\t\ttextp = \"\"; textR = [];\n\t\t\t\tbreak; /* stub */\n\t\t\tcase 'table-cell': case '数据':\n\t\t\t\tif(Rn[0].charAt(Rn[0].length-2) === '/') {\n\t\t\t\t\t++C;\n\t\t\t\t\tctag = parsexmltag(Rn[0], false);\n\t\t\t\t\tcolpeat = parseInt(ctag['number-columns-repeated']||\"1\", 10);\n\t\t\t\t\tq = ({t:'z', v:null});\n\t\t\t\t\tif(ctag.formula && opts.cellFormula != false) q.f = ods_to_csf_formula(unescapexml(ctag.formula));\n\t\t\t\t\tif((ctag['数据类型'] || ctag['value-type']) == \"string\") {\n\t\t\t\t\t\tq.t = \"s\"; q.v = unescapexml(ctag['string-value'] || \"\");\n\t\t\t\t\t\tif(opts.dense) {\n\t\t\t\t\t\t\tif(!ws[R]) ws[R] = [];\n\t\t\t\t\t\t\tws[R][C] = q;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tws[encode_cell({r:R,c:C})] = q;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tC+= colpeat-1;\n\t\t\t\t} else if(Rn[1]!=='/') {\n\t\t\t\t\t++C;\n\t\t\t\t\ttextp = \"\"; textpidx = 0; textR = [];\n\t\t\t\t\tcolpeat = 1;\n\t\t\t\t\tvar rptR = rowpeat ? R + rowpeat - 1 : R;\n\t\t\t\t\tif(C > range.e.c) range.e.c = C;\n\t\t\t\t\tif(C < range.s.c) range.s.c = C;\n\t\t\t\t\tif(R < range.s.r) range.s.r = R;\n\t\t\t\t\tif(rptR > range.e.r) range.e.r = rptR;\n\t\t\t\t\tctag = parsexmltag(Rn[0], false);\n\t\t\t\t\tcomments = []; comment = ({});\n\t\t\t\t\tq = ({t:ctag['数据类型'] || ctag['value-type'], v:null});\n\t\t\t\t\tif(opts.cellFormula) {\n\t\t\t\t\t\tif(ctag.formula) ctag.formula = unescapexml(ctag.formula);\n\t\t\t\t\t\tif(ctag['number-matrix-columns-spanned'] && ctag['number-matrix-rows-spanned']) {\n\t\t\t\t\t\t\tmR = parseInt(ctag['number-matrix-rows-spanned'],10) || 0;\n\t\t\t\t\t\t\tmC = parseInt(ctag['number-matrix-columns-spanned'],10) || 0;\n\t\t\t\t\t\t\tmrange = {s: {r:R,c:C}, e:{r:R + mR-1,c:C + mC-1}};\n\t\t\t\t\t\t\tq.F = encode_range(mrange);\n\t\t\t\t\t\t\tarrayf.push([mrange, q.F]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(ctag.formula) q.f = ods_to_csf_formula(ctag.formula);\n\t\t\t\t\t\telse for(i = 0; i < arrayf.length; ++i)\n\t\t\t\t\t\t\tif(R >= arrayf[i][0].s.r && R <= arrayf[i][0].e.r)\n\t\t\t\t\t\t\t\tif(C >= arrayf[i][0].s.c && C <= arrayf[i][0].e.c)\n\t\t\t\t\t\t\t\t\tq.F = arrayf[i][1];\n\t\t\t\t\t}\n\t\t\t\t\tif(ctag['number-columns-spanned'] || ctag['number-rows-spanned']) {\n\t\t\t\t\t\tmR = parseInt(ctag['number-rows-spanned'],10) || 0;\n\t\t\t\t\t\tmC = parseInt(ctag['number-columns-spanned'],10) || 0;\n\t\t\t\t\t\tmrange = {s: {r:R,c:C}, e:{r:R + mR-1,c:C + mC-1}};\n\t\t\t\t\t\tmerges.push(mrange);\n\t\t\t\t\t}\n\n\t\t\t\t\t/* 19.675.2 table:number-columns-repeated */\n\t\t\t\t\tif(ctag['number-columns-repeated']) colpeat = parseInt(ctag['number-columns-repeated'], 10);\n\n\t\t\t\t\t/* 19.385 office:value-type */\n\t\t\t\t\tswitch(q.t) {\n\t\t\t\t\t\tcase 'boolean': q.t = 'b'; q.v = parsexmlbool(ctag['boolean-value']); break;\n\t\t\t\t\t\tcase 'float': q.t = 'n'; q.v = parseFloat(ctag.value); break;\n\t\t\t\t\t\tcase 'percentage': q.t = 'n'; q.v = parseFloat(ctag.value); break;\n\t\t\t\t\t\tcase 'currency': q.t = 'n'; q.v = parseFloat(ctag.value); break;\n\t\t\t\t\t\tcase 'date': q.t = 'd'; q.v = parseDate(ctag['date-value']);\n\t\t\t\t\t\t\tif(!opts.cellDates) { q.t = 'n'; q.v = datenum(q.v); }\n\t\t\t\t\t\t\tq.z = 'm/d/yy'; break;\n\t\t\t\t\t\tcase 'time': q.t = 'n'; q.v = parse_isodur(ctag['time-value'])/86400;\n\t\t\t\t\t\t\tif(opts.cellDates) { q.t = 'd'; q.v = numdate(q.v); }\n\t\t\t\t\t\t\tq.z = 'HH:MM:SS'; break;\n\t\t\t\t\t\tcase 'number': q.t = 'n'; q.v = parseFloat(ctag['数据数值']); break;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tif(q.t === 'string' || q.t === 'text' || !q.t) {\n\t\t\t\t\t\t\t\tq.t = 's';\n\t\t\t\t\t\t\t\tif(ctag['string-value'] != null) { textp = unescapexml(ctag['string-value']); textR = []; }\n\t\t\t\t\t\t\t} else throw new Error('Unsupported value type ' + q.t);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tisstub = false;\n\t\t\t\t\tif(q.t === 's') {\n\t\t\t\t\t\tq.v = textp || '';\n\t\t\t\t\t\tif(textR.length) q.R = textR;\n\t\t\t\t\t\tisstub = textpidx == 0;\n\t\t\t\t\t}\n\t\t\t\t\tif(atag.Target) q.l = atag;\n\t\t\t\t\tif(comments.length > 0) { q.c = comments; comments = []; }\n\t\t\t\t\tif(textp && opts.cellText !== false) q.w = textp;\n\t\t\t\t\tif(isstub) { q.t = \"z\"; delete q.v; }\n\t\t\t\t\tif(!isstub || opts.sheetStubs) {\n\t\t\t\t\t\tif(!(opts.sheetRows && opts.sheetRows <= R)) {\n\t\t\t\t\t\t\tfor(var rpt = 0; rpt < rowpeat; ++rpt) {\n\t\t\t\t\t\t\t\tcolpeat = parseInt(ctag['number-columns-repeated']||\"1\", 10);\n\t\t\t\t\t\t\t\tif(opts.dense) {\n\t\t\t\t\t\t\t\t\tif(!ws[R + rpt]) ws[R + rpt] = [];\n\t\t\t\t\t\t\t\t\tws[R + rpt][C] = rpt == 0 ? q : dup(q);\n\t\t\t\t\t\t\t\t\twhile(--colpeat > 0) ws[R + rpt][C + colpeat] = dup(q);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tws[encode_cell({r:R + rpt,c:C})] = q;\n\t\t\t\t\t\t\t\t\twhile(--colpeat > 0) ws[encode_cell({r:R + rpt,c:C + colpeat})] = dup(q);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(range.e.c <= C) range.e.c = C;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcolpeat = parseInt(ctag['number-columns-repeated']||\"1\", 10);\n\t\t\t\t\tC += colpeat-1; colpeat = 0;\n\t\t\t\t\tq = {};\n\t\t\t\t\ttextp = \"\"; textR = [];\n\t\t\t\t}\n\t\t\t\tatag = ({});\n\t\t\t\tbreak; // 9.1.4 <table:table-cell>\n\n\t\t\t/* pure state */\n\t\t\tcase 'document': // TODO: <office:document> is the root for FODS\n\t\t\tcase 'document-content': case '电子表格文档': // 3.1.3.2 <office:document-content>\n\t\t\tcase 'spreadsheet': case '主体': // 3.7 <office:spreadsheet>\n\t\t\tcase 'scripts': // 3.12 <office:scripts>\n\t\t\tcase 'styles': // TODO <office:styles>\n\t\t\tcase 'font-face-decls': // 3.14 <office:font-face-decls>\n\t\t\tcase 'master-styles': // 3.15.4 <office:master-styles> -- relevant for FODS\n\t\t\t\tif(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw \"Bad state: \"+tmp;}\n\t\t\t\telse if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);\n\t\t\t\tbreak;\n\n\t\t\tcase 'annotation': // 14.1 <office:annotation>\n\t\t\t\tif(Rn[1]==='/'){\n\t\t\t\t\tif((tmp=state.pop())[0]!==Rn[3]) throw \"Bad state: \"+tmp;\n\t\t\t\t\tcomment.t = textp;\n\t\t\t\t\tif(textR.length) comment.R = textR;\n\t\t\t\t\tcomment.a = creator;\n\t\t\t\t\tcomments.push(comment);\n\t\t\t\t}\n\t\t\t\telse if(Rn[0].charAt(Rn[0].length-2) !== '/') {state.push([Rn[3], false]);}\n\t\t\t\tcreator = \"\"; creatoridx = 0;\n\t\t\t\ttextp = \"\"; textpidx = 0; textR = [];\n\t\t\t\tbreak;\n\n\t\t\tcase 'creator': // 4.3.2.7 <dc:creator>\n\t\t\t\tif(Rn[1]==='/') { creator = str.slice(creatoridx,Rn.index); }\n\t\t\t\telse creatoridx = Rn.index + Rn[0].length;\n\t\t\t\tbreak;\n\n\t\t\t/* ignore state */\n\t\t\tcase 'meta': case '元数据': // TODO: <office:meta> <uof:元数据> FODS/UOF\n\t\t\tcase 'settings': // TODO: <office:settings>\n\t\t\tcase 'config-item-set': // TODO: <office:config-item-set>\n\t\t\tcase 'config-item-map-indexed': // TODO: <office:config-item-map-indexed>\n\t\t\tcase 'config-item-map-entry': // TODO: <office:config-item-map-entry>\n\t\t\tcase 'config-item-map-named': // TODO: <office:config-item-map-entry>\n\t\t\tcase 'shapes': // 9.2.8 <table:shapes>\n\t\t\tcase 'frame': // 10.4.2 <draw:frame>\n\t\t\tcase 'text-box': // 10.4.3 <draw:text-box>\n\t\t\tcase 'image': // 10.4.4 <draw:image>\n\t\t\tcase 'data-pilot-tables': // 9.6.2 <table:data-pilot-tables>\n\t\t\tcase 'list-style': // 16.30 <text:list-style>\n\t\t\tcase 'form': // 13.13 <form:form>\n\t\t\tcase 'dde-links': // 9.8 <table:dde-links>\n\t\t\tcase 'event-listeners': // TODO\n\t\t\tcase 'chart': // TODO\n\t\t\t\tif(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw \"Bad state: \"+tmp;}\n\t\t\t\telse if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], false]);\n\t\t\t\ttextp = \"\"; textpidx = 0; textR = [];\n\t\t\t\tbreak;\n\n\t\t\tcase 'scientific-number': // TODO: <number:scientific-number>\n\t\t\t\tbreak;\n\t\t\tcase 'currency-symbol': // TODO: <number:currency-symbol>\n\t\t\t\tbreak;\n\t\t\tcase 'currency-style': // TODO: <number:currency-style>\n\t\t\t\tbreak;\n\t\t\tcase 'number-style': // 16.27.2 <number:number-style>\n\t\t\tcase 'percentage-style': // 16.27.9 <number:percentage-style>\n\t\t\tcase 'date-style': // 16.27.10 <number:date-style>\n\t\t\tcase 'time-style': // 16.27.18 <number:time-style>\n\t\t\t\tif(Rn[1]==='/'){\n\t\t\t\t\tnumber_format_map[NFtag.name] = NF;\n\t\t\t\t\tif((tmp=state.pop())[0]!==Rn[3]) throw \"Bad state: \"+tmp;\n\t\t\t\t} else if(Rn[0].charAt(Rn[0].length-2) !== '/') {\n\t\t\t\t\tNF = \"\";\n\t\t\t\t\tNFtag = parsexmltag(Rn[0], false);\n\t\t\t\t\tstate.push([Rn[3], true]);\n\t\t\t\t} break;\n\n\t\t\tcase 'script': break; // 3.13 <office:script>\n\t\t\tcase 'libraries': break; // TODO: <ooo:libraries>\n\t\t\tcase 'automatic-styles': break; // 3.15.3 <office:automatic-styles>\n\n\t\t\tcase 'default-style': // TODO: <style:default-style>\n\t\t\tcase 'page-layout': break; // TODO: <style:page-layout>\n\t\t\tcase 'style': // 16.2 <style:style>\n\t\t\t\tbreak;\n\t\t\tcase 'map': break; // 16.3 <style:map>\n\t\t\tcase 'font-face': break; // 16.21 <style:font-face>\n\n\t\t\tcase 'paragraph-properties': break; // 17.6 <style:paragraph-properties>\n\t\t\tcase 'table-properties': break; // 17.15 <style:table-properties>\n\t\t\tcase 'table-column-properties': break; // 17.16 <style:table-column-properties>\n\t\t\tcase 'table-row-properties': break; // 17.17 <style:table-row-properties>\n\t\t\tcase 'table-cell-properties': break; // 17.18 <style:table-cell-properties>\n\n\t\t\tcase 'number': // 16.27.3 <number:number>\n\t\t\t\tswitch(state[state.length-1][0]) {\n\t\t\t\t\tcase 'time-style':\n\t\t\t\t\tcase 'date-style':\n\t\t\t\t\t\ttag = parsexmltag(Rn[0], false);\n\t\t\t\t\t\tNF += number_formats[Rn[3]][tag.style==='long'?1:0]; break;\n\t\t\t\t} break;\n\n\t\t\tcase 'fraction': break; // TODO 16.27.6 <number:fraction>\n\n\t\t\tcase 'day': // 16.27.11 <number:day>\n\t\t\tcase 'month': // 16.27.12 <number:month>\n\t\t\tcase 'year': // 16.27.13 <number:year>\n\t\t\tcase 'era': // 16.27.14 <number:era>\n\t\t\tcase 'day-of-week': // 16.27.15 <number:day-of-week>\n\t\t\tcase 'week-of-year': // 16.27.16 <number:week-of-year>\n\t\t\tcase 'quarter': // 16.27.17 <number:quarter>\n\t\t\tcase 'hours': // 16.27.19 <number:hours>\n\t\t\tcase 'minutes': // 16.27.20 <number:minutes>\n\t\t\tcase 'seconds': // 16.27.21 <number:seconds>\n\t\t\tcase 'am-pm': // 16.27.22 <number:am-pm>\n\t\t\t\tswitch(state[state.length-1][0]) {\n\t\t\t\t\tcase 'time-style':\n\t\t\t\t\tcase 'date-style':\n\t\t\t\t\t\ttag = parsexmltag(Rn[0], false);\n\t\t\t\t\t\tNF += number_formats[Rn[3]][tag.style==='long'?1:0]; break;\n\t\t\t\t} break;\n\n\t\t\tcase 'boolean-style': break; // 16.27.23 <number:boolean-style>\n\t\t\tcase 'boolean': break; // 16.27.24 <number:boolean>\n\t\t\tcase 'text-style': break; // 16.27.25 <number:text-style>\n\t\t\tcase 'text': // 16.27.26 <number:text>\n\t\t\t\tif(Rn[0].slice(-2) === \"/>\") break;\n\t\t\t\telse if(Rn[1]===\"/\") switch(state[state.length-1][0]) {\n\t\t\t\t\tcase 'number-style':\n\t\t\t\t\tcase 'date-style':\n\t\t\t\t\tcase 'time-style':\n\t\t\t\t\t\tNF += str.slice(pidx, Rn.index);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse pidx = Rn.index + Rn[0].length;\n\t\t\t\tbreak;\n\n\t\t\tcase 'named-range': // 9.4.12 <table:named-range>\n\t\t\t\ttag = parsexmltag(Rn[0], false);\n\t\t\t\t_Ref = ods_to_csf_3D(tag['cell-range-address']);\n\t\t\t\tvar nrange = ({Name:tag.name, Ref:_Ref[0] + '!' + _Ref[1]});\n\t\t\t\tif(intable) nrange.Sheet = SheetNames.length;\n\t\t\t\tWB.Names.push(nrange);\n\t\t\t\tbreak;\n\n\t\t\tcase 'text-content': break; // 16.27.27 <number:text-content>\n\t\t\tcase 'text-properties': break; // 16.27.27 <style:text-properties>\n\t\t\tcase 'embedded-text': break; // 16.27.4 <number:embedded-text>\n\n\t\t\tcase 'body': case '电子表格': break; // 3.3 16.9.6 19.726.3\n\n\t\t\tcase 'forms': break; // 12.25.2 13.2\n\t\t\tcase 'table-column': break; // 9.1.6 <table:table-column>\n\t\t\tcase 'table-header-rows': break; // 9.1.7 <table:table-header-rows>\n\t\t\tcase 'table-rows': break; // 9.1.12 <table:table-rows>\n\t\t\t/* TODO: outline levels */\n\t\t\tcase 'table-column-group': break; // 9.1.10 <table:table-column-group>\n\t\t\tcase 'table-header-columns': break; // 9.1.11 <table:table-header-columns>\n\t\t\tcase 'table-columns': break; // 9.1.12 <table:table-columns>\n\n\t\t\tcase 'null-date': break; // 9.4.2 <table:null-date> TODO: date1904\n\n\t\t\tcase 'graphic-properties': break; // 17.21 <style:graphic-properties>\n\t\t\tcase 'calculation-settings': break; // 9.4.1 <table:calculation-settings>\n\t\t\tcase 'named-expressions': break; // 9.4.11 <table:named-expressions>\n\t\t\tcase 'label-range': break; // 9.4.9 <table:label-range>\n\t\t\tcase 'label-ranges': break; // 9.4.10 <table:label-ranges>\n\t\t\tcase 'named-expression': break; // 9.4.13 <table:named-expression>\n\t\t\tcase 'sort': break; // 9.4.19 <table:sort>\n\t\t\tcase 'sort-by': break; // 9.4.20 <table:sort-by>\n\t\t\tcase 'sort-groups': break; // 9.4.22 <table:sort-groups>\n\n\t\t\tcase 'tab': break; // 6.1.4 <text:tab>\n\t\t\tcase 'line-break': break; // 6.1.5 <text:line-break>\n\t\t\tcase 'span': break; // 6.1.7 <text:span>\n\t\t\tcase 'p': case '文本串': // 5.1.3 <text:p>\n\t\t\t\tif(['master-styles'].indexOf(state[state.length-1][0]) > -1) break;\n\t\t\t\tif(Rn[1]==='/' && (!ctag || !ctag['string-value'])) {\n\t\t\t\t\tvar ptp = parse_text_p(str.slice(textpidx,Rn.index), textptag);\n\t\t\t\t\ttextp = (textp.length > 0 ? textp + \"\\n\" : \"\") + ptp[0];\n\t\t\t\t} else { textptag = parsexmltag(Rn[0], false); textpidx = Rn.index + Rn[0].length; }\n\t\t\t\tbreak; // <text:p>\n\t\t\tcase 's': break; // <text:s>\n\n\t\t\tcase 'database-range': // 9.4.15 <table:database-range>\n\t\t\t\tif(Rn[1]==='/') break;\n\t\t\t\ttry {\n\t\t\t\t\t_Ref = ods_to_csf_3D(parsexmltag(Rn[0])['target-range-address']);\n\t\t\t\t\tSheets[_Ref[0]]['!autofilter'] = { ref:_Ref[1] };\n\t\t\t\t} catch(e) {/* empty */}\n\t\t\t\tbreak;\n\n\t\t\tcase 'date': break; // <*:date>\n\n\t\t\tcase 'object': break; // 10.4.6.2 <draw:object>\n\t\t\tcase 'title': case '标题': break; // <*:title> OR <uof:标题>\n\t\t\tcase 'desc': break; // <*:desc>\n\t\t\tcase 'binary-data': break; // 10.4.5 TODO: b64 blob\n\n\t\t\t/* 9.2 Advanced Tables */\n\t\t\tcase 'table-source': break; // 9.2.6\n\t\t\tcase 'scenario': break; // 9.2.6\n\n\t\t\tcase 'iteration': break; // 9.4.3 <table:iteration>\n\t\t\tcase 'content-validations': break; // 9.4.4 <table:\n\t\t\tcase 'content-validation': break; // 9.4.5 <table:\n\t\t\tcase 'help-message': break; // 9.4.6 <table:\n\t\t\tcase 'error-message': break; // 9.4.7 <table:\n\t\t\tcase 'database-ranges': break; // 9.4.14 <table:database-ranges>\n\t\t\tcase 'filter': break; // 9.5.2 <table:filter>\n\t\t\tcase 'filter-and': break; // 9.5.3 <table:filter-and>\n\t\t\tcase 'filter-or': break; // 9.5.4 <table:filter-or>\n\t\t\tcase 'filter-condition': break; // 9.5.5 <table:filter-condition>\n\n\t\t\tcase 'list-level-style-bullet': break; // 16.31 <text:\n\t\t\tcase 'list-level-style-number': break; // 16.32 <text:\n\t\t\tcase 'list-level-properties': break; // 17.19 <style:\n\n\t\t\t/* 7.3 Document Fields */\n\t\t\tcase 'sender-firstname': // 7.3.6.2\n\t\t\tcase 'sender-lastname': // 7.3.6.3\n\t\t\tcase 'sender-initials': // 7.3.6.4\n\t\t\tcase 'sender-title': // 7.3.6.5\n\t\t\tcase 'sender-position': // 7.3.6.6\n\t\t\tcase 'sender-email': // 7.3.6.7\n\t\t\tcase 'sender-phone-private': // 7.3.6.8\n\t\t\tcase 'sender-fax': // 7.3.6.9\n\t\t\tcase 'sender-company': // 7.3.6.10\n\t\t\tcase 'sender-phone-work': // 7.3.6.11\n\t\t\tcase 'sender-street': // 7.3.6.12\n\t\t\tcase 'sender-city': // 7.3.6.13\n\t\t\tcase 'sender-postal-code': // 7.3.6.14\n\t\t\tcase 'sender-country': // 7.3.6.15\n\t\t\tcase 'sender-state-or-province': // 7.3.6.16\n\t\t\tcase 'author-name': // 7.3.7.1\n\t\t\tcase 'author-initials': // 7.3.7.2\n\t\t\tcase 'chapter': // 7.3.8\n\t\t\tcase 'file-name': // 7.3.9\n\t\t\tcase 'template-name': // 7.3.9\n\t\t\tcase 'sheet-name': // 7.3.9\n\t\t\t\tbreak;\n\n\t\t\tcase 'event-listener':\n\t\t\t\tbreak;\n\t\t\t/* TODO: FODS Properties */\n\t\t\tcase 'initial-creator':\n\t\t\tcase 'creation-date':\n\t\t\tcase 'print-date':\n\t\t\tcase 'generator':\n\t\t\tcase 'document-statistic':\n\t\t\tcase 'user-defined':\n\t\t\tcase 'editing-duration':\n\t\t\tcase 'editing-cycles':\n\t\t\t\tbreak;\n\n\t\t\t/* TODO: FODS Config */\n\t\t\tcase 'config-item':\n\t\t\t\tbreak;\n\n\t\t\t/* TODO: style tokens */\n\t\t\tcase 'page-number': break; // TODO <text:page-number>\n\t\t\tcase 'page-count': break; // TODO <text:page-count>\n\t\t\tcase 'time': break; // TODO <text:time>\n\n\t\t\t/* 9.3 Advanced Table Cells */\n\t\t\tcase 'cell-range-source': break; // 9.3.1 <table:\n\t\t\tcase 'detective': break; // 9.3.2 <table:\n\t\t\tcase 'operation': break; // 9.3.3 <table:\n\t\t\tcase 'highlighted-range': break; // 9.3.4 <table:\n\n\t\t\t/* 9.6 Data Pilot Tables <table: */\n\t\t\tcase 'data-pilot-table': // 9.6.3\n\t\t\tcase 'source-cell-range': // 9.6.5\n\t\t\tcase 'source-service': // 9.6.6\n\t\t\tcase 'data-pilot-field': // 9.6.7\n\t\t\tcase 'data-pilot-level': // 9.6.8\n\t\t\tcase 'data-pilot-subtotals': // 9.6.9\n\t\t\tcase 'data-pilot-subtotal': // 9.6.10\n\t\t\tcase 'data-pilot-members': // 9.6.11\n\t\t\tcase 'data-pilot-member': // 9.6.12\n\t\t\tcase 'data-pilot-display-info': // 9.6.13\n\t\t\tcase 'data-pilot-sort-info': // 9.6.14\n\t\t\tcase 'data-pilot-layout-info': // 9.6.15\n\t\t\tcase 'data-pilot-field-reference': // 9.6.16\n\t\t\tcase 'data-pilot-groups': // 9.6.17\n\t\t\tcase 'data-pilot-group': // 9.6.18\n\t\t\tcase 'data-pilot-group-member': // 9.6.19\n\t\t\t\tbreak;\n\n\t\t\t/* 10.3 Drawing Shapes */\n\t\t\tcase 'rect': // 10.3.2\n\t\t\t\tbreak;\n\n\t\t\t/* 14.6 DDE Connections */\n\t\t\tcase 'dde-connection-decls': // 14.6.2 <text:\n\t\t\tcase 'dde-connection-decl': // 14.6.3 <text:\n\t\t\tcase 'dde-link': // 14.6.4 <table:\n\t\t\tcase 'dde-source': // 14.6.5 <office:\n\t\t\t\tbreak;\n\n\t\t\tcase 'properties': break; // 13.7 <form:properties>\n\t\t\tcase 'property': break; // 13.8 <form:property>\n\n\t\t\tcase 'a': // 6.1.8 hyperlink\n\t\t\t\tif(Rn[1]!== '/') {\n\t\t\t\t\tatag = parsexmltag(Rn[0], false);\n\t\t\t\t\tif(!atag.href) break;\n\t\t\t\t\tatag.Target = unescapexml(atag.href); delete atag.href;\n\t\t\t\t\tif(atag.Target.charAt(0) == \"#\" && atag.Target.indexOf(\".\") > -1) {\n\t\t\t\t\t\t_Ref = ods_to_csf_3D(atag.Target.slice(1));\n\t\t\t\t\t\tatag.Target = \"#\" + _Ref[0] + \"!\" + _Ref[1];\n\t\t\t\t\t} else if(atag.Target.match(/^\\.\\.[\\\\\\/]/)) atag.Target = atag.Target.slice(3);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t/* non-standard */\n\t\t\tcase 'table-protection': break;\n\t\t\tcase 'data-pilot-grand-total': break; // <table:\n\t\t\tcase 'office-document-common-attrs': break; // bare\n\t\t\tdefault: switch(Rn[2]) {\n\t\t\t\tcase 'dc:':       // TODO: properties\n\t\t\t\tcase 'calcext:':  // ignore undocumented extensions\n\t\t\t\tcase 'loext:':    // ignore undocumented extensions\n\t\t\t\tcase 'ooo:':      // ignore undocumented extensions\n\t\t\t\tcase 'chartooo:': // ignore undocumented extensions\n\t\t\t\tcase 'draw:':     // TODO: drawing\n\t\t\t\tcase 'style:':    // TODO: styles\n\t\t\t\tcase 'chart:':    // TODO: charts\n\t\t\t\tcase 'form:':     // TODO: forms\n\t\t\t\tcase 'uof:':      // TODO: uof\n\t\t\t\tcase '表:':       // TODO: uof\n\t\t\t\tcase '字:':       // TODO: uof\n\t\t\t\t\tbreak;\n\t\t\t\tdefault: if(opts.WTF) throw new Error(Rn);\n\t\t\t}\n\t\t}\n\t\tvar out = ({\n\t\t\tSheets: Sheets,\n\t\t\tSheetNames: SheetNames,\n\t\t\tWorkbook: WB\n\t\t});\n\t\tif(opts.bookSheets) delete out.Sheets;\n\t\treturn out;\n\t};\n})();\n\nfunction parse_ods(zip, opts) {\n\topts = opts || ({});\n\tif(safegetzipfile(zip, 'META-INF/manifest.xml')) parse_manifest(getzipdata(zip, 'META-INF/manifest.xml'), opts);\n\tvar content = getzipstr(zip, 'content.xml');\n\tif(!content) throw new Error(\"Missing content.xml in ODS / UOF file\");\n\tvar wb = parse_content_xml(utf8read(content), opts);\n\tif(safegetzipfile(zip, 'meta.xml')) wb.Props = parse_core_props(getzipdata(zip, 'meta.xml'));\n\treturn wb;\n}\nfunction parse_fods(data, opts) {\n\treturn parse_content_xml(data, opts);\n}\n\n/* OpenDocument */\nvar write_styles_ods = (function() {\n\tvar master_styles = '<office:master-styles>'\n\t+ '<style:master-page style:name=\"mp1\" style:page-layout-name=\"mp1\">'\n\t+ '<style:header/>'\n\t+ '<style:header-left style:display=\"false\"/>'\n\t+ '<style:footer/>'\n\t+ '<style:footer-left style:display=\"false\"/>'\n\t+ '</style:master-page>'\n\t+ '</office:master-styles>';\n\n\tvar payload = '<office:document-styles ' + wxt_helper({\n\t\t'xmlns:office':   \"urn:oasis:names:tc:opendocument:xmlns:office:1.0\",\n\t\t'xmlns:table':    \"urn:oasis:names:tc:opendocument:xmlns:table:1.0\",\n\t\t'xmlns:style':    \"urn:oasis:names:tc:opendocument:xmlns:style:1.0\",\n\t\t'xmlns:text':     \"urn:oasis:names:tc:opendocument:xmlns:text:1.0\",\n\t\t'xmlns:draw':     \"urn:oasis:names:tc:opendocument:xmlns:drawing:1.0\",\n\t\t'xmlns:fo':       \"urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0\",\n\t\t'xmlns:xlink':    \"http://www.w3.org/1999/xlink\",\n\t\t'xmlns:dc':       \"http://purl.org/dc/elements/1.1/\",\n\t\t'xmlns:number':   \"urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0\",\n\t\t'xmlns:svg':      \"urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0\",\n\t\t'xmlns:of':       \"urn:oasis:names:tc:opendocument:xmlns:of:1.2\",\n\t\t'office:version': \"1.2\"\n\t}) + '>' + master_styles + '</office:document-styles>';\n\n\treturn function wso() {\n\t\treturn XML_HEADER + payload;\n\t};\n})();\nvar write_content_ods = (function() {\n\t/* 6.1.2 White Space Characters */\n\tvar write_text_p = function(text) {\n\t\treturn escapexml(text)\n\t\t\t.replace(/  +/g, function($$){return '<text:s text:c=\"'+$$.length+'\"/>';})\n\t\t\t.replace(/\\t/g, \"<text:tab/>\")\n\t\t\t.replace(/\\n/g, \"</text:p><text:p>\")\n\t\t\t.replace(/^ /, \"<text:s/>\").replace(/ $/, \"<text:s/>\");\n\t};\n\n\tvar null_cell_xml = '          <table:table-cell />\\n';\n\tvar covered_cell_xml = '          <table:covered-table-cell/>\\n';\n\tvar write_ws = function(ws, wb, i) {\n\t\t/* Section 9 Tables */\n\t\tvar o = [];\n\t\to.push('      <table:table table:name=\"' + escapexml(wb.SheetNames[i]) + '\" table:style-name=\"ta1\">\\n');\n\t\tvar R=0,C=0, range = decode_range(ws['!ref']||\"A1\");\n\t\tvar marr = ws['!merges'] || [], mi = 0;\n\t\tvar dense = Array.isArray(ws);\n\t\tif(ws[\"!cols\"]) {\n\t\t\tfor(C = 0; C <= range.e.c; ++C) o.push('        <table:table-column' + (ws[\"!cols\"][C] ? ' table:style-name=\"co' + ws[\"!cols\"][C].ods + '\"' : '') + '></table:table-column>\\n');\n\t\t}\n\t\tvar H = \"\", ROWS = ws[\"!rows\"]||[];\n\t\tfor(R = 0; R < range.s.r; ++R) {\n\t\t\tH = ROWS[R] ? ' table:style-name=\"ro' + ROWS[R].ods + '\"' : \"\";\n\t\t\to.push('        <table:table-row' + H + '></table:table-row>\\n');\n\t\t}\n\t\tfor(; R <= range.e.r; ++R) {\n\t\t\tH = ROWS[R] ? ' table:style-name=\"ro' + ROWS[R].ods + '\"' : \"\";\n\t\t\to.push('        <table:table-row' + H + '>\\n');\n\t\t\tfor(C=0; C < range.s.c; ++C) o.push(null_cell_xml);\n\t\t\tfor(; C <= range.e.c; ++C) {\n\t\t\t\tvar skip = false, ct = {}, textp = \"\";\n\t\t\t\tfor(mi = 0; mi != marr.length; ++mi) {\n\t\t\t\t\tif(marr[mi].s.c > C) continue;\n\t\t\t\t\tif(marr[mi].s.r > R) continue;\n\t\t\t\t\tif(marr[mi].e.c < C) continue;\n\t\t\t\t\tif(marr[mi].e.r < R) continue;\n\t\t\t\t\tif(marr[mi].s.c != C || marr[mi].s.r != R) skip = true;\n\t\t\t\t\tct['table:number-columns-spanned'] = (marr[mi].e.c - marr[mi].s.c + 1);\n\t\t\t\t\tct['table:number-rows-spanned'] =    (marr[mi].e.r - marr[mi].s.r + 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(skip) { o.push(covered_cell_xml); continue; }\n\t\t\t\tvar ref = encode_cell({r:R, c:C}), cell = dense ? (ws[R]||[])[C]: ws[ref];\n\t\t\t\tif(cell && cell.f) {\n\t\t\t\t\tct['table:formula'] = escapexml(csf_to_ods_formula(cell.f));\n\t\t\t\t\tif(cell.F) {\n\t\t\t\t\t\tif(cell.F.slice(0, ref.length) == ref) {\n\t\t\t\t\t\t\tvar _Fref = decode_range(cell.F);\n\t\t\t\t\t\t\tct['table:number-matrix-columns-spanned'] = (_Fref.e.c - _Fref.s.c + 1);\n\t\t\t\t\t\t\tct['table:number-matrix-rows-spanned'] =    (_Fref.e.r - _Fref.s.r + 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!cell) { o.push(null_cell_xml); continue; }\n\t\t\t\tswitch(cell.t) {\n\t\t\t\t\tcase 'b':\n\t\t\t\t\t\ttextp = (cell.v ? 'TRUE' : 'FALSE');\n\t\t\t\t\t\tct['office:value-type'] = \"boolean\";\n\t\t\t\t\t\tct['office:boolean-value'] = (cell.v ? 'true' : 'false');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'n':\n\t\t\t\t\t\ttextp = (cell.w||String(cell.v||0));\n\t\t\t\t\t\tct['office:value-type'] = \"float\";\n\t\t\t\t\t\tct['office:value'] = (cell.v||0);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 's': case 'str':\n\t\t\t\t\t\ttextp = cell.v == null ? \"\" : cell.v;\n\t\t\t\t\t\tct['office:value-type'] = \"string\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'd':\n\t\t\t\t\t\ttextp = (cell.w||(parseDate(cell.v).toISOString()));\n\t\t\t\t\t\tct['office:value-type'] = \"date\";\n\t\t\t\t\t\tct['office:date-value'] = (parseDate(cell.v).toISOString());\n\t\t\t\t\t\tct['table:style-name'] = \"ce1\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t//case 'e':\n\t\t\t\t\tdefault: o.push(null_cell_xml); continue;\n\t\t\t\t}\n\t\t\t\tvar text_p = write_text_p(textp);\n\t\t\t\tif(cell.l && cell.l.Target) {\n\t\t\t\t\tvar _tgt = cell.l.Target;\n\t\t\t\t\t_tgt = _tgt.charAt(0) == \"#\" ? \"#\" + csf_to_ods_3D(_tgt.slice(1)) : _tgt;\n\t\t\t\t\t// TODO: choose correct parent path format based on link delimiters\n\t\t\t\t\tif(_tgt.charAt(0) != \"#\" && !_tgt.match(/^\\w+:/)) _tgt = '../' + _tgt;\n\t\t\t\t\ttext_p = writextag('text:a', text_p, {'xlink:href': _tgt.replace(/&/g, \"&amp;\")});\n\t\t\t\t}\n\t\t\t\to.push('          ' + writextag('table:table-cell', writextag('text:p', text_p, {}), ct) + '\\n');\n\t\t\t}\n\t\t\to.push('        </table:table-row>\\n');\n\t\t}\n\t\to.push('      </table:table>\\n');\n\t\treturn o.join(\"\");\n\t};\n\n\tvar write_automatic_styles_ods = function(o, wb) {\n\t\to.push(' <office:automatic-styles>\\n');\n\n\t\to.push('  <number:date-style style:name=\"N37\" number:automatic-order=\"true\">\\n');\n\t\to.push('   <number:month number:style=\"long\"/>\\n');\n\t\to.push('   <number:text>/</number:text>\\n');\n\t\to.push('   <number:day number:style=\"long\"/>\\n');\n\t\to.push('   <number:text>/</number:text>\\n');\n\t\to.push('   <number:year/>\\n');\n\t\to.push('  </number:date-style>\\n');\n\n\t\t/* column styles */\n\t\tvar cidx = 0;\n\t\twb.SheetNames.map(function(n) { return wb.Sheets[n]; }).forEach(function(ws) {\n\t\t\tif(!ws) return;\n\t\t\tif(ws[\"!cols\"]) {\n\t\t\t\tfor(var C = 0; C < ws[\"!cols\"].length; ++C) if(ws[\"!cols\"][C]) {\n\t\t\t\t\tvar colobj = ws[\"!cols\"][C];\n\t\t\t\t\tif(colobj.width == null && colobj.wpx == null && colobj.wch == null) continue;\n\t\t\t\t\tprocess_col(colobj);\n\t\t\t\t\tcolobj.ods = cidx;\n\t\t\t\t\tvar w = ws[\"!cols\"][C].wpx + \"px\";\n\t\t\t\t\to.push('  <style:style style:name=\"co' + cidx + '\" style:family=\"table-column\">\\n');\n\t\t\t\t\to.push('   <style:table-column-properties fo:break-before=\"auto\" style:column-width=\"' + w + '\"/>\\n');\n\t\t\t\t\to.push('  </style:style>\\n');\n\t\t\t\t\t++cidx;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/* row styles */\n\t\tvar ridx = 0;\n\t\twb.SheetNames.map(function(n) { return wb.Sheets[n]; }).forEach(function(ws) {\n\t\t\tif(!ws) return;\n\t\t\tif(ws[\"!rows\"]) {\n\t\t\t\tfor(var R = 0; R < ws[\"!rows\"].length; ++R) if(ws[\"!rows\"][R]) {\n\t\t\t\t\tws[\"!rows\"][R].ods = ridx;\n\t\t\t\t\tvar h = ws[\"!rows\"][R].hpx + \"px\";\n\t\t\t\t\to.push('  <style:style style:name=\"ro' + ridx + '\" style:family=\"table-row\">\\n');\n\t\t\t\t\to.push('   <style:table-row-properties fo:break-before=\"auto\" style:row-height=\"' + h + '\"/>\\n');\n\t\t\t\t\to.push('  </style:style>\\n');\n\t\t\t\t\t++ridx;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/* table */\n\t\to.push('  <style:style style:name=\"ta1\" style:family=\"table\" style:master-page-name=\"mp1\">\\n');\n\t\to.push('   <style:table-properties table:display=\"true\" style:writing-mode=\"lr-tb\"/>\\n');\n\t\to.push('  </style:style>\\n');\n\n\t\t/* table cells, text */\n\t\to.push('  <style:style style:name=\"ce1\" style:family=\"table-cell\" style:parent-style-name=\"Default\" style:data-style-name=\"N37\"/>\\n');\n\n\t\t/* page-layout */\n\n\t\to.push(' </office:automatic-styles>\\n');\n\t};\n\n\treturn function wcx(wb, opts) {\n\t\tvar o = [XML_HEADER];\n\t\t/* 3.1.3.2 */\n\t\tvar attr = wxt_helper({\n\t\t\t'xmlns:office':       \"urn:oasis:names:tc:opendocument:xmlns:office:1.0\",\n\t\t\t'xmlns:table':        \"urn:oasis:names:tc:opendocument:xmlns:table:1.0\",\n\t\t\t'xmlns:style':        \"urn:oasis:names:tc:opendocument:xmlns:style:1.0\",\n\t\t\t'xmlns:text':         \"urn:oasis:names:tc:opendocument:xmlns:text:1.0\",\n\t\t\t'xmlns:draw':         \"urn:oasis:names:tc:opendocument:xmlns:drawing:1.0\",\n\t\t\t'xmlns:fo':           \"urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0\",\n\t\t\t'xmlns:xlink':        \"http://www.w3.org/1999/xlink\",\n\t\t\t'xmlns:dc':           \"http://purl.org/dc/elements/1.1/\",\n\t\t\t'xmlns:meta':         \"urn:oasis:names:tc:opendocument:xmlns:meta:1.0\",\n\t\t\t'xmlns:number':       \"urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0\",\n\t\t\t'xmlns:presentation': \"urn:oasis:names:tc:opendocument:xmlns:presentation:1.0\",\n\t\t\t'xmlns:svg':          \"urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0\",\n\t\t\t'xmlns:chart':        \"urn:oasis:names:tc:opendocument:xmlns:chart:1.0\",\n\t\t\t'xmlns:dr3d':         \"urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0\",\n\t\t\t'xmlns:math':         \"http://www.w3.org/1998/Math/MathML\",\n\t\t\t'xmlns:form':         \"urn:oasis:names:tc:opendocument:xmlns:form:1.0\",\n\t\t\t'xmlns:script':       \"urn:oasis:names:tc:opendocument:xmlns:script:1.0\",\n\t\t\t'xmlns:ooo':          \"http://openoffice.org/2004/office\",\n\t\t\t'xmlns:ooow':         \"http://openoffice.org/2004/writer\",\n\t\t\t'xmlns:oooc':         \"http://openoffice.org/2004/calc\",\n\t\t\t'xmlns:dom':          \"http://www.w3.org/2001/xml-events\",\n\t\t\t'xmlns:xforms':       \"http://www.w3.org/2002/xforms\",\n\t\t\t'xmlns:xsd':          \"http://www.w3.org/2001/XMLSchema\",\n\t\t\t'xmlns:xsi':          \"http://www.w3.org/2001/XMLSchema-instance\",\n\t\t\t'xmlns:sheet':        \"urn:oasis:names:tc:opendocument:sh33tjs:1.0\",\n\t\t\t'xmlns:rpt':          \"http://openoffice.org/2005/report\",\n\t\t\t'xmlns:of':           \"urn:oasis:names:tc:opendocument:xmlns:of:1.2\",\n\t\t\t'xmlns:xhtml':        \"http://www.w3.org/1999/xhtml\",\n\t\t\t'xmlns:grddl':        \"http://www.w3.org/2003/g/data-view#\",\n\t\t\t'xmlns:tableooo':     \"http://openoffice.org/2009/table\",\n\t\t\t'xmlns:drawooo':      \"http://openoffice.org/2010/draw\",\n\t\t\t'xmlns:calcext':      \"urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0\",\n\t\t\t'xmlns:loext':        \"urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0\",\n\t\t\t'xmlns:field':        \"urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0\",\n\t\t\t'xmlns:formx':        \"urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0\",\n\t\t\t'xmlns:css3t':        \"http://www.w3.org/TR/css3-text/\",\n\t\t\t'office:version':     \"1.2\"\n\t\t});\n\n\t\tvar fods = wxt_helper({\n\t\t\t'xmlns:config':    \"urn:oasis:names:tc:opendocument:xmlns:config:1.0\",\n\t\t\t'office:mimetype': \"application/vnd.oasis.opendocument.spreadsheet\"\n\t\t});\n\n\t\tif(opts.bookType == \"fods\") {\n\t\t\to.push('<office:document' + attr + fods + '>\\n');\n\t\t\to.push(write_meta_ods().replace(/office:document-meta/g, \"office:meta\"));\n\t\t\t// TODO: settings (equiv of settings.xml for ODS)\n\t\t} else o.push('<office:document-content' + attr  + '>\\n');\n\t\t// o.push('  <office:scripts/>\\n');\n\t\twrite_automatic_styles_ods(o, wb);\n\t\to.push('  <office:body>\\n');\n\t\to.push('    <office:spreadsheet>\\n');\n\t\tfor(var i = 0; i != wb.SheetNames.length; ++i) o.push(write_ws(wb.Sheets[wb.SheetNames[i]], wb, i, opts));\n\t\to.push('    </office:spreadsheet>\\n');\n\t\to.push('  </office:body>\\n');\n\t\tif(opts.bookType == \"fods\") o.push('</office:document>');\n\t\telse o.push('</office:document-content>');\n\t\treturn o.join(\"\");\n\t};\n})();\n\nfunction write_ods(wb, opts) {\n\tif(opts.bookType == \"fods\") return write_content_ods(wb, opts);\n\n\tvar zip = zip_new();\n\tvar f = \"\";\n\n\tvar manifest = [];\n\tvar rdf = [];\n\n\t/* Part 3 Section 3.3 MIME Media Type */\n\tf = \"mimetype\";\n\tzip_add_file(zip, f, \"application/vnd.oasis.opendocument.spreadsheet\");\n\n\t/* Part 1 Section 2.2 Documents */\n\tf = \"content.xml\";\n\tzip_add_file(zip, f, write_content_ods(wb, opts));\n\tmanifest.push([f, \"text/xml\"]);\n\trdf.push([f, \"ContentFile\"]);\n\n\t/* TODO: these are hard-coded styles to satiate excel */\n\tf = \"styles.xml\";\n\tzip_add_file(zip, f, write_styles_ods(wb, opts));\n\tmanifest.push([f, \"text/xml\"]);\n\trdf.push([f, \"StylesFile\"]);\n\n\t/* TODO: this is hard-coded to satiate excel */\n\tf = \"meta.xml\";\n\tzip_add_file(zip, f, XML_HEADER + write_meta_ods());\n\tmanifest.push([f, \"text/xml\"]);\n\trdf.push([f, \"MetadataFile\"]);\n\n\t/* Part 3 Section 6 Metadata Manifest File */\n\tf = \"manifest.rdf\";\n\tzip_add_file(zip, f, write_rdf(rdf/*, opts*/));\n\tmanifest.push([f, \"application/rdf+xml\"]);\n\n\t/* Part 3 Section 4 Manifest File */\n\tf = \"META-INF/manifest.xml\";\n\tzip_add_file(zip, f, write_manifest(manifest/*, opts*/));\n\n\treturn zip;\n}\n\nfunction write_sheet_index(wb, sheet) {\n\tif(!sheet) return 0;\n\tvar idx = wb.SheetNames.indexOf(sheet);\n\tif(idx == -1) throw new Error(\"Sheet not found: \" + sheet);\n\treturn idx;\n}\n\nfunction write_obj_str(factory) {\n\treturn function write_str(wb, o) {\n\t\tvar idx = write_sheet_index(wb, o.sheet);\n\t\treturn factory.from_sheet(wb.Sheets[wb.SheetNames[idx]], o, wb);\n\t};\n}\n\nvar write_htm_str = write_obj_str(HTML_);\nvar write_csv_str = write_obj_str({from_sheet:sheet_to_csv});\nvar write_slk_str = write_obj_str(typeof SYLK !== \"undefined\" ? SYLK : {});\nvar write_dif_str = write_obj_str(typeof DIF !== \"undefined\" ? DIF : {});\nvar write_prn_str = write_obj_str(typeof PRN !== \"undefined\" ? PRN : {});\nvar write_rtf_str = write_obj_str(typeof RTF !== \"undefined\" ? RTF : {});\nvar write_txt_str = write_obj_str({from_sheet:sheet_to_txt});\nvar write_dbf_buf = write_obj_str(typeof DBF !== \"undefined\" ? DBF : {});\nvar write_eth_str = write_obj_str(typeof ETH !== \"undefined\" ? ETH : {});\nvar write_wk1_buf = write_obj_str(typeof WK_ !== \"undefined\" ? {from_sheet:WK_.sheet_to_wk1} : {});\n\nfunction fix_opts_func(defaults) {\n\treturn function fix_opts(opts) {\n\t\tfor(var i = 0; i != defaults.length; ++i) {\n\t\t\tvar d = defaults[i];\n\t\t\tif(opts[d[0]] === undefined) opts[d[0]] = d[1];\n\t\t\tif(d[2] === 'n') opts[d[0]] = Number(opts[d[0]]);\n\t\t}\n\t};\n}\n\nvar fix_read_opts = function(opts) {\nfix_opts_func([\n\t['cellNF', false], /* emit cell number format string as .z */\n\t['cellHTML', true], /* emit html string as .h */\n\t['cellFormula', true], /* emit formulae as .f */\n\t['cellStyles', false], /* emits style/theme as .s */\n\t['cellText', true], /* emit formatted text as .w */\n\t['cellDates', false], /* emit date cells with type `d` */\n\n\t['sheetStubs', false], /* emit empty cells */\n\t['sheetRows', 0, 'n'], /* read n rows (0 = read all rows) */\n\n\t['bookDeps', false], /* parse calculation chains */\n\t['bookSheets', false], /* only try to get sheet names (no Sheets) */\n\t['bookProps', false], /* only try to get properties (no Sheets) */\n\t['bookFiles', false], /* include raw file structure (keys, files, cfb) */\n\t['bookVBA', false], /* include vba raw data (vbaraw) */\n\n\t['password',''], /* password */\n\t['WTF', false] /* WTF mode (throws errors) */\n])(opts);\n};\n\nvar fix_write_opts = fix_opts_func([\n\t['cellDates', false], /* write date cells with type `d` */\n\n\t['bookSST', false], /* Generate Shared String Table */\n\n\t['bookType', 'xlsx'], /* Type of workbook (xlsx/m/b) */\n\n\t['compression', false], /* Use file compression */\n\n\t['WTF', false] /* WTF mode (throws errors) */\n]);\nfunction get_sheet_type(n) {\n\tif(RELS.WS.indexOf(n) > -1) return \"sheet\";\n\tif(RELS.CS && n == RELS.CS) return \"chart\";\n\tif(RELS.DS && n == RELS.DS) return \"dialog\";\n\tif(RELS.MS && n == RELS.MS) return \"macro\";\n\treturn (n && n.length) ? n : \"sheet\";\n}\nfunction safe_parse_wbrels(wbrels, sheets) {\n\tif(!wbrels) return 0;\n\ttry {\n\t\twbrels = sheets.map(function pwbr(w) { if(!w.id) w.id = w.strRelID; return [w.name, wbrels['!id'][w.id].Target, get_sheet_type(wbrels['!id'][w.id].Type)]; });\n\t} catch(e) { return null; }\n\treturn !wbrels || wbrels.length === 0 ? null : wbrels;\n}\n\nfunction safe_parse_sheet(zip, path, relsPath, sheet, idx, sheetRels, sheets, stype, opts, wb, themes, styles) {\n\ttry {\n\t\tsheetRels[sheet]=parse_rels(getzipstr(zip, relsPath, true), path);\n\t\tvar data = getzipdata(zip, path);\n\t\tvar _ws;\n\t\tswitch(stype) {\n\t\t\tcase 'sheet':  _ws = parse_ws(data, path, idx, opts, sheetRels[sheet], wb, themes, styles); break;\n\t\t\tcase 'chart':  _ws = parse_cs(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);\n\t\t\t\tif(!_ws || !_ws['!drawel']) break;\n\t\t\t\tvar dfile = resolve_path(_ws['!drawel'].Target, path);\n\t\t\t\tvar drelsp = get_rels_path(dfile);\n\t\t\t\tvar draw = parse_drawing(getzipstr(zip, dfile, true), parse_rels(getzipstr(zip, drelsp, true), dfile));\n\t\t\t\tvar chartp = resolve_path(draw, dfile);\n\t\t\t\tvar crelsp = get_rels_path(chartp);\n\t\t\t\t_ws = parse_chart(getzipstr(zip, chartp, true), chartp, opts, parse_rels(getzipstr(zip, crelsp, true), chartp), wb, _ws);\n\t\t\t\tbreak;\n\t\t\tcase 'macro':  _ws = parse_ms(data, path, idx, opts, sheetRels[sheet], wb, themes, styles); break;\n\t\t\tcase 'dialog': _ws = parse_ds(data, path, idx, opts, sheetRels[sheet], wb, themes, styles); break;\n\t\t\tdefault: throw new Error(\"Unrecognized sheet type \" + stype);\n\t\t}\n\t\tsheets[sheet] = _ws;\n\n\t\t/* scan rels for comments */\n\t\tvar comments = [];\n\t\tif(sheetRels && sheetRels[sheet]) keys(sheetRels[sheet]).forEach(function(n) {\n\t\t\tif(sheetRels[sheet][n].Type == RELS.CMNT) {\n\t\t\t\tvar dfile = resolve_path(sheetRels[sheet][n].Target, path);\n\t\t\t\tcomments = parse_cmnt(getzipdata(zip, dfile, true), dfile, opts);\n\t\t\t\tif(!comments || !comments.length) return;\n\t\t\t\tsheet_insert_comments(_ws, comments);\n\t\t\t}\n\t\t});\n\t} catch(e) { if(opts.WTF) throw e; }\n}\n\nfunction strip_front_slash(x) { return x.charAt(0) == '/' ? x.slice(1) : x; }\n\nfunction parse_zip(zip, opts) {\n\tmake_ssf(SSF);\n\topts = opts || {};\n\tfix_read_opts(opts);\n\n\t/* OpenDocument Part 3 Section 2.2.1 OpenDocument Package */\n\tif(safegetzipfile(zip, 'META-INF/manifest.xml')) return parse_ods(zip, opts);\n\t/* UOC */\n\tif(safegetzipfile(zip, 'objectdata.xml')) return parse_ods(zip, opts);\n\t/* Numbers */\n\tif(safegetzipfile(zip, 'Index/Document.iwa')) throw new Error('Unsupported NUMBERS file');\n\n\tvar entries = zipentries(zip);\n\tvar dir = parse_ct((getzipstr(zip, '[Content_Types].xml')));\n\tvar xlsb = false;\n\tvar sheets, binname;\n\tif(dir.workbooks.length === 0) {\n\t\tbinname = \"xl/workbook.xml\";\n\t\tif(getzipdata(zip,binname, true)) dir.workbooks.push(binname);\n\t}\n\tif(dir.workbooks.length === 0) {\n\t\tbinname = \"xl/workbook.bin\";\n\t\tif(!getzipdata(zip,binname,true)) throw new Error(\"Could not find workbook\");\n\t\tdir.workbooks.push(binname);\n\t\txlsb = true;\n\t}\n\tif(dir.workbooks[0].slice(-3) == \"bin\") xlsb = true;\n\n\tvar themes = ({});\n\tvar styles = ({});\n\tif(!opts.bookSheets && !opts.bookProps) {\n\t\tstrs = [];\n\t\tif(dir.sst) try { strs=parse_sst(getzipdata(zip, strip_front_slash(dir.sst)), dir.sst, opts); } catch(e) { if(opts.WTF) throw e; }\n\n\t\tif(opts.cellStyles && dir.themes.length) themes = parse_theme(getzipstr(zip, dir.themes[0].replace(/^\\//,''), true)||\"\",dir.themes[0], opts);\n\n\t\tif(dir.style) styles = parse_sty(getzipdata(zip, strip_front_slash(dir.style)), dir.style, themes, opts);\n\t}\n\n\t/*var externbooks = */dir.links.map(function(link) {\n\t\ttry {\n\t\t\tvar rels = parse_rels(getzipstr(zip, get_rels_path(strip_front_slash(link))), link);\n\t\t\treturn parse_xlink(getzipdata(zip, strip_front_slash(link)), rels, link, opts);\n\t\t} catch(e) {}\n\t});\n\n\tvar wb = parse_wb(getzipdata(zip, strip_front_slash(dir.workbooks[0])), dir.workbooks[0], opts);\n\n\tvar props = {}, propdata = \"\";\n\n\tif(dir.coreprops.length) {\n\t\tpropdata = getzipdata(zip, strip_front_slash(dir.coreprops[0]), true);\n\t\tif(propdata) props = parse_core_props(propdata);\n\t\tif(dir.extprops.length !== 0) {\n\t\t\tpropdata = getzipdata(zip, strip_front_slash(dir.extprops[0]), true);\n\t\t\tif(propdata) parse_ext_props(propdata, props, opts);\n\t\t}\n\t}\n\n\tvar custprops = {};\n\tif(!opts.bookSheets || opts.bookProps) {\n\t\tif (dir.custprops.length !== 0) {\n\t\t\tpropdata = getzipstr(zip, strip_front_slash(dir.custprops[0]), true);\n\t\t\tif(propdata) custprops = parse_cust_props(propdata, opts);\n\t\t}\n\t}\n\n\tvar out = ({});\n\tif(opts.bookSheets || opts.bookProps) {\n\t\tif(wb.Sheets) sheets = wb.Sheets.map(function pluck(x){ return x.name; });\n\t\telse if(props.Worksheets && props.SheetNames.length > 0) sheets=props.SheetNames;\n\t\tif(opts.bookProps) { out.Props = props; out.Custprops = custprops; }\n\t\tif(opts.bookSheets && typeof sheets !== 'undefined') out.SheetNames = sheets;\n\t\tif(opts.bookSheets ? out.SheetNames : opts.bookProps) return out;\n\t}\n\tsheets = {};\n\n\tvar deps = {};\n\tif(opts.bookDeps && dir.calcchain) deps=parse_cc(getzipdata(zip, strip_front_slash(dir.calcchain)),dir.calcchain,opts);\n\n\tvar i=0;\n\tvar sheetRels = ({});\n\tvar path, relsPath;\n\n\t{\n\t\tvar wbsheets = wb.Sheets;\n\t\tprops.Worksheets = wbsheets.length;\n\t\tprops.SheetNames = [];\n\t\tfor(var j = 0; j != wbsheets.length; ++j) {\n\t\t\tprops.SheetNames[j] = wbsheets[j].name;\n\t\t}\n\t}\n\n\tvar wbext = xlsb ? \"bin\" : \"xml\";\n\tvar wbrelsi = dir.workbooks[0].lastIndexOf(\"/\");\n\tvar wbrelsfile = (dir.workbooks[0].slice(0, wbrelsi+1) + \"_rels/\" + dir.workbooks[0].slice(wbrelsi+1) + \".rels\").replace(/^\\//,\"\");\n\tif(!safegetzipfile(zip, wbrelsfile)) wbrelsfile = 'xl/_rels/workbook.' + wbext + '.rels';\n\tvar wbrels = parse_rels(getzipstr(zip, wbrelsfile, true), wbrelsfile);\n\tif(wbrels) wbrels = safe_parse_wbrels(wbrels, wb.Sheets);\n\n\t/* Numbers iOS hack */\n\tvar nmode = (getzipdata(zip,\"xl/worksheets/sheet.xml\",true))?1:0;\n\twsloop: for(i = 0; i != props.Worksheets; ++i) {\n\t\tvar stype = \"sheet\";\n\t\tif(wbrels && wbrels[i]) {\n\t\t\tpath = 'xl/' + (wbrels[i][1]).replace(/[\\/]?xl\\//, \"\");\n\t\t\tif(!safegetzipfile(zip, path)) path = wbrels[i][1];\n\t\t\tif(!safegetzipfile(zip, path)) path = wbrelsfile.replace(/_rels\\/.*$/,\"\") + wbrels[i][1];\n\t\t\tstype = wbrels[i][2];\n\t\t} else {\n\t\t\tpath = 'xl/worksheets/sheet'+(i+1-nmode)+\".\" + wbext;\n\t\t\tpath = path.replace(/sheet0\\./,\"sheet.\");\n\t\t}\n\t\trelsPath = path.replace(/^(.*)(\\/)([^\\/]*)$/, \"$1/_rels/$3.rels\");\n\t\tif(opts && opts.sheets != null) switch(typeof opts.sheets) {\n\t\t\tcase \"number\": if(i != opts.sheets) continue wsloop; break;\n\t\t\tcase \"string\": if(props.SheetNames[i].toLowerCase() != opts.sheets.toLowerCase()) continue wsloop; break;\n\t\t\tdefault: if(Array.isArray && Array.isArray(opts.sheets)) {\n\t\t\t\tvar snjseen = false;\n\t\t\t\tfor(var snj = 0; snj != opts.sheets.length; ++snj) {\n\t\t\t\t\tif(typeof opts.sheets[snj] == \"number\" && opts.sheets[snj] == i) snjseen=1;\n\t\t\t\t\tif(typeof opts.sheets[snj] == \"string\" && opts.sheets[snj].toLowerCase() == props.SheetNames[i].toLowerCase()) snjseen = 1;\n\t\t\t\t}\n\t\t\t\tif(!snjseen) continue wsloop;\n\t\t\t}\n\t\t}\n\t\tsafe_parse_sheet(zip, path, relsPath, props.SheetNames[i], i, sheetRels, sheets, stype, opts, wb, themes, styles);\n\t}\n\n\tout = ({\n\t\tDirectory: dir,\n\t\tWorkbook: wb,\n\t\tProps: props,\n\t\tCustprops: custprops,\n\t\tDeps: deps,\n\t\tSheets: sheets,\n\t\tSheetNames: props.SheetNames,\n\t\tStrings: strs,\n\t\tStyles: styles,\n\t\tThemes: themes,\n\t\tSSF: SSF.get_table()\n\t});\n\tif(opts && opts.bookFiles) {\n\t\tif(zip.files) {\n\t\t\tout.keys = entries;\n\t\t\tout.files = zip.files;\n\t\t} else {\n\t\t\tout.keys = [];\n\t\t\tout.files = {};\n\t\t\tzip.FullPaths.forEach(function(p, idx) {\n\t\t\t\tp = p.replace(/^Root Entry[\\/]/, \"\");\n\t\t\t\tout.keys.push(p);\n\t\t\t\tout.files[p] = zip.FileIndex[idx];\n\t\t\t});\n\t\t}\n\t}\n\tif(opts && opts.bookVBA) {\n\t\tif(dir.vba.length > 0) out.vbaraw = getzipdata(zip,strip_front_slash(dir.vba[0]),true);\n\t\telse if(dir.defaults && dir.defaults.bin === CT_VBA) out.vbaraw = getzipdata(zip, 'xl/vbaProject.bin',true);\n\t}\n\treturn out;\n}\n\n/* [MS-OFFCRYPTO] 2.1.1 */\nfunction parse_xlsxcfb(cfb, _opts) {\n\tvar opts = _opts || {};\n\tvar f = 'Workbook', data = CFB.find(cfb, f);\n\ttry {\n\tf = '/!DataSpaces/Version';\n\tdata = CFB.find(cfb, f); if(!data || !data.content) throw new Error(\"ECMA-376 Encrypted file missing \" + f);\n\t/*var version = */parse_DataSpaceVersionInfo(data.content);\n\n\t/* 2.3.4.1 */\n\tf = '/!DataSpaces/DataSpaceMap';\n\tdata = CFB.find(cfb, f); if(!data || !data.content) throw new Error(\"ECMA-376 Encrypted file missing \" + f);\n\tvar dsm = parse_DataSpaceMap(data.content);\n\tif(dsm.length !== 1 || dsm[0].comps.length !== 1 || dsm[0].comps[0].t !== 0 || dsm[0].name !== \"StrongEncryptionDataSpace\" || dsm[0].comps[0].v !== \"EncryptedPackage\")\n\t\tthrow new Error(\"ECMA-376 Encrypted file bad \" + f);\n\n\t/* 2.3.4.2 */\n\tf = '/!DataSpaces/DataSpaceInfo/StrongEncryptionDataSpace';\n\tdata = CFB.find(cfb, f); if(!data || !data.content) throw new Error(\"ECMA-376 Encrypted file missing \" + f);\n\tvar seds = parse_DataSpaceDefinition(data.content);\n\tif(seds.length != 1 || seds[0] != \"StrongEncryptionTransform\")\n\t\tthrow new Error(\"ECMA-376 Encrypted file bad \" + f);\n\n\t/* 2.3.4.3 */\n\tf = '/!DataSpaces/TransformInfo/StrongEncryptionTransform/!Primary';\n\tdata = CFB.find(cfb, f); if(!data || !data.content) throw new Error(\"ECMA-376 Encrypted file missing \" + f);\n\t/*var hdr = */parse_Primary(data.content);\n\t} catch(e) {}\n\n\tf = '/EncryptionInfo';\n\tdata = CFB.find(cfb, f); if(!data || !data.content) throw new Error(\"ECMA-376 Encrypted file missing \" + f);\n\tvar einfo = parse_EncryptionInfo(data.content);\n\n\t/* 2.3.4.4 */\n\tf = '/EncryptedPackage';\n\tdata = CFB.find(cfb, f); if(!data || !data.content) throw new Error(\"ECMA-376 Encrypted file missing \" + f);\n\n/*global decrypt_agile */\nif(einfo[0] == 0x04 && typeof decrypt_agile !== 'undefined') return decrypt_agile(einfo[1], data.content, opts.password || \"\", opts);\n/*global decrypt_std76 */\nif(einfo[0] == 0x02 && typeof decrypt_std76 !== 'undefined') return decrypt_std76(einfo[1], data.content, opts.password || \"\", opts);\n\tthrow new Error(\"File is password-protected\");\n}\n\nfunction write_zip(wb, opts) {\n\t_shapeid = 1024;\n\tif(opts.bookType == \"ods\") return write_ods(wb, opts);\n\tif(wb && !wb.SSF) {\n\t\twb.SSF = SSF.get_table();\n\t}\n\tif(wb && wb.SSF) {\n\t\tmake_ssf(SSF); SSF.load_table(wb.SSF);\n\t\t// $FlowIgnore\n\t\topts.revssf = evert_num(wb.SSF); opts.revssf[wb.SSF[65535]] = 0;\n\t\topts.ssf = wb.SSF;\n\t}\n\topts.rels = {}; opts.wbrels = {};\n\topts.Strings = []; opts.Strings.Count = 0; opts.Strings.Unique = 0;\n\tif(browser_has_Map) opts.revStrings = new Map();\n\telse { opts.revStrings = {}; opts.revStrings.foo = []; delete opts.revStrings.foo; }\n\tvar wbext = opts.bookType == \"xlsb\" ? \"bin\" : \"xml\";\n\tvar vbafmt = VBAFMTS.indexOf(opts.bookType) > -1;\n\tvar ct = new_ct();\n\tfix_write_opts(opts = opts || {});\n\tvar zip = zip_new();\n\tvar f = \"\", rId = 0;\n\n\topts.cellXfs = [];\n\tget_cell_style(opts.cellXfs, {}, {revssf:{\"General\":0}});\n\n\tif(!wb.Props) wb.Props = {};\n\n\tf = \"docProps/core.xml\";\n\tzip_add_file(zip, f, write_core_props(wb.Props, opts));\n\tct.coreprops.push(f);\n\tadd_rels(opts.rels, 2, f, RELS.CORE_PROPS);\n\nf = \"docProps/app.xml\";\n\tif(wb.Props && wb.Props.SheetNames){/* empty */}\n\telse if(!wb.Workbook || !wb.Workbook.Sheets) wb.Props.SheetNames = wb.SheetNames;\n\telse {\n\t\tvar _sn = [];\n\t\tfor(var _i = 0; _i < wb.SheetNames.length; ++_i)\n\t\t\tif((wb.Workbook.Sheets[_i]||{}).Hidden != 2) _sn.push(wb.SheetNames[_i]);\n\t\twb.Props.SheetNames = _sn;\n\t}\n\twb.Props.Worksheets = wb.Props.SheetNames.length;\n\tzip_add_file(zip, f, write_ext_props(wb.Props, opts));\n\tct.extprops.push(f);\n\tadd_rels(opts.rels, 3, f, RELS.EXT_PROPS);\n\n\tif(wb.Custprops !== wb.Props && keys(wb.Custprops||{}).length > 0) {\n\t\tf = \"docProps/custom.xml\";\n\t\tzip_add_file(zip, f, write_cust_props(wb.Custprops, opts));\n\t\tct.custprops.push(f);\n\t\tadd_rels(opts.rels, 4, f, RELS.CUST_PROPS);\n\t}\n\n\tfor(rId=1;rId <= wb.SheetNames.length; ++rId) {\n\t\tvar wsrels = {'!id':{}};\n\t\tvar ws = wb.Sheets[wb.SheetNames[rId-1]];\n\t\tvar _type = (ws || {})[\"!type\"] || \"sheet\";\n\t\tswitch(_type) {\n\t\tcase \"chart\":\n\t\t\t/* falls through */\n\t\tdefault:\n\t\t\tf = \"xl/worksheets/sheet\" + rId + \".\" + wbext;\n\t\t\tzip_add_file(zip, f, write_ws(rId-1, f, opts, wb, wsrels));\n\t\t\tct.sheets.push(f);\n\t\t\tadd_rels(opts.wbrels, -1, \"worksheets/sheet\" + rId + \".\" + wbext, RELS.WS[0]);\n\t\t}\n\n\t\tif(ws) {\n\t\t\tvar comments = ws['!comments'];\n\t\t\tvar need_vml = false;\n\t\t\tif(comments && comments.length > 0) {\n\t\t\t\tvar cf = \"xl/comments\" + rId + \".\" + wbext;\n\t\t\t\tzip_add_file(zip, cf, write_cmnt(comments, cf, opts));\n\t\t\t\tct.comments.push(cf);\n\t\t\t\tadd_rels(wsrels, -1, \"../comments\" + rId + \".\" + wbext, RELS.CMNT);\n\t\t\t\tneed_vml = true;\n\t\t\t}\n\t\t\tif(ws['!legacy']) {\n\t\t\t\tif(need_vml) zip_add_file(zip, \"xl/drawings/vmlDrawing\" + (rId) + \".vml\", write_comments_vml(rId, ws['!comments']));\n\t\t\t}\n\t\t\tdelete ws['!comments'];\n\t\t\tdelete ws['!legacy'];\n\t\t}\n\n\t\tif(wsrels['!id'].rId1) zip_add_file(zip, get_rels_path(f), write_rels(wsrels));\n\t}\n\n\tif(opts.Strings != null && opts.Strings.length > 0) {\n\t\tf = \"xl/sharedStrings.\" + wbext;\n\t\tzip_add_file(zip, f, write_sst(opts.Strings, f, opts));\n\t\tct.strs.push(f);\n\t\tadd_rels(opts.wbrels, -1, \"sharedStrings.\" + wbext, RELS.SST);\n\t}\n\n\tf = \"xl/workbook.\" + wbext;\n\tzip_add_file(zip, f, write_wb(wb, f, opts));\n\tct.workbooks.push(f);\n\tadd_rels(opts.rels, 1, f, RELS.WB);\n\n\t/* TODO: something more intelligent with themes */\n\n\tf = \"xl/theme/theme1.xml\";\n\tzip_add_file(zip, f, write_theme(wb.Themes, opts));\n\tct.themes.push(f);\n\tadd_rels(opts.wbrels, -1, \"theme/theme1.xml\", RELS.THEME);\n\n\t/* TODO: something more intelligent with styles */\n\n\tf = \"xl/styles.\" + wbext;\n\tzip_add_file(zip, f, write_sty(wb, f, opts));\n\tct.styles.push(f);\n\tadd_rels(opts.wbrels, -1, \"styles.\" + wbext, RELS.STY);\n\n\tif(wb.vbaraw && vbafmt) {\n\t\tf = \"xl/vbaProject.bin\";\n\t\tzip_add_file(zip, f, wb.vbaraw);\n\t\tct.vba.push(f);\n\t\tadd_rels(opts.wbrels, -1, \"vbaProject.bin\", RELS.VBA);\n\t}\n\n\tzip_add_file(zip, \"[Content_Types].xml\", write_ct(ct, opts));\n\tzip_add_file(zip, '_rels/.rels', write_rels(opts.rels));\n\tzip_add_file(zip, 'xl/_rels/workbook.' + wbext + '.rels', write_rels(opts.wbrels));\n\n\tdelete opts.revssf; delete opts.ssf;\n\treturn zip;\n}\nfunction firstbyte(f,o) {\n\tvar x = \"\";\n\tswitch((o||{}).type || \"base64\") {\n\t\tcase 'buffer': return [f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7]];\n\t\tcase 'base64': x = Base64.decode(f.slice(0,12)); break;\n\t\tcase 'binary': x = f; break;\n\t\tcase 'array':  return [f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7]];\n\t\tdefault: throw new Error(\"Unrecognized type \" + (o && o.type || \"undefined\"));\n\t}\n\treturn [x.charCodeAt(0), x.charCodeAt(1), x.charCodeAt(2), x.charCodeAt(3), x.charCodeAt(4), x.charCodeAt(5), x.charCodeAt(6), x.charCodeAt(7)];\n}\n\nfunction read_cfb(cfb, opts) {\n\tif(CFB.find(cfb, \"EncryptedPackage\")) return parse_xlsxcfb(cfb, opts);\n\treturn parse_xlscfb(cfb, opts);\n}\n\nfunction read_zip(data, opts) {\n\tvar zip, d = data;\n\tvar o = opts||{};\n\tif(!o.type) o.type = (has_buf && Buffer.isBuffer(data)) ? \"buffer\" : \"base64\";\n\tzip = zip_read(d, o);\n\treturn parse_zip(zip, o);\n}\n\nfunction read_plaintext(data, o) {\n\tvar i = 0;\n\tmain: while(i < data.length) switch(data.charCodeAt(i)) {\n\t\tcase 0x0A: case 0x0D: case 0x20: ++i; break;\n\t\tcase 0x3C: return parse_xlml(data.slice(i),o);\n\t\tdefault: break main;\n\t}\n\treturn PRN.to_workbook(data, o);\n}\n\nfunction read_plaintext_raw(data, o) {\n\tvar str = \"\", bytes = firstbyte(data, o);\n\tswitch(o.type) {\n\t\tcase 'base64': str = Base64.decode(data); break;\n\t\tcase 'binary': str = data; break;\n\t\tcase 'buffer': str = data.toString('binary'); break;\n\t\tcase 'array': str = cc2str(data); break;\n\t\tdefault: throw new Error(\"Unrecognized type \" + o.type);\n\t}\n\tif(bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) str = utf8read(str);\n\treturn read_plaintext(str, o);\n}\n\nfunction read_utf16(data, o) {\n\tvar d = data;\n\tif(o.type == 'base64') d = Base64.decode(d);\n\td = cptable.utils.decode(1200, d.slice(2), 'str');\n\to.type = \"binary\";\n\treturn read_plaintext(d, o);\n}\n\nfunction bstrify(data) {\n\treturn !data.match(/[^\\x00-\\x7F]/) ? data : utf8write(data);\n}\n\nfunction read_prn(data, d, o, str) {\n\tif(str) { o.type = \"string\"; return PRN.to_workbook(data, o); }\n\treturn PRN.to_workbook(d, o);\n}\n\nfunction readSync(data, opts) {\n\treset_cp();\n\tvar o = opts||{};\n\tif(typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) return readSync(new Uint8Array(data), (o = dup(o), o.type = \"array\", o));\n\tvar d = data, n = [0,0,0,0], str = false;\n\tif(o.cellStyles) { o.cellNF = true; o.sheetStubs = true; }\n\t_ssfopts = {};\n\tif(o.dateNF) _ssfopts.dateNF = o.dateNF;\n\tif(!o.type) o.type = (has_buf && Buffer.isBuffer(data)) ? \"buffer\" : \"base64\";\n\tif(o.type == \"file\") { o.type = has_buf ? \"buffer\" : \"binary\"; d = read_binary(data); }\n\tif(o.type == \"string\") { str = true; o.type = \"binary\"; o.codepage = 65001; d = bstrify(data); }\n\tif(o.type == 'array' && typeof Uint8Array !== 'undefined' && data instanceof Uint8Array && typeof ArrayBuffer !== 'undefined') {\n\t\t// $FlowIgnore\n\t\tvar ab=new ArrayBuffer(3), vu=new Uint8Array(ab); vu.foo=\"bar\";\n\t\t// $FlowIgnore\n\t\tif(!vu.foo) {o=dup(o); o.type='array'; return readSync(ab2a(d), o);}\n\t}\n\tswitch((n = firstbyte(d, o))[0]) {\n\t\tcase 0xD0: if(n[1] === 0xCF && n[2] === 0x11 && n[3] === 0xE0 && n[4] === 0xA1 && n[5] === 0xB1 && n[6] === 0x1A && n[7] === 0xE1) return read_cfb(CFB.read(d, o), o); break;\n\t\tcase 0x09: if(n[1] <= 0x08) return parse_xlscfb(d, o); break;\n\t\tcase 0x3C: return parse_xlml(d, o);\n\t\tcase 0x49:\n\t\t\tif(n[1] === 0x49 && n[2] === 0x2a && n[3] === 0x00) throw new Error(\"TIFF Image File is not a spreadsheet\");\n\t\t\tif(n[1] === 0x44) return read_wb_ID(d, o);\n\t\t\tbreak;\n\t\tcase 0x54: if(n[1] === 0x41 && n[2] === 0x42 && n[3] === 0x4C) return DIF.to_workbook(d, o); break;\n\t\tcase 0x50: return (n[1] === 0x4B && n[2] < 0x09 && n[3] < 0x09) ? read_zip(d, o) : read_prn(data, d, o, str);\n\t\tcase 0xEF: return n[3] === 0x3C ? parse_xlml(d, o) : read_prn(data, d, o, str);\n\t\tcase 0xFF: if(n[1] === 0xFE) { return read_utf16(d, o); } break;\n\t\tcase 0x00: if(n[1] === 0x00 && n[2] >= 0x02 && n[3] === 0x00) return WK_.to_workbook(d, o); break;\n\t\tcase 0x03: case 0x83: case 0x8B: case 0x8C: return DBF.to_workbook(d, o);\n\t\tcase 0x7B: if(n[1] === 0x5C && n[2] === 0x72 && n[3] === 0x74) return RTF.to_workbook(d, o); break;\n\t\tcase 0x0A: case 0x0D: case 0x20: return read_plaintext_raw(d, o);\n\t\tcase 0x89: if(n[1] === 0x50 && n[2] === 0x4E && n[3] === 0x47) throw new Error(\"PNG Image File is not a spreadsheet\"); break; \n\t}\n\tif(DBF.versions.indexOf(n[0]) > -1 && n[2] <= 12 && n[3] <= 31) return DBF.to_workbook(d, o);\n\treturn read_prn(data, d, o, str);\n}\n\nfunction readFileSync(filename, opts) {\n\tvar o = opts||{}; o.type = 'file';\n\treturn readSync(filename, o);\n}\nfunction write_cfb_ctr(cfb, o) {\n\tswitch(o.type) {\n\t\tcase \"base64\": case \"binary\": break;\n\t\tcase \"buffer\": case \"array\": o.type = \"\"; break;\n\t\tcase \"file\": return write_dl(o.file, CFB.write(cfb, {type:has_buf ? 'buffer' : \"\"}));\n\t\tcase \"string\": throw new Error(\"'string' output type invalid for '\" + o.bookType + \"' files\");\n\t\tdefault: throw new Error(\"Unrecognized type \" + o.type);\n\t}\n\treturn CFB.write(cfb, o);\n}\n\nfunction write_zip_type(wb, opts) {\n\tvar o = dup(opts||{});\n\tvar z = write_zip(wb, o);\n\tvar oopts = {};\n\tif(o.compression) oopts.compression = 'DEFLATE';\n\tif(o.password) oopts.type = has_buf ? \"nodebuffer\" : \"string\";\n\telse switch(o.type) {\n\t\tcase \"base64\": oopts.type = \"base64\"; break;\n\t\tcase \"binary\": oopts.type = \"string\"; break;\n\t\tcase \"string\": throw new Error(\"'string' output type invalid for '\" + o.bookType + \"' files\");\n\t\tcase \"buffer\":\n\t\tcase \"file\": oopts.type = has_buf ? \"nodebuffer\" : \"string\"; break;\n\t\tdefault: throw new Error(\"Unrecognized type \" + o.type);\n\t}\n\tvar out = z.FullPaths ? CFB.write(z, {fileType:\"zip\", type: {\"nodebuffer\": \"buffer\", \"string\": \"binary\"}[oopts.type] || oopts.type}) : z.generate(oopts);\n/*jshint -W083 */\n\tif(o.password && typeof encrypt_agile !== 'undefined') return write_cfb_ctr(encrypt_agile(out, o.password), o); // eslint-disable-line no-undef\n/*jshint +W083 */\n\tif(o.type === \"file\") return write_dl(o.file, out);\n\treturn o.type == \"string\" ? utf8read(out) : out;\n}\n\nfunction write_cfb_type(wb, opts) {\n\tvar o = opts||{};\n\tvar cfb = write_xlscfb(wb, o);\n\treturn write_cfb_ctr(cfb, o);\n}\n\nfunction write_string_type(out, opts, bom) {\n\tif(!bom) bom = \"\";\n\tvar o = bom + out;\n\tswitch(opts.type) {\n\t\tcase \"base64\": return Base64.encode(utf8write(o));\n\t\tcase \"binary\": return utf8write(o);\n\t\tcase \"string\": return out;\n\t\tcase \"file\": return write_dl(opts.file, o, 'utf8');\n\t\tcase \"buffer\": {\n\t\t\tif(has_buf) return Buffer_from(o, 'utf8');\n\t\t\telse return write_string_type(o, {type:'binary'}).split(\"\").map(function(c) { return c.charCodeAt(0); });\n\t\t}\n\t}\n\tthrow new Error(\"Unrecognized type \" + opts.type);\n}\n\nfunction write_stxt_type(out, opts) {\n\tswitch(opts.type) {\n\t\tcase \"base64\": return Base64.encode(out);\n\t\tcase \"binary\": return out;\n\t\tcase \"string\": return out; /* override in sheet_to_txt */\n\t\tcase \"file\": return write_dl(opts.file, out, 'binary');\n\t\tcase \"buffer\": {\n\t\t\tif(has_buf) return Buffer_from(out, 'binary');\n\t\t\telse return out.split(\"\").map(function(c) { return c.charCodeAt(0); });\n\t\t}\n\t}\n\tthrow new Error(\"Unrecognized type \" + opts.type);\n}\n\n/* TODO: test consistency */\nfunction write_binary_type(out, opts) {\n\tswitch(opts.type) {\n\t\tcase \"string\":\n\t\tcase \"base64\":\n\t\tcase \"binary\":\n\t\t\tvar bstr = \"\";\n\t\t\t// $FlowIgnore\n\t\t\tfor(var i = 0; i < out.length; ++i) bstr += String.fromCharCode(out[i]);\n\t\t\treturn opts.type == 'base64' ? Base64.encode(bstr) : opts.type == 'string' ? utf8read(bstr) : bstr;\n\t\tcase \"file\": return write_dl(opts.file, out);\n\t\tcase \"buffer\": return out;\n\t\tdefault: throw new Error(\"Unrecognized type \" + opts.type);\n\t}\n}\n\nfunction writeSync(wb, opts) {\n\treset_cp();\n\tcheck_wb(wb);\n\tvar o = dup(opts||{});\n\tif(o.cellStyles) { o.cellNF = true; o.sheetStubs = true; }\n\tif(o.type == \"array\") { o.type = \"binary\"; var out = (writeSync(wb, o)); o.type = \"array\"; return s2ab(out); }\n\tswitch(o.bookType || 'xlsb') {\n\t\tcase 'xml':\n\t\tcase 'xlml': return write_string_type(write_xlml(wb, o), o);\n\t\tcase 'slk':\n\t\tcase 'sylk': return write_string_type(write_slk_str(wb, o), o);\n\t\tcase 'htm':\n\t\tcase 'html': return write_string_type(write_htm_str(wb, o), o);\n\t\tcase 'txt': return write_stxt_type(write_txt_str(wb, o), o);\n\t\tcase 'csv': return write_string_type(write_csv_str(wb, o), o, \"\\ufeff\");\n\t\tcase 'dif': return write_string_type(write_dif_str(wb, o), o);\n\t\tcase 'dbf': return write_binary_type(write_dbf_buf(wb, o), o);\n\t\tcase 'prn': return write_string_type(write_prn_str(wb, o), o);\n\t\tcase 'rtf': return write_string_type(write_rtf_str(wb, o), o);\n\t\tcase 'eth': return write_string_type(write_eth_str(wb, o), o);\n\t\tcase 'fods': return write_string_type(write_ods(wb, o), o);\n\t\tcase 'wk1': return write_binary_type(write_wk1_buf(wb, o), o);\n\t\tcase 'wk3': return write_binary_type(WK_.book_to_wk3(wb, o), o);\n\t\tcase 'biff2': if(!o.biff) o.biff = 2; /* falls through */\n\t\tcase 'biff3': if(!o.biff) o.biff = 3; /* falls through */\n\t\tcase 'biff4': if(!o.biff) o.biff = 4; return write_binary_type(write_biff_buf(wb, o), o);\n\t\tcase 'biff5': if(!o.biff) o.biff = 5; /* falls through */\n\t\tcase 'biff8':\n\t\tcase 'xla':\n\t\tcase 'xls': if(!o.biff) o.biff = 8; return write_cfb_type(wb, o);\n\t\tcase 'xlsx':\n\t\tcase 'xlsm':\n\t\tcase 'xlam':\n\t\tcase 'xlsb':\n\t\tcase 'ods': return write_zip_type(wb, o);\n\t\tdefault: throw new Error (\"Unrecognized bookType |\" + o.bookType + \"|\");\n\t}\n}\n\nfunction resolve_book_type(o) {\n\tif(o.bookType) return;\n\tvar _BT = {\n\t\t\"xls\": \"biff8\",\n\t\t\"htm\": \"html\",\n\t\t\"slk\": \"sylk\",\n\t\t\"socialcalc\": \"eth\",\n\t\t\"Sh33tJS\": \"WTF\"\n\t};\n\tvar ext = o.file.slice(o.file.lastIndexOf(\".\")).toLowerCase();\n\tif(ext.match(/^\\.[a-z]+$/)) o.bookType = ext.slice(1);\n\to.bookType = _BT[o.bookType] || o.bookType;\n}\n\nfunction writeFileSync(wb, filename, opts) {\n\tvar o = opts||{}; o.type = 'file';\n\to.file = filename;\n\tresolve_book_type(o);\n\treturn writeSync(wb, o);\n}\n\nfunction writeFileAsync(filename, wb, opts, cb) {\n\tvar o = opts||{}; o.type = 'file';\n\to.file = filename;\n\tresolve_book_type(o);\n\to.type = 'buffer';\n\tvar _cb = cb; if(!(_cb instanceof Function)) _cb = (opts);\n\treturn _fs.writeFile(filename, writeSync(wb, o), _cb);\n}\nfunction make_json_row(sheet, r, R, cols, header, hdr, dense, o) {\n\tvar rr = encode_row(R);\n\tvar defval = o.defval, raw = o.raw || !Object.prototype.hasOwnProperty.call(o, \"raw\");\n\tvar isempty = true;\n\tvar row = (header === 1) ? [] : {};\n\tif(header !== 1) {\n\t\tif(Object.defineProperty) try { Object.defineProperty(row, '__rowNum__', {value:R, enumerable:false}); } catch(e) { row.__rowNum__ = R; }\n\t\telse row.__rowNum__ = R;\n\t}\n\tif(!dense || sheet[R]) for (var C = r.s.c; C <= r.e.c; ++C) {\n\t\tvar val = dense ? sheet[R][C] : sheet[cols[C] + rr];\n\t\tif(val === undefined || val.t === undefined) {\n\t\t\tif(defval === undefined) continue;\n\t\t\tif(hdr[C] != null) { row[hdr[C]] = defval; }\n\t\t\tcontinue;\n\t\t}\n\t\tvar v = val.v;\n\t\tswitch(val.t){\n\t\t\tcase 'z': if(v == null) break; continue;\n\t\t\tcase 'e': v = (v == 0 ? null : void 0); break;\n\t\t\tcase 's': case 'd': case 'b': case 'n': break;\n\t\t\tdefault: throw new Error('unrecognized type ' + val.t);\n\t\t}\n\t\tif(hdr[C] != null) {\n\t\t\tif(v == null) {\n\t\t\t\tif(val.t == \"e\" && v === null) row[hdr[C]] = null;\n\t\t\t\telse if(defval !== undefined) row[hdr[C]] = defval;\n\t\t\t\telse if(raw && v === null) row[hdr[C]] = null;\n\t\t\t\telse continue;\n\t\t\t} else {\n\t\t\t\trow[hdr[C]] = raw || (o.rawNumbers && val.t == \"n\") ? v : format_cell(val,v,o);\n\t\t\t}\n\t\t\tif(v != null) isempty = false;\n\t\t}\n\t}\n\treturn { row: row, isempty: isempty };\n}\n\n\nfunction sheet_to_json(sheet, opts) {\n\tif(sheet == null || sheet[\"!ref\"] == null) return [];\n\tvar val = {t:'n',v:0}, header = 0, offset = 1, hdr = [], v=0, vv=\"\";\n\tvar r = {s:{r:0,c:0},e:{r:0,c:0}};\n\tvar o = opts || {};\n\tvar range = o.range != null ? o.range : sheet[\"!ref\"];\n\tif(o.header === 1) header = 1;\n\telse if(o.header === \"A\") header = 2;\n\telse if(Array.isArray(o.header)) header = 3;\n\telse if(o.header == null) header = 0;\n\tswitch(typeof range) {\n\t\tcase 'string': r = safe_decode_range(range); break;\n\t\tcase 'number': r = safe_decode_range(sheet[\"!ref\"]); r.s.r = range; break;\n\t\tdefault: r = range;\n\t}\n\tif(header > 0) offset = 0;\n\tvar rr = encode_row(r.s.r);\n\tvar cols = [];\n\tvar out = [];\n\tvar outi = 0, counter = 0;\n\tvar dense = Array.isArray(sheet);\n\tvar R = r.s.r, C = 0, CC = 0;\n\tif(dense && !sheet[R]) sheet[R] = [];\n\tfor(C = r.s.c; C <= r.e.c; ++C) {\n\t\tcols[C] = encode_col(C);\n\t\tval = dense ? sheet[R][C] : sheet[cols[C] + rr];\n\t\tswitch(header) {\n\t\t\tcase 1: hdr[C] = C - r.s.c; break;\n\t\t\tcase 2: hdr[C] = cols[C]; break;\n\t\t\tcase 3: hdr[C] = o.header[C - r.s.c]; break;\n\t\t\tdefault:\n\t\t\t\tif(val == null) val = {w: \"__EMPTY\", t: \"s\"};\n\t\t\t\tvv = v = format_cell(val, null, o);\n\t\t\t\tcounter = 0;\n\t\t\t\tfor(CC = 0; CC < hdr.length; ++CC) if(hdr[CC] == vv) vv = v + \"_\" + (++counter);\n\t\t\t\thdr[C] = vv;\n\t\t}\n\t}\n\tfor (R = r.s.r + offset; R <= r.e.r; ++R) {\n\t\tvar row = make_json_row(sheet, r, R, cols, header, hdr, dense, o);\n\t\tif((row.isempty === false) || (header === 1 ? o.blankrows !== false : !!o.blankrows)) out[outi++] = row.row;\n\t}\n\tout.length = outi;\n\treturn out;\n}\n\nvar qreg = /\"/g;\nfunction make_csv_row(sheet, r, R, cols, fs, rs, FS, o) {\n\tvar isempty = true;\n\tvar row = [], txt = \"\", rr = encode_row(R);\n\tfor(var C = r.s.c; C <= r.e.c; ++C) {\n\t\tif (!cols[C]) continue;\n\t\tvar val = o.dense ? (sheet[R]||[])[C]: sheet[cols[C] + rr];\n\t\tif(val == null) txt = \"\";\n\t\telse if(val.v != null) {\n\t\t\tisempty = false;\n\t\t\ttxt = ''+(o.rawNumbers && val.t == \"n\" ? val.v : format_cell(val, null, o));\n\t\t\tfor(var i = 0, cc = 0; i !== txt.length; ++i) if((cc = txt.charCodeAt(i)) === fs || cc === rs || cc === 34 || o.forceQuotes) {txt = \"\\\"\" + txt.replace(qreg, '\"\"') + \"\\\"\"; break; }\n\t\t\tif(txt == \"ID\") txt = '\"ID\"';\n\t\t} else if(val.f != null && !val.F) {\n\t\t\tisempty = false;\n\t\t\ttxt = '=' + val.f; if(txt.indexOf(\",\") >= 0) txt = '\"' + txt.replace(qreg, '\"\"') + '\"';\n\t\t} else txt = \"\";\n\t\t/* NOTE: Excel CSV does not support array formulae */\n\t\trow.push(txt);\n\t}\n\tif(o.blankrows === false && isempty) return null;\n\treturn row.join(FS);\n}\n\nfunction sheet_to_csv(sheet, opts) {\n\tvar out = [];\n\tvar o = opts == null ? {} : opts;\n\tif(sheet == null || sheet[\"!ref\"] == null) return \"\";\n\tvar r = safe_decode_range(sheet[\"!ref\"]);\n\tvar FS = o.FS !== undefined ? o.FS : \",\", fs = FS.charCodeAt(0);\n\tvar RS = o.RS !== undefined ? o.RS : \"\\n\", rs = RS.charCodeAt(0);\n\tvar endregex = new RegExp((FS==\"|\" ? \"\\\\|\" : FS)+\"+$\");\n\tvar row = \"\", cols = [];\n\to.dense = Array.isArray(sheet);\n\tvar colinfo = o.skipHidden && sheet[\"!cols\"] || [];\n\tvar rowinfo = o.skipHidden && sheet[\"!rows\"] || [];\n\tfor(var C = r.s.c; C <= r.e.c; ++C) if (!((colinfo[C]||{}).hidden)) cols[C] = encode_col(C);\n\tfor(var R = r.s.r; R <= r.e.r; ++R) {\n\t\tif ((rowinfo[R]||{}).hidden) continue;\n\t\trow = make_csv_row(sheet, r, R, cols, fs, rs, FS, o);\n\t\tif(row == null) { continue; }\n\t\tif(o.strip) row = row.replace(endregex,\"\");\n\t\tout.push(row + RS);\n\t}\n\tdelete o.dense;\n\treturn out.join(\"\");\n}\n\nfunction sheet_to_txt(sheet, opts) {\n\tif(!opts) opts = {}; opts.FS = \"\\t\"; opts.RS = \"\\n\";\n\tvar s = sheet_to_csv(sheet, opts);\n\tif(typeof cptable == 'undefined' || opts.type == 'string') return s;\n\tvar o = cptable.utils.encode(1200, s, 'str');\n\treturn String.fromCharCode(255) + String.fromCharCode(254) + o;\n}\n\nfunction sheet_to_formulae(sheet) {\n\tvar y = \"\", x, val=\"\";\n\tif(sheet == null || sheet[\"!ref\"] == null) return [];\n\tvar r = safe_decode_range(sheet['!ref']), rr = \"\", cols = [], C;\n\tvar cmds = [];\n\tvar dense = Array.isArray(sheet);\n\tfor(C = r.s.c; C <= r.e.c; ++C) cols[C] = encode_col(C);\n\tfor(var R = r.s.r; R <= r.e.r; ++R) {\n\t\trr = encode_row(R);\n\t\tfor(C = r.s.c; C <= r.e.c; ++C) {\n\t\t\ty = cols[C] + rr;\n\t\t\tx = dense ? (sheet[R]||[])[C] : sheet[y];\n\t\t\tval = \"\";\n\t\t\tif(x === undefined) continue;\n\t\t\telse if(x.F != null) {\n\t\t\t\ty = x.F;\n\t\t\t\tif(!x.f) continue;\n\t\t\t\tval = x.f;\n\t\t\t\tif(y.indexOf(\":\") == -1) y = y + \":\" + y;\n\t\t\t}\n\t\t\tif(x.f != null) val = x.f;\n\t\t\telse if(x.t == 'z') continue;\n\t\t\telse if(x.t == 'n' && x.v != null) val = \"\" + x.v;\n\t\t\telse if(x.t == 'b') val = x.v ? \"TRUE\" : \"FALSE\";\n\t\t\telse if(x.w !== undefined) val = \"'\" + x.w;\n\t\t\telse if(x.v === undefined) continue;\n\t\t\telse if(x.t == 's') val = \"'\" + x.v;\n\t\t\telse val = \"\"+x.v;\n\t\t\tcmds[cmds.length] = y + \"=\" + val;\n\t\t}\n\t}\n\treturn cmds;\n}\n\nfunction sheet_add_json(_ws, js, opts) {\n\tvar o = opts || {};\n\tvar offset = +!o.skipHeader;\n\tvar ws = _ws || ({});\n\tvar _R = 0, _C = 0;\n\tif(ws && o.origin != null) {\n\t\tif(typeof o.origin == 'number') _R = o.origin;\n\t\telse {\n\t\t\tvar _origin = typeof o.origin == \"string\" ? decode_cell(o.origin) : o.origin;\n\t\t\t_R = _origin.r; _C = _origin.c;\n\t\t}\n\t}\n\tvar cell;\n\tvar range = ({s: {c:0, r:0}, e: {c:_C, r:_R + js.length - 1 + offset}});\n\tif(ws['!ref']) {\n\t\tvar _range = safe_decode_range(ws['!ref']);\n\t\trange.e.c = Math.max(range.e.c, _range.e.c);\n\t\trange.e.r = Math.max(range.e.r, _range.e.r);\n\t\tif(_R == -1) { _R = _range.e.r + 1; range.e.r = _R + js.length - 1 + offset; }\n\t} else {\n\t\tif(_R == -1) { _R = 0; range.e.r = js.length - 1 + offset; }\n\t}\n\tvar hdr = o.header || [], C = 0;\n\n\tjs.forEach(function (JS, R) {\n\t\tkeys(JS).forEach(function(k) {\n\t\t\tif((C=hdr.indexOf(k)) == -1) hdr[C=hdr.length] = k;\n\t\t\tvar v = JS[k];\n\t\t\tvar t = 'z';\n\t\t\tvar z = \"\";\n\t\t\tvar ref = encode_cell({c:_C + C,r:_R + R + offset});\n\t\t\tcell = utils.sheet_get_cell(ws, ref);\n\t\t\tif(v && typeof v === 'object' && !(v instanceof Date)){\n\t\t\t\tws[ref] = v;\n\t\t\t} else {\n\t\t\t\tif(typeof v == 'number') t = 'n';\n\t\t\t\telse if(typeof v == 'boolean') t = 'b';\n\t\t\t\telse if(typeof v == 'string') t = 's';\n\t\t\t\telse if(v instanceof Date) {\n\t\t\t\t\tt = 'd';\n\t\t\t\t\tif(!o.cellDates) { t = 'n'; v = datenum(v); }\n\t\t\t\t\tz = (o.dateNF || SSF._table[14]);\n\t\t\t\t}\n\t\t\t\telse if(v === null && o.nullError) { t = 'e'; v = 0; }\n\t\t\t\tif(!cell) ws[ref] = cell = ({t:t, v:v});\n\t\t\t\telse {\n\t\t\t\t\tcell.t = t; cell.v = v;\n\t\t\t\t\tdelete cell.w; delete cell.R;\n\t\t\t\t\tif(z) cell.z = z;\n\t\t\t\t}\n\t\t\t\tif(z) cell.z = z;\n\t\t\t}\n\t\t});\n\t});\n\trange.e.c = Math.max(range.e.c, _C + hdr.length - 1);\n\tvar __R = encode_row(_R);\n\tif(offset) for(C = 0; C < hdr.length; ++C) ws[encode_col(C + _C) + __R] = {t:'s', v:hdr[C]};\n\tws['!ref'] = encode_range(range);\n\treturn ws;\n}\nfunction json_to_sheet(js, opts) { return sheet_add_json(null, js, opts); }\n\nvar utils = {\n\tencode_col: encode_col,\n\tencode_row: encode_row,\n\tencode_cell: encode_cell,\n\tencode_range: encode_range,\n\tdecode_col: decode_col,\n\tdecode_row: decode_row,\n\tsplit_cell: split_cell,\n\tdecode_cell: decode_cell,\n\tdecode_range: decode_range,\n\tformat_cell: format_cell,\n\tget_formulae: sheet_to_formulae,\n\tmake_csv: sheet_to_csv,\n\tmake_json: sheet_to_json,\n\tmake_formulae: sheet_to_formulae,\n\tsheet_add_aoa: sheet_add_aoa,\n\tsheet_add_json: sheet_add_json,\n\tsheet_add_dom: sheet_add_dom,\n\taoa_to_sheet: aoa_to_sheet,\n\tjson_to_sheet: json_to_sheet,\n\ttable_to_sheet: parse_dom_table,\n\ttable_to_book: table_to_book,\n\tsheet_to_csv: sheet_to_csv,\n\tsheet_to_txt: sheet_to_txt,\n\tsheet_to_json: sheet_to_json,\n\tsheet_to_html: HTML_.from_sheet,\n\tsheet_to_formulae: sheet_to_formulae,\n\tsheet_to_row_object_array: sheet_to_json\n};\n\n(function(utils) {\nutils.consts = utils.consts || {};\nfunction add_consts(R/*Array<any>*/) { R.forEach(function(a){ utils.consts[a[0]] = a[1]; }); }\n\nfunction get_default(x, y, z) { return x[y] != null ? x[y] : (x[y] = z); }\n\n/* get cell, creating a stub if necessary */\nfunction ws_get_cell_stub(ws, R, C) {\n\t/* A1 cell address */\n\tif(typeof R == \"string\") {\n\t\t/* dense */\n\t\tif(Array.isArray(ws)) {\n\t\t\tvar RC = decode_cell(R);\n\t\t\tif(!ws[RC.r]) ws[RC.r] = [];\n\t\t\treturn ws[RC.r][RC.c] || (ws[RC.r][RC.c] = {t:'z'});\n\t\t}\n\t\treturn ws[R] || (ws[R] = {t:'z'});\n\t}\n\t/* cell address object */\n\tif(typeof R != \"number\") return ws_get_cell_stub(ws, encode_cell(R));\n\t/* R and C are 0-based indices */\n\treturn ws_get_cell_stub(ws, encode_cell({r:R,c:C||0}));\n}\nutils.sheet_get_cell = ws_get_cell_stub;\n\n/* find sheet index for given name / validate index */\nfunction wb_sheet_idx(wb, sh) {\n\tif(typeof sh == \"number\") {\n\t\tif(sh >= 0 && wb.SheetNames.length > sh) return sh;\n\t\tthrow new Error(\"Cannot find sheet # \" + sh);\n\t} else if(typeof sh == \"string\") {\n\t\tvar idx = wb.SheetNames.indexOf(sh);\n\t\tif(idx > -1) return idx;\n\t\tthrow new Error(\"Cannot find sheet name |\" + sh + \"|\");\n\t} else throw new Error(\"Cannot find sheet |\" + sh + \"|\");\n}\n\n/* simple blank workbook object */\nutils.book_new = function() {\n\treturn { SheetNames: [], Sheets: {} };\n};\n\n/* add a worksheet to the end of a given workbook */\nutils.book_append_sheet = function(wb, ws, name) {\n\tif(!name) for(var i = 1; i <= 0xFFFF; ++i, name = undefined) if(wb.SheetNames.indexOf(name = \"Sheet\" + i) == -1) break;\n\tif(!name || wb.SheetNames.length >= 0xFFFF) throw new Error(\"Too many worksheets\");\n\tcheck_ws_name(name);\n\tif(wb.SheetNames.indexOf(name) >= 0) throw new Error(\"Worksheet with name |\" + name + \"| already exists!\");\n\n\twb.SheetNames.push(name);\n\twb.Sheets[name] = ws;\n};\n\n/* set sheet visibility (visible/hidden/very hidden) */\nutils.book_set_sheet_visibility = function(wb, sh, vis) {\n\tget_default(wb,\"Workbook\",{});\n\tget_default(wb.Workbook,\"Sheets\",[]);\n\n\tvar idx = wb_sheet_idx(wb, sh);\n\t// $FlowIgnore\n\tget_default(wb.Workbook.Sheets,idx, {});\n\n\tswitch(vis) {\n\t\tcase 0: case 1: case 2: break;\n\t\tdefault: throw new Error(\"Bad sheet visibility setting \" + vis);\n\t}\n\t// $FlowIgnore\n\twb.Workbook.Sheets[idx].Hidden = vis;\n};\nadd_consts([\n\t[\"SHEET_VISIBLE\", 0],\n\t[\"SHEET_HIDDEN\", 1],\n\t[\"SHEET_VERY_HIDDEN\", 2]\n]);\n\n/* set number format */\nutils.cell_set_number_format = function(cell, fmt) {\n\tcell.z = fmt;\n\treturn cell;\n};\n\n/* set cell hyperlink */\nutils.cell_set_hyperlink = function(cell, target, tooltip) {\n\tif(!target) {\n\t\tdelete cell.l;\n\t} else {\n\t\tcell.l = ({ Target: target });\n\t\tif(tooltip) cell.l.Tooltip = tooltip;\n\t}\n\treturn cell;\n};\nutils.cell_set_internal_link = function(cell, range, tooltip) { return utils.cell_set_hyperlink(cell, \"#\" + range, tooltip); };\n\n/* add to cell comments */\nutils.cell_add_comment = function(cell, text, author) {\n\tif(!cell.c) cell.c = [];\n\tcell.c.push({t:text, a:author||\"SheetJS\"});\n};\n\n/* set array formula and flush related cells */\nutils.sheet_set_array_formula = function(ws, range, formula) {\n\tvar rng = typeof range != \"string\" ? range : safe_decode_range(range);\n\tvar rngstr = typeof range == \"string\" ? range : encode_range(range);\n\tfor(var R = rng.s.r; R <= rng.e.r; ++R) for(var C = rng.s.c; C <= rng.e.c; ++C) {\n\t\tvar cell = ws_get_cell_stub(ws, R, C);\n\t\tcell.t = 'n';\n\t\tcell.F = rngstr;\n\t\tdelete cell.v;\n\t\tif(R == rng.s.r && C == rng.s.c) cell.f = formula;\n\t}\n\treturn ws;\n};\n\nreturn utils;\n})(utils);\n\nif(has_buf && \"function\" != 'undefined') (function() {\n\tvar Readable = __webpack_require__(/*! stream */ 4).Readable;\n\n\tvar write_csv_stream = function(sheet, opts) {\n\t\tvar stream = Readable();\n\t\tvar o = opts == null ? {} : opts;\n\t\tif(sheet == null || sheet[\"!ref\"] == null) { stream.push(null); return stream; }\n\t\tvar r = safe_decode_range(sheet[\"!ref\"]);\n\t\tvar FS = o.FS !== undefined ? o.FS : \",\", fs = FS.charCodeAt(0);\n\t\tvar RS = o.RS !== undefined ? o.RS : \"\\n\", rs = RS.charCodeAt(0);\n\t\tvar endregex = new RegExp((FS==\"|\" ? \"\\\\|\" : FS)+\"+$\");\n\t\tvar row = \"\", cols = [];\n\t\to.dense = Array.isArray(sheet);\n\t\tvar colinfo = o.skipHidden && sheet[\"!cols\"] || [];\n\t\tvar rowinfo = o.skipHidden && sheet[\"!rows\"] || [];\n\t\tfor(var C = r.s.c; C <= r.e.c; ++C) if (!((colinfo[C]||{}).hidden)) cols[C] = encode_col(C);\n\t\tvar R = r.s.r;\n\t\tvar BOM = false;\n\t\tstream._read = function() {\n\t\t\tif(!BOM) { BOM = true; return stream.push(\"\\uFEFF\"); }\n\t\t\twhile(R <= r.e.r) {\n\t\t\t\t++R;\n\t\t\t\tif ((rowinfo[R-1]||{}).hidden) continue;\n\t\t\t\trow = make_csv_row(sheet, r, R-1, cols, fs, rs, FS, o);\n\t\t\t\tif(row != null) {\n\t\t\t\t\tif(o.strip) row = row.replace(endregex,\"\");\n\t\t\t\t\tstream.push(row + RS);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(R > r.e.r) return stream.push(null);\n\t\t};\n\t\treturn stream;\n\t};\n\n\tvar write_html_stream = function(ws, opts) {\n\t\tvar stream = Readable();\n\n\t\tvar o = opts || {};\n\t\tvar header = o.header != null ? o.header : HTML_.BEGIN;\n\t\tvar footer = o.footer != null ? o.footer : HTML_.END;\n\t\tstream.push(header);\n\t\tvar r = decode_range(ws['!ref']);\n\t\to.dense = Array.isArray(ws);\n\t\tstream.push(HTML_._preamble(ws, r, o));\n\t\tvar R = r.s.r;\n\t\tvar end = false;\n\t\tstream._read = function() {\n\t\t\tif(R > r.e.r) {\n\t\t\t\tif(!end) { end = true; stream.push(\"</table>\" + footer); }\n\t\t\t\treturn stream.push(null);\n\t\t\t}\n\t\t\twhile(R <= r.e.r) {\n\t\t\t\tstream.push(HTML_._row(ws, r, R, o));\n\t\t\t\t++R;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\t\treturn stream;\n\t};\n\n\tvar write_json_stream = function(sheet, opts) {\n\t\tvar stream = Readable({objectMode:true});\n\n\t\tif(sheet == null || sheet[\"!ref\"] == null) { stream.push(null); return stream; }\n\t\tvar val = {t:'n',v:0}, header = 0, offset = 1, hdr = [], v=0, vv=\"\";\n\t\tvar r = {s:{r:0,c:0},e:{r:0,c:0}};\n\t\tvar o = opts || {};\n\t\tvar range = o.range != null ? o.range : sheet[\"!ref\"];\n\t\tif(o.header === 1) header = 1;\n\t\telse if(o.header === \"A\") header = 2;\n\t\telse if(Array.isArray(o.header)) header = 3;\n\t\tswitch(typeof range) {\n\t\t\tcase 'string': r = safe_decode_range(range); break;\n\t\t\tcase 'number': r = safe_decode_range(sheet[\"!ref\"]); r.s.r = range; break;\n\t\t\tdefault: r = range;\n\t\t}\n\t\tif(header > 0) offset = 0;\n\t\tvar rr = encode_row(r.s.r);\n\t\tvar cols = [];\n\t\tvar counter = 0;\n\t\tvar dense = Array.isArray(sheet);\n\t\tvar R = r.s.r, C = 0, CC = 0;\n\t\tif(dense && !sheet[R]) sheet[R] = [];\n\t\tfor(C = r.s.c; C <= r.e.c; ++C) {\n\t\t\tcols[C] = encode_col(C);\n\t\t\tval = dense ? sheet[R][C] : sheet[cols[C] + rr];\n\t\t\tswitch(header) {\n\t\t\t\tcase 1: hdr[C] = C - r.s.c; break;\n\t\t\t\tcase 2: hdr[C] = cols[C]; break;\n\t\t\t\tcase 3: hdr[C] = o.header[C - r.s.c]; break;\n\t\t\t\tdefault:\n\t\t\t\t\tif(val == null) val = {w: \"__EMPTY\", t: \"s\"};\n\t\t\t\t\tvv = v = format_cell(val, null, o);\n\t\t\t\t\tcounter = 0;\n\t\t\t\t\tfor(CC = 0; CC < hdr.length; ++CC) if(hdr[CC] == vv) vv = v + \"_\" + (++counter);\n\t\t\t\t\thdr[C] = vv;\n\t\t\t}\n\t\t}\n\t\tR = r.s.r + offset;\n\t\tstream._read = function() {\n\t\t\tif(R > r.e.r) return stream.push(null);\n\t\t\twhile(R <= r.e.r) {\n\t\t\t\t//if ((rowinfo[R-1]||{}).hidden) continue;\n\t\t\t\tvar row = make_json_row(sheet, r, R, cols, header, hdr, dense, o);\n\t\t\t\t++R;\n\t\t\t\tif((row.isempty === false) || (header === 1 ? o.blankrows !== false : !!o.blankrows)) {\n\t\t\t\t\tstream.push(row.row);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\treturn stream;\n\t};\n\n\tXLSX.stream = {\n\t\tto_json: write_json_stream,\n\t\tto_html: write_html_stream,\n\t\tto_csv: write_csv_stream\n\t};\n})();\n\nif(typeof parse_xlscfb !== \"undefined\") XLSX.parse_xlscfb = parse_xlscfb;\nXLSX.parse_zip = parse_zip;\nXLSX.read = readSync; //xlsread\nXLSX.readFile = readFileSync; //readFile\nXLSX.readFileSync = readFileSync;\nXLSX.write = writeSync;\nXLSX.writeFile = writeFileSync;\nXLSX.writeFileSync = writeFileSync;\nXLSX.writeFileAsync = writeFileAsync;\nXLSX.utils = utils;\nXLSX.SSF = SSF;\nif(typeof CFB !== \"undefined\") XLSX.CFB = CFB;\n}\n/*global define */\nif(true) make_xlsx_lib(exports);\nelse {}\n/* NOTE: the following extra line is needed for \"Lightning Locker Service\" */\nif(typeof window !== 'undefined' && !window.XLSX) window.XLSX = XLSX;\n/*exported XLS, ODS */\nvar XLS = XLSX, ODS = XLSX;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveGxzeC94bHN4LmpzPzExNDYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxJQUErRDtBQUNsRTtBQUNBLHFEQUFxRCxtQkFBTyxDQUFDLDhEQUFtQjtBQUNoRiwwREFBMEQsbUJBQU8sQ0FBQyw4REFBbUI7QUFDckY7QUFDQTs7QUFFQTtBQUNBLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQsNkJBQTZCLHlDQUF5Qyw4QkFBOEI7QUFDcEcsdUJBQXVCLGdCQUFnQjs7QUFFdkMsMkJBQTJCLHVCQUF1QixjQUFjO0FBQ2hFLHFCQUFxQixjQUFjLGNBQWM7O0FBRWpELDJCQUEyQixZQUFZLGtDQUFrQyxTQUFTLGdDQUFnQyxVQUFVOztBQUU1SDtBQUNBO0FBQ0EsZUFBZSxzQkFBc0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHNCQUFzQjtBQUNyQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlDQUFpQywrQkFBK0I7QUFDaEUsaUNBQWlDLCtCQUErQjtBQUNoRTtBQUNBLHdCQUF3Qix1QkFBdUIsY0FBYztBQUM3RDtBQUNBLGtFQUFrRSw4REFBOEQ7QUFDaEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGtCQUFrQjtBQUNuQztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGNBQWM7QUFDbEMseUJBQXlC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QUFDckMsT0FBTyx3Q0FBd0M7QUFDL0MsT0FBTywyQkFBMkI7QUFDbEMsT0FBTywyQkFBMkI7QUFDbEMsT0FBTyxnQ0FBZ0M7QUFDdkMsT0FBTyw0QkFBNEI7QUFDbkMsT0FBTywyQkFBMkI7QUFDbEMsT0FBTyw2QkFBNkI7QUFDcEMsT0FBTyxxQ0FBcUM7QUFDNUMsT0FBTyw2QkFBNkI7QUFDcEMsT0FBTywrQ0FBK0M7QUFDdEQsT0FBTyw4Q0FBOEM7QUFDckQsT0FBTyw2QkFBNkI7QUFDcEMsT0FBTyw2QkFBNkI7QUFDcEMsT0FBTyxpQ0FBaUM7QUFDeEMsT0FBTyxnQ0FBZ0M7QUFDdkMsT0FBTyw2QkFBNkI7QUFDcEMsT0FBTyxxQ0FBcUM7QUFDNUMsT0FBTywwQ0FBMEM7QUFDakQsT0FBTywwQkFBMEI7QUFDakMsT0FBTyxpQ0FBaUM7QUFDeEMsT0FBTyxtQ0FBbUM7QUFDMUMsT0FBTyw4QkFBOEI7QUFDckMsT0FBTyw2QkFBNkI7QUFDcEMsUUFBUTtBQUNSO0FBQ0EsYUFBYSx5QkFBeUI7QUFDdEMsYUFBYSwyQkFBMkI7QUFDeEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTywwQkFBMEI7QUFDakMsT0FBTywyQkFBMkI7QUFDbEMsT0FBTyw2QkFBNkI7QUFDcEMsT0FBTyw0QkFBNEI7QUFDbkMsT0FBTyw4QkFBOEI7QUFDckMsT0FBTyw4QkFBOEI7QUFDckMsT0FBTyw4QkFBOEI7QUFDckMsT0FBTyxnQ0FBZ0M7QUFDdkMsT0FBTywrQkFBK0I7QUFDdEMsT0FBTyxnQ0FBZ0M7QUFDdkMsT0FBTyxtQ0FBbUM7QUFDMUMsT0FBTyxtQ0FBbUM7QUFDMUMsT0FBTyxvQ0FBb0M7QUFDM0MsT0FBTywyQkFBMkI7QUFDbEMsT0FBTywyQkFBMkI7QUFDbEMsT0FBTywyQkFBMkI7QUFDbEMsT0FBTywyQkFBMkI7QUFDbEMsT0FBTyxpQ0FBaUM7QUFDeEMsT0FBTyw2QkFBNkI7QUFDcEMsUUFBUTtBQUNSO0FBQ0EsYUFBYSx5QkFBeUI7QUFDdEMsYUFBYSwyQkFBMkI7QUFDeEM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCLDZCQUE2Qix1Q0FBdUMsRUFBRSxFQUFFOztBQUU5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQyxjQUFjLGdCQUFnQjtBQUM5QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsU0FBUztBQUNUO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsYUFBYTtBQUNiO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsV0FBVztBQUNYO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsV0FBVztBQUNYO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsWUFBWTtBQUNaO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsV0FBVztBQUNYO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsV0FBVztBQUNY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Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBLFdBQVc7QUFDWDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5Qix3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxJQUFJLFNBQVMsTUFBTTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0MsOENBQThDOztBQUU5QztBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsaUNBQWlDO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9EQUFvRDs7QUFFcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FB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QUFTLFNBQVM7QUFDbEIsU0FBUyxTQUFTO0FBQ2xCLFNBQVMsU0FBUztBQUNsQixTQUFTLFNBQVM7QUFDbEIsU0FBUyxTQUFTO0FBQ2xCLFNBQVMsU0FBUztBQUNsQixTQUFTLFNBQVM7QUFDbEIsU0FBUyxTQUFTO0FBQ2xCLFNBQVMsU0FBUztBQUNsQixTQUFTLFNBQVM7QUFDbEIsU0FBUyxTQUFTO0FBQ2xCLFNBQVMsU0FBUztBQUNsQixTQUFTLFNBQVM7QUFDbEIsU0FBUyxTQUFTO0FBQ2xCLFNBQVMsU0FBUztBQUNsQixTQUFTLFNBQVM7QUFDbEIsU0FBUyxTQUFTO0FBQ2xCLFNBQVMsU0FBUztBQUNsQixTQUFTLFNBQVM7QUFDbEIsU0FBUyxTQUFTO0FBQ2xCLFNBQVMsU0FBUztBQUNsQixTQUFTLFNBQVM7QUFDbEIsU0FBUyxTQUFTO0FBQ2xCLFNBQVMsU0FBUztBQUNsQixTQUFTLFNBQVM7QUFDbEIsU0FBUyxTQUFTO0FBQ2xCLFNBQVMsU0FBUztBQUNsQixTQUFTLFNBQVM7QUFDbEIsU0FBUyxTQUFTO0FBQ2xCLFNBQVMsU0FBUztBQUNsQixTQUFTLFNBQVM7QUFDbEIsU0FBUyxTQUFTO0FBQ2xCLFNBQVMsU0FBUztBQUNsQixTQUFTLFNBQVM7QUFDbEIsU0FBUyxTQUFTO0FBQ2xCLFNBQVMsU0FBUztBQUNsQixTQUFTLFNBQVM7QUFDbEIsU0FBUyxTQUFTO0FBQ2xCLFNBQVMsU0FBUztBQUNsQixTQUFTLFNBQVM7QUFDbEIsU0FBUyxTQUFTO0FBQ2xCLFNBQVMsU0FBUztBQUNsQixTQUFTLFNBQVM7QUFDbEIsU0FBUyxTQUFTO0FBQ2xCLFNBQVMsU0FBUztBQUNsQixTQUFTLFNBQVM7QUFDbEIsU0FBUyxTQUFTO0FBQ2xCLFNBQVMsU0FBUztBQUNsQixTQUFTLFNBQVM7QUFDbEIsU0FBUyxTQUFTO0FBQ2xCLFNBQVMsU0FBUztBQUNsQixTQUFTLFNBQVM7QUFDbEIsU0FBUyxTQUFTO0FBQ2xCLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFD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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBLDZCQUE2Qjs7QUFFN0I7QUFDQSw0QkFBNEI7O0FBRTVCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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cEMsT0FBTywyQkFBMkI7QUFDbEMsT0FBTywyQkFBMkI7QUFDbEMsT0FBTywyQkFBMkI7QUFDbEMsT0FBTywyQkFBMkI7QUFDbEMsT0FBTyw2QkFBNkI7QUFDcEMsT0FBTyw4QkFBOEI7QUFDckMsT0FBTywwQkFBMEI7QUFDakMsT0FBTywwQkFBMEI7QUFDakMsT0FBTywwQkFBMEI7QUFDakMsT0FBTywwQkFBMEI7QUFDakMsT0FBTywwQkFBMEI7QUFDakMsT0FBTywwQkFBMEI7QUFDakMsT0FBTyw2QkFBNkI7QUFDcEMsT0FBTyw2QkFBNkI7QUFDcEMsT0FBTyw2QkFBNkI7QUFDcEMsT0FBTyw2QkFBNkI7QUFDcEMsT0FBTyw4QkFBOEI7QUFDckMsT0FBTywrQkFBK0I7QUFDdEMsT0FBTyw2QkFBNkI7QUFDcEMsT0FBTywrQkFBK0I7QUFDdEMsT0FBTyw2QkFBNkI7QUFDcEMsT0FBTyxpQ0FBaUM7QUFDeEMsT0FBTyx1Q0FBdUM7QUFDOUMsT0FBTyw2QkFBNkI7QUFDcEMsT0FBTywrQkFBK0I7QUFDdEMsT0FBTyw2QkFBNkI7QUFDcEMsT0FBTyw2QkFBNkI7QUFDcEMsT0FBTyxpQ0FBaUM7QUFDeEMsT0FBTywrQkFBK0I7QUFDdEMsT0FBTyxxQ0FBcUM7QUFDNUMsT0FBTywrQkFBK0I7QUFDdEMsT0FBTyw2QkFBNkI7QUFDcEMsT0FBTywrQkFBK0I7QUFDdEMsT0FBTyxxQ0FBcUM7QUFDNUMsT0FBTyxtQ0FBbUM7QUFDMUMsT0FBTyx1Q0FBdUM7QUFDOUMsT0FBTyxxQ0FBcUM7QUFDNUMsT0FBTyxtQ0FBbUM7QUFDMUMsT0FBTyxxQ0FBcUM7QUFDNUMsT0FBTywrQkFBK0I7QUFDdEMsT0FBTyxpQ0FBaUM7QUFDeEMsT0FBTyx1Q0FBdUM7QUFDOUMsT0FBTyx5Q0FBeUM7QUFDaEQsT0FBTyxpQ0FBaUM7QUFDeEMsT0FBTyxpQ0FBaUM7QUFDeEMsT0FBTyxtQ0FBbUM7QUFDMUMsT0FBTyx1Q0FBdUM7QUFDOUMsT0FBTyx5Q0FBeUM7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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UztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxvQkFBb0I7O0FBRW5DO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhFQUE4RTtBQUM5RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhFQUE4RTtBQUM5RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhFQUE4RTtBQUM5RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhFQUE4RTtBQUM5RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVywrQ0FBK0M7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix5Q0FBeUM7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCLG9DQUFvQyxrQ0FBa0MsRUFBRTtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDZCQUE2QixFQUFFO0FBQ25FO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsbUJBQW1CO0FBQ3RDLHFCQUFxQjtBQUNyQjtBQUNBLHFCQUFxQjtBQUNyQixxQkFBcUI7QUFDckIscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSw4QkFBOEI7O0FBRTlCO0FBQ0EsaUJBQWlCLElBQUkscUJBQXFCLE1BQU0sU0FBUzs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUUsZUFBZSxFQUFFO0FBQ3BGO0FBQ0E7QUFDQSw2QkFBNkIscUJBQXFCO0FBQ2xEOztBQUVBO0FBQ0E7O0FBRUEsMkJBQTJCOztBQUUzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsU0FBUztBQUNuQjtBQUNBLDRCQUE0QjtBQUM1QixtQ0FBbUMsY0FBYyxjQUFjO0FBQy9ELDJDQUEyQztBQUMzQyw0QkFBNEIsNkNBQTZDO0FBQ3pFLDJCQUEyQixjQUFjO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxQkFBcUIsYUFBYTtBQUN0RDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isb0JBQW9CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsU0FBUyxXQUFXLHVEQUF1RDtBQUNsSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsa0JBQWtCO0FBQzVCO0FBQ0Esb0JBQW9CLHFCQUFxQixhQUFhO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQjs7QUFFckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxzQkFBc0IsZUFBZSx1QkFBdUIsZUFBZTtBQUMzRTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0EsTUFBTTtBQUNOLDBCQUEwQixRQUFRO0FBQ2xDLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxhQUFhO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxhQUFhO0FBQy9EOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLG1CQUFtQixnQkFBZ0IsMEJBQTBCO0FBQzdEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdCQUF3QjtBQUN4Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsK0NBQStDO0FBQy9DOztBQUVBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxvQkFBb0IsYUFBYTtBQUNqQztBQUNBLGdCQUFnQixjQUFjOztBQUU5QjtBQUNBLHVDQUF1QztBQUN2QywwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBLHFDQUFxQztBQUNyQyx1QkFBdUI7QUFDdkI7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixVQUFVO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsZ0JBQWdCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxtQkFBbUIsVUFBVTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLHlEQUF5RCxFQUFFO0FBQy9GO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLDhEQUE4RCxFQUFFO0FBQ3JHO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtDQUFrQyxVQUFVO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QiwwQ0FBMEMsMkJBQTJCO0FBQ2xHLGVBQWUsa0JBQWtCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBLG1DQUFtQyx5RkFBeUY7O0FBRTVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU0saUVBQWlFLEVBQUU7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBLDhEQUE4RCw0QkFBNEIsRUFBRTs7QUFFNUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQXVCLGdCQUFnQjtBQUN2QztBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLElBQUkscUJBQXFCLE1BQU0sU0FBUzs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CLFdBQVcsMkNBQTJDO0FBQ3REOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsZUFBZTtBQUMxRDtBQUNBLGlCQUFpQixpQ0FBaUMsNkJBQTZCO0FBQy9FO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQjs7QUFFcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0EsZ0JBQWdCOztBQUVoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxhQUFhLEdBQUcsSUFBSTtBQUM5Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBLGVBQWUsb0JBQW9CLE9BQU87QUFDMUMsY0FBYyxzQkFBc0IsT0FBTztBQUMzQztBQUNBO0FBQ0EsK0VBQStFO0FBQy9FLDhFQUE4RTtBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxzQkFBc0IsT0FBTztBQUM1QztBQUNBO0FBQ0EsOEZBQThGO0FBQzlGLDZGQUE2RjtBQUM3RjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQix1QkFBdUIsdURBQXVEO0FBQ2xHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMEJBQTBCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsY0FBYyxZQUFZLGlDQUFpQztBQUN0RTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQ0FBb0MsbUJBQW1CO0FBQ3ZEOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RDtBQUM1RCwyREFBMkQ7QUFDM0Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELG1CQUFtQjtBQUNoRjs7QUFFQTtBQUNBLDREQUE0RDtBQUM1RDtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakMscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1CQUFtQjtBQUNuQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMERBQTBEO0FBQzFELHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBLCtCQUErQixlQUFlO0FBQzlDLGlDQUFpQyxlQUFlO0FBQ2hEOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLE9BQU87QUFDakMsNkJBQTZCOztBQUU3QjtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEMsMENBQTBDOztBQUUxQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLG9CQUFvQix3QkFBd0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxrQ0FBa0Msb0RBQW9ELDRCQUE0QjtBQUNsSDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSwyQkFBMkI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLDJCQUEyQjtBQUN0QyxjQUFjLDZDQUE2QztBQUMzRDtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMsb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0IsNkJBQTZCLDZCQUE2QjtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsdUJBQXVCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLGNBQWMsWUFBWSxpQ0FBaUM7QUFDdEU7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJCQUEyQjs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7O0FBRXhCO0FBQ0EscUJBQXFCOztBQUVyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixrQkFBa0Isc0JBQXNCO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQixhQUFhO0FBQ2pDO0FBQ0EsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQSxvQkFBb0IsYUFBYTtBQUNqQztBQUNBLGdCQUFnQixjQUFjOztBQUU5Qjs7QUFFQTtBQUNBLHVDQUF1QztBQUN2QywwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBLEVBQUU7O0FBRUY7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQiw2QkFBNkI7QUFDOUM7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLG1CQUFtQjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRDtBQUMvRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGlCQUFpQixlQUFlO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixlQUFlO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDLGtEQUFrRDtBQUNsRCxrREFBa0Q7QUFDbEQseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGlDQUFpQztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0EsOENBQThDO0FBQzlDLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVFQUF1RTtBQUN2RTtBQUNBO0FBQ0E7QUFDQSx1RUFBdUU7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RUFBdUU7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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QUFTLHlCQUF5QjtBQUNsQyxTQUFTLHVCQUF1QjtBQUNoQyxTQUFTLDJCQUEyQjtBQUNwQyxTQUFTLHlCQUF5QjtBQUNsQyxTQUFTLDBCQUEwQjtBQUNuQyxTQUFTLHdCQUF3QjtBQUNqQyxTQUFTLG9CQUFvQjtBQUM3QixTQUFTLGtCQUFrQjtBQUMzQixTQUFTLHdCQUF3QjtBQUNqQyxTQUFTLHNCQUFzQjtBQUMvQixTQUFTLHVCQUF1QjtBQUNoQyxTQUFTLHFCQUFxQjtBQUM5QixTQUFTLHFCQUFxQjtBQUM5QixTQUFTLG1CQUFtQjtBQUM1QixTQUFTLG9CQUFvQjtBQUM3QixTQUFTLGtCQUFrQjtBQUMzQixTQUFTLHNCQUFzQjtBQUMvQixTQUFTLG9CQUFvQjtBQUM3QixTQUFTLHFCQUFxQjtBQUM5QixTQUFTLG1CQUFtQjtBQUM1QixTQUFTLHlCQUF5QjtBQUNsQyxTQUFTLHVCQUF1QjtBQUNoQyxTQUFTLHlCQUF5QjtBQUNsQyxTQUFTLHVCQUF1QjtBQUNoQyxTQUFTLHVCQUF1QjtBQUNoQyxTQUFTLHFCQUFxQjtBQUM5QixTQUFTLHNCQUFzQjtBQUMvQixTQUFTLG9CQUFvQjtBQUM3QixTQUFTLHNCQUFzQjtBQUMvQixTQUFTLG9CQUFvQjtBQUM3QixTQUFTLHFCQUFxQjtBQUM5QixTQUFTLG1CQUFtQjtBQUM1QixTQUFTLG1CQUFtQjtBQUM1QixTQUFTLGlCQUFpQjtBQUMxQixTQUFTLGtCQUFrQjtBQUMzQixTQUFTLGdCQUFnQjtBQUN6QixTQUFTLHNCQUFzQjtBQUMvQixTQUFTLHlCQUF5QjtBQUNsQyxTQUFTLHVCQUF1QjtBQUNoQyxTQUFTLHFCQUFxQjtBQUM5QixTQUFTLGlCQUFpQjtBQUMxQixTQUFTLG1CQUFtQjtBQUM1QixTQUFTLG9CQUFvQjtBQUM3QixTQUFTLGtCQUFrQjtBQUMzQixTQUFTLG1CQUFtQjtBQUM1QixTQUFTLGlCQUFpQjtBQUMxQixTQUFTLG9CQUFvQjtBQUM3QixTQUFTLGtCQUFrQjtBQUMzQixTQUFTLG1CQUFtQjtBQUM1QixTQUFTLGlCQUFpQjtBQUMxQixTQUFTLG9CQUFvQjtBQUM3QixTQUFTLGtCQUFrQjtBQUMzQixTQUFTLG1CQUFtQjtBQUM1QixTQUFTLGlCQUFpQjtBQUMxQixTQUFTLG9CQUFvQjtBQUM3QixTQUFTLGtCQUFrQjtBQUMzQixTQUFTLG1CQUFtQjtBQUM1QixTQUFTLGlCQUFpQjtBQUMxQixTQUFTLHNCQUFzQjtBQUMvQixTQUFTLG9CQUFvQjtBQUM3QixTQUFTLHVCQUF1QjtBQUNoQyxTQUFTLHFCQUFxQjtBQUM5QixTQUFTLHVCQUF1QjtBQUNoQyxTQUFTLHFCQUFxQjtBQUM5QixTQUFTLHdCQUF3QjtBQUNqQyxTQUFTLHNCQUFzQjtBQUMvQixTQUFTLHVCQUF1QjtBQUNoQyxTQUFTLHFCQUFxQjtBQUM5QixTQUFTLHVCQUF1QjtBQUNoQyxTQUFTLHFCQUFxQjtBQUM5QixTQUFTLHdCQUF3QjtBQUNqQyxTQUFTLHNCQUFzQjtBQUMvQixTQUFTLHVCQUF1QjtBQUNoQyxTQUFTLHlCQUF5QjtBQUNsQyxTQUFTLG1CQUFtQjtBQUM1QixTQUFTLG9CQUFvQjtBQUM3QixTQUFTLGtCQUFrQjtBQUMzQixTQUFTLG1CQUFtQjtBQUM1QixTQUFTLGlCQUFpQjtBQUMxQixTQUFTLHVCQUF1QjtBQUNoQyxTQUFTLHFCQUFxQjtBQUM5QixTQUFTLHdCQUF3QjtBQUNqQyxTQUFTLHNCQUFzQjtBQUMvQixTQUFTLHNCQUFzQjtBQUMvQixTQUFTLG9CQUFvQjtBQUM3QixTQUFTLHFCQUFxQjtBQUM5QixTQUFTLG1CQUFtQjtBQUM1QixTQUFTLHdCQUF3QjtBQUNqQyxTQUFTLHNCQUFzQjtBQUMvQixTQUFTLHVCQUF1QjtBQUNoQyxTQUFTLHFCQUFxQjtBQUM5QixTQUFTLHVCQUF1QjtBQUNoQyxTQUFTLHFCQUFxQjtBQUM5QixTQUFTLHdCQUF3QjtBQUNqQyxTQUFTLGlCQUFpQjtBQUMxQixTQUFTLHNCQUFzQjtBQUMvQixTQUFTLG9CQUFvQjtBQUM3QixTQUFTLGtCQUFrQjtBQUMzQixTQUFTLG9CQUFvQjtBQUM3QixTQUFTLGtCQUFrQjtBQUMzQixTQUFTLDBCQUEwQjtBQUNuQyxTQUFTLHdCQUF3QjtBQUNqQyxTQUFTLG1CQUFtQjtBQUM1QixTQUFTLGlCQUFpQjtBQUMxQixTQUFTLHVCQUF1QjtBQUNoQyxTQUFTLHFCQUFxQjtBQUM5QixTQUFTLHNCQUFzQjtBQUMvQixTQUFTLG9CQUFvQjtBQUM3QixTQUFTLHlCQUF5QjtBQUNsQyxTQUFTLHVCQUF1QjtBQUNoQyxTQUFTLG9CQUFvQjtBQUM3QixTQUFTLG9CQUFvQjtBQUM3QixTQUFTLHdCQUF3QjtBQUNqQyxTQUFTLHNCQUFzQjtBQUMvQixTQUFTLGtDQUFrQztBQUMzQyxTQUFTLGlCQUFpQjtBQUMxQixTQUFTLGlCQUFpQjtBQUMxQixTQUFTLGlCQUFpQjtBQUMxQixTQUFTLHNCQUFzQjtBQUMvQixTQUFTLHlCQUF5QjtBQUNsQyxTQUFTLDBDQUEwQztBQUNuRCxTQUFTLDBCQUEwQjtBQUNuQyxTQUFTLHdCQUF3QjtBQUNqQyxTQUFTLHNCQUFzQjtBQUMvQixTQUFTLHlCQUF5QjtBQUNsQyxTQUFTLHdCQUF3QjtBQUNqQyxTQUFTLHdCQUF3QjtBQUNqQyxTQUFTLHlCQUF5QjtBQUNsQyxTQUFTLDBCQUEwQjtBQUNuQyxTQUFTLG9CQUFvQjtBQUM3QixTQUFTLGtCQUFrQjtBQUMzQixTQUFTLHFCQUFxQjtBQUM5QixTQUFTLG1CQUFtQjtBQUM1QixTQUFTLHlCQUF5QjtBQUNsQyxTQUFTLHVCQUF1QjtBQUNoQyxTQUFTLHFCQUFxQjtBQUM5QixTQUFTLG1CQUFtQjtBQUM1QixTQUFTLG9CQUFvQjtBQUM3QixTQUFTLGtCQUFrQjtBQUMzQixTQUFTLHNCQUFzQjtBQUMvQixTQUFTLG9CQUFvQjtBQUM3QixTQUFTLDRCQUE0QjtBQUNyQyxTQUFTLDBCQUEwQjtBQUNuQyxTQUFTLDJCQUEyQjtBQUNwQyxTQUFTLHlCQUF5QjtBQUNsQyxTQUFTLHFCQUFxQjtBQUM5QixTQUFTLG1CQUFtQjtBQUM1QixTQUFTLHVCQUF1QjtBQUNoQyxTQUFTLHFCQUFxQjtBQUM5QixTQUFTLG9CQUFvQjtBQUM3QixT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O0FBQ2pDLFNBQVMsbUJBQW1CO0FBQzVCLFNBQVMscUJBQXFCO0FBQzlCLFNBQVMsbUJBQW1CO0FBQzVCLFNBQVMscUJBQXFCO0FBQzlCLFNBQVMsb0JBQW9CO0FBQzdCLFNBQVMsa0JBQWtCO0FBQzNCLFNBQVMsc0JBQXNCO0FBQy9CLFNBQVMsb0JBQW9CO0FBQzdCLFNBQVMsbUJBQW1CO0FBQzVCLFNBQVMsaUJBQWlCO0FBQzFCLFNBQVMsc0JBQXNCO0FBQy9CLFNBQVMsb0JBQW9CO0FBQzdCLFNBQVMscUJBQXFCO0FBQzlCLFNBQVMsbUJBQW1CO0FBQzVCLFNBQVMsaUJBQWlCO0FBQzFCLFNBQVMsMkJBQTJCO0FBQ3BDLFNBQVMseUJBQXlCO0FBQ2xDLFNBQVMsdUJBQXVCO0FBQ2hDLFNBQVMscUJBQXFCO0FBQzlCLFNBQVMsNkJBQTZCO0FBQ3RDLFNBQVMsMkJBQTJCO0FBQ3BDLFNBQVMsaURBQWlEO0FBQzFELFNBQVMsMEJBQTBCO0FBQ25DLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMsOENBQThDO0FBQ3ZELFNBQVMsb0JBQW9CO0FBQzdCLFNBQVMsNkNBQTZDO0FBQ3RELFNBQVMseUJBQXlCO0FBQ2xDLFNBQVMsbUJBQW1CO0FBQzVCLFNBQVMsdUJBQXVCO0FBQ2hDLFNBQVMsc0JBQXNCO0FBQy9CLFNBQVMsb0JBQW9CO0FBQzdCLFNBQVMsOEJBQThCO0FBQ3ZDLFNBQVMsaUJBQWlCO0FBQzFCLFNBQVMsNEJBQTRCO0FBQ3JDLFNBQVMsb0NBQW9DO0FBQzdDLFNBQVMsNEJBQTRCO0FBQ3JDLFNBQVMsc0JBQXNCO0FBQy9CLFNBQVMsMEJBQTBCO0FBQ25DLFNBQVMsbUNBQW1DO0FBQzVDLFNBQVMscUJBQXFCO0FBQzlCLFNBQVMsMEJBQTBCO0FBQ25DLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMseUJBQXlCO0FBQ2xDLFNBQVMsdUJBQXVCO0FBQ2hDLFNBQVMsNkJBQTZCO0FBQ3RDLFNBQVMsMkJBQTJCO0FBQ3BDLFNBQVMsc0JBQXNCO0FBQy9CLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMsa0JBQWtC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O0FBQ3pCLFNBQVMsZ0JBQWdCO0FBQ3pCLFNBQVMsd0NBQXdDO0FBQ2pELFNBQVMsc0NBQXNDO0FBQy9DLFNBQVMsc0JBQXNCO0FBQy9CLFNBQVMsb0JBQW9CO0FBQzdCLFNBQVMsa0JBQWtCO0FBQzNCLFNBQVMscUJBQXFCO0FBQzlCLFNBQVMsbUJBQW1CO0FBQzVCLFNBQVMsc0JBQXNCO0FBQy9CLFNBQVMsb0JBQW9CO0FBQzdCLFNBQVMsdUJBQXVCO0FBQ2hDLFNBQVMscUJBQXFCO0FBQzlCLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMsc0JBQXNCO0FBQy9CLFNBQVMsc0JBQXNCO0FBQy9CLFNBQVMsMEJBQTBCO0FBQ25DLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMsNEJBQTRCO0FBQ3JDLFNBQVMsOEJBQThCO0FBQ3ZDLFNBQVMsNEJBQTRCO0FBQ3JDLFNBQVMsdUNBQXVDO0FBQ2hELFNBQVMscUNBQXFDO0FBQzlDLFNBQVMscUNBQXFDO0FBQzlDLFNBQVMsbUNBQW1DO0FBQzVDLFNBQVMsNEJBQTRCO0FBQ3JDLFNBQVMsMEJBQTBCO0FBQ25DLFNBQVMsNkJBQTZCO0FBQ3RDLFNBQVMsMkJBQTJCO0FBQ3BDLFNBQVMsb0JBQW9CO0FBQzdCLFNBQVMsMkJBQTJCO0FBQ3BDLFNBQVMseUJBQXlCO0FBQ2xDLFNBQVMsa0NBQWtDO0FBQzNDLFNBQVMsZ0NBQWdDO0FBQ3pDLFNBQVMsbUJBQW1CO0FBQzVCLFNBQVMsMEJBQTBCO0FBQ25DLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMsMkJBQTJCO0FBQ3BDLFNBQVMseUJBQXlCO0FBQ2xDLFNBQVMseUJBQXlCO0FBQ2xDLFNBQVMsdUJBQXVCO0FBQ2hDLFNBQVMsb0JBQW9CO0FBQzdCLFNBQVMsc0JBQXNCO0FBQy9CLFNBQVMsc0JBQXNCO0FBQy9CLFNBQVMsMkJBQTJCO0FBQ3BDLFNBQVMseUJBQXlCO0FBQ2xDLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMsc0JBQXNCO0FBQy9CLFNBQVMsc0JBQXNCO0FBQy9CLFNBQVMsb0JBQW9CO0FBQzdCLFNBQVMsMEJBQTBC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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFlBQVk7QUFDNUI7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLDZCQUE2QjtBQUM3Qix5Q0FBeUM7QUFDekM7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBLGdCQUFnQixpQkFBaUI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQiw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLElBQThCO0FBQ2pDLEtBQUssRUFFb0I7QUFDekI7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveGxzeC94bHN4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohIHhsc3guanMgKEMpIDIwMTMtcHJlc2VudCBTaGVldEpTIC0tIGh0dHA6Ly9zaGVldGpzLmNvbSAqL1xuLyogdmltOiBzZXQgdHM9MjogKi9cbi8qZXhwb3J0ZWQgWExTWCAqL1xuLypnbG9iYWwgZ2xvYmFsLCBleHBvcnRzLCBtb2R1bGUsIHJlcXVpcmU6ZmFsc2UsIHByb2Nlc3M6ZmFsc2UsIEJ1ZmZlcjpmYWxzZSwgQXJyYXlCdWZmZXI6ZmFsc2UgKi9cbnZhciBYTFNYID0ge307XG5mdW5jdGlvbiBtYWtlX3hsc3hfbGliKFhMU1gpe1xuWExTWC52ZXJzaW9uID0gJzAuMTcuNCc7XG52YXIgY3VycmVudF9jb2RlcGFnZSA9IDEyMDAsIGN1cnJlbnRfYW5zaSA9IDEyNTI7XG4vKmdsb2JhbCBjcHRhYmxlOnRydWUsIHdpbmRvdyAqL1xuaWYodHlwZW9mIG1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgcmVxdWlyZSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0aWYodHlwZW9mIGNwdGFibGUgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0aWYodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIGdsb2JhbC5jcHRhYmxlID0gcmVxdWlyZSgnLi9kaXN0L2NwZXhjZWwuanMnKTtcblx0XHRlbHNlIGlmKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB3aW5kb3cuY3B0YWJsZSA9IHJlcXVpcmUoJy4vZGlzdC9jcGV4Y2VsLmpzJyk7XG5cdH1cbn1cblxudmFyIFZBTElEX0FOU0kgPSBbIDg3NCwgOTMyLCA5MzYsIDk0OSwgOTUwIF07XG5mb3IodmFyIGkgPSAwOyBpIDw9IDg7ICsraSkgVkFMSURfQU5TSS5wdXNoKDEyNTAgKyBpKTtcbi8qIEVDTUEtMzc2IFBhcnQgSSAxOC40LjEgY2hhcnNldCB0byBjb2RlcGFnZSBtYXBwaW5nICovXG52YXIgQ1MyQ1AgPSAoe1xuMDogICAgMTI1MiwgLyogQU5TSSAqL1xuMTogICA2NTAwMSwgLyogREVGQVVMVCAqL1xuMjogICA2NTAwMSwgLyogU1lNQk9MICovXG43NzogIDEwMDAwLCAvKiBNQUMgKi9cbjEyODogICA5MzIsIC8qIFNISUZUSklTICovXG4xMjk6ICAgOTQ5LCAvKiBIQU5HVUwgKi9cbjEzMDogIDEzNjEsIC8qIEpPSEFCICovXG4xMzQ6ICAgOTM2LCAvKiBHQjIzMTIgKi9cbjEzNjogICA5NTAsIC8qIENISU5FU0VCSUc1ICovXG4xNjE6ICAxMjUzLCAvKiBHUkVFSyAqL1xuMTYyOiAgMTI1NCwgLyogVFVSS0lTSCAqL1xuMTYzOiAgMTI1OCwgLyogVklFVE5BTUVTRSAqL1xuMTc3OiAgMTI1NSwgLyogSEVCUkVXICovXG4xNzg6ICAxMjU2LCAvKiBBUkFCSUMgKi9cbjE4NjogIDEyNTcsIC8qIEJBTFRJQyAqL1xuMjA0OiAgMTI1MSwgLyogUlVTU0lBTiAqL1xuMjIyOiAgIDg3NCwgLyogVEhBSSAqL1xuMjM4OiAgMTI1MCwgLyogRUFTVEVVUk9QRSAqL1xuMjU1OiAgMTI1MiwgLyogT0VNICovXG42OTogICA2OTY5ICAvKiBNSVNDICovXG59KTtcblxudmFyIHNldF9hbnNpID0gZnVuY3Rpb24oY3ApIHsgaWYoVkFMSURfQU5TSS5pbmRleE9mKGNwKSA9PSAtMSkgcmV0dXJuOyBjdXJyZW50X2Fuc2kgPSBDUzJDUFswXSA9IGNwOyB9O1xuZnVuY3Rpb24gcmVzZXRfYW5zaSgpIHsgc2V0X2Fuc2koMTI1Mik7IH1cblxudmFyIHNldF9jcCA9IGZ1bmN0aW9uKGNwKSB7IGN1cnJlbnRfY29kZXBhZ2UgPSBjcDsgc2V0X2Fuc2koY3ApOyB9O1xuZnVuY3Rpb24gcmVzZXRfY3AoKSB7IHNldF9jcCgxMjAwKTsgcmVzZXRfYW5zaSgpOyB9XG5cbmZ1bmN0aW9uIGNoYXJfY29kZXMoZGF0YSkgeyB2YXIgbyA9IFtdOyBmb3IodmFyIGkgPSAwLCBsZW4gPSBkYXRhLmxlbmd0aDsgaSA8IGxlbjsgKytpKSBvW2ldID0gZGF0YS5jaGFyQ29kZUF0KGkpOyByZXR1cm4gbzsgfVxuXG5mdW5jdGlvbiB1dGYxNmxlcmVhZChkYXRhKSB7XG5cdHZhciBvID0gW107XG5cdGZvcih2YXIgaSA9IDA7IGkgPCAoZGF0YS5sZW5ndGg+PjEpOyArK2kpIG9baV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGRhdGEuY2hhckNvZGVBdCgyKmkpICsgKGRhdGEuY2hhckNvZGVBdCgyKmkrMSk8PDgpKTtcblx0cmV0dXJuIG8uam9pbihcIlwiKTtcbn1cbmZ1bmN0aW9uIHV0ZjE2YmVyZWFkKGRhdGEpIHtcblx0dmFyIG8gPSBbXTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IChkYXRhLmxlbmd0aD4+MSk7ICsraSkgb1tpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoZGF0YS5jaGFyQ29kZUF0KDIqaSsxKSArIChkYXRhLmNoYXJDb2RlQXQoMippKTw8OCkpO1xuXHRyZXR1cm4gby5qb2luKFwiXCIpO1xufVxuXG52YXIgZGVib20gPSBmdW5jdGlvbihkYXRhKSB7XG5cdHZhciBjMSA9IGRhdGEuY2hhckNvZGVBdCgwKSwgYzIgPSBkYXRhLmNoYXJDb2RlQXQoMSk7XG5cdGlmKGMxID09IDB4RkYgJiYgYzIgPT0gMHhGRSkgcmV0dXJuIHV0ZjE2bGVyZWFkKGRhdGEuc2xpY2UoMikpO1xuXHRpZihjMSA9PSAweEZFICYmIGMyID09IDB4RkYpIHJldHVybiB1dGYxNmJlcmVhZChkYXRhLnNsaWNlKDIpKTtcblx0aWYoYzEgPT0gMHhGRUZGKSByZXR1cm4gZGF0YS5zbGljZSgxKTtcblx0cmV0dXJuIGRhdGE7XG59O1xuXG52YXIgX2dldGNoYXIgPSBmdW5jdGlvbiBfZ2MxKHgpIHsgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoeCk7IH07XG52YXIgX2dldGFuc2kgPSBmdW5jdGlvbiBfZ2ExKHgpIHsgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoeCk7IH07XG5pZih0eXBlb2YgY3B0YWJsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0c2V0X2NwID0gZnVuY3Rpb24oY3ApIHsgY3VycmVudF9jb2RlcGFnZSA9IGNwOyBzZXRfYW5zaShjcCk7IH07XG5cdGRlYm9tID0gZnVuY3Rpb24oZGF0YSkge1xuXHRcdGlmKGRhdGEuY2hhckNvZGVBdCgwKSA9PT0gMHhGRiAmJiBkYXRhLmNoYXJDb2RlQXQoMSkgPT09IDB4RkUpIHsgcmV0dXJuIGNwdGFibGUudXRpbHMuZGVjb2RlKDEyMDAsIGNoYXJfY29kZXMoZGF0YS5zbGljZSgyKSkpOyB9XG5cdFx0cmV0dXJuIGRhdGE7XG5cdH07XG5cdF9nZXRjaGFyID0gZnVuY3Rpb24gX2djMih4KSB7XG5cdFx0aWYoY3VycmVudF9jb2RlcGFnZSA9PT0gMTIwMCkgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoeCk7XG5cdFx0cmV0dXJuIGNwdGFibGUudXRpbHMuZGVjb2RlKGN1cnJlbnRfY29kZXBhZ2UsIFt4JjI1NSx4Pj44XSlbMF07XG5cdH07XG5cdF9nZXRhbnNpID0gZnVuY3Rpb24gX2dhMih4KSB7XG5cdFx0cmV0dXJuIGNwdGFibGUudXRpbHMuZGVjb2RlKGN1cnJlbnRfYW5zaSwgW3hdKVswXTtcblx0fTtcbn1cbnZhciBERU5TRSA9IG51bGw7XG52YXIgRElGX1hMID0gdHJ1ZTtcbnZhciBCYXNlNjQgPSAoZnVuY3Rpb24gbWFrZV9iNjQoKXtcblx0dmFyIG1hcCA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cIjtcblx0cmV0dXJuIHtcblx0XHRlbmNvZGU6IGZ1bmN0aW9uKGlucHV0KSB7XG5cdFx0XHR2YXIgbyA9IFwiXCI7XG5cdFx0XHR2YXIgYzE9MCwgYzI9MCwgYzM9MCwgZTE9MCwgZTI9MCwgZTM9MCwgZTQ9MDtcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7ICkge1xuXHRcdFx0XHRjMSA9IGlucHV0LmNoYXJDb2RlQXQoaSsrKTtcblx0XHRcdFx0ZTEgPSAoYzEgPj4gMik7XG5cblx0XHRcdFx0YzIgPSBpbnB1dC5jaGFyQ29kZUF0KGkrKyk7XG5cdFx0XHRcdGUyID0gKChjMSAmIDMpIDw8IDQpIHwgKGMyID4+IDQpO1xuXG5cdFx0XHRcdGMzID0gaW5wdXQuY2hhckNvZGVBdChpKyspO1xuXHRcdFx0XHRlMyA9ICgoYzIgJiAxNSkgPDwgMikgfCAoYzMgPj4gNik7XG5cdFx0XHRcdGU0ID0gKGMzICYgNjMpO1xuXHRcdFx0XHRpZiAoaXNOYU4oYzIpKSB7IGUzID0gZTQgPSA2NDsgfVxuXHRcdFx0XHRlbHNlIGlmIChpc05hTihjMykpIHsgZTQgPSA2NDsgfVxuXHRcdFx0XHRvICs9IG1hcC5jaGFyQXQoZTEpICsgbWFwLmNoYXJBdChlMikgKyBtYXAuY2hhckF0KGUzKSArIG1hcC5jaGFyQXQoZTQpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG87XG5cdFx0fSxcblx0XHRkZWNvZGU6IGZ1bmN0aW9uIGI2NF9kZWNvZGUoaW5wdXQpIHtcblx0XHRcdHZhciBvID0gXCJcIjtcblx0XHRcdHZhciBjMT0wLCBjMj0wLCBjMz0wLCBlMT0wLCBlMj0wLCBlMz0wLCBlND0wO1xuXHRcdFx0aW5wdXQgPSBpbnB1dC5yZXBsYWNlKC9bXlxcd1xcK1xcL1xcPV0vZywgXCJcIik7XG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOykge1xuXHRcdFx0XHRlMSA9IG1hcC5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtcblx0XHRcdFx0ZTIgPSBtYXAuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7XG5cdFx0XHRcdGMxID0gKGUxIDw8IDIpIHwgKGUyID4+IDQpO1xuXHRcdFx0XHRvICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYzEpO1xuXG5cdFx0XHRcdGUzID0gbWFwLmluZGV4T2YoaW5wdXQuY2hhckF0KGkrKykpO1xuXHRcdFx0XHRjMiA9ICgoZTIgJiAxNSkgPDwgNCkgfCAoZTMgPj4gMik7XG5cdFx0XHRcdGlmIChlMyAhPT0gNjQpIHsgbyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMyKTsgfVxuXG5cdFx0XHRcdGU0ID0gbWFwLmluZGV4T2YoaW5wdXQuY2hhckF0KGkrKykpO1xuXHRcdFx0XHRjMyA9ICgoZTMgJiAzKSA8PCA2KSB8IGU0O1xuXHRcdFx0XHRpZiAoZTQgIT09IDY0KSB7IG8gKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjMyk7IH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBvO1xuXHRcdH1cblx0fTtcbn0pKCk7XG52YXIgaGFzX2J1ZiA9ICh0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMgIT09ICd1bmRlZmluZWQnICYmICEhcHJvY2Vzcy52ZXJzaW9ucy5ub2RlKTtcblxudmFyIEJ1ZmZlcl9mcm9tID0gZnVuY3Rpb24oKXt9O1xuXG5pZih0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJykge1xuXHR2YXIgbmJmcyA9ICFCdWZmZXIuZnJvbTtcblx0aWYoIW5iZnMpIHRyeSB7IEJ1ZmZlci5mcm9tKFwiZm9vXCIsIFwidXRmOFwiKTsgfSBjYXRjaChlKSB7IG5iZnMgPSB0cnVlOyB9XG5cdEJ1ZmZlcl9mcm9tID0gbmJmcyA/IGZ1bmN0aW9uKGJ1ZiwgZW5jKSB7IHJldHVybiAoZW5jKSA/IG5ldyBCdWZmZXIoYnVmLCBlbmMpIDogbmV3IEJ1ZmZlcihidWYpOyB9IDogQnVmZmVyLmZyb20uYmluZChCdWZmZXIpO1xuXHQvLyAkRmxvd0lnbm9yZVxuXHRpZighQnVmZmVyLmFsbG9jKSBCdWZmZXIuYWxsb2MgPSBmdW5jdGlvbihuKSB7IHJldHVybiBuZXcgQnVmZmVyKG4pOyB9O1xuXHQvLyAkRmxvd0lnbm9yZVxuXHRpZighQnVmZmVyLmFsbG9jVW5zYWZlKSBCdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbihuKSB7IHJldHVybiBuZXcgQnVmZmVyKG4pOyB9O1xufVxuXG5mdW5jdGlvbiBuZXdfcmF3X2J1ZihsZW4pIHtcblx0LyoganNoaW50IC1XMDU2ICovXG5cdHJldHVybiBoYXNfYnVmID8gQnVmZmVyLmFsbG9jKGxlbikgOiBuZXcgQXJyYXkobGVuKTtcblx0LyoganNoaW50ICtXMDU2ICovXG59XG5cbmZ1bmN0aW9uIG5ld191bnNhZmVfYnVmKGxlbikge1xuXHQvKiBqc2hpbnQgLVcwNTYgKi9cblx0cmV0dXJuIGhhc19idWYgPyBCdWZmZXIuYWxsb2NVbnNhZmUobGVuKSA6IG5ldyBBcnJheShsZW4pO1xuXHQvKiBqc2hpbnQgK1cwNTYgKi9cbn1cblxudmFyIHMyYSA9IGZ1bmN0aW9uIHMyYShzKSB7XG5cdGlmKGhhc19idWYpIHJldHVybiBCdWZmZXJfZnJvbShzLCBcImJpbmFyeVwiKTtcblx0cmV0dXJuIHMuc3BsaXQoXCJcIikubWFwKGZ1bmN0aW9uKHgpeyByZXR1cm4geC5jaGFyQ29kZUF0KDApICYgMHhmZjsgfSk7XG59O1xuXG5mdW5jdGlvbiBzMmFiKHMpIHtcblx0aWYodHlwZW9mIEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJykgcmV0dXJuIHMyYShzKTtcblx0dmFyIGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihzLmxlbmd0aCksIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpO1xuXHRmb3IgKHZhciBpPTA7IGkhPXMubGVuZ3RoOyArK2kpIHZpZXdbaV0gPSBzLmNoYXJDb2RlQXQoaSkgJiAweEZGO1xuXHRyZXR1cm4gYnVmO1xufVxuXG5mdW5jdGlvbiBhMnMoZGF0YSkge1xuXHRpZihBcnJheS5pc0FycmF5KGRhdGEpKSByZXR1cm4gZGF0YS5tYXAoZnVuY3Rpb24oYykgeyByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjKTsgfSkuam9pbihcIlwiKTtcblx0dmFyIG8gPSBbXTsgZm9yKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyArK2kpIG9baV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGRhdGFbaV0pOyByZXR1cm4gby5qb2luKFwiXCIpO1xufVxuXG5mdW5jdGlvbiBhMnUoZGF0YSkge1xuXHRpZih0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcpIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkXCIpO1xuXHRyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG59XG5cbmZ1bmN0aW9uIGFiMmEoZGF0YSkge1xuXHRpZih0eXBlb2YgQXJyYXlCdWZmZXIgPT0gJ3VuZGVmaW5lZCcpIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkXCIpO1xuXHRpZihkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHJldHVybiBhYjJhKG5ldyBVaW50OEFycmF5KGRhdGEpKTtcbnZhciBvID0gbmV3IEFycmF5KGRhdGEubGVuZ3RoKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyArK2kpIG9baV0gPSBkYXRhW2ldO1xuXHRyZXR1cm4gbztcbn1cblxudmFyIGJjb25jYXQgPSBmdW5jdGlvbihidWZzKSB7IHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIGJ1ZnMpOyB9O1xuXG52YXIgY2hyMCA9IC9cXHUwMDAwL2csIGNocjEgPSAvW1xcdTAwMDEtXFx1MDAwNl0vZztcbi8qIHNzZi5qcyAoQykgMjAxMy1wcmVzZW50IFNoZWV0SlMgLS0gaHR0cDovL3NoZWV0anMuY29tICovXG4vKmpzaGludCAtVzA0MSAqL1xudmFyIFNTRiA9ICh7fSk7XG52YXIgbWFrZV9zc2YgPSBmdW5jdGlvbiBtYWtlX3NzZihTU0Ype1xuU1NGLnZlcnNpb24gPSAnMC4xMS4yJztcbmZ1bmN0aW9uIF9zdHJyZXYoeCkgeyB2YXIgbyA9IFwiXCIsIGkgPSB4Lmxlbmd0aC0xOyB3aGlsZShpPj0wKSBvICs9IHguY2hhckF0KGktLSk7IHJldHVybiBvOyB9XG5mdW5jdGlvbiBmaWxsKGMsbCkgeyB2YXIgbyA9IFwiXCI7IHdoaWxlKG8ubGVuZ3RoIDwgbCkgbys9YzsgcmV0dXJuIG87IH1cbmZ1bmN0aW9uIHBhZDAodixkKXt2YXIgdD1cIlwiK3Y7IHJldHVybiB0Lmxlbmd0aD49ZD90OmZpbGwoJzAnLGQtdC5sZW5ndGgpK3Q7fVxuZnVuY3Rpb24gcGFkXyh2LGQpe3ZhciB0PVwiXCIrdjtyZXR1cm4gdC5sZW5ndGg+PWQ/dDpmaWxsKCcgJyxkLXQubGVuZ3RoKSt0O31cbmZ1bmN0aW9uIHJwYWRfKHYsZCl7dmFyIHQ9XCJcIit2OyByZXR1cm4gdC5sZW5ndGg+PWQ/dDp0K2ZpbGwoJyAnLGQtdC5sZW5ndGgpO31cbmZ1bmN0aW9uIHBhZDByMSh2LGQpe3ZhciB0PVwiXCIrTWF0aC5yb3VuZCh2KTsgcmV0dXJuIHQubGVuZ3RoPj1kP3Q6ZmlsbCgnMCcsZC10Lmxlbmd0aCkrdDt9XG5mdW5jdGlvbiBwYWQwcjIodixkKXt2YXIgdD1cIlwiK3Y7IHJldHVybiB0Lmxlbmd0aD49ZD90OmZpbGwoJzAnLGQtdC5sZW5ndGgpK3Q7fVxudmFyIHAyXzMyID0gTWF0aC5wb3coMiwzMik7XG5mdW5jdGlvbiBwYWQwcih2LGQpe2lmKHY+cDJfMzJ8fHY8LXAyXzMyKSByZXR1cm4gcGFkMHIxKHYsZCk7IHZhciBpID0gTWF0aC5yb3VuZCh2KTsgcmV0dXJuIHBhZDByMihpLGQpOyB9XG5mdW5jdGlvbiBpc2dlbmVyYWwocywgaSkgeyBpID0gaSB8fCAwOyByZXR1cm4gcy5sZW5ndGggPj0gNyArIGkgJiYgKHMuY2hhckNvZGVBdChpKXwzMikgPT09IDEwMyAmJiAocy5jaGFyQ29kZUF0KGkrMSl8MzIpID09PSAxMDEgJiYgKHMuY2hhckNvZGVBdChpKzIpfDMyKSA9PT0gMTEwICYmIChzLmNoYXJDb2RlQXQoaSszKXwzMikgPT09IDEwMSAmJiAocy5jaGFyQ29kZUF0KGkrNCl8MzIpID09PSAxMTQgJiYgKHMuY2hhckNvZGVBdChpKzUpfDMyKSA9PT0gOTcgJiYgKHMuY2hhckNvZGVBdChpKzYpfDMyKSA9PT0gMTA4OyB9XG52YXIgZGF5cyA9IFtcblx0WydTdW4nLCAnU3VuZGF5J10sXG5cdFsnTW9uJywgJ01vbmRheSddLFxuXHRbJ1R1ZScsICdUdWVzZGF5J10sXG5cdFsnV2VkJywgJ1dlZG5lc2RheSddLFxuXHRbJ1RodScsICdUaHVyc2RheSddLFxuXHRbJ0ZyaScsICdGcmlkYXknXSxcblx0WydTYXQnLCAnU2F0dXJkYXknXVxuXTtcbnZhciBtb250aHMgPSBbXG5cdFsnSicsICdKYW4nLCAnSmFudWFyeSddLFxuXHRbJ0YnLCAnRmViJywgJ0ZlYnJ1YXJ5J10sXG5cdFsnTScsICdNYXInLCAnTWFyY2gnXSxcblx0WydBJywgJ0FwcicsICdBcHJpbCddLFxuXHRbJ00nLCAnTWF5JywgJ01heSddLFxuXHRbJ0onLCAnSnVuJywgJ0p1bmUnXSxcblx0WydKJywgJ0p1bCcsICdKdWx5J10sXG5cdFsnQScsICdBdWcnLCAnQXVndXN0J10sXG5cdFsnUycsICdTZXAnLCAnU2VwdGVtYmVyJ10sXG5cdFsnTycsICdPY3QnLCAnT2N0b2JlciddLFxuXHRbJ04nLCAnTm92JywgJ05vdmVtYmVyJ10sXG5cdFsnRCcsICdEZWMnLCAnRGVjZW1iZXInXVxuXTtcbmZ1bmN0aW9uIGluaXRfdGFibGUodCkge1xuXHR0WzBdPSAgJ0dlbmVyYWwnO1xuXHR0WzFdPSAgJzAnO1xuXHR0WzJdPSAgJzAuMDAnO1xuXHR0WzNdPSAgJyMsIyMwJztcblx0dFs0XT0gICcjLCMjMC4wMCc7XG5cdHRbOV09ICAnMCUnO1xuXHR0WzEwXT0gJzAuMDAlJztcblx0dFsxMV09ICcwLjAwRSswMCc7XG5cdHRbMTJdPSAnIyA/Lz8nO1xuXHR0WzEzXT0gJyMgPz8vPz8nO1xuXHR0WzE0XT0gJ20vZC95eSc7XG5cdHRbMTVdPSAnZC1tbW0teXknO1xuXHR0WzE2XT0gJ2QtbW1tJztcblx0dFsxN109ICdtbW0teXknO1xuXHR0WzE4XT0gJ2g6bW0gQU0vUE0nO1xuXHR0WzE5XT0gJ2g6bW06c3MgQU0vUE0nO1xuXHR0WzIwXT0gJ2g6bW0nO1xuXHR0WzIxXT0gJ2g6bW06c3MnO1xuXHR0WzIyXT0gJ20vZC95eSBoOm1tJztcblx0dFszN109ICcjLCMjMCA7KCMsIyMwKSc7XG5cdHRbMzhdPSAnIywjIzAgO1tSZWRdKCMsIyMwKSc7XG5cdHRbMzldPSAnIywjIzAuMDA7KCMsIyMwLjAwKSc7XG5cdHRbNDBdPSAnIywjIzAuMDA7W1JlZF0oIywjIzAuMDApJztcblx0dFs0NV09ICdtbTpzcyc7XG5cdHRbNDZdPSAnW2hdOm1tOnNzJztcblx0dFs0N109ICdtbXNzLjAnO1xuXHR0WzQ4XT0gJyMjMC4wRSswJztcblx0dFs0OV09ICdAJztcblx0dFs1Nl09ICdcIuS4iuWNiC/kuIvljYggXCJoaFwi5pmCXCJtbVwi5YiGXCJzc1wi56eSIFwiJztcbn1cblxudmFyIHRhYmxlX2ZtdCA9IHt9O1xuaW5pdF90YWJsZSh0YWJsZV9mbXQpO1xuLyogRGVmYXVsdHMgZGV0ZXJtaW5lZCBieSBzeXN0ZW1hdGljYWxseSB0ZXN0aW5nIGluIEV4Y2VsIDIwMTkgKi9cblxuLyogVGhlc2UgZm9ybWF0cyBhcHBlYXIgdG8gZGVmYXVsdCB0byBvdGhlciBmb3JtYXRzIGluIHRoZSB0YWJsZSAqL1xudmFyIGRlZmF1bHRfbWFwID0gW107XG52YXIgZGVmaSA9IDA7XG5cbi8vICA1IC0+IDM3IC4uLiAgOCAtPiA0MFxuZm9yKGRlZmkgPSA1OyBkZWZpIDw9IDg7ICsrZGVmaSkgZGVmYXVsdF9tYXBbZGVmaV0gPSAzMiArIGRlZmk7XG5cbi8vIDIzIC0+ICAwIC4uLiAyNiAtPiAgMFxuZm9yKGRlZmkgPSAyMzsgZGVmaSA8PSAyNjsgKytkZWZpKSBkZWZhdWx0X21hcFtkZWZpXSA9IDA7XG5cbi8vIDI3IC0+IDE0IC4uLiAzMSAtPiAxNFxuZm9yKGRlZmkgPSAyNzsgZGVmaSA8PSAzMTsgKytkZWZpKSBkZWZhdWx0X21hcFtkZWZpXSA9IDE0O1xuLy8gNTAgLT4gMTQgLi4uIDU4IC0+IDE0XG5mb3IoZGVmaSA9IDUwOyBkZWZpIDw9IDU4OyArK2RlZmkpIGRlZmF1bHRfbWFwW2RlZmldID0gMTQ7XG5cbi8vIDU5IC0+ICAxIC4uLiA2MiAtPiAgNFxuZm9yKGRlZmkgPSA1OTsgZGVmaSA8PSA2MjsgKytkZWZpKSBkZWZhdWx0X21hcFtkZWZpXSA9IGRlZmkgLSA1ODtcbi8vIDY3IC0+ICA5IC4uLiA2OCAtPiAxMFxuZm9yKGRlZmkgPSA2NzsgZGVmaSA8PSA2ODsgKytkZWZpKSBkZWZhdWx0X21hcFtkZWZpXSA9IGRlZmkgLSA1ODtcbi8vIDcyIC0+IDE0IC4uLiA3NSAtPiAxN1xuZm9yKGRlZmkgPSA3MjsgZGVmaSA8PSA3NTsgKytkZWZpKSBkZWZhdWx0X21hcFtkZWZpXSA9IGRlZmkgLSA1ODtcblxuLy8gNjkgLT4gMTIgLi4uIDcxIC0+IDE0XG5mb3IoZGVmaSA9IDY3OyBkZWZpIDw9IDY4OyArK2RlZmkpIGRlZmF1bHRfbWFwW2RlZmldID0gZGVmaSAtIDU3O1xuXG4vLyA3NiAtPiAyMCAuLi4gNzggLT4gMjJcbmZvcihkZWZpID0gNzY7IGRlZmkgPD0gNzg7ICsrZGVmaSkgZGVmYXVsdF9tYXBbZGVmaV0gPSBkZWZpIC0gNTY7XG5cbi8vIDc5IC0+IDQ1IC4uLiA4MSAtPiA0N1xuZm9yKGRlZmkgPSA3OTsgZGVmaSA8PSA4MTsgKytkZWZpKSBkZWZhdWx0X21hcFtkZWZpXSA9IGRlZmkgLSAzNDtcblxuLy8gODIgLT4gIDAgLi4uIDY1NTM2IC0+IDAgKG9taXR0ZWQpXG5cbi8qIFRoZXNlIGZvcm1hdHMgdGVjaG5pY2FsbHkgcmVmZXIgdG8gQWNjb3VudGluZyBmb3JtYXRzIHdpdGggbm8gZXF1aXZhbGVudCAqL1xudmFyIGRlZmF1bHRfc3RyID0gW107XG5cbi8vICA1IC0tIEN1cnJlbmN5LCAgIDAgZGVjaW1hbCwgYmxhY2sgbmVnYXRpdmVcbmRlZmF1bHRfc3RyWzVdID0gZGVmYXVsdF9zdHJbNjNdID0gJ1wiJFwiIywjIzBfKTtcXFxcKFwiJFwiIywjIzBcXFxcKSc7XG4vLyAgNiAtLSBDdXJyZW5jeSwgICAwIGRlY2ltYWwsIHJlZCAgIG5lZ2F0aXZlXG5kZWZhdWx0X3N0cls2XSA9IGRlZmF1bHRfc3RyWzY0XSA9ICdcIiRcIiMsIyMwXyk7W1JlZF1cXFxcKFwiJFwiIywjIzBcXFxcKSc7XG4vLyAgNyAtLSBDdXJyZW5jeSwgICAyIGRlY2ltYWwsIGJsYWNrIG5lZ2F0aXZlXG5kZWZhdWx0X3N0cls3XSA9IGRlZmF1bHRfc3RyWzY1XSA9ICdcIiRcIiMsIyMwLjAwXyk7XFxcXChcIiRcIiMsIyMwLjAwXFxcXCknO1xuLy8gIDggLS0gQ3VycmVuY3ksICAgMiBkZWNpbWFsLCByZWQgICBuZWdhdGl2ZVxuZGVmYXVsdF9zdHJbOF0gPSBkZWZhdWx0X3N0cls2Nl0gPSAnXCIkXCIjLCMjMC4wMF8pO1tSZWRdXFxcXChcIiRcIiMsIyMwLjAwXFxcXCknO1xuXG4vLyA0MSAtLSBBY2NvdW50aW5nLCAwIGRlY2ltYWwsIE5vIFN5bWJvbFxuZGVmYXVsdF9zdHJbNDFdID0gJ18oKiAjLCMjMF8pO18oKiBcXFxcKCMsIyMwXFxcXCk7XygqIFwiLVwiXyk7XyhAXyknO1xuLy8gNDIgLS0gQWNjb3VudGluZywgMCBkZWNpbWFsLCAkICBTeW1ib2xcbmRlZmF1bHRfc3RyWzQyXSA9ICdfKFwiJFwiKiAjLCMjMF8pO18oXCIkXCIqIFxcXFwoIywjIzBcXFxcKTtfKFwiJFwiKiBcIi1cIl8pO18oQF8pJztcbi8vIDQzIC0tIEFjY291bnRpbmcsIDIgZGVjaW1hbCwgTm8gU3ltYm9sXG5kZWZhdWx0X3N0cls0M10gPSAnXygqICMsIyMwLjAwXyk7XygqIFxcXFwoIywjIzAuMDBcXFxcKTtfKCogXCItXCI/P18pO18oQF8pJztcbi8vIDQ0IC0tIEFjY291bnRpbmcsIDIgZGVjaW1hbCwgJCAgU3ltYm9sXG5kZWZhdWx0X3N0cls0NF0gPSAnXyhcIiRcIiogIywjIzAuMDBfKTtfKFwiJFwiKiBcXFxcKCMsIyMwLjAwXFxcXCk7XyhcIiRcIiogXCItXCI/P18pO18oQF8pJztcbmZ1bmN0aW9uIGZyYWMoeCwgRCwgbWl4ZWQpIHtcblx0dmFyIHNnbiA9IHggPCAwID8gLTEgOiAxO1xuXHR2YXIgQiA9IHggKiBzZ247XG5cdHZhciBQXzIgPSAwLCBQXzEgPSAxLCBQID0gMDtcblx0dmFyIFFfMiA9IDEsIFFfMSA9IDAsIFEgPSAwO1xuXHR2YXIgQSA9IE1hdGguZmxvb3IoQik7XG5cdHdoaWxlKFFfMSA8IEQpIHtcblx0XHRBID0gTWF0aC5mbG9vcihCKTtcblx0XHRQID0gQSAqIFBfMSArIFBfMjtcblx0XHRRID0gQSAqIFFfMSArIFFfMjtcblx0XHRpZigoQiAtIEEpIDwgMC4wMDAwMDAwNSkgYnJlYWs7XG5cdFx0QiA9IDEgLyAoQiAtIEEpO1xuXHRcdFBfMiA9IFBfMTsgUF8xID0gUDtcblx0XHRRXzIgPSBRXzE7IFFfMSA9IFE7XG5cdH1cblx0aWYoUSA+IEQpIHsgaWYoUV8xID4gRCkgeyBRID0gUV8yOyBQID0gUF8yOyB9IGVsc2UgeyBRID0gUV8xOyBQID0gUF8xOyB9IH1cblx0aWYoIW1peGVkKSByZXR1cm4gWzAsIHNnbiAqIFAsIFFdO1xuXHR2YXIgcSA9IE1hdGguZmxvb3Ioc2duICogUC9RKTtcblx0cmV0dXJuIFtxLCBzZ24qUCAtIHEqUSwgUV07XG59XG5mdW5jdGlvbiBwYXJzZV9kYXRlX2NvZGUodixvcHRzLGIyKSB7XG5cdGlmKHYgPiAyOTU4NDY1IHx8IHYgPCAwKSByZXR1cm4gbnVsbDtcblx0dmFyIGRhdGUgPSAodnwwKSwgdGltZSA9IE1hdGguZmxvb3IoODY0MDAgKiAodiAtIGRhdGUpKSwgZG93PTA7XG5cdHZhciBkb3V0PVtdO1xuXHR2YXIgb3V0PXtEOmRhdGUsIFQ6dGltZSwgdTo4NjQwMCoodi1kYXRlKS10aW1lLHk6MCxtOjAsZDowLEg6MCxNOjAsUzowLHE6MH07XG5cdGlmKE1hdGguYWJzKG91dC51KSA8IDFlLTYpIG91dC51ID0gMDtcblx0aWYob3B0cyAmJiBvcHRzLmRhdGUxOTA0KSBkYXRlICs9IDE0NjI7XG5cdGlmKG91dC51ID4gMC45OTk5KSB7XG5cdFx0b3V0LnUgPSAwO1xuXHRcdGlmKCsrdGltZSA9PSA4NjQwMCkgeyBvdXQuVCA9IHRpbWUgPSAwOyArK2RhdGU7ICsrb3V0LkQ7IH1cblx0fVxuXHRpZihkYXRlID09PSA2MCkge2RvdXQgPSBiMiA/IFsxMzE3LDEwLDI5XSA6IFsxOTAwLDIsMjldOyBkb3c9Mzt9XG5cdGVsc2UgaWYoZGF0ZSA9PT0gMCkge2RvdXQgPSBiMiA/IFsxMzE3LDgsMjldIDogWzE5MDAsMSwwXTsgZG93PTY7fVxuXHRlbHNlIHtcblx0XHRpZihkYXRlID4gNjApIC0tZGF0ZTtcblx0XHQvKiAxID0gSmFuIDEgMTkwMCBpbiBHcmVnb3JpYW4gKi9cblx0XHR2YXIgZCA9IG5ldyBEYXRlKDE5MDAsIDAsIDEpO1xuXHRcdGQuc2V0RGF0ZShkLmdldERhdGUoKSArIGRhdGUgLSAxKTtcblx0XHRkb3V0ID0gW2QuZ2V0RnVsbFllYXIoKSwgZC5nZXRNb250aCgpKzEsZC5nZXREYXRlKCldO1xuXHRcdGRvdyA9IGQuZ2V0RGF5KCk7XG5cdFx0aWYoZGF0ZSA8IDYwKSBkb3cgPSAoZG93ICsgNikgJSA3O1xuXHRcdGlmKGIyKSBkb3cgPSBmaXhfaGlqcmkoZCwgZG91dCk7XG5cdH1cblx0b3V0LnkgPSBkb3V0WzBdOyBvdXQubSA9IGRvdXRbMV07IG91dC5kID0gZG91dFsyXTtcblx0b3V0LlMgPSB0aW1lICUgNjA7IHRpbWUgPSBNYXRoLmZsb29yKHRpbWUgLyA2MCk7XG5cdG91dC5NID0gdGltZSAlIDYwOyB0aW1lID0gTWF0aC5mbG9vcih0aW1lIC8gNjApO1xuXHRvdXQuSCA9IHRpbWU7XG5cdG91dC5xID0gZG93O1xuXHRyZXR1cm4gb3V0O1xufVxuU1NGLnBhcnNlX2RhdGVfY29kZSA9IHBhcnNlX2RhdGVfY29kZTtcbnZhciBiYXNlZGF0ZSA9IG5ldyBEYXRlKDE4OTksIDExLCAzMSwgMCwgMCwgMCk7XG52YXIgZG50aHJlc2ggPSBiYXNlZGF0ZS5nZXRUaW1lKCk7XG52YXIgYmFzZTE5MDQgPSBuZXcgRGF0ZSgxOTAwLCAyLCAxLCAwLCAwLCAwKTtcbmZ1bmN0aW9uIGRhdGVudW1fbG9jYWwodiwgZGF0ZTE5MDQpIHtcblx0dmFyIGVwb2NoID0gdi5nZXRUaW1lKCk7XG5cdGlmKGRhdGUxOTA0KSBlcG9jaCAtPSAxNDYxKjI0KjYwKjYwKjEwMDA7XG5cdGVsc2UgaWYodiA+PSBiYXNlMTkwNCkgZXBvY2ggKz0gMjQqNjAqNjAqMTAwMDtcblx0cmV0dXJuIChlcG9jaCAtIChkbnRocmVzaCArICh2LmdldFRpbWV6b25lT2Zmc2V0KCkgLSBiYXNlZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpKSAqIDYwMDAwKSkgLyAoMjQgKiA2MCAqIDYwICogMTAwMCk7XG59XG4vKiBUaGUgbG9uZ2VzdCAzMi1iaXQgaW50ZWdlciB0ZXh0IGlzIFwiLTQyOTQ5NjcyOTZcIiwgZXhhY3RseSAxMSBjaGFycyAqL1xuZnVuY3Rpb24gZ2VuZXJhbF9mbXRfaW50KHYpIHsgcmV0dXJuIHYudG9TdHJpbmcoMTApOyB9XG5TU0YuX2dlbmVyYWxfaW50ID0gZ2VuZXJhbF9mbXRfaW50O1xuXG4vKiBFQ01BLTM3NiAxOC44LjMwIG51bUZtdCovXG4vKiBOb3RlOiBgdG9QcmVjaXNpb25gIHVzZXMgc3RhbmRhcmQgZm9ybSB3aGVuIHByZWMgPiBFIGFuZCBFID49IC02ICovXG52YXIgZ2VuZXJhbF9mbXRfbnVtID0gKGZ1bmN0aW9uIG1ha2VfZ2VuZXJhbF9mbXRfbnVtKCkge1xuXHR2YXIgdHJhaWxpbmdfemVyb2VzX2FuZF9kZWNpbWFsID0gLyg/OlxcLjAqfChcXC5cXGQqWzEtOV0pMCspJC87XG5cdGZ1bmN0aW9uIHN0cmlwX2RlY2ltYWwobykge1xuXHRcdHJldHVybiAoby5pbmRleE9mKFwiLlwiKSA9PSAtMSkgPyBvIDogby5yZXBsYWNlKHRyYWlsaW5nX3plcm9lc19hbmRfZGVjaW1hbCwgXCIkMVwiKTtcblx0fVxuXG5cdC8qIEdlbmVyYWwgRXhwb25lbnRpYWwgYWx3YXlzIHNob3dzIDIgZGlnaXRzIGV4cCBhbmQgdHJpbXMgdGhlIG1hbnRpc3NhICovXG5cdHZhciBtYW50aXNzYV96ZXJvZXNfYW5kX2RlY2ltYWwgPSAvKD86XFwuMCp8KFxcLlxcZCpbMS05XSkwKylbRWVdLztcblx0dmFyIGV4cF93aXRoX3NpbmdsZV9kaWdpdCA9IC8oRVsrLV0pKFxcZCkkLztcblx0ZnVuY3Rpb24gbm9ybWFsaXplX2V4cChvKSB7XG5cdFx0aWYoby5pbmRleE9mKFwiRVwiKSA9PSAtMSkgcmV0dXJuIG87XG5cdFx0cmV0dXJuIG8ucmVwbGFjZShtYW50aXNzYV96ZXJvZXNfYW5kX2RlY2ltYWwsXCIkMUVcIikucmVwbGFjZShleHBfd2l0aF9zaW5nbGVfZGlnaXQsXCIkMTAkMlwiKTtcblx0fVxuXG5cdC8qIGV4cG9uZW50ID49IC05IGFuZCA8PSA5ICovXG5cdGZ1bmN0aW9uIHNtYWxsX2V4cCh2KSB7XG5cdFx0dmFyIHcgPSAodjwwPzEyOjExKTtcblx0XHR2YXIgbyA9IHN0cmlwX2RlY2ltYWwodi50b0ZpeGVkKDEyKSk7IGlmKG8ubGVuZ3RoIDw9IHcpIHJldHVybiBvO1xuXHRcdG8gPSB2LnRvUHJlY2lzaW9uKDEwKTsgaWYoby5sZW5ndGggPD0gdykgcmV0dXJuIG87XG5cdFx0cmV0dXJuIHYudG9FeHBvbmVudGlhbCg1KTtcblx0fVxuXG5cdC8qIGV4cG9uZW50ID49IDExIG9yIDw9IC0xMCBsaWtlbHkgZXhwb25lbnRpYWwgKi9cblx0ZnVuY3Rpb24gbGFyZ2VfZXhwKHYpIHtcblx0XHR2YXIgbyA9IHN0cmlwX2RlY2ltYWwodi50b0ZpeGVkKDExKSk7XG5cdFx0cmV0dXJuIChvLmxlbmd0aCA+ICh2PDA/MTI6MTEpIHx8IG8gPT09IFwiMFwiIHx8IG8gPT09IFwiLTBcIikgPyB2LnRvUHJlY2lzaW9uKDYpIDogbztcblx0fVxuXG5cdGZ1bmN0aW9uIGdlbmVyYWxfZm10X251bV9iYXNlKHYpIHtcblx0XHR2YXIgViA9IE1hdGguZmxvb3IoTWF0aC5sb2coTWF0aC5hYnModikpKk1hdGguTE9HMTBFKSwgbztcblxuXHRcdGlmKFYgPj0gLTQgJiYgViA8PSAtMSkgbyA9IHYudG9QcmVjaXNpb24oMTArVik7XG5cdFx0ZWxzZSBpZihNYXRoLmFicyhWKSA8PSA5KSBvID0gc21hbGxfZXhwKHYpO1xuXHRcdGVsc2UgaWYoViA9PT0gMTApIG8gPSB2LnRvRml4ZWQoMTApLnN1YnN0cigwLDEyKTtcblx0XHRlbHNlIG8gPSBsYXJnZV9leHAodik7XG5cblx0XHRyZXR1cm4gc3RyaXBfZGVjaW1hbChub3JtYWxpemVfZXhwKG8udG9VcHBlckNhc2UoKSkpO1xuXHR9XG5cblx0cmV0dXJuIGdlbmVyYWxfZm10X251bV9iYXNlO1xufSkoKTtcblNTRi5fZ2VuZXJhbF9udW0gPSBnZW5lcmFsX2ZtdF9udW07XG5cbi8qXG5cdFwiR2VuZXJhbFwiIHJ1bGVzOlxuXHQtIHRleHQgaXMgcGFzc2VkIHRocm91Z2ggKFwiQFwiKVxuXHQtIGJvb2xlYW5zIGFyZSByZW5kZXJlZCBhcyBUUlVFL0ZBTFNFXG5cdC0gXCJ1cCB0byAxMSBjaGFyYWN0ZXJzXCIgZGlzcGxheWVkIGZvciBudW1iZXJzXG5cdC0gRGVmYXVsdCBkYXRlIGZvcm1hdCAoY29kZSAxNCkgdXNlZCBmb3IgRGF0ZXNcblxuXHRUT0RPOiB0ZWNobmljYWxseSB0aGUgZGlzcGxheSBkZXBlbmRzIG9uIHRoZSB3aWR0aCBvZiB0aGUgY2VsbFxuKi9cbmZ1bmN0aW9uIGdlbmVyYWxfZm10KHYsIG9wdHMpIHtcblx0c3dpdGNoKHR5cGVvZiB2KSB7XG5cdFx0Y2FzZSAnc3RyaW5nJzogcmV0dXJuIHY7XG5cdFx0Y2FzZSAnYm9vbGVhbic6IHJldHVybiB2ID8gXCJUUlVFXCIgOiBcIkZBTFNFXCI7XG5cdFx0Y2FzZSAnbnVtYmVyJzogcmV0dXJuICh2fDApID09PSB2ID8gdi50b1N0cmluZygxMCkgOiBnZW5lcmFsX2ZtdF9udW0odik7XG5cdFx0Y2FzZSAndW5kZWZpbmVkJzogcmV0dXJuIFwiXCI7XG5cdFx0Y2FzZSAnb2JqZWN0Jzpcblx0XHRcdGlmKHYgPT0gbnVsbCkgcmV0dXJuIFwiXCI7XG5cdFx0XHRpZih2IGluc3RhbmNlb2YgRGF0ZSkgcmV0dXJuIGZvcm1hdCgxNCwgZGF0ZW51bV9sb2NhbCh2LCBvcHRzICYmIG9wdHMuZGF0ZTE5MDQpLCBvcHRzKTtcblx0fVxuXHR0aHJvdyBuZXcgRXJyb3IoXCJ1bnN1cHBvcnRlZCB2YWx1ZSBpbiBHZW5lcmFsIGZvcm1hdDogXCIgKyB2KTtcbn1cblNTRi5fZ2VuZXJhbCA9IGdlbmVyYWxfZm10O1xuZnVuY3Rpb24gZml4X2hpanJpKGRhdGUsIG8pIHtcbiAgLyogVE9ETzogcHJvcGVybHkgYWRqdXN0IHkvbS9kIGFuZCAgKi9cbiAgb1swXSAtPSA1ODE7XG4gIHZhciBkb3cgPSBkYXRlLmdldERheSgpO1xuICBpZihkYXRlIDwgNjApIGRvdyA9IChkb3cgKyA2KSAlIDc7XG4gIHJldHVybiBkb3c7XG59XG4vL3ZhciBUSEFJX0RJR0lUUyA9IFwiXFx1MEU1MFxcdTBFNTFcXHUwRTUyXFx1MEU1M1xcdTBFNTRcXHUwRTU1XFx1MEU1NlxcdTBFNTdcXHUwRTU4XFx1MEU1OVwiLnNwbGl0KFwiXCIpO1xuLypqc2hpbnQgLVcwODYgKi9cbmZ1bmN0aW9uIHdyaXRlX2RhdGUodHlwZSwgZm10LCB2YWwsIHNzMCkge1xuXHR2YXIgbz1cIlwiLCBzcz0wLCB0dD0wLCB5ID0gdmFsLnksIG91dCwgb3V0bCA9IDA7XG5cdHN3aXRjaCh0eXBlKSB7XG5cdFx0Y2FzZSA5ODogLyogJ2InIGJ1ZGRoaXN0IHllYXIgKi9cblx0XHRcdHkgPSB2YWwueSArIDU0Mztcblx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRjYXNlIDEyMTogLyogJ3knIHllYXIgKi9cblx0XHRzd2l0Y2goZm10Lmxlbmd0aCkge1xuXHRcdFx0Y2FzZSAxOiBjYXNlIDI6IG91dCA9IHkgJSAxMDA7IG91dGwgPSAyOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IG91dCA9IHkgJSAxMDAwMDsgb3V0bCA9IDQ7IGJyZWFrO1xuXHRcdH0gYnJlYWs7XG5cdFx0Y2FzZSAxMDk6IC8qICdtJyBtb250aCAqL1xuXHRcdHN3aXRjaChmbXQubGVuZ3RoKSB7XG5cdFx0XHRjYXNlIDE6IGNhc2UgMjogb3V0ID0gdmFsLm07IG91dGwgPSBmbXQubGVuZ3RoOyBicmVhaztcblx0XHRcdGNhc2UgMzogcmV0dXJuIG1vbnRoc1t2YWwubS0xXVsxXTtcblx0XHRcdGNhc2UgNTogcmV0dXJuIG1vbnRoc1t2YWwubS0xXVswXTtcblx0XHRcdGRlZmF1bHQ6IHJldHVybiBtb250aHNbdmFsLm0tMV1bMl07XG5cdFx0fSBicmVhaztcblx0XHRjYXNlIDEwMDogLyogJ2QnIGRheSAqL1xuXHRcdHN3aXRjaChmbXQubGVuZ3RoKSB7XG5cdFx0XHRjYXNlIDE6IGNhc2UgMjogb3V0ID0gdmFsLmQ7IG91dGwgPSBmbXQubGVuZ3RoOyBicmVhaztcblx0XHRcdGNhc2UgMzogcmV0dXJuIGRheXNbdmFsLnFdWzBdO1xuXHRcdFx0ZGVmYXVsdDogcmV0dXJuIGRheXNbdmFsLnFdWzFdO1xuXHRcdH0gYnJlYWs7XG5cdFx0Y2FzZSAxMDQ6IC8qICdoJyAxMi1ob3VyICovXG5cdFx0c3dpdGNoKGZtdC5sZW5ndGgpIHtcblx0XHRcdGNhc2UgMTogY2FzZSAyOiBvdXQgPSAxKyh2YWwuSCsxMSklMTI7IG91dGwgPSBmbXQubGVuZ3RoOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRocm93ICdiYWQgaG91ciBmb3JtYXQ6ICcgKyBmbXQ7XG5cdFx0fSBicmVhaztcblx0XHRjYXNlIDcyOiAvKiAnSCcgMjQtaG91ciAqL1xuXHRcdHN3aXRjaChmbXQubGVuZ3RoKSB7XG5cdFx0XHRjYXNlIDE6IGNhc2UgMjogb3V0ID0gdmFsLkg7IG91dGwgPSBmbXQubGVuZ3RoOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRocm93ICdiYWQgaG91ciBmb3JtYXQ6ICcgKyBmbXQ7XG5cdFx0fSBicmVhaztcblx0XHRjYXNlIDc3OiAvKiAnTScgbWludXRlcyAqL1xuXHRcdHN3aXRjaChmbXQubGVuZ3RoKSB7XG5cdFx0XHRjYXNlIDE6IGNhc2UgMjogb3V0ID0gdmFsLk07IG91dGwgPSBmbXQubGVuZ3RoOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRocm93ICdiYWQgbWludXRlIGZvcm1hdDogJyArIGZtdDtcblx0XHR9IGJyZWFrO1xuXHRcdGNhc2UgMTE1OiAvKiAncycgc2Vjb25kcyAqL1xuXHRcdFx0aWYoZm10ICE9ICdzJyAmJiBmbXQgIT0gJ3NzJyAmJiBmbXQgIT0gJy4wJyAmJiBmbXQgIT0gJy4wMCcgJiYgZm10ICE9ICcuMDAwJykgdGhyb3cgJ2JhZCBzZWNvbmQgZm9ybWF0OiAnICsgZm10O1xuXHRcdFx0aWYodmFsLnUgPT09IDAgJiYgKGZtdCA9PSBcInNcIiB8fCBmbXQgPT0gXCJzc1wiKSkgcmV0dXJuIHBhZDAodmFsLlMsIGZtdC5sZW5ndGgpO1xuaWYoc3MwID49IDIpIHR0ID0gc3MwID09PSAzID8gMTAwMCA6IDEwMDtcblx0XHRcdGVsc2UgdHQgPSBzczAgPT09IDEgPyAxMCA6IDE7XG5cdFx0XHRzcyA9IE1hdGgucm91bmQoKHR0KSoodmFsLlMgKyB2YWwudSkpO1xuXHRcdFx0aWYoc3MgPj0gNjAqdHQpIHNzID0gMDtcblx0XHRcdGlmKGZtdCA9PT0gJ3MnKSByZXR1cm4gc3MgPT09IDAgPyBcIjBcIiA6IFwiXCIrc3MvdHQ7XG5cdFx0XHRvID0gcGFkMChzcywyICsgc3MwKTtcblx0XHRcdGlmKGZtdCA9PT0gJ3NzJykgcmV0dXJuIG8uc3Vic3RyKDAsMik7XG5cdFx0XHRyZXR1cm4gXCIuXCIgKyBvLnN1YnN0cigyLGZtdC5sZW5ndGgtMSk7XG5cdFx0Y2FzZSA5MDogLyogJ1onIGFic29sdXRlIHRpbWUgKi9cblx0XHRzd2l0Y2goZm10KSB7XG5cdFx0XHRjYXNlICdbaF0nOiBjYXNlICdbaGhdJzogb3V0ID0gdmFsLkQqMjQrdmFsLkg7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnW21dJzogY2FzZSAnW21tXSc6IG91dCA9ICh2YWwuRCoyNCt2YWwuSCkqNjArdmFsLk07IGJyZWFrO1xuXHRcdFx0Y2FzZSAnW3NdJzogY2FzZSAnW3NzXSc6IG91dCA9ICgodmFsLkQqMjQrdmFsLkgpKjYwK3ZhbC5NKSo2MCtNYXRoLnJvdW5kKHZhbC5TK3ZhbC51KTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyAnYmFkIGFic3RpbWUgZm9ybWF0OiAnICsgZm10O1xuXHRcdH0gb3V0bCA9IGZtdC5sZW5ndGggPT09IDMgPyAxIDogMjsgYnJlYWs7XG5cdFx0Y2FzZSAxMDE6IC8qICdlJyBlcmEgKi9cblx0XHRcdG91dCA9IHk7IG91dGwgPSAxOyBicmVhaztcblx0fVxuXHR2YXIgb3V0c3RyID0gb3V0bCA+IDAgPyBwYWQwKG91dCwgb3V0bCkgOiBcIlwiO1xuXHRyZXR1cm4gb3V0c3RyO1xufVxuLypqc2hpbnQgK1cwODYgKi9cbmZ1bmN0aW9uIGNvbW1haWZ5KHMpIHtcblx0dmFyIHcgPSAzO1xuXHRpZihzLmxlbmd0aCA8PSB3KSByZXR1cm4gcztcblx0dmFyIGogPSAocy5sZW5ndGggJSB3KSwgbyA9IHMuc3Vic3RyKDAsaik7XG5cdGZvcig7IGohPXMubGVuZ3RoOyBqKz13KSBvKz0oby5sZW5ndGggPiAwID8gXCIsXCIgOiBcIlwiKSArIHMuc3Vic3RyKGosdyk7XG5cdHJldHVybiBvO1xufVxudmFyIHdyaXRlX251bSA9IChmdW5jdGlvbiBtYWtlX3dyaXRlX251bSgpe1xudmFyIHBjdDEgPSAvJS9nO1xuZnVuY3Rpb24gd3JpdGVfbnVtX3BjdCh0eXBlLCBmbXQsIHZhbCl7XG5cdHZhciBzZm10ID0gZm10LnJlcGxhY2UocGN0MSxcIlwiKSwgbXVsID0gZm10Lmxlbmd0aCAtIHNmbXQubGVuZ3RoO1xuXHRyZXR1cm4gd3JpdGVfbnVtKHR5cGUsIHNmbXQsIHZhbCAqIE1hdGgucG93KDEwLDIqbXVsKSkgKyBmaWxsKFwiJVwiLG11bCk7XG59XG5mdW5jdGlvbiB3cml0ZV9udW1fY20odHlwZSwgZm10LCB2YWwpe1xuXHR2YXIgaWR4ID0gZm10Lmxlbmd0aCAtIDE7XG5cdHdoaWxlKGZtdC5jaGFyQ29kZUF0KGlkeC0xKSA9PT0gNDQpIC0taWR4O1xuXHRyZXR1cm4gd3JpdGVfbnVtKHR5cGUsIGZtdC5zdWJzdHIoMCxpZHgpLCB2YWwgLyBNYXRoLnBvdygxMCwzKihmbXQubGVuZ3RoLWlkeCkpKTtcbn1cbmZ1bmN0aW9uIHdyaXRlX251bV9leHAoZm10LCB2YWwpe1xuXHR2YXIgbztcblx0dmFyIGlkeCA9IGZtdC5pbmRleE9mKFwiRVwiKSAtIGZtdC5pbmRleE9mKFwiLlwiKSAtIDE7XG5cdGlmKGZtdC5tYXRjaCgvXiMrMC4wRVxcKzAkLykpIHtcblx0XHRpZih2YWwgPT0gMCkgcmV0dXJuIFwiMC4wRSswXCI7XG5cdFx0ZWxzZSBpZih2YWwgPCAwKSByZXR1cm4gXCItXCIgKyB3cml0ZV9udW1fZXhwKGZtdCwgLXZhbCk7XG5cdFx0dmFyIHBlcmlvZCA9IGZtdC5pbmRleE9mKFwiLlwiKTsgaWYocGVyaW9kID09PSAtMSkgcGVyaW9kPWZtdC5pbmRleE9mKCdFJyk7XG5cdFx0dmFyIGVlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWwpKk1hdGguTE9HMTBFKSVwZXJpb2Q7XG5cdFx0aWYoZWUgPCAwKSBlZSArPSBwZXJpb2Q7XG5cdFx0byA9ICh2YWwvTWF0aC5wb3coMTAsZWUpKS50b1ByZWNpc2lvbihpZHgrMSsocGVyaW9kK2VlKSVwZXJpb2QpO1xuXHRcdGlmKG8uaW5kZXhPZihcImVcIikgPT09IC0xKSB7XG5cdFx0XHR2YXIgZmFrZWUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbCkqTWF0aC5MT0cxMEUpO1xuXHRcdFx0aWYoby5pbmRleE9mKFwiLlwiKSA9PT0gLTEpIG8gPSBvLmNoYXJBdCgwKSArIFwiLlwiICsgby5zdWJzdHIoMSkgKyBcIkUrXCIgKyAoZmFrZWUgLSBvLmxlbmd0aCtlZSk7XG5cdFx0XHRlbHNlIG8gKz0gXCJFK1wiICsgKGZha2VlIC0gZWUpO1xuXHRcdFx0d2hpbGUoby5zdWJzdHIoMCwyKSA9PT0gXCIwLlwiKSB7XG5cdFx0XHRcdG8gPSBvLmNoYXJBdCgwKSArIG8uc3Vic3RyKDIscGVyaW9kKSArIFwiLlwiICsgby5zdWJzdHIoMitwZXJpb2QpO1xuXHRcdFx0XHRvID0gby5yZXBsYWNlKC9eMCsoWzEtOV0pLyxcIiQxXCIpLnJlcGxhY2UoL14wK1xcLi8sXCIwLlwiKTtcblx0XHRcdH1cblx0XHRcdG8gPSBvLnJlcGxhY2UoL1xcKy0vLFwiLVwiKTtcblx0XHR9XG5cdFx0byA9IG8ucmVwbGFjZSgvXihbKy1dPykoXFxkKilcXC4oXFxkKilbRWVdLyxmdW5jdGlvbigkJCwkMSwkMiwkMykgeyByZXR1cm4gJDEgKyAkMiArICQzLnN1YnN0cigwLChwZXJpb2QrZWUpJXBlcmlvZCkgKyBcIi5cIiArICQzLnN1YnN0cihlZSkgKyBcIkVcIjsgfSk7XG5cdH0gZWxzZSBvID0gdmFsLnRvRXhwb25lbnRpYWwoaWR4KTtcblx0aWYoZm10Lm1hdGNoKC9FXFwrMDAkLykgJiYgby5tYXRjaCgvZVsrLV1cXGQkLykpIG8gPSBvLnN1YnN0cigwLG8ubGVuZ3RoLTEpICsgXCIwXCIgKyBvLmNoYXJBdChvLmxlbmd0aC0xKTtcblx0aWYoZm10Lm1hdGNoKC9FXFwtLykgJiYgby5tYXRjaCgvZVxcKy8pKSBvID0gby5yZXBsYWNlKC9lXFwrLyxcImVcIik7XG5cdHJldHVybiBvLnJlcGxhY2UoXCJlXCIsXCJFXCIpO1xufVxudmFyIGZyYWMxID0gLyMgKFxcPyspKCA/KVxcLyggPykoXFxkKykvO1xuZnVuY3Rpb24gd3JpdGVfbnVtX2YxKHIsIGF2YWwsIHNpZ24pIHtcblx0dmFyIGRlbiA9IHBhcnNlSW50KHJbNF0sMTApLCByciA9IE1hdGgucm91bmQoYXZhbCAqIGRlbiksIGJhc2UgPSBNYXRoLmZsb29yKHJyL2Rlbik7XG5cdHZhciBteW4gPSAocnIgLSBiYXNlKmRlbiksIG15ZCA9IGRlbjtcblx0cmV0dXJuIHNpZ24gKyAoYmFzZSA9PT0gMCA/IFwiXCIgOiBcIlwiK2Jhc2UpICsgXCIgXCIgKyAobXluID09PSAwID8gZmlsbChcIiBcIiwgclsxXS5sZW5ndGggKyAxICsgcls0XS5sZW5ndGgpIDogcGFkXyhteW4sclsxXS5sZW5ndGgpICsgclsyXSArIFwiL1wiICsgclszXSArIHBhZDAobXlkLHJbNF0ubGVuZ3RoKSk7XG59XG5mdW5jdGlvbiB3cml0ZV9udW1fZjIociwgYXZhbCwgc2lnbikge1xuXHRyZXR1cm4gc2lnbiArIChhdmFsID09PSAwID8gXCJcIiA6IFwiXCIrYXZhbCkgKyBmaWxsKFwiIFwiLCByWzFdLmxlbmd0aCArIDIgKyByWzRdLmxlbmd0aCk7XG59XG52YXIgZGVjMSA9IC9eIyowKlxcLihbMCNdKykvO1xudmFyIGNsb3NlcGFyZW4gPSAvXFwpLipbMCNdLztcbnZhciBwaG9uZSA9IC9cXCgjIyNcXCkgIyMjXFxcXD8tIyMjIy87XG5mdW5jdGlvbiBoYXNocShzdHIpIHtcblx0dmFyIG8gPSBcIlwiLCBjYztcblx0Zm9yKHZhciBpID0gMDsgaSAhPSBzdHIubGVuZ3RoOyArK2kpIHN3aXRjaCgoY2M9c3RyLmNoYXJDb2RlQXQoaSkpKSB7XG5cdFx0Y2FzZSAzNTogYnJlYWs7XG5cdFx0Y2FzZSA2Mzogbys9IFwiIFwiOyBicmVhaztcblx0XHRjYXNlIDQ4OiBvKz0gXCIwXCI7IGJyZWFrO1xuXHRcdGRlZmF1bHQ6IG8rPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNjKTtcblx0fVxuXHRyZXR1cm4gbztcbn1cbmZ1bmN0aW9uIHJuZCh2YWwsIGQpIHsgdmFyIGRkID0gTWF0aC5wb3coMTAsZCk7IHJldHVybiBcIlwiKyhNYXRoLnJvdW5kKHZhbCAqIGRkKS9kZCk7IH1cbmZ1bmN0aW9uIGRlYyh2YWwsIGQpIHtcblx0dmFyIF9mcmFjID0gdmFsIC0gTWF0aC5mbG9vcih2YWwpLCBkZCA9IE1hdGgucG93KDEwLGQpO1xuXHRpZiAoZCA8ICgnJyArIE1hdGgucm91bmQoX2ZyYWMgKiBkZCkpLmxlbmd0aCkgcmV0dXJuIDA7XG5cdHJldHVybiBNYXRoLnJvdW5kKF9mcmFjICogZGQpO1xufVxuZnVuY3Rpb24gY2FycnkodmFsLCBkKSB7XG5cdGlmIChkIDwgKCcnICsgTWF0aC5yb3VuZCgodmFsLU1hdGguZmxvb3IodmFsKSkqTWF0aC5wb3coMTAsZCkpKS5sZW5ndGgpIHtcblx0XHRyZXR1cm4gMTtcblx0fVxuXHRyZXR1cm4gMDtcbn1cbmZ1bmN0aW9uIGZscih2YWwpIHtcblx0aWYodmFsIDwgMjE0NzQ4MzY0NyAmJiB2YWwgPiAtMjE0NzQ4MzY0OCkgcmV0dXJuIFwiXCIrKHZhbCA+PSAwID8gKHZhbHwwKSA6ICh2YWwtMXwwKSk7XG5cdHJldHVybiBcIlwiK01hdGguZmxvb3IodmFsKTtcbn1cbmZ1bmN0aW9uIHdyaXRlX251bV9mbHQodHlwZSwgZm10LCB2YWwpIHtcblx0aWYodHlwZS5jaGFyQ29kZUF0KDApID09PSA0MCAmJiAhZm10Lm1hdGNoKGNsb3NlcGFyZW4pKSB7XG5cdFx0dmFyIGZmbXQgPSBmbXQucmVwbGFjZSgvXFwoICovLFwiXCIpLnJlcGxhY2UoLyBcXCkvLFwiXCIpLnJlcGxhY2UoL1xcKS8sXCJcIik7XG5cdFx0aWYodmFsID49IDApIHJldHVybiB3cml0ZV9udW1fZmx0KCduJywgZmZtdCwgdmFsKTtcblx0XHRyZXR1cm4gJygnICsgd3JpdGVfbnVtX2ZsdCgnbicsIGZmbXQsIC12YWwpICsgJyknO1xuXHR9XG5cdGlmKGZtdC5jaGFyQ29kZUF0KGZtdC5sZW5ndGggLSAxKSA9PT0gNDQpIHJldHVybiB3cml0ZV9udW1fY20odHlwZSwgZm10LCB2YWwpO1xuXHRpZihmbXQuaW5kZXhPZignJScpICE9PSAtMSkgcmV0dXJuIHdyaXRlX251bV9wY3QodHlwZSwgZm10LCB2YWwpO1xuXHRpZihmbXQuaW5kZXhPZignRScpICE9PSAtMSkgcmV0dXJuIHdyaXRlX251bV9leHAoZm10LCB2YWwpO1xuXHRpZihmbXQuY2hhckNvZGVBdCgwKSA9PT0gMzYpIHJldHVybiBcIiRcIit3cml0ZV9udW1fZmx0KHR5cGUsZm10LnN1YnN0cihmbXQuY2hhckF0KDEpPT0nICc/MjoxKSx2YWwpO1xuXHR2YXIgbztcblx0dmFyIHIsIHJpLCBmZiwgYXZhbCA9IE1hdGguYWJzKHZhbCksIHNpZ24gPSB2YWwgPCAwID8gXCItXCIgOiBcIlwiO1xuXHRpZihmbXQubWF0Y2goL14wMCskLykpIHJldHVybiBzaWduICsgcGFkMHIoYXZhbCxmbXQubGVuZ3RoKTtcblx0aWYoZm10Lm1hdGNoKC9eWyM/XSskLykpIHtcblx0XHRvID0gcGFkMHIodmFsLDApOyBpZihvID09PSBcIjBcIikgbyA9IFwiXCI7XG5cdFx0cmV0dXJuIG8ubGVuZ3RoID4gZm10Lmxlbmd0aCA/IG8gOiBoYXNocShmbXQuc3Vic3RyKDAsZm10Lmxlbmd0aC1vLmxlbmd0aCkpICsgbztcblx0fVxuXHRpZigociA9IGZtdC5tYXRjaChmcmFjMSkpKSByZXR1cm4gd3JpdGVfbnVtX2YxKHIsIGF2YWwsIHNpZ24pO1xuXHRpZihmbXQubWF0Y2goL14jKzArJC8pKSByZXR1cm4gc2lnbiArIHBhZDByKGF2YWwsZm10Lmxlbmd0aCAtIGZtdC5pbmRleE9mKFwiMFwiKSk7XG5cdGlmKChyID0gZm10Lm1hdGNoKGRlYzEpKSkge1xuXHRcdG8gPSBybmQodmFsLCByWzFdLmxlbmd0aCkucmVwbGFjZSgvXihbXlxcLl0rKSQvLFwiJDEuXCIraGFzaHEoclsxXSkpLnJlcGxhY2UoL1xcLiQvLFwiLlwiK2hhc2hxKHJbMV0pKS5yZXBsYWNlKC9cXC4oXFxkKikkLyxmdW5jdGlvbigkJCwgJDEpIHsgcmV0dXJuIFwiLlwiICsgJDEgKyBmaWxsKFwiMFwiLCBoYXNocShyWzFdKS5sZW5ndGgtJDEubGVuZ3RoKTsgfSk7XG5cdFx0cmV0dXJuIGZtdC5pbmRleE9mKFwiMC5cIikgIT09IC0xID8gbyA6IG8ucmVwbGFjZSgvXjBcXC4vLFwiLlwiKTtcblx0fVxuXHRmbXQgPSBmbXQucmVwbGFjZSgvXiMrKFswLl0pLywgXCIkMVwiKTtcblx0aWYoKHIgPSBmbXQubWF0Y2goL14oMCopXFwuKCMqKSQvKSkpIHtcblx0XHRyZXR1cm4gc2lnbiArIHJuZChhdmFsLCByWzJdLmxlbmd0aCkucmVwbGFjZSgvXFwuKFxcZCpbMS05XSkwKiQvLFwiLiQxXCIpLnJlcGxhY2UoL14oLT9cXGQqKSQvLFwiJDEuXCIpLnJlcGxhY2UoL14wXFwuLyxyWzFdLmxlbmd0aD9cIjAuXCI6XCIuXCIpO1xuXHR9XG5cdGlmKChyID0gZm10Lm1hdGNoKC9eI3sxLDN9LCMjMChcXC4/KSQvKSkpIHJldHVybiBzaWduICsgY29tbWFpZnkocGFkMHIoYXZhbCwwKSk7XG5cdGlmKChyID0gZm10Lm1hdGNoKC9eIywjIzBcXC4oWyMwXSowKSQvKSkpIHtcblx0XHRyZXR1cm4gdmFsIDwgMCA/IFwiLVwiICsgd3JpdGVfbnVtX2ZsdCh0eXBlLCBmbXQsIC12YWwpIDogY29tbWFpZnkoXCJcIisoTWF0aC5mbG9vcih2YWwpICsgY2FycnkodmFsLCByWzFdLmxlbmd0aCkpKSArIFwiLlwiICsgcGFkMChkZWModmFsLCByWzFdLmxlbmd0aCksclsxXS5sZW5ndGgpO1xuXHR9XG5cdGlmKChyID0gZm10Lm1hdGNoKC9eIywjKiwjMC8pKSkgcmV0dXJuIHdyaXRlX251bV9mbHQodHlwZSxmbXQucmVwbGFjZSgvXiMsIyosLyxcIlwiKSx2YWwpO1xuXHRpZigociA9IGZtdC5tYXRjaCgvXihbMCNdKykoXFxcXD8tKFswI10rKSkrJC8pKSkge1xuXHRcdG8gPSBfc3RycmV2KHdyaXRlX251bV9mbHQodHlwZSwgZm10LnJlcGxhY2UoL1tcXFxcLV0vZyxcIlwiKSwgdmFsKSk7XG5cdFx0cmkgPSAwO1xuXHRcdHJldHVybiBfc3RycmV2KF9zdHJyZXYoZm10LnJlcGxhY2UoL1xcXFwvZyxcIlwiKSkucmVwbGFjZSgvWzAjXS9nLGZ1bmN0aW9uKHgpe3JldHVybiByaTxvLmxlbmd0aD9vLmNoYXJBdChyaSsrKTp4PT09JzAnPycwJzpcIlwiO30pKTtcblx0fVxuXHRpZihmbXQubWF0Y2gocGhvbmUpKSB7XG5cdFx0byA9IHdyaXRlX251bV9mbHQodHlwZSwgXCIjIyMjIyMjIyMjXCIsIHZhbCk7XG5cdFx0cmV0dXJuIFwiKFwiICsgby5zdWJzdHIoMCwzKSArIFwiKSBcIiArIG8uc3Vic3RyKDMsIDMpICsgXCItXCIgKyBvLnN1YnN0cig2KTtcblx0fVxuXHR2YXIgb2EgPSBcIlwiO1xuXHRpZigociA9IGZtdC5tYXRjaCgvXihbIzA/XSspKCA/KVxcLyggPykoWyMwP10rKS8pKSkge1xuXHRcdHJpID0gTWF0aC5taW4ocls0XS5sZW5ndGgsNyk7XG5cdFx0ZmYgPSBmcmFjKGF2YWwsIE1hdGgucG93KDEwLHJpKS0xLCBmYWxzZSk7XG5cdFx0byA9IFwiXCIgKyBzaWduO1xuXHRcdG9hID0gd3JpdGVfbnVtKFwiblwiLCByWzFdLCBmZlsxXSk7XG5cdFx0aWYob2EuY2hhckF0KG9hLmxlbmd0aC0xKSA9PSBcIiBcIikgb2EgPSBvYS5zdWJzdHIoMCxvYS5sZW5ndGgtMSkgKyBcIjBcIjtcblx0XHRvICs9IG9hICsgclsyXSArIFwiL1wiICsgclszXTtcblx0XHRvYSA9IHJwYWRfKGZmWzJdLHJpKTtcblx0XHRpZihvYS5sZW5ndGggPCByWzRdLmxlbmd0aCkgb2EgPSBoYXNocShyWzRdLnN1YnN0cihyWzRdLmxlbmd0aC1vYS5sZW5ndGgpKSArIG9hO1xuXHRcdG8gKz0gb2E7XG5cdFx0cmV0dXJuIG87XG5cdH1cblx0aWYoKHIgPSBmbXQubWF0Y2goL14jIChbIzA/XSspKCA/KVxcLyggPykoWyMwP10rKS8pKSkge1xuXHRcdHJpID0gTWF0aC5taW4oTWF0aC5tYXgoclsxXS5sZW5ndGgsIHJbNF0ubGVuZ3RoKSw3KTtcblx0XHRmZiA9IGZyYWMoYXZhbCwgTWF0aC5wb3coMTAscmkpLTEsIHRydWUpO1xuXHRcdHJldHVybiBzaWduICsgKGZmWzBdfHwoZmZbMV0gPyBcIlwiIDogXCIwXCIpKSArIFwiIFwiICsgKGZmWzFdID8gcGFkXyhmZlsxXSxyaSkgKyByWzJdICsgXCIvXCIgKyByWzNdICsgcnBhZF8oZmZbMl0scmkpOiBmaWxsKFwiIFwiLCAyKnJpKzEgKyByWzJdLmxlbmd0aCArIHJbM10ubGVuZ3RoKSk7XG5cdH1cblx0aWYoKHIgPSBmbXQubWF0Y2goL15bIzA/XSskLykpKSB7XG5cdFx0byA9IHBhZDByKHZhbCwgMCk7XG5cdFx0aWYoZm10Lmxlbmd0aCA8PSBvLmxlbmd0aCkgcmV0dXJuIG87XG5cdFx0cmV0dXJuIGhhc2hxKGZtdC5zdWJzdHIoMCxmbXQubGVuZ3RoLW8ubGVuZ3RoKSkgKyBvO1xuXHR9XG5cdGlmKChyID0gZm10Lm1hdGNoKC9eKFsjMD9dKylcXC4oWyMwXSspJC8pKSkge1xuXHRcdG8gPSBcIlwiICsgdmFsLnRvRml4ZWQoTWF0aC5taW4oclsyXS5sZW5ndGgsMTApKS5yZXBsYWNlKC8oW14wXSkwKyQvLFwiJDFcIik7XG5cdFx0cmkgPSBvLmluZGV4T2YoXCIuXCIpO1xuXHRcdHZhciBscmVzID0gZm10LmluZGV4T2YoXCIuXCIpIC0gcmksIHJyZXMgPSBmbXQubGVuZ3RoIC0gby5sZW5ndGggLSBscmVzO1xuXHRcdHJldHVybiBoYXNocShmbXQuc3Vic3RyKDAsbHJlcykgKyBvICsgZm10LnN1YnN0cihmbXQubGVuZ3RoLXJyZXMpKTtcblx0fVxuXHRpZigociA9IGZtdC5tYXRjaCgvXjAwLDAwMFxcLihbIzBdKjApJC8pKSkge1xuXHRcdHJpID0gZGVjKHZhbCwgclsxXS5sZW5ndGgpO1xuXHRcdHJldHVybiB2YWwgPCAwID8gXCItXCIgKyB3cml0ZV9udW1fZmx0KHR5cGUsIGZtdCwgLXZhbCkgOiBjb21tYWlmeShmbHIodmFsKSkucmVwbGFjZSgvXlxcZCxcXGR7M30kLyxcIjAkJlwiKS5yZXBsYWNlKC9eXFxkKiQvLGZ1bmN0aW9uKCQkKSB7IHJldHVybiBcIjAwLFwiICsgKCQkLmxlbmd0aCA8IDMgPyBwYWQwKDAsMy0kJC5sZW5ndGgpIDogXCJcIikgKyAkJDsgfSkgKyBcIi5cIiArIHBhZDAocmksclsxXS5sZW5ndGgpO1xuXHR9XG5cdHN3aXRjaChmbXQpIHtcblx0XHRjYXNlIFwiIyMjLCMjMC4wMFwiOiByZXR1cm4gd3JpdGVfbnVtX2ZsdCh0eXBlLCBcIiMsIyMwLjAwXCIsIHZhbCk7XG5cdFx0Y2FzZSBcIiMjIywjIyNcIjpcblx0XHRjYXNlIFwiIyMsIyMjXCI6XG5cdFx0Y2FzZSBcIiMsIyMjXCI6IHZhciB4ID0gY29tbWFpZnkocGFkMHIoYXZhbCwwKSk7IHJldHVybiB4ICE9PSBcIjBcIiA/IHNpZ24gKyB4IDogXCJcIjtcblx0XHRjYXNlIFwiIyMjLCMjIy4wMFwiOiByZXR1cm4gd3JpdGVfbnVtX2ZsdCh0eXBlLCBcIiMjIywjIzAuMDBcIix2YWwpLnJlcGxhY2UoL14wXFwuLyxcIi5cIik7XG5cdFx0Y2FzZSBcIiMsIyMjLjAwXCI6IHJldHVybiB3cml0ZV9udW1fZmx0KHR5cGUsIFwiIywjIzAuMDBcIix2YWwpLnJlcGxhY2UoL14wXFwuLyxcIi5cIik7XG5cdFx0ZGVmYXVsdDpcblx0fVxuXHR0aHJvdyBuZXcgRXJyb3IoXCJ1bnN1cHBvcnRlZCBmb3JtYXQgfFwiICsgZm10ICsgXCJ8XCIpO1xufVxuZnVuY3Rpb24gd3JpdGVfbnVtX2NtMih0eXBlLCBmbXQsIHZhbCl7XG5cdHZhciBpZHggPSBmbXQubGVuZ3RoIC0gMTtcblx0d2hpbGUoZm10LmNoYXJDb2RlQXQoaWR4LTEpID09PSA0NCkgLS1pZHg7XG5cdHJldHVybiB3cml0ZV9udW0odHlwZSwgZm10LnN1YnN0cigwLGlkeCksIHZhbCAvIE1hdGgucG93KDEwLDMqKGZtdC5sZW5ndGgtaWR4KSkpO1xufVxuZnVuY3Rpb24gd3JpdGVfbnVtX3BjdDIodHlwZSwgZm10LCB2YWwpe1xuXHR2YXIgc2ZtdCA9IGZtdC5yZXBsYWNlKHBjdDEsXCJcIiksIG11bCA9IGZtdC5sZW5ndGggLSBzZm10Lmxlbmd0aDtcblx0cmV0dXJuIHdyaXRlX251bSh0eXBlLCBzZm10LCB2YWwgKiBNYXRoLnBvdygxMCwyKm11bCkpICsgZmlsbChcIiVcIixtdWwpO1xufVxuZnVuY3Rpb24gd3JpdGVfbnVtX2V4cDIoZm10LCB2YWwpe1xuXHR2YXIgbztcblx0dmFyIGlkeCA9IGZtdC5pbmRleE9mKFwiRVwiKSAtIGZtdC5pbmRleE9mKFwiLlwiKSAtIDE7XG5cdGlmKGZtdC5tYXRjaCgvXiMrMC4wRVxcKzAkLykpIHtcblx0XHRpZih2YWwgPT0gMCkgcmV0dXJuIFwiMC4wRSswXCI7XG5cdFx0ZWxzZSBpZih2YWwgPCAwKSByZXR1cm4gXCItXCIgKyB3cml0ZV9udW1fZXhwMihmbXQsIC12YWwpO1xuXHRcdHZhciBwZXJpb2QgPSBmbXQuaW5kZXhPZihcIi5cIik7IGlmKHBlcmlvZCA9PT0gLTEpIHBlcmlvZD1mbXQuaW5kZXhPZignRScpO1xuXHRcdHZhciBlZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsKSpNYXRoLkxPRzEwRSklcGVyaW9kO1xuXHRcdGlmKGVlIDwgMCkgZWUgKz0gcGVyaW9kO1xuXHRcdG8gPSAodmFsL01hdGgucG93KDEwLGVlKSkudG9QcmVjaXNpb24oaWR4KzErKHBlcmlvZCtlZSklcGVyaW9kKTtcblx0XHRpZighby5tYXRjaCgvW0VlXS8pKSB7XG5cdFx0XHR2YXIgZmFrZWUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbCkqTWF0aC5MT0cxMEUpO1xuXHRcdFx0aWYoby5pbmRleE9mKFwiLlwiKSA9PT0gLTEpIG8gPSBvLmNoYXJBdCgwKSArIFwiLlwiICsgby5zdWJzdHIoMSkgKyBcIkUrXCIgKyAoZmFrZWUgLSBvLmxlbmd0aCtlZSk7XG5cdFx0XHRlbHNlIG8gKz0gXCJFK1wiICsgKGZha2VlIC0gZWUpO1xuXHRcdFx0byA9IG8ucmVwbGFjZSgvXFwrLS8sXCItXCIpO1xuXHRcdH1cblx0XHRvID0gby5yZXBsYWNlKC9eKFsrLV0/KShcXGQqKVxcLihcXGQqKVtFZV0vLGZ1bmN0aW9uKCQkLCQxLCQyLCQzKSB7IHJldHVybiAkMSArICQyICsgJDMuc3Vic3RyKDAsKHBlcmlvZCtlZSklcGVyaW9kKSArIFwiLlwiICsgJDMuc3Vic3RyKGVlKSArIFwiRVwiOyB9KTtcblx0fSBlbHNlIG8gPSB2YWwudG9FeHBvbmVudGlhbChpZHgpO1xuXHRpZihmbXQubWF0Y2goL0VcXCswMCQvKSAmJiBvLm1hdGNoKC9lWystXVxcZCQvKSkgbyA9IG8uc3Vic3RyKDAsby5sZW5ndGgtMSkgKyBcIjBcIiArIG8uY2hhckF0KG8ubGVuZ3RoLTEpO1xuXHRpZihmbXQubWF0Y2goL0VcXC0vKSAmJiBvLm1hdGNoKC9lXFwrLykpIG8gPSBvLnJlcGxhY2UoL2VcXCsvLFwiZVwiKTtcblx0cmV0dXJuIG8ucmVwbGFjZShcImVcIixcIkVcIik7XG59XG5mdW5jdGlvbiB3cml0ZV9udW1faW50KHR5cGUsIGZtdCwgdmFsKSB7XG5cdGlmKHR5cGUuY2hhckNvZGVBdCgwKSA9PT0gNDAgJiYgIWZtdC5tYXRjaChjbG9zZXBhcmVuKSkge1xuXHRcdHZhciBmZm10ID0gZm10LnJlcGxhY2UoL1xcKCAqLyxcIlwiKS5yZXBsYWNlKC8gXFwpLyxcIlwiKS5yZXBsYWNlKC9cXCkvLFwiXCIpO1xuXHRcdGlmKHZhbCA+PSAwKSByZXR1cm4gd3JpdGVfbnVtX2ludCgnbicsIGZmbXQsIHZhbCk7XG5cdFx0cmV0dXJuICcoJyArIHdyaXRlX251bV9pbnQoJ24nLCBmZm10LCAtdmFsKSArICcpJztcblx0fVxuXHRpZihmbXQuY2hhckNvZGVBdChmbXQubGVuZ3RoIC0gMSkgPT09IDQ0KSByZXR1cm4gd3JpdGVfbnVtX2NtMih0eXBlLCBmbXQsIHZhbCk7XG5cdGlmKGZtdC5pbmRleE9mKCclJykgIT09IC0xKSByZXR1cm4gd3JpdGVfbnVtX3BjdDIodHlwZSwgZm10LCB2YWwpO1xuXHRpZihmbXQuaW5kZXhPZignRScpICE9PSAtMSkgcmV0dXJuIHdyaXRlX251bV9leHAyKGZtdCwgdmFsKTtcblx0aWYoZm10LmNoYXJDb2RlQXQoMCkgPT09IDM2KSByZXR1cm4gXCIkXCIrd3JpdGVfbnVtX2ludCh0eXBlLGZtdC5zdWJzdHIoZm10LmNoYXJBdCgxKT09JyAnPzI6MSksdmFsKTtcblx0dmFyIG87XG5cdHZhciByLCByaSwgZmYsIGF2YWwgPSBNYXRoLmFicyh2YWwpLCBzaWduID0gdmFsIDwgMCA/IFwiLVwiIDogXCJcIjtcblx0aWYoZm10Lm1hdGNoKC9eMDArJC8pKSByZXR1cm4gc2lnbiArIHBhZDAoYXZhbCxmbXQubGVuZ3RoKTtcblx0aWYoZm10Lm1hdGNoKC9eWyM/XSskLykpIHtcblx0XHRvID0gKFwiXCIrdmFsKTsgaWYodmFsID09PSAwKSBvID0gXCJcIjtcblx0XHRyZXR1cm4gby5sZW5ndGggPiBmbXQubGVuZ3RoID8gbyA6IGhhc2hxKGZtdC5zdWJzdHIoMCxmbXQubGVuZ3RoLW8ubGVuZ3RoKSkgKyBvO1xuXHR9XG5cdGlmKChyID0gZm10Lm1hdGNoKGZyYWMxKSkpIHJldHVybiB3cml0ZV9udW1fZjIociwgYXZhbCwgc2lnbik7XG5cdGlmKGZtdC5tYXRjaCgvXiMrMCskLykpIHJldHVybiBzaWduICsgcGFkMChhdmFsLGZtdC5sZW5ndGggLSBmbXQuaW5kZXhPZihcIjBcIikpO1xuXHRpZigociA9IGZtdC5tYXRjaChkZWMxKSkpIHtcbm8gPSAoXCJcIit2YWwpLnJlcGxhY2UoL14oW15cXC5dKykkLyxcIiQxLlwiK2hhc2hxKHJbMV0pKS5yZXBsYWNlKC9cXC4kLyxcIi5cIitoYXNocShyWzFdKSk7XG5cdFx0byA9IG8ucmVwbGFjZSgvXFwuKFxcZCopJC8sZnVuY3Rpb24oJCQsICQxKSB7XG5yZXR1cm4gXCIuXCIgKyAkMSArIGZpbGwoXCIwXCIsIGhhc2hxKHJbMV0pLmxlbmd0aC0kMS5sZW5ndGgpOyB9KTtcblx0XHRyZXR1cm4gZm10LmluZGV4T2YoXCIwLlwiKSAhPT0gLTEgPyBvIDogby5yZXBsYWNlKC9eMFxcLi8sXCIuXCIpO1xuXHR9XG5cdGZtdCA9IGZtdC5yZXBsYWNlKC9eIysoWzAuXSkvLCBcIiQxXCIpO1xuXHRpZigociA9IGZtdC5tYXRjaCgvXigwKilcXC4oIyopJC8pKSkge1xuXHRcdHJldHVybiBzaWduICsgKFwiXCIrYXZhbCkucmVwbGFjZSgvXFwuKFxcZCpbMS05XSkwKiQvLFwiLiQxXCIpLnJlcGxhY2UoL14oLT9cXGQqKSQvLFwiJDEuXCIpLnJlcGxhY2UoL14wXFwuLyxyWzFdLmxlbmd0aD9cIjAuXCI6XCIuXCIpO1xuXHR9XG5cdGlmKChyID0gZm10Lm1hdGNoKC9eI3sxLDN9LCMjMChcXC4/KSQvKSkpIHJldHVybiBzaWduICsgY29tbWFpZnkoKFwiXCIrYXZhbCkpO1xuXHRpZigociA9IGZtdC5tYXRjaCgvXiMsIyMwXFwuKFsjMF0qMCkkLykpKSB7XG5cdFx0cmV0dXJuIHZhbCA8IDAgPyBcIi1cIiArIHdyaXRlX251bV9pbnQodHlwZSwgZm10LCAtdmFsKSA6IGNvbW1haWZ5KChcIlwiK3ZhbCkpICsgXCIuXCIgKyBmaWxsKCcwJyxyWzFdLmxlbmd0aCk7XG5cdH1cblx0aWYoKHIgPSBmbXQubWF0Y2goL14jLCMqLCMwLykpKSByZXR1cm4gd3JpdGVfbnVtX2ludCh0eXBlLGZtdC5yZXBsYWNlKC9eIywjKiwvLFwiXCIpLHZhbCk7XG5cdGlmKChyID0gZm10Lm1hdGNoKC9eKFswI10rKShcXFxcPy0oWzAjXSspKSskLykpKSB7XG5cdFx0byA9IF9zdHJyZXYod3JpdGVfbnVtX2ludCh0eXBlLCBmbXQucmVwbGFjZSgvW1xcXFwtXS9nLFwiXCIpLCB2YWwpKTtcblx0XHRyaSA9IDA7XG5cdFx0cmV0dXJuIF9zdHJyZXYoX3N0cnJldihmbXQucmVwbGFjZSgvXFxcXC9nLFwiXCIpKS5yZXBsYWNlKC9bMCNdL2csZnVuY3Rpb24oeCl7cmV0dXJuIHJpPG8ubGVuZ3RoP28uY2hhckF0KHJpKyspOng9PT0nMCc/JzAnOlwiXCI7fSkpO1xuXHR9XG5cdGlmKGZtdC5tYXRjaChwaG9uZSkpIHtcblx0XHRvID0gd3JpdGVfbnVtX2ludCh0eXBlLCBcIiMjIyMjIyMjIyNcIiwgdmFsKTtcblx0XHRyZXR1cm4gXCIoXCIgKyBvLnN1YnN0cigwLDMpICsgXCIpIFwiICsgby5zdWJzdHIoMywgMykgKyBcIi1cIiArIG8uc3Vic3RyKDYpO1xuXHR9XG5cdHZhciBvYSA9IFwiXCI7XG5cdGlmKChyID0gZm10Lm1hdGNoKC9eKFsjMD9dKykoID8pXFwvKCA/KShbIzA/XSspLykpKSB7XG5cdFx0cmkgPSBNYXRoLm1pbihyWzRdLmxlbmd0aCw3KTtcblx0XHRmZiA9IGZyYWMoYXZhbCwgTWF0aC5wb3coMTAscmkpLTEsIGZhbHNlKTtcblx0XHRvID0gXCJcIiArIHNpZ247XG5cdFx0b2EgPSB3cml0ZV9udW0oXCJuXCIsIHJbMV0sIGZmWzFdKTtcblx0XHRpZihvYS5jaGFyQXQob2EubGVuZ3RoLTEpID09IFwiIFwiKSBvYSA9IG9hLnN1YnN0cigwLG9hLmxlbmd0aC0xKSArIFwiMFwiO1xuXHRcdG8gKz0gb2EgKyByWzJdICsgXCIvXCIgKyByWzNdO1xuXHRcdG9hID0gcnBhZF8oZmZbMl0scmkpO1xuXHRcdGlmKG9hLmxlbmd0aCA8IHJbNF0ubGVuZ3RoKSBvYSA9IGhhc2hxKHJbNF0uc3Vic3RyKHJbNF0ubGVuZ3RoLW9hLmxlbmd0aCkpICsgb2E7XG5cdFx0byArPSBvYTtcblx0XHRyZXR1cm4gbztcblx0fVxuXHRpZigociA9IGZtdC5tYXRjaCgvXiMgKFsjMD9dKykoID8pXFwvKCA/KShbIzA/XSspLykpKSB7XG5cdFx0cmkgPSBNYXRoLm1pbihNYXRoLm1heChyWzFdLmxlbmd0aCwgcls0XS5sZW5ndGgpLDcpO1xuXHRcdGZmID0gZnJhYyhhdmFsLCBNYXRoLnBvdygxMCxyaSktMSwgdHJ1ZSk7XG5cdFx0cmV0dXJuIHNpZ24gKyAoZmZbMF18fChmZlsxXSA/IFwiXCIgOiBcIjBcIikpICsgXCIgXCIgKyAoZmZbMV0gPyBwYWRfKGZmWzFdLHJpKSArIHJbMl0gKyBcIi9cIiArIHJbM10gKyBycGFkXyhmZlsyXSxyaSk6IGZpbGwoXCIgXCIsIDIqcmkrMSArIHJbMl0ubGVuZ3RoICsgclszXS5sZW5ndGgpKTtcblx0fVxuXHRpZigociA9IGZtdC5tYXRjaCgvXlsjMD9dKyQvKSkpIHtcblx0XHRvID0gXCJcIiArIHZhbDtcblx0XHRpZihmbXQubGVuZ3RoIDw9IG8ubGVuZ3RoKSByZXR1cm4gbztcblx0XHRyZXR1cm4gaGFzaHEoZm10LnN1YnN0cigwLGZtdC5sZW5ndGgtby5sZW5ndGgpKSArIG87XG5cdH1cblx0aWYoKHIgPSBmbXQubWF0Y2goL14oWyMwXSspXFwuKFsjMF0rKSQvKSkpIHtcblx0XHRvID0gXCJcIiArIHZhbC50b0ZpeGVkKE1hdGgubWluKHJbMl0ubGVuZ3RoLDEwKSkucmVwbGFjZSgvKFteMF0pMCskLyxcIiQxXCIpO1xuXHRcdHJpID0gby5pbmRleE9mKFwiLlwiKTtcblx0XHR2YXIgbHJlcyA9IGZtdC5pbmRleE9mKFwiLlwiKSAtIHJpLCBycmVzID0gZm10Lmxlbmd0aCAtIG8ubGVuZ3RoIC0gbHJlcztcblx0XHRyZXR1cm4gaGFzaHEoZm10LnN1YnN0cigwLGxyZXMpICsgbyArIGZtdC5zdWJzdHIoZm10Lmxlbmd0aC1ycmVzKSk7XG5cdH1cblx0aWYoKHIgPSBmbXQubWF0Y2goL14wMCwwMDBcXC4oWyMwXSowKSQvKSkpIHtcblx0XHRyZXR1cm4gdmFsIDwgMCA/IFwiLVwiICsgd3JpdGVfbnVtX2ludCh0eXBlLCBmbXQsIC12YWwpIDogY29tbWFpZnkoXCJcIit2YWwpLnJlcGxhY2UoL15cXGQsXFxkezN9JC8sXCIwJCZcIikucmVwbGFjZSgvXlxcZCokLyxmdW5jdGlvbigkJCkgeyByZXR1cm4gXCIwMCxcIiArICgkJC5sZW5ndGggPCAzID8gcGFkMCgwLDMtJCQubGVuZ3RoKSA6IFwiXCIpICsgJCQ7IH0pICsgXCIuXCIgKyBwYWQwKDAsclsxXS5sZW5ndGgpO1xuXHR9XG5cdHN3aXRjaChmbXQpIHtcblx0XHRjYXNlIFwiIyMjLCMjI1wiOlxuXHRcdGNhc2UgXCIjIywjIyNcIjpcblx0XHRjYXNlIFwiIywjIyNcIjogdmFyIHggPSBjb21tYWlmeShcIlwiK2F2YWwpOyByZXR1cm4geCAhPT0gXCIwXCIgPyBzaWduICsgeCA6IFwiXCI7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdGlmKGZtdC5tYXRjaCgvXFwuWzAjP10qJC8pKSByZXR1cm4gd3JpdGVfbnVtX2ludCh0eXBlLCBmbXQuc2xpY2UoMCxmbXQubGFzdEluZGV4T2YoXCIuXCIpKSwgdmFsKSArIGhhc2hxKGZtdC5zbGljZShmbXQubGFzdEluZGV4T2YoXCIuXCIpKSk7XG5cdH1cblx0dGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWQgZm9ybWF0IHxcIiArIGZtdCArIFwifFwiKTtcbn1cbnJldHVybiBmdW5jdGlvbiB3cml0ZV9udW0odHlwZSwgZm10LCB2YWwpIHtcblx0cmV0dXJuICh2YWx8MCkgPT09IHZhbCA/IHdyaXRlX251bV9pbnQodHlwZSwgZm10LCB2YWwpIDogd3JpdGVfbnVtX2ZsdCh0eXBlLCBmbXQsIHZhbCk7XG59O30pKCk7XG5mdW5jdGlvbiBzcGxpdF9mbXQoZm10KSB7XG5cdHZhciBvdXQgPSBbXTtcblx0dmFyIGluX3N0ciA9IGZhbHNlLyosIGNjKi87XG5cdGZvcih2YXIgaSA9IDAsIGogPSAwOyBpIDwgZm10Lmxlbmd0aDsgKytpKSBzd2l0Y2goKC8qY2M9Ki9mbXQuY2hhckNvZGVBdChpKSkpIHtcblx0XHRjYXNlIDM0OiAvKiAnXCInICovXG5cdFx0XHRpbl9zdHIgPSAhaW5fc3RyOyBicmVhaztcblx0XHRjYXNlIDk1OiBjYXNlIDQyOiBjYXNlIDkyOiAvKiAnXycgJyonICdcXFxcJyAqL1xuXHRcdFx0KytpOyBicmVhaztcblx0XHRjYXNlIDU5OiAvKiAnOycgKi9cblx0XHRcdG91dFtvdXQubGVuZ3RoXSA9IGZtdC5zdWJzdHIoaixpLWopO1xuXHRcdFx0aiA9IGkrMTtcblx0fVxuXHRvdXRbb3V0Lmxlbmd0aF0gPSBmbXQuc3Vic3RyKGopO1xuXHRpZihpbl9zdHIgPT09IHRydWUpIHRocm93IG5ldyBFcnJvcihcIkZvcm1hdCB8XCIgKyBmbXQgKyBcInwgdW50ZXJtaW5hdGVkIHN0cmluZyBcIik7XG5cdHJldHVybiBvdXQ7XG59XG5TU0YuX3NwbGl0ID0gc3BsaXRfZm10O1xudmFyIGFic3RpbWUgPSAvXFxbW0hoTW1Tc1xcdTBFMEFcXHUwRTE5XFx1MEUxN10qXFxdLztcbmZ1bmN0aW9uIGZtdF9pc19kYXRlKGZtdCkge1xuXHR2YXIgaSA9IDAsIC8qY2MgPSAwLCovIGMgPSBcIlwiLCBvID0gXCJcIjtcblx0d2hpbGUoaSA8IGZtdC5sZW5ndGgpIHtcblx0XHRzd2l0Y2goKGMgPSBmbXQuY2hhckF0KGkpKSkge1xuXHRcdFx0Y2FzZSAnRyc6IGlmKGlzZ2VuZXJhbChmbXQsIGkpKSBpKz0gNjsgaSsrOyBicmVhaztcblx0XHRcdGNhc2UgJ1wiJzogZm9yKDsoLypjYz0qL2ZtdC5jaGFyQ29kZUF0KCsraSkpICE9PSAzNCAmJiBpIDwgZm10Lmxlbmd0aDspey8qZW1wdHkqL30gKytpOyBicmVhaztcblx0XHRcdGNhc2UgJ1xcXFwnOiBpKz0yOyBicmVhaztcblx0XHRcdGNhc2UgJ18nOiBpKz0yOyBicmVhaztcblx0XHRcdGNhc2UgJ0AnOiArK2k7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnQic6IGNhc2UgJ2InOlxuXHRcdFx0XHRpZihmbXQuY2hhckF0KGkrMSkgPT09IFwiMVwiIHx8IGZtdC5jaGFyQXQoaSsxKSA9PT0gXCIyXCIpIHJldHVybiB0cnVlO1xuXHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRjYXNlICdNJzogY2FzZSAnRCc6IGNhc2UgJ1knOiBjYXNlICdIJzogY2FzZSAnUyc6IGNhc2UgJ0UnOlxuXHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRjYXNlICdtJzogY2FzZSAnZCc6IGNhc2UgJ3knOiBjYXNlICdoJzogY2FzZSAncyc6IGNhc2UgJ2UnOiBjYXNlICdnJzogcmV0dXJuIHRydWU7XG5cdFx0XHRjYXNlICdBJzogY2FzZSAnYSc6IGNhc2UgJ+S4iic6XG5cdFx0XHRcdGlmKGZtdC5zdWJzdHIoaSwgMykudG9VcHBlckNhc2UoKSA9PT0gXCJBL1BcIikgcmV0dXJuIHRydWU7XG5cdFx0XHRcdGlmKGZtdC5zdWJzdHIoaSwgNSkudG9VcHBlckNhc2UoKSA9PT0gXCJBTS9QTVwiKSByZXR1cm4gdHJ1ZTtcblx0XHRcdFx0aWYoZm10LnN1YnN0cihpLCA1KS50b1VwcGVyQ2FzZSgpID09PSBcIuS4iuWNiC/kuIvljYhcIikgcmV0dXJuIHRydWU7XG5cdFx0XHRcdCsraTsgYnJlYWs7XG5cdFx0XHRjYXNlICdbJzpcblx0XHRcdFx0byA9IGM7XG5cdFx0XHRcdHdoaWxlKGZtdC5jaGFyQXQoaSsrKSAhPT0gJ10nICYmIGkgPCBmbXQubGVuZ3RoKSBvICs9IGZtdC5jaGFyQXQoaSk7XG5cdFx0XHRcdGlmKG8ubWF0Y2goYWJzdGltZSkpIHJldHVybiB0cnVlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJy4nOlxuXHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRjYXNlICcwJzogY2FzZSAnIyc6XG5cdFx0XHRcdHdoaWxlKGkgPCBmbXQubGVuZ3RoICYmIChcIjAjPy4sRSstJVwiLmluZGV4T2YoYz1mbXQuY2hhckF0KCsraSkpID4gLTEgfHwgKGM9PSdcXFxcJyAmJiBmbXQuY2hhckF0KGkrMSkgPT0gXCItXCIgJiYgXCIwI1wiLmluZGV4T2YoZm10LmNoYXJBdChpKzIpKT4tMSkpKXsvKiBlbXB0eSAqL31cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICc/Jzogd2hpbGUoZm10LmNoYXJBdCgrK2kpID09PSBjKXsvKiBlbXB0eSAqL30gYnJlYWs7XG5cdFx0XHRjYXNlICcqJzogKytpOyBpZihmbXQuY2hhckF0KGkpID09ICcgJyB8fCBmbXQuY2hhckF0KGkpID09ICcqJykgKytpOyBicmVhaztcblx0XHRcdGNhc2UgJygnOiBjYXNlICcpJzogKytpOyBicmVhaztcblx0XHRcdGNhc2UgJzEnOiBjYXNlICcyJzogY2FzZSAnMyc6IGNhc2UgJzQnOiBjYXNlICc1JzogY2FzZSAnNic6IGNhc2UgJzcnOiBjYXNlICc4JzogY2FzZSAnOSc6XG5cdFx0XHRcdHdoaWxlKGkgPCBmbXQubGVuZ3RoICYmIFwiMDEyMzQ1Njc4OVwiLmluZGV4T2YoZm10LmNoYXJBdCgrK2kpKSA+IC0xKXsvKiBlbXB0eSAqL30gYnJlYWs7XG5cdFx0XHRjYXNlICcgJzogKytpOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6ICsraTsgYnJlYWs7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBmYWxzZTtcbn1cblNTRi5pc19kYXRlID0gZm10X2lzX2RhdGU7XG5mdW5jdGlvbiBldmFsX2ZtdChmbXQsIHYsIG9wdHMsIGZsZW4pIHtcblx0dmFyIG91dCA9IFtdLCBvID0gXCJcIiwgaSA9IDAsIGMgPSBcIlwiLCBsc3Q9J3QnLCBkdCwgaiwgY2M7XG5cdHZhciBocj0nSCc7XG5cdC8qIFRva2VuaXplICovXG5cdHdoaWxlKGkgPCBmbXQubGVuZ3RoKSB7XG5cdFx0c3dpdGNoKChjID0gZm10LmNoYXJBdChpKSkpIHtcblx0XHRcdGNhc2UgJ0cnOiAvKiBHZW5lcmFsICovXG5cdFx0XHRcdGlmKCFpc2dlbmVyYWwoZm10LCBpKSkgdGhyb3cgbmV3IEVycm9yKCd1bnJlY29nbml6ZWQgY2hhcmFjdGVyICcgKyBjICsgJyBpbiAnICtmbXQpO1xuXHRcdFx0XHRvdXRbb3V0Lmxlbmd0aF0gPSB7dDonRycsIHY6J0dlbmVyYWwnfTsgaSs9NzsgYnJlYWs7XG5cdFx0XHRjYXNlICdcIic6IC8qIExpdGVyYWwgdGV4dCAqL1xuXHRcdFx0XHRmb3Iobz1cIlwiOyhjYz1mbXQuY2hhckNvZGVBdCgrK2kpKSAhPT0gMzQgJiYgaSA8IGZtdC5sZW5ndGg7KSBvICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2MpO1xuXHRcdFx0XHRvdXRbb3V0Lmxlbmd0aF0gPSB7dDondCcsIHY6b307ICsraTsgYnJlYWs7XG5cdFx0XHRjYXNlICdcXFxcJzogdmFyIHcgPSBmbXQuY2hhckF0KCsraSksIHQgPSAodyA9PT0gXCIoXCIgfHwgdyA9PT0gXCIpXCIpID8gdyA6ICd0Jztcblx0XHRcdFx0b3V0W291dC5sZW5ndGhdID0ge3Q6dCwgdjp3fTsgKytpOyBicmVhaztcblx0XHRcdGNhc2UgJ18nOiBvdXRbb3V0Lmxlbmd0aF0gPSB7dDondCcsIHY6XCIgXCJ9OyBpKz0yOyBicmVhaztcblx0XHRcdGNhc2UgJ0AnOiAvKiBUZXh0IFBsYWNlaG9sZGVyICovXG5cdFx0XHRcdG91dFtvdXQubGVuZ3RoXSA9IHt0OidUJywgdjp2fTsgKytpOyBicmVhaztcblx0XHRcdGNhc2UgJ0InOiBjYXNlICdiJzpcblx0XHRcdFx0aWYoZm10LmNoYXJBdChpKzEpID09PSBcIjFcIiB8fCBmbXQuY2hhckF0KGkrMSkgPT09IFwiMlwiKSB7XG5cdFx0XHRcdFx0aWYoZHQ9PW51bGwpIHsgZHQ9cGFyc2VfZGF0ZV9jb2RlKHYsIG9wdHMsIGZtdC5jaGFyQXQoaSsxKSA9PT0gXCIyXCIpOyBpZihkdD09bnVsbCkgcmV0dXJuIFwiXCI7IH1cblx0XHRcdFx0XHRvdXRbb3V0Lmxlbmd0aF0gPSB7dDonWCcsIHY6Zm10LnN1YnN0cihpLDIpfTsgbHN0ID0gYzsgaSs9MjsgYnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0Y2FzZSAnTSc6IGNhc2UgJ0QnOiBjYXNlICdZJzogY2FzZSAnSCc6IGNhc2UgJ1MnOiBjYXNlICdFJzpcblx0XHRcdFx0YyA9IGMudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0Y2FzZSAnbSc6IGNhc2UgJ2QnOiBjYXNlICd5JzogY2FzZSAnaCc6IGNhc2UgJ3MnOiBjYXNlICdlJzogY2FzZSAnZyc6XG5cdFx0XHRcdGlmKHYgPCAwKSByZXR1cm4gXCJcIjtcblx0XHRcdFx0aWYoZHQ9PW51bGwpIHsgZHQ9cGFyc2VfZGF0ZV9jb2RlKHYsIG9wdHMpOyBpZihkdD09bnVsbCkgcmV0dXJuIFwiXCI7IH1cblx0XHRcdFx0byA9IGM7IHdoaWxlKCsraSA8IGZtdC5sZW5ndGggJiYgZm10LmNoYXJBdChpKS50b0xvd2VyQ2FzZSgpID09PSBjKSBvKz1jO1xuXHRcdFx0XHRpZihjID09PSAnbScgJiYgbHN0LnRvTG93ZXJDYXNlKCkgPT09ICdoJykgYyA9ICdNJztcblx0XHRcdFx0aWYoYyA9PT0gJ2gnKSBjID0gaHI7XG5cdFx0XHRcdG91dFtvdXQubGVuZ3RoXSA9IHt0OmMsIHY6b307IGxzdCA9IGM7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnQSc6IGNhc2UgJ2EnOiBjYXNlICfkuIonOlxuXHRcdFx0XHR2YXIgcT17dDpjLCB2OmN9O1xuXHRcdFx0XHRpZihkdD09bnVsbCkgZHQ9cGFyc2VfZGF0ZV9jb2RlKHYsIG9wdHMpO1xuXHRcdFx0XHRpZihmbXQuc3Vic3RyKGksIDMpLnRvVXBwZXJDYXNlKCkgPT09IFwiQS9QXCIpIHsgaWYoZHQhPW51bGwpIHEudiA9IGR0LkggPj0gMTIgPyBcIlBcIiA6IFwiQVwiOyBxLnQgPSAnVCc7IGhyPSdoJztpKz0zO31cblx0XHRcdFx0ZWxzZSBpZihmbXQuc3Vic3RyKGksNSkudG9VcHBlckNhc2UoKSA9PT0gXCJBTS9QTVwiKSB7IGlmKGR0IT1udWxsKSBxLnYgPSBkdC5IID49IDEyID8gXCJQTVwiIDogXCJBTVwiOyBxLnQgPSAnVCc7IGkrPTU7IGhyPSdoJzsgfVxuXHRcdFx0XHRlbHNlIGlmKGZtdC5zdWJzdHIoaSw1KS50b1VwcGVyQ2FzZSgpID09PSBcIuS4iuWNiC/kuIvljYhcIikgeyBpZihkdCE9bnVsbCkgcS52ID0gZHQuSCA+PSAxMiA/IFwi5LiL5Y2IXCIgOiBcIuS4iuWNiFwiOyBxLnQgPSAnVCc7IGkrPTU7IGhyPSdoJzsgfVxuXHRcdFx0XHRlbHNlIHsgcS50ID0gXCJ0XCI7ICsraTsgfVxuXHRcdFx0XHRpZihkdD09bnVsbCAmJiBxLnQgPT09ICdUJykgcmV0dXJuIFwiXCI7XG5cdFx0XHRcdG91dFtvdXQubGVuZ3RoXSA9IHE7IGxzdCA9IGM7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnWyc6XG5cdFx0XHRcdG8gPSBjO1xuXHRcdFx0XHR3aGlsZShmbXQuY2hhckF0KGkrKykgIT09ICddJyAmJiBpIDwgZm10Lmxlbmd0aCkgbyArPSBmbXQuY2hhckF0KGkpO1xuXHRcdFx0XHRpZihvLnNsaWNlKC0xKSAhPT0gJ10nKSB0aHJvdyAndW50ZXJtaW5hdGVkIFwiW1wiIGJsb2NrOiB8JyArIG8gKyAnfCc7XG5cdFx0XHRcdGlmKG8ubWF0Y2goYWJzdGltZSkpIHtcblx0XHRcdFx0XHRpZihkdD09bnVsbCkgeyBkdD1wYXJzZV9kYXRlX2NvZGUodiwgb3B0cyk7IGlmKGR0PT1udWxsKSByZXR1cm4gXCJcIjsgfVxuXHRcdFx0XHRcdG91dFtvdXQubGVuZ3RoXSA9IHt0OidaJywgdjpvLnRvTG93ZXJDYXNlKCl9O1xuXHRcdFx0XHRcdGxzdCA9IG8uY2hhckF0KDEpO1xuXHRcdFx0XHR9IGVsc2UgaWYoby5pbmRleE9mKFwiJFwiKSA+IC0xKSB7XG5cdFx0XHRcdFx0byA9IChvLm1hdGNoKC9cXCQoW14tXFxbXFxdXSopLyl8fFtdKVsxXXx8XCIkXCI7XG5cdFx0XHRcdFx0aWYoIWZtdF9pc19kYXRlKGZtdCkpIG91dFtvdXQubGVuZ3RoXSA9IHt0Oid0Jyx2Om99O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0LyogTnVtYmVycyAqL1xuXHRcdFx0Y2FzZSAnLic6XG5cdFx0XHRcdGlmKGR0ICE9IG51bGwpIHtcblx0XHRcdFx0XHRvID0gYzsgd2hpbGUoKytpIDwgZm10Lmxlbmd0aCAmJiAoYz1mbXQuY2hhckF0KGkpKSA9PT0gXCIwXCIpIG8gKz0gYztcblx0XHRcdFx0XHRvdXRbb3V0Lmxlbmd0aF0gPSB7dDoncycsIHY6b307IGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdGNhc2UgJzAnOiBjYXNlICcjJzpcblx0XHRcdFx0byA9IGM7IHdoaWxlKCsraSA8IGZtdC5sZW5ndGggJiYgXCIwIz8uLEUrLSVcIi5pbmRleE9mKGM9Zm10LmNoYXJBdChpKSkgPiAtMSkgbyArPSBjO1xuXHRcdFx0XHRvdXRbb3V0Lmxlbmd0aF0gPSB7dDonbicsIHY6b307IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPyc6XG5cdFx0XHRcdG8gPSBjOyB3aGlsZShmbXQuY2hhckF0KCsraSkgPT09IGMpIG8rPWM7XG5cdFx0XHRcdG91dFtvdXQubGVuZ3RoXSA9IHt0OmMsIHY6b307IGxzdCA9IGM7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnKic6ICsraTsgaWYoZm10LmNoYXJBdChpKSA9PSAnICcgfHwgZm10LmNoYXJBdChpKSA9PSAnKicpICsraTsgYnJlYWs7IC8vICoqXG5cdFx0XHRjYXNlICcoJzogY2FzZSAnKSc6IG91dFtvdXQubGVuZ3RoXSA9IHt0OihmbGVuPT09MT8ndCc6YyksIHY6Y307ICsraTsgYnJlYWs7XG5cdFx0XHRjYXNlICcxJzogY2FzZSAnMic6IGNhc2UgJzMnOiBjYXNlICc0JzogY2FzZSAnNSc6IGNhc2UgJzYnOiBjYXNlICc3JzogY2FzZSAnOCc6IGNhc2UgJzknOlxuXHRcdFx0XHRvID0gYzsgd2hpbGUoaSA8IGZtdC5sZW5ndGggJiYgXCIwMTIzNDU2Nzg5XCIuaW5kZXhPZihmbXQuY2hhckF0KCsraSkpID4gLTEpIG8rPWZtdC5jaGFyQXQoaSk7XG5cdFx0XHRcdG91dFtvdXQubGVuZ3RoXSA9IHt0OidEJywgdjpvfTsgYnJlYWs7XG5cdFx0XHRjYXNlICcgJzogb3V0W291dC5sZW5ndGhdID0ge3Q6YywgdjpjfTsgKytpOyBicmVhaztcblx0XHRcdGNhc2UgJyQnOiBvdXRbb3V0Lmxlbmd0aF0gPSB7dDondCcsIHY6JyQnfTsgKytpOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGlmKFwiLCQtKy8oKTohXiYnfnt9PD494oKsYWNmaWprbG9wcXJ0dXZ3eHpQXCIuaW5kZXhPZihjKSA9PT0gLTEpIHRocm93IG5ldyBFcnJvcigndW5yZWNvZ25pemVkIGNoYXJhY3RlciAnICsgYyArICcgaW4gJyArIGZtdCk7XG5cdFx0XHRcdG91dFtvdXQubGVuZ3RoXSA9IHt0Oid0JywgdjpjfTsgKytpOyBicmVhaztcblx0XHR9XG5cdH1cblxuXHQvKiBTY2FuIGZvciBkYXRlL3RpbWUgcGFydHMgKi9cblx0dmFyIGJ0ID0gMCwgc3MwID0gMCwgc3NtO1xuXHRmb3IoaT1vdXQubGVuZ3RoLTEsIGxzdD0ndCc7IGkgPj0gMDsgLS1pKSB7XG5cdFx0c3dpdGNoKG91dFtpXS50KSB7XG5cdFx0XHRjYXNlICdoJzogY2FzZSAnSCc6IG91dFtpXS50ID0gaHI7IGxzdD0naCc7IGlmKGJ0IDwgMSkgYnQgPSAxOyBicmVhaztcblx0XHRcdGNhc2UgJ3MnOlxuXHRcdFx0XHRpZigoc3NtPW91dFtpXS52Lm1hdGNoKC9cXC4wKyQvKSkpIHNzMD1NYXRoLm1heChzczAsc3NtWzBdLmxlbmd0aC0xKTtcblx0XHRcdFx0aWYoYnQgPCAzKSBidCA9IDM7XG5cdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRjYXNlICdkJzogY2FzZSAneSc6IGNhc2UgJ00nOiBjYXNlICdlJzogbHN0PW91dFtpXS50OyBicmVhaztcblx0XHRcdGNhc2UgJ20nOiBpZihsc3QgPT09ICdzJykgeyBvdXRbaV0udCA9ICdNJzsgaWYoYnQgPCAyKSBidCA9IDI7IH0gYnJlYWs7XG5cdFx0XHRjYXNlICdYJzogLyppZihvdXRbaV0udiA9PT0gXCJCMlwiKTsqL1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ1onOlxuXHRcdFx0XHRpZihidCA8IDEgJiYgb3V0W2ldLnYubWF0Y2goL1tIaF0vKSkgYnQgPSAxO1xuXHRcdFx0XHRpZihidCA8IDIgJiYgb3V0W2ldLnYubWF0Y2goL1tNbV0vKSkgYnQgPSAyO1xuXHRcdFx0XHRpZihidCA8IDMgJiYgb3V0W2ldLnYubWF0Y2goL1tTc10vKSkgYnQgPSAzO1xuXHRcdH1cblx0fVxuXHQvKiB0aW1lIHJvdW5kaW5nIGRlcGVuZHMgb24gcHJlc2VuY2Ugb2YgbWludXRlIC8gc2Vjb25kIC8gdXNlYyBmaWVsZHMgKi9cblx0c3dpdGNoKGJ0KSB7XG5cdFx0Y2FzZSAwOiBicmVhaztcblx0XHRjYXNlIDE6XG5pZihkdC51ID49IDAuNSkgeyBkdC51ID0gMDsgKytkdC5TOyB9XG5cdFx0XHRpZihkdC5TID49ICA2MCkgeyBkdC5TID0gMDsgKytkdC5NOyB9XG5cdFx0XHRpZihkdC5NID49ICA2MCkgeyBkdC5NID0gMDsgKytkdC5IOyB9XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIDI6XG5pZihkdC51ID49IDAuNSkgeyBkdC51ID0gMDsgKytkdC5TOyB9XG5cdFx0XHRpZihkdC5TID49ICA2MCkgeyBkdC5TID0gMDsgKytkdC5NOyB9XG5cdFx0XHRicmVhaztcblx0fVxuXG5cdC8qIHJlcGxhY2UgZmllbGRzICovXG5cdHZhciBuc3RyID0gXCJcIiwgamo7XG5cdGZvcihpPTA7IGkgPCBvdXQubGVuZ3RoOyArK2kpIHtcblx0XHRzd2l0Y2gob3V0W2ldLnQpIHtcblx0XHRcdGNhc2UgJ3QnOiBjYXNlICdUJzogY2FzZSAnICc6IGNhc2UgJ0QnOiBicmVhaztcblx0XHRcdGNhc2UgJ1gnOiBvdXRbaV0udiA9IFwiXCI7IG91dFtpXS50ID0gXCI7XCI7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnZCc6IGNhc2UgJ20nOiBjYXNlICd5JzogY2FzZSAnaCc6IGNhc2UgJ0gnOiBjYXNlICdNJzogY2FzZSAncyc6IGNhc2UgJ2UnOiBjYXNlICdiJzogY2FzZSAnWic6XG5vdXRbaV0udiA9IHdyaXRlX2RhdGUob3V0W2ldLnQuY2hhckNvZGVBdCgwKSwgb3V0W2ldLnYsIGR0LCBzczApO1xuXHRcdFx0XHRvdXRbaV0udCA9ICd0JzsgYnJlYWs7XG5cdFx0XHRjYXNlICduJzogY2FzZSAnPyc6XG5cdFx0XHRcdGpqID0gaSsxO1xuXHRcdFx0XHR3aGlsZShvdXRbampdICE9IG51bGwgJiYgKFxuXHRcdFx0XHRcdChjPW91dFtqal0udCkgPT09IFwiP1wiIHx8IGMgPT09IFwiRFwiIHx8XG5cdFx0XHRcdFx0KChjID09PSBcIiBcIiB8fCBjID09PSBcInRcIikgJiYgb3V0W2pqKzFdICE9IG51bGwgJiYgKG91dFtqaisxXS50ID09PSAnPycgfHwgb3V0W2pqKzFdLnQgPT09IFwidFwiICYmIG91dFtqaisxXS52ID09PSAnLycpKSB8fFxuXHRcdFx0XHRcdChvdXRbaV0udCA9PT0gJygnICYmIChjID09PSAnICcgfHwgYyA9PT0gJ24nIHx8IGMgPT09ICcpJykpIHx8XG5cdFx0XHRcdFx0KGMgPT09ICd0JyAmJiAob3V0W2pqXS52ID09PSAnLycgfHwgb3V0W2pqXS52ID09PSAnICcgJiYgb3V0W2pqKzFdICE9IG51bGwgJiYgb3V0W2pqKzFdLnQgPT0gJz8nKSlcblx0XHRcdFx0KSkge1xuXHRcdFx0XHRcdG91dFtpXS52ICs9IG91dFtqal0udjtcblx0XHRcdFx0XHRvdXRbampdID0ge3Y6XCJcIiwgdDpcIjtcIn07ICsramo7XG5cdFx0XHRcdH1cblx0XHRcdFx0bnN0ciArPSBvdXRbaV0udjtcblx0XHRcdFx0aSA9IGpqLTE7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnRyc6IG91dFtpXS50ID0gJ3QnOyBvdXRbaV0udiA9IGdlbmVyYWxfZm10KHYsb3B0cyk7IGJyZWFrO1xuXHRcdH1cblx0fVxuXHR2YXIgdnYgPSBcIlwiLCBteXYsIG9zdHI7XG5cdGlmKG5zdHIubGVuZ3RoID4gMCkge1xuXHRcdGlmKG5zdHIuY2hhckNvZGVBdCgwKSA9PSA0MCkgLyogJygnICovIHtcblx0XHRcdG15diA9ICh2PDAmJm5zdHIuY2hhckNvZGVBdCgwKSA9PT0gNDUgPyAtdiA6IHYpO1xuXHRcdFx0b3N0ciA9IHdyaXRlX251bSgnbicsIG5zdHIsIG15dik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG15diA9ICh2PDAgJiYgZmxlbiA+IDEgPyAtdiA6IHYpO1xuXHRcdFx0b3N0ciA9IHdyaXRlX251bSgnbicsIG5zdHIsIG15dik7XG5cdFx0XHRpZihteXYgPCAwICYmIG91dFswXSAmJiBvdXRbMF0udCA9PSAndCcpIHtcblx0XHRcdFx0b3N0ciA9IG9zdHIuc3Vic3RyKDEpO1xuXHRcdFx0XHRvdXRbMF0udiA9IFwiLVwiICsgb3V0WzBdLnY7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGpqPW9zdHIubGVuZ3RoLTE7XG5cdFx0dmFyIGRlY3B0ID0gb3V0Lmxlbmd0aDtcblx0XHRmb3IoaT0wOyBpIDwgb3V0Lmxlbmd0aDsgKytpKSBpZihvdXRbaV0gIT0gbnVsbCAmJiBvdXRbaV0udCAhPSAndCcgJiYgb3V0W2ldLnYuaW5kZXhPZihcIi5cIikgPiAtMSkgeyBkZWNwdCA9IGk7IGJyZWFrOyB9XG5cdFx0dmFyIGxhc3RpPW91dC5sZW5ndGg7XG5cdFx0aWYoZGVjcHQgPT09IG91dC5sZW5ndGggJiYgb3N0ci5pbmRleE9mKFwiRVwiKSA9PT0gLTEpIHtcblx0XHRcdGZvcihpPW91dC5sZW5ndGgtMTsgaT49IDA7LS1pKSB7XG5cdFx0XHRcdGlmKG91dFtpXSA9PSBudWxsIHx8ICduPycuaW5kZXhPZihvdXRbaV0udCkgPT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0aWYoamo+PW91dFtpXS52Lmxlbmd0aC0xKSB7IGpqIC09IG91dFtpXS52Lmxlbmd0aDsgb3V0W2ldLnYgPSBvc3RyLnN1YnN0cihqaisxLCBvdXRbaV0udi5sZW5ndGgpOyB9XG5cdFx0XHRcdGVsc2UgaWYoamogPCAwKSBvdXRbaV0udiA9IFwiXCI7XG5cdFx0XHRcdGVsc2UgeyBvdXRbaV0udiA9IG9zdHIuc3Vic3RyKDAsIGpqKzEpOyBqaiA9IC0xOyB9XG5cdFx0XHRcdG91dFtpXS50ID0gJ3QnO1xuXHRcdFx0XHRsYXN0aSA9IGk7XG5cdFx0XHR9XG5cdFx0XHRpZihqaj49MCAmJiBsYXN0aTxvdXQubGVuZ3RoKSBvdXRbbGFzdGldLnYgPSBvc3RyLnN1YnN0cigwLGpqKzEpICsgb3V0W2xhc3RpXS52O1xuXHRcdH1cblx0XHRlbHNlIGlmKGRlY3B0ICE9PSBvdXQubGVuZ3RoICYmIG9zdHIuaW5kZXhPZihcIkVcIikgPT09IC0xKSB7XG5cdFx0XHRqaiA9IG9zdHIuaW5kZXhPZihcIi5cIiktMTtcblx0XHRcdGZvcihpPWRlY3B0OyBpPj0gMDsgLS1pKSB7XG5cdFx0XHRcdGlmKG91dFtpXSA9PSBudWxsIHx8ICduPycuaW5kZXhPZihvdXRbaV0udCkgPT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0aj1vdXRbaV0udi5pbmRleE9mKFwiLlwiKT4tMSYmaT09PWRlY3B0P291dFtpXS52LmluZGV4T2YoXCIuXCIpLTE6b3V0W2ldLnYubGVuZ3RoLTE7XG5cdFx0XHRcdHZ2ID0gb3V0W2ldLnYuc3Vic3RyKGorMSk7XG5cdFx0XHRcdGZvcig7IGo+PTA7IC0taikge1xuXHRcdFx0XHRcdGlmKGpqPj0wICYmIChvdXRbaV0udi5jaGFyQXQoaikgPT09IFwiMFwiIHx8IG91dFtpXS52LmNoYXJBdChqKSA9PT0gXCIjXCIpKSB2diA9IG9zdHIuY2hhckF0KGpqLS0pICsgdnY7XG5cdFx0XHRcdH1cblx0XHRcdFx0b3V0W2ldLnYgPSB2djtcblx0XHRcdFx0b3V0W2ldLnQgPSAndCc7XG5cdFx0XHRcdGxhc3RpID0gaTtcblx0XHRcdH1cblx0XHRcdGlmKGpqPj0wICYmIGxhc3RpPG91dC5sZW5ndGgpIG91dFtsYXN0aV0udiA9IG9zdHIuc3Vic3RyKDAsamorMSkgKyBvdXRbbGFzdGldLnY7XG5cdFx0XHRqaiA9IG9zdHIuaW5kZXhPZihcIi5cIikrMTtcblx0XHRcdGZvcihpPWRlY3B0OyBpPG91dC5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRpZihvdXRbaV0gPT0gbnVsbCB8fCAoJ24/KCcuaW5kZXhPZihvdXRbaV0udCkgPT09IC0xICYmIGkgIT09IGRlY3B0KSkgY29udGludWU7XG5cdFx0XHRcdGo9b3V0W2ldLnYuaW5kZXhPZihcIi5cIik+LTEmJmk9PT1kZWNwdD9vdXRbaV0udi5pbmRleE9mKFwiLlwiKSsxOjA7XG5cdFx0XHRcdHZ2ID0gb3V0W2ldLnYuc3Vic3RyKDAsaik7XG5cdFx0XHRcdGZvcig7IGo8b3V0W2ldLnYubGVuZ3RoOyArK2opIHtcblx0XHRcdFx0XHRpZihqajxvc3RyLmxlbmd0aCkgdnYgKz0gb3N0ci5jaGFyQXQoamorKyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0b3V0W2ldLnYgPSB2djtcblx0XHRcdFx0b3V0W2ldLnQgPSAndCc7XG5cdFx0XHRcdGxhc3RpID0gaTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0Zm9yKGk9MDsgaTxvdXQubGVuZ3RoOyArK2kpIGlmKG91dFtpXSAhPSBudWxsICYmICduPycuaW5kZXhPZihvdXRbaV0udCk+LTEpIHtcblx0XHRteXYgPSAoZmxlbiA+MSAmJiB2IDwgMCAmJiBpPjAgJiYgb3V0W2ktMV0udiA9PT0gXCItXCIgPyAtdjp2KTtcblx0XHRvdXRbaV0udiA9IHdyaXRlX251bShvdXRbaV0udCwgb3V0W2ldLnYsIG15dik7XG5cdFx0b3V0W2ldLnQgPSAndCc7XG5cdH1cblx0dmFyIHJldHZhbCA9IFwiXCI7XG5cdGZvcihpPTA7IGkgIT09IG91dC5sZW5ndGg7ICsraSkgaWYob3V0W2ldICE9IG51bGwpIHJldHZhbCArPSBvdXRbaV0udjtcblx0cmV0dXJuIHJldHZhbDtcbn1cblNTRi5fZXZhbCA9IGV2YWxfZm10O1xudmFyIGNmcmVnZXggPSAvXFxbWz08Pl0vO1xudmFyIGNmcmVnZXgyID0gL1xcWyg9fD5bPV0/fDxbPj1dPykoLT9cXGQrKD86XFwuXFxkKik/KVxcXS87XG5mdW5jdGlvbiBjaGtjb25kKHYsIHJyKSB7XG5cdGlmKHJyID09IG51bGwpIHJldHVybiBmYWxzZTtcblx0dmFyIHRocmVzaCA9IHBhcnNlRmxvYXQocnJbMl0pO1xuXHRzd2l0Y2gocnJbMV0pIHtcblx0XHRjYXNlIFwiPVwiOiAgaWYodiA9PSB0aHJlc2gpIHJldHVybiB0cnVlOyBicmVhaztcblx0XHRjYXNlIFwiPlwiOiAgaWYodiA+ICB0aHJlc2gpIHJldHVybiB0cnVlOyBicmVhaztcblx0XHRjYXNlIFwiPFwiOiAgaWYodiA8ICB0aHJlc2gpIHJldHVybiB0cnVlOyBicmVhaztcblx0XHRjYXNlIFwiPD5cIjogaWYodiAhPSB0aHJlc2gpIHJldHVybiB0cnVlOyBicmVhaztcblx0XHRjYXNlIFwiPj1cIjogaWYodiA+PSB0aHJlc2gpIHJldHVybiB0cnVlOyBicmVhaztcblx0XHRjYXNlIFwiPD1cIjogaWYodiA8PSB0aHJlc2gpIHJldHVybiB0cnVlOyBicmVhaztcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBjaG9vc2VfZm10KGYsIHYpIHtcblx0dmFyIGZtdCA9IHNwbGl0X2ZtdChmKTtcblx0dmFyIGwgPSBmbXQubGVuZ3RoLCBsYXQgPSBmbXRbbC0xXS5pbmRleE9mKFwiQFwiKTtcblx0aWYobDw0ICYmIGxhdD4tMSkgLS1sO1xuXHRpZihmbXQubGVuZ3RoID4gNCkgdGhyb3cgbmV3IEVycm9yKFwiY2Fubm90IGZpbmQgcmlnaHQgZm9ybWF0IGZvciB8XCIgKyBmbXQuam9pbihcInxcIikgKyBcInxcIik7XG5cdGlmKHR5cGVvZiB2ICE9PSBcIm51bWJlclwiKSByZXR1cm4gWzQsIGZtdC5sZW5ndGggPT09IDQgfHwgbGF0Pi0xP2ZtdFtmbXQubGVuZ3RoLTFdOlwiQFwiXTtcblx0c3dpdGNoKGZtdC5sZW5ndGgpIHtcblx0XHRjYXNlIDE6IGZtdCA9IGxhdD4tMSA/IFtcIkdlbmVyYWxcIiwgXCJHZW5lcmFsXCIsIFwiR2VuZXJhbFwiLCBmbXRbMF1dIDogW2ZtdFswXSwgZm10WzBdLCBmbXRbMF0sIFwiQFwiXTsgYnJlYWs7XG5cdFx0Y2FzZSAyOiBmbXQgPSBsYXQ+LTEgPyBbZm10WzBdLCBmbXRbMF0sIGZtdFswXSwgZm10WzFdXSA6IFtmbXRbMF0sIGZtdFsxXSwgZm10WzBdLCBcIkBcIl07IGJyZWFrO1xuXHRcdGNhc2UgMzogZm10ID0gbGF0Pi0xID8gW2ZtdFswXSwgZm10WzFdLCBmbXRbMF0sIGZtdFsyXV0gOiBbZm10WzBdLCBmbXRbMV0sIGZtdFsyXSwgXCJAXCJdOyBicmVhaztcblx0XHRjYXNlIDQ6IGJyZWFrO1xuXHR9XG5cdHZhciBmZiA9IHYgPiAwID8gZm10WzBdIDogdiA8IDAgPyBmbXRbMV0gOiBmbXRbMl07XG5cdGlmKGZtdFswXS5pbmRleE9mKFwiW1wiKSA9PT0gLTEgJiYgZm10WzFdLmluZGV4T2YoXCJbXCIpID09PSAtMSkgcmV0dXJuIFtsLCBmZl07XG5cdGlmKGZtdFswXS5tYXRjaChjZnJlZ2V4KSAhPSBudWxsIHx8IGZtdFsxXS5tYXRjaChjZnJlZ2V4KSAhPSBudWxsKSB7XG5cdFx0dmFyIG0xID0gZm10WzBdLm1hdGNoKGNmcmVnZXgyKTtcblx0XHR2YXIgbTIgPSBmbXRbMV0ubWF0Y2goY2ZyZWdleDIpO1xuXHRcdHJldHVybiBjaGtjb25kKHYsIG0xKSA/IFtsLCBmbXRbMF1dIDogY2hrY29uZCh2LCBtMikgPyBbbCwgZm10WzFdXSA6IFtsLCBmbXRbbTEgIT0gbnVsbCAmJiBtMiAhPSBudWxsID8gMiA6IDFdXTtcblx0fVxuXHRyZXR1cm4gW2wsIGZmXTtcbn1cbmZ1bmN0aW9uIGZvcm1hdChmbXQsdixvKSB7XG5cdGlmKG8gPT0gbnVsbCkgbyA9IHt9O1xuXHR2YXIgc2ZtdCA9IFwiXCI7XG5cdHN3aXRjaCh0eXBlb2YgZm10KSB7XG5cdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0aWYoZm10ID09IFwibS9kL3l5XCIgJiYgby5kYXRlTkYpIHNmbXQgPSBvLmRhdGVORjtcblx0XHRcdGVsc2Ugc2ZtdCA9IGZtdDtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJudW1iZXJcIjpcblx0XHRcdGlmKGZtdCA9PSAxNCAmJiBvLmRhdGVORikgc2ZtdCA9IG8uZGF0ZU5GO1xuXHRcdFx0ZWxzZSBzZm10ID0gKG8udGFibGUgIT0gbnVsbCA/IChvLnRhYmxlKSA6IHRhYmxlX2ZtdClbZm10XTtcblx0XHRcdGlmKHNmbXQgPT0gbnVsbCkgc2ZtdCA9IChvLnRhYmxlICYmIG8udGFibGVbZGVmYXVsdF9tYXBbZm10XV0pIHx8IHRhYmxlX2ZtdFtkZWZhdWx0X21hcFtmbXRdXTtcblx0XHRcdGlmKHNmbXQgPT0gbnVsbCkgc2ZtdCA9IGRlZmF1bHRfc3RyW2ZtdF0gfHwgXCJHZW5lcmFsXCI7XG5cdFx0XHRicmVhaztcblx0fVxuXHRpZihpc2dlbmVyYWwoc2ZtdCwwKSkgcmV0dXJuIGdlbmVyYWxfZm10KHYsIG8pO1xuXHRpZih2IGluc3RhbmNlb2YgRGF0ZSkgdiA9IGRhdGVudW1fbG9jYWwodiwgby5kYXRlMTkwNCk7XG5cdHZhciBmID0gY2hvb3NlX2ZtdChzZm10LCB2KTtcblx0aWYoaXNnZW5lcmFsKGZbMV0pKSByZXR1cm4gZ2VuZXJhbF9mbXQodiwgbyk7XG5cdGlmKHYgPT09IHRydWUpIHYgPSBcIlRSVUVcIjsgZWxzZSBpZih2ID09PSBmYWxzZSkgdiA9IFwiRkFMU0VcIjtcblx0ZWxzZSBpZih2ID09PSBcIlwiIHx8IHYgPT0gbnVsbCkgcmV0dXJuIFwiXCI7XG5cdHJldHVybiBldmFsX2ZtdChmWzFdLCB2LCBvLCBmWzBdKTtcbn1cbmZ1bmN0aW9uIGxvYWRfZW50cnkoZm10LCBpZHgpIHtcblx0aWYodHlwZW9mIGlkeCAhPSAnbnVtYmVyJykge1xuXHRcdGlkeCA9ICtpZHggfHwgLTE7XG5mb3IodmFyIGkgPSAwOyBpIDwgMHgwMTg4OyArK2kpIHtcbmlmKHRhYmxlX2ZtdFtpXSA9PSB1bmRlZmluZWQpIHsgaWYoaWR4IDwgMCkgaWR4ID0gaTsgY29udGludWU7IH1cblx0XHRcdGlmKHRhYmxlX2ZtdFtpXSA9PSBmbXQpIHsgaWR4ID0gaTsgYnJlYWs7IH1cblx0XHR9XG5pZihpZHggPCAwKSBpZHggPSAweDE4Nztcblx0fVxudGFibGVfZm10W2lkeF0gPSBmbXQ7XG5cdHJldHVybiBpZHg7XG59XG5TU0YubG9hZCA9IGxvYWRfZW50cnk7XG5TU0YuX3RhYmxlID0gdGFibGVfZm10O1xuU1NGLmdldF90YWJsZSA9IGZ1bmN0aW9uIGdldF90YWJsZSgpIHsgcmV0dXJuIHRhYmxlX2ZtdDsgfTtcblNTRi5sb2FkX3RhYmxlID0gZnVuY3Rpb24gbG9hZF90YWJsZSh0YmwpIHtcblx0Zm9yKHZhciBpPTA7IGkhPTB4MDE4ODsgKytpKVxuXHRcdGlmKHRibFtpXSAhPT0gdW5kZWZpbmVkKSBsb2FkX2VudHJ5KHRibFtpXSwgaSk7XG59O1xuU1NGLmluaXRfdGFibGUgPSBpbml0X3RhYmxlO1xuU1NGLmZvcm1hdCA9IGZvcm1hdDtcbn07XG5tYWtlX3NzZihTU0YpO1xuLyogbWFwIGZyb20geGxtbCBuYW1lZCBmb3JtYXRzIHRvIFNTRiBUT0RPOiBsb2NhbGl6ZSAqL1xudmFyIFhMTUxGb3JtYXRNYXAvKntbc3RyaW5nXTpzdHJpbmd9Ki8gPSAoe1xuXHRcIkdlbmVyYWwgTnVtYmVyXCI6IFwiR2VuZXJhbFwiLFxuXHRcIkdlbmVyYWwgRGF0ZVwiOiBTU0YuX3RhYmxlWzIyXSxcblx0XCJMb25nIERhdGVcIjogXCJkZGRkLCBtbW1tIGRkLCB5eXl5XCIsXG5cdFwiTWVkaXVtIERhdGVcIjogU1NGLl90YWJsZVsxNV0sXG5cdFwiU2hvcnQgRGF0ZVwiOiBTU0YuX3RhYmxlWzE0XSxcblx0XCJMb25nIFRpbWVcIjogU1NGLl90YWJsZVsxOV0sXG5cdFwiTWVkaXVtIFRpbWVcIjogU1NGLl90YWJsZVsxOF0sXG5cdFwiU2hvcnQgVGltZVwiOiBTU0YuX3RhYmxlWzIwXSxcblx0XCJDdXJyZW5jeVwiOiAnXCIkXCIjLCMjMC4wMF8pO1tSZWRdXFxcXChcIiRcIiMsIyMwLjAwXFxcXCknLFxuXHRcIkZpeGVkXCI6IFNTRi5fdGFibGVbMl0sXG5cdFwiU3RhbmRhcmRcIjogU1NGLl90YWJsZVs0XSxcblx0XCJQZXJjZW50XCI6IFNTRi5fdGFibGVbMTBdLFxuXHRcIlNjaWVudGlmaWNcIjogU1NGLl90YWJsZVsxMV0sXG5cdFwiWWVzL05vXCI6ICdcIlllc1wiO1wiWWVzXCI7XCJOb1wiO0AnLFxuXHRcIlRydWUvRmFsc2VcIjogJ1wiVHJ1ZVwiO1wiVHJ1ZVwiO1wiRmFsc2VcIjtAJyxcblx0XCJPbi9PZmZcIjogJ1wiWWVzXCI7XCJZZXNcIjtcIk5vXCI7QCdcbn0pO1xuXG52YXIgU1NGSW1wbGljaXQvKntbbnVtYmVyXTpzdHJpbmd9Ki8gPSAoe1xuXHRcIjVcIjogJ1wiJFwiIywjIzBfKTtcXFxcKFwiJFwiIywjIzBcXFxcKScsXG5cdFwiNlwiOiAnXCIkXCIjLCMjMF8pO1tSZWRdXFxcXChcIiRcIiMsIyMwXFxcXCknLFxuXHRcIjdcIjogJ1wiJFwiIywjIzAuMDBfKTtcXFxcKFwiJFwiIywjIzAuMDBcXFxcKScsXG5cdFwiOFwiOiAnXCIkXCIjLCMjMC4wMF8pO1tSZWRdXFxcXChcIiRcIiMsIyMwLjAwXFxcXCknLFxuXHRcIjIzXCI6ICdHZW5lcmFsJywgXCIyNFwiOiAnR2VuZXJhbCcsIFwiMjVcIjogJ0dlbmVyYWwnLCBcIjI2XCI6ICdHZW5lcmFsJyxcblx0XCIyN1wiOiAnbS9kL3l5JywgXCIyOFwiOiAnbS9kL3l5JywgXCIyOVwiOiAnbS9kL3l5JywgXCIzMFwiOiAnbS9kL3l5JywgXCIzMVwiOiAnbS9kL3l5Jyxcblx0XCIzMlwiOiAnaDptbTpzcycsIFwiMzNcIjogJ2g6bW06c3MnLCBcIjM0XCI6ICdoOm1tOnNzJywgXCIzNVwiOiAnaDptbTpzcycsXG5cdFwiMzZcIjogJ20vZC95eScsXG5cdFwiNDFcIjogJ18oKiAjLCMjMF8pO18oKiBcXCgjLCMjMFxcKTtfKCogXCItXCJfKTtfKEBfKScsXG5cdFwiNDJcIjogJ18oXCIkXCIqICMsIyMwXyk7XyhcIiRcIiogXFwoIywjIzBcXCk7XyhcIiRcIiogXCItXCJfKTtfKEBfKScsXG5cdFwiNDNcIjogJ18oKiAjLCMjMC4wMF8pO18oKiBcXCgjLCMjMC4wMFxcKTtfKCogXCItXCI/P18pO18oQF8pJyxcblx0XCI0NFwiOiAnXyhcIiRcIiogIywjIzAuMDBfKTtfKFwiJFwiKiBcXCgjLCMjMC4wMFxcKTtfKFwiJFwiKiBcIi1cIj8/Xyk7XyhAXyknLFxuXHRcIjUwXCI6ICdtL2QveXknLCBcIjUxXCI6ICdtL2QveXknLCBcIjUyXCI6ICdtL2QveXknLCBcIjUzXCI6ICdtL2QveXknLCBcIjU0XCI6ICdtL2QveXknLFxuXHRcIjU1XCI6ICdtL2QveXknLCBcIjU2XCI6ICdtL2QveXknLCBcIjU3XCI6ICdtL2QveXknLCBcIjU4XCI6ICdtL2QveXknLFxuXHRcIjU5XCI6ICcwJyxcblx0XCI2MFwiOiAnMC4wMCcsXG5cdFwiNjFcIjogJyMsIyMwJyxcblx0XCI2MlwiOiAnIywjIzAuMDAnLFxuXHRcIjYzXCI6ICdcIiRcIiMsIyMwXyk7XFxcXChcIiRcIiMsIyMwXFxcXCknLFxuXHRcIjY0XCI6ICdcIiRcIiMsIyMwXyk7W1JlZF1cXFxcKFwiJFwiIywjIzBcXFxcKScsXG5cdFwiNjVcIjogJ1wiJFwiIywjIzAuMDBfKTtcXFxcKFwiJFwiIywjIzAuMDBcXFxcKScsXG5cdFwiNjZcIjogJ1wiJFwiIywjIzAuMDBfKTtbUmVkXVxcXFwoXCIkXCIjLCMjMC4wMFxcXFwpJyxcblx0XCI2N1wiOiAnMCUnLFxuXHRcIjY4XCI6ICcwLjAwJScsXG5cdFwiNjlcIjogJyMgPy8/Jyxcblx0XCI3MFwiOiAnIyA/Py8/PycsXG5cdFwiNzFcIjogJ20vZC95eScsXG5cdFwiNzJcIjogJ20vZC95eScsXG5cdFwiNzNcIjogJ2QtbW1tLXl5Jyxcblx0XCI3NFwiOiAnZC1tbW0nLFxuXHRcIjc1XCI6ICdtbW0teXknLFxuXHRcIjc2XCI6ICdoOm1tJyxcblx0XCI3N1wiOiAnaDptbTpzcycsXG5cdFwiNzhcIjogJ20vZC95eSBoOm1tJyxcblx0XCI3OVwiOiAnbW06c3MnLFxuXHRcIjgwXCI6ICdbaF06bW06c3MnLFxuXHRcIjgxXCI6ICdtbXNzLjAnXG59KTtcblxuLyogZGF0ZU5GIHBhcnNlIFRPRE86IG1vdmUgdG8gU1NGICovXG52YXIgZGF0ZU5GcmVnZXggPSAvW2REXSt8W21NXSt8W3lZZUVdK3xbSGhdK3xbU3NdKy9nO1xuZnVuY3Rpb24gZGF0ZU5GX3JlZ2V4KGRhdGVORikge1xuXHR2YXIgZm10ID0gdHlwZW9mIGRhdGVORiA9PSBcIm51bWJlclwiID8gU1NGLl90YWJsZVtkYXRlTkZdIDogZGF0ZU5GO1xuXHRmbXQgPSBmbXQucmVwbGFjZShkYXRlTkZyZWdleCwgXCIoXFxcXGQrKVwiKTtcblx0cmV0dXJuIG5ldyBSZWdFeHAoXCJeXCIgKyBmbXQgKyBcIiRcIik7XG59XG5mdW5jdGlvbiBkYXRlTkZfZml4KHN0ciwgZGF0ZU5GLCBtYXRjaCkge1xuXHR2YXIgWSA9IC0xLCBtID0gLTEsIGQgPSAtMSwgSCA9IC0xLCBNID0gLTEsIFMgPSAtMTtcblx0KGRhdGVORi5tYXRjaChkYXRlTkZyZWdleCl8fFtdKS5mb3JFYWNoKGZ1bmN0aW9uKG4sIGkpIHtcblx0XHR2YXIgdiA9IHBhcnNlSW50KG1hdGNoW2krMV0sIDEwKTtcblx0XHRzd2l0Y2gobi50b0xvd2VyQ2FzZSgpLmNoYXJBdCgwKSkge1xuXHRcdFx0Y2FzZSAneSc6IFkgPSB2OyBicmVhazsgY2FzZSAnZCc6IGQgPSB2OyBicmVhaztcblx0XHRcdGNhc2UgJ2gnOiBIID0gdjsgYnJlYWs7IGNhc2UgJ3MnOiBTID0gdjsgYnJlYWs7XG5cdFx0XHRjYXNlICdtJzogaWYoSCA+PSAwKSBNID0gdjsgZWxzZSBtID0gdjsgYnJlYWs7XG5cdFx0fVxuXHR9KTtcblx0aWYoUyA+PSAwICYmIE0gPT0gLTEgJiYgbSA+PSAwKSB7IE0gPSBtOyBtID0gLTE7IH1cblx0dmFyIGRhdGVzdHIgPSAoKFwiXCIgKyAoWT49MD9ZOiBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCkpKS5zbGljZSgtNCkgKyBcIi1cIiArIChcIjAwXCIgKyAobT49MT9tOjEpKS5zbGljZSgtMikgKyBcIi1cIiArIChcIjAwXCIgKyAoZD49MT9kOjEpKS5zbGljZSgtMikpO1xuXHRpZihkYXRlc3RyLmxlbmd0aCA9PSA3KSBkYXRlc3RyID0gXCIwXCIgKyBkYXRlc3RyO1xuXHRpZihkYXRlc3RyLmxlbmd0aCA9PSA4KSBkYXRlc3RyID0gXCIyMFwiICsgZGF0ZXN0cjtcblx0dmFyIHRpbWVzdHIgPSAoKFwiMDBcIiArIChIPj0wP0g6MCkpLnNsaWNlKC0yKSArIFwiOlwiICsgKFwiMDBcIiArIChNPj0wP006MCkpLnNsaWNlKC0yKSArIFwiOlwiICsgKFwiMDBcIiArIChTPj0wP1M6MCkpLnNsaWNlKC0yKSk7XG5cdGlmKEggPT0gLTEgJiYgTSA9PSAtMSAmJiBTID09IC0xKSByZXR1cm4gZGF0ZXN0cjtcblx0aWYoWSA9PSAtMSAmJiBtID09IC0xICYmIGQgPT0gLTEpIHJldHVybiB0aW1lc3RyO1xuXHRyZXR1cm4gZGF0ZXN0ciArIFwiVFwiICsgdGltZXN0cjtcbn1cblxudmFyIERPX05PVF9FWFBPUlRfQ0ZCID0gdHJ1ZTtcbi8qIGNmYi5qcyAoQykgMjAxMy1wcmVzZW50IFNoZWV0SlMgLS0gaHR0cDovL3NoZWV0anMuY29tICovXG4vKiB2aW06IHNldCB0cz0yOiAqL1xuLypqc2hpbnQgZXFudWxsOnRydWUgKi9cbi8qZXhwb3J0ZWQgQ0ZCICovXG4vKmdsb2JhbCBVaW50OEFycmF5OmZhbHNlLCBVaW50MTZBcnJheTpmYWxzZSAqL1xuXG4vKiBjcmMzMi5qcyAoQykgMjAxNC1wcmVzZW50IFNoZWV0SlMgLS0gaHR0cDovL3NoZWV0anMuY29tICovXG4vKiB2aW06IHNldCB0cz0yOiAqL1xuLypleHBvcnRlZCBDUkMzMiAqL1xudmFyIENSQzMyO1xuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG5cdC8qanNoaW50IGlnbm9yZTpzdGFydCAqL1xuXHQvKmVzbGludC1kaXNhYmxlICovXG5cdGZhY3RvcnkoQ1JDMzIgPSB7fSk7XG5cdC8qZXNsaW50LWVuYWJsZSAqL1xuXHQvKmpzaGludCBpZ25vcmU6ZW5kICovXG59KGZ1bmN0aW9uKENSQzMyKSB7XG5DUkMzMi52ZXJzaW9uID0gJzEuMi4wJztcbi8qIHNlZSBwZXJmL2NyYzMydGFibGUuanMgKi9cbi8qZ2xvYmFsIEludDMyQXJyYXkgKi9cbmZ1bmN0aW9uIHNpZ25lZF9jcmNfdGFibGUoKSB7XG5cdHZhciBjID0gMCwgdGFibGUgPSBuZXcgQXJyYXkoMjU2KTtcblxuXHRmb3IodmFyIG4gPTA7IG4gIT0gMjU2OyArK24pe1xuXHRcdGMgPSBuO1xuXHRcdGMgPSAoKGMmMSkgPyAoLTMwNjY3NDkxMiBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuXHRcdGMgPSAoKGMmMSkgPyAoLTMwNjY3NDkxMiBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuXHRcdGMgPSAoKGMmMSkgPyAoLTMwNjY3NDkxMiBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuXHRcdGMgPSAoKGMmMSkgPyAoLTMwNjY3NDkxMiBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuXHRcdGMgPSAoKGMmMSkgPyAoLTMwNjY3NDkxMiBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuXHRcdGMgPSAoKGMmMSkgPyAoLTMwNjY3NDkxMiBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuXHRcdGMgPSAoKGMmMSkgPyAoLTMwNjY3NDkxMiBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuXHRcdGMgPSAoKGMmMSkgPyAoLTMwNjY3NDkxMiBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuXHRcdHRhYmxlW25dID0gYztcblx0fVxuXG5cdHJldHVybiB0eXBlb2YgSW50MzJBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBuZXcgSW50MzJBcnJheSh0YWJsZSkgOiB0YWJsZTtcbn1cblxudmFyIFQgPSBzaWduZWRfY3JjX3RhYmxlKCk7XG5mdW5jdGlvbiBjcmMzMl9ic3RyKGJzdHIsIHNlZWQpIHtcblx0dmFyIEMgPSBzZWVkIF4gLTEsIEwgPSBic3RyLmxlbmd0aCAtIDE7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBMOykge1xuXHRcdEMgPSAoQz4+PjgpIF4gVFsoQ15ic3RyLmNoYXJDb2RlQXQoaSsrKSkmMHhGRl07XG5cdFx0QyA9IChDPj4+OCkgXiBUWyhDXmJzdHIuY2hhckNvZGVBdChpKyspKSYweEZGXTtcblx0fVxuXHRpZihpID09PSBMKSBDID0gKEM+Pj44KSBeIFRbKEMgXiBic3RyLmNoYXJDb2RlQXQoaSkpJjB4RkZdO1xuXHRyZXR1cm4gQyBeIC0xO1xufVxuXG5mdW5jdGlvbiBjcmMzMl9idWYoYnVmLCBzZWVkKSB7XG5cdGlmKGJ1Zi5sZW5ndGggPiAxMDAwMCkgcmV0dXJuIGNyYzMyX2J1Zl84KGJ1Ziwgc2VlZCk7XG5cdHZhciBDID0gc2VlZCBeIC0xLCBMID0gYnVmLmxlbmd0aCAtIDM7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBMOykge1xuXHRcdEMgPSAoQz4+PjgpIF4gVFsoQ15idWZbaSsrXSkmMHhGRl07XG5cdFx0QyA9IChDPj4+OCkgXiBUWyhDXmJ1ZltpKytdKSYweEZGXTtcblx0XHRDID0gKEM+Pj44KSBeIFRbKENeYnVmW2krK10pJjB4RkZdO1xuXHRcdEMgPSAoQz4+PjgpIF4gVFsoQ15idWZbaSsrXSkmMHhGRl07XG5cdH1cblx0d2hpbGUoaSA8IEwrMykgQyA9IChDPj4+OCkgXiBUWyhDXmJ1ZltpKytdKSYweEZGXTtcblx0cmV0dXJuIEMgXiAtMTtcbn1cblxuZnVuY3Rpb24gY3JjMzJfYnVmXzgoYnVmLCBzZWVkKSB7XG5cdHZhciBDID0gc2VlZCBeIC0xLCBMID0gYnVmLmxlbmd0aCAtIDc7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBMOykge1xuXHRcdEMgPSAoQz4+PjgpIF4gVFsoQ15idWZbaSsrXSkmMHhGRl07XG5cdFx0QyA9IChDPj4+OCkgXiBUWyhDXmJ1ZltpKytdKSYweEZGXTtcblx0XHRDID0gKEM+Pj44KSBeIFRbKENeYnVmW2krK10pJjB4RkZdO1xuXHRcdEMgPSAoQz4+PjgpIF4gVFsoQ15idWZbaSsrXSkmMHhGRl07XG5cdFx0QyA9IChDPj4+OCkgXiBUWyhDXmJ1ZltpKytdKSYweEZGXTtcblx0XHRDID0gKEM+Pj44KSBeIFRbKENeYnVmW2krK10pJjB4RkZdO1xuXHRcdEMgPSAoQz4+PjgpIF4gVFsoQ15idWZbaSsrXSkmMHhGRl07XG5cdFx0QyA9IChDPj4+OCkgXiBUWyhDXmJ1ZltpKytdKSYweEZGXTtcblx0fVxuXHR3aGlsZShpIDwgTCs3KSBDID0gKEM+Pj44KSBeIFRbKENeYnVmW2krK10pJjB4RkZdO1xuXHRyZXR1cm4gQyBeIC0xO1xufVxuXG5mdW5jdGlvbiBjcmMzMl9zdHIoc3RyLCBzZWVkKSB7XG5cdHZhciBDID0gc2VlZCBeIC0xO1xuXHRmb3IodmFyIGkgPSAwLCBMPXN0ci5sZW5ndGgsIGMsIGQ7IGkgPCBMOykge1xuXHRcdGMgPSBzdHIuY2hhckNvZGVBdChpKyspO1xuXHRcdGlmKGMgPCAweDgwKSB7XG5cdFx0XHRDID0gKEM+Pj44KSBeIFRbKEMgXiBjKSYweEZGXTtcblx0XHR9IGVsc2UgaWYoYyA8IDB4ODAwKSB7XG5cdFx0XHRDID0gKEM+Pj44KSBeIFRbKEMgXiAoMTkyfCgoYz4+NikmMzEpKSkmMHhGRl07XG5cdFx0XHRDID0gKEM+Pj44KSBeIFRbKEMgXiAoMTI4fChjJjYzKSkpJjB4RkZdO1xuXHRcdH0gZWxzZSBpZihjID49IDB4RDgwMCAmJiBjIDwgMHhFMDAwKSB7XG5cdFx0XHRjID0gKGMmMTAyMykrNjQ7IGQgPSBzdHIuY2hhckNvZGVBdChpKyspJjEwMjM7XG5cdFx0XHRDID0gKEM+Pj44KSBeIFRbKEMgXiAoMjQwfCgoYz4+OCkmNykpKSYweEZGXTtcblx0XHRcdEMgPSAoQz4+PjgpIF4gVFsoQyBeICgxMjh8KChjPj4yKSY2MykpKSYweEZGXTtcblx0XHRcdEMgPSAoQz4+PjgpIF4gVFsoQyBeICgxMjh8KChkPj42KSYxNSl8KChjJjMpPDw0KSkpJjB4RkZdO1xuXHRcdFx0QyA9IChDPj4+OCkgXiBUWyhDIF4gKDEyOHwoZCY2MykpKSYweEZGXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QyA9IChDPj4+OCkgXiBUWyhDIF4gKDIyNHwoKGM+PjEyKSYxNSkpKSYweEZGXTtcblx0XHRcdEMgPSAoQz4+PjgpIF4gVFsoQyBeICgxMjh8KChjPj42KSY2MykpKSYweEZGXTtcblx0XHRcdEMgPSAoQz4+PjgpIF4gVFsoQyBeICgxMjh8KGMmNjMpKSkmMHhGRl07XG5cdFx0fVxuXHR9XG5cdHJldHVybiBDIF4gLTE7XG59XG5DUkMzMi50YWJsZSA9IFQ7XG5DUkMzMi5ic3RyID0gY3JjMzJfYnN0cjtcbkNSQzMyLmJ1ZiA9IGNyYzMyX2J1ZjtcbkNSQzMyLnN0ciA9IGNyYzMyX3N0cjtcbn0pKTtcbi8qIFtNUy1DRkJdIHYyMDE3MTIwMSAqL1xudmFyIENGQiA9IChmdW5jdGlvbiBfQ0ZCKCl7XG52YXIgZXhwb3J0cyA9IHt9O1xuZXhwb3J0cy52ZXJzaW9uID0gJzEuMS40Jztcbi8qIFtNUy1DRkJdIDIuNi40ICovXG5mdW5jdGlvbiBuYW1lY21wKGwsIHIpIHtcblx0dmFyIEwgPSBsLnNwbGl0KFwiL1wiKSwgUiA9IHIuc3BsaXQoXCIvXCIpO1xuXHRmb3IodmFyIGkgPSAwLCBjID0gMCwgWiA9IE1hdGgubWluKEwubGVuZ3RoLCBSLmxlbmd0aCk7IGkgPCBaOyArK2kpIHtcblx0XHRpZigoYyA9IExbaV0ubGVuZ3RoIC0gUltpXS5sZW5ndGgpKSByZXR1cm4gYztcblx0XHRpZihMW2ldICE9IFJbaV0pIHJldHVybiBMW2ldIDwgUltpXSA/IC0xIDogMTtcblx0fVxuXHRyZXR1cm4gTC5sZW5ndGggLSBSLmxlbmd0aDtcbn1cbmZ1bmN0aW9uIGRpcm5hbWUocCkge1xuXHRpZihwLmNoYXJBdChwLmxlbmd0aCAtIDEpID09IFwiL1wiKSByZXR1cm4gKHAuc2xpY2UoMCwtMSkuaW5kZXhPZihcIi9cIikgPT09IC0xKSA/IHAgOiBkaXJuYW1lKHAuc2xpY2UoMCwgLTEpKTtcblx0dmFyIGMgPSBwLmxhc3RJbmRleE9mKFwiL1wiKTtcblx0cmV0dXJuIChjID09PSAtMSkgPyBwIDogcC5zbGljZSgwLCBjKzEpO1xufVxuXG5mdW5jdGlvbiBmaWxlbmFtZShwKSB7XG5cdGlmKHAuY2hhckF0KHAubGVuZ3RoIC0gMSkgPT0gXCIvXCIpIHJldHVybiBmaWxlbmFtZShwLnNsaWNlKDAsIC0xKSk7XG5cdHZhciBjID0gcC5sYXN0SW5kZXhPZihcIi9cIik7XG5cdHJldHVybiAoYyA9PT0gLTEpID8gcCA6IHAuc2xpY2UoYysxKTtcbn1cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4vKiBET1MgRGF0ZSBmb3JtYXQ6XG4gICBoaWdofFlZWVlZWVltLm1tbWRkZGRkLkhISEhITU1NLk1NTVNTU1NTfGxvd1xuICAgYWRkIDE5ODAgdG8gc3RvcmVkIHllYXJcbiAgIHN0b3JlZCBzZWNvbmQgc2hvdWxkIGJlIGRvdWJsZWRcbiovXG5cbi8qIHdyaXRlIEpTIGRhdGUgdG8gYnVmIGFzIGEgRE9TIGRhdGUgKi9cbmZ1bmN0aW9uIHdyaXRlX2Rvc19kYXRlKGJ1ZiwgZGF0ZSkge1xuXHRpZih0eXBlb2YgZGF0ZSA9PT0gXCJzdHJpbmdcIikgZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuXHR2YXIgaG1zID0gZGF0ZS5nZXRIb3VycygpO1xuXHRobXMgPSBobXMgPDwgNiB8IGRhdGUuZ2V0TWludXRlcygpO1xuXHRobXMgPSBobXMgPDwgNSB8IChkYXRlLmdldFNlY29uZHMoKT4+PjEpO1xuXHRidWYud3JpdGVfc2hpZnQoMiwgaG1zKTtcblx0dmFyIHltZCA9IChkYXRlLmdldEZ1bGxZZWFyKCkgLSAxOTgwKTtcblx0eW1kID0geW1kIDw8IDQgfCAoZGF0ZS5nZXRNb250aCgpKzEpO1xuXHR5bWQgPSB5bWQgPDwgNSB8IGRhdGUuZ2V0RGF0ZSgpO1xuXHRidWYud3JpdGVfc2hpZnQoMiwgeW1kKTtcbn1cblxuLyogcmVhZCBmb3VyIGJ5dGVzIGZyb20gYnVmIGFuZCBpbnRlcnByZXQgYXMgYSBET1MgZGF0ZSAqL1xuZnVuY3Rpb24gcGFyc2VfZG9zX2RhdGUoYnVmKSB7XG5cdHZhciBobXMgPSBidWYucmVhZF9zaGlmdCgyKSAmIDB4RkZGRjtcblx0dmFyIHltZCA9IGJ1Zi5yZWFkX3NoaWZ0KDIpICYgMHhGRkZGO1xuXHR2YXIgdmFsID0gbmV3IERhdGUoKTtcblx0dmFyIGQgPSB5bWQgJiAweDFGOyB5bWQgPj4+PSA1O1xuXHR2YXIgbSA9IHltZCAmIDB4MEY7IHltZCA+Pj49IDQ7XG5cdHZhbC5zZXRNaWxsaXNlY29uZHMoMCk7XG5cdHZhbC5zZXRGdWxsWWVhcih5bWQgKyAxOTgwKTtcblx0dmFsLnNldE1vbnRoKG0tMSk7XG5cdHZhbC5zZXREYXRlKGQpO1xuXHR2YXIgUyA9IGhtcyAmIDB4MUY7IGhtcyA+Pj49IDU7XG5cdHZhciBNID0gaG1zICYgMHgzRjsgaG1zID4+Pj0gNjtcblx0dmFsLnNldEhvdXJzKGhtcyk7XG5cdHZhbC5zZXRNaW51dGVzKE0pO1xuXHR2YWwuc2V0U2Vjb25kcyhTPDwxKTtcblx0cmV0dXJuIHZhbDtcbn1cbmZ1bmN0aW9uIHBhcnNlX2V4dHJhX2ZpZWxkKGJsb2IpIHtcblx0cHJlcF9ibG9iKGJsb2IsIDApO1xuXHR2YXIgbyA9IHt9O1xuXHR2YXIgZmxhZ3MgPSAwO1xuXHR3aGlsZShibG9iLmwgPD0gYmxvYi5sZW5ndGggLSA0KSB7XG5cdFx0dmFyIHR5cGUgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIHN6ID0gYmxvYi5yZWFkX3NoaWZ0KDIpLCB0Z3QgPSBibG9iLmwgKyBzejtcblx0XHR2YXIgcCA9IHt9O1xuXHRcdHN3aXRjaCh0eXBlKSB7XG5cdFx0XHQvKiBVTklYLXN0eWxlIFRpbWVzdGFtcHMgKi9cblx0XHRcdGNhc2UgMHg1NDU1OiB7XG5cdFx0XHRcdGZsYWdzID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRcdFx0XHRpZihmbGFncyAmIDEpIHAubXRpbWUgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0XHRcdC8qIGZvciBzb21lIHJlYXNvbiwgQ0QgZmxhZyBjb3JyZXNwb25kcyB0byBMRkggKi9cblx0XHRcdFx0aWYoc3ogPiA1KSB7XG5cdFx0XHRcdFx0aWYoZmxhZ3MgJiAyKSBwLmF0aW1lID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdFx0XHRcdGlmKGZsYWdzICYgNCkgcC5jdGltZSA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihwLm10aW1lKSBwLm10ID0gbmV3IERhdGUocC5tdGltZSoxMDAwKTtcblx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRibG9iLmwgPSB0Z3Q7XG5cdFx0b1t0eXBlXSA9IHA7XG5cdH1cblx0cmV0dXJuIG87XG59XG52YXIgZnM7XG5mdW5jdGlvbiBnZXRfZnMoKSB7IHJldHVybiBmcyB8fCAoZnMgPSByZXF1aXJlKCdmcycpKTsgfVxuZnVuY3Rpb24gcGFyc2UoZmlsZSwgb3B0aW9ucykge1xuaWYoZmlsZVswXSA9PSAweDUwICYmIGZpbGVbMV0gPT0gMHg0YikgcmV0dXJuIHBhcnNlX3ppcChmaWxlLCBvcHRpb25zKTtcbmlmKGZpbGUubGVuZ3RoIDwgNTEyKSB0aHJvdyBuZXcgRXJyb3IoXCJDRkIgZmlsZSBzaXplIFwiICsgZmlsZS5sZW5ndGggKyBcIiA8IDUxMlwiKTtcbnZhciBtdmVyID0gMztcbnZhciBzc3ogPSA1MTI7XG52YXIgbm1mcyA9IDA7IC8vIG51bWJlciBvZiBtaW5pIEZBVCBzZWN0b3JzXG52YXIgZGlmYXRfc2VjX2NudCA9IDA7XG52YXIgZGlyX3N0YXJ0ID0gMDtcbnZhciBtaW5pZmF0X3N0YXJ0ID0gMDtcbnZhciBkaWZhdF9zdGFydCA9IDA7XG5cbnZhciBmYXRfYWRkcnMgPSBbXTsgLy8gbG9jYXRpb25zIG9mIEZBVCBzZWN0b3JzXG5cbi8qIFtNUy1DRkJdIDIuMiBDb21wb3VuZCBGaWxlIEhlYWRlciAqL1xudmFyIGJsb2IgPSBmaWxlLnNsaWNlKDAsNTEyKTtcbnByZXBfYmxvYihibG9iLCAwKTtcblxuLyogbWFqb3IgdmVyc2lvbiAqL1xudmFyIG12ID0gY2hlY2tfZ2V0X212ZXIoYmxvYik7XG5tdmVyID0gbXZbMF07XG5zd2l0Y2gobXZlcikge1xuXHRjYXNlIDM6IHNzeiA9IDUxMjsgYnJlYWs7IGNhc2UgNDogc3N6ID0gNDA5NjsgYnJlYWs7XG5cdGNhc2UgMDogaWYobXZbMV0gPT0gMCkgcmV0dXJuIHBhcnNlX3ppcChmaWxlLCBvcHRpb25zKTtcblx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJNYWpvciBWZXJzaW9uOiBFeHBlY3RlZCAzIG9yIDQgc2F3IFwiICsgbXZlcik7XG59XG5cbi8qIHJlcHJvY2VzcyBoZWFkZXIgKi9cbmlmKHNzeiAhPT0gNTEyKSB7IGJsb2IgPSBmaWxlLnNsaWNlKDAsc3N6KTsgcHJlcF9ibG9iKGJsb2IsIDI4IC8qIGJsb2IubCAqLyk7IH1cbi8qIFNhdmUgaGVhZGVyIGZvciBmaW5hbCBvYmplY3QgKi9cbnZhciBoZWFkZXIgPSBmaWxlLnNsaWNlKDAsc3N6KTtcblxuY2hlY2tfc2hpZnRzKGJsb2IsIG12ZXIpO1xuXG4vLyBOdW1iZXIgb2YgRGlyZWN0b3J5IFNlY3RvcnNcbnZhciBkaXJfY250ID0gYmxvYi5yZWFkX3NoaWZ0KDQsICdpJyk7XG5pZihtdmVyID09PSAzICYmIGRpcl9jbnQgIT09IDApIHRocm93IG5ldyBFcnJvcignIyBEaXJlY3RvcnkgU2VjdG9yczogRXhwZWN0ZWQgMCBzYXcgJyArIGRpcl9jbnQpO1xuXG4vLyBOdW1iZXIgb2YgRkFUIFNlY3RvcnNcbmJsb2IubCArPSA0O1xuXG4vLyBGaXJzdCBEaXJlY3RvcnkgU2VjdG9yIExvY2F0aW9uXG5kaXJfc3RhcnQgPSBibG9iLnJlYWRfc2hpZnQoNCwgJ2knKTtcblxuLy8gVHJhbnNhY3Rpb24gU2lnbmF0dXJlXG5ibG9iLmwgKz0gNDtcblxuLy8gTWluaSBTdHJlYW0gQ3V0b2ZmIFNpemVcbmJsb2IuY2hrKCcwMDEwMDAwMCcsICdNaW5pIFN0cmVhbSBDdXRvZmYgU2l6ZTogJyk7XG5cbi8vIEZpcnN0IE1pbmkgRkFUIFNlY3RvciBMb2NhdGlvblxubWluaWZhdF9zdGFydCA9IGJsb2IucmVhZF9zaGlmdCg0LCAnaScpO1xuXG4vLyBOdW1iZXIgb2YgTWluaSBGQVQgU2VjdG9yc1xubm1mcyA9IGJsb2IucmVhZF9zaGlmdCg0LCAnaScpO1xuXG4vLyBGaXJzdCBESUZBVCBzZWN0b3IgbG9jYXRpb25cbmRpZmF0X3N0YXJ0ID0gYmxvYi5yZWFkX3NoaWZ0KDQsICdpJyk7XG5cbi8vIE51bWJlciBvZiBESUZBVCBTZWN0b3JzXG5kaWZhdF9zZWNfY250ID0gYmxvYi5yZWFkX3NoaWZ0KDQsICdpJyk7XG5cbi8vIEdyYWIgRkFUIFNlY3RvciBMb2NhdGlvbnNcbmZvcih2YXIgcSA9IC0xLCBqID0gMDsgaiA8IDEwOTsgKytqKSB7IC8qIDEwOSA9ICg1MTIgLSBibG9iLmwpPj4+MjsgKi9cblx0cSA9IGJsb2IucmVhZF9zaGlmdCg0LCAnaScpO1xuXHRpZihxPDApIGJyZWFrO1xuXHRmYXRfYWRkcnNbal0gPSBxO1xufVxuXG4vKiogQnJlYWsgdGhlIGZpbGUgdXAgaW50byBzZWN0b3JzICovXG52YXIgc2VjdG9ycyA9IHNlY3RvcmlmeShmaWxlLCBzc3opO1xuXG5zbGV1dGhfZmF0KGRpZmF0X3N0YXJ0LCBkaWZhdF9zZWNfY250LCBzZWN0b3JzLCBzc3osIGZhdF9hZGRycyk7XG5cbi8qKiBDaGFpbnMgKi9cbnZhciBzZWN0b3JfbGlzdCA9IG1ha2Vfc2VjdG9yX2xpc3Qoc2VjdG9ycywgZGlyX3N0YXJ0LCBmYXRfYWRkcnMsIHNzeik7XG5cbnNlY3Rvcl9saXN0W2Rpcl9zdGFydF0ubmFtZSA9IFwiIURpcmVjdG9yeVwiO1xuaWYobm1mcyA+IDAgJiYgbWluaWZhdF9zdGFydCAhPT0gRU5ET0ZDSEFJTikgc2VjdG9yX2xpc3RbbWluaWZhdF9zdGFydF0ubmFtZSA9IFwiIU1pbmlGQVRcIjtcbnNlY3Rvcl9saXN0W2ZhdF9hZGRyc1swXV0ubmFtZSA9IFwiIUZBVFwiO1xuc2VjdG9yX2xpc3QuZmF0X2FkZHJzID0gZmF0X2FkZHJzO1xuc2VjdG9yX2xpc3Quc3N6ID0gc3N6O1xuXG4vKiBbTVMtQ0ZCXSAyLjYuMSBDb21wb3VuZCBGaWxlIERpcmVjdG9yeSBFbnRyeSAqL1xudmFyIGZpbGVzID0ge30sIFBhdGhzID0gW10sIEZpbGVJbmRleCA9IFtdLCBGdWxsUGF0aHMgPSBbXTtcbnJlYWRfZGlyZWN0b3J5KGRpcl9zdGFydCwgc2VjdG9yX2xpc3QsIHNlY3RvcnMsIFBhdGhzLCBubWZzLCBmaWxlcywgRmlsZUluZGV4LCBtaW5pZmF0X3N0YXJ0KTtcblxuYnVpbGRfZnVsbF9wYXRocyhGaWxlSW5kZXgsIEZ1bGxQYXRocywgUGF0aHMpO1xuUGF0aHMuc2hpZnQoKTtcblxudmFyIG8gPSB7XG5cdEZpbGVJbmRleDogRmlsZUluZGV4LFxuXHRGdWxsUGF0aHM6IEZ1bGxQYXRoc1xufTtcblxuLy8gJEZsb3dJZ25vcmVcbmlmKG9wdGlvbnMgJiYgb3B0aW9ucy5yYXcpIG8ucmF3ID0ge2hlYWRlcjogaGVhZGVyLCBzZWN0b3JzOiBzZWN0b3JzfTtcbnJldHVybiBvO1xufSAvLyBwYXJzZVxuXG4vKiBbTVMtQ0ZCXSAyLjIgQ29tcG91bmQgRmlsZSBIZWFkZXIgLS0gcmVhZCB1cCB0byBtYWpvciB2ZXJzaW9uICovXG5mdW5jdGlvbiBjaGVja19nZXRfbXZlcihibG9iKSB7XG5cdGlmKGJsb2JbYmxvYi5sXSA9PSAweDUwICYmIGJsb2JbYmxvYi5sICsgMV0gPT0gMHg0YikgcmV0dXJuIFswLCAwXTtcblx0Ly8gaGVhZGVyIHNpZ25hdHVyZSA4XG5cdGJsb2IuY2hrKEhFQURFUl9TSUdOQVRVUkUsICdIZWFkZXIgU2lnbmF0dXJlOiAnKTtcblxuXHQvLyBjbHNpZCAxNlxuXHQvL2Jsb2IuY2hrKEhFQURFUl9DTFNJRCwgJ0NMU0lEOiAnKTtcblx0YmxvYi5sICs9IDE2O1xuXG5cdC8vIG1pbm9yIHZlcnNpb24gMlxuXHR2YXIgbXZlciA9IGJsb2IucmVhZF9zaGlmdCgyLCAndScpO1xuXG5cdHJldHVybiBbYmxvYi5yZWFkX3NoaWZ0KDIsJ3UnKSwgbXZlcl07XG59XG5mdW5jdGlvbiBjaGVja19zaGlmdHMoYmxvYiwgbXZlcikge1xuXHR2YXIgc2hpZnQgPSAweDA5O1xuXG5cdC8vIEJ5dGUgT3JkZXJcblx0Ly9ibG9iLmNoaygnZmVmZicsICdCeXRlIE9yZGVyOiAnKTsgLy8gbm90ZTogc29tZSB3cml0ZXJzIHB1dCAweGZmZmZcblx0YmxvYi5sICs9IDI7XG5cblx0Ly8gU2VjdG9yIFNoaWZ0XG5cdHN3aXRjaCgoc2hpZnQgPSBibG9iLnJlYWRfc2hpZnQoMikpKSB7XG5cdFx0Y2FzZSAweDA5OiBpZihtdmVyICE9IDMpIHRocm93IG5ldyBFcnJvcignU2VjdG9yIFNoaWZ0OiBFeHBlY3RlZCA5IHNhdyAnICsgc2hpZnQpOyBicmVhaztcblx0XHRjYXNlIDB4MGM6IGlmKG12ZXIgIT0gNCkgdGhyb3cgbmV3IEVycm9yKCdTZWN0b3IgU2hpZnQ6IEV4cGVjdGVkIDEyIHNhdyAnICsgc2hpZnQpOyBicmVhaztcblx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ1NlY3RvciBTaGlmdDogRXhwZWN0ZWQgOSBvciAxMiBzYXcgJyArIHNoaWZ0KTtcblx0fVxuXG5cdC8vIE1pbmkgU2VjdG9yIFNoaWZ0XG5cdGJsb2IuY2hrKCcwNjAwJywgJ01pbmkgU2VjdG9yIFNoaWZ0OiAnKTtcblxuXHQvLyBSZXNlcnZlZFxuXHRibG9iLmNoaygnMDAwMDAwMDAwMDAwJywgJ1Jlc2VydmVkOiAnKTtcbn1cblxuLyoqIEJyZWFrIHRoZSBmaWxlIHVwIGludG8gc2VjdG9ycyAqL1xuZnVuY3Rpb24gc2VjdG9yaWZ5KGZpbGUsIHNzeikge1xuXHR2YXIgbnNlY3RvcnMgPSBNYXRoLmNlaWwoZmlsZS5sZW5ndGgvc3N6KS0xO1xuXHR2YXIgc2VjdG9ycyA9IFtdO1xuXHRmb3IodmFyIGk9MTsgaSA8IG5zZWN0b3JzOyArK2kpIHNlY3RvcnNbaS0xXSA9IGZpbGUuc2xpY2UoaSpzc3osKGkrMSkqc3N6KTtcblx0c2VjdG9yc1tuc2VjdG9ycy0xXSA9IGZpbGUuc2xpY2UobnNlY3RvcnMqc3N6KTtcblx0cmV0dXJuIHNlY3RvcnM7XG59XG5cbi8qIFtNUy1DRkJdIDIuNi40IFJlZC1CbGFjayBUcmVlICovXG5mdW5jdGlvbiBidWlsZF9mdWxsX3BhdGhzKEZJLCBGUCwgUGF0aHMpIHtcblx0dmFyIGkgPSAwLCBMID0gMCwgUiA9IDAsIEMgPSAwLCBqID0gMCwgcGwgPSBQYXRocy5sZW5ndGg7XG5cdHZhciBkYWQgPSBbXSwgcSA9IFtdO1xuXG5cdGZvcig7IGkgPCBwbDsgKytpKSB7IGRhZFtpXT1xW2ldPWk7IEZQW2ldPVBhdGhzW2ldOyB9XG5cblx0Zm9yKDsgaiA8IHEubGVuZ3RoOyArK2opIHtcblx0XHRpID0gcVtqXTtcblx0XHRMID0gRklbaV0uTDsgUiA9IEZJW2ldLlI7IEMgPSBGSVtpXS5DO1xuXHRcdGlmKGRhZFtpXSA9PT0gaSkge1xuXHRcdFx0aWYoTCAhPT0gLTEgLypOT1NUUkVBTSovICYmIGRhZFtMXSAhPT0gTCkgZGFkW2ldID0gZGFkW0xdO1xuXHRcdFx0aWYoUiAhPT0gLTEgJiYgZGFkW1JdICE9PSBSKSBkYWRbaV0gPSBkYWRbUl07XG5cdFx0fVxuXHRcdGlmKEMgIT09IC0xIC8qTk9TVFJFQU0qLykgZGFkW0NdID0gaTtcblx0XHRpZihMICE9PSAtMSAmJiBpICE9IGRhZFtpXSkgeyBkYWRbTF0gPSBkYWRbaV07IGlmKHEubGFzdEluZGV4T2YoTCkgPCBqKSBxLnB1c2goTCk7IH1cblx0XHRpZihSICE9PSAtMSAmJiBpICE9IGRhZFtpXSkgeyBkYWRbUl0gPSBkYWRbaV07IGlmKHEubGFzdEluZGV4T2YoUikgPCBqKSBxLnB1c2goUik7IH1cblx0fVxuXHRmb3IoaT0xOyBpIDwgcGw7ICsraSkgaWYoZGFkW2ldID09PSBpKSB7XG5cdFx0aWYoUiAhPT0gLTEgLypOT1NUUkVBTSovICYmIGRhZFtSXSAhPT0gUikgZGFkW2ldID0gZGFkW1JdO1xuXHRcdGVsc2UgaWYoTCAhPT0gLTEgJiYgZGFkW0xdICE9PSBMKSBkYWRbaV0gPSBkYWRbTF07XG5cdH1cblxuXHRmb3IoaT0xOyBpIDwgcGw7ICsraSkge1xuXHRcdGlmKEZJW2ldLnR5cGUgPT09IDAgLyogdW5rbm93biAqLykgY29udGludWU7XG5cdFx0aiA9IGk7XG5cdFx0aWYoaiAhPSBkYWRbal0pIGRvIHtcblx0XHRcdGogPSBkYWRbal07XG5cdFx0XHRGUFtpXSA9IEZQW2pdICsgXCIvXCIgKyBGUFtpXTtcblx0XHR9IHdoaWxlIChqICE9PSAwICYmIC0xICE9PSBkYWRbal0gJiYgaiAhPSBkYWRbal0pO1xuXHRcdGRhZFtpXSA9IC0xO1xuXHR9XG5cblx0RlBbMF0gKz0gXCIvXCI7XG5cdGZvcihpPTE7IGkgPCBwbDsgKytpKSB7XG5cdFx0aWYoRklbaV0udHlwZSAhPT0gMiAvKiBzdHJlYW0gKi8pIEZQW2ldICs9IFwiL1wiO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGdldF9tZmF0X2VudHJ5KGVudHJ5LCBwYXlsb2FkLCBtaW5pKSB7XG5cdHZhciBzdGFydCA9IGVudHJ5LnN0YXJ0LCBzaXplID0gZW50cnkuc2l6ZTtcblx0Ly9yZXR1cm4gKHBheWxvYWQuc2xpY2Uoc3RhcnQqTVNTWiwgc3RhcnQqTVNTWiArIHNpemUpKTtcblx0dmFyIG8gPSBbXTtcblx0dmFyIGlkeCA9IHN0YXJ0O1xuXHR3aGlsZShtaW5pICYmIHNpemUgPiAwICYmIGlkeCA+PSAwKSB7XG5cdFx0by5wdXNoKHBheWxvYWQuc2xpY2UoaWR4ICogTVNTWiwgaWR4ICogTVNTWiArIE1TU1opKTtcblx0XHRzaXplIC09IE1TU1o7XG5cdFx0aWR4ID0gX19yZWFkSW50MzJMRShtaW5pLCBpZHggKiA0KTtcblx0fVxuXHRpZihvLmxlbmd0aCA9PT0gMCkgcmV0dXJuIChuZXdfYnVmKDApKTtcblx0cmV0dXJuIChiY29uY2F0KG8pLnNsaWNlKDAsIGVudHJ5LnNpemUpKTtcbn1cblxuLyoqIENoYXNlIGRvd24gdGhlIHJlc3Qgb2YgdGhlIERJRkFUIGNoYWluIHRvIGJ1aWxkIGEgY29tcHJlaGVuc2l2ZSBsaXN0XG4gICAgRElGQVQgY2hhaW5zIGJ5IHN0b3JpbmcgdGhlIG5leHQgc2VjdG9yIG51bWJlciBhcyB0aGUgbGFzdCAzMiBiaXRzICovXG5mdW5jdGlvbiBzbGV1dGhfZmF0KGlkeCwgY250LCBzZWN0b3JzLCBzc3osIGZhdF9hZGRycykge1xuXHR2YXIgcSA9IEVORE9GQ0hBSU47XG5cdGlmKGlkeCA9PT0gRU5ET0ZDSEFJTikge1xuXHRcdGlmKGNudCAhPT0gMCkgdGhyb3cgbmV3IEVycm9yKFwiRElGQVQgY2hhaW4gc2hvcnRlciB0aGFuIGV4cGVjdGVkXCIpO1xuXHR9IGVsc2UgaWYoaWR4ICE9PSAtMSAvKkZSRUVTRUNUKi8pIHtcblx0XHR2YXIgc2VjdG9yID0gc2VjdG9yc1tpZHhdLCBtID0gKHNzej4+PjIpLTE7XG5cdFx0aWYoIXNlY3RvcikgcmV0dXJuO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBtOyArK2kpIHtcblx0XHRcdGlmKChxID0gX19yZWFkSW50MzJMRShzZWN0b3IsaSo0KSkgPT09IEVORE9GQ0hBSU4pIGJyZWFrO1xuXHRcdFx0ZmF0X2FkZHJzLnB1c2gocSk7XG5cdFx0fVxuXHRcdGlmKGNudCA+PSAxKSBzbGV1dGhfZmF0KF9fcmVhZEludDMyTEUoc2VjdG9yLHNzei00KSxjbnQgLSAxLCBzZWN0b3JzLCBzc3osIGZhdF9hZGRycyk7XG5cdH1cbn1cblxuLyoqIEZvbGxvdyB0aGUgbGlua2VkIGxpc3Qgb2Ygc2VjdG9ycyBmb3IgYSBnaXZlbiBzdGFydGluZyBwb2ludCAqL1xuZnVuY3Rpb24gZ2V0X3NlY3Rvcl9saXN0KHNlY3RvcnMsIHN0YXJ0LCBmYXRfYWRkcnMsIHNzeiwgY2hrZCkge1xuXHR2YXIgYnVmID0gW10sIGJ1Zl9jaGFpbiA9IFtdO1xuXHRpZighY2hrZCkgY2hrZCA9IFtdO1xuXHR2YXIgbW9kdWx1cyA9IHNzeiAtIDEsIGogPSAwLCBqaiA9IDA7XG5cdGZvcihqPXN0YXJ0OyBqPj0wOykge1xuXHRcdGNoa2Rbal0gPSB0cnVlO1xuXHRcdGJ1ZltidWYubGVuZ3RoXSA9IGo7XG5cdFx0YnVmX2NoYWluLnB1c2goc2VjdG9yc1tqXSk7XG5cdFx0dmFyIGFkZHIgPSBmYXRfYWRkcnNbTWF0aC5mbG9vcihqKjQvc3N6KV07XG5cdFx0amogPSAoKGoqNCkgJiBtb2R1bHVzKTtcblx0XHRpZihzc3ogPCA0ICsgamopIHRocm93IG5ldyBFcnJvcihcIkZBVCBib3VuZGFyeSBjcm9zc2VkOiBcIiArIGogKyBcIiA0IFwiK3Nzeik7XG5cdFx0aWYoIXNlY3RvcnNbYWRkcl0pIGJyZWFrO1xuXHRcdGogPSBfX3JlYWRJbnQzMkxFKHNlY3RvcnNbYWRkcl0sIGpqKTtcblx0fVxuXHRyZXR1cm4ge25vZGVzOiBidWYsIGRhdGE6X190b0J1ZmZlcihbYnVmX2NoYWluXSl9O1xufVxuXG4vKiogQ2hhc2UgZG93biB0aGUgc2VjdG9yIGxpbmtlZCBsaXN0cyAqL1xuZnVuY3Rpb24gbWFrZV9zZWN0b3JfbGlzdChzZWN0b3JzLCBkaXJfc3RhcnQsIGZhdF9hZGRycywgc3N6KSB7XG5cdHZhciBzbCA9IHNlY3RvcnMubGVuZ3RoLCBzZWN0b3JfbGlzdCA9IChbXSk7XG5cdHZhciBjaGtkID0gW10sIGJ1ZiA9IFtdLCBidWZfY2hhaW4gPSBbXTtcblx0dmFyIG1vZHVsdXMgPSBzc3ogLSAxLCBpPTAsIGo9MCwgaz0wLCBqaj0wO1xuXHRmb3IoaT0wOyBpIDwgc2w7ICsraSkge1xuXHRcdGJ1ZiA9IChbXSk7XG5cdFx0ayA9IChpICsgZGlyX3N0YXJ0KTsgaWYoayA+PSBzbCkgay09c2w7XG5cdFx0aWYoY2hrZFtrXSkgY29udGludWU7XG5cdFx0YnVmX2NoYWluID0gW107XG5cdFx0dmFyIHNlZW4gPSBbXTtcblx0XHRmb3Ioaj1rOyBqPj0wOykge1xuXHRcdFx0c2VlbltqXSA9IHRydWU7XG5cdFx0XHRjaGtkW2pdID0gdHJ1ZTtcblx0XHRcdGJ1ZltidWYubGVuZ3RoXSA9IGo7XG5cdFx0XHRidWZfY2hhaW4ucHVzaChzZWN0b3JzW2pdKTtcblx0XHRcdHZhciBhZGRyID0gZmF0X2FkZHJzW01hdGguZmxvb3Ioaio0L3NzeildO1xuXHRcdFx0amogPSAoKGoqNCkgJiBtb2R1bHVzKTtcblx0XHRcdGlmKHNzeiA8IDQgKyBqaikgdGhyb3cgbmV3IEVycm9yKFwiRkFUIGJvdW5kYXJ5IGNyb3NzZWQ6IFwiICsgaiArIFwiIDQgXCIrc3N6KTtcblx0XHRcdGlmKCFzZWN0b3JzW2FkZHJdKSBicmVhaztcblx0XHRcdGogPSBfX3JlYWRJbnQzMkxFKHNlY3RvcnNbYWRkcl0sIGpqKTtcblx0XHRcdGlmKHNlZW5bal0pIGJyZWFrO1xuXHRcdH1cblx0XHRzZWN0b3JfbGlzdFtrXSA9ICh7bm9kZXM6IGJ1ZiwgZGF0YTpfX3RvQnVmZmVyKFtidWZfY2hhaW5dKX0pO1xuXHR9XG5cdHJldHVybiBzZWN0b3JfbGlzdDtcbn1cblxuLyogW01TLUNGQl0gMi42LjEgQ29tcG91bmQgRmlsZSBEaXJlY3RvcnkgRW50cnkgKi9cbmZ1bmN0aW9uIHJlYWRfZGlyZWN0b3J5KGRpcl9zdGFydCwgc2VjdG9yX2xpc3QsIHNlY3RvcnMsIFBhdGhzLCBubWZzLCBmaWxlcywgRmlsZUluZGV4LCBtaW5pKSB7XG5cdHZhciBtaW5pZmF0X3N0b3JlID0gMCwgcGwgPSAoUGF0aHMubGVuZ3RoPzI6MCk7XG5cdHZhciBzZWN0b3IgPSBzZWN0b3JfbGlzdFtkaXJfc3RhcnRdLmRhdGE7XG5cdHZhciBpID0gMCwgbmFtZWxlbiA9IDAsIG5hbWU7XG5cdGZvcig7IGkgPCBzZWN0b3IubGVuZ3RoOyBpKz0gMTI4KSB7XG5cdFx0dmFyIGJsb2IgPSBzZWN0b3Iuc2xpY2UoaSwgaSsxMjgpO1xuXHRcdHByZXBfYmxvYihibG9iLCA2NCk7XG5cdFx0bmFtZWxlbiA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRuYW1lID0gX191dGYxNmxlKGJsb2IsMCxuYW1lbGVuLXBsKTtcblx0XHRQYXRocy5wdXNoKG5hbWUpO1xuXHRcdHZhciBvID0gKHtcblx0XHRcdG5hbWU6ICBuYW1lLFxuXHRcdFx0dHlwZTogIGJsb2IucmVhZF9zaGlmdCgxKSxcblx0XHRcdGNvbG9yOiBibG9iLnJlYWRfc2hpZnQoMSksXG5cdFx0XHRMOiAgICAgYmxvYi5yZWFkX3NoaWZ0KDQsICdpJyksXG5cdFx0XHRSOiAgICAgYmxvYi5yZWFkX3NoaWZ0KDQsICdpJyksXG5cdFx0XHRDOiAgICAgYmxvYi5yZWFkX3NoaWZ0KDQsICdpJyksXG5cdFx0XHRjbHNpZDogYmxvYi5yZWFkX3NoaWZ0KDE2KSxcblx0XHRcdHN0YXRlOiBibG9iLnJlYWRfc2hpZnQoNCwgJ2knKSxcblx0XHRcdHN0YXJ0OiAwLFxuXHRcdFx0c2l6ZTogMFxuXHRcdH0pO1xuXHRcdHZhciBjdGltZSA9IGJsb2IucmVhZF9zaGlmdCgyKSArIGJsb2IucmVhZF9zaGlmdCgyKSArIGJsb2IucmVhZF9zaGlmdCgyKSArIGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRpZihjdGltZSAhPT0gMCkgby5jdCA9IHJlYWRfZGF0ZShibG9iLCBibG9iLmwtOCk7XG5cdFx0dmFyIG10aW1lID0gYmxvYi5yZWFkX3NoaWZ0KDIpICsgYmxvYi5yZWFkX3NoaWZ0KDIpICsgYmxvYi5yZWFkX3NoaWZ0KDIpICsgYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdGlmKG10aW1lICE9PSAwKSBvLm10ID0gcmVhZF9kYXRlKGJsb2IsIGJsb2IubC04KTtcblx0XHRvLnN0YXJ0ID0gYmxvYi5yZWFkX3NoaWZ0KDQsICdpJyk7XG5cdFx0by5zaXplID0gYmxvYi5yZWFkX3NoaWZ0KDQsICdpJyk7XG5cdFx0aWYoby5zaXplIDwgMCAmJiBvLnN0YXJ0IDwgMCkgeyBvLnNpemUgPSBvLnR5cGUgPSAwOyBvLnN0YXJ0ID0gRU5ET0ZDSEFJTjsgby5uYW1lID0gXCJcIjsgfVxuXHRcdGlmKG8udHlwZSA9PT0gNSkgeyAvKiByb290ICovXG5cdFx0XHRtaW5pZmF0X3N0b3JlID0gby5zdGFydDtcblx0XHRcdGlmKG5tZnMgPiAwICYmIG1pbmlmYXRfc3RvcmUgIT09IEVORE9GQ0hBSU4pIHNlY3Rvcl9saXN0W21pbmlmYXRfc3RvcmVdLm5hbWUgPSBcIiFTdHJlYW1EYXRhXCI7XG5cdFx0XHQvKm1pbmlmYXRfc2l6ZSA9IG8uc2l6ZTsqL1xuXHRcdH0gZWxzZSBpZihvLnNpemUgPj0gNDA5NiAvKiBNU0NTWiAqLykge1xuXHRcdFx0by5zdG9yYWdlID0gJ2ZhdCc7XG5cdFx0XHRpZihzZWN0b3JfbGlzdFtvLnN0YXJ0XSA9PT0gdW5kZWZpbmVkKSBzZWN0b3JfbGlzdFtvLnN0YXJ0XSA9IGdldF9zZWN0b3JfbGlzdChzZWN0b3JzLCBvLnN0YXJ0LCBzZWN0b3JfbGlzdC5mYXRfYWRkcnMsIHNlY3Rvcl9saXN0LnNzeik7XG5cdFx0XHRzZWN0b3JfbGlzdFtvLnN0YXJ0XS5uYW1lID0gby5uYW1lO1xuXHRcdFx0by5jb250ZW50ID0gKHNlY3Rvcl9saXN0W28uc3RhcnRdLmRhdGEuc2xpY2UoMCxvLnNpemUpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0by5zdG9yYWdlID0gJ21pbmlmYXQnO1xuXHRcdFx0aWYoby5zaXplIDwgMCkgby5zaXplID0gMDtcblx0XHRcdGVsc2UgaWYobWluaWZhdF9zdG9yZSAhPT0gRU5ET0ZDSEFJTiAmJiBvLnN0YXJ0ICE9PSBFTkRPRkNIQUlOICYmIHNlY3Rvcl9saXN0W21pbmlmYXRfc3RvcmVdKSB7XG5cdFx0XHRcdG8uY29udGVudCA9IGdldF9tZmF0X2VudHJ5KG8sIHNlY3Rvcl9saXN0W21pbmlmYXRfc3RvcmVdLmRhdGEsIChzZWN0b3JfbGlzdFttaW5pXXx8e30pLmRhdGEpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihvLmNvbnRlbnQpIHByZXBfYmxvYihvLmNvbnRlbnQsIDApO1xuXHRcdGZpbGVzW25hbWVdID0gbztcblx0XHRGaWxlSW5kZXgucHVzaChvKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZWFkX2RhdGUoYmxvYiwgb2Zmc2V0KSB7XG5cdHJldHVybiBuZXcgRGF0ZSgoICggKF9fcmVhZFVJbnQzMkxFKGJsb2Isb2Zmc2V0KzQpLzFlNykqTWF0aC5wb3coMiwzMikrX19yZWFkVUludDMyTEUoYmxvYixvZmZzZXQpLzFlNyApIC0gMTE2NDQ0NzM2MDApKjEwMDApO1xufVxuXG5mdW5jdGlvbiByZWFkX2ZpbGUoZmlsZW5hbWUsIG9wdGlvbnMpIHtcblx0Z2V0X2ZzKCk7XG5cdHJldHVybiBwYXJzZShmcy5yZWFkRmlsZVN5bmMoZmlsZW5hbWUpLCBvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVhZChibG9iLCBvcHRpb25zKSB7XG5cdHN3aXRjaChvcHRpb25zICYmIG9wdGlvbnMudHlwZSB8fCBcImJhc2U2NFwiKSB7XG5cdFx0Y2FzZSBcImZpbGVcIjogcmV0dXJuIHJlYWRfZmlsZShibG9iLCBvcHRpb25zKTtcblx0XHRjYXNlIFwiYmFzZTY0XCI6IHJldHVybiBwYXJzZShzMmEoQmFzZTY0LmRlY29kZShibG9iKSksIG9wdGlvbnMpO1xuXHRcdGNhc2UgXCJiaW5hcnlcIjogcmV0dXJuIHBhcnNlKHMyYShibG9iKSwgb3B0aW9ucyk7XG5cdH1cblx0cmV0dXJuIHBhcnNlKGJsb2IsIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBpbml0X2NmYihjZmIsIG9wdHMpIHtcblx0dmFyIG8gPSBvcHRzIHx8IHt9LCByb290ID0gby5yb290IHx8IFwiUm9vdCBFbnRyeVwiO1xuXHRpZighY2ZiLkZ1bGxQYXRocykgY2ZiLkZ1bGxQYXRocyA9IFtdO1xuXHRpZighY2ZiLkZpbGVJbmRleCkgY2ZiLkZpbGVJbmRleCA9IFtdO1xuXHRpZihjZmIuRnVsbFBhdGhzLmxlbmd0aCAhPT0gY2ZiLkZpbGVJbmRleC5sZW5ndGgpIHRocm93IG5ldyBFcnJvcihcImluY29uc2lzdGVudCBDRkIgc3RydWN0dXJlXCIpO1xuXHRpZihjZmIuRnVsbFBhdGhzLmxlbmd0aCA9PT0gMCkge1xuXHRcdGNmYi5GdWxsUGF0aHNbMF0gPSByb290ICsgXCIvXCI7XG5cdFx0Y2ZiLkZpbGVJbmRleFswXSA9ICh7IG5hbWU6IHJvb3QsIHR5cGU6IDUgfSk7XG5cdH1cblx0aWYoby5DTFNJRCkgY2ZiLkZpbGVJbmRleFswXS5jbHNpZCA9IG8uQ0xTSUQ7XG5cdHNlZWRfY2ZiKGNmYik7XG59XG5mdW5jdGlvbiBzZWVkX2NmYihjZmIpIHtcblx0dmFyIG5tID0gXCJcXHUwMDAxU2gzM3RKNVwiO1xuXHRpZihDRkIuZmluZChjZmIsIFwiL1wiICsgbm0pKSByZXR1cm47XG5cdHZhciBwID0gbmV3X2J1Zig0KTsgcFswXSA9IDU1OyBwWzFdID0gcFszXSA9IDUwOyBwWzJdID0gNTQ7XG5cdGNmYi5GaWxlSW5kZXgucHVzaCgoeyBuYW1lOiBubSwgdHlwZTogMiwgY29udGVudDpwLCBzaXplOjQsIEw6NjksIFI6NjksIEM6NjkgfSkpO1xuXHRjZmIuRnVsbFBhdGhzLnB1c2goY2ZiLkZ1bGxQYXRoc1swXSArIG5tKTtcblx0cmVidWlsZF9jZmIoY2ZiKTtcbn1cbmZ1bmN0aW9uIHJlYnVpbGRfY2ZiKGNmYiwgZikge1xuXHRpbml0X2NmYihjZmIpO1xuXHR2YXIgZ2MgPSBmYWxzZSwgcyA9IGZhbHNlO1xuXHRmb3IodmFyIGkgPSBjZmIuRnVsbFBhdGhzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG5cdFx0dmFyIF9maWxlID0gY2ZiLkZpbGVJbmRleFtpXTtcblx0XHRzd2l0Y2goX2ZpbGUudHlwZSkge1xuXHRcdFx0Y2FzZSAwOlxuXHRcdFx0XHRpZihzKSBnYyA9IHRydWU7XG5cdFx0XHRcdGVsc2UgeyBjZmIuRmlsZUluZGV4LnBvcCgpOyBjZmIuRnVsbFBhdGhzLnBvcCgpOyB9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAxOiBjYXNlIDI6IGNhc2UgNTpcblx0XHRcdFx0cyA9IHRydWU7XG5cdFx0XHRcdGlmKGlzTmFOKF9maWxlLlIgKiBfZmlsZS5MICogX2ZpbGUuQykpIGdjID0gdHJ1ZTtcblx0XHRcdFx0aWYoX2ZpbGUuUiA+IC0xICYmIF9maWxlLkwgPiAtMSAmJiBfZmlsZS5SID09IF9maWxlLkwpIGdjID0gdHJ1ZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OiBnYyA9IHRydWU7IGJyZWFrO1xuXHRcdH1cblx0fVxuXHRpZighZ2MgJiYgIWYpIHJldHVybjtcblxuXHR2YXIgbm93ID0gbmV3IERhdGUoMTk4NywgMSwgMTkpLCBqID0gMDtcblx0dmFyIGRhdGEgPSBbXTtcblx0Zm9yKGkgPSAwOyBpIDwgY2ZiLkZ1bGxQYXRocy5sZW5ndGg7ICsraSkge1xuXHRcdGlmKGNmYi5GaWxlSW5kZXhbaV0udHlwZSA9PT0gMCkgY29udGludWU7XG5cdFx0ZGF0YS5wdXNoKFtjZmIuRnVsbFBhdGhzW2ldLCBjZmIuRmlsZUluZGV4W2ldXSk7XG5cdH1cblx0Zm9yKGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7ICsraSkge1xuXHRcdHZhciBkYWQgPSBkaXJuYW1lKGRhdGFbaV1bMF0pO1xuXHRcdHMgPSBmYWxzZTtcblx0XHRmb3IoaiA9IDA7IGogPCBkYXRhLmxlbmd0aDsgKytqKSBpZihkYXRhW2pdWzBdID09PSBkYWQpIHMgPSB0cnVlO1xuXHRcdGlmKCFzKSBkYXRhLnB1c2goW2RhZCwgKHtcblx0XHRcdG5hbWU6IGZpbGVuYW1lKGRhZCkucmVwbGFjZShcIi9cIixcIlwiKSxcblx0XHRcdHR5cGU6IDEsXG5cdFx0XHRjbHNpZDogSEVBREVSX0NMU0lELFxuXHRcdFx0Y3Q6IG5vdywgbXQ6IG5vdyxcblx0XHRcdGNvbnRlbnQ6IG51bGxcblx0XHR9KV0pO1xuXHR9XG5cblx0ZGF0YS5zb3J0KGZ1bmN0aW9uKHgseSkgeyByZXR1cm4gbmFtZWNtcCh4WzBdLCB5WzBdKTsgfSk7XG5cdGNmYi5GdWxsUGF0aHMgPSBbXTsgY2ZiLkZpbGVJbmRleCA9IFtdO1xuXHRmb3IoaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgKytpKSB7IGNmYi5GdWxsUGF0aHNbaV0gPSBkYXRhW2ldWzBdOyBjZmIuRmlsZUluZGV4W2ldID0gZGF0YVtpXVsxXTsgfVxuXHRmb3IoaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgKytpKSB7XG5cdFx0dmFyIGVsdCA9IGNmYi5GaWxlSW5kZXhbaV07XG5cdFx0dmFyIG5tID0gY2ZiLkZ1bGxQYXRoc1tpXTtcblxuXHRcdGVsdC5uYW1lID0gIGZpbGVuYW1lKG5tKS5yZXBsYWNlKFwiL1wiLFwiXCIpO1xuXHRcdGVsdC5MID0gZWx0LlIgPSBlbHQuQyA9IC0oZWx0LmNvbG9yID0gMSk7XG5cdFx0ZWx0LnNpemUgPSBlbHQuY29udGVudCA/IGVsdC5jb250ZW50Lmxlbmd0aCA6IDA7XG5cdFx0ZWx0LnN0YXJ0ID0gMDtcblx0XHRlbHQuY2xzaWQgPSAoZWx0LmNsc2lkIHx8IEhFQURFUl9DTFNJRCk7XG5cdFx0aWYoaSA9PT0gMCkge1xuXHRcdFx0ZWx0LkMgPSBkYXRhLmxlbmd0aCA+IDEgPyAxIDogLTE7XG5cdFx0XHRlbHQuc2l6ZSA9IDA7XG5cdFx0XHRlbHQudHlwZSA9IDU7XG5cdFx0fSBlbHNlIGlmKG5tLnNsaWNlKC0xKSA9PSBcIi9cIikge1xuXHRcdFx0Zm9yKGo9aSsxO2ogPCBkYXRhLmxlbmd0aDsgKytqKSBpZihkaXJuYW1lKGNmYi5GdWxsUGF0aHNbal0pPT1ubSkgYnJlYWs7XG5cdFx0XHRlbHQuQyA9IGogPj0gZGF0YS5sZW5ndGggPyAtMSA6IGo7XG5cdFx0XHRmb3Ioaj1pKzE7aiA8IGRhdGEubGVuZ3RoOyArK2opIGlmKGRpcm5hbWUoY2ZiLkZ1bGxQYXRoc1tqXSk9PWRpcm5hbWUobm0pKSBicmVhaztcblx0XHRcdGVsdC5SID0gaiA+PSBkYXRhLmxlbmd0aCA/IC0xIDogajtcblx0XHRcdGVsdC50eXBlID0gMTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYoZGlybmFtZShjZmIuRnVsbFBhdGhzW2krMV18fFwiXCIpID09IGRpcm5hbWUobm0pKSBlbHQuUiA9IGkgKyAxO1xuXHRcdFx0ZWx0LnR5cGUgPSAyO1xuXHRcdH1cblx0fVxuXG59XG5cbmZ1bmN0aW9uIF93cml0ZShjZmIsIG9wdGlvbnMpIHtcblx0dmFyIF9vcHRzID0gb3B0aW9ucyB8fCB7fTtcblx0cmVidWlsZF9jZmIoY2ZiKTtcblx0aWYoX29wdHMuZmlsZVR5cGUgPT0gJ3ppcCcpIHJldHVybiB3cml0ZV96aXAoY2ZiLCBfb3B0cyk7XG5cdHZhciBMID0gKGZ1bmN0aW9uKGNmYil7XG5cdFx0dmFyIG1pbmlfc2l6ZSA9IDAsIGZhdF9zaXplID0gMDtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgY2ZiLkZpbGVJbmRleC5sZW5ndGg7ICsraSkge1xuXHRcdFx0dmFyIGZpbGUgPSBjZmIuRmlsZUluZGV4W2ldO1xuXHRcdFx0aWYoIWZpbGUuY29udGVudCkgY29udGludWU7XG52YXIgZmxlbiA9IGZpbGUuY29udGVudC5sZW5ndGg7XG5cdFx0XHRpZihmbGVuID4gMCl7XG5cdFx0XHRcdGlmKGZsZW4gPCAweDEwMDApIG1pbmlfc2l6ZSArPSAoZmxlbiArIDB4M0YpID4+IDY7XG5cdFx0XHRcdGVsc2UgZmF0X3NpemUgKz0gKGZsZW4gKyAweDAxRkYpID4+IDk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHZhciBkaXJfY250ID0gKGNmYi5GdWxsUGF0aHMubGVuZ3RoICszKSA+PiAyO1xuXHRcdHZhciBtaW5pX2NudCA9IChtaW5pX3NpemUgKyA3KSA+PiAzO1xuXHRcdHZhciBtZmF0X2NudCA9IChtaW5pX3NpemUgKyAweDdGKSA+PiA3O1xuXHRcdHZhciBmYXRfYmFzZSA9IG1pbmlfY250ICsgZmF0X3NpemUgKyBkaXJfY250ICsgbWZhdF9jbnQ7XG5cdFx0dmFyIGZhdF9jbnQgPSAoZmF0X2Jhc2UgKyAweDdGKSA+PiA3O1xuXHRcdHZhciBkaWZhdF9jbnQgPSBmYXRfY250IDw9IDEwOSA/IDAgOiBNYXRoLmNlaWwoKGZhdF9jbnQtMTA5KS8weDdGKTtcblx0XHR3aGlsZSgoKGZhdF9iYXNlICsgZmF0X2NudCArIGRpZmF0X2NudCArIDB4N0YpID4+IDcpID4gZmF0X2NudCkgZGlmYXRfY250ID0gKytmYXRfY250IDw9IDEwOSA/IDAgOiBNYXRoLmNlaWwoKGZhdF9jbnQtMTA5KS8weDdGKTtcblx0XHR2YXIgTCA9ICBbMSwgZGlmYXRfY250LCBmYXRfY250LCBtZmF0X2NudCwgZGlyX2NudCwgZmF0X3NpemUsIG1pbmlfc2l6ZSwgMF07XG5cdFx0Y2ZiLkZpbGVJbmRleFswXS5zaXplID0gbWluaV9zaXplIDw8IDY7XG5cdFx0TFs3XSA9IChjZmIuRmlsZUluZGV4WzBdLnN0YXJ0PUxbMF0rTFsxXStMWzJdK0xbM10rTFs0XStMWzVdKSsoKExbNl0rNykgPj4gMyk7XG5cdFx0cmV0dXJuIEw7XG5cdH0pKGNmYik7XG5cdHZhciBvID0gbmV3X2J1ZihMWzddIDw8IDkpO1xuXHR2YXIgaSA9IDAsIFQgPSAwO1xuXHR7XG5cdFx0Zm9yKGkgPSAwOyBpIDwgODsgKytpKSBvLndyaXRlX3NoaWZ0KDEsIEhFQURFUl9TSUdbaV0pO1xuXHRcdGZvcihpID0gMDsgaSA8IDg7ICsraSkgby53cml0ZV9zaGlmdCgyLCAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIDB4MDAzRSk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCAweDAwMDMpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgMHhGRkZFKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIDB4MDAwOSk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCAweDAwMDYpO1xuXHRcdGZvcihpID0gMDsgaSA8IDM7ICsraSkgby53cml0ZV9zaGlmdCgyLCAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgTFsyXSk7XG5cdFx0by53cml0ZV9zaGlmdCg0LCBMWzBdICsgTFsxXSArIExbMl0gKyBMWzNdIC0gMSk7XG5cdFx0by53cml0ZV9zaGlmdCg0LCAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIDE8PDEyKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIExbM10gPyBMWzBdICsgTFsxXSArIExbMl0gLSAxOiBFTkRPRkNIQUlOKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIExbM10pO1xuXHRcdG8ud3JpdGVfc2hpZnQoLTQsIExbMV0gPyBMWzBdIC0gMTogRU5ET0ZDSEFJTik7XG5cdFx0by53cml0ZV9zaGlmdCg0LCBMWzFdKTtcblx0XHRmb3IoaSA9IDA7IGkgPCAxMDk7ICsraSkgby53cml0ZV9zaGlmdCgtNCwgaSA8IExbMl0gPyBMWzFdICsgaSA6IC0xKTtcblx0fVxuXHRpZihMWzFdKSB7XG5cdFx0Zm9yKFQgPSAwOyBUIDwgTFsxXTsgKytUKSB7XG5cdFx0XHRmb3IoOyBpIDwgMjM2ICsgVCAqIDEyNzsgKytpKSBvLndyaXRlX3NoaWZ0KC00LCBpIDwgTFsyXSA/IExbMV0gKyBpIDogLTEpO1xuXHRcdFx0by53cml0ZV9zaGlmdCgtNCwgVCA9PT0gTFsxXSAtIDEgPyBFTkRPRkNIQUlOIDogVCArIDEpO1xuXHRcdH1cblx0fVxuXHR2YXIgY2hhaW5pdCA9IGZ1bmN0aW9uKHcpIHtcblx0XHRmb3IoVCArPSB3OyBpPFQtMTsgKytpKSBvLndyaXRlX3NoaWZ0KC00LCBpKzEpO1xuXHRcdGlmKHcpIHsgKytpOyBvLndyaXRlX3NoaWZ0KC00LCBFTkRPRkNIQUlOKTsgfVxuXHR9O1xuXHRUID0gaSA9IDA7XG5cdGZvcihUKz1MWzFdOyBpPFQ7ICsraSkgby53cml0ZV9zaGlmdCgtNCwgY29uc3RzLkRJRlNFQ1QpO1xuXHRmb3IoVCs9TFsyXTsgaTxUOyArK2kpIG8ud3JpdGVfc2hpZnQoLTQsIGNvbnN0cy5GQVRTRUNUKTtcblx0Y2hhaW5pdChMWzNdKTtcblx0Y2hhaW5pdChMWzRdKTtcblx0dmFyIGogPSAwLCBmbGVuID0gMDtcblx0dmFyIGZpbGUgPSBjZmIuRmlsZUluZGV4WzBdO1xuXHRmb3IoOyBqIDwgY2ZiLkZpbGVJbmRleC5sZW5ndGg7ICsraikge1xuXHRcdGZpbGUgPSBjZmIuRmlsZUluZGV4W2pdO1xuXHRcdGlmKCFmaWxlLmNvbnRlbnQpIGNvbnRpbnVlO1xuZmxlbiA9IGZpbGUuY29udGVudC5sZW5ndGg7XG5cdFx0aWYoZmxlbiA8IDB4MTAwMCkgY29udGludWU7XG5cdFx0ZmlsZS5zdGFydCA9IFQ7XG5cdFx0Y2hhaW5pdCgoZmxlbiArIDB4MDFGRikgPj4gOSk7XG5cdH1cblx0Y2hhaW5pdCgoTFs2XSArIDcpID4+IDMpO1xuXHR3aGlsZShvLmwgJiAweDFGRikgby53cml0ZV9zaGlmdCgtNCwgY29uc3RzLkVORE9GQ0hBSU4pO1xuXHRUID0gaSA9IDA7XG5cdGZvcihqID0gMDsgaiA8IGNmYi5GaWxlSW5kZXgubGVuZ3RoOyArK2opIHtcblx0XHRmaWxlID0gY2ZiLkZpbGVJbmRleFtqXTtcblx0XHRpZighZmlsZS5jb250ZW50KSBjb250aW51ZTtcbmZsZW4gPSBmaWxlLmNvbnRlbnQubGVuZ3RoO1xuXHRcdGlmKCFmbGVuIHx8IGZsZW4gPj0gMHgxMDAwKSBjb250aW51ZTtcblx0XHRmaWxlLnN0YXJ0ID0gVDtcblx0XHRjaGFpbml0KChmbGVuICsgMHgzRikgPj4gNik7XG5cdH1cblx0d2hpbGUoby5sICYgMHgxRkYpIG8ud3JpdGVfc2hpZnQoLTQsIGNvbnN0cy5FTkRPRkNIQUlOKTtcblx0Zm9yKGkgPSAwOyBpIDwgTFs0XTw8MjsgKytpKSB7XG5cdFx0dmFyIG5tID0gY2ZiLkZ1bGxQYXRoc1tpXTtcblx0XHRpZighbm0gfHwgbm0ubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRmb3IoaiA9IDA7IGogPCAxNzsgKytqKSBvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRcdFx0Zm9yKGogPSAwOyBqIDwgMzsgKytqKSBvLndyaXRlX3NoaWZ0KDQsIC0xKTtcblx0XHRcdGZvcihqID0gMDsgaiA8IDEyOyArK2opIG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cdFx0ZmlsZSA9IGNmYi5GaWxlSW5kZXhbaV07XG5cdFx0aWYoaSA9PT0gMCkgZmlsZS5zdGFydCA9IGZpbGUuc2l6ZSA/IGZpbGUuc3RhcnQgLSAxIDogRU5ET0ZDSEFJTjtcblx0XHR2YXIgX25tID0gKGkgPT09IDAgJiYgX29wdHMucm9vdCkgfHwgZmlsZS5uYW1lO1xuXHRcdGZsZW4gPSAyKihfbm0ubGVuZ3RoKzEpO1xuXHRcdG8ud3JpdGVfc2hpZnQoNjQsIF9ubSwgXCJ1dGYxNmxlXCIpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgZmxlbik7XG5cdFx0by53cml0ZV9zaGlmdCgxLCBmaWxlLnR5cGUpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgZmlsZS5jb2xvcik7XG5cdFx0by53cml0ZV9zaGlmdCgtNCwgZmlsZS5MKTtcblx0XHRvLndyaXRlX3NoaWZ0KC00LCBmaWxlLlIpO1xuXHRcdG8ud3JpdGVfc2hpZnQoLTQsIGZpbGUuQyk7XG5cdFx0aWYoIWZpbGUuY2xzaWQpIGZvcihqID0gMDsgaiA8IDQ7ICsraikgby53cml0ZV9zaGlmdCg0LCAwKTtcblx0XHRlbHNlIG8ud3JpdGVfc2hpZnQoMTYsIGZpbGUuY2xzaWQsIFwiaGV4XCIpO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgZmlsZS5zdGF0ZSB8fCAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIDApOyBvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgMCk7IG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdFx0by53cml0ZV9zaGlmdCg0LCBmaWxlLnN0YXJ0KTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIGZpbGUuc2l6ZSk7IG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdH1cblx0Zm9yKGkgPSAxOyBpIDwgY2ZiLkZpbGVJbmRleC5sZW5ndGg7ICsraSkge1xuXHRcdGZpbGUgPSBjZmIuRmlsZUluZGV4W2ldO1xuaWYoZmlsZS5zaXplID49IDB4MTAwMCkge1xuXHRcdFx0by5sID0gKGZpbGUuc3RhcnQrMSkgPDwgOTtcblx0XHRcdGZvcihqID0gMDsgaiA8IGZpbGUuc2l6ZTsgKytqKSBvLndyaXRlX3NoaWZ0KDEsIGZpbGUuY29udGVudFtqXSk7XG5cdFx0XHRmb3IoOyBqICYgMHgxRkY7ICsraikgby53cml0ZV9zaGlmdCgxLCAwKTtcblx0XHR9XG5cdH1cblx0Zm9yKGkgPSAxOyBpIDwgY2ZiLkZpbGVJbmRleC5sZW5ndGg7ICsraSkge1xuXHRcdGZpbGUgPSBjZmIuRmlsZUluZGV4W2ldO1xuaWYoZmlsZS5zaXplID4gMCAmJiBmaWxlLnNpemUgPCAweDEwMDApIHtcblx0XHRcdGZvcihqID0gMDsgaiA8IGZpbGUuc2l6ZTsgKytqKSBvLndyaXRlX3NoaWZ0KDEsIGZpbGUuY29udGVudFtqXSk7XG5cdFx0XHRmb3IoOyBqICYgMHgzRjsgKytqKSBvLndyaXRlX3NoaWZ0KDEsIDApO1xuXHRcdH1cblx0fVxuXHR3aGlsZShvLmwgPCBvLmxlbmd0aCkgby53cml0ZV9zaGlmdCgxLCAwKTtcblx0cmV0dXJuIG87XG59XG4vKiBbTVMtQ0ZCXSAyLjYuNCAoVW5pY29kZSAzLjAuMSBjYXNlIGNvbnZlcnNpb24pICovXG5mdW5jdGlvbiBmaW5kKGNmYiwgcGF0aCkge1xuXHR2YXIgVUNGdWxsUGF0aHMgPSBjZmIuRnVsbFBhdGhzLm1hcChmdW5jdGlvbih4KSB7IHJldHVybiB4LnRvVXBwZXJDYXNlKCk7IH0pO1xuXHR2YXIgVUNQYXRocyA9IFVDRnVsbFBhdGhzLm1hcChmdW5jdGlvbih4KSB7IHZhciB5ID0geC5zcGxpdChcIi9cIik7IHJldHVybiB5W3kubGVuZ3RoIC0gKHguc2xpY2UoLTEpID09IFwiL1wiID8gMiA6IDEpXTsgfSk7XG5cdHZhciBrID0gZmFsc2U7XG5cdGlmKHBhdGguY2hhckNvZGVBdCgwKSA9PT0gNDcgLyogXCIvXCIgKi8pIHsgayA9IHRydWU7IHBhdGggPSBVQ0Z1bGxQYXRoc1swXS5zbGljZSgwLCAtMSkgKyBwYXRoOyB9XG5cdGVsc2UgayA9IHBhdGguaW5kZXhPZihcIi9cIikgIT09IC0xO1xuXHR2YXIgVUNQYXRoID0gcGF0aC50b1VwcGVyQ2FzZSgpO1xuXHR2YXIgdyA9IGsgPT09IHRydWUgPyBVQ0Z1bGxQYXRocy5pbmRleE9mKFVDUGF0aCkgOiBVQ1BhdGhzLmluZGV4T2YoVUNQYXRoKTtcblx0aWYodyAhPT0gLTEpIHJldHVybiBjZmIuRmlsZUluZGV4W3ddO1xuXG5cdHZhciBtID0gIVVDUGF0aC5tYXRjaChjaHIxKTtcblx0VUNQYXRoID0gVUNQYXRoLnJlcGxhY2UoY2hyMCwnJyk7XG5cdGlmKG0pIFVDUGF0aCA9IFVDUGF0aC5yZXBsYWNlKGNocjEsJyEnKTtcblx0Zm9yKHcgPSAwOyB3IDwgVUNGdWxsUGF0aHMubGVuZ3RoOyArK3cpIHtcblx0XHRpZigobSA/IFVDRnVsbFBhdGhzW3ddLnJlcGxhY2UoY2hyMSwnIScpIDogVUNGdWxsUGF0aHNbd10pLnJlcGxhY2UoY2hyMCwnJykgPT0gVUNQYXRoKSByZXR1cm4gY2ZiLkZpbGVJbmRleFt3XTtcblx0XHRpZigobSA/IFVDUGF0aHNbd10ucmVwbGFjZShjaHIxLCchJykgOiBVQ1BhdGhzW3ddKS5yZXBsYWNlKGNocjAsJycpID09IFVDUGF0aCkgcmV0dXJuIGNmYi5GaWxlSW5kZXhbd107XG5cdH1cblx0cmV0dXJuIG51bGw7XG59XG4vKiogQ0ZCIENvbnN0YW50cyAqL1xudmFyIE1TU1ogPSA2NDsgLyogTWluaSBTZWN0b3IgU2l6ZSA9IDE8PDYgKi9cbi8vdmFyIE1TQ1NaID0gNDA5NjsgLyogTWluaSBTdHJlYW0gQ3V0b2ZmIFNpemUgKi9cbi8qIDIuMSBDb21wb3VuZCBGaWxlIFNlY3RvciBOdW1iZXJzIGFuZCBUeXBlcyAqL1xudmFyIEVORE9GQ0hBSU4gPSAtMjtcbi8qIDIuMiBDb21wb3VuZCBGaWxlIEhlYWRlciAqL1xudmFyIEhFQURFUl9TSUdOQVRVUkUgPSAnZDBjZjExZTBhMWIxMWFlMSc7XG52YXIgSEVBREVSX1NJRyA9IFsweEQwLCAweENGLCAweDExLCAweEUwLCAweEExLCAweEIxLCAweDFBLCAweEUxXTtcbnZhciBIRUFERVJfQ0xTSUQgPSAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnO1xudmFyIGNvbnN0cyA9IHtcblx0LyogMi4xIENvbXB1bmQgRmlsZSBTZWN0b3IgTnVtYmVycyBhbmQgVHlwZXMgKi9cblx0TUFYUkVHU0VDVDogLTYsXG5cdERJRlNFQ1Q6IC00LFxuXHRGQVRTRUNUOiAtMyxcblx0RU5ET0ZDSEFJTjogRU5ET0ZDSEFJTixcblx0RlJFRVNFQ1Q6IC0xLFxuXHQvKiAyLjIgQ29tcG91bmQgRmlsZSBIZWFkZXIgKi9cblx0SEVBREVSX1NJR05BVFVSRTogSEVBREVSX1NJR05BVFVSRSxcblx0SEVBREVSX01JTk9SX1ZFUlNJT046ICczZTAwJyxcblx0TUFYUkVHU0lEOiAtNixcblx0Tk9TVFJFQU06IC0xLFxuXHRIRUFERVJfQ0xTSUQ6IEhFQURFUl9DTFNJRCxcblx0LyogMi42LjEgQ29tcG91bmQgRmlsZSBEaXJlY3RvcnkgRW50cnkgKi9cblx0RW50cnlUeXBlczogWyd1bmtub3duJywnc3RvcmFnZScsJ3N0cmVhbScsJ2xvY2tieXRlcycsJ3Byb3BlcnR5Jywncm9vdCddXG59O1xuXG5mdW5jdGlvbiB3cml0ZV9maWxlKGNmYiwgZmlsZW5hbWUsIG9wdGlvbnMpIHtcblx0Z2V0X2ZzKCk7XG5cdHZhciBvID0gX3dyaXRlKGNmYiwgb3B0aW9ucyk7XG5mcy53cml0ZUZpbGVTeW5jKGZpbGVuYW1lLCBvKTtcbn1cblxuZnVuY3Rpb24gYTJzKG8pIHtcblx0dmFyIG91dCA9IG5ldyBBcnJheShvLmxlbmd0aCk7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBvLmxlbmd0aDsgKytpKSBvdXRbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKG9baV0pO1xuXHRyZXR1cm4gb3V0LmpvaW4oXCJcIik7XG59XG5cbmZ1bmN0aW9uIHdyaXRlKGNmYiwgb3B0aW9ucykge1xuXHR2YXIgbyA9IF93cml0ZShjZmIsIG9wdGlvbnMpO1xuXHRzd2l0Y2gob3B0aW9ucyAmJiBvcHRpb25zLnR5cGUpIHtcblx0XHRjYXNlIFwiZmlsZVwiOiBnZXRfZnMoKTsgZnMud3JpdGVGaWxlU3luYyhvcHRpb25zLmZpbGVuYW1lLCAobykpOyByZXR1cm4gbztcblx0XHRjYXNlIFwiYmluYXJ5XCI6IHJldHVybiBhMnMobyk7XG5cdFx0Y2FzZSBcImJhc2U2NFwiOiByZXR1cm4gQmFzZTY0LmVuY29kZShhMnMobykpO1xuXHR9XG5cdHJldHVybiBvO1xufVxuLyogbm9kZSA8IDguMSB6bGliIGRvZXMgbm90IGV4cG9zZSBieXRlc1JlYWQsIHNvIGRlZmF1bHQgdG8gcHVyZSBKUyAqL1xudmFyIF96bGliO1xuZnVuY3Rpb24gdXNlX3psaWIoemxpYikgeyB0cnkge1xuXHR2YXIgSW5mbGF0ZVJhdyA9IHpsaWIuSW5mbGF0ZVJhdztcblx0dmFyIEluZmxSYXcgPSBuZXcgSW5mbGF0ZVJhdygpO1xuXHRJbmZsUmF3Ll9wcm9jZXNzQ2h1bmsobmV3IFVpbnQ4QXJyYXkoWzMsIDBdKSwgSW5mbFJhdy5fZmluaXNoRmx1c2hGbGFnKTtcblx0aWYoSW5mbFJhdy5ieXRlc1JlYWQpIF96bGliID0gemxpYjtcblx0ZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJ6bGliIGRvZXMgbm90IGV4cG9zZSBieXRlc1JlYWRcIik7XG59IGNhdGNoKGUpIHtjb25zb2xlLmVycm9yKFwiY2Fubm90IHVzZSBuYXRpdmUgemxpYjogXCIgKyAoZS5tZXNzYWdlIHx8IGUpKTsgfSB9XG5cbmZ1bmN0aW9uIF9pbmZsYXRlUmF3U3luYyhwYXlsb2FkLCB1c3opIHtcblx0aWYoIV96bGliKSByZXR1cm4gX2luZmxhdGUocGF5bG9hZCwgdXN6KTtcblx0dmFyIEluZmxhdGVSYXcgPSBfemxpYi5JbmZsYXRlUmF3O1xuXHR2YXIgSW5mbFJhdyA9IG5ldyBJbmZsYXRlUmF3KCk7XG5cdHZhciBvdXQgPSBJbmZsUmF3Ll9wcm9jZXNzQ2h1bmsocGF5bG9hZC5zbGljZShwYXlsb2FkLmwpLCBJbmZsUmF3Ll9maW5pc2hGbHVzaEZsYWcpO1xuXHRwYXlsb2FkLmwgKz0gSW5mbFJhdy5ieXRlc1JlYWQ7XG5cdHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIF9kZWZsYXRlUmF3U3luYyhwYXlsb2FkKSB7XG5cdHJldHVybiBfemxpYiA/IF96bGliLmRlZmxhdGVSYXdTeW5jKHBheWxvYWQpIDogX2RlZmxhdGUocGF5bG9hZCk7XG59XG52YXIgQ0xFTl9PUkRFUiA9IFsgMTYsIDE3LCAxOCwgMCwgOCwgNywgOSwgNiwgMTAsIDUsIDExLCA0LCAxMiwgMywgMTMsIDIsIDE0LCAxLCAxNSBdO1xuXG4vKiAgTEVOX0lEID0gWyAyNTcsIDI1OCwgMjU5LCAyNjAsIDI2MSwgMjYyLCAyNjMsIDI2NCwgMjY1LCAyNjYsIDI2NywgMjY4LCAyNjksIDI3MCwgMjcxLCAyNzIsIDI3MywgMjc0LCAyNzUsIDI3NiwgMjc3LCAyNzgsIDI3OSwgMjgwLCAyODEsIDI4MiwgMjgzLCAyODQsIDI4NSBdOyAqL1xudmFyIExFTl9MTiA9IFsgICAzLCAgIDQsICAgNSwgICA2LCAgIDcsICAgOCwgICA5LCAgMTAsICAxMSwgIDEzICwgMTUsICAxNywgIDE5LCAgMjMsICAyNywgIDMxLCAgMzUsICA0MywgIDUxLCAgNTksICA2NywgIDgzLCAgOTksIDExNSwgMTMxLCAxNjMsIDE5NSwgMjI3LCAyNTggXTtcblxuLyogIERTVF9JRCA9IFsgIDAsICAxLCAgMiwgIDMsICA0LCAgNSwgIDYsICA3LCAgOCwgIDksIDEwLCAxMSwgMTIsIDEzLCAgMTQsICAxNSwgIDE2LCAgMTcsICAxOCwgIDE5LCAgIDIwLCAgIDIxLCAgIDIyLCAgIDIzLCAgIDI0LCAgIDI1LCAgIDI2LCAgICAyNywgICAgMjgsICAgIDI5IF07ICovXG52YXIgRFNUX0xOID0gWyAgMSwgIDIsICAzLCAgNCwgIDUsICA3LCAgOSwgMTMsIDE3LCAyNSwgMzMsIDQ5LCA2NSwgOTcsIDEyOSwgMTkzLCAyNTcsIDM4NSwgNTEzLCA3NjksIDEwMjUsIDE1MzcsIDIwNDksIDMwNzMsIDQwOTcsIDYxNDUsIDgxOTMsIDEyMjg5LCAxNjM4NSwgMjQ1NzcgXTtcblxuZnVuY3Rpb24gYml0X3N3YXBfOChuKSB7IHZhciB0ID0gKCgoKChuPDwxKXwobjw8MTEpKSAmIDB4MjIxMTApIHwgKCgobjw8NSl8KG48PDE1KSkgJiAweDg4NDQwKSkpOyByZXR1cm4gKCh0Pj4xNikgfCAodD4+OCkgfHQpJjB4RkY7IH1cblxudmFyIHVzZV90eXBlZF9hcnJheXMgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCc7XG5cbnZhciBiaXRzd2FwOCA9IHVzZV90eXBlZF9hcnJheXMgPyBuZXcgVWludDhBcnJheSgxPDw4KSA6IFtdO1xuZm9yKHZhciBxID0gMDsgcSA8ICgxPDw4KTsgKytxKSBiaXRzd2FwOFtxXSA9IGJpdF9zd2FwXzgocSk7XG5cbmZ1bmN0aW9uIGJpdF9zd2FwX24obiwgYikge1xuXHR2YXIgcmV2ID0gYml0c3dhcDhbbiAmIDB4RkZdO1xuXHRpZihiIDw9IDgpIHJldHVybiByZXYgPj4+ICg4LWIpO1xuXHRyZXYgPSAocmV2IDw8IDgpIHwgYml0c3dhcDhbKG4+PjgpJjB4RkZdO1xuXHRpZihiIDw9IDE2KSByZXR1cm4gcmV2ID4+PiAoMTYtYik7XG5cdHJldiA9IChyZXYgPDwgOCkgfCBiaXRzd2FwOFsobj4+MTYpJjB4RkZdO1xuXHRyZXR1cm4gcmV2ID4+PiAoMjQtYik7XG59XG5cbi8qIGhlbHBlcnMgZm9yIHVuYWxpZ25lZCBiaXQgcmVhZHMgKi9cbmZ1bmN0aW9uIHJlYWRfYml0c18yKGJ1ZiwgYmwpIHsgdmFyIHcgPSAoYmwmNyksIGggPSAoYmw+Pj4zKTsgcmV0dXJuICgoYnVmW2hdfCh3IDw9IDYgPyAwIDogYnVmW2grMV08PDgpKT4+PncpJiAweDAzOyB9XG5mdW5jdGlvbiByZWFkX2JpdHNfMyhidWYsIGJsKSB7IHZhciB3ID0gKGJsJjcpLCBoID0gKGJsPj4+Myk7IHJldHVybiAoKGJ1ZltoXXwodyA8PSA1ID8gMCA6IGJ1ZltoKzFdPDw4KSk+Pj53KSYgMHgwNzsgfVxuZnVuY3Rpb24gcmVhZF9iaXRzXzQoYnVmLCBibCkgeyB2YXIgdyA9IChibCY3KSwgaCA9IChibD4+PjMpOyByZXR1cm4gKChidWZbaF18KHcgPD0gNCA/IDAgOiBidWZbaCsxXTw8OCkpPj4+dykmIDB4MEY7IH1cbmZ1bmN0aW9uIHJlYWRfYml0c181KGJ1ZiwgYmwpIHsgdmFyIHcgPSAoYmwmNyksIGggPSAoYmw+Pj4zKTsgcmV0dXJuICgoYnVmW2hdfCh3IDw9IDMgPyAwIDogYnVmW2grMV08PDgpKT4+PncpJiAweDFGOyB9XG5mdW5jdGlvbiByZWFkX2JpdHNfNyhidWYsIGJsKSB7IHZhciB3ID0gKGJsJjcpLCBoID0gKGJsPj4+Myk7IHJldHVybiAoKGJ1ZltoXXwodyA8PSAxID8gMCA6IGJ1ZltoKzFdPDw4KSk+Pj53KSYgMHg3RjsgfVxuXG4vKiB3b3JrcyB1cCB0byBuID0gMyAqIDggKyAxID0gMjUgKi9cbmZ1bmN0aW9uIHJlYWRfYml0c19uKGJ1ZiwgYmwsIG4pIHtcblx0dmFyIHcgPSAoYmwmNyksIGggPSAoYmw+Pj4zKSwgZiA9ICgoMTw8biktMSk7XG5cdHZhciB2ID0gYnVmW2hdID4+PiB3O1xuXHRpZihuIDwgOCAtIHcpIHJldHVybiB2ICYgZjtcblx0diB8PSBidWZbaCsxXTw8KDgtdyk7XG5cdGlmKG4gPCAxNiAtIHcpIHJldHVybiB2ICYgZjtcblx0diB8PSBidWZbaCsyXTw8KDE2LXcpO1xuXHRpZihuIDwgMjQgLSB3KSByZXR1cm4gdiAmIGY7XG5cdHYgfD0gYnVmW2grM108PCgyNC13KTtcblx0cmV0dXJuIHYgJiBmO1xufVxuXG4vKiB1bnRpbCBBcnJheUJ1ZmZlciNyZWFsbG9jIGlzIGEgdGhpbmcsIGZha2UgYSByZWFsbG9jICovXG5mdW5jdGlvbiByZWFsbG9jKGIsIHN6KSB7XG5cdHZhciBMID0gYi5sZW5ndGgsIE0gPSAyKkwgPiBzeiA/IDIqTCA6IHN6ICsgNSwgaSA9IDA7XG5cdGlmKEwgPj0gc3opIHJldHVybiBiO1xuXHRpZihoYXNfYnVmKSB7XG5cdFx0dmFyIG8gPSBuZXdfdW5zYWZlX2J1ZihNKTtcblx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdGlmKGIuY29weSkgYi5jb3B5KG8pO1xuXHRcdGVsc2UgZm9yKDsgaSA8IGIubGVuZ3RoOyArK2kpIG9baV0gPSBiW2ldO1xuXHRcdHJldHVybiBvO1xuXHR9IGVsc2UgaWYodXNlX3R5cGVkX2FycmF5cykge1xuXHRcdHZhciBhID0gbmV3IFVpbnQ4QXJyYXkoTSk7XG5cdFx0aWYoYS5zZXQpIGEuc2V0KGIpO1xuXHRcdGVsc2UgZm9yKDsgaSA8IGIubGVuZ3RoOyArK2kpIGFbaV0gPSBiW2ldO1xuXHRcdHJldHVybiBhO1xuXHR9XG5cdGIubGVuZ3RoID0gTTtcblx0cmV0dXJuIGI7XG59XG5cbi8qIHplcm8tZmlsbGVkIGFycmF5cyBmb3Igb2xkZXIgYnJvd3NlcnMgKi9cbmZ1bmN0aW9uIHplcm9fZmlsbF9hcnJheShuKSB7XG5cdHZhciBvID0gbmV3IEFycmF5KG4pO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgbjsgKytpKSBvW2ldID0gMDtcblx0cmV0dXJuIG87XG59dmFyIF9kZWZsYXRlID0gKGZ1bmN0aW9uKCkge1xudmFyIF9kZWZsYXRlUmF3ID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gZnVuY3Rpb24gZGVmbGF0ZVJhdyhkYXRhLCBvdXQpIHtcblx0XHR2YXIgYm9mZiA9IDA7XG5cdFx0d2hpbGUoYm9mZiA8IGRhdGEubGVuZ3RoKSB7XG5cdFx0XHR2YXIgTCA9IE1hdGgubWluKDB4RkZGRiwgZGF0YS5sZW5ndGggLSBib2ZmKTtcblx0XHRcdHZhciBoID0gYm9mZiArIEwgPT0gZGF0YS5sZW5ndGg7XG5cdFx0XHQvKiBUT0RPOiB0aGlzIGlzIG9ubHkgdHlwZSAwIHN0b3JlZCAqL1xuXHRcdFx0b3V0LndyaXRlX3NoaWZ0KDEsICtoKTtcblx0XHRcdG91dC53cml0ZV9zaGlmdCgyLCBMKTtcblx0XHRcdG91dC53cml0ZV9zaGlmdCgyLCAofkwpICYgMHhGRkZGKTtcblx0XHRcdHdoaWxlKEwtLSA+IDApIG91dFtvdXQubCsrXSA9IGRhdGFbYm9mZisrXTtcblx0XHR9XG5cdFx0cmV0dXJuIG91dC5sO1xuXHR9O1xufSkoKTtcblxucmV0dXJuIGZ1bmN0aW9uKGRhdGEpIHtcblx0dmFyIGJ1ZiA9IG5ld19idWYoNTArTWF0aC5mbG9vcihkYXRhLmxlbmd0aCoxLjEpKTtcblx0dmFyIG9mZiA9IF9kZWZsYXRlUmF3KGRhdGEsIGJ1Zik7XG5cdHJldHVybiBidWYuc2xpY2UoMCwgb2ZmKTtcbn07XG59KSgpO1xuLyogbW9kaWZpZWQgaW5mbGF0ZSBmdW5jdGlvbiBhbHNvIG1vdmVzIG9yaWdpbmFsIHJlYWQgaGVhZCAqL1xuXG4vKiBidWlsZCB0cmVlICh1c2VkIGZvciBsaXRlcmFscyBhbmQgbGVuZ3RocykgKi9cbmZ1bmN0aW9uIGJ1aWxkX3RyZWUoY2xlbnMsIGNtYXAsIE1BWCkge1xuXHR2YXIgbWF4bGVuID0gMSwgdyA9IDAsIGkgPSAwLCBqID0gMCwgY2NvZGUgPSAwLCBMID0gY2xlbnMubGVuZ3RoO1xuXG5cdHZhciBibF9jb3VudCAgPSB1c2VfdHlwZWRfYXJyYXlzID8gbmV3IFVpbnQxNkFycmF5KDMyKSA6IHplcm9fZmlsbF9hcnJheSgzMik7XG5cdGZvcihpID0gMDsgaSA8IDMyOyArK2kpIGJsX2NvdW50W2ldID0gMDtcblxuXHRmb3IoaSA9IEw7IGkgPCBNQVg7ICsraSkgY2xlbnNbaV0gPSAwO1xuXHRMID0gY2xlbnMubGVuZ3RoO1xuXG5cdHZhciBjdHJlZSA9IHVzZV90eXBlZF9hcnJheXMgPyBuZXcgVWludDE2QXJyYXkoTCkgOiB6ZXJvX2ZpbGxfYXJyYXkoTCk7IC8vIFtdXG5cblx0LyogYnVpbGQgY29kZSB0cmVlICovXG5cdGZvcihpID0gMDsgaSA8IEw7ICsraSkge1xuXHRcdGJsX2NvdW50Wyh3ID0gY2xlbnNbaV0pXSsrO1xuXHRcdGlmKG1heGxlbiA8IHcpIG1heGxlbiA9IHc7XG5cdFx0Y3RyZWVbaV0gPSAwO1xuXHR9XG5cdGJsX2NvdW50WzBdID0gMDtcblx0Zm9yKGkgPSAxOyBpIDw9IG1heGxlbjsgKytpKSBibF9jb3VudFtpKzE2XSA9IChjY29kZSA9IChjY29kZSArIGJsX2NvdW50W2ktMV0pPDwxKTtcblx0Zm9yKGkgPSAwOyBpIDwgTDsgKytpKSB7XG5cdFx0Y2NvZGUgPSBjbGVuc1tpXTtcblx0XHRpZihjY29kZSAhPSAwKSBjdHJlZVtpXSA9IGJsX2NvdW50W2Njb2RlKzE2XSsrO1xuXHR9XG5cblx0LyogY21hcFttYXhsZW4gKyA0IGJpdHNdID0gKG9mZiYxNSkgKyAobGl0PDw0KSByZXZlcnNlIG1hcHBpbmcgKi9cblx0dmFyIGNsZW5pID0gMDtcblx0Zm9yKGkgPSAwOyBpIDwgTDsgKytpKSB7XG5cdFx0Y2xlbmkgPSBjbGVuc1tpXTtcblx0XHRpZihjbGVuaSAhPSAwKSB7XG5cdFx0XHRjY29kZSA9IGJpdF9zd2FwX24oY3RyZWVbaV0sIG1heGxlbik+PihtYXhsZW4tY2xlbmkpO1xuXHRcdFx0Zm9yKGogPSAoMTw8KG1heGxlbiArIDQgLSBjbGVuaSkpIC0gMTsgaj49MDsgLS1qKVxuXHRcdFx0XHRjbWFwW2Njb2RlfChqPDxjbGVuaSldID0gKGNsZW5pJjE1KSB8IChpPDw0KTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1heGxlbjtcbn1cblxudmFyIGZpeF9sbWFwID0gdXNlX3R5cGVkX2FycmF5cyA/IG5ldyBVaW50MTZBcnJheSg1MTIpIDogemVyb19maWxsX2FycmF5KDUxMik7XG52YXIgZml4X2RtYXAgPSB1c2VfdHlwZWRfYXJyYXlzID8gbmV3IFVpbnQxNkFycmF5KDMyKSAgOiB6ZXJvX2ZpbGxfYXJyYXkoMzIpO1xuaWYoIXVzZV90eXBlZF9hcnJheXMpIHtcblx0Zm9yKHZhciBpID0gMDsgaSA8IDUxMjsgKytpKSBmaXhfbG1hcFtpXSA9IDA7XG5cdGZvcihpID0gMDsgaSA8IDMyOyArK2kpIGZpeF9kbWFwW2ldID0gMDtcbn1cbihmdW5jdGlvbigpIHtcblx0dmFyIGRsZW5zID0gW107XG5cdHZhciBpID0gMDtcblx0Zm9yKDtpPDMyOyBpKyspIGRsZW5zLnB1c2goNSk7XG5cdGJ1aWxkX3RyZWUoZGxlbnMsIGZpeF9kbWFwLCAzMik7XG5cblx0dmFyIGNsZW5zID0gW107XG5cdGkgPSAwO1xuXHRmb3IoOyBpPD0xNDM7IGkrKykgY2xlbnMucHVzaCg4KTtcblx0Zm9yKDsgaTw9MjU1OyBpKyspIGNsZW5zLnB1c2goOSk7XG5cdGZvcig7IGk8PTI3OTsgaSsrKSBjbGVucy5wdXNoKDcpO1xuXHRmb3IoOyBpPD0yODc7IGkrKykgY2xlbnMucHVzaCg4KTtcblx0YnVpbGRfdHJlZShjbGVucywgZml4X2xtYXAsIDI4OCk7XG59KSgpO1xuXG52YXIgZHluX2xtYXAgPSB1c2VfdHlwZWRfYXJyYXlzID8gbmV3IFVpbnQxNkFycmF5KDMyNzY4KSA6IHplcm9fZmlsbF9hcnJheSgzMjc2OCk7XG52YXIgZHluX2RtYXAgPSB1c2VfdHlwZWRfYXJyYXlzID8gbmV3IFVpbnQxNkFycmF5KDMyNzY4KSA6IHplcm9fZmlsbF9hcnJheSgzMjc2OCk7XG52YXIgZHluX2NtYXAgPSB1c2VfdHlwZWRfYXJyYXlzID8gbmV3IFVpbnQxNkFycmF5KDEyOCkgICA6IHplcm9fZmlsbF9hcnJheSgxMjgpO1xudmFyIGR5bl9sZW5fMSA9IDEsIGR5bl9sZW5fMiA9IDE7XG5cbi8qIDUuNS4zIEV4cGFuZGluZyBIdWZmbWFuIENvZGVzICovXG5mdW5jdGlvbiBkeW4oZGF0YSwgYm9mZikge1xuXHQvKiBub21lbmNsYXR1cmUgZnJvbSBSRkMxOTUxIHJlZmVycyB0byBiaXQgdmFsdWVzOyB0aGVzZSBhcmUgb2Zmc2V0IGJ5IHRoZSBpbXBsaWNpdCBjb25zdGFudCAqL1xuXHR2YXIgX0hMSVQgPSByZWFkX2JpdHNfNShkYXRhLCBib2ZmKSArIDI1NzsgYm9mZiArPSA1O1xuXHR2YXIgX0hESVNUID0gcmVhZF9iaXRzXzUoZGF0YSwgYm9mZikgKyAxOyBib2ZmICs9IDU7XG5cdHZhciBfSENMRU4gPSByZWFkX2JpdHNfNChkYXRhLCBib2ZmKSArIDQ7IGJvZmYgKz0gNDtcblx0dmFyIHcgPSAwO1xuXG5cdC8qIGdyYWIgYW5kIHN0b3JlIGNvZGUgbGVuZ3RocyAqL1xuXHR2YXIgY2xlbnMgPSB1c2VfdHlwZWRfYXJyYXlzID8gbmV3IFVpbnQ4QXJyYXkoMTkpIDogemVyb19maWxsX2FycmF5KDE5KTtcblx0dmFyIGN0cmVlID0gWyAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwIF07XG5cdHZhciBtYXhsZW4gPSAxO1xuXHR2YXIgYmxfY291bnQgPSAgdXNlX3R5cGVkX2FycmF5cyA/IG5ldyBVaW50OEFycmF5KDgpIDogemVyb19maWxsX2FycmF5KDgpO1xuXHR2YXIgbmV4dF9jb2RlID0gdXNlX3R5cGVkX2FycmF5cyA/IG5ldyBVaW50OEFycmF5KDgpIDogemVyb19maWxsX2FycmF5KDgpO1xuXHR2YXIgTCA9IGNsZW5zLmxlbmd0aDsgLyogMTkgKi9cblx0Zm9yKHZhciBpID0gMDsgaSA8IF9IQ0xFTjsgKytpKSB7XG5cdFx0Y2xlbnNbQ0xFTl9PUkRFUltpXV0gPSB3ID0gcmVhZF9iaXRzXzMoZGF0YSwgYm9mZik7XG5cdFx0aWYobWF4bGVuIDwgdykgbWF4bGVuID0gdztcblx0XHRibF9jb3VudFt3XSsrO1xuXHRcdGJvZmYgKz0gMztcblx0fVxuXG5cdC8qIGJ1aWxkIGNvZGUgdHJlZSAqL1xuXHR2YXIgY2NvZGUgPSAwO1xuXHRibF9jb3VudFswXSA9IDA7XG5cdGZvcihpID0gMTsgaSA8PSBtYXhsZW47ICsraSkgbmV4dF9jb2RlW2ldID0gY2NvZGUgPSAoY2NvZGUgKyBibF9jb3VudFtpLTFdKTw8MTtcblx0Zm9yKGkgPSAwOyBpIDwgTDsgKytpKSBpZigoY2NvZGUgPSBjbGVuc1tpXSkgIT0gMCkgY3RyZWVbaV0gPSBuZXh0X2NvZGVbY2NvZGVdKys7XG5cdC8qIGNtYXBbNyBiaXRzIGZyb20gc3RyZWFtXSA9IChvZmYmNykgKyAobGl0PDwzKSAqL1xuXHR2YXIgY2xlbmkgPSAwO1xuXHRmb3IoaSA9IDA7IGkgPCBMOyArK2kpIHtcblx0XHRjbGVuaSA9IGNsZW5zW2ldO1xuXHRcdGlmKGNsZW5pICE9IDApIHtcblx0XHRcdGNjb2RlID0gYml0c3dhcDhbY3RyZWVbaV1dPj4oOC1jbGVuaSk7XG5cdFx0XHRmb3IodmFyIGogPSAoMTw8KDctY2xlbmkpKS0xOyBqPj0wOyAtLWopIGR5bl9jbWFwW2Njb2RlfChqPDxjbGVuaSldID0gKGNsZW5pJjcpIHwgKGk8PDMpO1xuXHRcdH1cblx0fVxuXG5cdC8qIHJlYWQgbGl0ZXJhbCBhbmQgZGlzdCBjb2RlcyBhdCBvbmNlICovXG5cdHZhciBoY29kZXMgPSBbXTtcblx0bWF4bGVuID0gMTtcblx0Zm9yKDsgaGNvZGVzLmxlbmd0aCA8IF9ITElUICsgX0hESVNUOykge1xuXHRcdGNjb2RlID0gZHluX2NtYXBbcmVhZF9iaXRzXzcoZGF0YSwgYm9mZildO1xuXHRcdGJvZmYgKz0gY2NvZGUgJiA3O1xuXHRcdHN3aXRjaCgoY2NvZGUgPj4+PSAzKSkge1xuXHRcdFx0Y2FzZSAxNjpcblx0XHRcdFx0dyA9IDMgKyByZWFkX2JpdHNfMihkYXRhLCBib2ZmKTsgYm9mZiArPSAyO1xuXHRcdFx0XHRjY29kZSA9IGhjb2Rlc1toY29kZXMubGVuZ3RoIC0gMV07XG5cdFx0XHRcdHdoaWxlKHctLSA+IDApIGhjb2Rlcy5wdXNoKGNjb2RlKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDE3OlxuXHRcdFx0XHR3ID0gMyArIHJlYWRfYml0c18zKGRhdGEsIGJvZmYpOyBib2ZmICs9IDM7XG5cdFx0XHRcdHdoaWxlKHctLSA+IDApIGhjb2Rlcy5wdXNoKDApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMTg6XG5cdFx0XHRcdHcgPSAxMSArIHJlYWRfYml0c183KGRhdGEsIGJvZmYpOyBib2ZmICs9IDc7XG5cdFx0XHRcdHdoaWxlKHcgLS0gPiAwKSBoY29kZXMucHVzaCgwKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRoY29kZXMucHVzaChjY29kZSk7XG5cdFx0XHRcdGlmKG1heGxlbiA8IGNjb2RlKSBtYXhsZW4gPSBjY29kZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0LyogYnVpbGQgbGl0ZXJhbCAvIGxlbmd0aCB0cmVlcyAqL1xuXHR2YXIgaDEgPSBoY29kZXMuc2xpY2UoMCwgX0hMSVQpLCBoMiA9IGhjb2Rlcy5zbGljZShfSExJVCk7XG5cdGZvcihpID0gX0hMSVQ7IGkgPCAyODY7ICsraSkgaDFbaV0gPSAwO1xuXHRmb3IoaSA9IF9IRElTVDsgaSA8IDMwOyArK2kpIGgyW2ldID0gMDtcblx0ZHluX2xlbl8xID0gYnVpbGRfdHJlZShoMSwgZHluX2xtYXAsIDI4Nik7XG5cdGR5bl9sZW5fMiA9IGJ1aWxkX3RyZWUoaDIsIGR5bl9kbWFwLCAzMCk7XG5cdHJldHVybiBib2ZmO1xufVxuXG4vKiByZXR1cm4gWyBkYXRhLCBieXRlc1JlYWQgXSAqL1xuZnVuY3Rpb24gaW5mbGF0ZShkYXRhLCB1c3opIHtcblx0Lyogc2hvcnRjaXJjdWl0IGZvciBlbXB0eSBidWZmZXIgWzB4MDMsIDB4MDBdICovXG5cdGlmKGRhdGFbMF0gPT0gMyAmJiAhKGRhdGFbMV0gJiAweDMpKSB7IHJldHVybiBbbmV3X3Jhd19idWYodXN6KSwgMl07IH1cblxuXHQvKiBiaXQgb2Zmc2V0ICovXG5cdHZhciBib2ZmID0gMDtcblxuXHQvKiBoZWFkZXIgaW5jbHVkZXMgZmluYWwgYml0IGFuZCB0eXBlIGJpdHMgKi9cblx0dmFyIGhlYWRlciA9IDA7XG5cblx0dmFyIG91dGJ1ZiA9IG5ld191bnNhZmVfYnVmKHVzeiA/IHVzeiA6ICgxPDwxOCkpO1xuXHR2YXIgd29mZiA9IDA7XG5cdHZhciBPTCA9IG91dGJ1Zi5sZW5ndGg+Pj4wO1xuXHR2YXIgbWF4X2xlbl8xID0gMCwgbWF4X2xlbl8yID0gMDtcblxuXHR3aGlsZSgoaGVhZGVyJjEpID09IDApIHtcblx0XHRoZWFkZXIgPSByZWFkX2JpdHNfMyhkYXRhLCBib2ZmKTsgYm9mZiArPSAzO1xuXHRcdGlmKChoZWFkZXIgPj4+IDEpID09IDApIHtcblx0XHRcdC8qIFN0b3JlZCBibG9jayAqL1xuXHRcdFx0aWYoYm9mZiAmIDcpIGJvZmYgKz0gOCAtIChib2ZmJjcpO1xuXHRcdFx0LyogMiBieXRlcyBzeiwgMiBieXRlcyBiaXQgaW52ZXJzZSAqL1xuXHRcdFx0dmFyIHN6ID0gZGF0YVtib2ZmPj4+M10gfCBkYXRhWyhib2ZmPj4+MykrMV08PDg7XG5cdFx0XHRib2ZmICs9IDMyO1xuXHRcdFx0LyogcHVzaCBzeiBieXRlcyAqL1xuXHRcdFx0aWYoIXVzeiAmJiBPTCA8IHdvZmYgKyBzeikgeyBvdXRidWYgPSByZWFsbG9jKG91dGJ1Ziwgd29mZiArIHN6KTsgT0wgPSBvdXRidWYubGVuZ3RoOyB9XG5cdFx0XHRpZih0eXBlb2YgZGF0YS5jb3B5ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdC8vICRGbG93SWdub3JlXG5cdFx0XHRcdGRhdGEuY29weShvdXRidWYsIHdvZmYsIGJvZmY+Pj4zLCAoYm9mZj4+PjMpK3N6KTtcblx0XHRcdFx0d29mZiArPSBzejsgYm9mZiArPSA4KnN6O1xuXHRcdFx0fSBlbHNlIHdoaWxlKHN6LS0gPiAwKSB7IG91dGJ1Zlt3b2ZmKytdID0gZGF0YVtib2ZmPj4+M107IGJvZmYgKz0gODsgfVxuXHRcdFx0Y29udGludWU7XG5cdFx0fSBlbHNlIGlmKChoZWFkZXIgPj4+IDEpID09IDEpIHtcblx0XHRcdC8qIEZpeGVkIEh1ZmZtYW4gKi9cblx0XHRcdG1heF9sZW5fMSA9IDk7IG1heF9sZW5fMiA9IDU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8qIER5bmFtaWMgSHVmZm1hbiAqL1xuXHRcdFx0Ym9mZiA9IGR5bihkYXRhLCBib2ZmKTtcblx0XHRcdG1heF9sZW5fMSA9IGR5bl9sZW5fMTsgbWF4X2xlbl8yID0gZHluX2xlbl8yO1xuXHRcdH1cblx0XHRpZighdXN6ICYmIChPTCA8IHdvZmYgKyAzMjc2NykpIHsgb3V0YnVmID0gcmVhbGxvYyhvdXRidWYsIHdvZmYgKyAzMjc2Nyk7IE9MID0gb3V0YnVmLmxlbmd0aDsgfVxuXHRcdGZvcig7OykgeyAvLyB3aGlsZSh0cnVlKSBpcyBhcHBhcmVudGx5IG91dCBvZiB2b2d1ZSBpbiBtb2Rlcm4gSlMgY2lyY2xlc1xuXHRcdFx0LyogaW5nZXN0IGNvZGUgYW5kIG1vdmUgcmVhZCBoZWFkICovXG5cdFx0XHR2YXIgYml0cyA9IHJlYWRfYml0c19uKGRhdGEsIGJvZmYsIG1heF9sZW5fMSk7XG5cdFx0XHR2YXIgY29kZSA9IChoZWFkZXI+Pj4xKSA9PSAxID8gZml4X2xtYXBbYml0c10gOiBkeW5fbG1hcFtiaXRzXTtcblx0XHRcdGJvZmYgKz0gY29kZSAmIDE1OyBjb2RlID4+Pj0gNDtcblx0XHRcdC8qIDAtMjU1IGFyZSBsaXRlcmFscywgMjU2IGlzIGVuZCBvZiBibG9jayB0b2tlbiwgMjU3KyBhcmUgY29weSB0b2tlbnMgKi9cblx0XHRcdGlmKCgoY29kZT4+PjgpJjB4RkYpID09PSAwKSBvdXRidWZbd29mZisrXSA9IGNvZGU7XG5cdFx0XHRlbHNlIGlmKGNvZGUgPT0gMjU2KSBicmVhaztcblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRjb2RlIC09IDI1Nztcblx0XHRcdFx0dmFyIGxlbl9lYiA9IChjb2RlIDwgOCkgPyAwIDogKChjb2RlLTQpPj4yKTsgaWYobGVuX2ViID4gNSkgbGVuX2ViID0gMDtcblx0XHRcdFx0dmFyIHRndCA9IHdvZmYgKyBMRU5fTE5bY29kZV07XG5cdFx0XHRcdC8qIGxlbmd0aCBleHRyYSBiaXRzICovXG5cdFx0XHRcdGlmKGxlbl9lYiA+IDApIHtcblx0XHRcdFx0XHR0Z3QgKz0gcmVhZF9iaXRzX24oZGF0YSwgYm9mZiwgbGVuX2ViKTtcblx0XHRcdFx0XHRib2ZmICs9IGxlbl9lYjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8qIGRpc3QgY29kZSAqL1xuXHRcdFx0XHRiaXRzID0gcmVhZF9iaXRzX24oZGF0YSwgYm9mZiwgbWF4X2xlbl8yKTtcblx0XHRcdFx0Y29kZSA9IChoZWFkZXI+Pj4xKSA9PSAxID8gZml4X2RtYXBbYml0c10gOiBkeW5fZG1hcFtiaXRzXTtcblx0XHRcdFx0Ym9mZiArPSBjb2RlICYgMTU7IGNvZGUgPj4+PSA0O1xuXHRcdFx0XHR2YXIgZHN0X2ViID0gKGNvZGUgPCA0ID8gMCA6IChjb2RlLTIpPj4xKTtcblx0XHRcdFx0dmFyIGRzdCA9IERTVF9MTltjb2RlXTtcblx0XHRcdFx0LyogZGlzdCBleHRyYSBiaXRzICovXG5cdFx0XHRcdGlmKGRzdF9lYiA+IDApIHtcblx0XHRcdFx0XHRkc3QgKz0gcmVhZF9iaXRzX24oZGF0YSwgYm9mZiwgZHN0X2ViKTtcblx0XHRcdFx0XHRib2ZmICs9IGRzdF9lYjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8qIGluIHRoZSBjb21tb24gY2FzZSwgbWFudWFsIGJ5dGUgY29weSBpcyBmYXN0ZXIgdGhhbiBUQSBzZXQgLyBCdWZmZXIgY29weSAqL1xuXHRcdFx0XHRpZighdXN6ICYmIE9MIDwgdGd0KSB7IG91dGJ1ZiA9IHJlYWxsb2Mob3V0YnVmLCB0Z3QpOyBPTCA9IG91dGJ1Zi5sZW5ndGg7IH1cblx0XHRcdFx0d2hpbGUod29mZiA8IHRndCkgeyBvdXRidWZbd29mZl0gPSBvdXRidWZbd29mZiAtIGRzdF07ICsrd29mZjsgfVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gW3VzeiA/IG91dGJ1ZiA6IG91dGJ1Zi5zbGljZSgwLCB3b2ZmKSwgKGJvZmYrNyk+Pj4zXTtcbn1cblxuZnVuY3Rpb24gX2luZmxhdGUocGF5bG9hZCwgdXN6KSB7XG5cdHZhciBkYXRhID0gcGF5bG9hZC5zbGljZShwYXlsb2FkLmx8fDApO1xuXHR2YXIgb3V0ID0gaW5mbGF0ZShkYXRhLCB1c3opO1xuXHRwYXlsb2FkLmwgKz0gb3V0WzFdO1xuXHRyZXR1cm4gb3V0WzBdO1xufVxuXG5mdW5jdGlvbiB3YXJuX29yX3Rocm93KHdybiwgbXNnKSB7XG5cdGlmKHdybikgeyBpZih0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIGNvbnNvbGUuZXJyb3IobXNnKTsgfVxuXHRlbHNlIHRocm93IG5ldyBFcnJvcihtc2cpO1xufVxuXG5mdW5jdGlvbiBwYXJzZV96aXAoZmlsZSwgb3B0aW9ucykge1xuXHR2YXIgYmxvYiA9IGZpbGU7XG5cdHByZXBfYmxvYihibG9iLCAwKTtcblxuXHR2YXIgRmlsZUluZGV4ID0gW10sIEZ1bGxQYXRocyA9IFtdO1xuXHR2YXIgbyA9IHtcblx0XHRGaWxlSW5kZXg6IEZpbGVJbmRleCxcblx0XHRGdWxsUGF0aHM6IEZ1bGxQYXRoc1xuXHR9O1xuXHRpbml0X2NmYihvLCB7IHJvb3Q6IG9wdGlvbnMucm9vdCB9KTtcblxuXHQvKiBmaW5kIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeSwgc3RhcnQganVzdCBhZnRlciBzaWduYXR1cmUgKi9cblx0dmFyIGkgPSBibG9iLmxlbmd0aCAtIDQ7XG5cdHdoaWxlKChibG9iW2ldICE9IDB4NTAgfHwgYmxvYltpKzFdICE9IDB4NGIgfHwgYmxvYltpKzJdICE9IDB4MDUgfHwgYmxvYltpKzNdICE9IDB4MDYpICYmIGkgPj0gMCkgLS1pO1xuXHRibG9iLmwgPSBpICsgNDtcblxuXHQvKiBwYXJzZSBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnkgKi9cblx0YmxvYi5sICs9IDQ7XG5cdHZhciBmY250ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgKz0gNjtcblx0dmFyIHN0YXJ0X2NkID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXG5cdC8qIHBhcnNlIGNlbnRyYWwgZGlyZWN0b3J5ICovXG5cdGJsb2IubCA9IHN0YXJ0X2NkO1xuXG5cdGZvcihpID0gMDsgaSA8IGZjbnQ7ICsraSkge1xuXHRcdC8qIHRydXN0IGxvY2FsIGZpbGUgaGVhZGVyIGluc3RlYWQgb2YgQ0QgZW50cnkgKi9cblx0XHRibG9iLmwgKz0gMjA7XG5cdFx0dmFyIGNzeiA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHR2YXIgdXN6ID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdHZhciBuYW1lbGVuID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHZhciBlZnN6ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHZhciBmY3N6ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdGJsb2IubCArPSA4O1xuXHRcdHZhciBvZmZzZXQgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0dmFyIEVGID0gcGFyc2VfZXh0cmFfZmllbGQoYmxvYi5zbGljZShibG9iLmwrbmFtZWxlbiwgYmxvYi5sK25hbWVsZW4rZWZzeikpO1xuXHRcdGJsb2IubCArPSBuYW1lbGVuICsgZWZzeiArIGZjc3o7XG5cblx0XHR2YXIgTCA9IGJsb2IubDtcblx0XHRibG9iLmwgPSBvZmZzZXQgKyA0O1xuXHRcdHBhcnNlX2xvY2FsX2ZpbGUoYmxvYiwgY3N6LCB1c3osIG8sIEVGKTtcblx0XHRibG9iLmwgPSBMO1xuXHR9XG5cblx0cmV0dXJuIG87XG59XG5cblxuLyogaGVhZCBzdGFydHMganVzdCBhZnRlciBsb2NhbCBmaWxlIGhlYWRlciBzaWduYXR1cmUgKi9cbmZ1bmN0aW9uIHBhcnNlX2xvY2FsX2ZpbGUoYmxvYiwgY3N6LCB1c3osIG8sIEVGKSB7XG5cdC8qIFtsb2NhbCBmaWxlIGhlYWRlcl0gKi9cblx0YmxvYi5sICs9IDI7XG5cdHZhciBmbGFncyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIG1ldGggPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBkYXRlID0gcGFyc2VfZG9zX2RhdGUoYmxvYik7XG5cblx0aWYoZmxhZ3MgJiAweDIwNDEpIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIFpJUCBlbmNyeXB0aW9uXCIpO1xuXHR2YXIgY3JjMzIgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdHZhciBfY3N6ID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgX3VzeiA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblxuXHR2YXIgbmFtZWxlbiA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIGVmc3ogPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cblx0Ly8gVE9ETzogZmxhZ3MgJiAoMTw8MTEpIC8vIFVURjhcblx0dmFyIG5hbWUgPSBcIlwiOyBmb3IodmFyIGkgPSAwOyBpIDwgbmFtZWxlbjsgKytpKSBuYW1lICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYmxvYltibG9iLmwrK10pO1xuXHRpZihlZnN6KSB7XG5cdFx0dmFyIGVmID0gcGFyc2VfZXh0cmFfZmllbGQoYmxvYi5zbGljZShibG9iLmwsIGJsb2IubCArIGVmc3opKTtcblx0XHRpZigoZWZbMHg1NDU1XXx8e30pLm10KSBkYXRlID0gZWZbMHg1NDU1XS5tdDtcblx0XHRpZigoKEVGfHx7fSlbMHg1NDU1XXx8e30pLm10KSBkYXRlID0gRUZbMHg1NDU1XS5tdDtcblx0fVxuXHRibG9iLmwgKz0gZWZzejtcblxuXHQvKiBbZW5jcnlwdGlvbiBoZWFkZXJdICovXG5cblx0LyogW2ZpbGUgZGF0YV0gKi9cblx0dmFyIGRhdGEgPSBibG9iLnNsaWNlKGJsb2IubCwgYmxvYi5sICsgX2Nzeik7XG5cdHN3aXRjaChtZXRoKSB7XG5cdFx0Y2FzZSA4OiBkYXRhID0gX2luZmxhdGVSYXdTeW5jKGJsb2IsIF91c3opOyBicmVhaztcblx0XHRjYXNlIDA6IGJyZWFrO1xuXHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIFpJUCBDb21wcmVzc2lvbiBtZXRob2QgXCIgKyBtZXRoKTtcblx0fVxuXG5cdC8qIFtkYXRhIGRlc2NyaXB0b3JdICovXG5cdHZhciB3cm4gPSBmYWxzZTtcblx0aWYoZmxhZ3MgJiA4KSB7XG5cdFx0Y3JjMzIgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0aWYoY3JjMzIgPT0gMHgwODA3NGI1MCkgeyBjcmMzMiA9IGJsb2IucmVhZF9zaGlmdCg0KTsgd3JuID0gdHJ1ZTsgfVxuXHRcdF9jc3ogPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0X3VzeiA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0fVxuXG5cdGlmKF9jc3ogIT0gY3N6KSB3YXJuX29yX3Rocm93KHdybiwgXCJCYWQgY29tcHJlc3NlZCBzaXplOiBcIiArIGNzeiArIFwiICE9IFwiICsgX2Nzeik7XG5cdGlmKF91c3ogIT0gdXN6KSB3YXJuX29yX3Rocm93KHdybiwgXCJCYWQgdW5jb21wcmVzc2VkIHNpemU6IFwiICsgdXN6ICsgXCIgIT0gXCIgKyBfdXN6KTtcblx0dmFyIF9jcmMzMiA9IENSQzMyLmJ1ZihkYXRhLCAwKTtcblx0aWYoKGNyYzMyPj4wKSAhPSAoX2NyYzMyPj4wKSkgd2Fybl9vcl90aHJvdyh3cm4sIFwiQmFkIENSQzMyIGNoZWNrc3VtOiBcIiArIGNyYzMyICsgXCIgIT0gXCIgKyBfY3JjMzIpO1xuXHRjZmJfYWRkKG8sIG5hbWUsIGRhdGEsIHt1bnNhZmU6IHRydWUsIG10OiBkYXRlfSk7XG59XG5mdW5jdGlvbiB3cml0ZV96aXAoY2ZiLCBvcHRpb25zKSB7XG5cdHZhciBfb3B0cyA9IG9wdGlvbnMgfHwge307XG5cdHZhciBvdXQgPSBbXSwgY2RpcnMgPSBbXTtcblx0dmFyIG8gPSBuZXdfYnVmKDEpO1xuXHR2YXIgbWV0aG9kID0gKF9vcHRzLmNvbXByZXNzaW9uID8gOCA6IDApLCBmbGFncyA9IDA7XG5cdHZhciBkZXNjID0gZmFsc2U7XG5cdGlmKGRlc2MpIGZsYWdzIHw9IDg7XG5cdHZhciBpID0gMCwgaiA9IDA7XG5cblx0dmFyIHN0YXJ0X2NkID0gMCwgZmNudCA9IDA7XG5cdHZhciByb290ID0gY2ZiLkZ1bGxQYXRoc1swXSwgZnAgPSByb290LCBmaSA9IGNmYi5GaWxlSW5kZXhbMF07XG5cdHZhciBjcmNzID0gW107XG5cdHZhciBzel9jZCA9IDA7XG5cblx0Zm9yKGkgPSAxOyBpIDwgY2ZiLkZ1bGxQYXRocy5sZW5ndGg7ICsraSkge1xuXHRcdGZwID0gY2ZiLkZ1bGxQYXRoc1tpXS5zbGljZShyb290Lmxlbmd0aCk7IGZpID0gY2ZiLkZpbGVJbmRleFtpXTtcblx0XHRpZighZmkuc2l6ZSB8fCAhZmkuY29udGVudCB8fCBmcCA9PSBcIlxcdTAwMDFTaDMzdEo1XCIpIGNvbnRpbnVlO1xuXHRcdHZhciBzdGFydCA9IHN0YXJ0X2NkO1xuXG5cdFx0LyogVE9ETzogQ1A0MzcgZmlsZW5hbWUgKi9cblx0XHR2YXIgbmFtZWJ1ZiA9IG5ld19idWYoZnAubGVuZ3RoKTtcblx0XHRmb3IoaiA9IDA7IGogPCBmcC5sZW5ndGg7ICsraikgbmFtZWJ1Zi53cml0ZV9zaGlmdCgxLCBmcC5jaGFyQ29kZUF0KGopICYgMHg3Rik7XG5cdFx0bmFtZWJ1ZiA9IG5hbWVidWYuc2xpY2UoMCwgbmFtZWJ1Zi5sKTtcblx0XHRjcmNzW2ZjbnRdID0gQ1JDMzIuYnVmKGZpLmNvbnRlbnQsIDApO1xuXG5cdFx0dmFyIG91dGJ1ZiA9IGZpLmNvbnRlbnQ7XG5cdFx0aWYobWV0aG9kID09IDgpIG91dGJ1ZiA9IF9kZWZsYXRlUmF3U3luYyhvdXRidWYpO1xuXG5cdFx0LyogbG9jYWwgZmlsZSBoZWFkZXIgKi9cblx0XHRvID0gbmV3X2J1ZigzMCk7XG5cdFx0by53cml0ZV9zaGlmdCg0LCAweDA0MDM0YjUwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIDIwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIGZsYWdzKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIG1ldGhvZCk7XG5cdFx0LyogVE9ETzogbGFzdCBtb2QgZmlsZSB0aW1lL2RhdGUgKi9cblx0XHRpZihmaS5tdCkgd3JpdGVfZG9zX2RhdGUobywgZmkubXQpO1xuXHRcdGVsc2Ugby53cml0ZV9zaGlmdCg0LCAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KC00LCAoZmxhZ3MgJiA4KSA/IDAgOiBjcmNzW2ZjbnRdKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsICAoZmxhZ3MgJiA4KSA/IDAgOiBvdXRidWYubGVuZ3RoKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsICAoZmxhZ3MgJiA4KSA/IDAgOiBmaS5jb250ZW50Lmxlbmd0aCk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCBuYW1lYnVmLmxlbmd0aCk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCAwKTtcblxuXHRcdHN0YXJ0X2NkICs9IG8ubGVuZ3RoO1xuXHRcdG91dC5wdXNoKG8pO1xuXHRcdHN0YXJ0X2NkICs9IG5hbWVidWYubGVuZ3RoO1xuXHRcdG91dC5wdXNoKG5hbWVidWYpO1xuXG5cdFx0LyogVE9ETzogZW5jcnlwdGlvbiBoZWFkZXIgPyAqL1xuXHRcdHN0YXJ0X2NkICs9IG91dGJ1Zi5sZW5ndGg7XG5cdFx0b3V0LnB1c2gob3V0YnVmKTtcblxuXHRcdC8qIGRhdGEgZGVzY3JpcHRvciAqL1xuXHRcdGlmKGZsYWdzICYgOCkge1xuXHRcdFx0byA9IG5ld19idWYoMTIpO1xuXHRcdFx0by53cml0ZV9zaGlmdCgtNCwgY3Jjc1tmY250XSk7XG5cdFx0XHRvLndyaXRlX3NoaWZ0KDQsIG91dGJ1Zi5sZW5ndGgpO1xuXHRcdFx0by53cml0ZV9zaGlmdCg0LCBmaS5jb250ZW50Lmxlbmd0aCk7XG5cdFx0XHRzdGFydF9jZCArPSBvLmw7XG5cdFx0XHRvdXQucHVzaChvKTtcblx0XHR9XG5cblx0XHQvKiBjZW50cmFsIGRpcmVjdG9yeSAqL1xuXHRcdG8gPSBuZXdfYnVmKDQ2KTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIDB4MDIwMTRiNTApO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCAyMCk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCBmbGFncyk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCBtZXRob2QpO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgMCk7IC8qIFRPRE86IGxhc3QgbW9kIGZpbGUgdGltZS9kYXRlICovXG5cdFx0by53cml0ZV9zaGlmdCgtNCwgY3Jjc1tmY250XSk7XG5cblx0XHRvLndyaXRlX3NoaWZ0KDQsIG91dGJ1Zi5sZW5ndGgpO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgZmkuY29udGVudC5sZW5ndGgpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgbmFtZWJ1Zi5sZW5ndGgpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIDApO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdFx0by53cml0ZV9zaGlmdCg0LCAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIHN0YXJ0KTtcblxuXHRcdHN6X2NkICs9IG8ubDtcblx0XHRjZGlycy5wdXNoKG8pO1xuXHRcdHN6X2NkICs9IG5hbWVidWYubGVuZ3RoO1xuXHRcdGNkaXJzLnB1c2gobmFtZWJ1Zik7XG5cdFx0KytmY250O1xuXHR9XG5cblx0LyogZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5ICovXG5cdG8gPSBuZXdfYnVmKDIyKTtcblx0by53cml0ZV9zaGlmdCg0LCAweDA2MDU0YjUwKTtcblx0by53cml0ZV9zaGlmdCgyLCAwKTtcblx0by53cml0ZV9zaGlmdCgyLCAwKTtcblx0by53cml0ZV9zaGlmdCgyLCBmY250KTtcblx0by53cml0ZV9zaGlmdCgyLCBmY250KTtcblx0by53cml0ZV9zaGlmdCg0LCBzel9jZCk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgc3RhcnRfY2QpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDApO1xuXG5cdHJldHVybiBiY29uY2F0KChbYmNvbmNhdCgob3V0KSksIGJjb25jYXQoY2RpcnMpLCBvXSkpO1xufVxuZnVuY3Rpb24gY2ZiX25ldyhvcHRzKSB7XG5cdHZhciBvID0gKHt9KTtcblx0aW5pdF9jZmIobywgb3B0cyk7XG5cdHJldHVybiBvO1xufVxuXG5mdW5jdGlvbiBjZmJfYWRkKGNmYiwgbmFtZSwgY29udGVudCwgb3B0cykge1xuXHR2YXIgdW5zYWZlID0gb3B0cyAmJiBvcHRzLnVuc2FmZTtcblx0aWYoIXVuc2FmZSkgaW5pdF9jZmIoY2ZiKTtcblx0dmFyIGZpbGUgPSAhdW5zYWZlICYmIENGQi5maW5kKGNmYiwgbmFtZSk7XG5cdGlmKCFmaWxlKSB7XG5cdFx0dmFyIGZwYXRoID0gY2ZiLkZ1bGxQYXRoc1swXTtcblx0XHRpZihuYW1lLnNsaWNlKDAsIGZwYXRoLmxlbmd0aCkgPT0gZnBhdGgpIGZwYXRoID0gbmFtZTtcblx0XHRlbHNlIHtcblx0XHRcdGlmKGZwYXRoLnNsaWNlKC0xKSAhPSBcIi9cIikgZnBhdGggKz0gXCIvXCI7XG5cdFx0XHRmcGF0aCA9IChmcGF0aCArIG5hbWUpLnJlcGxhY2UoXCIvL1wiLFwiL1wiKTtcblx0XHR9XG5cdFx0ZmlsZSA9ICh7bmFtZTogZmlsZW5hbWUobmFtZSksIHR5cGU6IDJ9KTtcblx0XHRjZmIuRmlsZUluZGV4LnB1c2goZmlsZSk7XG5cdFx0Y2ZiLkZ1bGxQYXRocy5wdXNoKGZwYXRoKTtcblx0XHRpZighdW5zYWZlKSBDRkIudXRpbHMuY2ZiX2djKGNmYik7XG5cdH1cbmZpbGUuY29udGVudCA9IChjb250ZW50KTtcblx0ZmlsZS5zaXplID0gY29udGVudCA/IGNvbnRlbnQubGVuZ3RoIDogMDtcblx0aWYob3B0cykge1xuXHRcdGlmKG9wdHMuQ0xTSUQpIGZpbGUuY2xzaWQgPSBvcHRzLkNMU0lEO1xuXHRcdGlmKG9wdHMubXQpIGZpbGUubXQgPSBvcHRzLm10O1xuXHRcdGlmKG9wdHMuY3QpIGZpbGUuY3QgPSBvcHRzLmN0O1xuXHR9XG5cdHJldHVybiBmaWxlO1xufVxuXG5mdW5jdGlvbiBjZmJfZGVsKGNmYiwgbmFtZSkge1xuXHRpbml0X2NmYihjZmIpO1xuXHR2YXIgZmlsZSA9IENGQi5maW5kKGNmYiwgbmFtZSk7XG5cdGlmKGZpbGUpIGZvcih2YXIgaiA9IDA7IGogPCBjZmIuRmlsZUluZGV4Lmxlbmd0aDsgKytqKSBpZihjZmIuRmlsZUluZGV4W2pdID09IGZpbGUpIHtcblx0XHRjZmIuRmlsZUluZGV4LnNwbGljZShqLCAxKTtcblx0XHRjZmIuRnVsbFBhdGhzLnNwbGljZShqLCAxKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGNmYl9tb3YoY2ZiLCBvbGRfbmFtZSwgbmV3X25hbWUpIHtcblx0aW5pdF9jZmIoY2ZiKTtcblx0dmFyIGZpbGUgPSBDRkIuZmluZChjZmIsIG9sZF9uYW1lKTtcblx0aWYoZmlsZSkgZm9yKHZhciBqID0gMDsgaiA8IGNmYi5GaWxlSW5kZXgubGVuZ3RoOyArK2opIGlmKGNmYi5GaWxlSW5kZXhbal0gPT0gZmlsZSkge1xuXHRcdGNmYi5GaWxlSW5kZXhbal0ubmFtZSA9IGZpbGVuYW1lKG5ld19uYW1lKTtcblx0XHRjZmIuRnVsbFBhdGhzW2pdID0gbmV3X25hbWU7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjZmJfZ2MoY2ZiKSB7IHJlYnVpbGRfY2ZiKGNmYiwgdHJ1ZSk7IH1cblxuZXhwb3J0cy5maW5kID0gZmluZDtcbmV4cG9ydHMucmVhZCA9IHJlYWQ7XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5leHBvcnRzLndyaXRlID0gd3JpdGU7XG5leHBvcnRzLndyaXRlRmlsZSA9IHdyaXRlX2ZpbGU7XG5leHBvcnRzLnV0aWxzID0ge1xuXHRjZmJfbmV3OiBjZmJfbmV3LFxuXHRjZmJfYWRkOiBjZmJfYWRkLFxuXHRjZmJfZGVsOiBjZmJfZGVsLFxuXHRjZmJfbW92OiBjZmJfbW92LFxuXHRjZmJfZ2M6IGNmYl9nYyxcblx0UmVhZFNoaWZ0OiBSZWFkU2hpZnQsXG5cdENoZWNrRmllbGQ6IENoZWNrRmllbGQsXG5cdHByZXBfYmxvYjogcHJlcF9ibG9iLFxuXHRiY29uY2F0OiBiY29uY2F0LFxuXHR1c2VfemxpYjogdXNlX3psaWIsXG5cdF9kZWZsYXRlUmF3OiBfZGVmbGF0ZSxcblx0X2luZmxhdGVSYXc6IF9pbmZsYXRlLFxuXHRjb25zdHM6IGNvbnN0c1xufTtcblxucmV0dXJuIGV4cG9ydHM7XG59KSgpO1xuXG5pZih0eXBlb2YgcmVxdWlyZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIERPX05PVF9FWFBPUlRfQ0ZCID09PSAndW5kZWZpbmVkJykgeyBtb2R1bGUuZXhwb3J0cyA9IENGQjsgfVxudmFyIF9mcztcbmlmKHR5cGVvZiByZXF1aXJlICE9PSAndW5kZWZpbmVkJykgdHJ5IHsgX2ZzID0gcmVxdWlyZSgnZnMnKTsgfSBjYXRjaChlKSB7fVxuXG4vKiBub3JtYWxpemUgZGF0YSBmb3IgYmxvYiBjdG9yICovXG5mdW5jdGlvbiBibG9iaWZ5KGRhdGEpIHtcblx0aWYodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHJldHVybiBzMmFiKGRhdGEpO1xuXHRpZihBcnJheS5pc0FycmF5KGRhdGEpKSByZXR1cm4gYTJ1KGRhdGEpO1xuXHRyZXR1cm4gZGF0YTtcbn1cbi8qIHdyaXRlIG9yIGRvd25sb2FkIGZpbGUgKi9cbmZ1bmN0aW9uIHdyaXRlX2RsKGZuYW1lLCBwYXlsb2FkLCBlbmMpIHtcblx0LypnbG9iYWwgSUVfU2F2ZUZpbGUsIEJsb2IsIG5hdmlnYXRvciwgc2F2ZUFzLCBkb2N1bWVudCwgRmlsZSwgY2hyb21lICovXG5cdGlmKHR5cGVvZiBfZnMgIT09ICd1bmRlZmluZWQnICYmIF9mcy53cml0ZUZpbGVTeW5jKSByZXR1cm4gZW5jID8gX2ZzLndyaXRlRmlsZVN5bmMoZm5hbWUsIHBheWxvYWQsIGVuYykgOiBfZnMud3JpdGVGaWxlU3luYyhmbmFtZSwgcGF5bG9hZCk7XG5cdHZhciBkYXRhID0gKGVuYyA9PSBcInV0ZjhcIikgPyB1dGY4d3JpdGUocGF5bG9hZCkgOiBwYXlsb2FkO1xuaWYodHlwZW9mIElFX1NhdmVGaWxlICE9PSAndW5kZWZpbmVkJykgcmV0dXJuIElFX1NhdmVGaWxlKGRhdGEsIGZuYW1lKTtcblx0aWYodHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0dmFyIGJsb2IgPSBuZXcgQmxvYihbYmxvYmlmeShkYXRhKV0sIHt0eXBlOlwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCJ9KTtcbmlmKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5tc1NhdmVCbG9iKSByZXR1cm4gbmF2aWdhdG9yLm1zU2F2ZUJsb2IoYmxvYiwgZm5hbWUpO1xuaWYodHlwZW9mIHNhdmVBcyAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiBzYXZlQXMoYmxvYiwgZm5hbWUpO1xuXHRcdGlmKHR5cGVvZiBVUkwgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAmJiBVUkwuY3JlYXRlT2JqZWN0VVJMKSB7XG5cdFx0XHR2YXIgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbmlmKHR5cGVvZiBjaHJvbWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiAoY2hyb21lLmRvd25sb2Fkc3x8e30pLmRvd25sb2FkID09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRpZihVUkwucmV2b2tlT2JqZWN0VVJMICYmIHR5cGVvZiBzZXRUaW1lb3V0ICE9PSAndW5kZWZpbmVkJykgc2V0VGltZW91dChmdW5jdGlvbigpIHsgVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpOyB9LCA2MDAwMCk7XG5cdFx0XHRcdHJldHVybiBjaHJvbWUuZG93bmxvYWRzLmRvd25sb2FkKHsgdXJsOiB1cmwsIGZpbGVuYW1lOiBmbmFtZSwgc2F2ZUFzOiB0cnVlfSk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuXHRcdFx0aWYoYS5kb3dubG9hZCAhPSBudWxsKSB7XG5hLmRvd25sb2FkID0gZm5hbWU7IGEuaHJlZiA9IHVybDsgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTsgYS5jbGljaygpO1xuZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChhKTtcblx0XHRcdFx0aWYoVVJMLnJldm9rZU9iamVjdFVSTCAmJiB0eXBlb2Ygc2V0VGltZW91dCAhPT0gJ3VuZGVmaW5lZCcpIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IFVSTC5yZXZva2VPYmplY3RVUkwodXJsKTsgfSwgNjAwMDApO1xuXHRcdFx0XHRyZXR1cm4gdXJsO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHQvLyAkRmxvd0lnbm9yZVxuXHRpZih0eXBlb2YgJCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEZpbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBGb2xkZXIgIT09ICd1bmRlZmluZWQnKSB0cnkgeyAvLyBleHRlbmRzY3JpcHRcblx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdHZhciBvdXQgPSBGaWxlKGZuYW1lKTsgb3V0Lm9wZW4oXCJ3XCIpOyBvdXQuZW5jb2RpbmcgPSBcImJpbmFyeVwiO1xuXHRcdGlmKEFycmF5LmlzQXJyYXkocGF5bG9hZCkpIHBheWxvYWQgPSBhMnMocGF5bG9hZCk7XG5cdFx0b3V0LndyaXRlKHBheWxvYWQpOyBvdXQuY2xvc2UoKTsgcmV0dXJuIHBheWxvYWQ7XG5cdH0gY2F0Y2goZSkgeyBpZighZS5tZXNzYWdlIHx8ICFlLm1lc3NhZ2UubWF0Y2goL29uc3RydWN0LykpIHRocm93IGU7IH1cblx0dGhyb3cgbmV3IEVycm9yKFwiY2Fubm90IHNhdmUgZmlsZSBcIiArIGZuYW1lKTtcbn1cblxuLyogcmVhZCBiaW5hcnkgZGF0YSBmcm9tIGZpbGUgKi9cbmZ1bmN0aW9uIHJlYWRfYmluYXJ5KHBhdGgpIHtcblx0aWYodHlwZW9mIF9mcyAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiBfZnMucmVhZEZpbGVTeW5jKHBhdGgpO1xuXHQvLyAkRmxvd0lnbm9yZVxuXHRpZih0eXBlb2YgJCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEZpbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBGb2xkZXIgIT09ICd1bmRlZmluZWQnKSB0cnkgeyAvLyBleHRlbmRzY3JpcHRcblx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdHZhciBpbmZpbGUgPSBGaWxlKHBhdGgpOyBpbmZpbGUub3BlbihcInJcIik7IGluZmlsZS5lbmNvZGluZyA9IFwiYmluYXJ5XCI7XG5cdFx0dmFyIGRhdGEgPSBpbmZpbGUucmVhZCgpOyBpbmZpbGUuY2xvc2UoKTtcblx0XHRyZXR1cm4gZGF0YTtcblx0fSBjYXRjaChlKSB7IGlmKCFlLm1lc3NhZ2UgfHwgIWUubWVzc2FnZS5tYXRjaCgvb25zdHJ1Y3QvKSkgdGhyb3cgZTsgfVxuXHR0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgYWNjZXNzIGZpbGUgXCIgKyBwYXRoKTtcbn1cbmZ1bmN0aW9uIGtleXMobykge1xuXHR2YXIga3MgPSBPYmplY3Qua2V5cyhvKSwgbzIgPSBbXTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKSBpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywga3NbaV0pKSBvMi5wdXNoKGtzW2ldKTtcblx0cmV0dXJuIG8yO1xufVxuXG5mdW5jdGlvbiBldmVydF9rZXkob2JqLCBrZXkpIHtcblx0dmFyIG8gPSAoW10pLCBLID0ga2V5cyhvYmopO1xuXHRmb3IodmFyIGkgPSAwOyBpICE9PSBLLmxlbmd0aDsgKytpKSBpZihvW29ialtLW2ldXVtrZXldXSA9PSBudWxsKSBvW29ialtLW2ldXVtrZXldXSA9IEtbaV07XG5cdHJldHVybiBvO1xufVxuXG5mdW5jdGlvbiBldmVydChvYmopIHtcblx0dmFyIG8gPSAoW10pLCBLID0ga2V5cyhvYmopO1xuXHRmb3IodmFyIGkgPSAwOyBpICE9PSBLLmxlbmd0aDsgKytpKSBvW29ialtLW2ldXV0gPSBLW2ldO1xuXHRyZXR1cm4gbztcbn1cblxuZnVuY3Rpb24gZXZlcnRfbnVtKG9iaikge1xuXHR2YXIgbyA9IChbXSksIEsgPSBrZXlzKG9iaik7XG5cdGZvcih2YXIgaSA9IDA7IGkgIT09IEsubGVuZ3RoOyArK2kpIG9bb2JqW0tbaV1dXSA9IHBhcnNlSW50KEtbaV0sMTApO1xuXHRyZXR1cm4gbztcbn1cblxuZnVuY3Rpb24gZXZlcnRfYXJyKG9iaikge1xuXHR2YXIgbyA9IChbXSksIEsgPSBrZXlzKG9iaik7XG5cdGZvcih2YXIgaSA9IDA7IGkgIT09IEsubGVuZ3RoOyArK2kpIHtcblx0XHRpZihvW29ialtLW2ldXV0gPT0gbnVsbCkgb1tvYmpbS1tpXV1dID0gW107XG5cdFx0b1tvYmpbS1tpXV1dLnB1c2goS1tpXSk7XG5cdH1cblx0cmV0dXJuIG87XG59XG5cbnZhciBiYXNlZGF0ZSA9IG5ldyBEYXRlKDE4OTksIDExLCAzMCwgMCwgMCwgMCk7IC8vIDIyMDkxNjE2MDAwMDBcbmZ1bmN0aW9uIGRhdGVudW0odiwgZGF0ZTE5MDQpIHtcblx0dmFyIGVwb2NoID0gdi5nZXRUaW1lKCk7XG5cdGlmKGRhdGUxOTA0KSBlcG9jaCAtPSAxNDYyKjI0KjYwKjYwKjEwMDA7XG5cdHZhciBkbnRocmVzaCA9IGJhc2VkYXRlLmdldFRpbWUoKSArICh2LmdldFRpbWV6b25lT2Zmc2V0KCkgLSBiYXNlZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpKSAqIDYwMDAwO1xuXHRyZXR1cm4gKGVwb2NoIC0gZG50aHJlc2gpIC8gKDI0ICogNjAgKiA2MCAqIDEwMDApO1xufVxudmFyIHJlZmRhdGUgPSBuZXcgRGF0ZSgpO1xudmFyIGRudGhyZXNoID0gYmFzZWRhdGUuZ2V0VGltZSgpICsgKHJlZmRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIGJhc2VkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkpICogNjAwMDA7XG52YXIgcmVmb2Zmc2V0ID0gcmVmZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuZnVuY3Rpb24gbnVtZGF0ZSh2KSB7XG5cdHZhciBvdXQgPSBuZXcgRGF0ZSgpO1xuXHRvdXQuc2V0VGltZSh2ICogMjQgKiA2MCAqIDYwICogMTAwMCArIGRudGhyZXNoKTtcblx0aWYgKG91dC5nZXRUaW1lem9uZU9mZnNldCgpICE9PSByZWZvZmZzZXQpIHtcblx0XHRvdXQuc2V0VGltZShvdXQuZ2V0VGltZSgpICsgKG91dC5nZXRUaW1lem9uZU9mZnNldCgpIC0gcmVmb2Zmc2V0KSAqIDYwMDAwKTtcblx0fVxuXHRyZXR1cm4gb3V0O1xufVxuXG4vKiBJU08gODYwMSBEdXJhdGlvbiAqL1xuZnVuY3Rpb24gcGFyc2VfaXNvZHVyKHMpIHtcblx0dmFyIHNlYyA9IDAsIG10ID0gMCwgdGltZSA9IGZhbHNlO1xuXHR2YXIgbSA9IHMubWF0Y2goL1AoWzAtOVxcLl0rWSk/KFswLTlcXC5dK00pPyhbMC05XFwuXStEKT9UKFswLTlcXC5dK0gpPyhbMC05XFwuXStNKT8oWzAtOVxcLl0rUyk/Lyk7XG5cdGlmKCFtKSB0aHJvdyBuZXcgRXJyb3IoXCJ8XCIgKyBzICsgXCJ8IGlzIG5vdCBhbiBJU084NjAxIER1cmF0aW9uXCIpO1xuXHRmb3IodmFyIGkgPSAxOyBpICE9IG0ubGVuZ3RoOyArK2kpIHtcblx0XHRpZighbVtpXSkgY29udGludWU7XG5cdFx0bXQgPSAxO1xuXHRcdGlmKGkgPiAzKSB0aW1lID0gdHJ1ZTtcblx0XHRzd2l0Y2gobVtpXS5zbGljZShtW2ldLmxlbmd0aC0xKSkge1xuXHRcdFx0Y2FzZSAnWSc6XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIElTTyBEdXJhdGlvbiBGaWVsZDogXCIgKyBtW2ldLnNsaWNlKG1baV0ubGVuZ3RoLTEpKTtcblx0XHRcdGNhc2UgJ0QnOiBtdCAqPSAyNDtcblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0Y2FzZSAnSCc6IG10ICo9IDYwO1xuXHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRjYXNlICdNJzpcblx0XHRcdFx0aWYoIXRpbWUpIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIElTTyBEdXJhdGlvbiBGaWVsZDogTVwiKTtcblx0XHRcdFx0ZWxzZSBtdCAqPSA2MDtcblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0Y2FzZSAnUyc6IGJyZWFrO1xuXHRcdH1cblx0XHRzZWMgKz0gbXQgKiBwYXJzZUludChtW2ldLCAxMCk7XG5cdH1cblx0cmV0dXJuIHNlYztcbn1cblxudmFyIGdvb2RfcGRfZGF0ZSA9IG5ldyBEYXRlKCcyMDE3LTAyLTE5VDE5OjA2OjA5LjAwMFonKTtcbmlmKGlzTmFOKGdvb2RfcGRfZGF0ZS5nZXRGdWxsWWVhcigpKSkgZ29vZF9wZF9kYXRlID0gbmV3IERhdGUoJzIvMTkvMTcnKTtcbnZhciBnb29kX3BkID0gZ29vZF9wZF9kYXRlLmdldEZ1bGxZZWFyKCkgPT0gMjAxNztcbi8qIHBhcnNlcyBhIGRhdGUgYXMgYSBsb2NhbCBkYXRlICovXG5mdW5jdGlvbiBwYXJzZURhdGUoc3RyLCBmaXhkYXRlKSB7XG5cdHZhciBkID0gbmV3IERhdGUoc3RyKTtcblx0aWYoZ29vZF9wZCkge1xuaWYoZml4ZGF0ZSA+IDApIGQuc2V0VGltZShkLmdldFRpbWUoKSArIGQuZ2V0VGltZXpvbmVPZmZzZXQoKSAqIDYwICogMTAwMCk7XG5cdFx0ZWxzZSBpZihmaXhkYXRlIDwgMCkgZC5zZXRUaW1lKGQuZ2V0VGltZSgpIC0gZC5nZXRUaW1lem9uZU9mZnNldCgpICogNjAgKiAxMDAwKTtcblx0XHRyZXR1cm4gZDtcblx0fVxuXHRpZihzdHIgaW5zdGFuY2VvZiBEYXRlKSByZXR1cm4gc3RyO1xuXHRpZihnb29kX3BkX2RhdGUuZ2V0RnVsbFllYXIoKSA9PSAxOTE3ICYmICFpc05hTihkLmdldEZ1bGxZZWFyKCkpKSB7XG5cdFx0dmFyIHMgPSBkLmdldEZ1bGxZZWFyKCk7XG5cdFx0aWYoc3RyLmluZGV4T2YoXCJcIiArIHMpID4gLTEpIHJldHVybiBkO1xuXHRcdGQuc2V0RnVsbFllYXIoZC5nZXRGdWxsWWVhcigpICsgMTAwKTsgcmV0dXJuIGQ7XG5cdH1cblx0dmFyIG4gPSBzdHIubWF0Y2goL1xcZCsvZyl8fFtcIjIwMTdcIixcIjJcIixcIjE5XCIsXCIwXCIsXCIwXCIsXCIwXCJdO1xuXHR2YXIgb3V0ID0gbmV3IERhdGUoK25bMF0sICtuWzFdIC0gMSwgK25bMl0sICgrblszXXx8MCksICgrbls0XXx8MCksICgrbls1XXx8MCkpO1xuXHRpZihzdHIuaW5kZXhPZihcIlpcIikgPiAtMSkgb3V0ID0gbmV3IERhdGUob3V0LmdldFRpbWUoKSAtIG91dC5nZXRUaW1lem9uZU9mZnNldCgpICogNjAgKiAxMDAwKTtcblx0cmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gY2Myc3RyKGFycikge1xuXHR2YXIgbyA9IFwiXCI7XG5cdGZvcih2YXIgaSA9IDA7IGkgIT0gYXJyLmxlbmd0aDsgKytpKSBvICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYXJyW2ldKTtcblx0cmV0dXJuIG87XG59XG5cbmZ1bmN0aW9uIGR1cChvKSB7XG5cdGlmKHR5cGVvZiBKU09OICE9ICd1bmRlZmluZWQnICYmICFBcnJheS5pc0FycmF5KG8pKSByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvKSk7XG5cdGlmKHR5cGVvZiBvICE9ICdvYmplY3QnIHx8IG8gPT0gbnVsbCkgcmV0dXJuIG87XG5cdGlmKG8gaW5zdGFuY2VvZiBEYXRlKSByZXR1cm4gbmV3IERhdGUoby5nZXRUaW1lKCkpO1xuXHR2YXIgb3V0ID0ge307XG5cdGZvcih2YXIgayBpbiBvKSBpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgaykpIG91dFtrXSA9IGR1cChvW2tdKTtcblx0cmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gZmlsbChjLGwpIHsgdmFyIG8gPSBcIlwiOyB3aGlsZShvLmxlbmd0aCA8IGwpIG8rPWM7IHJldHVybiBvOyB9XG5cbi8qIFRPRE86IHN0cmVzcyB0ZXN0ICovXG5mdW5jdGlvbiBmdXp6eW51bShzKSB7XG5cdHZhciB2ID0gTnVtYmVyKHMpO1xuXHRpZihpc0Zpbml0ZSh2KSkgcmV0dXJuIHY7XG5cdGlmKCFpc05hTih2KSkgcmV0dXJuIE5hTjtcblx0aWYoIS9cXGQvLnRlc3QocykpIHJldHVybiB2O1xuXHR2YXIgd3QgPSAxO1xuXHR2YXIgc3MgPSBzLnJlcGxhY2UoLyhbXFxkXSksKFtcXGRdKS9nLFwiJDEkMlwiKS5yZXBsYWNlKC9bJF0vZyxcIlwiKS5yZXBsYWNlKC9bJV0vZywgZnVuY3Rpb24oKSB7IHd0ICo9IDEwMDsgcmV0dXJuIFwiXCI7fSk7XG5cdGlmKCFpc05hTih2ID0gTnVtYmVyKHNzKSkpIHJldHVybiB2IC8gd3Q7XG5cdHNzID0gc3MucmVwbGFjZSgvWyhdKC4qKVspXS8sZnVuY3Rpb24oJCQsICQxKSB7IHd0ID0gLXd0OyByZXR1cm4gJDE7fSk7XG5cdGlmKCFpc05hTih2ID0gTnVtYmVyKHNzKSkpIHJldHVybiB2IC8gd3Q7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gZnV6enlkYXRlKHMpIHtcblx0dmFyIG8gPSBuZXcgRGF0ZShzKSwgbiA9IG5ldyBEYXRlKE5hTik7XG5cdHZhciB5ID0gby5nZXRZZWFyKCksIG0gPSBvLmdldE1vbnRoKCksIGQgPSBvLmdldERhdGUoKTtcblx0aWYoaXNOYU4oZCkpIHJldHVybiBuO1xuXHRpZih5IDwgMCB8fCB5ID4gODA5OSkgcmV0dXJuIG47XG5cdGlmKChtID4gMCB8fCBkID4gMSkgJiYgeSAhPSAxMDEpIHJldHVybiBvO1xuXHRpZihzLnRvTG93ZXJDYXNlKCkubWF0Y2goL2phbnxmZWJ8bWFyfGFwcnxtYXl8anVufGp1bHxhdWd8c2VwfG9jdHxub3Z8ZGVjLykpIHJldHVybiBvO1xuXHRpZihzLm1hdGNoKC9bXi0wLTk6LFxcL1xcXFxdLykpIHJldHVybiBuO1xuXHRyZXR1cm4gbztcbn1cblxudmFyIHNhZmVfc3BsaXRfcmVnZXggPSBcImFiYWNhYmFcIi5zcGxpdCgvKDo/YikvaSkubGVuZ3RoID09IDU7XG5mdW5jdGlvbiBzcGxpdF9yZWdleChzdHIsIHJlLCBkZWYpIHtcblx0aWYoc2FmZV9zcGxpdF9yZWdleCB8fCB0eXBlb2YgcmUgPT0gXCJzdHJpbmdcIikgcmV0dXJuIHN0ci5zcGxpdChyZSk7XG5cdHZhciBwID0gc3RyLnNwbGl0KHJlKSwgbyA9IFtwWzBdXTtcblx0Zm9yKHZhciBpID0gMTsgaSA8IHAubGVuZ3RoOyArK2kpIHsgby5wdXNoKGRlZik7IG8ucHVzaChwW2ldKTsgfVxuXHRyZXR1cm4gbztcbn1cbmZ1bmN0aW9uIGdldGRhdGFzdHIoZGF0YSkge1xuXHRpZighZGF0YSkgcmV0dXJuIG51bGw7XG5cdGlmKGRhdGEuZGF0YSkgcmV0dXJuIGRlYm9tKGRhdGEuZGF0YSk7XG5cdGlmKGRhdGEuYXNOb2RlQnVmZmVyICYmIGhhc19idWYpIHJldHVybiBkZWJvbShkYXRhLmFzTm9kZUJ1ZmZlcigpLnRvU3RyaW5nKCdiaW5hcnknKSk7XG5cdGlmKGRhdGEuYXNCaW5hcnkpIHJldHVybiBkZWJvbShkYXRhLmFzQmluYXJ5KCkpO1xuXHRpZihkYXRhLl9kYXRhICYmIGRhdGEuX2RhdGEuZ2V0Q29udGVudCkgcmV0dXJuIGRlYm9tKGNjMnN0cihBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkYXRhLl9kYXRhLmdldENvbnRlbnQoKSwwKSkpO1xuXHRpZihkYXRhLmNvbnRlbnQgJiYgZGF0YS50eXBlKSByZXR1cm4gZGVib20oY2Myc3RyKGRhdGEuY29udGVudCkpO1xuXHRyZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0ZGF0YWJpbihkYXRhKSB7XG5cdGlmKCFkYXRhKSByZXR1cm4gbnVsbDtcblx0aWYoZGF0YS5kYXRhKSByZXR1cm4gY2hhcl9jb2RlcyhkYXRhLmRhdGEpO1xuXHRpZihkYXRhLmFzTm9kZUJ1ZmZlciAmJiBoYXNfYnVmKSByZXR1cm4gZGF0YS5hc05vZGVCdWZmZXIoKTtcblx0aWYoZGF0YS5fZGF0YSAmJiBkYXRhLl9kYXRhLmdldENvbnRlbnQpIHtcblx0XHR2YXIgbyA9IGRhdGEuX2RhdGEuZ2V0Q29udGVudCgpO1xuXHRcdGlmKHR5cGVvZiBvID09IFwic3RyaW5nXCIpIHJldHVybiBjaGFyX2NvZGVzKG8pO1xuXHRcdHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChvKTtcblx0fVxuXHRpZihkYXRhLmNvbnRlbnQgJiYgZGF0YS50eXBlKSByZXR1cm4gZGF0YS5jb250ZW50O1xuXHRyZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0ZGF0YShkYXRhKSB7IHJldHVybiAoZGF0YSAmJiBkYXRhLm5hbWUuc2xpY2UoLTQpID09PSBcIi5iaW5cIikgPyBnZXRkYXRhYmluKGRhdGEpIDogZ2V0ZGF0YXN0cihkYXRhKTsgfVxuXG4vKiBQYXJ0IDIgU2VjdGlvbiAxMC4xLjIgXCJNYXBwaW5nIENvbnRlbnQgVHlwZXNcIiBOYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSAqL1xuLyogT0FTSVMgZG9lcyBub3QgY29tbWVudCBvbiBmaWxlbmFtZSBjYXNlIHNlbnNpdGl2aXR5ICovXG5mdW5jdGlvbiBzYWZlZ2V0emlwZmlsZSh6aXAsIGZpbGUpIHtcblx0dmFyIGsgPSB6aXAuRnVsbFBhdGhzIHx8IGtleXMoemlwLmZpbGVzKTtcblx0dmFyIGYgPSBmaWxlLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvW1xcL10vZywgJ1xcXFwnKSwgZyA9IGYucmVwbGFjZSgvXFxcXC9nLCdcXC8nKTtcblx0Zm9yKHZhciBpPTA7IGk8ay5sZW5ndGg7ICsraSkge1xuXHRcdHZhciBuID0ga1tpXS5yZXBsYWNlKC9eUm9vdCBFbnRyeVtcXC9dLyxcIlwiKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGlmKGYgPT0gbiB8fCBnID09IG4pIHJldHVybiB6aXAuZmlsZXMgPyB6aXAuZmlsZXNba1tpXV0gOiB6aXAuRmlsZUluZGV4W2ldO1xuXHR9XG5cdHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXR6aXBmaWxlKHppcCwgZmlsZSkge1xuXHR2YXIgbyA9IHNhZmVnZXR6aXBmaWxlKHppcCwgZmlsZSk7XG5cdGlmKG8gPT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgZmlsZSBcIiArIGZpbGUgKyBcIiBpbiB6aXBcIik7XG5cdHJldHVybiBvO1xufVxuXG5mdW5jdGlvbiBnZXR6aXBkYXRhKHppcCwgZmlsZSwgc2FmZSkge1xuXHRpZighc2FmZSkgcmV0dXJuIGdldGRhdGEoZ2V0emlwZmlsZSh6aXAsIGZpbGUpKTtcblx0aWYoIWZpbGUpIHJldHVybiBudWxsO1xuXHR0cnkgeyByZXR1cm4gZ2V0emlwZGF0YSh6aXAsIGZpbGUpOyB9IGNhdGNoKGUpIHsgcmV0dXJuIG51bGw7IH1cbn1cblxuZnVuY3Rpb24gZ2V0emlwc3RyKHppcCwgZmlsZSwgc2FmZSkge1xuXHRpZighc2FmZSkgcmV0dXJuIGdldGRhdGFzdHIoZ2V0emlwZmlsZSh6aXAsIGZpbGUpKTtcblx0aWYoIWZpbGUpIHJldHVybiBudWxsO1xuXHR0cnkgeyByZXR1cm4gZ2V0emlwc3RyKHppcCwgZmlsZSk7IH0gY2F0Y2goZSkgeyByZXR1cm4gbnVsbDsgfVxufVxuXG5mdW5jdGlvbiB6aXBlbnRyaWVzKHppcCkge1xuXHR2YXIgayA9IHppcC5GdWxsUGF0aHMgfHwga2V5cyh6aXAuZmlsZXMpLCBvID0gW107XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBrLmxlbmd0aDsgKytpKSBpZihrW2ldLnNsaWNlKC0xKSAhPSAnLycpIG8ucHVzaChrW2ldKTtcblx0cmV0dXJuIG8uc29ydCgpO1xufVxuXG5mdW5jdGlvbiB6aXBfYWRkX2ZpbGUoemlwLCBwYXRoLCBjb250ZW50KSB7XG5cdGlmKHppcC5GdWxsUGF0aHMpIENGQi51dGlscy5jZmJfYWRkKHppcCwgcGF0aCwgY29udGVudCk7XG5cdGVsc2UgemlwLmZpbGUocGF0aCwgY29udGVudCk7XG59XG5cbnZhciBqc3ppcDtcbi8qZ2xvYmFsIEpTWmlwU3luYzp0cnVlICovXG5pZih0eXBlb2YgSlNaaXBTeW5jICE9PSAndW5kZWZpbmVkJykganN6aXAgPSBKU1ppcFN5bmM7XG5pZih0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0aWYodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRpZih0eXBlb2YganN6aXAgPT09ICd1bmRlZmluZWQnKSBqc3ppcCA9IHJlcXVpcmUoJy4vanN6aXAuanMnKTtcblx0fVxufVxuXG5mdW5jdGlvbiB6aXBfbmV3KCkge1xuXHRpZighanN6aXApIHJldHVybiBDRkIudXRpbHMuY2ZiX25ldygpO1xuXHRyZXR1cm4gbmV3IGpzemlwKCk7XG59XG5cbmZ1bmN0aW9uIHppcF9yZWFkKGQsIG8pIHtcblx0dmFyIHppcDtcblx0aWYoanN6aXApIHN3aXRjaChvLnR5cGUpIHtcblx0XHRjYXNlIFwiYmFzZTY0XCI6IHppcCA9IG5ldyBqc3ppcChkLCB7IGJhc2U2NDp0cnVlIH0pOyBicmVhaztcblx0XHRjYXNlIFwiYmluYXJ5XCI6IGNhc2UgXCJhcnJheVwiOiB6aXAgPSBuZXcganN6aXAoZCwgeyBiYXNlNjQ6ZmFsc2UgfSk7IGJyZWFrO1xuXHRcdGNhc2UgXCJidWZmZXJcIjogemlwID0gbmV3IGpzemlwKGQpOyBicmVhaztcblx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgdHlwZSBcIiArIG8udHlwZSk7XG5cdH1cblx0ZWxzZSBzd2l0Y2goby50eXBlKSB7XG5cdFx0Y2FzZSBcImJhc2U2NFwiOiB6aXAgPSBDRkIucmVhZChkLCB7IHR5cGU6IFwiYmFzZTY0XCIgfSk7IGJyZWFrO1xuXHRcdGNhc2UgXCJiaW5hcnlcIjogemlwID0gQ0ZCLnJlYWQoZCwgeyB0eXBlOiBcImJpbmFyeVwiIH0pOyBicmVhaztcblx0XHRjYXNlIFwiYnVmZmVyXCI6IGNhc2UgXCJhcnJheVwiOiB6aXAgPSBDRkIucmVhZChkLCB7IHR5cGU6IFwiYnVmZmVyXCIgfSk7IGJyZWFrO1xuXHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCB0eXBlIFwiICsgby50eXBlKTtcblx0fVxuXHRyZXR1cm4gemlwO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlX3BhdGgocGF0aCwgYmFzZSkge1xuXHRpZihwYXRoLmNoYXJBdCgwKSA9PSBcIi9cIikgcmV0dXJuIHBhdGguc2xpY2UoMSk7XG5cdHZhciByZXN1bHQgPSBiYXNlLnNwbGl0KCcvJyk7XG5cdGlmKGJhc2Uuc2xpY2UoLTEpICE9IFwiL1wiKSByZXN1bHQucG9wKCk7IC8vIGZvbGRlciBwYXRoXG5cdHZhciB0YXJnZXQgPSBwYXRoLnNwbGl0KCcvJyk7XG5cdHdoaWxlICh0YXJnZXQubGVuZ3RoICE9PSAwKSB7XG5cdFx0dmFyIHN0ZXAgPSB0YXJnZXQuc2hpZnQoKTtcblx0XHRpZiAoc3RlcCA9PT0gJy4uJykgcmVzdWx0LnBvcCgpO1xuXHRcdGVsc2UgaWYgKHN0ZXAgIT09ICcuJykgcmVzdWx0LnB1c2goc3RlcCk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdC5qb2luKCcvJyk7XG59XG52YXIgWE1MX0hFQURFUiA9ICc8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiIHN0YW5kYWxvbmU9XCJ5ZXNcIj8+XFxyXFxuJztcbnZhciBhdHRyZWdleGc9LyhbXlwiXFxzPz5cXC9dKylcXHMqPVxccyooKD86XCIpKFteXCJdKikoPzpcIil8KD86JykoW14nXSopKD86Jyl8KFteJ1wiPlxcc10rKSkvZztcbnZhciB0YWdyZWdleD0vPFtcXC9cXD9dP1thLXpBLVowLTk6Xy1dKyg/OlxccytbXlwiXFxzPz5cXC9dK1xccyo9XFxzKig/OlwiW15cIl0qXCJ8J1teJ10qJ3xbXidcIj5cXHM9XSspKSpcXHMqW1xcL1xcP10/Pi9tZztcblxuaWYoIShYTUxfSEVBREVSLm1hdGNoKHRhZ3JlZ2V4KSkpIHRhZ3JlZ2V4ID0gLzxbXj5dKj4vZztcbnZhciBuc3JlZ2V4PS88XFx3KjovLCBuc3JlZ2V4MiA9IC88KFxcLz8pXFx3KzovO1xuZnVuY3Rpb24gcGFyc2V4bWx0YWcodGFnLCBza2lwX3Jvb3QsIHNraXBfTEMpIHtcblx0dmFyIHogPSAoe30pO1xuXHR2YXIgZXEgPSAwLCBjID0gMDtcblx0Zm9yKDsgZXEgIT09IHRhZy5sZW5ndGg7ICsrZXEpIGlmKChjID0gdGFnLmNoYXJDb2RlQXQoZXEpKSA9PT0gMzIgfHwgYyA9PT0gMTAgfHwgYyA9PT0gMTMpIGJyZWFrO1xuXHRpZighc2tpcF9yb290KSB6WzBdID0gdGFnLnNsaWNlKDAsIGVxKTtcblx0aWYoZXEgPT09IHRhZy5sZW5ndGgpIHJldHVybiB6O1xuXHR2YXIgbSA9IHRhZy5tYXRjaChhdHRyZWdleGcpLCBqPTAsIHY9XCJcIiwgaT0wLCBxPVwiXCIsIGNjPVwiXCIsIHF1b3QgPSAxO1xuXHRpZihtKSBmb3IoaSA9IDA7IGkgIT0gbS5sZW5ndGg7ICsraSkge1xuXHRcdGNjID0gbVtpXTtcblx0XHRmb3IoYz0wOyBjICE9IGNjLmxlbmd0aDsgKytjKSBpZihjYy5jaGFyQ29kZUF0KGMpID09PSA2MSkgYnJlYWs7XG5cdFx0cSA9IGNjLnNsaWNlKDAsYykudHJpbSgpO1xuXHRcdHdoaWxlKGNjLmNoYXJDb2RlQXQoYysxKSA9PSAzMikgKytjO1xuXHRcdHF1b3QgPSAoKGVxPWNjLmNoYXJDb2RlQXQoYysxKSkgPT0gMzQgfHwgZXEgPT0gMzkpID8gMSA6IDA7XG5cdFx0diA9IGNjLnNsaWNlKGMrMStxdW90LCBjYy5sZW5ndGgtcXVvdCk7XG5cdFx0Zm9yKGo9MDtqIT1xLmxlbmd0aDsrK2opIGlmKHEuY2hhckNvZGVBdChqKSA9PT0gNTgpIGJyZWFrO1xuXHRcdGlmKGo9PT1xLmxlbmd0aCkge1xuXHRcdFx0aWYocS5pbmRleE9mKFwiX1wiKSA+IDApIHEgPSBxLnNsaWNlKDAsIHEuaW5kZXhPZihcIl9cIikpOyAvLyBmcm9tIG9kc1xuXHRcdFx0eltxXSA9IHY7XG5cdFx0XHRpZighc2tpcF9MQykgeltxLnRvTG93ZXJDYXNlKCldID0gdjtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHR2YXIgayA9IChqPT09NSAmJiBxLnNsaWNlKDAsNSk9PT1cInhtbG5zXCI/XCJ4bWxuc1wiOlwiXCIpK3Euc2xpY2UoaisxKTtcblx0XHRcdGlmKHpba10gJiYgcS5zbGljZShqLTMsaikgPT0gXCJleHRcIikgY29udGludWU7IC8vIGZyb20gb2RzXG5cdFx0XHR6W2tdID0gdjtcblx0XHRcdGlmKCFza2lwX0xDKSB6W2sudG9Mb3dlckNhc2UoKV0gPSB2O1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gejtcbn1cbmZ1bmN0aW9uIHN0cmlwX25zKHgpIHsgcmV0dXJuIHgucmVwbGFjZShuc3JlZ2V4MiwgXCI8JDFcIik7IH1cblxudmFyIGVuY29kaW5ncyA9IHtcblx0JyZxdW90Oyc6ICdcIicsXG5cdCcmYXBvczsnOiBcIidcIixcblx0JyZndDsnOiAnPicsXG5cdCcmbHQ7JzogJzwnLFxuXHQnJmFtcDsnOiAnJidcbn07XG52YXIgcmVuY29kaW5nID0gZXZlcnQoZW5jb2RpbmdzKTtcbi8vdmFyIHJlbmNzdHIgPSBcIiY8PidcXFwiXCIuc3BsaXQoXCJcIik7XG5cbi8vIFRPRE86IENQIHJlbWFwIChuZWVkIHRvIHJlYWQgZmlsZSB2ZXJzaW9uIHRvIGRldGVybWluZSBPUylcbnZhciB1bmVzY2FwZXhtbCA9IChmdW5jdGlvbigpIHtcblx0LyogMjIuNC4yLjQgYnN0ciAoQmFzaWMgU3RyaW5nKSAqL1xuXHR2YXIgZW5jcmVnZXggPSAvJig/OnF1b3R8YXBvc3xndHxsdHxhbXB8I3g/KFtcXGRhLWZBLUZdKykpOy9pZywgY29kZXJlZ2V4ID0gL194KFtcXGRhLWZBLUZdezR9KV8vaWc7XG5cdHJldHVybiBmdW5jdGlvbiB1bmVzY2FwZXhtbCh0ZXh0KSB7XG5cdFx0dmFyIHMgPSB0ZXh0ICsgJycsIGkgPSBzLmluZGV4T2YoXCI8IVtDREFUQVtcIik7XG5cdFx0aWYoaSA9PSAtMSkgcmV0dXJuIHMucmVwbGFjZShlbmNyZWdleCwgZnVuY3Rpb24oJCQsICQxKSB7IHJldHVybiBlbmNvZGluZ3NbJCRdfHxTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KCQxLCQkLmluZGV4T2YoXCJ4XCIpPi0xPzE2OjEwKSl8fCQkOyB9KS5yZXBsYWNlKGNvZGVyZWdleCxmdW5jdGlvbihtLGMpIHtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChjLDE2KSk7fSk7XG5cdFx0dmFyIGogPSBzLmluZGV4T2YoXCJdXT5cIik7XG5cdFx0cmV0dXJuIHVuZXNjYXBleG1sKHMuc2xpY2UoMCwgaSkpICsgcy5zbGljZShpKzksaikgKyB1bmVzY2FwZXhtbChzLnNsaWNlKGorMykpO1xuXHR9O1xufSkoKTtcblxudmFyIGRlY3JlZ2V4PS9bJjw+J1wiXS9nLCBjaGFyZWdleCA9IC9bXFx1MDAwMC1cXHUwMDA4XFx1MDAwYi1cXHUwMDFmXS9nO1xuZnVuY3Rpb24gZXNjYXBleG1sKHRleHQpe1xuXHR2YXIgcyA9IHRleHQgKyAnJztcblx0cmV0dXJuIHMucmVwbGFjZShkZWNyZWdleCwgZnVuY3Rpb24oeSkgeyByZXR1cm4gcmVuY29kaW5nW3ldOyB9KS5yZXBsYWNlKGNoYXJlZ2V4LGZ1bmN0aW9uKHMpIHsgcmV0dXJuIFwiX3hcIiArIChcIjAwMFwiK3MuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC00KSArIFwiX1wiO30pO1xufVxuZnVuY3Rpb24gZXNjYXBleG1sdGFnKHRleHQpeyByZXR1cm4gZXNjYXBleG1sKHRleHQpLnJlcGxhY2UoLyAvZyxcIl94MDAyMF9cIik7IH1cblxudmFyIGh0bWxjaGFyZWdleCA9IC9bXFx1MDAwMC1cXHUwMDFmXS9nO1xuZnVuY3Rpb24gZXNjYXBlaHRtbCh0ZXh0KXtcblx0dmFyIHMgPSB0ZXh0ICsgJyc7XG5cdHJldHVybiBzLnJlcGxhY2UoZGVjcmVnZXgsIGZ1bmN0aW9uKHkpIHsgcmV0dXJuIHJlbmNvZGluZ1t5XTsgfSkucmVwbGFjZSgvXFxuL2csIFwiPGJyLz5cIikucmVwbGFjZShodG1sY2hhcmVnZXgsZnVuY3Rpb24ocykgeyByZXR1cm4gXCImI3hcIiArIChcIjAwMFwiK3MuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC00KSArIFwiO1wiOyB9KTtcbn1cblxuZnVuY3Rpb24gZXNjYXBleGxtbCh0ZXh0KXtcblx0dmFyIHMgPSB0ZXh0ICsgJyc7XG5cdHJldHVybiBzLnJlcGxhY2UoZGVjcmVnZXgsIGZ1bmN0aW9uKHkpIHsgcmV0dXJuIHJlbmNvZGluZ1t5XTsgfSkucmVwbGFjZShodG1sY2hhcmVnZXgsZnVuY3Rpb24ocykgeyByZXR1cm4gXCImI3hcIiArIChzLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKS50b1VwcGVyQ2FzZSgpICsgXCI7XCI7IH0pO1xufVxuXG4vKiBUT0RPOiBoYW5kbGUgY29kZXBhZ2VzICovXG52YXIgeGxtbF9maXhzdHIgPSAoZnVuY3Rpb24oKSB7XG5cdHZhciBlbnRyZWdleCA9IC8mIyhcXGQrKTsvZztcblx0ZnVuY3Rpb24gZW50cmVwbCgkJCwkMSkgeyByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludCgkMSwxMCkpOyB9XG5cdHJldHVybiBmdW5jdGlvbiB4bG1sX2ZpeHN0cihzdHIpIHsgcmV0dXJuIHN0ci5yZXBsYWNlKGVudHJlZ2V4LGVudHJlcGwpOyB9O1xufSkoKTtcbnZhciB4bG1sX3VuZml4c3RyID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gZnVuY3Rpb24geGxtbF91bmZpeHN0cihzdHIpIHsgcmV0dXJuIHN0ci5yZXBsYWNlKC8oXFxyXFxufFtcXHJcXG5dKS9nLFwiXFwmIzEwO1wiKTsgfTtcbn0pKCk7XG5cbmZ1bmN0aW9uIHBhcnNleG1sYm9vbCh2YWx1ZSkge1xuXHRzd2l0Y2godmFsdWUpIHtcblx0XHRjYXNlIDE6IGNhc2UgdHJ1ZTogY2FzZSAnMSc6IGNhc2UgJ3RydWUnOiBjYXNlICdUUlVFJzogcmV0dXJuIHRydWU7XG5cdFx0LyogY2FzZSAnMCc6IGNhc2UgJ2ZhbHNlJzogY2FzZSAnRkFMU0UnOiovXG5cdFx0ZGVmYXVsdDogcmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbnZhciB1dGY4cmVhZCA9IGZ1bmN0aW9uIHV0ZjhyZWFkYShvcmlnKSB7XG5cdHZhciBvdXQgPSBcIlwiLCBpID0gMCwgYyA9IDAsIGQgPSAwLCBlID0gMCwgZiA9IDAsIHcgPSAwO1xuXHR3aGlsZSAoaSA8IG9yaWcubGVuZ3RoKSB7XG5cdFx0YyA9IG9yaWcuY2hhckNvZGVBdChpKyspO1xuXHRcdGlmIChjIDwgMTI4KSB7IG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMpOyBjb250aW51ZTsgfVxuXHRcdGQgPSBvcmlnLmNoYXJDb2RlQXQoaSsrKTtcblx0XHRpZiAoYz4xOTEgJiYgYzwyMjQpIHsgZiA9ICgoYyAmIDMxKSA8PCA2KTsgZiB8PSAoZCAmIDYzKTsgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZik7IGNvbnRpbnVlOyB9XG5cdFx0ZSA9IG9yaWcuY2hhckNvZGVBdChpKyspO1xuXHRcdGlmIChjIDwgMjQwKSB7IG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYyAmIDE1KSA8PCAxMikgfCAoKGQgJiA2MykgPDwgNikgfCAoZSAmIDYzKSk7IGNvbnRpbnVlOyB9XG5cdFx0ZiA9IG9yaWcuY2hhckNvZGVBdChpKyspO1xuXHRcdHcgPSAoKChjICYgNykgPDwgMTgpIHwgKChkICYgNjMpIDw8IDEyKSB8ICgoZSAmIDYzKSA8PCA2KSB8IChmICYgNjMpKS02NTUzNjtcblx0XHRvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEQ4MDAgKyAoKHc+Pj4xMCkmMTAyMykpO1xuXHRcdG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4REMwMCArICh3JjEwMjMpKTtcblx0fVxuXHRyZXR1cm4gb3V0O1xufTtcblxudmFyIHV0Zjh3cml0ZSA9IGZ1bmN0aW9uKG9yaWcpIHtcblx0dmFyIG91dCA9IFtdLCBpID0gMCwgYyA9IDAsIGQgPSAwO1xuXHR3aGlsZShpIDwgb3JpZy5sZW5ndGgpIHtcblx0XHRjID0gb3JpZy5jaGFyQ29kZUF0KGkrKyk7XG5cdFx0c3dpdGNoKHRydWUpIHtcblx0XHRcdGNhc2UgYyA8IDEyODogb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjKSk7IGJyZWFrO1xuXHRcdFx0Y2FzZSBjIDwgMjA0ODpcblx0XHRcdFx0b3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSgxOTIgKyAoYyA+PiA2KSkpO1xuXHRcdFx0XHRvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKDEyOCArIChjICYgNjMpKSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBjID49IDU1Mjk2ICYmIGMgPCA1NzM0NDpcblx0XHRcdFx0YyAtPSA1NTI5NjsgZCA9IG9yaWcuY2hhckNvZGVBdChpKyspIC0gNTYzMjAgKyAoYzw8MTApO1xuXHRcdFx0XHRvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKDI0MCArICgoZCA+PjE4KSAmIDcpKSk7XG5cdFx0XHRcdG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoMTQ0ICsgKChkID4+MTIpICYgNjMpKSk7XG5cdFx0XHRcdG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoMTI4ICsgKChkID4+IDYpICYgNjMpKSk7XG5cdFx0XHRcdG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoMTI4ICsgKGQgJiA2MykpKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKDIyNCArIChjID4+IDEyKSkpO1xuXHRcdFx0XHRvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKDEyOCArICgoYyA+PiA2KSAmIDYzKSkpO1xuXHRcdFx0XHRvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKDEyOCArIChjICYgNjMpKSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBvdXQuam9pbihcIlwiKTtcbn07XG5cbmlmKGhhc19idWYpIHtcblx0dmFyIHV0ZjhyZWFkYiA9IGZ1bmN0aW9uIHV0ZjhyZWFkYihkYXRhKSB7XG5cdFx0dmFyIG91dCA9IEJ1ZmZlci5hbGxvYygyKmRhdGEubGVuZ3RoKSwgdywgaSwgaiA9IDEsIGsgPSAwLCB3dz0wLCBjO1xuXHRcdGZvcihpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKz1qKSB7XG5cdFx0XHRqID0gMTtcblx0XHRcdGlmKChjPWRhdGEuY2hhckNvZGVBdChpKSkgPCAxMjgpIHcgPSBjO1xuXHRcdFx0ZWxzZSBpZihjIDwgMjI0KSB7IHcgPSAoYyYzMSkqNjQrKGRhdGEuY2hhckNvZGVBdChpKzEpJjYzKTsgaj0yOyB9XG5cdFx0XHRlbHNlIGlmKGMgPCAyNDApIHsgdz0oYyYxNSkqNDA5NisoZGF0YS5jaGFyQ29kZUF0KGkrMSkmNjMpKjY0KyhkYXRhLmNoYXJDb2RlQXQoaSsyKSY2Myk7IGo9MzsgfVxuXHRcdFx0ZWxzZSB7IGogPSA0O1xuXHRcdFx0XHR3ID0gKGMgJiA3KSoyNjIxNDQrKGRhdGEuY2hhckNvZGVBdChpKzEpJjYzKSo0MDk2KyhkYXRhLmNoYXJDb2RlQXQoaSsyKSY2MykqNjQrKGRhdGEuY2hhckNvZGVBdChpKzMpJjYzKTtcblx0XHRcdFx0dyAtPSA2NTUzNjsgd3cgPSAweEQ4MDAgKyAoKHc+Pj4xMCkmMTAyMyk7IHcgPSAweERDMDAgKyAodyYxMDIzKTtcblx0XHRcdH1cblx0XHRcdGlmKHd3ICE9PSAwKSB7IG91dFtrKytdID0gd3cmMjU1OyBvdXRbaysrXSA9IHd3Pj4+ODsgd3cgPSAwOyB9XG5cdFx0XHRvdXRbaysrXSA9IHclMjU2OyBvdXRbaysrXSA9IHc+Pj44O1xuXHRcdH1cblx0XHRyZXR1cm4gb3V0LnNsaWNlKDAsaykudG9TdHJpbmcoJ3VjczInKTtcblx0fTtcblx0dmFyIGNvcnB1cyA9IFwiZm9vIGJhciBiYXpcXHUwMGUyXFx1MDA5OFxcdTAwODNcXHUwMGYwXFx1MDA5ZlxcdTAwOGRcXHUwMGEzXCI7XG5cdGlmKHV0ZjhyZWFkKGNvcnB1cykgPT0gdXRmOHJlYWRiKGNvcnB1cykpIHV0ZjhyZWFkID0gdXRmOHJlYWRiO1xuXHR2YXIgdXRmOHJlYWRjID0gZnVuY3Rpb24gdXRmOHJlYWRjKGRhdGEpIHsgcmV0dXJuIEJ1ZmZlcl9mcm9tKGRhdGEsICdiaW5hcnknKS50b1N0cmluZygndXRmOCcpOyB9O1xuXHRpZih1dGY4cmVhZChjb3JwdXMpID09IHV0ZjhyZWFkYyhjb3JwdXMpKSB1dGY4cmVhZCA9IHV0ZjhyZWFkYztcblxuXHR1dGY4d3JpdGUgPSBmdW5jdGlvbihkYXRhKSB7IHJldHVybiBCdWZmZXJfZnJvbShkYXRhLCAndXRmOCcpLnRvU3RyaW5nKFwiYmluYXJ5XCIpOyB9O1xufVxuXG4vLyBtYXRjaGVzIDxmb28+Li4uPC9mb28+IGV4dHJhY3RzIGNvbnRlbnRcbnZhciBtYXRjaHRhZyA9IChmdW5jdGlvbigpIHtcblx0dmFyIG10Y2FjaGUgPSAoe30pO1xuXHRyZXR1cm4gZnVuY3Rpb24gbWF0Y2h0YWcoZixnKSB7XG5cdFx0dmFyIHQgPSBmK1wifFwiKyhnfHxcIlwiKTtcblx0XHRpZihtdGNhY2hlW3RdKSByZXR1cm4gbXRjYWNoZVt0XTtcblx0XHRyZXR1cm4gKG10Y2FjaGVbdF0gPSBuZXcgUmVnRXhwKCc8KD86XFxcXHcrOik/JytmKycoPzogeG1sOnNwYWNlPVwicHJlc2VydmVcIik/KD86W14+XSopPihbXFxcXHNcXFxcU10qPyk8Lyg/OlxcXFx3KzopPycrZisnPicsKChnfHxcIlwiKSkpKTtcblx0fTtcbn0pKCk7XG5cbnZhciBodG1sZGVjb2RlID0gKGZ1bmN0aW9uKCkge1xuXHR2YXIgZW50aXRpZXMgPSBbXG5cdFx0WyduYnNwJywgJyAnXSwgWydtaWRkb3QnLCAnwrcnXSxcblx0XHRbJ3F1b3QnLCAnXCInXSwgWydhcG9zJywgXCInXCJdLCBbJ2d0JywgICAnPiddLCBbJ2x0JywgICAnPCddLCBbJ2FtcCcsICAnJiddXG5cdF0ubWFwKGZ1bmN0aW9uKHgpIHsgcmV0dXJuIFtuZXcgUmVnRXhwKCcmJyArIHhbMF0gKyAnOycsIFwiaWdcIiksIHhbMV1dOyB9KTtcblx0cmV0dXJuIGZ1bmN0aW9uIGh0bWxkZWNvZGUoc3RyKSB7XG5cdFx0dmFyIG8gPSBzdHJcblx0XHRcdFx0Ly8gUmVtb3ZlIG5ldyBsaW5lcyBhbmQgc3BhY2VzIGZyb20gc3RhcnQgb2YgY29udGVudFxuXHRcdFx0XHQucmVwbGFjZSgvXltcXHRcXG5cXHIgXSsvLCBcIlwiKVxuXHRcdFx0XHQvLyBSZW1vdmUgbmV3IGxpbmVzIGFuZCBzcGFjZXMgZnJvbSBlbmQgb2YgY29udGVudFxuXHRcdFx0XHQucmVwbGFjZSgvW1xcdFxcblxcciBdKyQvLFwiXCIpXG5cdFx0XHRcdC8vIEFkZGVkIGxpbmUgd2hpY2ggcmVtb3ZlcyBhbnkgd2hpdGUgc3BhY2UgY2hhcmFjdGVycyBhZnRlciBhbmQgYmVmb3JlIGh0bWwgdGFnc1xuXHRcdFx0XHQucmVwbGFjZSgvPlxccysvZyxcIj5cIikucmVwbGFjZSgvXFxzKzwvZyxcIjxcIilcblx0XHRcdFx0Ly8gUmVwbGFjZSByZW1haW5pbmcgbmV3IGxpbmVzIGFuZCBzcGFjZXMgd2l0aCBzcGFjZVxuXHRcdFx0XHQucmVwbGFjZSgvW1xcdFxcblxcciBdKy9nLCBcIiBcIilcblx0XHRcdFx0Ly8gUmVwbGFjZSA8YnI+IHRhZ3Mgd2l0aCBuZXcgbGluZXNcblx0XHRcdFx0LnJlcGxhY2UoLzxcXHMqW2JCXVtyUl1cXHMqXFwvPz4vZyxcIlxcblwiKVxuXHRcdFx0XHQvLyBTdHJpcCBIVE1MIGVsZW1lbnRzXG5cdFx0XHRcdC5yZXBsYWNlKC88W14+XSo+L2csXCJcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IGVudGl0aWVzLmxlbmd0aDsgKytpKSBvID0gby5yZXBsYWNlKGVudGl0aWVzW2ldWzBdLCBlbnRpdGllc1tpXVsxXSk7XG5cdFx0cmV0dXJuIG87XG5cdH07XG59KSgpO1xuXG52YXIgdnRyZWdleCA9IChmdW5jdGlvbigpeyB2YXIgdnRfY2FjaGUgPSB7fTtcblx0cmV0dXJuIGZ1bmN0aW9uIHZ0X3JlZ2V4KGJ0KSB7XG5cdFx0aWYodnRfY2FjaGVbYnRdICE9PSB1bmRlZmluZWQpIHJldHVybiB2dF9jYWNoZVtidF07XG5cdFx0cmV0dXJuICh2dF9jYWNoZVtidF0gPSBuZXcgUmVnRXhwKFwiPCg/OnZ0Oik/XCIgKyBidCArIFwiPihbXFxcXHNcXFxcU10qPyk8Lyg/OnZ0Oik/XCIgKyBidCArIFwiPlwiLCAnZycpICk7XG59O30pKCk7XG52YXIgdnR2cmVnZXggPSAvPFxcLz8oPzp2dDopP3ZhcmlhbnQ+L2csIHZ0bXJlZ2V4ID0gLzwoPzp2dDopKFtePl0qKT4oW1xcc1xcU10qKTwvO1xuZnVuY3Rpb24gcGFyc2VWZWN0b3IoZGF0YSwgb3B0cykge1xuXHR2YXIgaCA9IHBhcnNleG1sdGFnKGRhdGEpO1xuXG5cdHZhciBtYXRjaGVzID0gZGF0YS5tYXRjaCh2dHJlZ2V4KGguYmFzZVR5cGUpKXx8W107XG5cdHZhciByZXMgPSBbXTtcblx0aWYobWF0Y2hlcy5sZW5ndGggIT0gaC5zaXplKSB7XG5cdFx0aWYob3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihcInVuZXhwZWN0ZWQgdmVjdG9yIGxlbmd0aCBcIiArIG1hdGNoZXMubGVuZ3RoICsgXCIgIT0gXCIgKyBoLnNpemUpO1xuXHRcdHJldHVybiByZXM7XG5cdH1cblx0bWF0Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uKHgpIHtcblx0XHR2YXIgdiA9IHgucmVwbGFjZSh2dHZyZWdleCxcIlwiKS5tYXRjaCh2dG1yZWdleCk7XG5cdFx0aWYodikgcmVzLnB1c2goe3Y6dXRmOHJlYWQodlsyXSksIHQ6dlsxXX0pO1xuXHR9KTtcblx0cmV0dXJuIHJlcztcbn1cblxudmFyIHd0cmVnZXggPSAvKF5cXHN8XFxzJHxcXG4pLztcbmZ1bmN0aW9uIHdyaXRldGFnKGYsZykgeyByZXR1cm4gJzwnICsgZiArIChnLm1hdGNoKHd0cmVnZXgpPycgeG1sOnNwYWNlPVwicHJlc2VydmVcIicgOiBcIlwiKSArICc+JyArIGcgKyAnPC8nICsgZiArICc+JzsgfVxuXG5mdW5jdGlvbiB3eHRfaGVscGVyKGgpIHsgcmV0dXJuIGtleXMoaCkubWFwKGZ1bmN0aW9uKGspIHsgcmV0dXJuIFwiIFwiICsgayArICc9XCInICsgaFtrXSArICdcIic7fSkuam9pbihcIlwiKTsgfVxuZnVuY3Rpb24gd3JpdGV4dGFnKGYsZyxoKSB7IHJldHVybiAnPCcgKyBmICsgKChoICE9IG51bGwpID8gd3h0X2hlbHBlcihoKSA6IFwiXCIpICsgKChnICE9IG51bGwpID8gKGcubWF0Y2god3RyZWdleCk/JyB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiJyA6IFwiXCIpICsgJz4nICsgZyArICc8LycgKyBmIDogXCIvXCIpICsgJz4nO31cblxuZnVuY3Rpb24gd3JpdGVfdzNjZHRmKGQsIHQpIHsgdHJ5IHsgcmV0dXJuIGQudG9JU09TdHJpbmcoKS5yZXBsYWNlKC9cXC5cXGQqLyxcIlwiKTsgfSBjYXRjaChlKSB7IGlmKHQpIHRocm93IGU7IH0gcmV0dXJuIFwiXCI7IH1cblxuZnVuY3Rpb24gd3JpdGVfdnQocywgeGxzeCkge1xuXHRzd2l0Y2godHlwZW9mIHMpIHtcblx0XHRjYXNlICdzdHJpbmcnOlxuXHRcdFx0dmFyIG8gPSB3cml0ZXh0YWcoJ3Z0Omxwd3N0cicsIGVzY2FwZXhtbChzKSk7XG5cdFx0XHRpZih4bHN4KSBvID0gby5yZXBsYWNlKC8mcXVvdDsvZywgXCJfeDAwMjJfXCIpO1xuXHRcdFx0cmV0dXJuIG87XG5cdFx0Y2FzZSAnbnVtYmVyJzogcmV0dXJuIHdyaXRleHRhZygoc3wwKT09cz8ndnQ6aTQnOid2dDpyOCcsIGVzY2FwZXhtbChTdHJpbmcocykpKTtcblx0XHRjYXNlICdib29sZWFuJzogcmV0dXJuIHdyaXRleHRhZygndnQ6Ym9vbCcscz8ndHJ1ZSc6J2ZhbHNlJyk7XG5cdH1cblx0aWYocyBpbnN0YW5jZW9mIERhdGUpIHJldHVybiB3cml0ZXh0YWcoJ3Z0OmZpbGV0aW1lJywgd3JpdGVfdzNjZHRmKHMpKTtcblx0dGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIHNlcmlhbGl6ZSBcIiArIHMpO1xufVxuXG52YXIgWE1MTlMgPSAoe1xuXHQnZGMnOiAnaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8nLFxuXHQnZGN0ZXJtcyc6ICdodHRwOi8vcHVybC5vcmcvZGMvdGVybXMvJyxcblx0J2RjbWl0eXBlJzogJ2h0dHA6Ly9wdXJsLm9yZy9kYy9kY21pdHlwZS8nLFxuXHQnbXgnOiAnaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvbWFjL2V4Y2VsLzIwMDgvbWFpbicsXG5cdCdyJzogJ2h0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMnLFxuXHQnc2pzJzogJ2h0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9wYWNrYWdlLzIwMDYvc2hlZXRqcy9jb3JlLXByb3BlcnRpZXMnLFxuXHQndnQnOiAnaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvZG9jUHJvcHNWVHlwZXMnLFxuXHQneHNpJzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlJyxcblx0J3hzZCc6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSdcbn0pO1xuXG5YTUxOUy5tYWluID0gW1xuXHQnaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3NwcmVhZHNoZWV0bWwvMjAwNi9tYWluJyxcblx0J2h0dHA6Ly9wdXJsLm9jbGMub3JnL29veG1sL3NwcmVhZHNoZWV0bWwvbWFpbicsXG5cdCdodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9leGNlbC8yMDA2L21haW4nLFxuXHQnaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZXhjZWwvMjAwNi8yJ1xuXTtcblxudmFyIFhMTUxOUyA9ICh7XG5cdCdvJzogICAgJ3VybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOm9mZmljZScsXG5cdCd4JzogICAgJ3VybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOmV4Y2VsJyxcblx0J3NzJzogICAndXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6c3ByZWFkc2hlZXQnLFxuXHQnZHQnOiAgICd1dWlkOkMyRjQxMDEwLTY1QjMtMTFkMS1BMjlGLTAwQUEwMEMxNDg4MicsXG5cdCdtdic6ICAgJ2h0dHA6Ly9tYWNWbWxTY2hlbWFVcmknLFxuXHQndic6ICAgICd1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOnZtbCcsXG5cdCdodG1sJzogJ2h0dHA6Ly93d3cudzMub3JnL1RSL1JFQy1odG1sNDAnXG59KTtcbmZ1bmN0aW9uIHJlYWRfZG91YmxlX2xlKGIsIGlkeCkge1xuXHR2YXIgcyA9IDEgLSAyICogKGJbaWR4ICsgN10gPj4+IDcpO1xuXHR2YXIgZSA9ICgoYltpZHggKyA3XSAmIDB4N2YpIDw8IDQpICsgKChiW2lkeCArIDZdID4+PiA0KSAmIDB4MGYpO1xuXHR2YXIgbSA9IChiW2lkeCs2XSYweDBmKTtcblx0Zm9yKHZhciBpID0gNTsgaSA+PSAwOyAtLWkpIG0gPSBtICogMjU2ICsgYltpZHggKyBpXTtcblx0aWYoZSA9PSAweDdmZikgcmV0dXJuIG0gPT0gMCA/IChzICogSW5maW5pdHkpIDogTmFOO1xuXHRpZihlID09IDApIGUgPSAtMTAyMjtcblx0ZWxzZSB7IGUgLT0gMTAyMzsgbSArPSBNYXRoLnBvdygyLDUyKTsgfVxuXHRyZXR1cm4gcyAqIE1hdGgucG93KDIsIGUgLSA1MikgKiBtO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9kb3VibGVfbGUoYiwgdiwgaWR4KSB7XG5cdHZhciBicyA9ICgoKCh2IDwgMCkgfHwgKDEvdiA9PSAtSW5maW5pdHkpKSA/IDEgOiAwKSA8PCA3KSwgZSA9IDAsIG0gPSAwO1xuXHR2YXIgYXYgPSBicyA/ICgtdikgOiB2O1xuXHRpZighaXNGaW5pdGUoYXYpKSB7IGUgPSAweDdmZjsgbSA9IGlzTmFOKHYpID8gMHg2OTY5IDogMDsgfVxuXHRlbHNlIGlmKGF2ID09IDApIGUgPSBtID0gMDtcblx0ZWxzZSB7XG5cdFx0ZSA9IE1hdGguZmxvb3IoTWF0aC5sb2coYXYpIC8gTWF0aC5MTjIpO1xuXHRcdG0gPSBhdiAqIE1hdGgucG93KDIsIDUyIC0gZSk7XG5cdFx0aWYoKGUgPD0gLTEwMjMpICYmICghaXNGaW5pdGUobSkgfHwgKG0gPCBNYXRoLnBvdygyLDUyKSkpKSB7IGUgPSAtMTAyMjsgfVxuXHRcdGVsc2UgeyBtIC09IE1hdGgucG93KDIsNTIpOyBlKz0xMDIzOyB9XG5cdH1cblx0Zm9yKHZhciBpID0gMDsgaSA8PSA1OyArK2ksIG0vPTI1NikgYltpZHggKyBpXSA9IG0gJiAweGZmO1xuXHRiW2lkeCArIDZdID0gKChlICYgMHgwZikgPDwgNCkgfCAobSAmIDB4Zik7XG5cdGJbaWR4ICsgN10gPSAoZSA+PiA0KSB8IGJzO1xufVxuXG52YXIgX190b0J1ZmZlciA9IGZ1bmN0aW9uKGJ1ZnMpIHsgdmFyIHg9W10sdz0xMDI0MDsgZm9yKHZhciBpPTA7aTxidWZzWzBdLmxlbmd0aDsrK2kpIGlmKGJ1ZnNbMF1baV0pIGZvcih2YXIgaj0wLEw9YnVmc1swXVtpXS5sZW5ndGg7ajxMO2orPXcpIHgucHVzaC5hcHBseSh4LCBidWZzWzBdW2ldLnNsaWNlKGosait3KSk7IHJldHVybiB4OyB9O1xudmFyIF9fX3RvQnVmZmVyID0gX190b0J1ZmZlcjtcbnZhciBfX3V0ZjE2bGUgPSBmdW5jdGlvbihiLHMsZSkgeyB2YXIgc3M9W107IGZvcih2YXIgaT1zOyBpPGU7IGkrPTIpIHNzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShfX3JlYWRVSW50MTZMRShiLGkpKSk7IHJldHVybiBzcy5qb2luKFwiXCIpLnJlcGxhY2UoY2hyMCwnJyk7IH07XG52YXIgX19fdXRmMTZsZSA9IF9fdXRmMTZsZTtcbnZhciBfX2hleGxpZnkgPSBmdW5jdGlvbihiLHMsbCkgeyB2YXIgc3M9W107IGZvcih2YXIgaT1zOyBpPHMrbDsgKytpKSBzcy5wdXNoKChcIjBcIiArIGJbaV0udG9TdHJpbmcoMTYpKS5zbGljZSgtMikpOyByZXR1cm4gc3Muam9pbihcIlwiKTsgfTtcbnZhciBfX19oZXhsaWZ5ID0gX19oZXhsaWZ5O1xudmFyIF9fdXRmOCA9IGZ1bmN0aW9uKGIscyxlKSB7IHZhciBzcz1bXTsgZm9yKHZhciBpPXM7IGk8ZTsgaSsrKSBzcy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoX19yZWFkVUludDgoYixpKSkpOyByZXR1cm4gc3Muam9pbihcIlwiKTsgfTtcbnZhciBfX191dGY4ID0gX191dGY4O1xudmFyIF9fbHBzdHIgPSBmdW5jdGlvbihiLGkpIHsgdmFyIGxlbiA9IF9fcmVhZFVJbnQzMkxFKGIsaSk7IHJldHVybiBsZW4gPiAwID8gX191dGY4KGIsIGkrNCxpKzQrbGVuLTEpIDogXCJcIjt9O1xudmFyIF9fX2xwc3RyID0gX19scHN0cjtcbnZhciBfX2Nwc3RyID0gZnVuY3Rpb24oYixpKSB7IHZhciBsZW4gPSBfX3JlYWRVSW50MzJMRShiLGkpOyByZXR1cm4gbGVuID4gMCA/IF9fdXRmOChiLCBpKzQsaSs0K2xlbi0xKSA6IFwiXCI7fTtcbnZhciBfX19jcHN0ciA9IF9fY3BzdHI7XG52YXIgX19scHdzdHIgPSBmdW5jdGlvbihiLGkpIHsgdmFyIGxlbiA9IDIqX19yZWFkVUludDMyTEUoYixpKTsgcmV0dXJuIGxlbiA+IDAgPyBfX3V0ZjgoYiwgaSs0LGkrNCtsZW4tMSkgOiBcIlwiO307XG52YXIgX19fbHB3c3RyID0gX19scHdzdHI7XG52YXIgX19scHA0LCBfX19scHA0O1xuX19scHA0ID0gX19fbHBwNCA9IGZ1bmN0aW9uIGxwcDRfKGIsaSkgeyB2YXIgbGVuID0gX19yZWFkVUludDMyTEUoYixpKTsgcmV0dXJuIGxlbiA+IDAgPyBfX3V0ZjE2bGUoYiwgaSs0LGkrNCtsZW4pIDogXCJcIjt9O1xudmFyIF9fOGxwcDQgPSBmdW5jdGlvbihiLGkpIHsgdmFyIGxlbiA9IF9fcmVhZFVJbnQzMkxFKGIsaSk7IHJldHVybiBsZW4gPiAwID8gX191dGY4KGIsIGkrNCxpKzQrbGVuKSA6IFwiXCI7fTtcbnZhciBfX184bHBwNCA9IF9fOGxwcDQ7XG52YXIgX19kb3VibGUsIF9fX2RvdWJsZTtcbl9fZG91YmxlID0gX19fZG91YmxlID0gZnVuY3Rpb24oYiwgaWR4KSB7IHJldHVybiByZWFkX2RvdWJsZV9sZShiLCBpZHgpO307XG52YXIgaXNfYnVmID0gZnVuY3Rpb24gaXNfYnVmX2EoYSkgeyByZXR1cm4gQXJyYXkuaXNBcnJheShhKTsgfTtcblxuaWYoaGFzX2J1Zikge1xuXHRfX3V0ZjE2bGUgPSBmdW5jdGlvbihiLHMsZSkgeyBpZighQnVmZmVyLmlzQnVmZmVyKGIpKSByZXR1cm4gX19fdXRmMTZsZShiLHMsZSk7IHJldHVybiBiLnRvU3RyaW5nKCd1dGYxNmxlJyxzLGUpLnJlcGxhY2UoY2hyMCwnJykvKi5yZXBsYWNlKGNocjEsJyEnKSovOyB9O1xuXHRfX2hleGxpZnkgPSBmdW5jdGlvbihiLHMsbCkgeyByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKGIpID8gYi50b1N0cmluZygnaGV4JyxzLHMrbCkgOiBfX19oZXhsaWZ5KGIscyxsKTsgfTtcblx0X19scHN0ciA9IGZ1bmN0aW9uIGxwc3RyX2IoYiwgaSkgeyBpZighQnVmZmVyLmlzQnVmZmVyKGIpKSByZXR1cm4gX19fbHBzdHIoYiwgaSk7IHZhciBsZW4gPSBiLnJlYWRVSW50MzJMRShpKTsgcmV0dXJuIGxlbiA+IDAgPyBiLnRvU3RyaW5nKCd1dGY4JyxpKzQsaSs0K2xlbi0xKSA6IFwiXCI7fTtcblx0X19jcHN0ciA9IGZ1bmN0aW9uIGNwc3RyX2IoYiwgaSkgeyBpZighQnVmZmVyLmlzQnVmZmVyKGIpKSByZXR1cm4gX19fY3BzdHIoYiwgaSk7IHZhciBsZW4gPSBiLnJlYWRVSW50MzJMRShpKTsgcmV0dXJuIGxlbiA+IDAgPyBiLnRvU3RyaW5nKCd1dGY4JyxpKzQsaSs0K2xlbi0xKSA6IFwiXCI7fTtcblx0X19scHdzdHIgPSBmdW5jdGlvbiBscHdzdHJfYihiLCBpKSB7IGlmKCFCdWZmZXIuaXNCdWZmZXIoYikpIHJldHVybiBfX19scHdzdHIoYiwgaSk7IHZhciBsZW4gPSAyKmIucmVhZFVJbnQzMkxFKGkpOyByZXR1cm4gYi50b1N0cmluZygndXRmMTZsZScsaSs0LGkrNCtsZW4tMSk7fTtcblx0X19scHA0ID0gZnVuY3Rpb24gbHBwNF9iKGIsIGkpIHsgaWYoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgcmV0dXJuIF9fX2xwcDQoYiwgaSk7IHZhciBsZW4gPSBiLnJlYWRVSW50MzJMRShpKTsgcmV0dXJuIGIudG9TdHJpbmcoJ3V0ZjE2bGUnLGkrNCxpKzQrbGVuKTt9O1xuXHRfXzhscHA0ID0gZnVuY3Rpb24gbHBwNF84YihiLCBpKSB7IGlmKCFCdWZmZXIuaXNCdWZmZXIoYikpIHJldHVybiBfX184bHBwNChiLCBpKTsgdmFyIGxlbiA9IGIucmVhZFVJbnQzMkxFKGkpOyByZXR1cm4gYi50b1N0cmluZygndXRmOCcsaSs0LGkrNCtsZW4pO307XG5cdF9fdXRmOCA9IGZ1bmN0aW9uIHV0ZjhfYihiLCBzLCBlKSB7IHJldHVybiAoQnVmZmVyLmlzQnVmZmVyKGIpKSA/IGIudG9TdHJpbmcoJ3V0ZjgnLHMsZSkgOiBfX191dGY4KGIscyxlKTsgfTtcblx0X190b0J1ZmZlciA9IGZ1bmN0aW9uKGJ1ZnMpIHsgcmV0dXJuIChidWZzWzBdLmxlbmd0aCA+IDAgJiYgQnVmZmVyLmlzQnVmZmVyKGJ1ZnNbMF1bMF0pKSA/IEJ1ZmZlci5jb25jYXQoYnVmc1swXSkgOiBfX190b0J1ZmZlcihidWZzKTt9O1xuXHRiY29uY2F0ID0gZnVuY3Rpb24oYnVmcykgeyByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKGJ1ZnNbMF0pID8gQnVmZmVyLmNvbmNhdChidWZzKSA6IFtdLmNvbmNhdC5hcHBseShbXSwgYnVmcyk7IH07XG5cdF9fZG91YmxlID0gZnVuY3Rpb24gZG91YmxlXyhiLCBpKSB7IGlmKEJ1ZmZlci5pc0J1ZmZlcihiKSkgcmV0dXJuIGIucmVhZERvdWJsZUxFKGkpOyByZXR1cm4gX19fZG91YmxlKGIsaSk7IH07XG5cdGlzX2J1ZiA9IGZ1bmN0aW9uIGlzX2J1Zl9iKGEpIHsgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihhKSB8fCBBcnJheS5pc0FycmF5KGEpOyB9O1xufVxuXG4vKiBmcm9tIGpzLXhscyAqL1xuaWYodHlwZW9mIGNwdGFibGUgIT09ICd1bmRlZmluZWQnKSB7XG5cdF9fdXRmMTZsZSA9IGZ1bmN0aW9uKGIscyxlKSB7IHJldHVybiBjcHRhYmxlLnV0aWxzLmRlY29kZSgxMjAwLCBiLnNsaWNlKHMsZSkpLnJlcGxhY2UoY2hyMCwgJycpOyB9O1xuXHRfX3V0ZjggPSBmdW5jdGlvbihiLHMsZSkgeyByZXR1cm4gY3B0YWJsZS51dGlscy5kZWNvZGUoNjUwMDEsIGIuc2xpY2UocyxlKSk7IH07XG5cdF9fbHBzdHIgPSBmdW5jdGlvbihiLGkpIHsgdmFyIGxlbiA9IF9fcmVhZFVJbnQzMkxFKGIsaSk7IHJldHVybiBsZW4gPiAwID8gY3B0YWJsZS51dGlscy5kZWNvZGUoY3VycmVudF9hbnNpLCBiLnNsaWNlKGkrNCwgaSs0K2xlbi0xKSkgOiBcIlwiO307XG5cdF9fY3BzdHIgPSBmdW5jdGlvbihiLGkpIHsgdmFyIGxlbiA9IF9fcmVhZFVJbnQzMkxFKGIsaSk7IHJldHVybiBsZW4gPiAwID8gY3B0YWJsZS51dGlscy5kZWNvZGUoY3VycmVudF9jb2RlcGFnZSwgYi5zbGljZShpKzQsIGkrNCtsZW4tMSkpIDogXCJcIjt9O1xuXHRfX2xwd3N0ciA9IGZ1bmN0aW9uKGIsaSkgeyB2YXIgbGVuID0gMipfX3JlYWRVSW50MzJMRShiLGkpOyByZXR1cm4gbGVuID4gMCA/IGNwdGFibGUudXRpbHMuZGVjb2RlKDEyMDAsIGIuc2xpY2UoaSs0LGkrNCtsZW4tMSkpIDogXCJcIjt9O1xuXHRfX2xwcDQgPSBmdW5jdGlvbihiLGkpIHsgdmFyIGxlbiA9IF9fcmVhZFVJbnQzMkxFKGIsaSk7IHJldHVybiBsZW4gPiAwID8gY3B0YWJsZS51dGlscy5kZWNvZGUoMTIwMCwgYi5zbGljZShpKzQsaSs0K2xlbikpIDogXCJcIjt9O1xuXHRfXzhscHA0ID0gZnVuY3Rpb24oYixpKSB7IHZhciBsZW4gPSBfX3JlYWRVSW50MzJMRShiLGkpOyByZXR1cm4gbGVuID4gMCA/IGNwdGFibGUudXRpbHMuZGVjb2RlKDY1MDAxLCBiLnNsaWNlKGkrNCxpKzQrbGVuKSkgOiBcIlwiO307XG59XG5cbnZhciBfX3JlYWRVSW50OCA9IGZ1bmN0aW9uKGIsIGlkeCkgeyByZXR1cm4gYltpZHhdOyB9O1xudmFyIF9fcmVhZFVJbnQxNkxFID0gZnVuY3Rpb24oYiwgaWR4KSB7IHJldHVybiAoYltpZHgrMV0qKDE8PDgpKStiW2lkeF07IH07XG52YXIgX19yZWFkSW50MTZMRSA9IGZ1bmN0aW9uKGIsIGlkeCkgeyB2YXIgdSA9IChiW2lkeCsxXSooMTw8OCkpK2JbaWR4XTsgcmV0dXJuICh1IDwgMHg4MDAwKSA/IHUgOiAoKDB4ZmZmZiAtIHUgKyAxKSAqIC0xKTsgfTtcbnZhciBfX3JlYWRVSW50MzJMRSA9IGZ1bmN0aW9uKGIsIGlkeCkgeyByZXR1cm4gYltpZHgrM10qKDE8PDI0KSsoYltpZHgrMl08PDE2KSsoYltpZHgrMV08PDgpK2JbaWR4XTsgfTtcbnZhciBfX3JlYWRJbnQzMkxFID0gZnVuY3Rpb24oYiwgaWR4KSB7IHJldHVybiAoYltpZHgrM108PDI0KXwoYltpZHgrMl08PDE2KXwoYltpZHgrMV08PDgpfGJbaWR4XTsgfTtcbnZhciBfX3JlYWRJbnQzMkJFID0gZnVuY3Rpb24oYiwgaWR4KSB7IHJldHVybiAoYltpZHhdPDwyNCl8KGJbaWR4KzFdPDwxNil8KGJbaWR4KzJdPDw4KXxiW2lkeCszXTsgfTtcblxuZnVuY3Rpb24gUmVhZFNoaWZ0KHNpemUsIHQpIHtcblx0dmFyIG89XCJcIiwgb0ksIG9SLCBvbz1bXSwgdywgdnYsIGksIGxvYztcblx0c3dpdGNoKHQpIHtcblx0XHRjYXNlICdkYmNzJzpcblx0XHRcdGxvYyA9IHRoaXMubDtcblx0XHRcdGlmKGhhc19idWYgJiYgQnVmZmVyLmlzQnVmZmVyKHRoaXMpKSBvID0gdGhpcy5zbGljZSh0aGlzLmwsIHRoaXMubCsyKnNpemUpLnRvU3RyaW5nKFwidXRmMTZsZVwiKTtcblx0XHRcdGVsc2UgZm9yKGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7IG8rPVN0cmluZy5mcm9tQ2hhckNvZGUoX19yZWFkVUludDE2TEUodGhpcywgbG9jKSk7IGxvYys9MjsgfVxuXHRcdFx0c2l6ZSAqPSAyO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICd1dGY4JzogbyA9IF9fdXRmOCh0aGlzLCB0aGlzLmwsIHRoaXMubCArIHNpemUpOyBicmVhaztcblx0XHRjYXNlICd1dGYxNmxlJzogc2l6ZSAqPSAyOyBvID0gX191dGYxNmxlKHRoaXMsIHRoaXMubCwgdGhpcy5sICsgc2l6ZSk7IGJyZWFrO1xuXG5cdFx0Y2FzZSAnd3N0cic6XG5cdFx0XHRpZih0eXBlb2YgY3B0YWJsZSAhPT0gJ3VuZGVmaW5lZCcpIG8gPSBjcHRhYmxlLnV0aWxzLmRlY29kZShjdXJyZW50X2NvZGVwYWdlLCB0aGlzLnNsaWNlKHRoaXMubCwgdGhpcy5sKzIqc2l6ZSkpO1xuXHRcdFx0ZWxzZSByZXR1cm4gUmVhZFNoaWZ0LmNhbGwodGhpcywgc2l6ZSwgJ2RiY3MnKTtcblx0XHRcdHNpemUgPSAyICogc2l6ZTsgYnJlYWs7XG5cblx0XHQvKiBbTVMtT0xFRFNdIDIuMS40IExlbmd0aFByZWZpeGVkQW5zaVN0cmluZyAqL1xuXHRcdGNhc2UgJ2xwc3RyLWFuc2knOiBvID0gX19scHN0cih0aGlzLCB0aGlzLmwpOyBzaXplID0gNCArIF9fcmVhZFVJbnQzMkxFKHRoaXMsIHRoaXMubCk7IGJyZWFrO1xuXHRcdGNhc2UgJ2xwc3RyLWNwJzogbyA9IF9fY3BzdHIodGhpcywgdGhpcy5sKTsgc2l6ZSA9IDQgKyBfX3JlYWRVSW50MzJMRSh0aGlzLCB0aGlzLmwpOyBicmVhaztcblx0XHQvKiBbTVMtT0xFRFNdIDIuMS41IExlbmd0aFByZWZpeGVkVW5pY29kZVN0cmluZyAqL1xuXHRcdGNhc2UgJ2xwd3N0cic6IG8gPSBfX2xwd3N0cih0aGlzLCB0aGlzLmwpOyBzaXplID0gNCArIDIgKiBfX3JlYWRVSW50MzJMRSh0aGlzLCB0aGlzLmwpOyBicmVhaztcblx0XHQvKiBbTVMtT0ZGQ1JZUFRPXSAyLjEuMiBMZW5ndGgtUHJlZml4ZWQgUGFkZGVkIFVuaWNvZGUgU3RyaW5nIChVTklDT0RFLUxQLVA0KSAqL1xuXHRcdGNhc2UgJ2xwcDQnOiBzaXplID0gNCArICBfX3JlYWRVSW50MzJMRSh0aGlzLCB0aGlzLmwpOyBvID0gX19scHA0KHRoaXMsIHRoaXMubCk7IGlmKHNpemUgJiAweDAyKSBzaXplICs9IDI7IGJyZWFrO1xuXHRcdC8qIFtNUy1PRkZDUllQVE9dIDIuMS4zIExlbmd0aC1QcmVmaXhlZCBVVEYtOCBTdHJpbmcgKFVURi04LUxQLVA0KSAqL1xuXHRcdGNhc2UgJzhscHA0Jzogc2l6ZSA9IDQgKyAgX19yZWFkVUludDMyTEUodGhpcywgdGhpcy5sKTsgbyA9IF9fOGxwcDQodGhpcywgdGhpcy5sKTsgaWYoc2l6ZSAmIDB4MDMpIHNpemUgKz0gNCAtIChzaXplICYgMHgwMyk7IGJyZWFrO1xuXG5cdFx0Y2FzZSAnY3N0cic6IHNpemUgPSAwOyBvID0gXCJcIjtcblx0XHRcdHdoaWxlKCh3PV9fcmVhZFVJbnQ4KHRoaXMsIHRoaXMubCArIHNpemUrKykpIT09MCkgb28ucHVzaChfZ2V0Y2hhcih3KSk7XG5cdFx0XHRvID0gb28uam9pbihcIlwiKTsgYnJlYWs7XG5cdFx0Y2FzZSAnX3dzdHInOiBzaXplID0gMDsgbyA9IFwiXCI7XG5cdFx0XHR3aGlsZSgodz1fX3JlYWRVSW50MTZMRSh0aGlzLHRoaXMubCArc2l6ZSkpIT09MCl7b28ucHVzaChfZ2V0Y2hhcih3KSk7c2l6ZSs9Mjt9XG5cdFx0XHRzaXplKz0yOyBvID0gb28uam9pbihcIlwiKTsgYnJlYWs7XG5cblx0XHQvKiBzYmNzIGFuZCBkYmNzIHN1cHBvcnQgY29udGludWUgcmVjb3JkcyBpbiB0aGUgU1NUIHdheSBUT0RPIGNvZGVwYWdlcyAqL1xuXHRcdGNhc2UgJ2RiY3MtY29udCc6IG8gPSBcIlwiOyBsb2MgPSB0aGlzLmw7XG5cdFx0XHRmb3IoaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcblx0XHRcdFx0aWYodGhpcy5sZW5zICYmIHRoaXMubGVucy5pbmRleE9mKGxvYykgIT09IC0xKSB7XG5cdFx0XHRcdFx0dyA9IF9fcmVhZFVJbnQ4KHRoaXMsIGxvYyk7XG5cdFx0XHRcdFx0dGhpcy5sID0gbG9jICsgMTtcblx0XHRcdFx0XHR2diA9IFJlYWRTaGlmdC5jYWxsKHRoaXMsIHNpemUtaSwgdyA/ICdkYmNzLWNvbnQnIDogJ3NiY3MtY29udCcpO1xuXHRcdFx0XHRcdHJldHVybiBvby5qb2luKFwiXCIpICsgdnY7XG5cdFx0XHRcdH1cblx0XHRcdFx0b28ucHVzaChfZ2V0Y2hhcihfX3JlYWRVSW50MTZMRSh0aGlzLCBsb2MpKSk7XG5cdFx0XHRcdGxvYys9Mjtcblx0XHRcdH0gbyA9IG9vLmpvaW4oXCJcIik7IHNpemUgKj0gMjsgYnJlYWs7XG5cblx0XHRjYXNlICdjcHN0cic6XG5cdFx0XHRpZih0eXBlb2YgY3B0YWJsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0byA9IGNwdGFibGUudXRpbHMuZGVjb2RlKGN1cnJlbnRfY29kZXBhZ2UsIHRoaXMuc2xpY2UodGhpcy5sLCB0aGlzLmwgKyBzaXplKSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRjYXNlICdzYmNzLWNvbnQnOiBvID0gXCJcIjsgbG9jID0gdGhpcy5sO1xuXHRcdFx0Zm9yKGkgPSAwOyBpICE9IHNpemU7ICsraSkge1xuXHRcdFx0XHRpZih0aGlzLmxlbnMgJiYgdGhpcy5sZW5zLmluZGV4T2YobG9jKSAhPT0gLTEpIHtcblx0XHRcdFx0XHR3ID0gX19yZWFkVUludDgodGhpcywgbG9jKTtcblx0XHRcdFx0XHR0aGlzLmwgPSBsb2MgKyAxO1xuXHRcdFx0XHRcdHZ2ID0gUmVhZFNoaWZ0LmNhbGwodGhpcywgc2l6ZS1pLCB3ID8gJ2RiY3MtY29udCcgOiAnc2Jjcy1jb250Jyk7XG5cdFx0XHRcdFx0cmV0dXJuIG9vLmpvaW4oXCJcIikgKyB2djtcblx0XHRcdFx0fVxuXHRcdFx0XHRvby5wdXNoKF9nZXRjaGFyKF9fcmVhZFVJbnQ4KHRoaXMsIGxvYykpKTtcblx0XHRcdFx0bG9jKz0xO1xuXHRcdFx0fSBvID0gb28uam9pbihcIlwiKTsgYnJlYWs7XG5cblx0XHRkZWZhdWx0OlxuXHRzd2l0Y2goc2l6ZSkge1xuXHRcdGNhc2UgMTogb0kgPSBfX3JlYWRVSW50OCh0aGlzLCB0aGlzLmwpOyB0aGlzLmwrKzsgcmV0dXJuIG9JO1xuXHRcdGNhc2UgMjogb0kgPSAodCA9PT0gJ2knID8gX19yZWFkSW50MTZMRSA6IF9fcmVhZFVJbnQxNkxFKSh0aGlzLCB0aGlzLmwpOyB0aGlzLmwgKz0gMjsgcmV0dXJuIG9JO1xuXHRcdGNhc2UgNDogY2FzZSAtNDpcblx0XHRcdGlmKHQgPT09ICdpJyB8fCAoKHRoaXNbdGhpcy5sKzNdICYgMHg4MCk9PT0wKSkgeyBvSSA9ICgoc2l6ZSA+IDApID8gX19yZWFkSW50MzJMRSA6IF9fcmVhZEludDMyQkUpKHRoaXMsIHRoaXMubCk7IHRoaXMubCArPSA0OyByZXR1cm4gb0k7IH1cblx0XHRcdGVsc2UgeyBvUiA9IF9fcmVhZFVJbnQzMkxFKHRoaXMsIHRoaXMubCk7IHRoaXMubCArPSA0OyB9IHJldHVybiBvUjtcblx0XHRjYXNlIDg6IGNhc2UgLTg6XG5cdFx0XHRpZih0ID09PSAnZicpIHtcblx0XHRcdFx0aWYoc2l6ZSA9PSA4KSBvUiA9IF9fZG91YmxlKHRoaXMsIHRoaXMubCk7XG5cdFx0XHRcdGVsc2Ugb1IgPSBfX2RvdWJsZShbdGhpc1t0aGlzLmwrN10sdGhpc1t0aGlzLmwrNl0sdGhpc1t0aGlzLmwrNV0sdGhpc1t0aGlzLmwrNF0sdGhpc1t0aGlzLmwrM10sdGhpc1t0aGlzLmwrMl0sdGhpc1t0aGlzLmwrMV0sdGhpc1t0aGlzLmwrMF1dLCAwKTtcblx0XHRcdFx0dGhpcy5sICs9IDg7IHJldHVybiBvUjtcblx0XHRcdH0gZWxzZSBzaXplID0gODtcblx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0Y2FzZSAxNjogbyA9IF9faGV4bGlmeSh0aGlzLCB0aGlzLmwsIHNpemUpOyBicmVhaztcblx0fX1cblx0dGhpcy5sKz1zaXplOyByZXR1cm4gbztcbn1cblxudmFyIF9fd3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uKGIsIHZhbCwgaWR4KSB7IGJbaWR4XSA9ICh2YWwgJiAweEZGKTsgYltpZHgrMV0gPSAoKHZhbCA+Pj4gOCkgJiAweEZGKTsgYltpZHgrMl0gPSAoKHZhbCA+Pj4gMTYpICYgMHhGRik7IGJbaWR4KzNdID0gKCh2YWwgPj4+IDI0KSAmIDB4RkYpOyB9O1xudmFyIF9fd3JpdGVJbnQzMkxFICA9IGZ1bmN0aW9uKGIsIHZhbCwgaWR4KSB7IGJbaWR4XSA9ICh2YWwgJiAweEZGKTsgYltpZHgrMV0gPSAoKHZhbCA+PiA4KSAmIDB4RkYpOyBiW2lkeCsyXSA9ICgodmFsID4+IDE2KSAmIDB4RkYpOyBiW2lkeCszXSA9ICgodmFsID4+IDI0KSAmIDB4RkYpOyB9O1xudmFyIF9fd3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uKGIsIHZhbCwgaWR4KSB7IGJbaWR4XSA9ICh2YWwgJiAweEZGKTsgYltpZHgrMV0gPSAoKHZhbCA+Pj4gOCkgJiAweEZGKTsgfTtcblxuZnVuY3Rpb24gV3JpdGVTaGlmdCh0LCB2YWwsIGYpIHtcblx0dmFyIHNpemUgPSAwLCBpID0gMDtcblx0aWYoZiA9PT0gJ2RiY3MnKSB7XG5mb3IoaSA9IDA7IGkgIT0gdmFsLmxlbmd0aDsgKytpKSBfX3dyaXRlVUludDE2TEUodGhpcywgdmFsLmNoYXJDb2RlQXQoaSksIHRoaXMubCArIDIgKiBpKTtcblx0XHRzaXplID0gMiAqIHZhbC5sZW5ndGg7XG5cdH0gZWxzZSBpZihmID09PSAnc2JjcycpIHtcblx0XHRpZih0eXBlb2YgY3B0YWJsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY3VycmVudF9hbnNpID09IDg3NCkge1xuXHRcdFx0LyogVE9ETzogdXNlIHRhYmxlcyBkaXJlY3RseSwgZG9uJ3QgZW5jb2RlICovXG5mb3IoaSA9IDA7IGkgIT0gdmFsLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdHZhciBjcHBheWxvYWQgPSBjcHRhYmxlLnV0aWxzLmVuY29kZShjdXJyZW50X2Fuc2ksIHZhbC5jaGFyQXQoaSkpO1xuXHRcdFx0XHR0aGlzW3RoaXMubCArIGldID0gY3BwYXlsb2FkWzBdO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG52YWwgPSB2YWwucmVwbGFjZSgvW15cXHgwMC1cXHg3Rl0vZywgXCJfXCIpO1xuZm9yKGkgPSAwOyBpICE9IHZhbC5sZW5ndGg7ICsraSkgdGhpc1t0aGlzLmwgKyBpXSA9ICh2YWwuY2hhckNvZGVBdChpKSAmIDB4RkYpO1xuXHRcdH1cblx0XHRzaXplID0gdmFsLmxlbmd0aDtcblx0fSBlbHNlIGlmKGYgPT09ICdoZXgnKSB7XG5cdFx0Zm9yKDsgaSA8IHQ7ICsraSkge1xudGhpc1t0aGlzLmwrK10gPSAocGFyc2VJbnQodmFsLnNsaWNlKDIqaSwgMippKzIpLCAxNil8fDApO1xuXHRcdH0gcmV0dXJuIHRoaXM7XG5cdH0gZWxzZSBpZihmID09PSAndXRmMTZsZScpIHtcbnZhciBlbmQgPSBNYXRoLm1pbih0aGlzLmwgKyB0LCB0aGlzLmxlbmd0aCk7XG5cdFx0XHRmb3IoaSA9IDA7IGkgPCBNYXRoLm1pbih2YWwubGVuZ3RoLCB0KTsgKytpKSB7XG5cdFx0XHRcdHZhciBjYyA9IHZhbC5jaGFyQ29kZUF0KGkpO1xuXHRcdFx0XHR0aGlzW3RoaXMubCsrXSA9IChjYyAmIDB4ZmYpO1xuXHRcdFx0XHR0aGlzW3RoaXMubCsrXSA9IChjYyA+PiA4KTtcblx0XHRcdH1cblx0XHRcdHdoaWxlKHRoaXMubCA8IGVuZCkgdGhpc1t0aGlzLmwrK10gPSAwO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdH0gZWxzZSAgc3dpdGNoKHQpIHtcblx0XHRjYXNlICAxOiBzaXplID0gMTsgdGhpc1t0aGlzLmxdID0gdmFsJjB4RkY7IGJyZWFrO1xuXHRcdGNhc2UgIDI6IHNpemUgPSAyOyB0aGlzW3RoaXMubF0gPSB2YWwmMHhGRjsgdmFsID4+Pj0gODsgdGhpc1t0aGlzLmwrMV0gPSB2YWwmMHhGRjsgYnJlYWs7XG5cdFx0Y2FzZSAgMzogc2l6ZSA9IDM7IHRoaXNbdGhpcy5sXSA9IHZhbCYweEZGOyB2YWwgPj4+PSA4OyB0aGlzW3RoaXMubCsxXSA9IHZhbCYweEZGOyB2YWwgPj4+PSA4OyB0aGlzW3RoaXMubCsyXSA9IHZhbCYweEZGOyBicmVhaztcblx0XHRjYXNlICA0OiBzaXplID0gNDsgX193cml0ZVVJbnQzMkxFKHRoaXMsIHZhbCwgdGhpcy5sKTsgYnJlYWs7XG5cdFx0Y2FzZSAgODogc2l6ZSA9IDg7IGlmKGYgPT09ICdmJykgeyB3cml0ZV9kb3VibGVfbGUodGhpcywgdmFsLCB0aGlzLmwpOyBicmVhazsgfVxuXHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRjYXNlIDE2OiBicmVhaztcblx0XHRjYXNlIC00OiBzaXplID0gNDsgX193cml0ZUludDMyTEUodGhpcywgdmFsLCB0aGlzLmwpOyBicmVhaztcblx0fVxuXHR0aGlzLmwgKz0gc2l6ZTsgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIENoZWNrRmllbGQoaGV4c3RyLCBmbGQpIHtcblx0dmFyIG0gPSBfX2hleGxpZnkodGhpcyx0aGlzLmwsaGV4c3RyLmxlbmd0aD4+MSk7XG5cdGlmKG0gIT09IGhleHN0cikgdGhyb3cgbmV3IEVycm9yKGZsZCArICdFeHBlY3RlZCAnICsgaGV4c3RyICsgJyBzYXcgJyArIG0pO1xuXHR0aGlzLmwgKz0gaGV4c3RyLmxlbmd0aD4+MTtcbn1cblxuZnVuY3Rpb24gcHJlcF9ibG9iKGJsb2IsIHBvcykge1xuXHRibG9iLmwgPSBwb3M7XG5cdGJsb2IucmVhZF9zaGlmdCA9IFJlYWRTaGlmdDtcblx0YmxvYi5jaGsgPSBDaGVja0ZpZWxkO1xuXHRibG9iLndyaXRlX3NoaWZ0ID0gV3JpdGVTaGlmdDtcbn1cblxuZnVuY3Rpb24gcGFyc2Vub29wKGJsb2IsIGxlbmd0aCkgeyBibG9iLmwgKz0gbGVuZ3RoOyB9XG5cbmZ1bmN0aW9uIG5ld19idWYoc3opIHtcblx0dmFyIG8gPSBuZXdfcmF3X2J1Zihzeik7XG5cdHByZXBfYmxvYihvLCAwKTtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNCXSAyLjEuNCBSZWNvcmQgKi9cbmZ1bmN0aW9uIHJlY29yZGhvcHBlcihkYXRhLCBjYiwgb3B0cykge1xuXHRpZighZGF0YSkgcmV0dXJuO1xuXHR2YXIgdG1wYnl0ZSwgY250Ynl0ZSwgbGVuZ3RoO1xuXHRwcmVwX2Jsb2IoZGF0YSwgZGF0YS5sIHx8IDApO1xuXHR2YXIgTCA9IGRhdGEubGVuZ3RoLCBSVCA9IDAsIHRndCA9IDA7XG5cdHdoaWxlKGRhdGEubCA8IEwpIHtcblx0XHRSVCA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblx0XHRpZihSVCAmIDB4ODApIFJUID0gKFJUICYgMHg3RikgKyAoKGRhdGEucmVhZF9zaGlmdCgxKSAmIDB4N0YpPDw3KTtcblx0XHR2YXIgUiA9IFhMU0JSZWNvcmRFbnVtW1JUXSB8fCBYTFNCUmVjb3JkRW51bVsweEZGRkZdO1xuXHRcdHRtcGJ5dGUgPSBkYXRhLnJlYWRfc2hpZnQoMSk7XG5cdFx0bGVuZ3RoID0gdG1wYnl0ZSAmIDB4N0Y7XG5cdFx0Zm9yKGNudGJ5dGUgPSAxOyBjbnRieXRlIDw0ICYmICh0bXBieXRlICYgMHg4MCk7ICsrY250Ynl0ZSkgbGVuZ3RoICs9ICgodG1wYnl0ZSA9IGRhdGEucmVhZF9zaGlmdCgxKSkgJiAweDdGKTw8KDcqY250Ynl0ZSk7XG5cdFx0dGd0ID0gZGF0YS5sICsgbGVuZ3RoO1xuXHRcdHZhciBkID0gUi5mICYmIFIuZihkYXRhLCBsZW5ndGgsIG9wdHMpO1xuXHRcdGRhdGEubCA9IHRndDtcblx0XHRpZihjYihkLCBSLm4sIFJUKSkgcmV0dXJuO1xuXHR9XG59XG5cbi8qIGNvbnRyb2wgYnVmZmVyIHVzYWdlIGZvciBmaXhlZC1sZW5ndGggYnVmZmVycyAqL1xuZnVuY3Rpb24gYnVmX2FycmF5KCkge1xuXHR2YXIgYnVmcyA9IFtdLCBibGtzeiA9IGhhc19idWYgPyAyNTYgOiAyMDQ4O1xuXHR2YXIgbmV3YmxrID0gZnVuY3Rpb24gYmFfbmV3YmxrKHN6KSB7XG5cdFx0dmFyIG8gPSAobmV3X2J1ZihzeikpO1xuXHRcdHByZXBfYmxvYihvLCAwKTtcblx0XHRyZXR1cm4gbztcblx0fTtcblxuXHR2YXIgY3VyYnVmID0gbmV3YmxrKGJsa3N6KTtcblxuXHR2YXIgZW5kYnVmID0gZnVuY3Rpb24gYmFfZW5kYnVmKCkge1xuXHRcdGlmKCFjdXJidWYpIHJldHVybjtcblx0XHRpZihjdXJidWYubGVuZ3RoID4gY3VyYnVmLmwpIHsgY3VyYnVmID0gY3VyYnVmLnNsaWNlKDAsIGN1cmJ1Zi5sKTsgY3VyYnVmLmwgPSBjdXJidWYubGVuZ3RoOyB9XG5cdFx0aWYoY3VyYnVmLmxlbmd0aCA+IDApIGJ1ZnMucHVzaChjdXJidWYpO1xuXHRcdGN1cmJ1ZiA9IG51bGw7XG5cdH07XG5cblx0dmFyIG5leHQgPSBmdW5jdGlvbiBiYV9uZXh0KHN6KSB7XG5cdFx0aWYoY3VyYnVmICYmIChzeiA8IChjdXJidWYubGVuZ3RoIC0gY3VyYnVmLmwpKSkgcmV0dXJuIGN1cmJ1Zjtcblx0XHRlbmRidWYoKTtcblx0XHRyZXR1cm4gKGN1cmJ1ZiA9IG5ld2JsayhNYXRoLm1heChzeisxLCBibGtzeikpKTtcblx0fTtcblxuXHR2YXIgZW5kID0gZnVuY3Rpb24gYmFfZW5kKCkge1xuXHRcdGVuZGJ1ZigpO1xuXHRcdHJldHVybiBfX3RvQnVmZmVyKFtidWZzXSk7XG5cdH07XG5cblx0dmFyIHB1c2ggPSBmdW5jdGlvbiBiYV9wdXNoKGJ1ZikgeyBlbmRidWYoKTsgY3VyYnVmID0gYnVmOyBpZihjdXJidWYubCA9PSBudWxsKSBjdXJidWYubCA9IGN1cmJ1Zi5sZW5ndGg7IG5leHQoYmxrc3opOyB9O1xuXG5cdHJldHVybiAoeyBuZXh0Om5leHQsIHB1c2g6cHVzaCwgZW5kOmVuZCwgX2J1ZnM6YnVmcyB9KTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfcmVjb3JkKGJhLCB0eXBlLCBwYXlsb2FkLCBsZW5ndGgpIHtcblx0dmFyIHQgPSArWExTQlJFW3R5cGVdLCBsO1xuXHRpZihpc05hTih0KSkgcmV0dXJuOyAvLyBUT0RPOiB0aHJvdyBzb21ldGhpbmcgaGVyZT9cblx0aWYoIWxlbmd0aCkgbGVuZ3RoID0gWExTQlJlY29yZEVudW1bdF0ucCB8fCAocGF5bG9hZHx8W10pLmxlbmd0aCB8fCAwO1xuXHRsID0gMSArICh0ID49IDB4ODAgPyAxIDogMCkgKyAxLyogKyBsZW5ndGgqLztcblx0aWYobGVuZ3RoID49IDB4ODApICsrbDsgaWYobGVuZ3RoID49IDB4NDAwMCkgKytsOyBpZihsZW5ndGggPj0gMHgyMDAwMDApICsrbDtcblx0dmFyIG8gPSBiYS5uZXh0KGwpO1xuXHRpZih0IDw9IDB4N0YpIG8ud3JpdGVfc2hpZnQoMSwgdCk7XG5cdGVsc2Uge1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgKHQgJiAweDdGKSArIDB4ODApO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgKHQgPj4gNykpO1xuXHR9XG5cdGZvcih2YXIgaSA9IDA7IGkgIT0gNDsgKytpKSB7XG5cdFx0aWYobGVuZ3RoID49IDB4ODApIHsgby53cml0ZV9zaGlmdCgxLCAobGVuZ3RoICYgMHg3RikrMHg4MCk7IGxlbmd0aCA+Pj0gNzsgfVxuXHRcdGVsc2UgeyBvLndyaXRlX3NoaWZ0KDEsIGxlbmd0aCk7IGJyZWFrOyB9XG5cdH1cblx0aWYobGVuZ3RoID4gMCAmJiBpc19idWYocGF5bG9hZCkpIGJhLnB1c2gocGF5bG9hZCk7XG59XG4vKiBYTFMgcmFuZ2VzIGVuZm9yY2VkICovXG5mdW5jdGlvbiBzaGlmdF9jZWxsX3hscyhjZWxsLCB0Z3QsIG9wdHMpIHtcblx0dmFyIG91dCA9IGR1cChjZWxsKTtcblx0aWYodGd0LnMpIHtcblx0XHRpZihvdXQuY1JlbCkgb3V0LmMgKz0gdGd0LnMuYztcblx0XHRpZihvdXQuclJlbCkgb3V0LnIgKz0gdGd0LnMucjtcblx0fSBlbHNlIHtcblx0XHRpZihvdXQuY1JlbCkgb3V0LmMgKz0gdGd0LmM7XG5cdFx0aWYob3V0LnJSZWwpIG91dC5yICs9IHRndC5yO1xuXHR9XG5cdGlmKCFvcHRzIHx8IG9wdHMuYmlmZiA8IDEyKSB7XG5cdFx0d2hpbGUob3V0LmMgPj0gMHgxMDApIG91dC5jIC09IDB4MTAwO1xuXHRcdHdoaWxlKG91dC5yID49IDB4MTAwMDApIG91dC5yIC09IDB4MTAwMDA7XG5cdH1cblx0cmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gc2hpZnRfcmFuZ2VfeGxzKGNlbGwsIHJhbmdlLCBvcHRzKSB7XG5cdHZhciBvdXQgPSBkdXAoY2VsbCk7XG5cdG91dC5zID0gc2hpZnRfY2VsbF94bHMob3V0LnMsIHJhbmdlLnMsIG9wdHMpO1xuXHRvdXQuZSA9IHNoaWZ0X2NlbGxfeGxzKG91dC5lLCByYW5nZS5zLCBvcHRzKTtcblx0cmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gZW5jb2RlX2NlbGxfeGxzKGMsIGJpZmYpIHtcblx0aWYoYy5jUmVsICYmIGMuYyA8IDApIHsgYyA9IGR1cChjKTsgd2hpbGUoYy5jIDwgMCkgYy5jICs9IChiaWZmID4gOCkgPyAweDQwMDAgOiAweDEwMDsgfVxuXHRpZihjLnJSZWwgJiYgYy5yIDwgMCkgeyBjID0gZHVwKGMpOyB3aGlsZShjLnIgPCAwKSBjLnIgKz0gKGJpZmYgPiA4KSA/IDB4MTAwMDAwIDogKChiaWZmID4gNSkgPyAweDEwMDAwIDogMHg0MDAwKTsgfVxuXHR2YXIgcyA9IGVuY29kZV9jZWxsKGMpO1xuXHRpZighYy5jUmVsICYmIGMuY1JlbCAhPSBudWxsKSBzID0gZml4X2NvbChzKTtcblx0aWYoIWMuclJlbCAmJiBjLnJSZWwgIT0gbnVsbCkgcyA9IGZpeF9yb3cocyk7XG5cdHJldHVybiBzO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVfcmFuZ2VfeGxzKHIsIG9wdHMpIHtcblx0aWYoci5zLnIgPT0gMCAmJiAhci5zLnJSZWwpIHtcblx0XHRpZihyLmUuciA9PSAob3B0cy5iaWZmID49IDEyID8gMHhGRkZGRiA6IChvcHRzLmJpZmYgPj0gOCA/IDB4MTAwMDAgOiAweDQwMDApKSAmJiAhci5lLnJSZWwpIHtcblx0XHRcdHJldHVybiAoci5zLmNSZWwgPyBcIlwiIDogXCIkXCIpICsgZW5jb2RlX2NvbChyLnMuYykgKyBcIjpcIiArIChyLmUuY1JlbCA/IFwiXCIgOiBcIiRcIikgKyBlbmNvZGVfY29sKHIuZS5jKTtcblx0XHR9XG5cdH1cblx0aWYoci5zLmMgPT0gMCAmJiAhci5zLmNSZWwpIHtcblx0XHRpZihyLmUuYyA9PSAob3B0cy5iaWZmID49IDEyID8gMHgzRkZGIDogMHhGRikgJiYgIXIuZS5jUmVsKSB7XG5cdFx0XHRyZXR1cm4gKHIucy5yUmVsID8gXCJcIiA6IFwiJFwiKSArIGVuY29kZV9yb3coci5zLnIpICsgXCI6XCIgKyAoci5lLnJSZWwgPyBcIlwiIDogXCIkXCIpICsgZW5jb2RlX3JvdyhyLmUucik7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBlbmNvZGVfY2VsbF94bHMoci5zLCBvcHRzLmJpZmYpICsgXCI6XCIgKyBlbmNvZGVfY2VsbF94bHMoci5lLCBvcHRzLmJpZmYpO1xufVxudmFyIE9GRkNSWVBUTyA9IHt9O1xuXG52YXIgbWFrZV9vZmZjcnlwdG8gPSBmdW5jdGlvbihPLCBfY3J5cHRvKSB7XG5cdHZhciBjcnlwdG87XG5cdGlmKHR5cGVvZiBfY3J5cHRvICE9PSAndW5kZWZpbmVkJykgY3J5cHRvID0gX2NyeXB0bztcblx0ZWxzZSBpZih0eXBlb2YgcmVxdWlyZSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHR0cnkgeyBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTsgfVxuXHRcdGNhdGNoKGUpIHsgY3J5cHRvID0gbnVsbDsgfVxuXHR9XG5cblx0Ty5yYzQgPSBmdW5jdGlvbihrZXksIGRhdGEpIHtcblx0XHR2YXIgUyA9IG5ldyBBcnJheSgyNTYpO1xuXHRcdHZhciBjID0gMCwgaSA9IDAsIGogPSAwLCB0ID0gMDtcblx0XHRmb3IoaSA9IDA7IGkgIT0gMjU2OyArK2kpIFNbaV0gPSBpO1xuXHRcdGZvcihpID0gMDsgaSAhPSAyNTY7ICsraSkge1xuXHRcdFx0aiA9IChqICsgU1tpXSArIChrZXlbaSVrZXkubGVuZ3RoXSkuY2hhckNvZGVBdCgwKSkmMjU1O1xuXHRcdFx0dCA9IFNbaV07IFNbaV0gPSBTW2pdOyBTW2pdID0gdDtcblx0XHR9XG5cdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRpID0gaiA9IDA7IHZhciBvdXQgPSBuZXdfcmF3X2J1ZihkYXRhLmxlbmd0aCk7XG5cdFx0Zm9yKGMgPSAwOyBjICE9IGRhdGEubGVuZ3RoOyArK2MpIHtcblx0XHRcdGkgPSAoaSArIDEpJjI1NTtcblx0XHRcdGogPSAoaiArIFNbaV0pJTI1Njtcblx0XHRcdHQgPSBTW2ldOyBTW2ldID0gU1tqXTsgU1tqXSA9IHQ7XG5cdFx0XHRvdXRbY10gPSAoZGF0YVtjXSBeIFNbKFNbaV0rU1tqXSkmMjU1XSk7XG5cdFx0fVxuXHRcdHJldHVybiBvdXQ7XG5cdH07XG5cblx0Ty5tZDUgPSBmdW5jdGlvbihoZXgpIHtcblx0XHRpZighY3J5cHRvKSB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBjcnlwdG9cIik7XG5cdFx0cmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKCdtZDUnKS51cGRhdGUoaGV4KS5kaWdlc3QoJ2hleCcpO1xuXHR9O1xufTtcbi8qZ2xvYmFsIGNyeXB0bzp0cnVlICovXG5tYWtlX29mZmNyeXB0byhPRkZDUllQVE8sIHR5cGVvZiBjcnlwdG8gIT09IFwidW5kZWZpbmVkXCIgPyBjcnlwdG8gOiB1bmRlZmluZWQpO1xuXG5mdW5jdGlvbiBkZWNvZGVfcm93KHJvd3N0cikgeyByZXR1cm4gcGFyc2VJbnQodW5maXhfcm93KHJvd3N0ciksMTApIC0gMTsgfVxuZnVuY3Rpb24gZW5jb2RlX3Jvdyhyb3cpIHsgcmV0dXJuIFwiXCIgKyAocm93ICsgMSk7IH1cbmZ1bmN0aW9uIGZpeF9yb3coY3N0cikgeyByZXR1cm4gY3N0ci5yZXBsYWNlKC8oW0EtWl18XikoXFxkKykkLyxcIiQxJCQkMlwiKTsgfVxuZnVuY3Rpb24gdW5maXhfcm93KGNzdHIpIHsgcmV0dXJuIGNzdHIucmVwbGFjZSgvXFwkKFxcZCspJC8sXCIkMVwiKTsgfVxuXG5mdW5jdGlvbiBkZWNvZGVfY29sKGNvbHN0cikgeyB2YXIgYyA9IHVuZml4X2NvbChjb2xzdHIpLCBkID0gMCwgaSA9IDA7IGZvcig7IGkgIT09IGMubGVuZ3RoOyArK2kpIGQgPSAyNipkICsgYy5jaGFyQ29kZUF0KGkpIC0gNjQ7IHJldHVybiBkIC0gMTsgfVxuZnVuY3Rpb24gZW5jb2RlX2NvbChjb2wpIHsgaWYoY29sIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjb2x1bW4gXCIgKyBjb2wpOyB2YXIgcz1cIlwiOyBmb3IoKytjb2w7IGNvbDsgY29sPU1hdGguZmxvb3IoKGNvbC0xKS8yNikpIHMgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoY29sLTEpJTI2KSArIDY1KSArIHM7IHJldHVybiBzOyB9XG5mdW5jdGlvbiBmaXhfY29sKGNzdHIpIHsgcmV0dXJuIGNzdHIucmVwbGFjZSgvXihbQS1aXSkvLFwiJCQkMVwiKTsgfVxuZnVuY3Rpb24gdW5maXhfY29sKGNzdHIpIHsgcmV0dXJuIGNzdHIucmVwbGFjZSgvXlxcJChbQS1aXSkvLFwiJDFcIik7IH1cblxuZnVuY3Rpb24gc3BsaXRfY2VsbChjc3RyKSB7IHJldHVybiBjc3RyLnJlcGxhY2UoLyhcXCQ/W0EtWl0qKShcXCQ/XFxkKikvLFwiJDEsJDJcIikuc3BsaXQoXCIsXCIpOyB9XG4vL2Z1bmN0aW9uIGRlY29kZV9jZWxsKGNzdHIpIHsgdmFyIHNwbHQgPSBzcGxpdF9jZWxsKGNzdHIpOyByZXR1cm4geyBjOmRlY29kZV9jb2woc3BsdFswXSksIHI6ZGVjb2RlX3JvdyhzcGx0WzFdKSB9OyB9XG5mdW5jdGlvbiBkZWNvZGVfY2VsbChjc3RyKSB7XG5cdHZhciBSID0gMCwgQyA9IDA7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBjc3RyLmxlbmd0aDsgKytpKSB7XG5cdFx0dmFyIGNjID0gY3N0ci5jaGFyQ29kZUF0KGkpO1xuXHRcdGlmKGNjID49IDQ4ICYmIGNjIDw9IDU3KSBSID0gMTAgKiBSICsgKGNjIC0gNDgpO1xuXHRcdGVsc2UgaWYoY2MgPj0gNjUgJiYgY2MgPD0gOTApIEMgPSAyNiAqIEMgKyAoY2MgLSA2NCk7XG5cdH1cblx0cmV0dXJuIHsgYzogQyAtIDEsIHI6UiAtIDEgfTtcbn1cbi8vZnVuY3Rpb24gZW5jb2RlX2NlbGwoY2VsbCkgeyByZXR1cm4gZW5jb2RlX2NvbChjZWxsLmMpICsgZW5jb2RlX3JvdyhjZWxsLnIpOyB9XG5mdW5jdGlvbiBlbmNvZGVfY2VsbChjZWxsKSB7XG5cdHZhciBjb2wgPSBjZWxsLmMgKyAxO1xuXHR2YXIgcz1cIlwiO1xuXHRmb3IoOyBjb2w7IGNvbD0oKGNvbC0xKS8yNil8MCkgcyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjb2wtMSklMjYpICsgNjUpICsgcztcblx0cmV0dXJuIHMgKyAoY2VsbC5yICsgMSk7XG59XG5mdW5jdGlvbiBkZWNvZGVfcmFuZ2UocmFuZ2UpIHtcblx0dmFyIGlkeCA9IHJhbmdlLmluZGV4T2YoXCI6XCIpO1xuXHRpZihpZHggPT0gLTEpIHJldHVybiB7IHM6IGRlY29kZV9jZWxsKHJhbmdlKSwgZTogZGVjb2RlX2NlbGwocmFuZ2UpIH07XG5cdHJldHVybiB7IHM6IGRlY29kZV9jZWxsKHJhbmdlLnNsaWNlKDAsIGlkeCkpLCBlOiBkZWNvZGVfY2VsbChyYW5nZS5zbGljZShpZHggKyAxKSkgfTtcbn1cbmZ1bmN0aW9uIGVuY29kZV9yYW5nZShjcyxjZSkge1xuXHRpZih0eXBlb2YgY2UgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBjZSA9PT0gJ251bWJlcicpIHtcbnJldHVybiBlbmNvZGVfcmFuZ2UoY3MucywgY3MuZSk7XG5cdH1cbmlmKHR5cGVvZiBjcyAhPT0gJ3N0cmluZycpIGNzID0gZW5jb2RlX2NlbGwoKGNzKSk7XG5cdGlmKHR5cGVvZiBjZSAhPT0gJ3N0cmluZycpIGNlID0gZW5jb2RlX2NlbGwoKGNlKSk7XG5yZXR1cm4gY3MgPT0gY2UgPyBjcyA6IGNzICsgXCI6XCIgKyBjZTtcbn1cblxuZnVuY3Rpb24gc2FmZV9kZWNvZGVfcmFuZ2UocmFuZ2UpIHtcblx0dmFyIG8gPSB7czp7YzowLHI6MH0sZTp7YzowLHI6MH19O1xuXHR2YXIgaWR4ID0gMCwgaSA9IDAsIGNjID0gMDtcblx0dmFyIGxlbiA9IHJhbmdlLmxlbmd0aDtcblx0Zm9yKGlkeCA9IDA7IGkgPCBsZW47ICsraSkge1xuXHRcdGlmKChjYz1yYW5nZS5jaGFyQ29kZUF0KGkpLTY0KSA8IDEgfHwgY2MgPiAyNikgYnJlYWs7XG5cdFx0aWR4ID0gMjYqaWR4ICsgY2M7XG5cdH1cblx0by5zLmMgPSAtLWlkeDtcblxuXHRmb3IoaWR4ID0gMDsgaSA8IGxlbjsgKytpKSB7XG5cdFx0aWYoKGNjPXJhbmdlLmNoYXJDb2RlQXQoaSktNDgpIDwgMCB8fCBjYyA+IDkpIGJyZWFrO1xuXHRcdGlkeCA9IDEwKmlkeCArIGNjO1xuXHR9XG5cdG8ucy5yID0gLS1pZHg7XG5cblx0aWYoaSA9PT0gbGVuIHx8IHJhbmdlLmNoYXJDb2RlQXQoKytpKSA9PT0gNTgpIHsgby5lLmM9by5zLmM7IG8uZS5yPW8ucy5yOyByZXR1cm4gbzsgfVxuXG5cdGZvcihpZHggPSAwOyBpICE9IGxlbjsgKytpKSB7XG5cdFx0aWYoKGNjPXJhbmdlLmNoYXJDb2RlQXQoaSktNjQpIDwgMSB8fCBjYyA+IDI2KSBicmVhaztcblx0XHRpZHggPSAyNippZHggKyBjYztcblx0fVxuXHRvLmUuYyA9IC0taWR4O1xuXG5cdGZvcihpZHggPSAwOyBpICE9IGxlbjsgKytpKSB7XG5cdFx0aWYoKGNjPXJhbmdlLmNoYXJDb2RlQXQoaSktNDgpIDwgMCB8fCBjYyA+IDkpIGJyZWFrO1xuXHRcdGlkeCA9IDEwKmlkeCArIGNjO1xuXHR9XG5cdG8uZS5yID0gLS1pZHg7XG5cdHJldHVybiBvO1xufVxuXG5mdW5jdGlvbiBzYWZlX2Zvcm1hdF9jZWxsKGNlbGwsIHYpIHtcblx0dmFyIHEgPSAoY2VsbC50ID09ICdkJyAmJiB2IGluc3RhbmNlb2YgRGF0ZSk7XG5cdGlmKGNlbGwueiAhPSBudWxsKSB0cnkgeyByZXR1cm4gKGNlbGwudyA9IFNTRi5mb3JtYXQoY2VsbC56LCBxID8gZGF0ZW51bSh2KSA6IHYpKTsgfSBjYXRjaChlKSB7IH1cblx0dHJ5IHsgcmV0dXJuIChjZWxsLncgPSBTU0YuZm9ybWF0KChjZWxsLlhGfHx7fSkubnVtRm10SWR8fChxID8gMTQgOiAwKSwgIHEgPyBkYXRlbnVtKHYpIDogdikpOyB9IGNhdGNoKGUpIHsgcmV0dXJuICcnK3Y7IH1cbn1cblxuZnVuY3Rpb24gZm9ybWF0X2NlbGwoY2VsbCwgdiwgbykge1xuXHRpZihjZWxsID09IG51bGwgfHwgY2VsbC50ID09IG51bGwgfHwgY2VsbC50ID09ICd6JykgcmV0dXJuIFwiXCI7XG5cdGlmKGNlbGwudyAhPT0gdW5kZWZpbmVkKSByZXR1cm4gY2VsbC53O1xuXHRpZihjZWxsLnQgPT0gJ2QnICYmICFjZWxsLnogJiYgbyAmJiBvLmRhdGVORikgY2VsbC56ID0gby5kYXRlTkY7XG5cdGlmKGNlbGwudCA9PSBcImVcIikgcmV0dXJuIEJFcnJbY2VsbC52XSB8fCBjZWxsLnY7XG5cdGlmKHYgPT0gdW5kZWZpbmVkKSByZXR1cm4gc2FmZV9mb3JtYXRfY2VsbChjZWxsLCBjZWxsLnYpO1xuXHRyZXR1cm4gc2FmZV9mb3JtYXRfY2VsbChjZWxsLCB2KTtcbn1cblxuZnVuY3Rpb24gc2hlZXRfdG9fd29ya2Jvb2soc2hlZXQsIG9wdHMpIHtcblx0dmFyIG4gPSBvcHRzICYmIG9wdHMuc2hlZXQgPyBvcHRzLnNoZWV0IDogXCJTaGVldDFcIjtcblx0dmFyIHNoZWV0cyA9IHt9OyBzaGVldHNbbl0gPSBzaGVldDtcblx0cmV0dXJuIHsgU2hlZXROYW1lczogW25dLCBTaGVldHM6IHNoZWV0cyB9O1xufVxuXG5mdW5jdGlvbiBzaGVldF9hZGRfYW9hKF93cywgZGF0YSwgb3B0cykge1xuXHR2YXIgbyA9IG9wdHMgfHwge307XG5cdHZhciBkZW5zZSA9IF93cyA/IEFycmF5LmlzQXJyYXkoX3dzKSA6IG8uZGVuc2U7XG5cdGlmKERFTlNFICE9IG51bGwgJiYgZGVuc2UgPT0gbnVsbCkgZGVuc2UgPSBERU5TRTtcblx0dmFyIHdzID0gX3dzIHx8IChkZW5zZSA/IChbXSkgOiAoe30pKTtcblx0dmFyIF9SID0gMCwgX0MgPSAwO1xuXHRpZih3cyAmJiBvLm9yaWdpbiAhPSBudWxsKSB7XG5cdFx0aWYodHlwZW9mIG8ub3JpZ2luID09ICdudW1iZXInKSBfUiA9IG8ub3JpZ2luO1xuXHRcdGVsc2Uge1xuXHRcdFx0dmFyIF9vcmlnaW4gPSB0eXBlb2Ygby5vcmlnaW4gPT0gXCJzdHJpbmdcIiA/IGRlY29kZV9jZWxsKG8ub3JpZ2luKSA6IG8ub3JpZ2luO1xuXHRcdFx0X1IgPSBfb3JpZ2luLnI7IF9DID0gX29yaWdpbi5jO1xuXHRcdH1cblx0XHRpZighd3NbXCIhcmVmXCJdKSB3c1tcIiFyZWZcIl0gPSBcIkExOkExXCI7XG5cdH1cblx0dmFyIHJhbmdlID0gKHtzOiB7YzoxMDAwMDAwMCwgcjoxMDAwMDAwMH0sIGU6IHtjOjAsIHI6MH19KTtcblx0aWYod3NbJyFyZWYnXSkge1xuXHRcdHZhciBfcmFuZ2UgPSBzYWZlX2RlY29kZV9yYW5nZSh3c1snIXJlZiddKTtcblx0XHRyYW5nZS5zLmMgPSBfcmFuZ2Uucy5jO1xuXHRcdHJhbmdlLnMuciA9IF9yYW5nZS5zLnI7XG5cdFx0cmFuZ2UuZS5jID0gTWF0aC5tYXgocmFuZ2UuZS5jLCBfcmFuZ2UuZS5jKTtcblx0XHRyYW5nZS5lLnIgPSBNYXRoLm1heChyYW5nZS5lLnIsIF9yYW5nZS5lLnIpO1xuXHRcdGlmKF9SID09IC0xKSByYW5nZS5lLnIgPSBfUiA9IF9yYW5nZS5lLnIgKyAxO1xuXHR9XG5cdGZvcih2YXIgUiA9IDA7IFIgIT0gZGF0YS5sZW5ndGg7ICsrUikge1xuXHRcdGlmKCFkYXRhW1JdKSBjb250aW51ZTtcblx0XHRpZighQXJyYXkuaXNBcnJheShkYXRhW1JdKSkgdGhyb3cgbmV3IEVycm9yKFwiYW9hX3RvX3NoZWV0IGV4cGVjdHMgYW4gYXJyYXkgb2YgYXJyYXlzXCIpO1xuXHRcdGZvcih2YXIgQyA9IDA7IEMgIT0gZGF0YVtSXS5sZW5ndGg7ICsrQykge1xuXHRcdFx0aWYodHlwZW9mIGRhdGFbUl1bQ10gPT09ICd1bmRlZmluZWQnKSBjb250aW51ZTtcblx0XHRcdHZhciBjZWxsID0gKHt2OiBkYXRhW1JdW0NdIH0pO1xuXHRcdFx0dmFyIF9fUiA9IF9SICsgUiwgX19DID0gX0MgKyBDO1xuXHRcdFx0aWYocmFuZ2Uucy5yID4gX19SKSByYW5nZS5zLnIgPSBfX1I7XG5cdFx0XHRpZihyYW5nZS5zLmMgPiBfX0MpIHJhbmdlLnMuYyA9IF9fQztcblx0XHRcdGlmKHJhbmdlLmUuciA8IF9fUikgcmFuZ2UuZS5yID0gX19SO1xuXHRcdFx0aWYocmFuZ2UuZS5jIDwgX19DKSByYW5nZS5lLmMgPSBfX0M7XG5cdFx0XHRpZihkYXRhW1JdW0NdICYmIHR5cGVvZiBkYXRhW1JdW0NdID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShkYXRhW1JdW0NdKSAmJiAhKGRhdGFbUl1bQ10gaW5zdGFuY2VvZiBEYXRlKSkgY2VsbCA9IGRhdGFbUl1bQ107XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0aWYoQXJyYXkuaXNBcnJheShjZWxsLnYpKSB7IGNlbGwuZiA9IGRhdGFbUl1bQ11bMV07IGNlbGwudiA9IGNlbGwudlswXTsgfVxuXHRcdFx0XHRpZihjZWxsLnYgPT09IG51bGwpIHtcblx0XHRcdFx0XHRpZihjZWxsLmYpIGNlbGwudCA9ICduJztcblx0XHRcdFx0XHRlbHNlIGlmKG8ubnVsbEVycm9yKSB7IGNlbGwudCA9ICdlJzsgY2VsbC52ID0gMDsgfVxuXHRcdFx0XHRcdGVsc2UgaWYoIW8uc2hlZXRTdHVicykgY29udGludWU7XG5cdFx0XHRcdFx0ZWxzZSBjZWxsLnQgPSAneic7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZih0eXBlb2YgY2VsbC52ID09PSAnbnVtYmVyJykgY2VsbC50ID0gJ24nO1xuXHRcdFx0XHRlbHNlIGlmKHR5cGVvZiBjZWxsLnYgPT09ICdib29sZWFuJykgY2VsbC50ID0gJ2InO1xuXHRcdFx0XHRlbHNlIGlmKGNlbGwudiBpbnN0YW5jZW9mIERhdGUpIHtcblx0XHRcdFx0XHRjZWxsLnogPSBvLmRhdGVORiB8fCBTU0YuX3RhYmxlWzE0XTtcblx0XHRcdFx0XHRpZihvLmNlbGxEYXRlcykgeyBjZWxsLnQgPSAnZCc7IGNlbGwudyA9IFNTRi5mb3JtYXQoY2VsbC56LCBkYXRlbnVtKGNlbGwudikpOyB9XG5cdFx0XHRcdFx0ZWxzZSB7IGNlbGwudCA9ICduJzsgY2VsbC52ID0gZGF0ZW51bShjZWxsLnYpOyBjZWxsLncgPSBTU0YuZm9ybWF0KGNlbGwueiwgY2VsbC52KTsgfVxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgY2VsbC50ID0gJ3MnO1xuXHRcdFx0fVxuXHRcdFx0aWYoZGVuc2UpIHtcblx0XHRcdFx0aWYoIXdzW19fUl0pIHdzW19fUl0gPSBbXTtcblx0XHRcdFx0aWYod3NbX19SXVtfX0NdICYmIHdzW19fUl1bX19DXS56KSBjZWxsLnogPSB3c1tfX1JdW19fQ10uejtcblx0XHRcdFx0d3NbX19SXVtfX0NdID0gY2VsbDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciBjZWxsX3JlZiA9IGVuY29kZV9jZWxsKCh7YzpfX0MscjpfX1J9KSk7XG5cdFx0XHRcdGlmKHdzW2NlbGxfcmVmXSAmJiB3c1tjZWxsX3JlZl0ueikgY2VsbC56ID0gd3NbY2VsbF9yZWZdLno7XG5cdFx0XHRcdHdzW2NlbGxfcmVmXSA9IGNlbGw7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGlmKHJhbmdlLnMuYyA8IDEwMDAwMDAwKSB3c1snIXJlZiddID0gZW5jb2RlX3JhbmdlKHJhbmdlKTtcblx0cmV0dXJuIHdzO1xufVxuZnVuY3Rpb24gYW9hX3RvX3NoZWV0KGRhdGEsIG9wdHMpIHsgcmV0dXJuIHNoZWV0X2FkZF9hb2EobnVsbCwgZGF0YSwgb3B0cyk7IH1cblxuZnVuY3Rpb24gd3JpdGVfVUludDMyTEUoeCwgbykge1xuXHRpZiAoIW8pIG8gPSBuZXdfYnVmKDQpO1xuXHRvLndyaXRlX3NoaWZ0KDQsIHgpO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU0JdIDIuNS4xNjggKi9cbmZ1bmN0aW9uIHBhcnNlX1hMV2lkZVN0cmluZyhkYXRhKSB7XG5cdHZhciBjY2hDaGFyYWN0ZXJzID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHRyZXR1cm4gY2NoQ2hhcmFjdGVycyA9PT0gMCA/IFwiXCIgOiBkYXRhLnJlYWRfc2hpZnQoY2NoQ2hhcmFjdGVycywgJ2RiY3MnKTtcbn1cbmZ1bmN0aW9uIHdyaXRlX1hMV2lkZVN0cmluZyhkYXRhLCBvKSB7XG5cdHZhciBfbnVsbCA9IGZhbHNlOyBpZiAobyA9PSBudWxsKSB7IF9udWxsID0gdHJ1ZTsgbyA9IG5ld19idWYoNCArIDIgKiBkYXRhLmxlbmd0aCk7IH1cblx0by53cml0ZV9zaGlmdCg0LCBkYXRhLmxlbmd0aCk7XG5cdGlmIChkYXRhLmxlbmd0aCA+IDApIG8ud3JpdGVfc2hpZnQoMCwgZGF0YSwgJ2RiY3MnKTtcblx0cmV0dXJuIF9udWxsID8gby5zbGljZSgwLCBvLmwpIDogbztcbn1cblxuLyogW01TLVhMU0JdIDIuNS45MSAqL1xuLy9mdW5jdGlvbiBwYXJzZV9MUFdpZGVTdHJpbmcoZGF0YSkge1xuLy9cdHZhciBjY2hDaGFyYWN0ZXJzID0gZGF0YS5yZWFkX3NoaWZ0KDIpO1xuLy9cdHJldHVybiBjY2hDaGFyYWN0ZXJzID09PSAwID8gXCJcIiA6IGRhdGEucmVhZF9zaGlmdChjY2hDaGFyYWN0ZXJzLCBcInV0ZjE2bGVcIik7XG4vL31cblxuLyogW01TLVhMU0JdIDIuNS4xNDMgKi9cbmZ1bmN0aW9uIHBhcnNlX1N0clJ1bihkYXRhKSB7XG5cdHJldHVybiB7IGljaDogZGF0YS5yZWFkX3NoaWZ0KDIpLCBpZm50OiBkYXRhLnJlYWRfc2hpZnQoMikgfTtcbn1cbmZ1bmN0aW9uIHdyaXRlX1N0clJ1bihydW4sIG8pIHtcblx0aWYgKCFvKSBvID0gbmV3X2J1Zig0KTtcblx0by53cml0ZV9zaGlmdCgyLCBydW4uaWNoIHx8IDApO1xuXHRvLndyaXRlX3NoaWZ0KDIsIHJ1bi5pZm50IHx8IDApO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU0JdIDIuNS4xMjEgKi9cbmZ1bmN0aW9uIHBhcnNlX1JpY2hTdHIoZGF0YSwgbGVuZ3RoKSB7XG5cdHZhciBzdGFydCA9IGRhdGEubDtcblx0dmFyIGZsYWdzID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHR2YXIgc3RyID0gcGFyc2VfWExXaWRlU3RyaW5nKGRhdGEpO1xuXHR2YXIgcmdzU3RyUnVuID0gW107XG5cdHZhciB6ID0gKHsgdDogc3RyLCBoOiBzdHIgfSk7XG5cdGlmICgoZmxhZ3MgJiAxKSAhPT0gMCkgeyAvKiBmUmljaFN0ciAqL1xuXHRcdC8qIFRPRE86IGZvcm1hdHRlZCBzdHJpbmcgKi9cblx0XHR2YXIgZHdTaXplU3RyUnVuID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpICE9IGR3U2l6ZVN0clJ1bjsgKytpKSByZ3NTdHJSdW4ucHVzaChwYXJzZV9TdHJSdW4oZGF0YSkpO1xuXHRcdHouciA9IHJnc1N0clJ1bjtcblx0fVxuXHRlbHNlIHouciA9IFt7IGljaDogMCwgaWZudDogMCB9XTtcblx0Ly9pZigoZmxhZ3MgJiAyKSAhPT0gMCkgeyAvKiBmRXh0U3RyICovXG5cdC8vXHQvKiBUT0RPOiBwaG9uZXRpYyBzdHJpbmcgKi9cblx0Ly99XG5cdGRhdGEubCA9IHN0YXJ0ICsgbGVuZ3RoO1xuXHRyZXR1cm4gejtcbn1cbmZ1bmN0aW9uIHdyaXRlX1JpY2hTdHIoc3RyLCBvKSB7XG5cdC8qIFRPRE86IGZvcm1hdHRlZCBzdHJpbmcgKi9cblx0dmFyIF9udWxsID0gZmFsc2U7IGlmIChvID09IG51bGwpIHsgX251bGwgPSB0cnVlOyBvID0gbmV3X2J1ZigxNSArIDQgKiBzdHIudC5sZW5ndGgpOyB9XG5cdG8ud3JpdGVfc2hpZnQoMSwgMCk7XG5cdHdyaXRlX1hMV2lkZVN0cmluZyhzdHIudCwgbyk7XG5cdHJldHVybiBfbnVsbCA/IG8uc2xpY2UoMCwgby5sKSA6IG87XG59XG4vKiBbTVMtWExTQl0gMi40LjMyOCBCcnRDb21tZW50VGV4dCAoUmljaFN0ciB3LzEgcnVuKSAqL1xudmFyIHBhcnNlX0JydENvbW1lbnRUZXh0ID0gcGFyc2VfUmljaFN0cjtcbmZ1bmN0aW9uIHdyaXRlX0JydENvbW1lbnRUZXh0KHN0ciwgbykge1xuXHQvKiBUT0RPOiBmb3JtYXR0ZWQgc3RyaW5nICovXG5cdHZhciBfbnVsbCA9IGZhbHNlOyBpZiAobyA9PSBudWxsKSB7IF9udWxsID0gdHJ1ZTsgbyA9IG5ld19idWYoMjMgKyA0ICogc3RyLnQubGVuZ3RoKTsgfVxuXHRvLndyaXRlX3NoaWZ0KDEsIDEpO1xuXHR3cml0ZV9YTFdpZGVTdHJpbmcoc3RyLnQsIG8pO1xuXHRvLndyaXRlX3NoaWZ0KDQsIDEpO1xuXHR3cml0ZV9TdHJSdW4oeyBpY2g6IDAsIGlmbnQ6IDAgfSwgbyk7XG5cdHJldHVybiBfbnVsbCA/IG8uc2xpY2UoMCwgby5sKSA6IG87XG59XG5cbi8qIFtNUy1YTFNCXSAyLjUuOSAqL1xuZnVuY3Rpb24gcGFyc2VfWExTQkNlbGwoZGF0YSkge1xuXHR2YXIgY29sID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgaVN0eWxlUmVmID0gZGF0YS5yZWFkX3NoaWZ0KDIpO1xuXHRpU3R5bGVSZWYgKz0gZGF0YS5yZWFkX3NoaWZ0KDEpIDw8IDE2O1xuXHRkYXRhLmwrKzsgLy92YXIgZlBoU2hvdyA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblx0cmV0dXJuIHsgYzogY29sLCBpU3R5bGVSZWY6IGlTdHlsZVJlZiB9O1xufVxuZnVuY3Rpb24gd3JpdGVfWExTQkNlbGwoY2VsbCwgbykge1xuXHRpZiAobyA9PSBudWxsKSBvID0gbmV3X2J1Zig4KTtcblx0by53cml0ZV9zaGlmdCgtNCwgY2VsbC5jKTtcblx0by53cml0ZV9zaGlmdCgzLCBjZWxsLmlTdHlsZVJlZiB8fCBjZWxsLnMpO1xuXHRvLndyaXRlX3NoaWZ0KDEsIDApOyAvKiBmUGhTaG93ICovXG5cdHJldHVybiBvO1xufVxuXG4vKiBTaG9ydCBYTFNCIENlbGwgZG9lcyBub3QgaW5jbHVkZSBjb2x1bW4gKi9cbmZ1bmN0aW9uIHBhcnNlX1hMU0JTaG9ydENlbGwoZGF0YSkge1xuXHR2YXIgaVN0eWxlUmVmID0gZGF0YS5yZWFkX3NoaWZ0KDIpO1xuXHRpU3R5bGVSZWYgKz0gZGF0YS5yZWFkX3NoaWZ0KDEpIDw8MTY7XG5cdGRhdGEubCsrOyAvL3ZhciBmUGhTaG93ID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHRyZXR1cm4geyBjOi0xLCBpU3R5bGVSZWY6IGlTdHlsZVJlZiB9O1xufVxuZnVuY3Rpb24gd3JpdGVfWExTQlNob3J0Q2VsbChjZWxsLCBvKSB7XG5cdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoNCk7XG5cdG8ud3JpdGVfc2hpZnQoMywgY2VsbC5pU3R5bGVSZWYgfHwgY2VsbC5zKTtcblx0by53cml0ZV9zaGlmdCgxLCAwKTsgLyogZlBoU2hvdyAqL1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU0JdIDIuNS4yMSAqL1xudmFyIHBhcnNlX1hMU0JDb2RlTmFtZSA9IHBhcnNlX1hMV2lkZVN0cmluZztcbnZhciB3cml0ZV9YTFNCQ29kZU5hbWUgPSB3cml0ZV9YTFdpZGVTdHJpbmc7XG5cbi8qIFtNUy1YTFNCXSAyLjUuMTY2ICovXG5mdW5jdGlvbiBwYXJzZV9YTE51bGxhYmxlV2lkZVN0cmluZyhkYXRhKSB7XG5cdHZhciBjY2hDaGFyYWN0ZXJzID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHRyZXR1cm4gY2NoQ2hhcmFjdGVycyA9PT0gMCB8fCBjY2hDaGFyYWN0ZXJzID09PSAweEZGRkZGRkZGID8gXCJcIiA6IGRhdGEucmVhZF9zaGlmdChjY2hDaGFyYWN0ZXJzLCAnZGJjcycpO1xufVxuZnVuY3Rpb24gd3JpdGVfWExOdWxsYWJsZVdpZGVTdHJpbmcoZGF0YSwgbykge1xuXHR2YXIgX251bGwgPSBmYWxzZTsgaWYgKG8gPT0gbnVsbCkgeyBfbnVsbCA9IHRydWU7IG8gPSBuZXdfYnVmKDEyNyk7IH1cblx0by53cml0ZV9zaGlmdCg0LCBkYXRhLmxlbmd0aCA+IDAgPyBkYXRhLmxlbmd0aCA6IDB4RkZGRkZGRkYpO1xuXHRpZiAoZGF0YS5sZW5ndGggPiAwKSBvLndyaXRlX3NoaWZ0KDAsIGRhdGEsICdkYmNzJyk7XG5cdHJldHVybiBfbnVsbCA/IG8uc2xpY2UoMCwgby5sKSA6IG87XG59XG5cbi8qIFtNUy1YTFNCXSAyLjUuMTY1ICovXG52YXIgcGFyc2VfWExOYW1lV2lkZVN0cmluZyA9IHBhcnNlX1hMV2lkZVN0cmluZztcbi8vdmFyIHdyaXRlX1hMTmFtZVdpZGVTdHJpbmcgPSB3cml0ZV9YTFdpZGVTdHJpbmc7XG5cbi8qIFtNUy1YTFNCXSAyLjUuMTE0ICovXG52YXIgcGFyc2VfUmVsSUQgPSBwYXJzZV9YTE51bGxhYmxlV2lkZVN0cmluZztcbnZhciB3cml0ZV9SZWxJRCA9IHdyaXRlX1hMTnVsbGFibGVXaWRlU3RyaW5nO1xuXG5cbi8qIFtNUy1YTFNdIDIuNS4yMTcgOyBbTVMtWExTQl0gMi41LjEyMiAqL1xuZnVuY3Rpb24gcGFyc2VfUmtOdW1iZXIoZGF0YSkge1xuXHR2YXIgYiA9IGRhdGEuc2xpY2UoZGF0YS5sLCBkYXRhLmwgKyA0KTtcblx0dmFyIGZYMTAwID0gKGJbMF0gJiAxKSwgZkludCA9IChiWzBdICYgMik7XG5cdGRhdGEubCArPSA0O1xuXHRiWzBdICY9IDB4RkM7IC8vIGJbMF0gJj0gfjM7XG5cdHZhciBSSyA9IGZJbnQgPT09IDAgPyBfX2RvdWJsZShbMCwgMCwgMCwgMCwgYlswXSwgYlsxXSwgYlsyXSwgYlszXV0sIDApIDogX19yZWFkSW50MzJMRShiLCAwKSA+PiAyO1xuXHRyZXR1cm4gZlgxMDAgPyAoUksgLyAxMDApIDogUks7XG59XG5mdW5jdGlvbiB3cml0ZV9Sa051bWJlcihkYXRhLCBvKSB7XG5cdGlmIChvID09IG51bGwpIG8gPSBuZXdfYnVmKDQpO1xuXHR2YXIgZlgxMDAgPSAwLCBmSW50ID0gMCwgZDEwMCA9IGRhdGEgKiAxMDA7XG5cdGlmICgoZGF0YSA9PSAoZGF0YSB8IDApKSAmJiAoZGF0YSA+PSAtKDEgPDwgMjkpKSAmJiAoZGF0YSA8ICgxIDw8IDI5KSkpIHsgZkludCA9IDE7IH1cblx0ZWxzZSBpZiAoKGQxMDAgPT0gKGQxMDAgfCAwKSkgJiYgKGQxMDAgPj0gLSgxIDw8IDI5KSkgJiYgKGQxMDAgPCAoMSA8PCAyOSkpKSB7IGZJbnQgPSAxOyBmWDEwMCA9IDE7IH1cblx0aWYgKGZJbnQpIG8ud3JpdGVfc2hpZnQoLTQsICgoZlgxMDAgPyBkMTAwIDogZGF0YSkgPDwgMikgKyAoZlgxMDAgKyAyKSk7XG5cdGVsc2UgdGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWQgUmtOdW1iZXIgXCIgKyBkYXRhKTsgLy8gVE9ET1xufVxuXG5cbi8qIFtNUy1YTFNCXSAyLjUuMTE3IFJmWCAqL1xuZnVuY3Rpb24gcGFyc2VfUmZYKGRhdGEgKSB7XG5cdHZhciBjZWxsID0gKHsgczoge30sIGU6IHt9IH0pO1xuXHRjZWxsLnMuciA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0Y2VsbC5lLnIgPSBkYXRhLnJlYWRfc2hpZnQoNCk7XG5cdGNlbGwucy5jID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHRjZWxsLmUuYyA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0cmV0dXJuIGNlbGw7XG59XG5mdW5jdGlvbiB3cml0ZV9SZlgociwgbykge1xuXHRpZiAoIW8pIG8gPSBuZXdfYnVmKDE2KTtcblx0by53cml0ZV9zaGlmdCg0LCByLnMucik7XG5cdG8ud3JpdGVfc2hpZnQoNCwgci5lLnIpO1xuXHRvLndyaXRlX3NoaWZ0KDQsIHIucy5jKTtcblx0by53cml0ZV9zaGlmdCg0LCByLmUuYyk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTQl0gMi41LjE1MyBVbmNoZWNrZWRSZlggKi9cbnZhciBwYXJzZV9VbmNoZWNrZWRSZlggPSBwYXJzZV9SZlg7XG52YXIgd3JpdGVfVW5jaGVja2VkUmZYID0gd3JpdGVfUmZYO1xuXG4vKiBbTVMtWExTQl0gMi41LjE1NSBVbmNoZWNrZWRTcVJmWCAqL1xuLy9mdW5jdGlvbiBwYXJzZV9VbmNoZWNrZWRTcVJmWChkYXRhKSB7XG4vL1x0dmFyIGNudCA9IGRhdGEucmVhZF9zaGlmdCg0KTtcbi8vXHR2YXIgb3V0ID0gW107XG4vL1x0Zm9yKHZhciBpID0gMDsgaSA8IGNudDsgKytpKSB7XG4vL1x0XHR2YXIgcm5nID0gcGFyc2VfVW5jaGVja2VkUmZYKGRhdGEpO1xuLy9cdFx0b3V0LnB1c2goZW5jb2RlX3JhbmdlKHJuZykpO1xuLy9cdH1cbi8vXHRyZXR1cm4gb3V0LmpvaW4oXCIsXCIpO1xuLy99XG4vL2Z1bmN0aW9uIHdyaXRlX1VuY2hlY2tlZFNxUmZYKHNxcmZ4KSB7XG4vL1x0dmFyIHBhcnRzID0gc3FyZnguc3BsaXQoL1xccyosXFxzKi8pO1xuLy9cdHZhciBvID0gbmV3X2J1Zig0KTsgby53cml0ZV9zaGlmdCg0LCBwYXJ0cy5sZW5ndGgpO1xuLy9cdHZhciBvdXQgPSBbb107XG4vL1x0cGFydHMuZm9yRWFjaChmdW5jdGlvbihybmcpIHtcbi8vXHRcdG91dC5wdXNoKHdyaXRlX1VuY2hlY2tlZFJmWChzYWZlX2RlY29kZV9yYW5nZShybmcpKSk7XG4vL1x0fSk7XG4vL1x0cmV0dXJuIGJjb25jYXQob3V0KTtcbi8vfVxuXG4vKiBbTVMtWExTXSAyLjUuMzQyIDsgW01TLVhMU0JdIDIuNS4xNzEgKi9cbi8qIFRPRE86IGVycm9yIGNoZWNraW5nLCBOYU4gYW5kIEluZmluaXR5IHZhbHVlcyBhcmUgbm90IHZhbGlkIFhudW0gKi9cbmZ1bmN0aW9uIHBhcnNlX1hudW0oZGF0YSkge1xuXHRpZihkYXRhLmxlbmd0aCAtIGRhdGEubCA8IDgpIHRocm93IFwiWExTIFhudW0gQnVmZmVyIHVuZGVyZmxvd1wiO1xuXHRyZXR1cm4gZGF0YS5yZWFkX3NoaWZ0KDgsICdmJyk7XG59XG5mdW5jdGlvbiB3cml0ZV9YbnVtKGRhdGEsIG8pIHsgcmV0dXJuIChvIHx8IG5ld19idWYoOCkpLndyaXRlX3NoaWZ0KDgsIGRhdGEsICdmJyk7IH1cblxuLyogW01TLVhMU0JdIDIuNC4zMjQgQnJ0Q29sb3IgKi9cbmZ1bmN0aW9uIHBhcnNlX0JydENvbG9yKGRhdGEpIHtcblx0dmFyIG91dCA9IHt9O1xuXHR2YXIgZCA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblxuXHQvL3ZhciBmVmFsaWRSR0IgPSBkICYgMTtcblx0dmFyIHhDb2xvclR5cGUgPSBkID4+PiAxO1xuXG5cdHZhciBpbmRleCA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblx0dmFyIG5UUyA9IGRhdGEucmVhZF9zaGlmdCgyLCAnaScpO1xuXHR2YXIgYlIgPSBkYXRhLnJlYWRfc2hpZnQoMSk7XG5cdHZhciBiRyA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblx0dmFyIGJCID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHRkYXRhLmwrKzsgLy92YXIgYkFscGhhID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXG5cdHN3aXRjaCAoeENvbG9yVHlwZSkge1xuXHRcdGNhc2UgMDogb3V0LmF1dG8gPSAxOyBicmVhaztcblx0XHRjYXNlIDE6XG5cdFx0XHRvdXQuaW5kZXggPSBpbmRleDtcblx0XHRcdHZhciBpY3YgPSBYTFNJY3ZbaW5kZXhdO1xuXHRcdFx0LyogYXV0b21hdGljIHBzZXVkbyBpbmRleCA4MSAqL1xuXHRcdFx0aWYgKGljdikgb3V0LnJnYiA9IHJnYjJIZXgoaWN2KTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgMjpcblx0XHRcdC8qIGlmKCFmVmFsaWRSR0IpIHRocm93IG5ldyBFcnJvcihcImludmFsaWRcIik7ICovXG5cdFx0XHRvdXQucmdiID0gcmdiMkhleChbYlIsIGJHLCBiQl0pO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAzOiBvdXQudGhlbWUgPSBpbmRleDsgYnJlYWs7XG5cdH1cblx0aWYgKG5UUyAhPSAwKSBvdXQudGludCA9IG5UUyA+IDAgPyBuVFMgLyAzMjc2NyA6IG5UUyAvIDMyNzY4O1xuXG5cdHJldHVybiBvdXQ7XG59XG5mdW5jdGlvbiB3cml0ZV9CcnRDb2xvcihjb2xvciwgbykge1xuXHRpZiAoIW8pIG8gPSBuZXdfYnVmKDgpO1xuXHRpZiAoIWNvbG9yIHx8IGNvbG9yLmF1dG8pIHsgby53cml0ZV9zaGlmdCg0LCAwKTsgby53cml0ZV9zaGlmdCg0LCAwKTsgcmV0dXJuIG87IH1cblx0aWYgKGNvbG9yLmluZGV4ICE9IG51bGwpIHtcblx0XHRvLndyaXRlX3NoaWZ0KDEsIDB4MDIpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgY29sb3IuaW5kZXgpO1xuXHR9IGVsc2UgaWYgKGNvbG9yLnRoZW1lICE9IG51bGwpIHtcblx0XHRvLndyaXRlX3NoaWZ0KDEsIDB4MDYpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgY29sb3IudGhlbWUpO1xuXHR9IGVsc2Uge1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgMHgwNSk7XG5cdFx0by53cml0ZV9zaGlmdCgxLCAwKTtcblx0fVxuXHR2YXIgblRTID0gY29sb3IudGludCB8fCAwO1xuXHRpZiAoblRTID4gMCkgblRTICo9IDMyNzY3O1xuXHRlbHNlIGlmIChuVFMgPCAwKSBuVFMgKj0gMzI3Njg7XG5cdG8ud3JpdGVfc2hpZnQoMiwgblRTKTtcblx0aWYgKCFjb2xvci5yZ2IgfHwgY29sb3IudGhlbWUgIT0gbnVsbCkge1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdFx0by53cml0ZV9zaGlmdCgxLCAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDEsIDApO1xuXHR9IGVsc2Uge1xuXHRcdHZhciByZ2IgPSAoY29sb3IucmdiIHx8ICdGRkZGRkYnKTtcblx0XHRpZiAodHlwZW9mIHJnYiA9PSAnbnVtYmVyJykgcmdiID0gKFwiMDAwMDAwXCIgKyByZ2IudG9TdHJpbmcoMTYpKS5zbGljZSgtNik7XG5cdFx0by53cml0ZV9zaGlmdCgxLCBwYXJzZUludChyZ2Iuc2xpY2UoMCwgMiksIDE2KSk7XG5cdFx0by53cml0ZV9zaGlmdCgxLCBwYXJzZUludChyZ2Iuc2xpY2UoMiwgNCksIDE2KSk7XG5cdFx0by53cml0ZV9zaGlmdCgxLCBwYXJzZUludChyZ2Iuc2xpY2UoNCwgNiksIDE2KSk7XG5cdFx0by53cml0ZV9zaGlmdCgxLCAweEZGKTtcblx0fVxuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU0JdIDIuNS41MiAqL1xuZnVuY3Rpb24gcGFyc2VfRm9udEZsYWdzKGRhdGEpIHtcblx0dmFyIGQgPSBkYXRhLnJlYWRfc2hpZnQoMSk7XG5cdGRhdGEubCsrO1xuXHR2YXIgb3V0ID0ge1xuXHRcdGZCb2xkOiBkICYgMHgwMSxcblx0XHRmSXRhbGljOiBkICYgMHgwMixcblx0XHRmVW5kZXJsaW5lOiBkICYgMHgwNCxcblx0XHRmU3RyaWtlb3V0OiBkICYgMHgwOCxcblx0XHRmT3V0bGluZTogZCAmIDB4MTAsXG5cdFx0ZlNoYWRvdzogZCAmIDB4MjAsXG5cdFx0ZkNvbmRlbnNlOiBkICYgMHg0MCxcblx0XHRmRXh0ZW5kOiBkICYgMHg4MFxuXHR9O1xuXHRyZXR1cm4gb3V0O1xufVxuZnVuY3Rpb24gd3JpdGVfRm9udEZsYWdzKGZvbnQsIG8pIHtcblx0aWYgKCFvKSBvID0gbmV3X2J1ZigyKTtcblx0dmFyIGdyYml0ID1cblx0XHQoZm9udC5pdGFsaWMgPyAweDAyIDogMCkgfFxuXHRcdChmb250LnN0cmlrZSA/IDB4MDggOiAwKSB8XG5cdFx0KGZvbnQub3V0bGluZSA/IDB4MTAgOiAwKSB8XG5cdFx0KGZvbnQuc2hhZG93ID8gMHgyMCA6IDApIHxcblx0XHQoZm9udC5jb25kZW5zZSA/IDB4NDAgOiAwKSB8XG5cdFx0KGZvbnQuZXh0ZW5kID8gMHg4MCA6IDApO1xuXHRvLndyaXRlX3NoaWZ0KDEsIGdyYml0KTtcblx0by53cml0ZV9zaGlmdCgxLCAwKTtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1PTEVEU10gMi4zLjEgYW5kIDIuMy4yICovXG5mdW5jdGlvbiBwYXJzZV9DbGlwYm9hcmRGb3JtYXRPclN0cmluZyhvLCB3KSB7XG5cdC8vICRGbG93SWdub3JlXG5cdHZhciBDbGlwRm10ID0geyAyOiBcIkJJVE1BUFwiLCAzOiBcIk1FVEFGSUxFUElDVFwiLCA4OiBcIkRJQlwiLCAxNDogXCJFTkhNRVRBRklMRVwiIH07XG5cdHZhciBtID0gby5yZWFkX3NoaWZ0KDQpO1xuXHRzd2l0Y2ggKG0pIHtcblx0XHRjYXNlIDB4MDAwMDAwMDA6IHJldHVybiBcIlwiO1xuXHRcdGNhc2UgMHhmZmZmZmZmZjogY2FzZSAweGZmZmZmZmZlOiByZXR1cm4gQ2xpcEZtdFtvLnJlYWRfc2hpZnQoNCldIHx8IFwiXCI7XG5cdH1cblx0aWYgKG0gPiAweDE5MCkgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgQ2xpcGJvYXJkOiBcIiArIG0udG9TdHJpbmcoMTYpKTtcblx0by5sIC09IDQ7XG5cdHJldHVybiBvLnJlYWRfc2hpZnQoMCwgdyA9PSAxID8gXCJscHN0clwiIDogXCJscHdzdHJcIik7XG59XG5mdW5jdGlvbiBwYXJzZV9DbGlwYm9hcmRGb3JtYXRPckFuc2lTdHJpbmcobykgeyByZXR1cm4gcGFyc2VfQ2xpcGJvYXJkRm9ybWF0T3JTdHJpbmcobywgMSk7IH1cbmZ1bmN0aW9uIHBhcnNlX0NsaXBib2FyZEZvcm1hdE9yVW5pY29kZVN0cmluZyhvKSB7IHJldHVybiBwYXJzZV9DbGlwYm9hcmRGb3JtYXRPclN0cmluZyhvLCAyKTsgfVxuXG4vKiBbTVMtT0xFUFNdIDIuMiBQcm9wZXJ0eVR5cGUgKi9cbi8vdmFyIFZUX0VNUFRZICAgID0gMHgwMDAwO1xuLy92YXIgVlRfTlVMTCAgICAgPSAweDAwMDE7XG52YXIgVlRfSTIgICAgICAgPSAweDAwMDI7XG52YXIgVlRfSTQgICAgICAgPSAweDAwMDM7XG4vL3ZhciBWVF9SNCAgICAgICA9IDB4MDAwNDtcbi8vdmFyIFZUX1I4ICAgICAgID0gMHgwMDA1O1xuLy92YXIgVlRfQ1kgICAgICAgPSAweDAwMDY7XG4vL3ZhciBWVF9EQVRFICAgICA9IDB4MDAwNztcbi8vdmFyIFZUX0JTVFIgICAgID0gMHgwMDA4O1xuLy92YXIgVlRfRVJST1IgICAgPSAweDAwMEE7XG52YXIgVlRfQk9PTCAgICAgPSAweDAwMEI7XG52YXIgVlRfVkFSSUFOVCAgPSAweDAwMEM7XG4vL3ZhciBWVF9ERUNJTUFMICA9IDB4MDAwRTtcbi8vdmFyIFZUX0kxICAgICAgID0gMHgwMDEwO1xuLy92YXIgVlRfVUkxICAgICAgPSAweDAwMTE7XG4vL3ZhciBWVF9VSTIgICAgICA9IDB4MDAxMjtcbnZhciBWVF9VSTQgICAgICA9IDB4MDAxMztcbi8vdmFyIFZUX0k4ICAgICAgID0gMHgwMDE0O1xuLy92YXIgVlRfVUk4ICAgICAgPSAweDAwMTU7XG4vL3ZhciBWVF9JTlQgICAgICA9IDB4MDAxNjtcbi8vdmFyIFZUX1VJTlQgICAgID0gMHgwMDE3O1xudmFyIFZUX0xQU1RSICAgID0gMHgwMDFFO1xuLy92YXIgVlRfTFBXU1RSICAgPSAweDAwMUY7XG52YXIgVlRfRklMRVRJTUUgPSAweDAwNDA7XG52YXIgVlRfQkxPQiAgICAgPSAweDAwNDE7XG4vL3ZhciBWVF9TVFJFQU0gICA9IDB4MDA0Mjtcbi8vdmFyIFZUX1NUT1JBR0UgID0gMHgwMDQzO1xuLy92YXIgVlRfU1RSRUFNRURfT2JqZWN0ICA9IDB4MDA0NDtcbi8vdmFyIFZUX1NUT1JFRF9PYmplY3QgICAgPSAweDAwNDU7XG4vL3ZhciBWVF9CTE9CX09iamVjdCAgICAgID0gMHgwMDQ2O1xudmFyIFZUX0NGICAgICAgID0gMHgwMDQ3O1xuLy92YXIgVlRfQ0xTSUQgICAgPSAweDAwNDg7XG4vL3ZhciBWVF9WRVJTSU9ORURfU1RSRUFNID0gMHgwMDQ5O1xudmFyIFZUX1ZFQ1RPUiAgID0gMHgxMDAwO1xuLy92YXIgVlRfQVJSQVkgICAgPSAweDIwMDA7XG5cbnZhciBWVF9TVFJJTkcgICA9IDB4MDA1MDsgLy8gMi4zLjMuMS4xMSBWdFN0cmluZ1xudmFyIFZUX1VTVFIgICAgID0gMHgwMDUxOyAvLyAyLjMuMy4xLjEyIFZ0VW5hbGlnbmVkU3RyaW5nXG52YXIgVlRfQ1VTVE9NICAgPSBbVlRfU1RSSU5HLCBWVF9VU1RSXTtcblxuLyogW01TLU9TSEFSRURdIDIuMy4zLjIuMi4xIERvY3VtZW50IFN1bW1hcnkgSW5mb3JtYXRpb24gUElERFNJICovXG52YXIgRG9jU3VtbWFyeVBJRERTSSA9IHtcbjB4MDE6IHsgbjogJ0NvZGVQYWdlJywgdDogVlRfSTIgfSxcbjB4MDI6IHsgbjogJ0NhdGVnb3J5JywgdDogVlRfU1RSSU5HIH0sXG4weDAzOiB7IG46ICdQcmVzZW50YXRpb25Gb3JtYXQnLCB0OiBWVF9TVFJJTkcgfSxcbjB4MDQ6IHsgbjogJ0J5dGVDb3VudCcsIHQ6IFZUX0k0IH0sXG4weDA1OiB7IG46ICdMaW5lQ291bnQnLCB0OiBWVF9JNCB9LFxuMHgwNjogeyBuOiAnUGFyYWdyYXBoQ291bnQnLCB0OiBWVF9JNCB9LFxuMHgwNzogeyBuOiAnU2xpZGVDb3VudCcsIHQ6IFZUX0k0IH0sXG4weDA4OiB7IG46ICdOb3RlQ291bnQnLCB0OiBWVF9JNCB9LFxuMHgwOTogeyBuOiAnSGlkZGVuQ291bnQnLCB0OiBWVF9JNCB9LFxuMHgwYTogeyBuOiAnTXVsdGltZWRpYUNsaXBDb3VudCcsIHQ6IFZUX0k0IH0sXG4weDBiOiB7IG46ICdTY2FsZUNyb3AnLCB0OiBWVF9CT09MIH0sXG4weDBjOiB7IG46ICdIZWFkaW5nUGFpcnMnLCB0OiBWVF9WRUNUT1IgfCBWVF9WQVJJQU5UIH0sXG4weDBkOiB7IG46ICdUaXRsZXNPZlBhcnRzJywgdDogVlRfVkVDVE9SIHwgVlRfTFBTVFIgfSxcbjB4MGU6IHsgbjogJ01hbmFnZXInLCB0OiBWVF9TVFJJTkcgfSxcbjB4MGY6IHsgbjogJ0NvbXBhbnknLCB0OiBWVF9TVFJJTkcgfSxcbjB4MTA6IHsgbjogJ0xpbmtzVXBUb0RhdGUnLCB0OiBWVF9CT09MIH0sXG4weDExOiB7IG46ICdDaGFyYWN0ZXJDb3VudCcsIHQ6IFZUX0k0IH0sXG4weDEzOiB7IG46ICdTaGFyZWREb2MnLCB0OiBWVF9CT09MIH0sXG4weDE2OiB7IG46ICdIeXBlcmxpbmtzQ2hhbmdlZCcsIHQ6IFZUX0JPT0wgfSxcbjB4MTc6IHsgbjogJ0FwcFZlcnNpb24nLCB0OiBWVF9JNCwgcDogJ3ZlcnNpb24nIH0sXG4weDE4OiB7IG46ICdEaWdTaWcnLCB0OiBWVF9CTE9CIH0sXG4weDFBOiB7IG46ICdDb250ZW50VHlwZScsIHQ6IFZUX1NUUklORyB9LFxuMHgxQjogeyBuOiAnQ29udGVudFN0YXR1cycsIHQ6IFZUX1NUUklORyB9LFxuMHgxQzogeyBuOiAnTGFuZ3VhZ2UnLCB0OiBWVF9TVFJJTkcgfSxcbjB4MUQ6IHsgbjogJ1ZlcnNpb24nLCB0OiBWVF9TVFJJTkcgfSxcbjB4RkY6IHt9LFxuXHQvKiBbTVMtT0xFUFNdIDIuMTggKi9cbjB4ODAwMDAwMDA6IHsgbjogJ0xvY2FsZScsIHQ6IFZUX1VJNCB9LFxuMHg4MDAwMDAwMzogeyBuOiAnQmVoYXZpb3InLCB0OiBWVF9VSTQgfSxcbjB4NzI2MjcyNjI6IHt9XG59O1xuXG4vKiBbTVMtT1NIQVJFRF0gMi4zLjMuMi4xLjEgU3VtbWFyeSBJbmZvcm1hdGlvbiBQcm9wZXJ0eSBTZXQgUElEU0kgKi9cbnZhciBTdW1tYXJ5UElEU0kgPSB7XG4weDAxOiB7IG46ICdDb2RlUGFnZScsIHQ6IFZUX0kyIH0sXG4weDAyOiB7IG46ICdUaXRsZScsIHQ6IFZUX1NUUklORyB9LFxuMHgwMzogeyBuOiAnU3ViamVjdCcsIHQ6IFZUX1NUUklORyB9LFxuMHgwNDogeyBuOiAnQXV0aG9yJywgdDogVlRfU1RSSU5HIH0sXG4weDA1OiB7IG46ICdLZXl3b3JkcycsIHQ6IFZUX1NUUklORyB9LFxuMHgwNjogeyBuOiAnQ29tbWVudHMnLCB0OiBWVF9TVFJJTkcgfSxcbjB4MDc6IHsgbjogJ1RlbXBsYXRlJywgdDogVlRfU1RSSU5HIH0sXG4weDA4OiB7IG46ICdMYXN0QXV0aG9yJywgdDogVlRfU1RSSU5HIH0sXG4weDA5OiB7IG46ICdSZXZOdW1iZXInLCB0OiBWVF9TVFJJTkcgfSxcbjB4MEE6IHsgbjogJ0VkaXRUaW1lJywgdDogVlRfRklMRVRJTUUgfSxcbjB4MEI6IHsgbjogJ0xhc3RQcmludGVkJywgdDogVlRfRklMRVRJTUUgfSxcbjB4MEM6IHsgbjogJ0NyZWF0ZWREYXRlJywgdDogVlRfRklMRVRJTUUgfSxcbjB4MEQ6IHsgbjogJ01vZGlmaWVkRGF0ZScsIHQ6IFZUX0ZJTEVUSU1FIH0sXG4weDBFOiB7IG46ICdQYWdlQ291bnQnLCB0OiBWVF9JNCB9LFxuMHgwRjogeyBuOiAnV29yZENvdW50JywgdDogVlRfSTQgfSxcbjB4MTA6IHsgbjogJ0NoYXJDb3VudCcsIHQ6IFZUX0k0IH0sXG4weDExOiB7IG46ICdUaHVtYm5haWwnLCB0OiBWVF9DRiB9LFxuMHgxMjogeyBuOiAnQXBwbGljYXRpb24nLCB0OiBWVF9TVFJJTkcgfSxcbjB4MTM6IHsgbjogJ0RvY1NlY3VyaXR5JywgdDogVlRfSTQgfSxcbjB4RkY6IHt9LFxuXHQvKiBbTVMtT0xFUFNdIDIuMTggKi9cbjB4ODAwMDAwMDA6IHsgbjogJ0xvY2FsZScsIHQ6IFZUX1VJNCB9LFxuMHg4MDAwMDAwMzogeyBuOiAnQmVoYXZpb3InLCB0OiBWVF9VSTQgfSxcbjB4NzI2MjcyNjI6IHt9XG59O1xuXG52YXIgRG9jU3VtbWFyeVJFID0gZXZlcnRfa2V5KERvY1N1bW1hcnlQSUREU0ksIFwiblwiKTtcbnZhciBTdW1tYXJ5UkUgPSBldmVydF9rZXkoU3VtbWFyeVBJRFNJLCBcIm5cIik7XG5cbi8qIFtNUy1YTFNdIDIuNC42MyBDb3VudHJ5L1JlZ2lvbiBjb2RlcyAqL1xudmFyIENvdW50cnlFbnVtID0ge1xuMHgwMDAxOiBcIlVTXCIsIC8vIFVuaXRlZCBTdGF0ZXNcbjB4MDAwMjogXCJDQVwiLCAvLyBDYW5hZGFcbjB4MDAwMzogXCJcIiwgLy8gTGF0aW4gQW1lcmljYSAoZXhjZXB0IEJyYXppbClcbjB4MDAwNzogXCJSVVwiLCAvLyBSdXNzaWFcbjB4MDAxNDogXCJFR1wiLCAvLyBFZ3lwdFxuMHgwMDFFOiBcIkdSXCIsIC8vIEdyZWVjZVxuMHgwMDFGOiBcIk5MXCIsIC8vIE5ldGhlcmxhbmRzXG4weDAwMjA6IFwiQkVcIiwgLy8gQmVsZ2l1bVxuMHgwMDIxOiBcIkZSXCIsIC8vIEZyYW5jZVxuMHgwMDIyOiBcIkVTXCIsIC8vIFNwYWluXG4weDAwMjQ6IFwiSFVcIiwgLy8gSHVuZ2FyeVxuMHgwMDI3OiBcIklUXCIsIC8vIEl0YWx5XG4weDAwMjk6IFwiQ0hcIiwgLy8gU3dpdHplcmxhbmRcbjB4MDAyQjogXCJBVFwiLCAvLyBBdXN0cmlhXG4weDAwMkM6IFwiR0JcIiwgLy8gVW5pdGVkIEtpbmdkb21cbjB4MDAyRDogXCJES1wiLCAvLyBEZW5tYXJrXG4weDAwMkU6IFwiU0VcIiwgLy8gU3dlZGVuXG4weDAwMkY6IFwiTk9cIiwgLy8gTm9yd2F5XG4weDAwMzA6IFwiUExcIiwgLy8gUG9sYW5kXG4weDAwMzE6IFwiREVcIiwgLy8gR2VybWFueVxuMHgwMDM0OiBcIk1YXCIsIC8vIE1leGljb1xuMHgwMDM3OiBcIkJSXCIsIC8vIEJyYXppbFxuMHgwMDNkOiBcIkFVXCIsIC8vIEF1c3RyYWxpYVxuMHgwMDQwOiBcIk5aXCIsIC8vIE5ldyBaZWFsYW5kXG4weDAwNDI6IFwiVEhcIiwgLy8gVGhhaWxhbmRcbjB4MDA1MTogXCJKUFwiLCAvLyBKYXBhblxuMHgwMDUyOiBcIktSXCIsIC8vIEtvcmVhXG4weDAwNTQ6IFwiVk5cIiwgLy8gVmlldCBOYW1cbjB4MDA1NjogXCJDTlwiLCAvLyBDaGluYVxuMHgwMDVBOiBcIlRSXCIsIC8vIFR1cmtleVxuMHgwMDY5OiBcIkpTXCIsIC8vIFJhbWFzdGFuXG4weDAwRDU6IFwiRFpcIiwgLy8gQWxnZXJpYVxuMHgwMEQ4OiBcIk1BXCIsIC8vIE1vcm9jY29cbjB4MDBEQTogXCJMWVwiLCAvLyBMaWJ5YVxuMHgwMTVGOiBcIlBUXCIsIC8vIFBvcnR1Z2FsXG4weDAxNjI6IFwiSVNcIiwgLy8gSWNlbGFuZFxuMHgwMTY2OiBcIkZJXCIsIC8vIEZpbmxhbmRcbjB4MDFBNDogXCJDWlwiLCAvLyBDemVjaCBSZXB1YmxpY1xuMHgwMzc2OiBcIlRXXCIsIC8vIFRhaXdhblxuMHgwM0MxOiBcIkxCXCIsIC8vIExlYmFub25cbjB4MDNDMjogXCJKT1wiLCAvLyBKb3JkYW5cbjB4MDNDMzogXCJTWVwiLCAvLyBTeXJpYVxuMHgwM0M0OiBcIklRXCIsIC8vIElyYXFcbjB4MDNDNTogXCJLV1wiLCAvLyBLdXdhaXRcbjB4MDNDNjogXCJTQVwiLCAvLyBTYXVkaSBBcmFiaWFcbjB4MDNDQjogXCJBRVwiLCAvLyBVbml0ZWQgQXJhYiBFbWlyYXRlc1xuMHgwM0NDOiBcIklMXCIsIC8vIElzcmFlbFxuMHgwM0NFOiBcIlFBXCIsIC8vIFFhdGFyXG4weDAzRDU6IFwiSVJcIiwgLy8gSXJhblxuMHhGRkZGOiBcIlVTXCIgIC8vIFVuaXRlZCBTdGF0ZXNcbn07XG5cbi8qIFtNUy1YTFNdIDIuNS4xMjcgKi9cbnZhciBYTFNGaWxsUGF0dGVybiA9IFtcblx0bnVsbCxcblx0J3NvbGlkJyxcblx0J21lZGl1bUdyYXknLFxuXHQnZGFya0dyYXknLFxuXHQnbGlnaHRHcmF5Jyxcblx0J2RhcmtIb3Jpem9udGFsJyxcblx0J2RhcmtWZXJ0aWNhbCcsXG5cdCdkYXJrRG93bicsXG5cdCdkYXJrVXAnLFxuXHQnZGFya0dyaWQnLFxuXHQnZGFya1RyZWxsaXMnLFxuXHQnbGlnaHRIb3Jpem9udGFsJyxcblx0J2xpZ2h0VmVydGljYWwnLFxuXHQnbGlnaHREb3duJyxcblx0J2xpZ2h0VXAnLFxuXHQnbGlnaHRHcmlkJyxcblx0J2xpZ2h0VHJlbGxpcycsXG5cdCdncmF5MTI1Jyxcblx0J2dyYXkwNjI1J1xuXTtcblxuZnVuY3Rpb24gcmdiaWZ5KGFycikgeyByZXR1cm4gYXJyLm1hcChmdW5jdGlvbih4KSB7IHJldHVybiBbKHg+PjE2KSYyNTUsKHg+PjgpJjI1NSx4JjI1NV07IH0pOyB9XG5cbi8qIFtNUy1YTFNdIDIuNS4xNjEgKi9cbi8qIFtNUy1YTFNCXSAyLjUuNzUgSWN2ICovXG52YXIgX1hMU0ljdiA9IHJnYmlmeShbXG5cdC8qIENvbG9yIENvbnN0YW50cyAqL1xuXHQweDAwMDAwMCxcblx0MHhGRkZGRkYsXG5cdDB4RkYwMDAwLFxuXHQweDAwRkYwMCxcblx0MHgwMDAwRkYsXG5cdDB4RkZGRjAwLFxuXHQweEZGMDBGRixcblx0MHgwMEZGRkYsXG5cblx0LyogT3ZlcnJpZGFibGUgRGVmYXVsdHMgKi9cblx0MHgwMDAwMDAsXG5cdDB4RkZGRkZGLFxuXHQweEZGMDAwMCxcblx0MHgwMEZGMDAsXG5cdDB4MDAwMEZGLFxuXHQweEZGRkYwMCxcblx0MHhGRjAwRkYsXG5cdDB4MDBGRkZGLFxuXG5cdDB4ODAwMDAwLFxuXHQweDAwODAwMCxcblx0MHgwMDAwODAsXG5cdDB4ODA4MDAwLFxuXHQweDgwMDA4MCxcblx0MHgwMDgwODAsXG5cdDB4QzBDMEMwLFxuXHQweDgwODA4MCxcblx0MHg5OTk5RkYsXG5cdDB4OTkzMzY2LFxuXHQweEZGRkZDQyxcblx0MHhDQ0ZGRkYsXG5cdDB4NjYwMDY2LFxuXHQweEZGODA4MCxcblx0MHgwMDY2Q0MsXG5cdDB4Q0NDQ0ZGLFxuXG5cdDB4MDAwMDgwLFxuXHQweEZGMDBGRixcblx0MHhGRkZGMDAsXG5cdDB4MDBGRkZGLFxuXHQweDgwMDA4MCxcblx0MHg4MDAwMDAsXG5cdDB4MDA4MDgwLFxuXHQweDAwMDBGRixcblx0MHgwMENDRkYsXG5cdDB4Q0NGRkZGLFxuXHQweENDRkZDQyxcblx0MHhGRkZGOTksXG5cdDB4OTlDQ0ZGLFxuXHQweEZGOTlDQyxcblx0MHhDQzk5RkYsXG5cdDB4RkZDQzk5LFxuXG5cdDB4MzM2NkZGLFxuXHQweDMzQ0NDQyxcblx0MHg5OUNDMDAsXG5cdDB4RkZDQzAwLFxuXHQweEZGOTkwMCxcblx0MHhGRjY2MDAsXG5cdDB4NjY2Njk5LFxuXHQweDk2OTY5Nixcblx0MHgwMDMzNjYsXG5cdDB4MzM5OTY2LFxuXHQweDAwMzMwMCxcblx0MHgzMzMzMDAsXG5cdDB4OTkzMzAwLFxuXHQweDk5MzM2Nixcblx0MHgzMzMzOTksXG5cdDB4MzMzMzMzLFxuXG5cdC8qIE90aGVyIGVudHJpZXMgdG8gYXBwZWFzZSBCSUZGOC8xMiAqL1xuXHQweEZGRkZGRiwgLyogMHg0MCBpY3ZGb3JlZ3JvdW5kID8/ICovXG5cdDB4MDAwMDAwLCAvKiAweDQxIGljdkJhY2tncm91bmQgPz8gKi9cblx0MHgwMDAwMDAsIC8qIDB4NDIgaWN2RnJhbWUgPz8gKi9cblx0MHgwMDAwMDAsIC8qIDB4NDMgaWN2M0QgPz8gKi9cblx0MHgwMDAwMDAsIC8qIDB4NDQgaWN2M0RUZXh0ID8/ICovXG5cdDB4MDAwMDAwLCAvKiAweDQ1IGljdjNESGlsaXRlID8/ICovXG5cdDB4MDAwMDAwLCAvKiAweDQ2IGljdjNEU2hhZG93ID8/ICovXG5cdDB4MDAwMDAwLCAvKiAweDQ3IGljdkhpbGl0ZSA/PyAqL1xuXHQweDAwMDAwMCwgLyogMHg0OCBpY3ZDdGxUZXh0ID8/ICovXG5cdDB4MDAwMDAwLCAvKiAweDQ5IGljdkN0bFNjcmwgPz8gKi9cblx0MHgwMDAwMDAsIC8qIDB4NEEgaWN2Q3RsSW52ID8/ICovXG5cdDB4MDAwMDAwLCAvKiAweDRCIGljdkN0bEJvZHkgPz8gKi9cblx0MHgwMDAwMDAsIC8qIDB4NEMgaWN2Q3RsRnJhbWUgPz8gKi9cblx0MHgwMDAwMDAsIC8qIDB4NEQgaWN2Q3RsRm9yZSA/PyAqL1xuXHQweDAwMDAwMCwgLyogMHg0RSBpY3ZDdGxCYWNrID8/ICovXG5cdDB4MDAwMDAwLCAvKiAweDRGIGljdkN0bE5ldXRyYWwgKi9cblx0MHgwMDAwMDAsIC8qIDB4NTAgaWN2SW5mb0JrID8/ICovXG5cdDB4MDAwMDAwIC8qIDB4NTEgaWN2SW5mb1RleHQgPz8gKi9cbl0pO1xudmFyIFhMU0ljdiA9IGR1cChfWExTSWN2KTtcblxuLyogW01TLVhMU0JdIDIuNS45Ny4yICovXG52YXIgQkVyciA9IHtcbjB4MDA6IFwiI05VTEwhXCIsXG4weDA3OiBcIiNESVYvMCFcIixcbjB4MEY6IFwiI1ZBTFVFIVwiLFxuMHgxNzogXCIjUkVGIVwiLFxuMHgxRDogXCIjTkFNRT9cIixcbjB4MjQ6IFwiI05VTSFcIixcbjB4MkE6IFwiI04vQVwiLFxuMHgyQjogXCIjR0VUVElOR19EQVRBXCIsXG4weEZGOiBcIiNXVEY/XCJcbn07XG52YXIgUkJFcnIgPSBldmVydF9udW0oQkVycik7XG4vKiBQYXJ0cyBlbnVtZXJhdGVkIGluIE9QQyBzcGVjLCBNUy1YTFNCIGFuZCBNUy1YTFNYICovXG4vKiAxMi4zIFBhcnQgU3VtbWFyeSA8U3ByZWFkc2hlZXRNTD4gKi9cbi8qIDE0LjIgUGFydCBTdW1tYXJ5IDxEcmF3aW5nTUw+ICovXG4vKiBbTVMtWExTWF0gMi4xIFBhcnQgRW51bWVyYXRpb25zIDsgW01TLVhMU0JdIDIuMS43IFBhcnQgRW51bWVyYXRpb24gKi9cbnZhciBjdDJ0eXBlLyp7W3N0cmluZ106c3RyaW5nfSovID0gKHtcblx0LyogV29ya2Jvb2sgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldC5tYWluK3htbFwiOiBcIndvcmtib29rc1wiLFxuXG5cdC8qIFdvcmtzaGVldCAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5iaW5JbmRleFdzXCI6IFwiVE9ET1wiLCAvKiBCaW5hcnkgSW5kZXggKi9cblxuXHQvKiBNYWNyb3NoZWV0ICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLmludGxtYWNyb3NoZWV0XCI6IFwiVE9ET1wiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5iaW5JbmRleE1zXCI6IFwiVE9ET1wiLCAvKiBCaW5hcnkgSW5kZXggKi9cblxuXHQvKiBGaWxlIFByb3BlcnRpZXMgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtcGFja2FnZS5jb3JlLXByb3BlcnRpZXMreG1sXCI6IFwiY29yZXByb3BzXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmN1c3RvbS1wcm9wZXJ0aWVzK3htbFwiOiBcImN1c3Rwcm9wc1wiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5leHRlbmRlZC1wcm9wZXJ0aWVzK3htbFwiOiBcImV4dHByb3BzXCIsXG5cblx0LyogQ3VzdG9tIERhdGEgUHJvcGVydGllcyAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5jdXN0b21YbWxQcm9wZXJ0aWVzK3htbFwiOiBcIlRPRE9cIixcblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5jdXN0b21Qcm9wZXJ0eVwiOiBcIlRPRE9cIixcblxuXHQvKiBQaXZvdFRhYmxlICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnBpdm90VGFibGVcIjogXCJUT0RPXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwucGl2b3RUYWJsZSt4bWxcIjogXCJUT0RPXCIsXG5cblx0LyogQ2hhcnQgT2JqZWN0cyAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5kcmF3aW5nbWwuY2hhcnQreG1sXCI6IFwiVE9ET1wiLFxuXG5cdC8qIENoYXJ0IENvbG9ycyAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1vZmZpY2UuY2hhcnRjb2xvcnN0eWxlK3htbFwiOiBcIlRPRE9cIixcblxuXHQvKiBDaGFydCBTdHlsZSAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1vZmZpY2UuY2hhcnRzdHlsZSt4bWxcIjogXCJUT0RPXCIsXG5cblx0LyogQ2hhcnQgQWR2YW5jZWQgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQubXMtb2ZmaWNlLmNoYXJ0ZXgreG1sXCI6IFwiVE9ET1wiLFxuXG5cdC8qIENhbGN1bGF0aW9uIENoYWluICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLmNhbGNDaGFpblwiOiBcImNhbGNjaGFpbnNcIixcblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5jYWxjQ2hhaW4reG1sXCI6IFwiY2FsY2NoYWluc1wiLFxuXG5cdC8qIFByaW50ZXIgU2V0dGluZ3MgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5wcmludGVyU2V0dGluZ3NcIjogXCJUT0RPXCIsXG5cblx0LyogQWN0aXZlWCAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1vZmZpY2UuYWN0aXZlWFwiOiBcIlRPRE9cIixcblx0XCJhcHBsaWNhdGlvbi92bmQubXMtb2ZmaWNlLmFjdGl2ZVgreG1sXCI6IFwiVE9ET1wiLFxuXG5cdC8qIEN1c3RvbSBUb29sYmFycyAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5hdHRhY2hlZFRvb2xiYXJzXCI6IFwiVE9ET1wiLFxuXG5cdC8qIEV4dGVybmFsIERhdGEgQ29ubmVjdGlvbnMgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuY29ubmVjdGlvbnNcIjogXCJUT0RPXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuY29ubmVjdGlvbnMreG1sXCI6IFwiVE9ET1wiLFxuXG5cdC8qIEV4dGVybmFsIExpbmtzICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLmV4dGVybmFsTGlua1wiOiBcImxpbmtzXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuZXh0ZXJuYWxMaW5rK3htbFwiOiBcImxpbmtzXCIsXG5cblx0LyogTWV0YWRhdGEgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuc2hlZXRNZXRhZGF0YVwiOiBcIlRPRE9cIixcblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldE1ldGFkYXRhK3htbFwiOiBcIlRPRE9cIixcblxuXHQvKiBQaXZvdENhY2hlICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnBpdm90Q2FjaGVEZWZpbml0aW9uXCI6IFwiVE9ET1wiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5waXZvdENhY2hlUmVjb3Jkc1wiOiBcIlRPRE9cIixcblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5waXZvdENhY2hlRGVmaW5pdGlvbit4bWxcIjogXCJUT0RPXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwucGl2b3RDYWNoZVJlY29yZHMreG1sXCI6IFwiVE9ET1wiLFxuXG5cdC8qIFF1ZXJ5IFRhYmxlICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnF1ZXJ5VGFibGVcIjogXCJUT0RPXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwucXVlcnlUYWJsZSt4bWxcIjogXCJUT0RPXCIsXG5cblx0LyogU2hhcmVkIFdvcmtib29rICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnVzZXJOYW1lc1wiOiBcIlRPRE9cIixcblx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwucmV2aXNpb25IZWFkZXJzXCI6IFwiVE9ET1wiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5yZXZpc2lvbkxvZ1wiOiBcIlRPRE9cIixcblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5yZXZpc2lvbkhlYWRlcnMreG1sXCI6IFwiVE9ET1wiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnJldmlzaW9uTG9nK3htbFwiOiBcIlRPRE9cIixcblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC51c2VyTmFtZXMreG1sXCI6IFwiVE9ET1wiLFxuXG5cdC8qIFNpbmdsZSBDZWxsIFRhYmxlICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnRhYmxlU2luZ2xlQ2VsbHNcIjogXCJUT0RPXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwudGFibGVTaW5nbGVDZWxscyt4bWxcIjogXCJUT0RPXCIsXG5cblx0LyogU2xpY2VyICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnNsaWNlclwiOiBcIlRPRE9cIixcblx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuc2xpY2VyQ2FjaGVcIjogXCJUT0RPXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnNsaWNlcit4bWxcIjogXCJUT0RPXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnNsaWNlckNhY2hlK3htbFwiOiBcIlRPRE9cIixcblxuXHQvKiBTb3J0IE1hcCAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC53c1NvcnRNYXBcIjogXCJUT0RPXCIsXG5cblx0LyogVGFibGUgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwudGFibGVcIjogXCJUT0RPXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwudGFibGUreG1sXCI6IFwiVE9ET1wiLFxuXG5cdC8qIFRoZW1lcyAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC50aGVtZSt4bWxcIjogXCJ0aGVtZXNcIixcblxuXHQvKiBUaGVtZSBPdmVycmlkZSAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC50aGVtZU92ZXJyaWRlK3htbFwiOiBcIlRPRE9cIixcblxuXHQvKiBUaW1lbGluZSAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5UaW1lbGluZSt4bWxcIjogXCJUT0RPXCIsIC8qIHZlcmlmeSAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5UaW1lbGluZUNhY2hlK3htbFwiOiBcIlRPRE9cIiwgLyogdmVyaWZ5ICovXG5cblx0LyogVkJBICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLW9mZmljZS52YmFQcm9qZWN0XCI6IFwidmJhXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLW9mZmljZS52YmFQcm9qZWN0U2lnbmF0dXJlXCI6IFwidmJhXCIsXG5cblx0LyogVm9sYXRpbGUgRGVwZW5kZW5jaWVzICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLW9mZmljZS52b2xhdGlsZURlcGVuZGVuY2llc1wiOiBcIlRPRE9cIixcblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC52b2xhdGlsZURlcGVuZGVuY2llcyt4bWxcIjogXCJUT0RPXCIsXG5cblx0LyogQ29udHJvbCBQcm9wZXJ0aWVzICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLmNvbnRyb2xwcm9wZXJ0aWVzK3htbFwiOiBcIlRPRE9cIixcblxuXHQvKiBEYXRhIE1vZGVsICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50Lm1vZGVsK2RhdGFcIjogXCJUT0RPXCIsXG5cblx0LyogU3VydmV5ICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLlN1cnZleSt4bWxcIjogXCJUT0RPXCIsXG5cblx0LyogRHJhd2luZyAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5kcmF3aW5nK3htbFwiOiBcImRyYXdpbmdzXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmRyYXdpbmdtbC5jaGFydHNoYXBlcyt4bWxcIjogXCJUT0RPXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmRyYXdpbmdtbC5kaWFncmFtQ29sb3JzK3htbFwiOiBcIlRPRE9cIixcblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuZHJhd2luZ21sLmRpYWdyYW1EYXRhK3htbFwiOiBcIlRPRE9cIixcblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuZHJhd2luZ21sLmRpYWdyYW1MYXlvdXQreG1sXCI6IFwiVE9ET1wiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5kcmF3aW5nbWwuZGlhZ3JhbVN0eWxlK3htbFwiOiBcIlRPRE9cIixcblxuXHQvKiBWTUwgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQudm1sRHJhd2luZ1wiOiBcIlRPRE9cIixcblxuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1wYWNrYWdlLnJlbGF0aW9uc2hpcHMreG1sXCI6IFwicmVsc1wiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5vbGVPYmplY3RcIjogXCJUT0RPXCIsXG5cblx0LyogSW1hZ2UgKi9cblx0XCJpbWFnZS9wbmdcIjogXCJUT0RPXCIsXG5cblx0XCJzaGVldFwiOiBcImpzXCJcbn0pO1xuXG52YXIgQ1RfTElTVCA9IChmdW5jdGlvbigpe1xuXHR2YXIgbyA9IHtcblx0XHR3b3JrYm9va3M6IHtcblx0XHRcdHhsc3g6IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hlZXQubWFpbit4bWxcIixcblx0XHRcdHhsc206IFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnNoZWV0Lm1hY3JvRW5hYmxlZC5tYWluK3htbFwiLFxuXHRcdFx0eGxzYjogXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuc2hlZXQuYmluYXJ5Lm1hY3JvRW5hYmxlZC5tYWluXCIsXG5cdFx0XHR4bGFtOiBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5hZGRpbi5tYWNyb0VuYWJsZWQubWFpbit4bWxcIixcblx0XHRcdHhsdHg6IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwudGVtcGxhdGUubWFpbit4bWxcIlxuXHRcdH0sXG5cdFx0c3RyczogeyAvKiBTaGFyZWQgU3RyaW5ncyAqL1xuXHRcdFx0eGxzeDogXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGFyZWRTdHJpbmdzK3htbFwiLFxuXHRcdFx0eGxzYjogXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuc2hhcmVkU3RyaW5nc1wiXG5cdFx0fSxcblx0XHRjb21tZW50czogeyAvKiBDb21tZW50cyAqL1xuXHRcdFx0eGxzeDogXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5jb21tZW50cyt4bWxcIixcblx0XHRcdHhsc2I6IFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLmNvbW1lbnRzXCJcblx0XHR9LFxuXHRcdHNoZWV0czogeyAvKiBXb3Jrc2hlZXQgKi9cblx0XHRcdHhsc3g6IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwud29ya3NoZWV0K3htbFwiLFxuXHRcdFx0eGxzYjogXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwud29ya3NoZWV0XCJcblx0XHR9LFxuXHRcdGNoYXJ0czogeyAvKiBDaGFydHNoZWV0ICovXG5cdFx0XHR4bHN4OiBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLmNoYXJ0c2hlZXQreG1sXCIsXG5cdFx0XHR4bHNiOiBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5jaGFydHNoZWV0XCJcblx0XHR9LFxuXHRcdGRpYWxvZ3M6IHsgLyogRGlhbG9nc2hlZXQgKi9cblx0XHRcdHhsc3g6IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuZGlhbG9nc2hlZXQreG1sXCIsXG5cdFx0XHR4bHNiOiBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5kaWFsb2dzaGVldFwiXG5cdFx0fSxcblx0XHRtYWNyb3M6IHsgLyogTWFjcm9zaGVldCAoRXhjZWwgNC4wIE1hY3JvcykgKi9cblx0XHRcdHhsc3g6IFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLm1hY3Jvc2hlZXQreG1sXCIsXG5cdFx0XHR4bHNiOiBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5tYWNyb3NoZWV0XCJcblx0XHR9LFxuXHRcdHN0eWxlczogeyAvKiBTdHlsZXMgKi9cblx0XHRcdHhsc3g6IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc3R5bGVzK3htbFwiLFxuXHRcdFx0eGxzYjogXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuc3R5bGVzXCJcblx0XHR9XG5cdH07XG5cdGtleXMobykuZm9yRWFjaChmdW5jdGlvbihrKSB7IFtcInhsc21cIiwgXCJ4bGFtXCJdLmZvckVhY2goZnVuY3Rpb24odikgeyBpZighb1trXVt2XSkgb1trXVt2XSA9IG9ba10ueGxzeDsgfSk7IH0pO1xuXHRrZXlzKG8pLmZvckVhY2goZnVuY3Rpb24oayl7IGtleXMob1trXSkuZm9yRWFjaChmdW5jdGlvbih2KSB7IGN0MnR5cGVbb1trXVt2XV0gPSBrOyB9KTsgfSk7XG5cdHJldHVybiBvO1xufSkoKTtcblxudmFyIHR5cGUyY3QvKntbc3RyaW5nXTpBcnJheTxzdHJpbmc+fSovID0gZXZlcnRfYXJyKGN0MnR5cGUpO1xuXG5YTUxOUy5DVCA9ICdodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvcGFja2FnZS8yMDA2L2NvbnRlbnQtdHlwZXMnO1xuXG5mdW5jdGlvbiBuZXdfY3QoKSB7XG5cdHJldHVybiAoe1xuXHRcdHdvcmtib29rczpbXSwgc2hlZXRzOltdLCBjaGFydHM6W10sIGRpYWxvZ3M6W10sIG1hY3JvczpbXSxcblx0XHRyZWxzOltdLCBzdHJzOltdLCBjb21tZW50czpbXSwgbGlua3M6W10sXG5cdFx0Y29yZXByb3BzOltdLCBleHRwcm9wczpbXSwgY3VzdHByb3BzOltdLCB0aGVtZXM6W10sIHN0eWxlczpbXSxcblx0XHRjYWxjY2hhaW5zOltdLCB2YmE6IFtdLCBkcmF3aW5nczogW10sXG5cdFx0VE9ETzpbXSwgeG1sbnM6IFwiXCIgfSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlX2N0KGRhdGEpIHtcblx0dmFyIGN0ID0gbmV3X2N0KCk7XG5cdGlmKCFkYXRhIHx8ICFkYXRhLm1hdGNoKSByZXR1cm4gY3Q7XG5cdHZhciBjdGV4dCA9IHt9O1xuXHQoZGF0YS5tYXRjaCh0YWdyZWdleCl8fFtdKS5mb3JFYWNoKGZ1bmN0aW9uKHgpIHtcblx0XHR2YXIgeSA9IHBhcnNleG1sdGFnKHgpO1xuXHRcdHN3aXRjaCh5WzBdLnJlcGxhY2UobnNyZWdleCxcIjxcIikpIHtcblx0XHRcdGNhc2UgJzw/eG1sJzogYnJlYWs7XG5cdFx0XHRjYXNlICc8VHlwZXMnOiBjdC54bWxucyA9IHlbJ3htbG5zJyArICh5WzBdLm1hdGNoKC88KFxcdyspOi8pfHxbXCJcIixcIlwiXSlbMV0gXTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8RGVmYXVsdCc6IGN0ZXh0W3kuRXh0ZW5zaW9uXSA9IHkuQ29udGVudFR5cGU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPE92ZXJyaWRlJzpcblx0XHRcdFx0aWYoY3RbY3QydHlwZVt5LkNvbnRlbnRUeXBlXV0gIT09IHVuZGVmaW5lZCkgY3RbY3QydHlwZVt5LkNvbnRlbnRUeXBlXV0ucHVzaCh5LlBhcnROYW1lKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9KTtcblx0aWYoY3QueG1sbnMgIT09IFhNTE5TLkNUKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIE5hbWVzcGFjZTogXCIgKyBjdC54bWxucyk7XG5cdGN0LmNhbGNjaGFpbiA9IGN0LmNhbGNjaGFpbnMubGVuZ3RoID4gMCA/IGN0LmNhbGNjaGFpbnNbMF0gOiBcIlwiO1xuXHRjdC5zc3QgPSBjdC5zdHJzLmxlbmd0aCA+IDAgPyBjdC5zdHJzWzBdIDogXCJcIjtcblx0Y3Quc3R5bGUgPSBjdC5zdHlsZXMubGVuZ3RoID4gMCA/IGN0LnN0eWxlc1swXSA6IFwiXCI7XG5cdGN0LmRlZmF1bHRzID0gY3RleHQ7XG5cdGRlbGV0ZSBjdC5jYWxjY2hhaW5zO1xuXHRyZXR1cm4gY3Q7XG59XG5cbnZhciBDVFlQRV9YTUxfUk9PVCA9IHdyaXRleHRhZygnVHlwZXMnLCBudWxsLCB7XG5cdCd4bWxucyc6IFhNTE5TLkNULFxuXHQneG1sbnM6eHNkJzogWE1MTlMueHNkLFxuXHQneG1sbnM6eHNpJzogWE1MTlMueHNpXG59KTtcblxudmFyIENUWVBFX0RFRkFVTFRTID0gW1xuXHRbJ3htbCcsICdhcHBsaWNhdGlvbi94bWwnXSxcblx0WydiaW4nLCAnYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnNoZWV0LmJpbmFyeS5tYWNyb0VuYWJsZWQubWFpbiddLFxuXHRbJ3ZtbCcsICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQudm1sRHJhd2luZyddLFxuXHRbJ2RhdGEnLCAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50Lm1vZGVsK2RhdGEnXSxcblx0LyogZnJvbSB0ZXN0IGZpbGVzICovXG5cdFsnYm1wJywgJ2ltYWdlL2JtcCddLFxuXHRbJ3BuZycsICdpbWFnZS9wbmcnXSxcblx0WydnaWYnLCAnaW1hZ2UvZ2lmJ10sXG5cdFsnZW1mJywgJ2ltYWdlL3gtZW1mJ10sXG5cdFsnd21mJywgJ2ltYWdlL3gtd21mJ10sXG5cdFsnanBnJywgJ2ltYWdlL2pwZWcnXSwgWydqcGVnJywgJ2ltYWdlL2pwZWcnXSxcblx0Wyd0aWYnLCAnaW1hZ2UvdGlmZiddLCBbJ3RpZmYnLCAnaW1hZ2UvdGlmZiddLFxuXHRbJ3BkZicsICdhcHBsaWNhdGlvbi9wZGYnXSxcblx0WydyZWxzJywgdHlwZTJjdC5yZWxzWzBdXVxuXS5tYXAoZnVuY3Rpb24oeCkge1xuXHRyZXR1cm4gd3JpdGV4dGFnKCdEZWZhdWx0JywgbnVsbCwgeydFeHRlbnNpb24nOnhbMF0sICdDb250ZW50VHlwZSc6IHhbMV19KTtcbn0pO1xuXG5mdW5jdGlvbiB3cml0ZV9jdChjdCwgb3B0cykge1xuXHR2YXIgbyA9IFtdLCB2O1xuXHRvW28ubGVuZ3RoXSA9IChYTUxfSEVBREVSKTtcblx0b1tvLmxlbmd0aF0gPSAoQ1RZUEVfWE1MX1JPT1QpO1xuXHRvID0gby5jb25jYXQoQ1RZUEVfREVGQVVMVFMpO1xuXG5cdC8qIG9ubHkgd3JpdGUgZmlyc3QgaW5zdGFuY2UgKi9cblx0dmFyIGYxID0gZnVuY3Rpb24odykge1xuXHRcdGlmKGN0W3ddICYmIGN0W3ddLmxlbmd0aCA+IDApIHtcblx0XHRcdHYgPSBjdFt3XVswXTtcblx0XHRcdG9bby5sZW5ndGhdID0gKHdyaXRleHRhZygnT3ZlcnJpZGUnLCBudWxsLCB7XG5cdFx0XHRcdCdQYXJ0TmFtZSc6ICh2WzBdID09ICcvJyA/IFwiXCI6XCIvXCIpICsgdixcblx0XHRcdFx0J0NvbnRlbnRUeXBlJzogQ1RfTElTVFt3XVtvcHRzLmJvb2tUeXBlIHx8ICd4bHN4J11cblx0XHRcdH0pKTtcblx0XHR9XG5cdH07XG5cblx0LyogYm9vayB0eXBlLXNwZWNpZmljICovXG5cdHZhciBmMiA9IGZ1bmN0aW9uKHcpIHtcblx0XHQoY3Rbd118fFtdKS5mb3JFYWNoKGZ1bmN0aW9uKHYpIHtcblx0XHRcdG9bby5sZW5ndGhdID0gKHdyaXRleHRhZygnT3ZlcnJpZGUnLCBudWxsLCB7XG5cdFx0XHRcdCdQYXJ0TmFtZSc6ICh2WzBdID09ICcvJyA/IFwiXCI6XCIvXCIpICsgdixcblx0XHRcdFx0J0NvbnRlbnRUeXBlJzogQ1RfTElTVFt3XVtvcHRzLmJvb2tUeXBlIHx8ICd4bHN4J11cblx0XHRcdH0pKTtcblx0XHR9KTtcblx0fTtcblxuXHQvKiBzdGFuZGFyZCB0eXBlICovXG5cdHZhciBmMyA9IGZ1bmN0aW9uKHQpIHtcblx0XHQoY3RbdF18fFtdKS5mb3JFYWNoKGZ1bmN0aW9uKHYpIHtcblx0XHRcdG9bby5sZW5ndGhdID0gKHdyaXRleHRhZygnT3ZlcnJpZGUnLCBudWxsLCB7XG5cdFx0XHRcdCdQYXJ0TmFtZSc6ICh2WzBdID09ICcvJyA/IFwiXCI6XCIvXCIpICsgdixcblx0XHRcdFx0J0NvbnRlbnRUeXBlJzogdHlwZTJjdFt0XVswXVxuXHRcdFx0fSkpO1xuXHRcdH0pO1xuXHR9O1xuXG5cdGYxKCd3b3JrYm9va3MnKTtcblx0ZjIoJ3NoZWV0cycpO1xuXHRmMignY2hhcnRzJyk7XG5cdGYzKCd0aGVtZXMnKTtcblx0WydzdHJzJywgJ3N0eWxlcyddLmZvckVhY2goZjEpO1xuXHRbJ2NvcmVwcm9wcycsICdleHRwcm9wcycsICdjdXN0cHJvcHMnXS5mb3JFYWNoKGYzKTtcblx0ZjMoJ3ZiYScpO1xuXHRmMygnY29tbWVudHMnKTtcblx0ZjMoJ2RyYXdpbmdzJyk7XG5cdGlmKG8ubGVuZ3RoPjIpeyBvW28ubGVuZ3RoXSA9ICgnPC9UeXBlcz4nKTsgb1sxXT1vWzFdLnJlcGxhY2UoXCIvPlwiLFwiPlwiKTsgfVxuXHRyZXR1cm4gby5qb2luKFwiXCIpO1xufVxuLyogOS4zIFJlbGF0aW9uc2hpcHMgKi9cbnZhciBSRUxTID0gKHtcblx0V0I6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9vZmZpY2VEb2N1bWVudFwiLFxuXHRTSEVFVDogXCJodHRwOi8vc2hlZXRqcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL29mZmljZURvY3VtZW50XCIsXG5cdEhMSU5LOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvaHlwZXJsaW5rXCIsXG5cdFZNTDogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL3ZtbERyYXdpbmdcIixcblx0WFBBVEg6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9leHRlcm5hbExpbmtQYXRoXCIsXG5cdFhNSVNTOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlLzIwMDYvcmVsYXRpb25zaGlwcy94bEV4dGVybmFsTGlua1BhdGgveGxQYXRoTWlzc2luZ1wiLFxuXHRYTElOSzogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2V4dGVybmFsTGlua1wiLFxuXHRDWE1MOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvY3VzdG9tWG1sXCIsXG5cdENYTUxQOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvY3VzdG9tWG1sUHJvcHNcIixcblx0VkJBOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlLzIwMDYvcmVsYXRpb25zaGlwcy92YmFQcm9qZWN0XCJcbn0pO1xuXG4vKiA5LjMuMyBSZXByZXNlbnRpbmcgUmVsYXRpb25zaGlwcyAqL1xuZnVuY3Rpb24gZ2V0X3JlbHNfcGF0aChmaWxlKSB7XG5cdHZhciBuID0gZmlsZS5sYXN0SW5kZXhPZihcIi9cIik7XG5cdHJldHVybiBmaWxlLnNsaWNlKDAsbisxKSArICdfcmVscy8nICsgZmlsZS5zbGljZShuKzEpICsgXCIucmVsc1wiO1xufVxuXG5mdW5jdGlvbiBwYXJzZV9yZWxzKGRhdGEsIGN1cnJlbnRGaWxlUGF0aCkge1xuXHR2YXIgcmVscyA9IHtcIiFpZFwiOnt9fTtcblx0aWYgKCFkYXRhKSByZXR1cm4gcmVscztcblx0aWYgKGN1cnJlbnRGaWxlUGF0aC5jaGFyQXQoMCkgIT09ICcvJykge1xuXHRcdGN1cnJlbnRGaWxlUGF0aCA9ICcvJytjdXJyZW50RmlsZVBhdGg7XG5cdH1cblx0dmFyIGhhc2ggPSB7fTtcblxuXHQoZGF0YS5tYXRjaCh0YWdyZWdleCl8fFtdKS5mb3JFYWNoKGZ1bmN0aW9uKHgpIHtcblx0XHR2YXIgeSA9IHBhcnNleG1sdGFnKHgpO1xuXHRcdC8qIDkuMy4yLjIgT1BDX1JlbGF0aW9uc2hpcHMgKi9cblx0XHRpZiAoeVswXSA9PT0gJzxSZWxhdGlvbnNoaXAnKSB7XG5cdFx0XHR2YXIgcmVsID0ge307IHJlbC5UeXBlID0geS5UeXBlOyByZWwuVGFyZ2V0ID0geS5UYXJnZXQ7IHJlbC5JZCA9IHkuSWQ7IHJlbC5UYXJnZXRNb2RlID0geS5UYXJnZXRNb2RlO1xuXHRcdFx0dmFyIGNhbm9uaWN0YXJnZXQgPSB5LlRhcmdldE1vZGUgPT09ICdFeHRlcm5hbCcgPyB5LlRhcmdldCA6IHJlc29sdmVfcGF0aCh5LlRhcmdldCwgY3VycmVudEZpbGVQYXRoKTtcblx0XHRcdHJlbHNbY2Fub25pY3RhcmdldF0gPSByZWw7XG5cdFx0XHRoYXNoW3kuSWRdID0gcmVsO1xuXHRcdH1cblx0fSk7XG5cdHJlbHNbXCIhaWRcIl0gPSBoYXNoO1xuXHRyZXR1cm4gcmVscztcbn1cblxuWE1MTlMuUkVMUyA9ICdodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvcGFja2FnZS8yMDA2L3JlbGF0aW9uc2hpcHMnO1xuXG52YXIgUkVMU19ST09UID0gd3JpdGV4dGFnKCdSZWxhdGlvbnNoaXBzJywgbnVsbCwge1xuXHQvLyd4bWxuczpuczAnOiBYTUxOUy5SRUxTLFxuXHQneG1sbnMnOiBYTUxOUy5SRUxTXG59KTtcblxuLyogVE9ETyAqL1xuZnVuY3Rpb24gd3JpdGVfcmVscyhyZWxzKSB7XG5cdHZhciBvID0gW1hNTF9IRUFERVIsIFJFTFNfUk9PVF07XG5cdGtleXMocmVsc1snIWlkJ10pLmZvckVhY2goZnVuY3Rpb24ocmlkKSB7XG5cdFx0b1tvLmxlbmd0aF0gPSAod3JpdGV4dGFnKCdSZWxhdGlvbnNoaXAnLCBudWxsLCByZWxzWychaWQnXVtyaWRdKSk7XG5cdH0pO1xuXHRpZihvLmxlbmd0aD4yKXsgb1tvLmxlbmd0aF0gPSAoJzwvUmVsYXRpb25zaGlwcz4nKTsgb1sxXT1vWzFdLnJlcGxhY2UoXCIvPlwiLFwiPlwiKTsgfVxuXHRyZXR1cm4gby5qb2luKFwiXCIpO1xufVxuXG52YXIgUkVMU19FWFRFUk4gPSBbUkVMUy5ITElOSywgUkVMUy5YUEFUSCwgUkVMUy5YTUlTU107XG5mdW5jdGlvbiBhZGRfcmVscyhyZWxzLCBySWQsIGYsIHR5cGUsIHJlbG9iaiwgdGFyZ2V0bW9kZSkge1xuXHRpZighcmVsb2JqKSByZWxvYmogPSB7fTtcblx0aWYoIXJlbHNbJyFpZCddKSByZWxzWychaWQnXSA9IHt9O1xuXHRpZihySWQgPCAwKSBmb3IocklkID0gMTsgcmVsc1snIWlkJ11bJ3JJZCcgKyBySWRdOyArK3JJZCl7LyogZW1wdHkgKi99XG5cdHJlbG9iai5JZCA9ICdySWQnICsgcklkO1xuXHRyZWxvYmouVHlwZSA9IHR5cGU7XG5cdHJlbG9iai5UYXJnZXQgPSBmO1xuXHRpZih0YXJnZXRtb2RlKSByZWxvYmouVGFyZ2V0TW9kZSA9IHRhcmdldG1vZGU7XG5cdGVsc2UgaWYoUkVMU19FWFRFUk4uaW5kZXhPZihyZWxvYmouVHlwZSkgPiAtMSkgcmVsb2JqLlRhcmdldE1vZGUgPSBcIkV4dGVybmFsXCI7XG5cdGlmKHJlbHNbJyFpZCddW3JlbG9iai5JZF0pIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCByZXdyaXRlIHJJZCBcIiArIHJJZCk7XG5cdHJlbHNbJyFpZCddW3JlbG9iai5JZF0gPSByZWxvYmo7XG5cdHJlbHNbKCcvJyArIHJlbG9iai5UYXJnZXQpLnJlcGxhY2UoXCIvL1wiLFwiL1wiKV0gPSByZWxvYmo7XG5cdHJldHVybiBySWQ7XG59XG4vKiBPcGVuIERvY3VtZW50IEZvcm1hdCBmb3IgT2ZmaWNlIEFwcGxpY2F0aW9ucyAoT3BlbkRvY3VtZW50KSBWZXJzaW9uIDEuMiAqL1xuLyogUGFydCAzIFNlY3Rpb24gNCBNYW5pZmVzdCBGaWxlICovXG52YXIgQ1RfT0RTID0gXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnNwcmVhZHNoZWV0XCI7XG5mdW5jdGlvbiBwYXJzZV9tYW5pZmVzdChkLCBvcHRzKSB7XG5cdHZhciBzdHIgPSB4bG1sX25vcm1hbGl6ZShkKTtcblx0dmFyIFJuO1xuXHR2YXIgRkV0YWc7XG5cdHdoaWxlKChSbiA9IHhsbWxyZWdleC5leGVjKHN0cikpKSBzd2l0Y2goUm5bM10pIHtcblx0XHRjYXNlICdtYW5pZmVzdCc6IGJyZWFrOyAvLyA0LjIgPG1hbmlmZXN0Om1hbmlmZXN0PlxuXHRcdGNhc2UgJ2ZpbGUtZW50cnknOiAvLyA0LjMgPG1hbmlmZXN0OmZpbGUtZW50cnk+XG5cdFx0XHRGRXRhZyA9IHBhcnNleG1sdGFnKFJuWzBdLCBmYWxzZSk7XG5cdFx0XHRpZihGRXRhZy5wYXRoID09ICcvJyAmJiBGRXRhZy50eXBlICE9PSBDVF9PRFMpIHRocm93IG5ldyBFcnJvcihcIlRoaXMgT3BlbkRvY3VtZW50IGlzIG5vdCBhIHNwcmVhZHNoZWV0XCIpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnZW5jcnlwdGlvbi1kYXRhJzogLy8gNC40IDxtYW5pZmVzdDplbmNyeXB0aW9uLWRhdGE+XG5cdFx0Y2FzZSAnYWxnb3JpdGhtJzogLy8gNC41IDxtYW5pZmVzdDphbGdvcml0aG0+XG5cdFx0Y2FzZSAnc3RhcnQta2V5LWdlbmVyYXRpb24nOiAvLyA0LjYgPG1hbmlmZXN0OnN0YXJ0LWtleS1nZW5lcmF0aW9uPlxuXHRcdGNhc2UgJ2tleS1kZXJpdmF0aW9uJzogLy8gNC43IDxtYW5pZmVzdDprZXktZGVyaXZhdGlvbj5cblx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIE9EUyBFbmNyeXB0aW9uXCIpO1xuXHRcdGRlZmF1bHQ6IGlmKG9wdHMgJiYgb3B0cy5XVEYpIHRocm93IFJuO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHdyaXRlX21hbmlmZXN0KG1hbmlmZXN0KSB7XG5cdHZhciBvID0gW1hNTF9IRUFERVJdO1xuXHRvLnB1c2goJzxtYW5pZmVzdDptYW5pZmVzdCB4bWxuczptYW5pZmVzdD1cInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6bWFuaWZlc3Q6MS4wXCIgbWFuaWZlc3Q6dmVyc2lvbj1cIjEuMlwiPlxcbicpO1xuXHRvLnB1c2goJyAgPG1hbmlmZXN0OmZpbGUtZW50cnkgbWFuaWZlc3Q6ZnVsbC1wYXRoPVwiL1wiIG1hbmlmZXN0OnZlcnNpb249XCIxLjJcIiBtYW5pZmVzdDptZWRpYS10eXBlPVwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5zcHJlYWRzaGVldFwiLz5cXG4nKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IG1hbmlmZXN0Lmxlbmd0aDsgKytpKSBvLnB1c2goJyAgPG1hbmlmZXN0OmZpbGUtZW50cnkgbWFuaWZlc3Q6ZnVsbC1wYXRoPVwiJyArIG1hbmlmZXN0W2ldWzBdICsgJ1wiIG1hbmlmZXN0Om1lZGlhLXR5cGU9XCInICsgbWFuaWZlc3RbaV1bMV0gKyAnXCIvPlxcbicpO1xuXHRvLnB1c2goJzwvbWFuaWZlc3Q6bWFuaWZlc3Q+Jyk7XG5cdHJldHVybiBvLmpvaW4oXCJcIik7XG59XG5cbi8qIFBhcnQgMyBTZWN0aW9uIDYgTWV0YWRhdGEgTWFuaWZlc3QgRmlsZSAqL1xuZnVuY3Rpb24gd3JpdGVfcmRmX3R5cGUoZmlsZSwgcmVzLCB0YWcpIHtcblx0cmV0dXJuIFtcblx0XHQnICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD1cIicgKyBmaWxlICsgJ1wiPlxcbicsXG5cdFx0JyAgICA8cmRmOnR5cGUgcmRmOnJlc291cmNlPVwiaHR0cDovL2RvY3Mub2FzaXMtb3Blbi5vcmcvbnMvb2ZmaWNlLzEuMi9tZXRhLycgKyAodGFnIHx8IFwib2RmXCIpICsgJyMnICsgcmVzICsgJ1wiLz5cXG4nLFxuXHRcdCcgIDwvcmRmOkRlc2NyaXB0aW9uPlxcbidcblx0XS5qb2luKFwiXCIpO1xufVxuZnVuY3Rpb24gd3JpdGVfcmRmX2hhcyhiYXNlLCBmaWxlKSB7XG5cdHJldHVybiBbXG5cdFx0JyAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9XCInICsgYmFzZSArICdcIj5cXG4nLFxuXHRcdCcgICAgPG5zMDpoYXNQYXJ0IHhtbG5zOm5zMD1cImh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL25zL29mZmljZS8xLjIvbWV0YS9wa2cjXCIgcmRmOnJlc291cmNlPVwiJyArIGZpbGUgKyAnXCIvPlxcbicsXG5cdFx0JyAgPC9yZGY6RGVzY3JpcHRpb24+XFxuJ1xuXHRdLmpvaW4oXCJcIik7XG59XG5mdW5jdGlvbiB3cml0ZV9yZGYocmRmKSB7XG5cdHZhciBvID0gW1hNTF9IRUFERVJdO1xuXHRvLnB1c2goJzxyZGY6UkRGIHhtbG5zOnJkZj1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyNcIj5cXG4nKTtcblx0Zm9yKHZhciBpID0gMDsgaSAhPSByZGYubGVuZ3RoOyArK2kpIHtcblx0XHRvLnB1c2god3JpdGVfcmRmX3R5cGUocmRmW2ldWzBdLCByZGZbaV1bMV0pKTtcblx0XHRvLnB1c2god3JpdGVfcmRmX2hhcyhcIlwiLHJkZltpXVswXSkpO1xuXHR9XG5cdG8ucHVzaCh3cml0ZV9yZGZfdHlwZShcIlwiLFwiRG9jdW1lbnRcIiwgXCJwa2dcIikpO1xuXHRvLnB1c2goJzwvcmRmOlJERj4nKTtcblx0cmV0dXJuIG8uam9pbihcIlwiKTtcbn1cbi8qIFRPRE86IHB1bGwgcHJvcGVydGllcyAqL1xudmFyIHdyaXRlX21ldGFfb2RzID0gKGZ1bmN0aW9uKCkge1xuXHR2YXIgcGF5bG9hZCA9ICc8b2ZmaWNlOmRvY3VtZW50LW1ldGEgeG1sbnM6b2ZmaWNlPVwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpvZmZpY2U6MS4wXCIgeG1sbnM6bWV0YT1cInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6bWV0YToxLjBcIiB4bWxuczpkYz1cImh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgb2ZmaWNlOnZlcnNpb249XCIxLjJcIj48b2ZmaWNlOm1ldGE+PG1ldGE6Z2VuZXJhdG9yPlNoZWV0JyArICdKUyAnICsgWExTWC52ZXJzaW9uICsgJzwvbWV0YTpnZW5lcmF0b3I+PC9vZmZpY2U6bWV0YT48L29mZmljZTpkb2N1bWVudC1tZXRhPic7XG5cdHJldHVybiBmdW5jdGlvbiB3bW8oKSB7XG5cdFx0cmV0dXJuIHBheWxvYWQ7XG5cdH07XG59KSgpO1xuXG4vKiBFQ01BLTM3NiBQYXJ0IElJIDExLjEgQ29yZSBQcm9wZXJ0aWVzIFBhcnQgKi9cbi8qIFtNUy1PU0hBUkVEXSAyLjMuMy4yLlsxLTJdLjEgKFBJRFNJL1BJRERTSSkgKi9cbnZhciBDT1JFX1BST1BTID0gW1xuXHRbXCJjcDpjYXRlZ29yeVwiLCBcIkNhdGVnb3J5XCJdLFxuXHRbXCJjcDpjb250ZW50U3RhdHVzXCIsIFwiQ29udGVudFN0YXR1c1wiXSxcblx0W1wiY3A6a2V5d29yZHNcIiwgXCJLZXl3b3Jkc1wiXSxcblx0W1wiY3A6bGFzdE1vZGlmaWVkQnlcIiwgXCJMYXN0QXV0aG9yXCJdLFxuXHRbXCJjcDpsYXN0UHJpbnRlZFwiLCBcIkxhc3RQcmludGVkXCJdLFxuXHRbXCJjcDpyZXZpc2lvblwiLCBcIlJldk51bWJlclwiXSxcblx0W1wiY3A6dmVyc2lvblwiLCBcIlZlcnNpb25cIl0sXG5cdFtcImRjOmNyZWF0b3JcIiwgXCJBdXRob3JcIl0sXG5cdFtcImRjOmRlc2NyaXB0aW9uXCIsIFwiQ29tbWVudHNcIl0sXG5cdFtcImRjOmlkZW50aWZpZXJcIiwgXCJJZGVudGlmaWVyXCJdLFxuXHRbXCJkYzpsYW5ndWFnZVwiLCBcIkxhbmd1YWdlXCJdLFxuXHRbXCJkYzpzdWJqZWN0XCIsIFwiU3ViamVjdFwiXSxcblx0W1wiZGM6dGl0bGVcIiwgXCJUaXRsZVwiXSxcblx0W1wiZGN0ZXJtczpjcmVhdGVkXCIsIFwiQ3JlYXRlZERhdGVcIiwgJ2RhdGUnXSxcblx0W1wiZGN0ZXJtczptb2RpZmllZFwiLCBcIk1vZGlmaWVkRGF0ZVwiLCAnZGF0ZSddXG5dO1xuXG5YTUxOUy5DT1JFX1BST1BTID0gXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvcGFja2FnZS8yMDA2L21ldGFkYXRhL2NvcmUtcHJvcGVydGllc1wiO1xuUkVMUy5DT1JFX1BST1BTICA9ICdodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvcGFja2FnZS8yMDA2L3JlbGF0aW9uc2hpcHMvbWV0YWRhdGEvY29yZS1wcm9wZXJ0aWVzJztcblxudmFyIENPUkVfUFJPUFNfUkVHRVggPSAoZnVuY3Rpb24oKSB7XG5cdHZhciByID0gbmV3IEFycmF5KENPUkVfUFJPUFMubGVuZ3RoKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IENPUkVfUFJPUFMubGVuZ3RoOyArK2kpIHtcblx0XHR2YXIgZiA9IENPUkVfUFJPUFNbaV07XG5cdFx0dmFyIGcgPSBcIig/OlwiKyBmWzBdLnNsaWNlKDAsZlswXS5pbmRleE9mKFwiOlwiKSkgK1wiOilcIisgZlswXS5zbGljZShmWzBdLmluZGV4T2YoXCI6XCIpKzEpO1xuXHRcdHJbaV0gPSBuZXcgUmVnRXhwKFwiPFwiICsgZyArIFwiW14+XSo+KFtcXFxcc1xcXFxTXSo/KTxcXC9cIiArIGcgKyBcIj5cIik7XG5cdH1cblx0cmV0dXJuIHI7XG59KSgpO1xuXG5mdW5jdGlvbiBwYXJzZV9jb3JlX3Byb3BzKGRhdGEpIHtcblx0dmFyIHAgPSB7fTtcblx0ZGF0YSA9IHV0ZjhyZWFkKGRhdGEpO1xuXG5cdGZvcih2YXIgaSA9IDA7IGkgPCBDT1JFX1BST1BTLmxlbmd0aDsgKytpKSB7XG5cdFx0dmFyIGYgPSBDT1JFX1BST1BTW2ldLCBjdXIgPSBkYXRhLm1hdGNoKENPUkVfUFJPUFNfUkVHRVhbaV0pO1xuXHRcdGlmKGN1ciAhPSBudWxsICYmIGN1ci5sZW5ndGggPiAwKSBwW2ZbMV1dID0gdW5lc2NhcGV4bWwoY3VyWzFdKTtcblx0XHRpZihmWzJdID09PSAnZGF0ZScgJiYgcFtmWzFdXSkgcFtmWzFdXSA9IHBhcnNlRGF0ZShwW2ZbMV1dKTtcblx0fVxuXG5cdHJldHVybiBwO1xufVxuXG52YXIgQ09SRV9QUk9QU19YTUxfUk9PVCA9IHdyaXRleHRhZygnY3A6Y29yZVByb3BlcnRpZXMnLCBudWxsLCB7XG5cdC8vJ3htbG5zJzogWE1MTlMuQ09SRV9QUk9QUyxcblx0J3htbG5zOmNwJzogWE1MTlMuQ09SRV9QUk9QUyxcblx0J3htbG5zOmRjJzogWE1MTlMuZGMsXG5cdCd4bWxuczpkY3Rlcm1zJzogWE1MTlMuZGN0ZXJtcyxcblx0J3htbG5zOmRjbWl0eXBlJzogWE1MTlMuZGNtaXR5cGUsXG5cdCd4bWxuczp4c2knOiBYTUxOUy54c2lcbn0pO1xuXG5mdW5jdGlvbiBjcF9kb2l0KGYsIGcsIGgsIG8sIHApIHtcblx0aWYocFtmXSAhPSBudWxsIHx8IGcgPT0gbnVsbCB8fCBnID09PSBcIlwiKSByZXR1cm47XG5cdHBbZl0gPSBnO1xuXHRnID0gZXNjYXBleG1sKGcpO1xuXHRvW28ubGVuZ3RoXSA9IChoID8gd3JpdGV4dGFnKGYsZyxoKSA6IHdyaXRldGFnKGYsZykpO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9jb3JlX3Byb3BzKGNwLCBfb3B0cykge1xuXHR2YXIgb3B0cyA9IF9vcHRzIHx8IHt9O1xuXHR2YXIgbyA9IFtYTUxfSEVBREVSLCBDT1JFX1BST1BTX1hNTF9ST09UXSwgcCA9IHt9O1xuXHRpZighY3AgJiYgIW9wdHMuUHJvcHMpIHJldHVybiBvLmpvaW4oXCJcIik7XG5cblx0aWYoY3ApIHtcblx0XHRpZihjcC5DcmVhdGVkRGF0ZSAhPSBudWxsKSBjcF9kb2l0KFwiZGN0ZXJtczpjcmVhdGVkXCIsIHR5cGVvZiBjcC5DcmVhdGVkRGF0ZSA9PT0gXCJzdHJpbmdcIiA/IGNwLkNyZWF0ZWREYXRlIDogd3JpdGVfdzNjZHRmKGNwLkNyZWF0ZWREYXRlLCBvcHRzLldURiksIHtcInhzaTp0eXBlXCI6XCJkY3Rlcm1zOlczQ0RURlwifSwgbywgcCk7XG5cdFx0aWYoY3AuTW9kaWZpZWREYXRlICE9IG51bGwpIGNwX2RvaXQoXCJkY3Rlcm1zOm1vZGlmaWVkXCIsIHR5cGVvZiBjcC5Nb2RpZmllZERhdGUgPT09IFwic3RyaW5nXCIgPyBjcC5Nb2RpZmllZERhdGUgOiB3cml0ZV93M2NkdGYoY3AuTW9kaWZpZWREYXRlLCBvcHRzLldURiksIHtcInhzaTp0eXBlXCI6XCJkY3Rlcm1zOlczQ0RURlwifSwgbywgcCk7XG5cdH1cblxuXHRmb3IodmFyIGkgPSAwOyBpICE9IENPUkVfUFJPUFMubGVuZ3RoOyArK2kpIHtcblx0XHR2YXIgZiA9IENPUkVfUFJPUFNbaV07XG5cdFx0dmFyIHYgPSBvcHRzLlByb3BzICYmIG9wdHMuUHJvcHNbZlsxXV0gIT0gbnVsbCA/IG9wdHMuUHJvcHNbZlsxXV0gOiBjcCA/IGNwW2ZbMV1dIDogbnVsbDtcblx0XHRpZih2ID09PSB0cnVlKSB2ID0gXCIxXCI7XG5cdFx0ZWxzZSBpZih2ID09PSBmYWxzZSkgdiA9IFwiMFwiO1xuXHRcdGVsc2UgaWYodHlwZW9mIHYgPT0gXCJudW1iZXJcIikgdiA9IFN0cmluZyh2KTtcblx0XHRpZih2ICE9IG51bGwpIGNwX2RvaXQoZlswXSwgdiwgbnVsbCwgbywgcCk7XG5cdH1cblx0aWYoby5sZW5ndGg+Mil7IG9bby5sZW5ndGhdID0gKCc8L2NwOmNvcmVQcm9wZXJ0aWVzPicpOyBvWzFdPW9bMV0ucmVwbGFjZShcIi8+XCIsXCI+XCIpOyB9XG5cdHJldHVybiBvLmpvaW4oXCJcIik7XG59XG4vKiAxNS4yLjEyLjMgRXh0ZW5kZWQgRmlsZSBQcm9wZXJ0aWVzIFBhcnQgKi9cbi8qIFtNUy1PU0hBUkVEXSAyLjMuMy4yLlsxLTJdLjEgKFBJRFNJL1BJRERTSSkgKi9cbnZhciBFWFRfUFJPUFMgPSBbXG5cdFtcIkFwcGxpY2F0aW9uXCIsIFwiQXBwbGljYXRpb25cIiwgXCJzdHJpbmdcIl0sXG5cdFtcIkFwcFZlcnNpb25cIiwgXCJBcHBWZXJzaW9uXCIsIFwic3RyaW5nXCJdLFxuXHRbXCJDb21wYW55XCIsIFwiQ29tcGFueVwiLCBcInN0cmluZ1wiXSxcblx0W1wiRG9jU2VjdXJpdHlcIiwgXCJEb2NTZWN1cml0eVwiLCBcInN0cmluZ1wiXSxcblx0W1wiTWFuYWdlclwiLCBcIk1hbmFnZXJcIiwgXCJzdHJpbmdcIl0sXG5cdFtcIkh5cGVybGlua3NDaGFuZ2VkXCIsIFwiSHlwZXJsaW5rc0NoYW5nZWRcIiwgXCJib29sXCJdLFxuXHRbXCJTaGFyZWREb2NcIiwgXCJTaGFyZWREb2NcIiwgXCJib29sXCJdLFxuXHRbXCJMaW5rc1VwVG9EYXRlXCIsIFwiTGlua3NVcFRvRGF0ZVwiLCBcImJvb2xcIl0sXG5cdFtcIlNjYWxlQ3JvcFwiLCBcIlNjYWxlQ3JvcFwiLCBcImJvb2xcIl0sXG5cdFtcIkhlYWRpbmdQYWlyc1wiLCBcIkhlYWRpbmdQYWlyc1wiLCBcInJhd1wiXSxcblx0W1wiVGl0bGVzT2ZQYXJ0c1wiLCBcIlRpdGxlc09mUGFydHNcIiwgXCJyYXdcIl1cbl07XG5cblhNTE5TLkVYVF9QUk9QUyA9IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvZXh0ZW5kZWQtcHJvcGVydGllc1wiO1xuUkVMUy5FWFRfUFJPUFMgID0gJ2h0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvZXh0ZW5kZWQtcHJvcGVydGllcyc7XG5cbnZhciBQc2V1ZG9Qcm9wc1BhaXJzID0gW1xuXHRcIldvcmtzaGVldHNcIiwgIFwiU2hlZXROYW1lc1wiLFxuXHRcIk5hbWVkUmFuZ2VzXCIsIFwiRGVmaW5lZE5hbWVzXCIsXG5cdFwiQ2hhcnRzaGVldHNcIiwgXCJDaGFydE5hbWVzXCJcbl07XG5mdW5jdGlvbiBsb2FkX3Byb3BzX3BhaXJzKEhQLCBUT1AsIHByb3BzLCBvcHRzKSB7XG5cdHZhciB2ID0gW107XG5cdGlmKHR5cGVvZiBIUCA9PSBcInN0cmluZ1wiKSB2ID0gcGFyc2VWZWN0b3IoSFAsIG9wdHMpO1xuXHRlbHNlIGZvcih2YXIgaiA9IDA7IGogPCBIUC5sZW5ndGg7ICsraikgdiA9IHYuY29uY2F0KEhQW2pdLm1hcChmdW5jdGlvbihocCkgeyByZXR1cm4ge3Y6aHB9OyB9KSk7XG5cdHZhciBwYXJ0cyA9ICh0eXBlb2YgVE9QID09IFwic3RyaW5nXCIpID8gcGFyc2VWZWN0b3IoVE9QLCBvcHRzKS5tYXAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgudjsgfSkgOiBUT1A7XG5cdHZhciBpZHggPSAwLCBsZW4gPSAwO1xuXHRpZihwYXJ0cy5sZW5ndGggPiAwKSBmb3IodmFyIGkgPSAwOyBpICE9PSB2Lmxlbmd0aDsgaSArPSAyKSB7XG5cdFx0bGVuID0gKyh2W2krMV0udik7XG5cdFx0c3dpdGNoKHZbaV0udikge1xuXHRcdFx0Y2FzZSBcIldvcmtzaGVldHNcIjpcblx0XHRcdGNhc2UgXCLlt6XkvZzooahcIjpcblx0XHRcdGNhc2UgXCLQm9C40YHRgtGLXCI6XG5cdFx0XHRjYXNlIFwi2KPZiNix2KfZgiDYp9mE2LnZhdmEXCI6XG5cdFx0XHRjYXNlIFwi44Ov44O844Kv44K344O844OIXCI6XG5cdFx0XHRjYXNlIFwi15LXnNeZ15XXoNeV16og16LXkdeV15PXlFwiOlxuXHRcdFx0Y2FzZSBcIkFyYmVpdHNibMOkdHRlclwiOlxuXHRcdFx0Y2FzZSBcIsOHYWzEscWfbWEgU2F5ZmFsYXLEsVwiOlxuXHRcdFx0Y2FzZSBcIkZldWlsbGVzIGRlIGNhbGN1bFwiOlxuXHRcdFx0Y2FzZSBcIkZvZ2xpIGRpIGxhdm9yb1wiOlxuXHRcdFx0Y2FzZSBcIkZvbGhhcyBkZSBjw6FsY3Vsb1wiOlxuXHRcdFx0Y2FzZSBcIlBsYW5pbGhhc1wiOlxuXHRcdFx0Y2FzZSBcIlJlZ25lYXJrXCI6XG5cdFx0XHRjYXNlIFwiSG9qYXMgZGUgY8OhbGN1bG9cIjpcblx0XHRcdGNhc2UgXCJXZXJrYmxhZGVuXCI6XG5cdFx0XHRcdHByb3BzLldvcmtzaGVldHMgPSBsZW47XG5cdFx0XHRcdHByb3BzLlNoZWV0TmFtZXMgPSBwYXJ0cy5zbGljZShpZHgsIGlkeCArIGxlbik7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiTmFtZWQgUmFuZ2VzXCI6XG5cdFx0XHRjYXNlIFwiUmFuZ29zIGNvbiBub21icmVcIjpcblx0XHRcdGNhc2UgXCLlkI3liY3ku5jjgY3kuIDopqdcIjpcblx0XHRcdGNhc2UgXCJCZW5hbm50ZSBCZXJlaWNoZVwiOlxuXHRcdFx0Y2FzZSBcIk5hdm5naXZuZSBvbXLDpWRlclwiOlxuXHRcdFx0XHRwcm9wcy5OYW1lZFJhbmdlcyA9IGxlbjtcblx0XHRcdFx0cHJvcHMuRGVmaW5lZE5hbWVzID0gcGFydHMuc2xpY2UoaWR4LCBpZHggKyBsZW4pO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcIkNoYXJ0c1wiOlxuXHRcdFx0Y2FzZSBcIkRpYWdyYW1tZVwiOlxuXHRcdFx0XHRwcm9wcy5DaGFydHNoZWV0cyA9IGxlbjtcblx0XHRcdFx0cHJvcHMuQ2hhcnROYW1lcyA9IHBhcnRzLnNsaWNlKGlkeCwgaWR4ICsgbGVuKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdGlkeCArPSBsZW47XG5cdH1cbn1cblxuZnVuY3Rpb24gcGFyc2VfZXh0X3Byb3BzKGRhdGEsIHAsIG9wdHMpIHtcblx0dmFyIHEgPSB7fTsgaWYoIXApIHAgPSB7fTtcblx0ZGF0YSA9IHV0ZjhyZWFkKGRhdGEpO1xuXG5cdEVYVF9QUk9QUy5mb3JFYWNoKGZ1bmN0aW9uKGYpIHtcblx0XHR2YXIgeG1sID0gKGRhdGEubWF0Y2gobWF0Y2h0YWcoZlswXSkpfHxbXSlbMV07XG5cdFx0c3dpdGNoKGZbMl0pIHtcblx0XHRcdGNhc2UgXCJzdHJpbmdcIjogaWYoeG1sKSBwW2ZbMV1dID0gdW5lc2NhcGV4bWwoeG1sKTsgYnJlYWs7XG5cdFx0XHRjYXNlIFwiYm9vbFwiOiBwW2ZbMV1dID0geG1sID09PSBcInRydWVcIjsgYnJlYWs7XG5cdFx0XHRjYXNlIFwicmF3XCI6XG5cdFx0XHRcdHZhciBjdXIgPSBkYXRhLm1hdGNoKG5ldyBSZWdFeHAoXCI8XCIgKyBmWzBdICsgXCJbXj5dKj4oW1xcXFxzXFxcXFNdKj8pPFxcL1wiICsgZlswXSArIFwiPlwiKSk7XG5cdFx0XHRcdGlmKGN1ciAmJiBjdXIubGVuZ3RoID4gMCkgcVtmWzFdXSA9IGN1clsxXTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9KTtcblxuXHRpZihxLkhlYWRpbmdQYWlycyAmJiBxLlRpdGxlc09mUGFydHMpIGxvYWRfcHJvcHNfcGFpcnMocS5IZWFkaW5nUGFpcnMsIHEuVGl0bGVzT2ZQYXJ0cywgcCwgb3B0cyk7XG5cblx0cmV0dXJuIHA7XG59XG5cbnZhciBFWFRfUFJPUFNfWE1MX1JPT1QgPSB3cml0ZXh0YWcoJ1Byb3BlcnRpZXMnLCBudWxsLCB7XG5cdCd4bWxucyc6IFhNTE5TLkVYVF9QUk9QUyxcblx0J3htbG5zOnZ0JzogWE1MTlMudnRcbn0pO1xuXG5mdW5jdGlvbiB3cml0ZV9leHRfcHJvcHMoY3ApIHtcblx0dmFyIG8gPSBbXSwgVyA9IHdyaXRleHRhZztcblx0aWYoIWNwKSBjcCA9IHt9O1xuXHRjcC5BcHBsaWNhdGlvbiA9IFwiU2hlZXRKU1wiO1xuXHRvW28ubGVuZ3RoXSA9IChYTUxfSEVBREVSKTtcblx0b1tvLmxlbmd0aF0gPSAoRVhUX1BST1BTX1hNTF9ST09UKTtcblxuXHRFWFRfUFJPUFMuZm9yRWFjaChmdW5jdGlvbihmKSB7XG5cdFx0aWYoY3BbZlsxXV0gPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXHRcdHZhciB2O1xuXHRcdHN3aXRjaChmWzJdKSB7XG5cdFx0XHRjYXNlICdzdHJpbmcnOiB2ID0gZXNjYXBleG1sKFN0cmluZyhjcFtmWzFdXSkpOyBicmVhaztcblx0XHRcdGNhc2UgJ2Jvb2wnOiB2ID0gY3BbZlsxXV0gPyAndHJ1ZScgOiAnZmFsc2UnOyBicmVhaztcblx0XHR9XG5cdFx0aWYodiAhPT0gdW5kZWZpbmVkKSBvW28ubGVuZ3RoXSA9IChXKGZbMF0sIHYpKTtcblx0fSk7XG5cblx0LyogVE9ETzogSGVhZGluZ1BhaXJzLCBUaXRsZXNPZlBhcnRzICovXG5cdG9bby5sZW5ndGhdID0gKFcoJ0hlYWRpbmdQYWlycycsIFcoJ3Z0OnZlY3RvcicsIFcoJ3Z0OnZhcmlhbnQnLCAnPHZ0Omxwc3RyPldvcmtzaGVldHM8L3Z0Omxwc3RyPicpK1coJ3Z0OnZhcmlhbnQnLCBXKCd2dDppNCcsIFN0cmluZyhjcC5Xb3Jrc2hlZXRzKSkpLCB7c2l6ZToyLCBiYXNlVHlwZTpcInZhcmlhbnRcIn0pKSk7XG5cdG9bby5sZW5ndGhdID0gKFcoJ1RpdGxlc09mUGFydHMnLCBXKCd2dDp2ZWN0b3InLCBjcC5TaGVldE5hbWVzLm1hcChmdW5jdGlvbihzKSB7IHJldHVybiBcIjx2dDpscHN0cj5cIiArIGVzY2FwZXhtbChzKSArIFwiPC92dDpscHN0cj5cIjsgfSkuam9pbihcIlwiKSwge3NpemU6IGNwLldvcmtzaGVldHMsIGJhc2VUeXBlOlwibHBzdHJcIn0pKSk7XG5cdGlmKG8ubGVuZ3RoPjIpeyBvW28ubGVuZ3RoXSA9ICgnPC9Qcm9wZXJ0aWVzPicpOyBvWzFdPW9bMV0ucmVwbGFjZShcIi8+XCIsXCI+XCIpOyB9XG5cdHJldHVybiBvLmpvaW4oXCJcIik7XG59XG4vKiAxNS4yLjEyLjIgQ3VzdG9tIEZpbGUgUHJvcGVydGllcyBQYXJ0ICovXG5YTUxOUy5DVVNUX1BST1BTID0gXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9jdXN0b20tcHJvcGVydGllc1wiO1xuUkVMUy5DVVNUX1BST1BTICA9ICdodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2N1c3RvbS1wcm9wZXJ0aWVzJztcblxudmFyIGN1c3RyZWdleCA9IC88W14+XSs+W148XSovZztcbmZ1bmN0aW9uIHBhcnNlX2N1c3RfcHJvcHMoZGF0YSwgb3B0cykge1xuXHR2YXIgcCA9IHt9LCBuYW1lID0gXCJcIjtcblx0dmFyIG0gPSBkYXRhLm1hdGNoKGN1c3RyZWdleCk7XG5cdGlmKG0pIGZvcih2YXIgaSA9IDA7IGkgIT0gbS5sZW5ndGg7ICsraSkge1xuXHRcdHZhciB4ID0gbVtpXSwgeSA9IHBhcnNleG1sdGFnKHgpO1xuXHRcdHN3aXRjaCh5WzBdKSB7XG5cdFx0XHRjYXNlICc8P3htbCc6IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPFByb3BlcnRpZXMnOiBicmVhaztcblx0XHRcdGNhc2UgJzxwcm9wZXJ0eSc6IG5hbWUgPSB1bmVzY2FwZXhtbCh5Lm5hbWUpOyBicmVhaztcblx0XHRcdGNhc2UgJzwvcHJvcGVydHk+JzogbmFtZSA9IG51bGw7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogaWYgKHguaW5kZXhPZignPHZ0OicpID09PSAwKSB7XG5cdFx0XHRcdHZhciB0b2tzID0geC5zcGxpdCgnPicpO1xuXHRcdFx0XHR2YXIgdHlwZSA9IHRva3NbMF0uc2xpY2UoNCksIHRleHQgPSB0b2tzWzFdO1xuXHRcdFx0XHQvKiAyMi40LjIuMzIgKENUX1ZhcmlhbnQpLiBPbWl0IHRoZSBiaW5hcnkgdHlwZXMgZnJvbSAyMi40IChWYXJpYW50IFR5cGVzKSAqL1xuXHRcdFx0XHRzd2l0Y2godHlwZSkge1xuXHRcdFx0XHRcdGNhc2UgJ2xwc3RyJzogY2FzZSAnYnN0cic6IGNhc2UgJ2xwd3N0cic6XG5cdFx0XHRcdFx0XHRwW25hbWVdID0gdW5lc2NhcGV4bWwodGV4dCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdib29sJzpcblx0XHRcdFx0XHRcdHBbbmFtZV0gPSBwYXJzZXhtbGJvb2wodGV4dCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdpMSc6IGNhc2UgJ2kyJzogY2FzZSAnaTQnOiBjYXNlICdpOCc6IGNhc2UgJ2ludCc6IGNhc2UgJ3VpbnQnOlxuXHRcdFx0XHRcdFx0cFtuYW1lXSA9IHBhcnNlSW50KHRleHQsIDEwKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3I0JzogY2FzZSAncjgnOiBjYXNlICdkZWNpbWFsJzpcblx0XHRcdFx0XHRcdHBbbmFtZV0gPSBwYXJzZUZsb2F0KHRleHQpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZmlsZXRpbWUnOiBjYXNlICdkYXRlJzpcblx0XHRcdFx0XHRcdHBbbmFtZV0gPSBwYXJzZURhdGUodGV4dCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdjeSc6IGNhc2UgJ2Vycm9yJzpcblx0XHRcdFx0XHRcdHBbbmFtZV0gPSB1bmVzY2FwZXhtbCh0ZXh0KTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRpZih0eXBlLnNsaWNlKC0xKSA9PSAnLycpIGJyZWFrO1xuXHRcdFx0XHRcdFx0aWYob3B0cy5XVEYgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSBjb25zb2xlLndhcm4oJ1VuZXhwZWN0ZWQnLCB4LCB0eXBlLCB0b2tzKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmKHguc2xpY2UoMCwyKSA9PT0gXCI8L1wiKSB7LyogZW1wdHkgKi9cblx0XHRcdH0gZWxzZSBpZihvcHRzLldURikgdGhyb3cgbmV3IEVycm9yKHgpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcDtcbn1cblxudmFyIENVU1RfUFJPUFNfWE1MX1JPT1QgPSB3cml0ZXh0YWcoJ1Byb3BlcnRpZXMnLCBudWxsLCB7XG5cdCd4bWxucyc6IFhNTE5TLkNVU1RfUFJPUFMsXG5cdCd4bWxuczp2dCc6IFhNTE5TLnZ0XG59KTtcblxuZnVuY3Rpb24gd3JpdGVfY3VzdF9wcm9wcyhjcCkge1xuXHR2YXIgbyA9IFtYTUxfSEVBREVSLCBDVVNUX1BST1BTX1hNTF9ST09UXTtcblx0aWYoIWNwKSByZXR1cm4gby5qb2luKFwiXCIpO1xuXHR2YXIgcGlkID0gMTtcblx0a2V5cyhjcCkuZm9yRWFjaChmdW5jdGlvbiBjdXN0cHJvcChrKSB7ICsrcGlkO1xuXHRcdG9bby5sZW5ndGhdID0gKHdyaXRleHRhZygncHJvcGVydHknLCB3cml0ZV92dChjcFtrXSwgdHJ1ZSksIHtcblx0XHRcdCdmbXRpZCc6ICd7RDVDREQ1MDUtMkU5Qy0xMDFCLTkzOTctMDgwMDJCMkNGOUFFfScsXG5cdFx0XHQncGlkJzogcGlkLFxuXHRcdFx0J25hbWUnOiBlc2NhcGV4bWwoaylcblx0XHR9KSk7XG5cdH0pO1xuXHRpZihvLmxlbmd0aD4yKXsgb1tvLmxlbmd0aF0gPSAnPC9Qcm9wZXJ0aWVzPic7IG9bMV09b1sxXS5yZXBsYWNlKFwiLz5cIixcIj5cIik7IH1cblx0cmV0dXJuIG8uam9pbihcIlwiKTtcbn1cbi8qIENvbW1vbiBOYW1lIC0+IFhMTUwgTmFtZSAqL1xudmFyIFhMTUxEb2NQcm9wc01hcCA9IHtcblx0VGl0bGU6ICdUaXRsZScsXG5cdFN1YmplY3Q6ICdTdWJqZWN0Jyxcblx0QXV0aG9yOiAnQXV0aG9yJyxcblx0S2V5d29yZHM6ICdLZXl3b3JkcycsXG5cdENvbW1lbnRzOiAnRGVzY3JpcHRpb24nLFxuXHRMYXN0QXV0aG9yOiAnTGFzdEF1dGhvcicsXG5cdFJldk51bWJlcjogJ1JldmlzaW9uJyxcblx0QXBwbGljYXRpb246ICdBcHBOYW1lJyxcblx0LyogVG90YWxUaW1lOiAnVG90YWxUaW1lJywgKi9cblx0TGFzdFByaW50ZWQ6ICdMYXN0UHJpbnRlZCcsXG5cdENyZWF0ZWREYXRlOiAnQ3JlYXRlZCcsXG5cdE1vZGlmaWVkRGF0ZTogJ0xhc3RTYXZlZCcsXG5cdC8qIFBhZ2VzICovXG5cdC8qIFdvcmRzICovXG5cdC8qIENoYXJhY3RlcnMgKi9cblx0Q2F0ZWdvcnk6ICdDYXRlZ29yeScsXG5cdC8qIFByZXNlbnRhdGlvbkZvcm1hdCAqL1xuXHRNYW5hZ2VyOiAnTWFuYWdlcicsXG5cdENvbXBhbnk6ICdDb21wYW55Jyxcblx0LyogR3VpZCAqL1xuXHQvKiBIeXBlcmxpbmtCYXNlICovXG5cdC8qIEJ5dGVzICovXG5cdC8qIExpbmVzICovXG5cdC8qIFBhcmFncmFwaHMgKi9cblx0LyogQ2hhcmFjdGVyc1dpdGhTcGFjZXMgKi9cblx0QXBwVmVyc2lvbjogJ1ZlcnNpb24nLFxuXG5cdENvbnRlbnRTdGF0dXM6ICdDb250ZW50U3RhdHVzJywgLyogTk9URTogbWlzc2luZyBmcm9tIHNjaGVtYSAqL1xuXHRJZGVudGlmaWVyOiAnSWRlbnRpZmllcicsIC8qIE5PVEU6IG1pc3NpbmcgZnJvbSBzY2hlbWEgKi9cblx0TGFuZ3VhZ2U6ICdMYW5ndWFnZScgLyogTk9URTogbWlzc2luZyBmcm9tIHNjaGVtYSAqL1xufTtcbnZhciBldmVydF9YTE1MRFBNID0gZXZlcnQoWExNTERvY1Byb3BzTWFwKTtcblxuZnVuY3Rpb24geGxtbF9zZXRfcHJvcChQcm9wcywgdGFnLCB2YWwpIHtcblx0dGFnID0gZXZlcnRfWExNTERQTVt0YWddIHx8IHRhZztcblx0UHJvcHNbdGFnXSA9IHZhbDtcbn1cblxuZnVuY3Rpb24geGxtbF93cml0ZV9kb2Nwcm9wcyhQcm9wcywgb3B0cykge1xuXHR2YXIgbyA9IFtdO1xuXHRrZXlzKFhMTUxEb2NQcm9wc01hcCkubWFwKGZ1bmN0aW9uKG0pIHtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgQ09SRV9QUk9QUy5sZW5ndGg7ICsraSkgaWYoQ09SRV9QUk9QU1tpXVsxXSA9PSBtKSByZXR1cm4gQ09SRV9QUk9QU1tpXTtcblx0XHRmb3IoaSA9IDA7IGkgPCBFWFRfUFJPUFMubGVuZ3RoOyArK2kpIGlmKEVYVF9QUk9QU1tpXVsxXSA9PSBtKSByZXR1cm4gRVhUX1BST1BTW2ldO1xuXHRcdHRocm93IG07XG5cdH0pLmZvckVhY2goZnVuY3Rpb24ocCkge1xuXHRcdGlmKFByb3BzW3BbMV1dID09IG51bGwpIHJldHVybjtcblx0XHR2YXIgbSA9IG9wdHMgJiYgb3B0cy5Qcm9wcyAmJiBvcHRzLlByb3BzW3BbMV1dICE9IG51bGwgPyBvcHRzLlByb3BzW3BbMV1dIDogUHJvcHNbcFsxXV07XG5cdFx0c3dpdGNoKHBbMl0pIHtcblx0XHRcdGNhc2UgJ2RhdGUnOiBtID0gbmV3IERhdGUobSkudG9JU09TdHJpbmcoKS5yZXBsYWNlKC9cXC5cXGQqWi8sXCJaXCIpOyBicmVhaztcblx0XHR9XG5cdFx0aWYodHlwZW9mIG0gPT0gJ251bWJlcicpIG0gPSBTdHJpbmcobSk7XG5cdFx0ZWxzZSBpZihtID09PSB0cnVlIHx8IG0gPT09IGZhbHNlKSB7IG0gPSBtID8gXCIxXCIgOiBcIjBcIjsgfVxuXHRcdGVsc2UgaWYobSBpbnN0YW5jZW9mIERhdGUpIG0gPSBuZXcgRGF0ZShtKS50b0lTT1N0cmluZygpLnJlcGxhY2UoL1xcLlxcZCpaLyxcIlwiKTtcblx0XHRvLnB1c2god3JpdGV0YWcoWExNTERvY1Byb3BzTWFwW3BbMV1dIHx8IHBbMV0sIG0pKTtcblx0fSk7XG5cdHJldHVybiB3cml0ZXh0YWcoJ0RvY3VtZW50UHJvcGVydGllcycsIG8uam9pbihcIlwiKSwge3htbG5zOlhMTUxOUy5vIH0pO1xufVxuZnVuY3Rpb24geGxtbF93cml0ZV9jdXN0cHJvcHMoUHJvcHMsIEN1c3Rwcm9wcykge1xuXHR2YXIgQkxBQ0tMSVNUID0gW1wiV29ya3NoZWV0c1wiLFwiU2hlZXROYW1lc1wiXTtcblx0dmFyIFQgPSAnQ3VzdG9tRG9jdW1lbnRQcm9wZXJ0aWVzJztcblx0dmFyIG8gPSBbXTtcblx0aWYoUHJvcHMpIGtleXMoUHJvcHMpLmZvckVhY2goZnVuY3Rpb24oaykge1xuaWYoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChQcm9wcywgaykpIHJldHVybjtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgQ09SRV9QUk9QUy5sZW5ndGg7ICsraSkgaWYoayA9PSBDT1JFX1BST1BTW2ldWzFdKSByZXR1cm47XG5cdFx0Zm9yKGkgPSAwOyBpIDwgRVhUX1BST1BTLmxlbmd0aDsgKytpKSBpZihrID09IEVYVF9QUk9QU1tpXVsxXSkgcmV0dXJuO1xuXHRcdGZvcihpID0gMDsgaSA8IEJMQUNLTElTVC5sZW5ndGg7ICsraSkgaWYoayA9PSBCTEFDS0xJU1RbaV0pIHJldHVybjtcblxuXHRcdHZhciBtID0gUHJvcHNba107XG5cdFx0dmFyIHQgPSBcInN0cmluZ1wiO1xuXHRcdGlmKHR5cGVvZiBtID09ICdudW1iZXInKSB7IHQgPSBcImZsb2F0XCI7IG0gPSBTdHJpbmcobSk7IH1cblx0XHRlbHNlIGlmKG0gPT09IHRydWUgfHwgbSA9PT0gZmFsc2UpIHsgdCA9IFwiYm9vbGVhblwiOyBtID0gbSA/IFwiMVwiIDogXCIwXCI7IH1cblx0XHRlbHNlIG0gPSBTdHJpbmcobSk7XG5cdFx0by5wdXNoKHdyaXRleHRhZyhlc2NhcGV4bWx0YWcoayksIG0sIHtcImR0OmR0XCI6dH0pKTtcblx0fSk7XG5cdGlmKEN1c3Rwcm9wcykga2V5cyhDdXN0cHJvcHMpLmZvckVhY2goZnVuY3Rpb24oaykge1xuaWYoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChDdXN0cHJvcHMsIGspKSByZXR1cm47XG5cdFx0aWYoUHJvcHMgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFByb3BzLCBrKSkgcmV0dXJuO1xuXHRcdHZhciBtID0gQ3VzdHByb3BzW2tdO1xuXHRcdHZhciB0ID0gXCJzdHJpbmdcIjtcblx0XHRpZih0eXBlb2YgbSA9PSAnbnVtYmVyJykgeyB0ID0gXCJmbG9hdFwiOyBtID0gU3RyaW5nKG0pOyB9XG5cdFx0ZWxzZSBpZihtID09PSB0cnVlIHx8IG0gPT09IGZhbHNlKSB7IHQgPSBcImJvb2xlYW5cIjsgbSA9IG0gPyBcIjFcIiA6IFwiMFwiOyB9XG5cdFx0ZWxzZSBpZihtIGluc3RhbmNlb2YgRGF0ZSkgeyB0ID0gXCJkYXRlVGltZS50elwiOyBtID0gbS50b0lTT1N0cmluZygpOyB9XG5cdFx0ZWxzZSBtID0gU3RyaW5nKG0pO1xuXHRcdG8ucHVzaCh3cml0ZXh0YWcoZXNjYXBleG1sdGFnKGspLCBtLCB7XCJkdDpkdFwiOnR9KSk7XG5cdH0pO1xuXHRyZXR1cm4gJzwnICsgVCArICcgeG1sbnM9XCInICsgWExNTE5TLm8gKyAnXCI+JyArIG8uam9pbihcIlwiKSArICc8LycgKyBUICsgJz4nO1xufVxuLyogW01TLURUWVBdIDIuMy4zIEZJTEVUSU1FICovXG4vKiBbTVMtT0xFRFNdIDIuMS4zIEZJTEVUSU1FIChQYWNrZXQgVmVyc2lvbikgKi9cbi8qIFtNUy1PTEVQU10gMi44IEZJTEVUSU1FIChQYWNrZXQgVmVyc2lvbikgKi9cbmZ1bmN0aW9uIHBhcnNlX0ZJTEVUSU1FKGJsb2IpIHtcblx0dmFyIGR3TG93RGF0ZVRpbWUgPSBibG9iLnJlYWRfc2hpZnQoNCksIGR3SGlnaERhdGVUaW1lID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRyZXR1cm4gbmV3IERhdGUoKChkd0hpZ2hEYXRlVGltZS8xZTcqTWF0aC5wb3coMiwzMikgKyBkd0xvd0RhdGVUaW1lLzFlNykgLSAxMTY0NDQ3MzYwMCkqMTAwMCkudG9JU09TdHJpbmcoKS5yZXBsYWNlKC9cXC4wMDAvLFwiXCIpO1xufVxuZnVuY3Rpb24gd3JpdGVfRklMRVRJTUUodGltZSkge1xuXHR2YXIgZGF0ZSA9ICh0eXBlb2YgdGltZSA9PSBcInN0cmluZ1wiKSA/IG5ldyBEYXRlKERhdGUucGFyc2UodGltZSkpIDogdGltZTtcblx0dmFyIHQgPSBkYXRlLmdldFRpbWUoKSAvIDEwMDAgKyAxMTY0NDQ3MzYwMDtcblx0dmFyIGwgPSB0ICUgTWF0aC5wb3coMiwzMiksIGggPSAodCAtIGwpIC8gTWF0aC5wb3coMiwzMik7XG5cdGwgKj0gMWU3OyBoICo9IDFlNztcblx0dmFyIHcgPSAobCAvIE1hdGgucG93KDIsMzIpKSB8IDA7XG5cdGlmKHcgPiAwKSB7IGwgPSBsICUgTWF0aC5wb3coMiwzMik7IGggKz0gdzsgfVxuXHR2YXIgbyA9IG5ld19idWYoOCk7IG8ud3JpdGVfc2hpZnQoNCwgbCk7IG8ud3JpdGVfc2hpZnQoNCwgaCk7IHJldHVybiBvO1xufVxuXG4vKiBbTVMtT1NIQVJFRF0gMi4zLjMuMS40IExwc3RyICovXG5mdW5jdGlvbiBwYXJzZV9scHN0cihibG9iLCB0eXBlLCBwYWQpIHtcblx0dmFyIHN0YXJ0ID0gYmxvYi5sO1xuXHR2YXIgc3RyID0gYmxvYi5yZWFkX3NoaWZ0KDAsICdscHN0ci1jcCcpO1xuXHRpZihwYWQpIHdoaWxlKChibG9iLmwgLSBzdGFydCkgJiAzKSArK2Jsb2IubDtcblx0cmV0dXJuIHN0cjtcbn1cblxuLyogW01TLU9TSEFSRURdIDIuMy4zLjEuNiBMcHdzdHIgKi9cbmZ1bmN0aW9uIHBhcnNlX2xwd3N0cihibG9iLCB0eXBlLCBwYWQpIHtcblx0dmFyIHN0ciA9IGJsb2IucmVhZF9zaGlmdCgwLCAnbHB3c3RyJyk7XG5cdGlmKHBhZCkgYmxvYi5sICs9ICg0IC0gKChzdHIubGVuZ3RoKzEpICYgMykpICYgMztcblx0cmV0dXJuIHN0cjtcbn1cblxuXG4vKiBbTVMtT1NIQVJFRF0gMi4zLjMuMS4xMSBWdFN0cmluZyAqL1xuLyogW01TLU9TSEFSRURdIDIuMy4zLjEuMTIgVnRVbmFsaWduZWRTdHJpbmcgKi9cbmZ1bmN0aW9uIHBhcnNlX1Z0U3RyaW5nQmFzZShibG9iLCBzdHJpbmdUeXBlLCBwYWQpIHtcblx0aWYoc3RyaW5nVHlwZSA9PT0gMHgxRiAvKlZUX0xQV1NUUiovKSByZXR1cm4gcGFyc2VfbHB3c3RyKGJsb2IpO1xuXHRyZXR1cm4gcGFyc2VfbHBzdHIoYmxvYiwgc3RyaW5nVHlwZSwgcGFkKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VfVnRTdHJpbmcoYmxvYiwgdCwgcGFkKSB7IHJldHVybiBwYXJzZV9WdFN0cmluZ0Jhc2UoYmxvYiwgdCwgcGFkID09PSBmYWxzZSA/IDA6IDQpOyB9XG5mdW5jdGlvbiBwYXJzZV9WdFVuYWxpZ25lZFN0cmluZyhibG9iLCB0KSB7IGlmKCF0KSB0aHJvdyBuZXcgRXJyb3IoXCJWdFVuYWxpZ25lZFN0cmluZyBtdXN0IGhhdmUgcG9zaXRpdmUgbGVuZ3RoXCIpOyByZXR1cm4gcGFyc2VfVnRTdHJpbmdCYXNlKGJsb2IsIHQsIDApOyB9XG5cbi8qIFtNUy1PU0hBUkVEXSAyLjMuMy4xLjcgVnRWZWNMcHdzdHJWYWx1ZSAqL1xuZnVuY3Rpb24gcGFyc2VfVnRWZWNMcHdzdHJWYWx1ZShibG9iKSB7XG5cdHZhciBsZW5ndGggPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdHZhciByZXQgPSBbXTtcblx0Zm9yKHZhciBpID0gMDsgaSAhPSBsZW5ndGg7ICsraSkge1xuXHRcdHZhciBzdGFydCA9IGJsb2IubDtcblx0XHRyZXRbaV0gPSBibG9iLnJlYWRfc2hpZnQoMCwgJ2xwd3N0cicpLnJlcGxhY2UoY2hyMCwnJyk7XG5cdFx0aWYoKGJsb2IubCAtIHN0YXJ0KSAmIDB4MDIpIGJsb2IubCArPSAyO1xuXHR9XG5cdHJldHVybiByZXQ7XG59XG5cbi8qIFtNUy1PU0hBUkVEXSAyLjMuMy4xLjkgVnRWZWNVbmFsaWduZWRMcHN0clZhbHVlICovXG5mdW5jdGlvbiBwYXJzZV9WdFZlY1VuYWxpZ25lZExwc3RyVmFsdWUoYmxvYikge1xuXHR2YXIgbGVuZ3RoID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgcmV0ID0gW107XG5cdGZvcih2YXIgaSA9IDA7IGkgIT0gbGVuZ3RoOyArK2kpIHJldFtpXSA9IGJsb2IucmVhZF9zaGlmdCgwLCAnbHBzdHItY3AnKS5yZXBsYWNlKGNocjAsJycpO1xuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8qIFtNUy1PU0hBUkVEXSAyLjMuMy4xLjEzIFZ0SGVhZGluZ1BhaXIgKi9cbmZ1bmN0aW9uIHBhcnNlX1Z0SGVhZGluZ1BhaXIoYmxvYikge1xuXHR2YXIgc3RhcnQgPSBibG9iLmw7XG5cdHZhciBoZWFkaW5nU3RyaW5nID0gcGFyc2VfVHlwZWRQcm9wZXJ0eVZhbHVlKGJsb2IsIFZUX1VTVFIpO1xuXHRpZihibG9iW2Jsb2IubF0gPT0gMHgwMCAmJiBibG9iW2Jsb2IubCsxXSA9PSAweDAwICYmICgoYmxvYi5sIC0gc3RhcnQpICYgMHgwMikpIGJsb2IubCArPSAyO1xuXHR2YXIgaGVhZGVyUGFydHMgPSBwYXJzZV9UeXBlZFByb3BlcnR5VmFsdWUoYmxvYiwgVlRfSTQpO1xuXHRyZXR1cm4gW2hlYWRpbmdTdHJpbmcsIGhlYWRlclBhcnRzXTtcbn1cblxuLyogW01TLU9TSEFSRURdIDIuMy4zLjEuMTQgVnRWZWNIZWFkaW5nUGFpclZhbHVlICovXG5mdW5jdGlvbiBwYXJzZV9WdFZlY0hlYWRpbmdQYWlyVmFsdWUoYmxvYikge1xuXHR2YXIgY0VsZW1lbnRzID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgb3V0ID0gW107XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBjRWxlbWVudHMgLyAyOyArK2kpIG91dC5wdXNoKHBhcnNlX1Z0SGVhZGluZ1BhaXIoYmxvYikpO1xuXHRyZXR1cm4gb3V0O1xufVxuXG4vKiBbTVMtT0xFUFNdIDIuMTguMSBEaWN0aW9uYXJ5ICh1c2VzIDIuMTcsIDIuMTYpICovXG5mdW5jdGlvbiBwYXJzZV9kaWN0aW9uYXJ5KGJsb2IsQ29kZVBhZ2UpIHtcblx0dmFyIGNudCA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0dmFyIGRpY3QgPSAoe30pO1xuXHRmb3IodmFyIGogPSAwOyBqICE9IGNudDsgKytqKSB7XG5cdFx0dmFyIHBpZCA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHR2YXIgbGVuID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdGRpY3RbcGlkXSA9IGJsb2IucmVhZF9zaGlmdChsZW4sIChDb2RlUGFnZSA9PT0gMHg0QjAgPyd1dGYxNmxlJzondXRmOCcpKS5yZXBsYWNlKGNocjAsJycpLnJlcGxhY2UoY2hyMSwnIScpO1xuXHRcdGlmKENvZGVQYWdlID09PSAweDRCMCAmJiAobGVuICUgMikpIGJsb2IubCArPSAyO1xuXHR9XG5cdGlmKGJsb2IubCAmIDMpIGJsb2IubCA9IChibG9iLmw+PjIrMSk8PDI7XG5cdHJldHVybiBkaWN0O1xufVxuXG4vKiBbTVMtT0xFUFNdIDIuOSBCTE9CICovXG5mdW5jdGlvbiBwYXJzZV9CTE9CKGJsb2IpIHtcblx0dmFyIHNpemUgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdHZhciBieXRlcyA9IGJsb2Iuc2xpY2UoYmxvYi5sLGJsb2IubCtzaXplKTtcblx0YmxvYi5sICs9IHNpemU7XG5cdGlmKChzaXplICYgMykgPiAwKSBibG9iLmwgKz0gKDQgLSAoc2l6ZSAmIDMpKSAmIDM7XG5cdHJldHVybiBieXRlcztcbn1cblxuLyogW01TLU9MRVBTXSAyLjExIENsaXBib2FyZERhdGEgKi9cbmZ1bmN0aW9uIHBhcnNlX0NsaXBib2FyZERhdGEoYmxvYikge1xuXHQvLyBUT0RPXG5cdHZhciBvID0ge307XG5cdG8uU2l6ZSA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0Ly9vLkZvcm1hdCA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0YmxvYi5sICs9IG8uU2l6ZSArIDMgLSAoby5TaXplIC0gMSkgJSA0O1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLU9MRVBTXSAyLjE1IFR5cGVkUHJvcGVydHlWYWx1ZSAqL1xuZnVuY3Rpb24gcGFyc2VfVHlwZWRQcm9wZXJ0eVZhbHVlKGJsb2IsIHR5cGUsIF9vcHRzKSB7XG5cdHZhciB0ID0gYmxvYi5yZWFkX3NoaWZ0KDIpLCByZXQsIG9wdHMgPSBfb3B0c3x8e307XG5cdGJsb2IubCArPSAyO1xuXHRpZih0eXBlICE9PSBWVF9WQVJJQU5UKVxuXHRpZih0ICE9PSB0eXBlICYmIFZUX0NVU1RPTS5pbmRleE9mKHR5cGUpPT09LTEgJiYgISgodHlwZSAmIDB4RkZGRSkgPT0gMHgxMDFFICYmICh0ICYgMHhGRkZFKSA9PSAweDEwMUUpKSB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHR5cGUgJyArIHR5cGUgKyAnIHNhdyAnICsgdCk7XG5cdHN3aXRjaCh0eXBlID09PSBWVF9WQVJJQU5UID8gdCA6IHR5cGUpIHtcblx0XHRjYXNlIDB4MDIgLypWVF9JMiovOiByZXQgPSBibG9iLnJlYWRfc2hpZnQoMiwgJ2knKTsgaWYoIW9wdHMucmF3KSBibG9iLmwgKz0gMjsgcmV0dXJuIHJldDtcblx0XHRjYXNlIDB4MDMgLypWVF9JNCovOiByZXQgPSBibG9iLnJlYWRfc2hpZnQoNCwgJ2knKTsgcmV0dXJuIHJldDtcblx0XHRjYXNlIDB4MEIgLypWVF9CT09MKi86IHJldHVybiBibG9iLnJlYWRfc2hpZnQoNCkgIT09IDB4MDtcblx0XHRjYXNlIDB4MTMgLypWVF9VSTQqLzogcmV0ID0gYmxvYi5yZWFkX3NoaWZ0KDQpOyByZXR1cm4gcmV0O1xuXHRcdGNhc2UgMHgxRSAvKlZUX0xQU1RSKi86IHJldHVybiBwYXJzZV9scHN0cihibG9iLCB0LCA0KS5yZXBsYWNlKGNocjAsJycpO1xuXHRcdGNhc2UgMHgxRiAvKlZUX0xQV1NUUiovOiByZXR1cm4gcGFyc2VfbHB3c3RyKGJsb2IpO1xuXHRcdGNhc2UgMHg0MCAvKlZUX0ZJTEVUSU1FKi86IHJldHVybiBwYXJzZV9GSUxFVElNRShibG9iKTtcblx0XHRjYXNlIDB4NDEgLypWVF9CTE9CKi86IHJldHVybiBwYXJzZV9CTE9CKGJsb2IpO1xuXHRcdGNhc2UgMHg0NyAvKlZUX0NGKi86IHJldHVybiBwYXJzZV9DbGlwYm9hcmREYXRhKGJsb2IpO1xuXHRcdGNhc2UgMHg1MCAvKlZUX1NUUklORyovOiByZXR1cm4gcGFyc2VfVnRTdHJpbmcoYmxvYiwgdCwgIW9wdHMucmF3KS5yZXBsYWNlKGNocjAsJycpO1xuXHRcdGNhc2UgMHg1MSAvKlZUX1VTVFIqLzogcmV0dXJuIHBhcnNlX1Z0VW5hbGlnbmVkU3RyaW5nKGJsb2IsIHQvKiwgNCovKS5yZXBsYWNlKGNocjAsJycpO1xuXHRcdGNhc2UgMHgxMDBDIC8qVlRfVkVDVE9SfFZUX1ZBUklBTlQqLzogcmV0dXJuIHBhcnNlX1Z0VmVjSGVhZGluZ1BhaXJWYWx1ZShibG9iKTtcblx0XHRjYXNlIDB4MTAxRSAvKlZUX1ZFQ1RPUnxWVF9MUFNUUiovOlxuXHRcdGNhc2UgMHgxMDFGIC8qVlRfVkVDVE9SfFZUX0xQV1NUUiovOlxuXHRcdFx0cmV0dXJuIHQgPT0gMHgxMDFGID8gcGFyc2VfVnRWZWNMcHdzdHJWYWx1ZShibG9iKSA6IHBhcnNlX1Z0VmVjVW5hbGlnbmVkTHBzdHJWYWx1ZShibG9iKTtcblx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJUeXBlZFByb3BlcnR5VmFsdWUgdW5yZWNvZ25pemVkIHR5cGUgXCIgKyB0eXBlICsgXCIgXCIgKyB0KTtcblx0fVxufVxuZnVuY3Rpb24gd3JpdGVfVHlwZWRQcm9wZXJ0eVZhbHVlKHR5cGUsIHZhbHVlKSB7XG5cdHZhciBvID0gbmV3X2J1Zig0KSwgcCA9IG5ld19idWYoNCk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgdHlwZSA9PSAweDUwID8gMHgxRiA6IHR5cGUpO1xuXHRzd2l0Y2godHlwZSkge1xuXHRcdGNhc2UgMHgwMyAvKlZUX0k0Ki86IHAud3JpdGVfc2hpZnQoLTQsIHZhbHVlKTsgYnJlYWs7XG5cdFx0Y2FzZSAweDA1IC8qVlRfSTQqLzogcCA9IG5ld19idWYoOCk7IHAud3JpdGVfc2hpZnQoOCwgdmFsdWUsICdmJyk7IGJyZWFrO1xuXHRcdGNhc2UgMHgwQiAvKlZUX0JPT0wqLzogcC53cml0ZV9zaGlmdCg0LCB2YWx1ZSA/IDB4MDEgOiAweDAwKTsgYnJlYWs7XG5cdFx0Y2FzZSAweDQwIC8qVlRfRklMRVRJTUUqLzogIHAgPSB3cml0ZV9GSUxFVElNRSh2YWx1ZSk7IGJyZWFrO1xuXHRcdGNhc2UgMHgxRiAvKlZUX0xQV1NUUiovOlxuXHRcdGNhc2UgMHg1MCAvKlZUX1NUUklORyovOlxucCA9IG5ld19idWYoNCArIDIgKiAodmFsdWUubGVuZ3RoICsgMSkgKyAodmFsdWUubGVuZ3RoICUgMiA/IDAgOiAyKSk7XG5cdFx0XHRwLndyaXRlX3NoaWZ0KDQsIHZhbHVlLmxlbmd0aCArIDEpO1xuXHRcdFx0cC53cml0ZV9zaGlmdCgwLCB2YWx1ZSwgXCJkYmNzXCIpO1xuXHRcdFx0d2hpbGUocC5sICE9IHAubGVuZ3RoKSBwLndyaXRlX3NoaWZ0KDEsIDApO1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiVHlwZWRQcm9wZXJ0eVZhbHVlIHVucmVjb2duaXplZCB0eXBlIFwiICsgdHlwZSArIFwiIFwiICsgdmFsdWUpO1xuXHR9XG5cdHJldHVybiBiY29uY2F0KFtvLCBwXSk7XG59XG5cbi8qIFtNUy1PTEVQU10gMi4yMCBQcm9wZXJ0eVNldCAqL1xuZnVuY3Rpb24gcGFyc2VfUHJvcGVydHlTZXQoYmxvYiwgUElEU0kpIHtcblx0dmFyIHN0YXJ0X2FkZHIgPSBibG9iLmw7XG5cdHZhciBzaXplID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgTnVtUHJvcHMgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdHZhciBQcm9wcyA9IFtdLCBpID0gMDtcblx0dmFyIENvZGVQYWdlID0gMDtcblx0dmFyIERpY3Rpb25hcnkgPSAtMSwgRGljdE9iaiA9ICh7fSk7XG5cdGZvcihpID0gMDsgaSAhPSBOdW1Qcm9wczsgKytpKSB7XG5cdFx0dmFyIFByb3BJRCA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHR2YXIgT2Zmc2V0ID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdFByb3BzW2ldID0gW1Byb3BJRCwgT2Zmc2V0ICsgc3RhcnRfYWRkcl07XG5cdH1cblx0UHJvcHMuc29ydChmdW5jdGlvbih4LHkpIHsgcmV0dXJuIHhbMV0gLSB5WzFdOyB9KTtcblx0dmFyIFByb3BIID0ge307XG5cdGZvcihpID0gMDsgaSAhPSBOdW1Qcm9wczsgKytpKSB7XG5cdFx0aWYoYmxvYi5sICE9PSBQcm9wc1tpXVsxXSkge1xuXHRcdFx0dmFyIGZhaWwgPSB0cnVlO1xuXHRcdFx0aWYoaT4wICYmIFBJRFNJKSBzd2l0Y2goUElEU0lbUHJvcHNbaS0xXVswXV0udCkge1xuXHRcdFx0XHRjYXNlIDB4MDIgLypWVF9JMiovOiBpZihibG9iLmwrMiA9PT0gUHJvcHNbaV1bMV0pIHsgYmxvYi5sKz0yOyBmYWlsID0gZmFsc2U7IH0gYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHg1MCAvKlZUX1NUUklORyovOiBpZihibG9iLmwgPD0gUHJvcHNbaV1bMV0pIHsgYmxvYi5sPVByb3BzW2ldWzFdOyBmYWlsID0gZmFsc2U7IH0gYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgxMDBDIC8qVlRfVkVDVE9SfFZUX1ZBUklBTlQqLzogaWYoYmxvYi5sIDw9IFByb3BzW2ldWzFdKSB7IGJsb2IubD1Qcm9wc1tpXVsxXTsgZmFpbCA9IGZhbHNlOyB9IGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYoKCFQSURTSXx8aT09MCkgJiYgYmxvYi5sIDw9IFByb3BzW2ldWzFdKSB7IGZhaWw9ZmFsc2U7IGJsb2IubCA9IFByb3BzW2ldWzFdOyB9XG5cdFx0XHRpZihmYWlsKSB0aHJvdyBuZXcgRXJyb3IoXCJSZWFkIEVycm9yOiBFeHBlY3RlZCBhZGRyZXNzIFwiICsgUHJvcHNbaV1bMV0gKyAnIGF0ICcgKyBibG9iLmwgKyAnIDonICsgaSk7XG5cdFx0fVxuXHRcdGlmKFBJRFNJKSB7XG5cdFx0XHR2YXIgcGlkZHNpID0gUElEU0lbUHJvcHNbaV1bMF1dO1xuXHRcdFx0UHJvcEhbcGlkZHNpLm5dID0gcGFyc2VfVHlwZWRQcm9wZXJ0eVZhbHVlKGJsb2IsIHBpZGRzaS50LCB7cmF3OnRydWV9KTtcblx0XHRcdGlmKHBpZGRzaS5wID09PSAndmVyc2lvbicpIFByb3BIW3BpZGRzaS5uXSA9IFN0cmluZyhQcm9wSFtwaWRkc2kubl0gPj4gMTYpICsgXCIuXCIgKyAoXCIwMDAwXCIgKyBTdHJpbmcoUHJvcEhbcGlkZHNpLm5dICYgMHhGRkZGKSkuc2xpY2UoLTQpO1xuXHRcdFx0aWYocGlkZHNpLm4gPT0gXCJDb2RlUGFnZVwiKSBzd2l0Y2goUHJvcEhbcGlkZHNpLm5dKSB7XG5cdFx0XHRcdGNhc2UgMDogUHJvcEhbcGlkZHNpLm5dID0gMTI1Mjtcblx0XHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdGNhc2UgODc0OlxuXHRcdFx0XHRjYXNlIDkzMjpcblx0XHRcdFx0Y2FzZSA5MzY6XG5cdFx0XHRcdGNhc2UgOTQ5OlxuXHRcdFx0XHRjYXNlIDk1MDpcblx0XHRcdFx0Y2FzZSAxMjUwOlxuXHRcdFx0XHRjYXNlIDEyNTE6XG5cdFx0XHRcdGNhc2UgMTI1Mzpcblx0XHRcdFx0Y2FzZSAxMjU0OlxuXHRcdFx0XHRjYXNlIDEyNTU6XG5cdFx0XHRcdGNhc2UgMTI1Njpcblx0XHRcdFx0Y2FzZSAxMjU3OlxuXHRcdFx0XHRjYXNlIDEyNTg6XG5cdFx0XHRcdGNhc2UgMTAwMDA6XG5cdFx0XHRcdGNhc2UgMTIwMDpcblx0XHRcdFx0Y2FzZSAxMjAxOlxuXHRcdFx0XHRjYXNlIDEyNTI6XG5cdFx0XHRcdGNhc2UgNjUwMDA6IGNhc2UgLTUzNjpcblx0XHRcdFx0Y2FzZSA2NTAwMTogY2FzZSAtNTM1OlxuXHRcdFx0XHRcdHNldF9jcChDb2RlUGFnZSA9IChQcm9wSFtwaWRkc2kubl0+Pj4wKSAmIDB4RkZGRik7IGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBDb2RlUGFnZTogXCIgKyBQcm9wSFtwaWRkc2kubl0pO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZihQcm9wc1tpXVswXSA9PT0gMHgxKSB7XG5cdFx0XHRcdENvZGVQYWdlID0gUHJvcEguQ29kZVBhZ2UgPSAocGFyc2VfVHlwZWRQcm9wZXJ0eVZhbHVlKGJsb2IsIFZUX0kyKSk7XG5cdFx0XHRcdHNldF9jcChDb2RlUGFnZSk7XG5cdFx0XHRcdGlmKERpY3Rpb25hcnkgIT09IC0xKSB7XG5cdFx0XHRcdFx0dmFyIG9sZHBvcyA9IGJsb2IubDtcblx0XHRcdFx0XHRibG9iLmwgPSBQcm9wc1tEaWN0aW9uYXJ5XVsxXTtcblx0XHRcdFx0XHREaWN0T2JqID0gcGFyc2VfZGljdGlvbmFyeShibG9iLENvZGVQYWdlKTtcblx0XHRcdFx0XHRibG9iLmwgPSBvbGRwb3M7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZihQcm9wc1tpXVswXSA9PT0gMCkge1xuXHRcdFx0XHRpZihDb2RlUGFnZSA9PT0gMCkgeyBEaWN0aW9uYXJ5ID0gaTsgYmxvYi5sID0gUHJvcHNbaSsxXVsxXTsgY29udGludWU7IH1cblx0XHRcdFx0RGljdE9iaiA9IHBhcnNlX2RpY3Rpb25hcnkoYmxvYixDb2RlUGFnZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YXIgbmFtZSA9IERpY3RPYmpbUHJvcHNbaV1bMF1dO1xuXHRcdFx0XHR2YXIgdmFsO1xuXHRcdFx0XHQvKiBbTVMtT1NIQVJFRF0gMi4zLjMuMi4zLjEuMiArIFBST1BWQVJJQU5UICovXG5cdFx0XHRcdHN3aXRjaChibG9iW2Jsb2IubF0pIHtcblx0XHRcdFx0XHRjYXNlIDB4NDEgLypWVF9CTE9CKi86IGJsb2IubCArPSA0OyB2YWwgPSBwYXJzZV9CTE9CKGJsb2IpOyBicmVhaztcblx0XHRcdFx0XHRjYXNlIDB4MUUgLypWVF9MUFNUUiovOiBibG9iLmwgKz0gNDsgdmFsID0gcGFyc2VfVnRTdHJpbmcoYmxvYiwgYmxvYltibG9iLmwtNF0pLnJlcGxhY2UoL1xcdTAwMDArJC8sXCJcIik7IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgMHgxRiAvKlZUX0xQV1NUUiovOiBibG9iLmwgKz0gNDsgdmFsID0gcGFyc2VfVnRTdHJpbmcoYmxvYiwgYmxvYltibG9iLmwtNF0pLnJlcGxhY2UoL1xcdTAwMDArJC8sXCJcIik7IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgMHgwMyAvKlZUX0k0Ki86IGJsb2IubCArPSA0OyB2YWwgPSBibG9iLnJlYWRfc2hpZnQoNCwgJ2knKTsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAweDEzIC8qVlRfVUk0Ki86IGJsb2IubCArPSA0OyB2YWwgPSBibG9iLnJlYWRfc2hpZnQoNCk7IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgMHgwNSAvKlZUX1I4Ki86IGJsb2IubCArPSA0OyB2YWwgPSBibG9iLnJlYWRfc2hpZnQoOCwgJ2YnKTsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAweDBCIC8qVlRfQk9PTCovOiBibG9iLmwgKz0gNDsgdmFsID0gcGFyc2Vib29sKGJsb2IsIDQpOyBicmVhaztcblx0XHRcdFx0XHRjYXNlIDB4NDAgLypWVF9GSUxFVElNRSovOiBibG9iLmwgKz0gNDsgdmFsID0gcGFyc2VEYXRlKHBhcnNlX0ZJTEVUSU1FKGJsb2IpKTsgYnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwidW5wYXJzZWQgdmFsdWU6IFwiICsgYmxvYltibG9iLmxdKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRQcm9wSFtuYW1lXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0YmxvYi5sID0gc3RhcnRfYWRkciArIHNpemU7IC8qIHN0ZXAgYWhlYWQgdG8gc2tpcCBwYWRkaW5nICovXG5cdHJldHVybiBQcm9wSDtcbn1cbnZhciBYTFNQU1NraXAgPSBbIFwiQ29kZVBhZ2VcIiwgXCJUaHVtYm5haWxcIiwgXCJfUElEX0xJTktCQVNFXCIsIFwiX1BJRF9ITElOS1NcIiwgXCJTeXN0ZW1JZGVudGlmaWVyXCIsIFwiRk1USURcIiBdLmNvbmNhdChQc2V1ZG9Qcm9wc1BhaXJzKTtcbmZ1bmN0aW9uIGd1ZXNzX3Byb3BlcnR5X3R5cGUodmFsKSB7XG5cdHN3aXRjaCh0eXBlb2YgdmFsKSB7XG5cdFx0Y2FzZSBcImJvb2xlYW5cIjogcmV0dXJuIDB4MEI7XG5cdFx0Y2FzZSBcIm51bWJlclwiOiByZXR1cm4gKCh2YWx8MCk9PXZhbCkgPyAweDAzIDogMHgwNTtcblx0XHRjYXNlIFwic3RyaW5nXCI6IHJldHVybiAweDFGO1xuXHRcdGNhc2UgXCJvYmplY3RcIjogaWYodmFsIGluc3RhbmNlb2YgRGF0ZSkgcmV0dXJuIDB4NDA7IGJyZWFrO1xuXHR9XG5cdHJldHVybiAtMTtcbn1cbmZ1bmN0aW9uIHdyaXRlX1Byb3BlcnR5U2V0KGVudHJpZXMsIFJFLCBQSURTSSkge1xuXHR2YXIgaGRyID0gbmV3X2J1Zig4KSwgcGlhbyA9IFtdLCBwcm9wID0gW107XG5cdHZhciBzeiA9IDgsIGkgPSAwO1xuXG5cdHZhciBwciA9IG5ld19idWYoOCksIHBpbyA9IG5ld19idWYoOCk7XG5cdHByLndyaXRlX3NoaWZ0KDQsIDB4MDAwMik7XG5cdHByLndyaXRlX3NoaWZ0KDQsIDB4MDRCMCk7XG5cdHBpby53cml0ZV9zaGlmdCg0LCAweDAwMDEpO1xuXHRwcm9wLnB1c2gocHIpOyBwaWFvLnB1c2gocGlvKTtcblx0c3ogKz0gOCArIHByLmxlbmd0aDtcblxuXHRpZighUkUpIHtcblx0XHRwaW8gPSBuZXdfYnVmKDgpO1xuXHRcdHBpby53cml0ZV9zaGlmdCg0LCAwKTtcblx0XHRwaWFvLnVuc2hpZnQocGlvKTtcblxuXHRcdHZhciBidWZzID0gW25ld19idWYoNCldO1xuXHRcdGJ1ZnNbMF0ud3JpdGVfc2hpZnQoNCwgZW50cmllcy5sZW5ndGgpO1xuXHRcdGZvcihpID0gMDsgaSA8IGVudHJpZXMubGVuZ3RoOyArK2kpIHtcblx0XHRcdHZhciB2YWx1ZSA9IGVudHJpZXNbaV1bMF07XG5cdFx0XHRwciA9IG5ld19idWYoNCArIDQgKyAyICogKHZhbHVlLmxlbmd0aCArIDEpICsgKHZhbHVlLmxlbmd0aCAlIDIgPyAwIDogMikpO1xuXHRcdFx0cHIud3JpdGVfc2hpZnQoNCwgaSsyKTtcblx0XHRcdHByLndyaXRlX3NoaWZ0KDQsIHZhbHVlLmxlbmd0aCArIDEpO1xuXHRcdFx0cHIud3JpdGVfc2hpZnQoMCwgdmFsdWUsIFwiZGJjc1wiKTtcblx0XHRcdHdoaWxlKHByLmwgIT0gcHIubGVuZ3RoKSBwci53cml0ZV9zaGlmdCgxLCAwKTtcblx0XHRcdGJ1ZnMucHVzaChwcik7XG5cdFx0fVxuXHRcdHByID0gYmNvbmNhdChidWZzKTtcblx0XHRwcm9wLnVuc2hpZnQocHIpO1xuXHRcdHN6ICs9IDggKyBwci5sZW5ndGg7XG5cdH1cblxuXHRmb3IoaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgKytpKSB7XG5cdFx0aWYoUkUgJiYgIVJFW2VudHJpZXNbaV1bMF1dKSBjb250aW51ZTtcblx0XHRpZihYTFNQU1NraXAuaW5kZXhPZihlbnRyaWVzW2ldWzBdKSA+IC0xKSBjb250aW51ZTtcblx0XHRpZihlbnRyaWVzW2ldWzFdID09IG51bGwpIGNvbnRpbnVlO1xuXG5cdFx0dmFyIHZhbCA9IGVudHJpZXNbaV1bMV0sIGlkeCA9IDA7XG5cdFx0aWYoUkUpIHtcblx0XHRcdGlkeCA9ICtSRVtlbnRyaWVzW2ldWzBdXTtcblx0XHRcdHZhciBwaW5mbyA9IChQSURTSSlbaWR4XTtcblx0XHRcdGlmKHBpbmZvLnAgPT0gXCJ2ZXJzaW9uXCIgJiYgdHlwZW9mIHZhbCA9PSBcInN0cmluZ1wiKSB7XG52YXIgYXJyID0gdmFsLnNwbGl0KFwiLlwiKTtcblx0XHRcdFx0dmFsID0gKCgrYXJyWzBdKTw8MTYpICsgKCgrYXJyWzFdKXx8MCk7XG5cdFx0XHR9XG5cdFx0XHRwciA9IHdyaXRlX1R5cGVkUHJvcGVydHlWYWx1ZShwaW5mby50LCB2YWwpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgVCA9IGd1ZXNzX3Byb3BlcnR5X3R5cGUodmFsKTtcblx0XHRcdGlmKFQgPT0gLTEpIHsgVCA9IDB4MUY7IHZhbCA9IFN0cmluZyh2YWwpOyB9XG5cdFx0XHRwciA9IHdyaXRlX1R5cGVkUHJvcGVydHlWYWx1ZShULCB2YWwpO1xuXHRcdH1cblx0XHRwcm9wLnB1c2gocHIpO1xuXG5cdFx0cGlvID0gbmV3X2J1Zig4KTtcblx0XHRwaW8ud3JpdGVfc2hpZnQoNCwgIVJFID8gMitpIDogaWR4KTtcblx0XHRwaWFvLnB1c2gocGlvKTtcblxuXHRcdHN6ICs9IDggKyBwci5sZW5ndGg7XG5cdH1cblxuXHR2YXIgdyA9IDggKiAocHJvcC5sZW5ndGggKyAxKTtcblx0Zm9yKGkgPSAwOyBpIDwgcHJvcC5sZW5ndGg7ICsraSkgeyBwaWFvW2ldLndyaXRlX3NoaWZ0KDQsIHcpOyB3ICs9IHByb3BbaV0ubGVuZ3RoOyB9XG5cdGhkci53cml0ZV9zaGlmdCg0LCBzeik7XG5cdGhkci53cml0ZV9zaGlmdCg0LCBwcm9wLmxlbmd0aCk7XG5cdHJldHVybiBiY29uY2F0KFtoZHJdLmNvbmNhdChwaWFvKS5jb25jYXQocHJvcCkpO1xufVxuXG4vKiBbTVMtT0xFUFNdIDIuMjEgUHJvcGVydHlTZXRTdHJlYW0gKi9cbmZ1bmN0aW9uIHBhcnNlX1Byb3BlcnR5U2V0U3RyZWFtKGZpbGUsIFBJRFNJLCBjbHNpZCkge1xuXHR2YXIgYmxvYiA9IGZpbGUuY29udGVudDtcblx0aWYoIWJsb2IpIHJldHVybiAoe30pO1xuXHRwcmVwX2Jsb2IoYmxvYiwgMCk7XG5cblx0dmFyIE51bVNldHMsIEZNVElEMCwgRk1USUQxLCBPZmZzZXQwLCBPZmZzZXQxID0gMDtcblx0YmxvYi5jaGsoJ2ZlZmYnLCAnQnl0ZSBPcmRlcjogJyk7XG5cblx0Lyp2YXIgdmVycyA9ICovYmxvYi5yZWFkX3NoaWZ0KDIpOyAvLyBUT0RPOiBjaGVjayB2ZXJzaW9uXG5cdHZhciBTeXN0ZW1JZGVudGlmaWVyID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgQ0xTSUQgPSBibG9iLnJlYWRfc2hpZnQoMTYpO1xuXHRpZihDTFNJRCAhPT0gQ0ZCLnV0aWxzLmNvbnN0cy5IRUFERVJfQ0xTSUQgJiYgQ0xTSUQgIT09IGNsc2lkKSB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgUHJvcGVydHlTZXQgQ0xTSUQgXCIgKyBDTFNJRCk7XG5cdE51bVNldHMgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdGlmKE51bVNldHMgIT09IDEgJiYgTnVtU2V0cyAhPT0gMikgdGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkICNTZXRzOiBcIiArIE51bVNldHMpO1xuXHRGTVRJRDAgPSBibG9iLnJlYWRfc2hpZnQoMTYpOyBPZmZzZXQwID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXG5cdGlmKE51bVNldHMgPT09IDEgJiYgT2Zmc2V0MCAhPT0gYmxvYi5sKSB0aHJvdyBuZXcgRXJyb3IoXCJMZW5ndGggbWlzbWF0Y2g6IFwiICsgT2Zmc2V0MCArIFwiICE9PSBcIiArIGJsb2IubCk7XG5cdGVsc2UgaWYoTnVtU2V0cyA9PT0gMikgeyBGTVRJRDEgPSBibG9iLnJlYWRfc2hpZnQoMTYpOyBPZmZzZXQxID0gYmxvYi5yZWFkX3NoaWZ0KDQpOyB9XG5cdHZhciBQU2V0MCA9IHBhcnNlX1Byb3BlcnR5U2V0KGJsb2IsIFBJRFNJKTtcblxuXHR2YXIgcnZhbCA9ICh7IFN5c3RlbUlkZW50aWZpZXI6IFN5c3RlbUlkZW50aWZpZXIgfSk7XG5cdGZvcih2YXIgeSBpbiBQU2V0MCkgcnZhbFt5XSA9IFBTZXQwW3ldO1xuXHQvL3J2YWwuYmxvYiA9IGJsb2I7XG5cdHJ2YWwuRk1USUQgPSBGTVRJRDA7XG5cdC8vcnZhbC5QU2V0MCA9IFBTZXQwO1xuXHRpZihOdW1TZXRzID09PSAxKSByZXR1cm4gcnZhbDtcblx0aWYoT2Zmc2V0MSAtIGJsb2IubCA9PSAyKSBibG9iLmwgKz0gMjtcblx0aWYoYmxvYi5sICE9PSBPZmZzZXQxKSB0aHJvdyBuZXcgRXJyb3IoXCJMZW5ndGggbWlzbWF0Y2ggMjogXCIgKyBibG9iLmwgKyBcIiAhPT0gXCIgKyBPZmZzZXQxKTtcblx0dmFyIFBTZXQxO1xuXHR0cnkgeyBQU2V0MSA9IHBhcnNlX1Byb3BlcnR5U2V0KGJsb2IsIG51bGwpOyB9IGNhdGNoKGUpIHsvKiBlbXB0eSAqL31cblx0Zm9yKHkgaW4gUFNldDEpIHJ2YWxbeV0gPSBQU2V0MVt5XTtcblx0cnZhbC5GTVRJRCA9IFtGTVRJRDAsIEZNVElEMV07IC8vIFRPRE86IHZlcmlmeSBGTVRJRDAvMVxuXHRyZXR1cm4gcnZhbDtcbn1cbmZ1bmN0aW9uIHdyaXRlX1Byb3BlcnR5U2V0U3RyZWFtKGVudHJpZXMsIGNsc2lkLCBSRSwgUElEU0ksIGVudHJpZXMyLCBjbHNpZDIpIHtcblx0dmFyIGhkciA9IG5ld19idWYoZW50cmllczIgPyA2OCA6IDQ4KTtcblx0dmFyIGJ1ZnMgPSBbaGRyXTtcblx0aGRyLndyaXRlX3NoaWZ0KDIsIDB4RkZGRSk7XG5cdGhkci53cml0ZV9zaGlmdCgyLCAweDAwMDApOyAvKiBUT0RPOiB0eXBlIDEgcHJvcHMgKi9cblx0aGRyLndyaXRlX3NoaWZ0KDQsIDB4MzIzNjMyMzcpO1xuXHRoZHIud3JpdGVfc2hpZnQoMTYsIENGQi51dGlscy5jb25zdHMuSEVBREVSX0NMU0lELCBcImhleFwiKTtcblx0aGRyLndyaXRlX3NoaWZ0KDQsIChlbnRyaWVzMiA/IDIgOiAxKSk7XG5cdGhkci53cml0ZV9zaGlmdCgxNiwgY2xzaWQsIFwiaGV4XCIpO1xuXHRoZHIud3JpdGVfc2hpZnQoNCwgKGVudHJpZXMyID8gNjggOiA0OCkpO1xuXHR2YXIgcHMwID0gd3JpdGVfUHJvcGVydHlTZXQoZW50cmllcywgUkUsIFBJRFNJKTtcblx0YnVmcy5wdXNoKHBzMCk7XG5cblx0aWYoZW50cmllczIpIHtcblx0XHR2YXIgcHMxID0gd3JpdGVfUHJvcGVydHlTZXQoZW50cmllczIsIG51bGwsIG51bGwpO1xuXHRcdGhkci53cml0ZV9zaGlmdCgxNiwgY2xzaWQyLCBcImhleFwiKTtcblx0XHRoZHIud3JpdGVfc2hpZnQoNCwgNjggKyBwczAubGVuZ3RoKTtcblx0XHRidWZzLnB1c2gocHMxKTtcblx0fVxuXHRyZXR1cm4gYmNvbmNhdChidWZzKTtcbn1cblxuZnVuY3Rpb24gcGFyc2Vub29wMihibG9iLCBsZW5ndGgpIHsgYmxvYi5yZWFkX3NoaWZ0KGxlbmd0aCk7IHJldHVybiBudWxsOyB9XG5mdW5jdGlvbiB3cml0ZXplcm9lcyhuLCBvKSB7IGlmKCFvKSBvPW5ld19idWYobik7IGZvcih2YXIgaj0wOyBqPG47ICsraikgby53cml0ZV9zaGlmdCgxLCAwKTsgcmV0dXJuIG87IH1cblxuZnVuY3Rpb24gcGFyc2x1cnAoYmxvYiwgbGVuZ3RoLCBjYikge1xuXHR2YXIgYXJyID0gW10sIHRhcmdldCA9IGJsb2IubCArIGxlbmd0aDtcblx0d2hpbGUoYmxvYi5sIDwgdGFyZ2V0KSBhcnIucHVzaChjYihibG9iLCB0YXJnZXQgLSBibG9iLmwpKTtcblx0aWYodGFyZ2V0ICE9PSBibG9iLmwpIHRocm93IG5ldyBFcnJvcihcIlNsdXJwIGVycm9yXCIpO1xuXHRyZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBwYXJzZWJvb2woYmxvYiwgbGVuZ3RoKSB7IHJldHVybiBibG9iLnJlYWRfc2hpZnQobGVuZ3RoKSA9PT0gMHgxOyB9XG5mdW5jdGlvbiB3cml0ZWJvb2wodiwgbykgeyBpZighbykgbz1uZXdfYnVmKDIpOyBvLndyaXRlX3NoaWZ0KDIsICshIXYpOyByZXR1cm4gbzsgfVxuXG5mdW5jdGlvbiBwYXJzZXVpbnQxNihibG9iKSB7IHJldHVybiBibG9iLnJlYWRfc2hpZnQoMiwgJ3UnKTsgfVxuZnVuY3Rpb24gd3JpdGV1aW50MTYodiwgbykgeyBpZighbykgbz1uZXdfYnVmKDIpOyBvLndyaXRlX3NoaWZ0KDIsIHYpOyByZXR1cm4gbzsgfVxuZnVuY3Rpb24gcGFyc2V1aW50MTZhKGJsb2IsIGxlbmd0aCkgeyByZXR1cm4gcGFyc2x1cnAoYmxvYixsZW5ndGgscGFyc2V1aW50MTYpO31cblxuLyogLS0tIDIuNSBTdHJ1Y3R1cmVzIC0tLSAqL1xuXG4vKiBbTVMtWExTXSAyLjUuMTAgQmVzIChib29sZWFuIG9yIGVycm9yKSAqL1xuZnVuY3Rpb24gcGFyc2VfQmVzKGJsb2IpIHtcblx0dmFyIHYgPSBibG9iLnJlYWRfc2hpZnQoMSksIHQgPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdHJldHVybiB0ID09PSAweDAxID8gdiA6IHYgPT09IDB4MDE7XG59XG5mdW5jdGlvbiB3cml0ZV9CZXModiwgdCwgbykge1xuXHRpZighbykgbyA9IG5ld19idWYoMik7XG5cdG8ud3JpdGVfc2hpZnQoMSwgKCh0ID09ICdlJykgPyArdiA6ICshIXYpKTtcblx0by53cml0ZV9zaGlmdCgxLCAoKHQgPT0gJ2UnKSA/IDEgOiAwKSk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMjQwIFNob3J0WExVbmljb2RlU3RyaW5nICovXG5mdW5jdGlvbiBwYXJzZV9TaG9ydFhMVW5pY29kZVN0cmluZyhibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIGNjaCA9IGJsb2IucmVhZF9zaGlmdChvcHRzICYmIG9wdHMuYmlmZiA+PSAxMiA/IDIgOiAxKTtcblx0dmFyIGVuY29kaW5nID0gJ3NiY3MtY29udCc7XG5cdHZhciBjcCA9IGN1cnJlbnRfY29kZXBhZ2U7XG5cdGlmKG9wdHMgJiYgb3B0cy5iaWZmID49IDgpIGN1cnJlbnRfY29kZXBhZ2UgPSAxMjAwO1xuXHRpZighb3B0cyB8fCBvcHRzLmJpZmYgPT0gOCApIHtcblx0XHR2YXIgZkhpZ2hCeXRlID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRcdGlmKGZIaWdoQnl0ZSkgeyBlbmNvZGluZyA9ICdkYmNzLWNvbnQnOyB9XG5cdH0gZWxzZSBpZihvcHRzLmJpZmYgPT0gMTIpIHtcblx0XHRlbmNvZGluZyA9ICd3c3RyJztcblx0fVxuXHRpZihvcHRzLmJpZmYgPj0gMiAmJiBvcHRzLmJpZmYgPD0gNSkgZW5jb2RpbmcgPSAnY3BzdHInO1xuXHR2YXIgbyA9IGNjaCA/IGJsb2IucmVhZF9zaGlmdChjY2gsIGVuY29kaW5nKSA6IFwiXCI7XG5cdGN1cnJlbnRfY29kZXBhZ2UgPSBjcDtcblx0cmV0dXJuIG87XG59XG5cbi8qIDIuNS4yOTMgWExVbmljb2RlUmljaEV4dGVuZGVkU3RyaW5nICovXG5mdW5jdGlvbiBwYXJzZV9YTFVuaWNvZGVSaWNoRXh0ZW5kZWRTdHJpbmcoYmxvYikge1xuXHR2YXIgY3AgPSBjdXJyZW50X2NvZGVwYWdlO1xuXHRjdXJyZW50X2NvZGVwYWdlID0gMTIwMDtcblx0dmFyIGNjaCA9IGJsb2IucmVhZF9zaGlmdCgyKSwgZmxhZ3MgPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdHZhciAvKmZIaWdoQnl0ZSA9IGZsYWdzICYgMHgxLCovIGZFeHRTdCA9IGZsYWdzICYgMHg0LCBmUmljaFN0ID0gZmxhZ3MgJiAweDg7XG5cdHZhciB3aWR0aCA9IDEgKyAoZmxhZ3MgJiAweDEpOyAvLyAweDAgLT4gdXRmOCwgMHgxIC0+IGRiY3Ncblx0dmFyIGNSdW4gPSAwLCBjYkV4dFJzdDtcblx0dmFyIHogPSB7fTtcblx0aWYoZlJpY2hTdCkgY1J1biA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0aWYoZkV4dFN0KSBjYkV4dFJzdCA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0dmFyIGVuY29kaW5nID0gd2lkdGggPT0gMiA/ICdkYmNzLWNvbnQnIDogJ3NiY3MtY29udCc7XG5cdHZhciBtc2cgPSBjY2ggPT09IDAgPyBcIlwiIDogYmxvYi5yZWFkX3NoaWZ0KGNjaCwgZW5jb2RpbmcpO1xuXHRpZihmUmljaFN0KSBibG9iLmwgKz0gNCAqIGNSdW47IC8vVE9ETzogcGFyc2UgdGhpc1xuXHRpZihmRXh0U3QpIGJsb2IubCArPSBjYkV4dFJzdDsgLy9UT0RPOiBwYXJzZSB0aGlzXG5cdHoudCA9IG1zZztcblx0aWYoIWZSaWNoU3QpIHsgei5yYXcgPSBcIjx0PlwiICsgei50ICsgXCI8L3Q+XCI7IHouciA9IHoudDsgfVxuXHRjdXJyZW50X2NvZGVwYWdlID0gY3A7XG5cdHJldHVybiB6O1xufVxuZnVuY3Rpb24gd3JpdGVfWExVbmljb2RlUmljaEV4dGVuZGVkU3RyaW5nKHhsc3RyKSB7XG5cdHZhciBzdHIgPSAoeGxzdHIudHx8XCJcIiksIG5mbXRzID0gMTtcblxuXHR2YXIgaGRyID0gbmV3X2J1ZigzICsgKG5mbXRzID4gMSA/IDIgOiAwKSk7XG5cdGhkci53cml0ZV9zaGlmdCgyLCBzdHIubGVuZ3RoKTtcblx0aGRyLndyaXRlX3NoaWZ0KDEsIChuZm10cyA+IDEgPyAweDA4IDogMHgwMCkgfCAweDAxKTtcblx0aWYobmZtdHMgPiAxKSBoZHIud3JpdGVfc2hpZnQoMiwgbmZtdHMpO1xuXG5cdHZhciBvdGV4dCA9IG5ld19idWYoMiAqIHN0ci5sZW5ndGgpO1xuXHRvdGV4dC53cml0ZV9zaGlmdCgyICogc3RyLmxlbmd0aCwgc3RyLCAndXRmMTZsZScpO1xuXG5cdHZhciBvdXQgPSBbaGRyLCBvdGV4dF07XG5cblx0cmV0dXJuIGJjb25jYXQob3V0KTtcbn1cblxuLyogMi41LjI5NiBYTFVuaWNvZGVTdHJpbmdOb0NjaCAqL1xuZnVuY3Rpb24gcGFyc2VfWExVbmljb2RlU3RyaW5nTm9DY2goYmxvYiwgY2NoLCBvcHRzKSB7XG5cdHZhciByZXR2YWw7XG5cdGlmKG9wdHMpIHtcblx0XHRpZihvcHRzLmJpZmYgPj0gMiAmJiBvcHRzLmJpZmYgPD0gNSkgcmV0dXJuIGJsb2IucmVhZF9zaGlmdChjY2gsICdjcHN0cicpO1xuXHRcdGlmKG9wdHMuYmlmZiA+PSAxMikgcmV0dXJuIGJsb2IucmVhZF9zaGlmdChjY2gsICdkYmNzLWNvbnQnKTtcblx0fVxuXHR2YXIgZkhpZ2hCeXRlID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRpZihmSGlnaEJ5dGU9PT0wKSB7IHJldHZhbCA9IGJsb2IucmVhZF9zaGlmdChjY2gsICdzYmNzLWNvbnQnKTsgfVxuXHRlbHNlIHsgcmV0dmFsID0gYmxvYi5yZWFkX3NoaWZ0KGNjaCwgJ2RiY3MtY29udCcpOyB9XG5cdHJldHVybiByZXR2YWw7XG59XG5cbi8qIDIuNS4yOTQgWExVbmljb2RlU3RyaW5nICovXG5mdW5jdGlvbiBwYXJzZV9YTFVuaWNvZGVTdHJpbmcoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciBjY2ggPSBibG9iLnJlYWRfc2hpZnQob3B0cyAmJiBvcHRzLmJpZmYgPT0gMiA/IDEgOiAyKTtcblx0aWYoY2NoID09PSAwKSB7IGJsb2IubCsrOyByZXR1cm4gXCJcIjsgfVxuXHRyZXR1cm4gcGFyc2VfWExVbmljb2RlU3RyaW5nTm9DY2goYmxvYiwgY2NoLCBvcHRzKTtcbn1cbi8qIEJJRkY1IG92ZXJyaWRlICovXG5mdW5jdGlvbiBwYXJzZV9YTFVuaWNvZGVTdHJpbmcyKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRpZihvcHRzLmJpZmYgPiA1KSByZXR1cm4gcGFyc2VfWExVbmljb2RlU3RyaW5nKGJsb2IsIGxlbmd0aCwgb3B0cyk7XG5cdHZhciBjY2ggPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdGlmKGNjaCA9PT0gMCkgeyBibG9iLmwrKzsgcmV0dXJuIFwiXCI7IH1cblx0cmV0dXJuIGJsb2IucmVhZF9zaGlmdChjY2gsIChvcHRzLmJpZmYgPD0gNCB8fCAhYmxvYi5sZW5zICkgPyAnY3BzdHInIDogJ3NiY3MtY29udCcpO1xufVxuLyogVE9ETzogQklGRjUgYW5kIGxvd2VyLCBjb2RlcGFnZSBhd2FyZW5lc3MgKi9cbmZ1bmN0aW9uIHdyaXRlX1hMVW5pY29kZVN0cmluZyhzdHIsIG9wdHMsIG8pIHtcblx0aWYoIW8pIG8gPSBuZXdfYnVmKDMgKyAyICogc3RyLmxlbmd0aCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgc3RyLmxlbmd0aCk7XG5cdG8ud3JpdGVfc2hpZnQoMSwgMSk7XG5cdG8ud3JpdGVfc2hpZnQoMzEsIHN0ciwgJ3V0ZjE2bGUnKTtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNdIDIuNS42MSBDb250cm9sSW5mbyAqL1xuZnVuY3Rpb24gcGFyc2VfQ29udHJvbEluZm8oYmxvYikge1xuXHR2YXIgZmxhZ3MgPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdGJsb2IubCsrO1xuXHR2YXIgYWNjZWwgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdGJsb2IubCArPSAyO1xuXHRyZXR1cm4gW2ZsYWdzLCBhY2NlbF07XG59XG5cbi8qIFtNUy1PU0hBUkVEXSAyLjMuNy42IFVSTE1vbmlrZXIgVE9ETzogZmxhZ3MgKi9cbmZ1bmN0aW9uIHBhcnNlX1VSTE1vbmlrZXIoYmxvYikge1xuXHR2YXIgbGVuID0gYmxvYi5yZWFkX3NoaWZ0KDQpLCBzdGFydCA9IGJsb2IubDtcblx0dmFyIGV4dHJhID0gZmFsc2U7XG5cdGlmKGxlbiA+IDI0KSB7XG5cdFx0LyogbG9vayBhaGVhZCAqL1xuXHRcdGJsb2IubCArPSBsZW4gLSAyNDtcblx0XHRpZihibG9iLnJlYWRfc2hpZnQoMTYpID09PSBcIjc5NTg4MWY0M2IxZDdmNDhhZjJjODI1ZGM0ODUyNzYzXCIpIGV4dHJhID0gdHJ1ZTtcblx0XHRibG9iLmwgPSBzdGFydDtcblx0fVxuXHR2YXIgdXJsID0gYmxvYi5yZWFkX3NoaWZ0KChleHRyYT9sZW4tMjQ6bGVuKT4+MSwgJ3V0ZjE2bGUnKS5yZXBsYWNlKGNocjAsXCJcIik7XG5cdGlmKGV4dHJhKSBibG9iLmwgKz0gMjQ7XG5cdHJldHVybiB1cmw7XG59XG5cbi8qIFtNUy1PU0hBUkVEXSAyLjMuNy44IEZpbGVNb25pa2VyIFRPRE86IGFsbCBmaWVsZHMgKi9cbmZ1bmN0aW9uIHBhcnNlX0ZpbGVNb25pa2VyKGJsb2IpIHtcblx0dmFyIGNBbnRpID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgcHJlYW1ibGUgPSBcIlwiOyB3aGlsZShjQW50aS0tID4gMCkgcHJlYW1ibGUgKz0gXCIuLi9cIjtcblx0dmFyIGFuc2lQYXRoID0gYmxvYi5yZWFkX3NoaWZ0KDAsICdscHN0ci1hbnNpJyk7XG5cdGJsb2IubCArPSAyOyAvL3ZhciBlbmRTZXJ2ZXIgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdGlmKGJsb2IucmVhZF9zaGlmdCgyKSAhPSAweERFQUQpIHRocm93IG5ldyBFcnJvcihcIkJhZCBGaWxlTW9uaWtlclwiKTtcblx0dmFyIHN6ID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRpZihzeiA9PT0gMCkgcmV0dXJuIHByZWFtYmxlICsgYW5zaVBhdGgucmVwbGFjZSgvXFxcXC9nLFwiL1wiKTtcblx0dmFyIGJ5dGVzID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRpZihibG9iLnJlYWRfc2hpZnQoMikgIT0gMykgdGhyb3cgbmV3IEVycm9yKFwiQmFkIEZpbGVNb25pa2VyXCIpO1xuXHR2YXIgdW5pY29kZVBhdGggPSBibG9iLnJlYWRfc2hpZnQoYnl0ZXM+PjEsICd1dGYxNmxlJykucmVwbGFjZShjaHIwLFwiXCIpO1xuXHRyZXR1cm4gcHJlYW1ibGUgKyB1bmljb2RlUGF0aDtcbn1cblxuLyogW01TLU9TSEFSRURdIDIuMy43LjIgSHlwZXJsaW5rTW9uaWtlciBUT0RPOiBhbGwgdGhlIG1vbmlrZXJzICovXG5mdW5jdGlvbiBwYXJzZV9IeXBlcmxpbmtNb25pa2VyKGJsb2IsIGxlbmd0aCkge1xuXHR2YXIgY2xzaWQgPSBibG9iLnJlYWRfc2hpZnQoMTYpOyBsZW5ndGggLT0gMTY7XG5cdHN3aXRjaChjbHNpZCkge1xuXHRcdGNhc2UgXCJlMGM5ZWE3OWY5YmFjZTExOGM4MjAwYWEwMDRiYTkwYlwiOiByZXR1cm4gcGFyc2VfVVJMTW9uaWtlcihibG9iLCBsZW5ndGgpO1xuXHRcdGNhc2UgXCIwMzAzMDAwMDAwMDAwMDAwYzAwMDAwMDAwMDAwMDA0NlwiOiByZXR1cm4gcGFyc2VfRmlsZU1vbmlrZXIoYmxvYiwgbGVuZ3RoKTtcblx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBNb25pa2VyIFwiICsgY2xzaWQpO1xuXHR9XG59XG5cbi8qIFtNUy1PU0hBUkVEXSAyLjMuNy45IEh5cGVybGlua1N0cmluZyAqL1xuZnVuY3Rpb24gcGFyc2VfSHlwZXJsaW5rU3RyaW5nKGJsb2IpIHtcblx0dmFyIGxlbiA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0dmFyIG8gPSBsZW4gPiAwID8gYmxvYi5yZWFkX3NoaWZ0KGxlbiwgJ3V0ZjE2bGUnKS5yZXBsYWNlKGNocjAsIFwiXCIpIDogXCJcIjtcblx0cmV0dXJuIG87XG59XG5mdW5jdGlvbiB3cml0ZV9IeXBlcmxpbmtTdHJpbmcoc3RyLCBvKSB7XG5cdGlmKCFvKSBvID0gbmV3X2J1Zig2ICsgc3RyLmxlbmd0aCAqIDIpO1xuXHRvLndyaXRlX3NoaWZ0KDQsIDEgKyBzdHIubGVuZ3RoKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkgby53cml0ZV9zaGlmdCgyLCBzdHIuY2hhckNvZGVBdChpKSk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtT1NIQVJFRF0gMi4zLjcuMSBIeXBlcmxpbmsgT2JqZWN0ICovXG5mdW5jdGlvbiBwYXJzZV9IeXBlcmxpbmsoYmxvYiwgbGVuZ3RoKSB7XG5cdHZhciBlbmQgPSBibG9iLmwgKyBsZW5ndGg7XG5cdHZhciBzVmVyID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRpZihzVmVyICE9PSAyKSB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgc3RyZWFtVmVyc2lvbjogXCIgKyBzVmVyKTtcblx0dmFyIGZsYWdzID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgKz0gMjtcblx0dmFyIGRpc3BsYXlOYW1lLCB0YXJnZXRGcmFtZU5hbWUsIG1vbmlrZXIsIG9sZU1vbmlrZXIsIExvYz1cIlwiLCBndWlkLCBmaWxlVGltZTtcblx0aWYoZmxhZ3MgJiAweDAwMTApIGRpc3BsYXlOYW1lID0gcGFyc2VfSHlwZXJsaW5rU3RyaW5nKGJsb2IsIGVuZCAtIGJsb2IubCk7XG5cdGlmKGZsYWdzICYgMHgwMDgwKSB0YXJnZXRGcmFtZU5hbWUgPSBwYXJzZV9IeXBlcmxpbmtTdHJpbmcoYmxvYiwgZW5kIC0gYmxvYi5sKTtcblx0aWYoKGZsYWdzICYgMHgwMTAxKSA9PT0gMHgwMTAxKSBtb25pa2VyID0gcGFyc2VfSHlwZXJsaW5rU3RyaW5nKGJsb2IsIGVuZCAtIGJsb2IubCk7XG5cdGlmKChmbGFncyAmIDB4MDEwMSkgPT09IDB4MDAwMSkgb2xlTW9uaWtlciA9IHBhcnNlX0h5cGVybGlua01vbmlrZXIoYmxvYiwgZW5kIC0gYmxvYi5sKTtcblx0aWYoZmxhZ3MgJiAweDAwMDgpIExvYyA9IHBhcnNlX0h5cGVybGlua1N0cmluZyhibG9iLCBlbmQgLSBibG9iLmwpO1xuXHRpZihmbGFncyAmIDB4MDAyMCkgZ3VpZCA9IGJsb2IucmVhZF9zaGlmdCgxNik7XG5cdGlmKGZsYWdzICYgMHgwMDQwKSBmaWxlVGltZSA9IHBhcnNlX0ZJTEVUSU1FKGJsb2IvKiwgOCovKTtcblx0YmxvYi5sID0gZW5kO1xuXHR2YXIgdGFyZ2V0ID0gdGFyZ2V0RnJhbWVOYW1lfHxtb25pa2VyfHxvbGVNb25pa2VyfHxcIlwiO1xuXHRpZih0YXJnZXQgJiYgTG9jKSB0YXJnZXQrPVwiI1wiK0xvYztcblx0aWYoIXRhcmdldCkgdGFyZ2V0ID0gXCIjXCIgKyBMb2M7XG5cdGlmKChmbGFncyAmIDB4MDAwMikgJiYgdGFyZ2V0LmNoYXJBdCgwKSA9PSBcIi9cIiAmJiB0YXJnZXQuY2hhckF0KDEpICE9IFwiL1wiKSB0YXJnZXQgPSBcImZpbGU6Ly9cIiArIHRhcmdldDtcblx0dmFyIG91dCA9ICh7VGFyZ2V0OnRhcmdldH0pO1xuXHRpZihndWlkKSBvdXQuZ3VpZCA9IGd1aWQ7XG5cdGlmKGZpbGVUaW1lKSBvdXQudGltZSA9IGZpbGVUaW1lO1xuXHRpZihkaXNwbGF5TmFtZSkgb3V0LlRvb2x0aXAgPSBkaXNwbGF5TmFtZTtcblx0cmV0dXJuIG91dDtcbn1cbmZ1bmN0aW9uIHdyaXRlX0h5cGVybGluayhobCkge1xuXHR2YXIgb3V0ID0gbmV3X2J1Zig1MTIpLCBpID0gMDtcblx0dmFyIFRhcmdldCA9IGhsLlRhcmdldDtcblx0aWYoVGFyZ2V0LnNsaWNlKDAsNykgPT0gXCJmaWxlOi8vXCIpIFRhcmdldCA9IFRhcmdldC5zbGljZSg3KTtcblx0dmFyIGhhc2hpZHggPSBUYXJnZXQuaW5kZXhPZihcIiNcIik7XG5cdHZhciBGID0gaGFzaGlkeCA+IC0xID8gMHgxZiA6IDB4MTc7XG5cdHN3aXRjaChUYXJnZXQuY2hhckF0KDApKSB7IGNhc2UgXCIjXCI6IEY9MHgxYzsgYnJlYWs7IGNhc2UgXCIuXCI6IEYmPX4yOyBicmVhazsgfVxuXHRvdXQud3JpdGVfc2hpZnQoNCwyKTsgb3V0LndyaXRlX3NoaWZ0KDQsIEYpO1xuXHR2YXIgZGF0YSA9IFs4LDY4MTU4MjcsNjYxOTIzNyw0ODQ5NzgwLDgzXTsgZm9yKGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7ICsraSkgb3V0LndyaXRlX3NoaWZ0KDQsIGRhdGFbaV0pO1xuXHRpZihGID09IDB4MUMpIHtcblx0XHRUYXJnZXQgPSBUYXJnZXQuc2xpY2UoMSk7XG5cdFx0d3JpdGVfSHlwZXJsaW5rU3RyaW5nKFRhcmdldCwgb3V0KTtcblx0fSBlbHNlIGlmKEYgJiAweDAyKSB7XG5cdFx0ZGF0YSA9IFwiZTAgYzkgZWEgNzkgZjkgYmEgY2UgMTEgOGMgODIgMDAgYWEgMDAgNGIgYTkgMGJcIi5zcGxpdChcIiBcIik7XG5cdFx0Zm9yKGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7ICsraSkgb3V0LndyaXRlX3NoaWZ0KDEsIHBhcnNlSW50KGRhdGFbaV0sIDE2KSk7XG5cdFx0dmFyIFByZXRhcmdldCA9IGhhc2hpZHggPiAtMSA/IFRhcmdldC5zbGljZSgwLCBoYXNoaWR4KSA6IFRhcmdldDtcblx0XHRvdXQud3JpdGVfc2hpZnQoNCwgMiooUHJldGFyZ2V0Lmxlbmd0aCArIDEpKTtcblx0XHRmb3IoaSA9IDA7IGkgPCBQcmV0YXJnZXQubGVuZ3RoOyArK2kpIG91dC53cml0ZV9zaGlmdCgyLCBQcmV0YXJnZXQuY2hhckNvZGVBdChpKSk7XG5cdFx0b3V0LndyaXRlX3NoaWZ0KDIsIDApO1xuXHRcdGlmKEYgJiAweDA4KSB3cml0ZV9IeXBlcmxpbmtTdHJpbmcoaGFzaGlkeCA+IC0xID8gVGFyZ2V0LnNsaWNlKGhhc2hpZHgrMSk6IFwiXCIsIG91dCk7XG5cdH0gZWxzZSB7XG5cdFx0ZGF0YSA9IFwiMDMgMDMgMDAgMDAgMDAgMDAgMDAgMDAgYzAgMDAgMDAgMDAgMDAgMDAgMDAgNDZcIi5zcGxpdChcIiBcIik7XG5cdFx0Zm9yKGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7ICsraSkgb3V0LndyaXRlX3NoaWZ0KDEsIHBhcnNlSW50KGRhdGFbaV0sIDE2KSk7XG5cdFx0dmFyIFAgPSAwO1xuXHRcdHdoaWxlKFRhcmdldC5zbGljZShQKjMsUCozKzMpPT1cIi4uL1wifHxUYXJnZXQuc2xpY2UoUCozLFAqMyszKT09XCIuLlxcXFxcIikgKytQO1xuXHRcdG91dC53cml0ZV9zaGlmdCgyLCBQKTtcblx0XHRvdXQud3JpdGVfc2hpZnQoNCwgVGFyZ2V0Lmxlbmd0aCAtIDMgKiBQICsgMSk7XG5cdFx0Zm9yKGkgPSAwOyBpIDwgVGFyZ2V0Lmxlbmd0aCAtIDMgKiBQOyArK2kpIG91dC53cml0ZV9zaGlmdCgxLCBUYXJnZXQuY2hhckNvZGVBdChpICsgMyAqIFApICYgMHhGRik7XG5cdFx0b3V0LndyaXRlX3NoaWZ0KDEsIDApO1xuXHRcdG91dC53cml0ZV9zaGlmdCgyLCAweEZGRkYpO1xuXHRcdG91dC53cml0ZV9zaGlmdCgyLCAweERFQUQpO1xuXHRcdGZvcihpID0gMDsgaSA8IDY7ICsraSkgb3V0LndyaXRlX3NoaWZ0KDQsIDApO1xuXHR9XG5cdHJldHVybiBvdXQuc2xpY2UoMCwgb3V0LmwpO1xufVxuXG4vKiAyLjUuMTc4IExvbmdSR0JBICovXG5mdW5jdGlvbiBwYXJzZV9Mb25nUkdCQShibG9iKSB7IHZhciByID0gYmxvYi5yZWFkX3NoaWZ0KDEpLCBnID0gYmxvYi5yZWFkX3NoaWZ0KDEpLCBiID0gYmxvYi5yZWFkX3NoaWZ0KDEpLCBhID0gYmxvYi5yZWFkX3NoaWZ0KDEpOyByZXR1cm4gW3IsZyxiLGFdOyB9XG5cbi8qIDIuNS4xNzcgTG9uZ1JHQiAqL1xuZnVuY3Rpb24gcGFyc2VfTG9uZ1JHQihibG9iLCBsZW5ndGgpIHsgdmFyIHggPSBwYXJzZV9Mb25nUkdCQShibG9iLCBsZW5ndGgpOyB4WzNdID0gMDsgcmV0dXJuIHg7IH1cblxuXG4vKiBbTVMtWExTXSAyLjUuMTkgKi9cbmZ1bmN0aW9uIHBhcnNlX1hMU0NlbGwoYmxvYikge1xuXHR2YXIgcncgPSBibG9iLnJlYWRfc2hpZnQoMik7IC8vIDAtaW5kZXhlZFxuXHR2YXIgY29sID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgaXhmZSA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0cmV0dXJuICh7cjpydywgYzpjb2wsIGl4ZmU6aXhmZX0pO1xufVxuZnVuY3Rpb24gd3JpdGVfWExTQ2VsbChSLCBDLCBpeGZlLCBvKSB7XG5cdGlmKCFvKSBvID0gbmV3X2J1Zig2KTtcblx0by53cml0ZV9zaGlmdCgyLCBSKTtcblx0by53cml0ZV9zaGlmdCgyLCBDKTtcblx0by53cml0ZV9zaGlmdCgyLCBpeGZlfHwwKTtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xMzQgKi9cbmZ1bmN0aW9uIHBhcnNlX2ZydEhlYWRlcihibG9iKSB7XG5cdHZhciBydCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIGZsYWdzID0gYmxvYi5yZWFkX3NoaWZ0KDIpOyAvLyBUT0RPOiBwYXJzZSB0aGVzZSBmbGFnc1xuXHRibG9iLmwgKz0gODtcblx0cmV0dXJuIHt0eXBlOiBydCwgZmxhZ3M6IGZsYWdzfTtcbn1cblxuXG5cbmZ1bmN0aW9uIHBhcnNlX09wdFhMVW5pY29kZVN0cmluZyhibG9iLCBsZW5ndGgsIG9wdHMpIHsgcmV0dXJuIGxlbmd0aCA9PT0gMCA/IFwiXCIgOiBwYXJzZV9YTFVuaWNvZGVTdHJpbmcyKGJsb2IsIGxlbmd0aCwgb3B0cyk7IH1cblxuLyogW01TLVhMU10gMi41LjM0NCAqL1xuZnVuY3Rpb24gcGFyc2VfWFRJKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgdyA9IG9wdHMuYmlmZiA+IDggPyA0IDogMjtcblx0dmFyIGlTdXBCb29rID0gYmxvYi5yZWFkX3NoaWZ0KHcpLCBpdGFiRmlyc3QgPSBibG9iLnJlYWRfc2hpZnQodywnaScpLCBpdGFiTGFzdCA9IGJsb2IucmVhZF9zaGlmdCh3LCdpJyk7XG5cdHJldHVybiBbaVN1cEJvb2ssIGl0YWJGaXJzdCwgaXRhYkxhc3RdO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMjE4ICovXG5mdW5jdGlvbiBwYXJzZV9Sa1JlYyhibG9iKSB7XG5cdHZhciBpeGZlID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgUksgPSBwYXJzZV9Sa051bWJlcihibG9iKTtcblx0cmV0dXJuIFtpeGZlLCBSS107XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xICovXG5mdW5jdGlvbiBwYXJzZV9BZGRpblVkZihibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0YmxvYi5sICs9IDQ7IGxlbmd0aCAtPSA0O1xuXHR2YXIgbCA9IGJsb2IubCArIGxlbmd0aDtcblx0dmFyIHVkZk5hbWUgPSBwYXJzZV9TaG9ydFhMVW5pY29kZVN0cmluZyhibG9iLCBsZW5ndGgsIG9wdHMpO1xuXHR2YXIgY2IgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdGwgLT0gYmxvYi5sO1xuXHRpZihjYiAhPT0gbCkgdGhyb3cgbmV3IEVycm9yKFwiTWFsZm9ybWVkIEFkZGluVWRmOiBwYWRkaW5nID0gXCIgKyBsICsgXCIgIT0gXCIgKyBjYik7XG5cdGJsb2IubCArPSBjYjtcblx0cmV0dXJuIHVkZk5hbWU7XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4yMDkgVE9ETzogQ2hlY2sgc2l6ZXMgKi9cbmZ1bmN0aW9uIHBhcnNlX1JlZjhVKGJsb2IpIHtcblx0dmFyIHJ3Rmlyc3QgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciByd0xhc3QgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBjb2xGaXJzdCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIGNvbExhc3QgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHJldHVybiB7czp7Yzpjb2xGaXJzdCwgcjpyd0ZpcnN0fSwgZTp7Yzpjb2xMYXN0LHI6cndMYXN0fX07XG59XG5mdW5jdGlvbiB3cml0ZV9SZWY4VShyLCBvKSB7XG5cdGlmKCFvKSBvID0gbmV3X2J1Zig4KTtcblx0by53cml0ZV9zaGlmdCgyLCByLnMucik7XG5cdG8ud3JpdGVfc2hpZnQoMiwgci5lLnIpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIHIucy5jKTtcblx0by53cml0ZV9zaGlmdCgyLCByLmUuYyk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMjExICovXG5mdW5jdGlvbiBwYXJzZV9SZWZVKGJsb2IpIHtcblx0dmFyIHJ3Rmlyc3QgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciByd0xhc3QgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBjb2xGaXJzdCA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0dmFyIGNvbExhc3QgPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdHJldHVybiB7czp7Yzpjb2xGaXJzdCwgcjpyd0ZpcnN0fSwgZTp7Yzpjb2xMYXN0LHI6cndMYXN0fX07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4yMDcgKi9cbnZhciBwYXJzZV9SZWYgPSBwYXJzZV9SZWZVO1xuXG4vKiBbTVMtWExTXSAyLjUuMTQzICovXG5mdW5jdGlvbiBwYXJzZV9GdENtbyhibG9iKSB7XG5cdGJsb2IubCArPSA0O1xuXHR2YXIgb3QgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBpZCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIGZsYWdzID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwrPTEyO1xuXHRyZXR1cm4gW2lkLCBvdCwgZmxhZ3NdO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTQ5ICovXG5mdW5jdGlvbiBwYXJzZV9GdE50cyhibG9iKSB7XG5cdHZhciBvdXQgPSB7fTtcblx0YmxvYi5sICs9IDQ7XG5cdGJsb2IubCArPSAxNjsgLy8gR1VJRCBUT0RPXG5cdG91dC5mU2hhcmVkTm90ZSA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0YmxvYi5sICs9IDQ7XG5cdHJldHVybiBvdXQ7XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xNDIgKi9cbmZ1bmN0aW9uIHBhcnNlX0Z0Q2YoYmxvYikge1xuXHR2YXIgb3V0ID0ge307XG5cdGJsb2IubCArPSA0O1xuXHRibG9iLmNmID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRyZXR1cm4gb3V0O1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTQwIC0gMi41LjE1NCBhbmQgZnJpZW5kcyAqL1xuZnVuY3Rpb24gcGFyc2VfRnRTa2lwKGJsb2IpIHsgYmxvYi5sICs9IDI7IGJsb2IubCArPSBibG9iLnJlYWRfc2hpZnQoMik7IH1cbnZhciBGdFRhYiA9IHtcbjB4MDA6IHBhcnNlX0Z0U2tpcCwgICAgICAvKiBGdEVuZCAqL1xuMHgwNDogcGFyc2VfRnRTa2lwLCAgICAgIC8qIEZ0TWFjcm8gKi9cbjB4MDU6IHBhcnNlX0Z0U2tpcCwgICAgICAvKiBGdEJ1dHRvbiAqL1xuMHgwNjogcGFyc2VfRnRTa2lwLCAgICAgIC8qIEZ0R21vICovXG4weDA3OiBwYXJzZV9GdENmLCAgICAgICAgLyogRnRDZiAqL1xuMHgwODogcGFyc2VfRnRTa2lwLCAgICAgIC8qIEZ0UGlvR3JiaXQgKi9cbjB4MDk6IHBhcnNlX0Z0U2tpcCwgICAgICAvKiBGdFBpY3RGbWxhICovXG4weDBBOiBwYXJzZV9GdFNraXAsICAgICAgLyogRnRDYmxzICovXG4weDBCOiBwYXJzZV9GdFNraXAsICAgICAgLyogRnRSYm8gKi9cbjB4MEM6IHBhcnNlX0Z0U2tpcCwgICAgICAvKiBGdFNicyAqL1xuMHgwRDogcGFyc2VfRnROdHMsICAgICAgIC8qIEZ0TnRzICovXG4weDBFOiBwYXJzZV9GdFNraXAsICAgICAgLyogRnRTYnNGbWxhICovXG4weDBGOiBwYXJzZV9GdFNraXAsICAgICAgLyogRnRHYm9EYXRhICovXG4weDEwOiBwYXJzZV9GdFNraXAsICAgICAgLyogRnRFZG9EYXRhICovXG4weDExOiBwYXJzZV9GdFNraXAsICAgICAgLyogRnRSYm9EYXRhICovXG4weDEyOiBwYXJzZV9GdFNraXAsICAgICAgLyogRnRDYmxzRGF0YSAqL1xuMHgxMzogcGFyc2VfRnRTa2lwLCAgICAgIC8qIEZ0TGJzRGF0YSAqL1xuMHgxNDogcGFyc2VfRnRTa2lwLCAgICAgIC8qIEZ0Q2Jsc0ZtbGEgKi9cbjB4MTU6IHBhcnNlX0Z0Q21vXG59O1xuZnVuY3Rpb24gcGFyc2VfRnRBcnJheShibG9iLCBsZW5ndGgpIHtcblx0dmFyIHRndCA9IGJsb2IubCArIGxlbmd0aDtcblx0dmFyIGZ0cyA9IFtdO1xuXHR3aGlsZShibG9iLmwgPCB0Z3QpIHtcblx0XHR2YXIgZnQgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0YmxvYi5sLT0yO1xuXHRcdHRyeSB7XG5cdFx0XHRmdHMucHVzaChGdFRhYltmdF0oYmxvYiwgdGd0IC0gYmxvYi5sKSk7XG5cdFx0fSBjYXRjaChlKSB7IGJsb2IubCA9IHRndDsgcmV0dXJuIGZ0czsgfVxuXHR9XG5cdGlmKGJsb2IubCAhPSB0Z3QpIGJsb2IubCA9IHRndDsgLy90aHJvdyBuZXcgRXJyb3IoXCJiYWQgT2JqZWN0IEZ0LXNlcXVlbmNlXCIpO1xuXHRyZXR1cm4gZnRzO1xufVxuXG4vKiAtLS0gMi40IFJlY29yZHMgLS0tICovXG5cbi8qIFtNUy1YTFNdIDIuNC4yMSAqL1xuZnVuY3Rpb24gcGFyc2VfQk9GKGJsb2IsIGxlbmd0aCkge1xuXHR2YXIgbyA9IHtCSUZGVmVyOjAsIGR0OjB9O1xuXHRvLkJJRkZWZXIgPSBibG9iLnJlYWRfc2hpZnQoMik7IGxlbmd0aCAtPSAyO1xuXHRpZihsZW5ndGggPj0gMikgeyBvLmR0ID0gYmxvYi5yZWFkX3NoaWZ0KDIpOyBibG9iLmwgLT0gMjsgfVxuXHRzd2l0Y2goby5CSUZGVmVyKSB7XG5cdFx0Y2FzZSAweDA2MDA6IC8qIEJJRkY4ICovXG5cdFx0Y2FzZSAweDA1MDA6IC8qIEJJRkY1ICovXG5cdFx0Y2FzZSAweDA0MDA6IC8qIEJJRkY0ICovXG5cdFx0Y2FzZSAweDAzMDA6IC8qIEJJRkYzICovXG5cdFx0Y2FzZSAweDAyMDA6IC8qIEJJRkYyICovXG5cdFx0Y2FzZSAweDAwMDI6IGNhc2UgMHgwMDA3OiAvKiBCSUZGMiAqL1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDogaWYobGVuZ3RoID4gNikgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBCSUZGIFZlciBcIiArIG8uQklGRlZlcik7XG5cdH1cblxuXHRibG9iLnJlYWRfc2hpZnQobGVuZ3RoKTtcblx0cmV0dXJuIG87XG59XG5mdW5jdGlvbiB3cml0ZV9CT0Yod2IsIHQsIG8pIHtcblx0dmFyIGggPSAweDA2MDAsIHcgPSAxNjtcblx0c3dpdGNoKG8uYm9va1R5cGUpIHtcblx0XHRjYXNlICdiaWZmOCc6IGJyZWFrO1xuXHRcdGNhc2UgJ2JpZmY1JzogaCA9IDB4MDUwMDsgdyA9IDg7IGJyZWFrO1xuXHRcdGNhc2UgJ2JpZmY0JzogaCA9IDB4MDAwNDsgdyA9IDY7IGJyZWFrO1xuXHRcdGNhc2UgJ2JpZmYzJzogaCA9IDB4MDAwMzsgdyA9IDY7IGJyZWFrO1xuXHRcdGNhc2UgJ2JpZmYyJzogaCA9IDB4MDAwMjsgdyA9IDQ7IGJyZWFrO1xuXHRcdGNhc2UgJ3hsYSc6IGJyZWFrO1xuXHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihcInVuc3VwcG9ydGVkIEJJRkYgdmVyc2lvblwiKTtcblx0fVxuXHR2YXIgb3V0ID0gbmV3X2J1Zih3KTtcblx0b3V0LndyaXRlX3NoaWZ0KDIsIGgpO1xuXHRvdXQud3JpdGVfc2hpZnQoMiwgdCk7XG5cdGlmKHcgPiA0KSBvdXQud3JpdGVfc2hpZnQoMiwgMHg3MjYyKTtcblx0aWYodyA+IDYpIG91dC53cml0ZV9zaGlmdCgyLCAweDA3Q0QpO1xuXHRpZih3ID4gOCkge1xuXHRcdG91dC53cml0ZV9zaGlmdCgyLCAweEMwMDkpO1xuXHRcdG91dC53cml0ZV9zaGlmdCgyLCAweDAwMDEpO1xuXHRcdG91dC53cml0ZV9zaGlmdCgyLCAweDA3MDYpO1xuXHRcdG91dC53cml0ZV9zaGlmdCgyLCAweDAwMDApO1xuXHR9XG5cdHJldHVybiBvdXQ7XG59XG5cblxuLyogW01TLVhMU10gMi40LjE0NiAqL1xuZnVuY3Rpb24gcGFyc2VfSW50ZXJmYWNlSGRyKGJsb2IsIGxlbmd0aCkge1xuXHRpZihsZW5ndGggPT09IDApIHJldHVybiAweDA0YjA7XG5cdGlmKChibG9iLnJlYWRfc2hpZnQoMikpIT09MHgwNGIwKXsvKiBlbXB0eSAqL31cblx0cmV0dXJuIDB4MDRiMDtcbn1cblxuXG4vKiBbTVMtWExTXSAyLjQuMzQ5ICovXG5mdW5jdGlvbiBwYXJzZV9Xcml0ZUFjY2VzcyhibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0aWYob3B0cy5lbmMpIHsgYmxvYi5sICs9IGxlbmd0aDsgcmV0dXJuIFwiXCI7IH1cblx0dmFyIGwgPSBibG9iLmw7XG5cdC8vIFRPRE86IG1ha2Ugc3VyZSBYTFVuaWNvZGVTdHJpbmcgZG9lc250IG92ZXJydW5cblx0dmFyIFVzZXJOYW1lID0gcGFyc2VfWExVbmljb2RlU3RyaW5nMihibG9iLCAwLCBvcHRzKTtcblx0YmxvYi5yZWFkX3NoaWZ0KGxlbmd0aCArIGwgLSBibG9iLmwpO1xuXHRyZXR1cm4gVXNlck5hbWU7XG59XG5mdW5jdGlvbiB3cml0ZV9Xcml0ZUFjY2VzcyhzLCBvcHRzKSB7XG5cdHZhciBiOCA9ICFvcHRzIHx8IG9wdHMuYmlmZiA9PSA4O1xuXHR2YXIgbyA9IG5ld19idWYoYjggPyAxMTIgOiA1NCk7XG5cdG8ud3JpdGVfc2hpZnQob3B0cy5iaWZmID09IDggPyAyIDogMSwgNyk7XG5cdGlmKGI4KSBvLndyaXRlX3NoaWZ0KDEsIDApO1xuXHRvLndyaXRlX3NoaWZ0KDQsIDB4MzMzMzY4NTMpO1xuXHRvLndyaXRlX3NoaWZ0KDQsICgweDAwNTM0QTc0IHwgKGI4ID8gMCA6IDB4MjAwMDAwMDApKSk7XG5cdHdoaWxlKG8ubCA8IG8ubGVuZ3RoKSBvLndyaXRlX3NoaWZ0KDEsIChiOCA/IDAgOiAzMikpO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU10gMi40LjM1MSAqL1xuZnVuY3Rpb24gcGFyc2VfV3NCb29sKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgZmxhZ3MgPSBvcHRzICYmIG9wdHMuYmlmZiA9PSA4IHx8IGxlbmd0aCA9PSAyID8gYmxvYi5yZWFkX3NoaWZ0KDIpIDogKGJsb2IubCArPSBsZW5ndGgsIDApO1xuXHRyZXR1cm4geyBmRGlhbG9nOiBmbGFncyAmIDB4MTAsIGZCZWxvdzogZmxhZ3MgJiAweDQwLCBmUmlnaHQ6IGZsYWdzICYgMHg4MCB9O1xufVxuXG4vKiBbTVMtWExTXSAyLjQuMjggKi9cbmZ1bmN0aW9uIHBhcnNlX0JvdW5kU2hlZXQ4KGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgcG9zID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgaGlkZGVuID0gYmxvYi5yZWFkX3NoaWZ0KDEpICYgMHgwMztcblx0dmFyIGR0ID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRzd2l0Y2goZHQpIHtcblx0XHRjYXNlIDA6IGR0ID0gJ1dvcmtzaGVldCc7IGJyZWFrO1xuXHRcdGNhc2UgMTogZHQgPSAnTWFjcm9zaGVldCc7IGJyZWFrO1xuXHRcdGNhc2UgMjogZHQgPSAnQ2hhcnRzaGVldCc7IGJyZWFrO1xuXHRcdGNhc2UgNjogZHQgPSAnVkJBTW9kdWxlJzsgYnJlYWs7XG5cdH1cblx0dmFyIG5hbWUgPSBwYXJzZV9TaG9ydFhMVW5pY29kZVN0cmluZyhibG9iLCAwLCBvcHRzKTtcblx0aWYobmFtZS5sZW5ndGggPT09IDApIG5hbWUgPSBcIlNoZWV0MVwiO1xuXHRyZXR1cm4geyBwb3M6cG9zLCBoczpoaWRkZW4sIGR0OmR0LCBuYW1lOm5hbWUgfTtcbn1cbmZ1bmN0aW9uIHdyaXRlX0JvdW5kU2hlZXQ4KGRhdGEsIG9wdHMpIHtcblx0dmFyIHcgPSAoIW9wdHMgfHwgb3B0cy5iaWZmID49IDggPyAyIDogMSk7XG5cdHZhciBvID0gbmV3X2J1Zig4ICsgdyAqIGRhdGEubmFtZS5sZW5ndGgpO1xuXHRvLndyaXRlX3NoaWZ0KDQsIGRhdGEucG9zKTtcblx0by53cml0ZV9zaGlmdCgxLCBkYXRhLmhzIHx8IDApO1xuXHRvLndyaXRlX3NoaWZ0KDEsIGRhdGEuZHQpO1xuXHRvLndyaXRlX3NoaWZ0KDEsIGRhdGEubmFtZS5sZW5ndGgpO1xuXHRpZihvcHRzLmJpZmYgPj0gOCkgby53cml0ZV9zaGlmdCgxLCAxKTtcblx0by53cml0ZV9zaGlmdCh3ICogZGF0YS5uYW1lLmxlbmd0aCwgZGF0YS5uYW1lLCBvcHRzLmJpZmYgPCA4ID8gJ3NiY3MnIDogJ3V0ZjE2bGUnKTtcblx0dmFyIG91dCA9IG8uc2xpY2UoMCwgby5sKTtcblx0b3V0LmwgPSBvLmw7IHJldHVybiBvdXQ7XG59XG5cbi8qIFtNUy1YTFNdIDIuNC4yNjUgVE9ETyAqL1xuZnVuY3Rpb24gcGFyc2VfU1NUKGJsb2IsIGxlbmd0aCkge1xuXHR2YXIgZW5kID0gYmxvYi5sICsgbGVuZ3RoO1xuXHR2YXIgY250ID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgdWNudCA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0dmFyIHN0cnMgPSAoW10pO1xuXHRmb3IodmFyIGkgPSAwOyBpICE9IHVjbnQgJiYgYmxvYi5sIDwgZW5kOyArK2kpIHtcblx0XHRzdHJzLnB1c2gocGFyc2VfWExVbmljb2RlUmljaEV4dGVuZGVkU3RyaW5nKGJsb2IpKTtcblx0fVxuXHRzdHJzLkNvdW50ID0gY250OyBzdHJzLlVuaXF1ZSA9IHVjbnQ7XG5cdHJldHVybiBzdHJzO1xufVxuZnVuY3Rpb24gd3JpdGVfU1NUKHNzdCwgb3B0cykge1xuXHR2YXIgaGVhZGVyID0gbmV3X2J1Zig4KTtcblx0aGVhZGVyLndyaXRlX3NoaWZ0KDQsIHNzdC5Db3VudCk7XG5cdGhlYWRlci53cml0ZV9zaGlmdCg0LCBzc3QuVW5pcXVlKTtcblx0dmFyIHN0cnMgPSBbXTtcblx0Zm9yKHZhciBqID0gMDsgaiA8IHNzdC5sZW5ndGg7ICsraikgc3Ryc1tqXSA9IHdyaXRlX1hMVW5pY29kZVJpY2hFeHRlbmRlZFN0cmluZyhzc3Rbal0sIG9wdHMpO1xuXHR2YXIgbyA9IGJjb25jYXQoW2hlYWRlcl0uY29uY2F0KHN0cnMpKTtcbm8ucGFydHMgPSBbaGVhZGVyLmxlbmd0aF0uY29uY2F0KHN0cnMubWFwKGZ1bmN0aW9uKHN0cikgeyByZXR1cm4gc3RyLmxlbmd0aDsgfSkpO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU10gMi40LjEwNyAqL1xuZnVuY3Rpb24gcGFyc2VfRXh0U1NUKGJsb2IsIGxlbmd0aCkge1xuXHR2YXIgZXh0c3N0ID0ge307XG5cdGV4dHNzdC5kc3N0ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgKz0gbGVuZ3RoLTI7XG5cdHJldHVybiBleHRzc3Q7XG59XG5cblxuLyogW01TLVhMU10gMi40LjIyMSBUT0RPOiBjaGVjayBCSUZGMi00ICovXG5mdW5jdGlvbiBwYXJzZV9Sb3coYmxvYikge1xuXHR2YXIgeiA9ICh7fSk7XG5cdHouciA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0ei5jID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR6LmNudCA9IGJsb2IucmVhZF9zaGlmdCgyKSAtIHouYztcblx0dmFyIG1peVJ3ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgKz0gNDsgLy8gcmVzZXJ2ZWQoMiksIHVudXNlZCgyKVxuXHR2YXIgZmxhZ3MgPSBibG9iLnJlYWRfc2hpZnQoMSk7IC8vIHZhcmlvdXMgZmxhZ3Ncblx0YmxvYi5sICs9IDM7IC8vIHJlc2VydmVkKDgpLCBpeGZlKDEyKSwgZmxhZ3MoNClcblx0aWYoZmxhZ3MgJiAweDA3KSB6LmxldmVsID0gZmxhZ3MgJiAweDA3O1xuXHQvLyBjb2xsYXBzZWQ6IGZsYWdzICYgMHgxMFxuXHRpZihmbGFncyAmIDB4MjApIHouaGlkZGVuID0gdHJ1ZTtcblx0aWYoZmxhZ3MgJiAweDQwKSB6LmhwdCA9IG1peVJ3IC8gMjA7XG5cdHJldHVybiB6O1xufVxuXG5cbi8qIFtNUy1YTFNdIDIuNC4xMjUgKi9cbmZ1bmN0aW9uIHBhcnNlX0ZvcmNlRnVsbENhbGN1bGF0aW9uKGJsb2IpIHtcblx0dmFyIGhlYWRlciA9IHBhcnNlX2ZydEhlYWRlcihibG9iKTtcblx0aWYoaGVhZGVyLnR5cGUgIT0gMHgwOEEzKSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIEZ1dHVyZSBSZWNvcmQgXCIgKyBoZWFkZXIudHlwZSk7XG5cdHZhciBmdWxsY2FsYyA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0cmV0dXJuIGZ1bGxjYWxjICE9PSAweDA7XG59XG5cblxuXG5cblxuLyogW01TLVhMU10gMi40LjIxNSBydCAqL1xuZnVuY3Rpb24gcGFyc2VfUmVjYWxjSWQoYmxvYikge1xuXHRibG9iLnJlYWRfc2hpZnQoMik7XG5cdHJldHVybiBibG9iLnJlYWRfc2hpZnQoNCk7XG59XG5cbi8qIFtNUy1YTFNdIDIuNC44NyAqL1xuZnVuY3Rpb24gcGFyc2VfRGVmYXVsdFJvd0hlaWdodChibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIGYgPSAwO1xuXHRpZighKG9wdHMgJiYgb3B0cy5iaWZmID09IDIpKSB7XG5cdFx0ZiA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0fVxuXHR2YXIgbWl5UncgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdGlmKChvcHRzICYmIG9wdHMuYmlmZiA9PSAyKSkge1xuXHRcdGYgPSAxIC0gKG1peVJ3ID4+IDE1KTsgbWl5UncgJj0gMHg3ZmZmO1xuXHR9XG5cdHZhciBmbCA9IHtVbnN5bmNlZDpmJjEsRHlaZXJvOihmJjIpPj4xLEV4QXNjOihmJjQpPj4yLEV4RHNjOihmJjgpPj4zfTtcblx0cmV0dXJuIFtmbCwgbWl5UnddO1xufVxuXG4vKiBbTVMtWExTXSAyLjQuMzQ1IFRPRE8gKi9cbmZ1bmN0aW9uIHBhcnNlX1dpbmRvdzEoYmxvYikge1xuXHR2YXIgeFduID0gYmxvYi5yZWFkX3NoaWZ0KDIpLCB5V24gPSBibG9iLnJlYWRfc2hpZnQoMiksIGR4V24gPSBibG9iLnJlYWRfc2hpZnQoMiksIGR5V24gPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBmbGFncyA9IGJsb2IucmVhZF9zaGlmdCgyKSwgaVRhYkN1ciA9IGJsb2IucmVhZF9zaGlmdCgyKSwgaVRhYkZpcnN0ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgY3RhYlNlbCA9IGJsb2IucmVhZF9zaGlmdCgyKSwgd1RhYlJhdGlvID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRyZXR1cm4geyBQb3M6IFt4V24sIHlXbl0sIERpbTogW2R4V24sIGR5V25dLCBGbGFnczogZmxhZ3MsIEN1clRhYjogaVRhYkN1cixcblx0XHRGaXJzdFRhYjogaVRhYkZpcnN0LCBTZWxlY3RlZDogY3RhYlNlbCwgVGFiUmF0aW86IHdUYWJSYXRpbyB9O1xufVxuZnVuY3Rpb24gd3JpdGVfV2luZG93MSgpIHtcblx0dmFyIG8gPSBuZXdfYnVmKDE4KTtcblx0by53cml0ZV9zaGlmdCgyLCAwKTtcblx0by53cml0ZV9zaGlmdCgyLCAwKTtcblx0by53cml0ZV9zaGlmdCgyLCAweDcyNjApO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDB4NDRjMCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMHgzOCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMSk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMHgwMWY0KTtcblx0cmV0dXJuIG87XG59XG4vKiBbTVMtWExTXSAyLjQuMzQ2IFRPRE8gKi9cbmZ1bmN0aW9uIHBhcnNlX1dpbmRvdzIoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdGlmKG9wdHMgJiYgb3B0cy5iaWZmID49IDIgJiYgb3B0cy5iaWZmIDwgNSkgcmV0dXJuIHt9O1xuXHR2YXIgZiA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0cmV0dXJuIHsgUlRMOiBmICYgMHg0MCB9O1xufVxuZnVuY3Rpb24gd3JpdGVfV2luZG93Mih2aWV3KSB7XG5cdHZhciBvID0gbmV3X2J1ZigxOCksIGYgPSAweDZiNjtcblx0aWYodmlldyAmJiB2aWV3LlJUTCkgZiB8PSAweDQwO1xuXHRvLndyaXRlX3NoaWZ0KDIsIGYpO1xuXHRvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRvLndyaXRlX3NoaWZ0KDQsIDY0KTtcblx0by53cml0ZV9zaGlmdCg0LCAwKTtcblx0by53cml0ZV9zaGlmdCg0LCAwKTtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNdIDIuNC4xODkgVE9ETyAqL1xuZnVuY3Rpb24gcGFyc2VfUGFuZSgvKmJsb2IsIGxlbmd0aCwgb3B0cyovKSB7XG59XG5cbi8qIFtNUy1YTFNdIDIuNC4xMjIgVE9ETyAqL1xuZnVuY3Rpb24gcGFyc2VfRm9udChibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIG8gPSB7XG5cdFx0ZHlIZWlnaHQ6IGJsb2IucmVhZF9zaGlmdCgyKSxcblx0XHRmbDogYmxvYi5yZWFkX3NoaWZ0KDIpXG5cdH07XG5cdHN3aXRjaCgob3B0cyAmJiBvcHRzLmJpZmYpIHx8IDgpIHtcblx0XHRjYXNlIDI6IGJyZWFrO1xuXHRcdGNhc2UgMzogY2FzZSA0OiBibG9iLmwgKz0gMjsgYnJlYWs7XG5cdFx0ZGVmYXVsdDogYmxvYi5sICs9IDEwOyBicmVhaztcblx0fVxuXHRvLm5hbWUgPSBwYXJzZV9TaG9ydFhMVW5pY29kZVN0cmluZyhibG9iLCAwLCBvcHRzKTtcblx0cmV0dXJuIG87XG59XG5mdW5jdGlvbiB3cml0ZV9Gb250KGRhdGEsIG9wdHMpIHtcblx0dmFyIG5hbWUgPSBkYXRhLm5hbWUgfHwgXCJBcmlhbFwiO1xuXHR2YXIgYjUgPSAob3B0cyAmJiAob3B0cy5iaWZmID09IDUpKSwgdyA9IChiNSA/ICgxNSArIG5hbWUubGVuZ3RoKSA6ICgxNiArIDIgKiBuYW1lLmxlbmd0aCkpO1xuXHR2YXIgbyA9IG5ld19idWYodyk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgKGRhdGEuc3ogfHwgMTIpICogMjApO1xuXHRvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDQwMCk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoMSwgbmFtZS5sZW5ndGgpO1xuXHRpZighYjUpIG8ud3JpdGVfc2hpZnQoMSwgMSk7XG5cdG8ud3JpdGVfc2hpZnQoKGI1ID8gMSA6IDIpICogbmFtZS5sZW5ndGgsIG5hbWUsIChiNSA/IFwic2Jjc1wiIDogXCJ1dGYxNmxlXCIpKTtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNdIDIuNC4xNDkgKi9cbmZ1bmN0aW9uIHBhcnNlX0xhYmVsU3N0KGJsb2IpIHtcblx0dmFyIGNlbGwgPSBwYXJzZV9YTFNDZWxsKGJsb2IpO1xuXHRjZWxsLmlzc3QgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdHJldHVybiBjZWxsO1xufVxuZnVuY3Rpb24gd3JpdGVfTGFiZWxTc3QoUiwgQywgdiwgb3MgKSB7XG5cdHZhciBvID0gbmV3X2J1ZigxMCk7XG5cdHdyaXRlX1hMU0NlbGwoUiwgQywgb3MsIG8pO1xuXHRvLndyaXRlX3NoaWZ0KDQsIHYpO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU10gMi40LjE0OCAqL1xuZnVuY3Rpb24gcGFyc2VfTGFiZWwoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdGlmKG9wdHMuYmlmZmd1ZXNzICYmIG9wdHMuYmlmZiA9PSAyKSBvcHRzLmJpZmYgPSA1O1xuXHR2YXIgdGFyZ2V0ID0gYmxvYi5sICsgbGVuZ3RoO1xuXHR2YXIgY2VsbCA9IHBhcnNlX1hMU0NlbGwoYmxvYiwgNik7XG5cdGlmKG9wdHMuYmlmZiA9PSAyKSBibG9iLmwrKztcblx0dmFyIHN0ciA9IHBhcnNlX1hMVW5pY29kZVN0cmluZyhibG9iLCB0YXJnZXQgLSBibG9iLmwsIG9wdHMpO1xuXHRjZWxsLnZhbCA9IHN0cjtcblx0cmV0dXJuIGNlbGw7XG59XG5mdW5jdGlvbiB3cml0ZV9MYWJlbChSLCBDLCB2LCBvcywgb3B0cykge1xuXHR2YXIgYjggPSAhb3B0cyB8fCBvcHRzLmJpZmYgPT0gODtcblx0dmFyIG8gPSBuZXdfYnVmKDYgKyAyICsgKCtiOCkgKyAoMSArIGI4KSAqIHYubGVuZ3RoKTtcblx0d3JpdGVfWExTQ2VsbChSLCBDLCBvcywgbyk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgdi5sZW5ndGgpO1xuXHRpZihiOCkgby53cml0ZV9zaGlmdCgxLCAxKTtcblx0by53cml0ZV9zaGlmdCgoMSArIGI4KSAqIHYubGVuZ3RoLCB2LCBiOCA/ICd1dGYxNmxlJyA6ICdzYmNzJyk7XG5cdHJldHVybiBvO1xufVxuXG5cbi8qIFtNUy1YTFNdIDIuNC4xMjYgTnVtYmVyIEZvcm1hdHMgKi9cbmZ1bmN0aW9uIHBhcnNlX0Zvcm1hdChibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIG51bUZtdElkID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgZm10c3RyID0gcGFyc2VfWExVbmljb2RlU3RyaW5nMihibG9iLCAwLCBvcHRzKTtcblx0cmV0dXJuIFtudW1GbXRJZCwgZm10c3RyXTtcbn1cbmZ1bmN0aW9uIHdyaXRlX0Zvcm1hdChpLCBmLCBvcHRzLCBvKSB7XG5cdHZhciBiNSA9IChvcHRzICYmIChvcHRzLmJpZmYgPT0gNSkpO1xuXHRpZighbykgbyA9IG5ld19idWYoYjUgPyAoMyArIGYubGVuZ3RoKSA6ICg1ICsgMiAqIGYubGVuZ3RoKSk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgaSk7XG5cdG8ud3JpdGVfc2hpZnQoKGI1ID8gMSA6IDIpLCBmLmxlbmd0aCk7XG5cdGlmKCFiNSkgby53cml0ZV9zaGlmdCgxLCAxKTtcblx0by53cml0ZV9zaGlmdCgoYjUgPyAxIDogMikgKiBmLmxlbmd0aCwgZiwgKGI1ID8gJ3NiY3MnIDogJ3V0ZjE2bGUnKSk7XG5cdHZhciBvdXQgPSAoby5sZW5ndGggPiBvLmwpID8gby5zbGljZSgwLCBvLmwpIDogbztcblx0aWYob3V0LmwgPT0gbnVsbCkgb3V0LmwgPSBvdXQubGVuZ3RoO1xuXHRyZXR1cm4gb3V0O1xufVxudmFyIHBhcnNlX0JJRkYyRm9ybWF0ID0gcGFyc2VfWExVbmljb2RlU3RyaW5nMjtcblxuLyogW01TLVhMU10gMi40LjkwICovXG5mdW5jdGlvbiBwYXJzZV9EaW1lbnNpb25zKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgZW5kID0gYmxvYi5sICsgbGVuZ3RoO1xuXHR2YXIgdyA9IG9wdHMuYmlmZiA9PSA4IHx8ICFvcHRzLmJpZmYgPyA0IDogMjtcblx0dmFyIHIgPSBibG9iLnJlYWRfc2hpZnQodyksIFIgPSBibG9iLnJlYWRfc2hpZnQodyk7XG5cdHZhciBjID0gYmxvYi5yZWFkX3NoaWZ0KDIpLCBDID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgPSBlbmQ7XG5cdHJldHVybiB7czoge3I6ciwgYzpjfSwgZToge3I6UiwgYzpDfX07XG59XG5mdW5jdGlvbiB3cml0ZV9EaW1lbnNpb25zKHJhbmdlLCBvcHRzKSB7XG5cdHZhciB3ID0gb3B0cy5iaWZmID09IDggfHwgIW9wdHMuYmlmZiA/IDQgOiAyO1xuXHR2YXIgbyA9IG5ld19idWYoMip3ICsgNik7XG5cdG8ud3JpdGVfc2hpZnQodywgcmFuZ2Uucy5yKTtcblx0by53cml0ZV9zaGlmdCh3LCByYW5nZS5lLnIgKyAxKTtcblx0by53cml0ZV9zaGlmdCgyLCByYW5nZS5zLmMpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIHJhbmdlLmUuYyArIDEpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDApO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU10gMi40LjIyMCAqL1xuZnVuY3Rpb24gcGFyc2VfUksoYmxvYikge1xuXHR2YXIgcncgPSBibG9iLnJlYWRfc2hpZnQoMiksIGNvbCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIHJrcmVjID0gcGFyc2VfUmtSZWMoYmxvYik7XG5cdHJldHVybiB7cjpydywgYzpjb2wsIGl4ZmU6cmtyZWNbMF0sIHJrbnVtOnJrcmVjWzFdfTtcbn1cblxuLyogW01TLVhMU10gMi40LjE3NSAqL1xuZnVuY3Rpb24gcGFyc2VfTXVsUmsoYmxvYiwgbGVuZ3RoKSB7XG5cdHZhciB0YXJnZXQgPSBibG9iLmwgKyBsZW5ndGggLSAyO1xuXHR2YXIgcncgPSBibG9iLnJlYWRfc2hpZnQoMiksIGNvbCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIHJrcmVjcyA9IFtdO1xuXHR3aGlsZShibG9iLmwgPCB0YXJnZXQpIHJrcmVjcy5wdXNoKHBhcnNlX1JrUmVjKGJsb2IpKTtcblx0aWYoYmxvYi5sICE9PSB0YXJnZXQpIHRocm93IG5ldyBFcnJvcihcIk11bFJLIHJlYWQgZXJyb3JcIik7XG5cdHZhciBsYXN0Y29sID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRpZihya3JlY3MubGVuZ3RoICE9IGxhc3Rjb2wgLSBjb2wgKyAxKSB0aHJvdyBuZXcgRXJyb3IoXCJNdWxSSyBsZW5ndGggbWlzbWF0Y2hcIik7XG5cdHJldHVybiB7cjpydywgYzpjb2wsIEM6bGFzdGNvbCwgcmtyZWM6cmtyZWNzfTtcbn1cbi8qIFtNUy1YTFNdIDIuNC4xNzQgKi9cbmZ1bmN0aW9uIHBhcnNlX011bEJsYW5rKGJsb2IsIGxlbmd0aCkge1xuXHR2YXIgdGFyZ2V0ID0gYmxvYi5sICsgbGVuZ3RoIC0gMjtcblx0dmFyIHJ3ID0gYmxvYi5yZWFkX3NoaWZ0KDIpLCBjb2wgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBpeGZlcyA9IFtdO1xuXHR3aGlsZShibG9iLmwgPCB0YXJnZXQpIGl4ZmVzLnB1c2goYmxvYi5yZWFkX3NoaWZ0KDIpKTtcblx0aWYoYmxvYi5sICE9PSB0YXJnZXQpIHRocm93IG5ldyBFcnJvcihcIk11bEJsYW5rIHJlYWQgZXJyb3JcIik7XG5cdHZhciBsYXN0Y29sID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRpZihpeGZlcy5sZW5ndGggIT0gbGFzdGNvbCAtIGNvbCArIDEpIHRocm93IG5ldyBFcnJvcihcIk11bEJsYW5rIGxlbmd0aCBtaXNtYXRjaFwiKTtcblx0cmV0dXJuIHtyOnJ3LCBjOmNvbCwgQzpsYXN0Y29sLCBpeGZlOml4ZmVzfTtcbn1cblxuLyogW01TLVhMU10gMi41LjIwIDIuNS4yNDkgVE9ETzogaW50ZXJwcmV0IHZhbHVlcyBoZXJlICovXG5mdW5jdGlvbiBwYXJzZV9DZWxsU3R5bGVYRihibG9iLCBsZW5ndGgsIHN0eWxlLCBvcHRzKSB7XG5cdHZhciBvID0ge307XG5cdHZhciBhID0gYmxvYi5yZWFkX3NoaWZ0KDQpLCBiID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgYyA9IGJsb2IucmVhZF9zaGlmdCg0KSwgZCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0by5wYXR0ZXJuVHlwZSA9IFhMU0ZpbGxQYXR0ZXJuW2MgPj4gMjZdO1xuXG5cdGlmKCFvcHRzLmNlbGxTdHlsZXMpIHJldHVybiBvO1xuXHRvLmFsYyA9IGEgJiAweDA3O1xuXHRvLmZXcmFwID0gKGEgPj4gMykgJiAweDAxO1xuXHRvLmFsY1YgPSAoYSA+PiA0KSAmIDB4MDc7XG5cdG8uZkp1c3RMYXN0ID0gKGEgPj4gNykgJiAweDAxO1xuXHRvLnRyb3QgPSAoYSA+PiA4KSAmIDB4RkY7XG5cdG8uY0luZGVudCA9IChhID4+IDE2KSAmIDB4MEY7XG5cdG8uZlNocmlua1RvRml0ID0gKGEgPj4gMjApICYgMHgwMTtcblx0by5pUmVhZE9yZGVyID0gKGEgPj4gMjIpICYgMHgwMjtcblx0by5mQXRyTnVtID0gKGEgPj4gMjYpICYgMHgwMTtcblx0by5mQXRyRm50ID0gKGEgPj4gMjcpICYgMHgwMTtcblx0by5mQXRyQWxjID0gKGEgPj4gMjgpICYgMHgwMTtcblx0by5mQXRyQmRyID0gKGEgPj4gMjkpICYgMHgwMTtcblx0by5mQXRyUGF0ID0gKGEgPj4gMzApICYgMHgwMTtcblx0by5mQXRyUHJvdCA9IChhID4+IDMxKSAmIDB4MDE7XG5cblx0by5kZ0xlZnQgPSBiICYgMHgwRjtcblx0by5kZ1JpZ2h0ID0gKGIgPj4gNCkgJiAweDBGO1xuXHRvLmRnVG9wID0gKGIgPj4gOCkgJiAweDBGO1xuXHRvLmRnQm90dG9tID0gKGIgPj4gMTIpICYgMHgwRjtcblx0by5pY3ZMZWZ0ID0gKGIgPj4gMTYpICYgMHg3Rjtcblx0by5pY3ZSaWdodCA9IChiID4+IDIzKSAmIDB4N0Y7XG5cdG8uZ3JiaXREaWFnID0gKGIgPj4gMzApICYgMHgwMztcblxuXHRvLmljdlRvcCA9IGMgJiAweDdGO1xuXHRvLmljdkJvdHRvbSA9IChjID4+IDcpICYgMHg3Rjtcblx0by5pY3ZEaWFnID0gKGMgPj4gMTQpICYgMHg3Rjtcblx0by5kZ0RpYWcgPSAoYyA+PiAyMSkgJiAweDBGO1xuXG5cdG8uaWN2Rm9yZSA9IGQgJiAweDdGO1xuXHRvLmljdkJhY2sgPSAoZCA+PiA3KSAmIDB4N0Y7XG5cdG8uZnN4QnV0dG9uID0gKGQgPj4gMTQpICYgMHgwMTtcblx0cmV0dXJuIG87XG59XG4vL2Z1bmN0aW9uIHBhcnNlX0NlbGxYRihibG9iLCBsZW5ndGgsIG9wdHMpIHtyZXR1cm4gcGFyc2VfQ2VsbFN0eWxlWEYoYmxvYixsZW5ndGgsMCwgb3B0cyk7fVxuLy9mdW5jdGlvbiBwYXJzZV9TdHlsZVhGKGJsb2IsIGxlbmd0aCwgb3B0cykge3JldHVybiBwYXJzZV9DZWxsU3R5bGVYRihibG9iLGxlbmd0aCwxLCBvcHRzKTt9XG5cbi8qIFtNUy1YTFNdIDIuNC4zNTMgVE9ETzogYWN0dWFsbHkgZG8gdGhpcyByaWdodCAqL1xuZnVuY3Rpb24gcGFyc2VfWEYoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciBvID0ge307XG5cdG8uaWZudCA9IGJsb2IucmVhZF9zaGlmdCgyKTsgby5udW1GbXRJZCA9IGJsb2IucmVhZF9zaGlmdCgyKTsgby5mbGFncyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0by5mU3R5bGUgPSAoby5mbGFncyA+PiAyKSAmIDB4MDE7XG5cdGxlbmd0aCAtPSA2O1xuXHRvLmRhdGEgPSBwYXJzZV9DZWxsU3R5bGVYRihibG9iLCBsZW5ndGgsIG8uZlN0eWxlLCBvcHRzKTtcblx0cmV0dXJuIG87XG59XG5mdW5jdGlvbiB3cml0ZV9YRihkYXRhLCBpeGZlUCwgb3B0cywgbykge1xuXHR2YXIgYjUgPSAob3B0cyAmJiAob3B0cy5iaWZmID09IDUpKTtcblx0aWYoIW8pIG8gPSBuZXdfYnVmKGI1ID8gMTYgOiAyMCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdGlmKGRhdGEuc3R5bGUpIHtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIChkYXRhLm51bUZtdElkfHwwKSk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCAweEZGRjQpO1xuXHR9IGVsc2Uge1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgKGRhdGEubnVtRm10SWR8fDApKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIChpeGZlUDw8NCkpO1xuXHR9XG5cdHZhciBmID0gMDtcblx0aWYoZGF0YS5udW1GbXRJZCA+IDAgJiYgYjUpIGYgfD0gMHgwNDAwO1xuXHRvLndyaXRlX3NoaWZ0KDQsIGYpO1xuXHRvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRpZighYjUpIG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTXSAyLjQuMTM0ICovXG5mdW5jdGlvbiBwYXJzZV9HdXRzKGJsb2IpIHtcblx0YmxvYi5sICs9IDQ7XG5cdHZhciBvdXQgPSBbYmxvYi5yZWFkX3NoaWZ0KDIpLCBibG9iLnJlYWRfc2hpZnQoMildO1xuXHRpZihvdXRbMF0gIT09IDApIG91dFswXS0tO1xuXHRpZihvdXRbMV0gIT09IDApIG91dFsxXS0tO1xuXHRpZihvdXRbMF0gPiA3IHx8IG91dFsxXSA+IDcpIHRocm93IG5ldyBFcnJvcihcIkJhZCBHdXR0ZXJzOiBcIiArIG91dC5qb2luKFwifFwiKSk7XG5cdHJldHVybiBvdXQ7XG59XG5mdW5jdGlvbiB3cml0ZV9HdXRzKGd1dHMpIHtcblx0dmFyIG8gPSBuZXdfYnVmKDgpO1xuXHRvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRvLndyaXRlX3NoaWZ0KDIsIGd1dHNbMF0gPyBndXRzWzBdICsgMSA6IDApO1xuXHRvLndyaXRlX3NoaWZ0KDIsIGd1dHNbMV0gPyBndXRzWzFdICsgMSA6IDApO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU10gMi40LjI0ICovXG5mdW5jdGlvbiBwYXJzZV9Cb29sRXJyKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgY2VsbCA9IHBhcnNlX1hMU0NlbGwoYmxvYiwgNik7XG5cdGlmKG9wdHMuYmlmZiA9PSAyIHx8IGxlbmd0aCA9PSA5KSArK2Jsb2IubDtcblx0dmFyIHZhbCA9IHBhcnNlX0JlcyhibG9iLCAyKTtcblx0Y2VsbC52YWwgPSB2YWw7XG5cdGNlbGwudCA9ICh2YWwgPT09IHRydWUgfHwgdmFsID09PSBmYWxzZSkgPyAnYicgOiAnZSc7XG5cdHJldHVybiBjZWxsO1xufVxuZnVuY3Rpb24gd3JpdGVfQm9vbEVycihSLCBDLCB2LCBvcywgb3B0cywgdCkge1xuXHR2YXIgbyA9IG5ld19idWYoOCk7XG5cdHdyaXRlX1hMU0NlbGwoUiwgQywgb3MsIG8pO1xuXHR3cml0ZV9CZXModiwgdCwgbyk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTXSAyLjQuMTgwIE51bWJlciAqL1xuZnVuY3Rpb24gcGFyc2VfTnVtYmVyKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRpZihvcHRzLmJpZmZndWVzcyAmJiBvcHRzLmJpZmYgPT0gMikgb3B0cy5iaWZmID0gNTtcblx0dmFyIGNlbGwgPSBwYXJzZV9YTFNDZWxsKGJsb2IsIDYpO1xuXHR2YXIgeG51bSA9IHBhcnNlX1hudW0oYmxvYiwgOCk7XG5cdGNlbGwudmFsID0geG51bTtcblx0cmV0dXJuIGNlbGw7XG59XG5mdW5jdGlvbiB3cml0ZV9OdW1iZXIoUiwgQywgdiwgb3MpIHtcblx0dmFyIG8gPSBuZXdfYnVmKDE0KTtcblx0d3JpdGVfWExTQ2VsbChSLCBDLCBvcywgbyk7XG5cdHdyaXRlX1hudW0odiwgbyk7XG5cdHJldHVybiBvO1xufVxuXG52YXIgcGFyc2VfWExIZWFkZXJGb290ZXIgPSBwYXJzZV9PcHRYTFVuaWNvZGVTdHJpbmc7IC8vIFRPRE86IHBhcnNlIDIuNC4xMzZcblxuLyogW01TLVhMU10gMi40LjI3MSAqL1xuZnVuY3Rpb24gcGFyc2VfU3VwQm9vayhibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIGVuZCA9IGJsb2IubCArIGxlbmd0aDtcblx0dmFyIGN0YWIgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBjY2ggPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdG9wdHMuc2JjY2ggPSBjY2g7XG5cdGlmKGNjaCA9PSAweDA0MDEgfHwgY2NoID09IDB4M0EwMSkgcmV0dXJuIFtjY2gsIGN0YWJdO1xuXHRpZihjY2ggPCAweDAxIHx8IGNjaCA+MHhmZikgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBTdXBCb29rIHR5cGU6IFwiK2NjaCk7XG5cdHZhciB2aXJ0UGF0aCA9IHBhcnNlX1hMVW5pY29kZVN0cmluZ05vQ2NoKGJsb2IsIGNjaCk7XG5cdC8qIFRPRE86IDIuNS4yNzcgVmlydHVhbCBQYXRoICovXG5cdHZhciByZ3N0ID0gW107XG5cdHdoaWxlKGVuZCA+IGJsb2IubCkgcmdzdC5wdXNoKHBhcnNlX1hMVW5pY29kZVN0cmluZyhibG9iKSk7XG5cdHJldHVybiBbY2NoLCBjdGFiLCB2aXJ0UGF0aCwgcmdzdF07XG59XG5cbi8qIFtNUy1YTFNdIDIuNC4xMDUgVE9ETyAqL1xuZnVuY3Rpb24gcGFyc2VfRXh0ZXJuTmFtZShibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIGZsYWdzID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgYm9keTtcblx0dmFyIG8gPSAoe1xuXHRcdGZCdWlsdEluOiBmbGFncyAmIDB4MDEsXG5cdFx0ZldhbnRBZHZpc2U6IChmbGFncyA+Pj4gMSkgJiAweDAxLFxuXHRcdGZXYW50UGljdDogKGZsYWdzID4+PiAyKSAmIDB4MDEsXG5cdFx0Zk9sZTogKGZsYWdzID4+PiAzKSAmIDB4MDEsXG5cdFx0Zk9sZUxpbms6IChmbGFncyA+Pj4gNCkgJiAweDAxLFxuXHRcdGNmOiAoZmxhZ3MgPj4+IDUpICYgMHgzRkYsXG5cdFx0Zkljb246IGZsYWdzID4+PiAxNSAmIDB4MDFcblx0fSk7XG5cdGlmKG9wdHMuc2JjY2ggPT09IDB4M0EwMSkgYm9keSA9IHBhcnNlX0FkZGluVWRmKGJsb2IsIGxlbmd0aC0yLCBvcHRzKTtcblx0Ly9lbHNlIHRocm93IG5ldyBFcnJvcihcInVuc3VwcG9ydGVkIFN1cEJvb2sgY2NoOiBcIiArIG9wdHMuc2JjY2gpO1xuXHRvLmJvZHkgPSBib2R5IHx8IGJsb2IucmVhZF9zaGlmdChsZW5ndGgtMik7XG5cdGlmKHR5cGVvZiBib2R5ID09PSBcInN0cmluZ1wiKSBvLk5hbWUgPSBib2R5O1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU10gMi40LjE1MCBUT0RPICovXG52YXIgWExTTGJsQnVpbHRJbiA9IFtcblx0XCJfeGxubS5Db25zb2xpZGF0ZV9BcmVhXCIsXG5cdFwiX3hsbm0uQXV0b19PcGVuXCIsXG5cdFwiX3hsbm0uQXV0b19DbG9zZVwiLFxuXHRcIl94bG5tLkV4dHJhY3RcIixcblx0XCJfeGxubS5EYXRhYmFzZVwiLFxuXHRcIl94bG5tLkNyaXRlcmlhXCIsXG5cdFwiX3hsbm0uUHJpbnRfQXJlYVwiLFxuXHRcIl94bG5tLlByaW50X1RpdGxlc1wiLFxuXHRcIl94bG5tLlJlY29yZGVyXCIsXG5cdFwiX3hsbm0uRGF0YV9Gb3JtXCIsXG5cdFwiX3hsbm0uQXV0b19BY3RpdmF0ZVwiLFxuXHRcIl94bG5tLkF1dG9fRGVhY3RpdmF0ZVwiLFxuXHRcIl94bG5tLlNoZWV0X1RpdGxlXCIsXG5cdFwiX3hsbm0uX0ZpbHRlckRhdGFiYXNlXCJcbl07XG5mdW5jdGlvbiBwYXJzZV9MYmwoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciB0YXJnZXQgPSBibG9iLmwgKyBsZW5ndGg7XG5cdHZhciBmbGFncyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIGNoS2V5ID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHR2YXIgY2NoID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHR2YXIgY2NlID0gYmxvYi5yZWFkX3NoaWZ0KG9wdHMgJiYgb3B0cy5iaWZmID09IDIgPyAxIDogMik7XG5cdHZhciBpdGFiID0gMDtcblx0aWYoIW9wdHMgfHwgb3B0cy5iaWZmID49IDUpIHtcblx0XHRpZihvcHRzLmJpZmYgIT0gNSkgYmxvYi5sICs9IDI7XG5cdFx0aXRhYiA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRpZihvcHRzLmJpZmYgPT0gNSkgYmxvYi5sICs9IDI7XG5cdFx0YmxvYi5sICs9IDQ7XG5cdH1cblx0dmFyIG5hbWUgPSBwYXJzZV9YTFVuaWNvZGVTdHJpbmdOb0NjaChibG9iLCBjY2gsIG9wdHMpO1xuXHRpZihmbGFncyAmIDB4MjApIG5hbWUgPSBYTFNMYmxCdWlsdEluW25hbWUuY2hhckNvZGVBdCgwKV07XG5cdHZhciBucGZsZW4gPSB0YXJnZXQgLSBibG9iLmw7IGlmKG9wdHMgJiYgb3B0cy5iaWZmID09IDIpIC0tbnBmbGVuO1xuXHR2YXIgcmdjZSA9ICh0YXJnZXQgPT0gYmxvYi5sIHx8IGNjZSA9PT0gMCB8fCAhKG5wZmxlbiA+IDApKSA/IFtdIDogcGFyc2VfTmFtZVBhcnNlZEZvcm11bGEoYmxvYiwgbnBmbGVuLCBvcHRzLCBjY2UpO1xuXHRyZXR1cm4ge1xuXHRcdGNoS2V5OiBjaEtleSxcblx0XHROYW1lOiBuYW1lLFxuXHRcdGl0YWI6IGl0YWIsXG5cdFx0cmdjZTogcmdjZVxuXHR9O1xufVxuXG4vKiBbTVMtWExTXSAyLjQuMTA2IFRPRE86IHZlcmlmeSBmaWxlbmFtZSBlbmNvZGluZyAqL1xuZnVuY3Rpb24gcGFyc2VfRXh0ZXJuU2hlZXQoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdGlmKG9wdHMuYmlmZiA8IDgpIHJldHVybiBwYXJzZV9CSUZGNUV4dGVyblNoZWV0KGJsb2IsIGxlbmd0aCwgb3B0cyk7XG5cdHZhciBvID0gW10sIHRhcmdldCA9IGJsb2IubCArIGxlbmd0aCwgbGVuID0gYmxvYi5yZWFkX3NoaWZ0KG9wdHMuYmlmZiA+IDggPyA0IDogMik7XG5cdHdoaWxlKGxlbi0tICE9PSAwKSBvLnB1c2gocGFyc2VfWFRJKGJsb2IsIG9wdHMuYmlmZiA+IDggPyAxMiA6IDYsIG9wdHMpKTtcblx0XHQvLyBbaVN1cEJvb2ssIGl0YWJGaXJzdCwgaXRhYkxhc3RdO1xuXHRpZihibG9iLmwgIT0gdGFyZ2V0KSB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgRXh0ZXJuU2hlZXQ6IFwiICsgYmxvYi5sICsgXCIgIT0gXCIgKyB0YXJnZXQpO1xuXHRyZXR1cm4gbztcbn1cbmZ1bmN0aW9uIHBhcnNlX0JJRkY1RXh0ZXJuU2hlZXQoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdGlmKGJsb2JbYmxvYi5sICsgMV0gPT0gMHgwMykgYmxvYltibG9iLmxdKys7XG5cdHZhciBvID0gcGFyc2VfU2hvcnRYTFVuaWNvZGVTdHJpbmcoYmxvYiwgbGVuZ3RoLCBvcHRzKTtcblx0cmV0dXJuIG8uY2hhckNvZGVBdCgwKSA9PSAweDAzID8gby5zbGljZSgxKSA6IG87XG59XG5cbi8qIFtNUy1YTFNdIDIuNC4xNzYgVE9ETzogY2hlY2sgb2xkZXIgYmlmZiAqL1xuZnVuY3Rpb24gcGFyc2VfTmFtZUNtdChibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0aWYob3B0cy5iaWZmIDwgOCkgeyBibG9iLmwgKz0gbGVuZ3RoOyByZXR1cm47IH1cblx0dmFyIGNjaE5hbWUgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBjY2hDb21tZW50ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgbmFtZSA9IHBhcnNlX1hMVW5pY29kZVN0cmluZ05vQ2NoKGJsb2IsIGNjaE5hbWUsIG9wdHMpO1xuXHR2YXIgY29tbWVudCA9IHBhcnNlX1hMVW5pY29kZVN0cmluZ05vQ2NoKGJsb2IsIGNjaENvbW1lbnQsIG9wdHMpO1xuXHRyZXR1cm4gW25hbWUsIGNvbW1lbnRdO1xufVxuXG4vKiBbTVMtWExTXSAyLjQuMjYwICovXG5mdW5jdGlvbiBwYXJzZV9TaHJGbWxhKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgcmVmID0gcGFyc2VfUmVmVShibG9iLCA2KTtcblx0YmxvYi5sKys7XG5cdHZhciBjVXNlID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRsZW5ndGggLT0gODtcblx0cmV0dXJuIFtwYXJzZV9TaGFyZWRQYXJzZWRGb3JtdWxhKGJsb2IsIGxlbmd0aCwgb3B0cyksIGNVc2UsIHJlZl07XG59XG5cbi8qIFtNUy1YTFNdIDIuNC40IFRPRE8gKi9cbmZ1bmN0aW9uIHBhcnNlX0FycmF5KGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgcmVmID0gcGFyc2VfUmVmKGJsb2IsIDYpO1xuXHQvKiBUT0RPOiBmQWx3YXlzQ2FsYyAqL1xuXHRzd2l0Y2gob3B0cy5iaWZmKSB7XG5cdFx0Y2FzZSAyOiBibG9iLmwgKys7IGxlbmd0aCAtPSA3OyBicmVhaztcblx0XHRjYXNlIDM6IGNhc2UgNDogYmxvYi5sICs9IDI7IGxlbmd0aCAtPSA4OyBicmVhaztcblx0XHRkZWZhdWx0OiBibG9iLmwgKz0gNjsgbGVuZ3RoIC09IDEyO1xuXHR9XG5cdHJldHVybiBbcmVmLCBwYXJzZV9BcnJheVBhcnNlZEZvcm11bGEoYmxvYiwgbGVuZ3RoLCBvcHRzLCByZWYpXTtcbn1cblxuLyogW01TLVhMU10gMi40LjE3MyAqL1xuZnVuY3Rpb24gcGFyc2VfTVRSU2V0dGluZ3MoYmxvYikge1xuXHR2YXIgZk1UUkVuYWJsZWQgPSBibG9iLnJlYWRfc2hpZnQoNCkgIT09IDB4MDA7XG5cdHZhciBmVXNlclNldFRocmVhZENvdW50ID0gYmxvYi5yZWFkX3NoaWZ0KDQpICE9PSAweDAwO1xuXHR2YXIgY1VzZXJUaHJlYWRDb3VudCA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0cmV0dXJuIFtmTVRSRW5hYmxlZCwgZlVzZXJTZXRUaHJlYWRDb3VudCwgY1VzZXJUaHJlYWRDb3VudF07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xODYgVE9ETzogQklGRjUgKi9cbmZ1bmN0aW9uIHBhcnNlX05vdGVTaChibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0aWYob3B0cy5iaWZmIDwgOCkgcmV0dXJuO1xuXHR2YXIgcm93ID0gYmxvYi5yZWFkX3NoaWZ0KDIpLCBjb2wgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBmbGFncyA9IGJsb2IucmVhZF9zaGlmdCgyKSwgaWRPYmogPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBzdEF1dGhvciA9IHBhcnNlX1hMVW5pY29kZVN0cmluZzIoYmxvYiwgMCwgb3B0cyk7XG5cdGlmKG9wdHMuYmlmZiA8IDgpIGJsb2IucmVhZF9zaGlmdCgxKTtcblx0cmV0dXJuIFt7cjpyb3csYzpjb2x9LCBzdEF1dGhvciwgaWRPYmosIGZsYWdzXTtcbn1cblxuLyogW01TLVhMU10gMi40LjE3OSAqL1xuZnVuY3Rpb24gcGFyc2VfTm90ZShibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0LyogVE9ETzogU3VwcG9ydCByZXZpc2lvbnMgKi9cblx0cmV0dXJuIHBhcnNlX05vdGVTaChibG9iLCBsZW5ndGgsIG9wdHMpO1xufVxuXG4vKiBbTVMtWExTXSAyLjQuMTY4ICovXG5mdW5jdGlvbiBwYXJzZV9NZXJnZUNlbGxzKGJsb2IsIGxlbmd0aCkge1xuXHR2YXIgbWVyZ2VzID0gW107XG5cdHZhciBjbWNzID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR3aGlsZSAoY21jcy0tKSBtZXJnZXMucHVzaChwYXJzZV9SZWY4VShibG9iLGxlbmd0aCkpO1xuXHRyZXR1cm4gbWVyZ2VzO1xufVxuZnVuY3Rpb24gd3JpdGVfTWVyZ2VDZWxscyhtZXJnZXMpIHtcblx0dmFyIG8gPSBuZXdfYnVmKDIgKyBtZXJnZXMubGVuZ3RoICogOCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgbWVyZ2VzLmxlbmd0aCk7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBtZXJnZXMubGVuZ3RoOyArK2kpIHdyaXRlX1JlZjhVKG1lcmdlc1tpXSwgbyk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTXSAyLjQuMTgxIFRPRE86IHBhcnNlIGFsbCB0aGUgdGhpbmdzISAqL1xuZnVuY3Rpb24gcGFyc2VfT2JqKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRpZihvcHRzICYmIG9wdHMuYmlmZiA8IDgpIHJldHVybiBwYXJzZV9CSUZGNU9iaihibG9iLCBsZW5ndGgsIG9wdHMpO1xuXHR2YXIgY21vID0gcGFyc2VfRnRDbW8oYmxvYiwgMjIpOyAvLyBpZCwgb3QsIGZsYWdzXG5cdHZhciBmdHMgPSBwYXJzZV9GdEFycmF5KGJsb2IsIGxlbmd0aC0yMiwgY21vWzFdKTtcblx0cmV0dXJuIHsgY21vOiBjbW8sIGZ0OmZ0cyB9O1xufVxuLyogZnJvbSBvbGRlciBzcGVjICovXG52YXIgcGFyc2VfQklGRjVPVCA9IFtdO1xucGFyc2VfQklGRjVPVFsweDA4XSA9IGZ1bmN0aW9uKGJsb2IsIGxlbmd0aCkge1xuXHR2YXIgdGd0ID0gYmxvYi5sICsgbGVuZ3RoO1xuXHRibG9iLmwgKz0gMTA7IC8vIHRvZG9cblx0dmFyIGNmID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgKz0gNDtcblx0YmxvYi5sICs9IDI7IC8vdmFyIGNiUGljdEZtbGEgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdGJsb2IubCArPSAyO1xuXHRibG9iLmwgKz0gMjsgLy92YXIgZ3JiaXQgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdGJsb2IubCArPSA0O1xuXHR2YXIgY2NoTmFtZSA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0YmxvYi5sICs9IGNjaE5hbWU7IC8vIFRPRE86IHN0TmFtZVxuXHRibG9iLmwgPSB0Z3Q7IC8vIFRPRE86IGZtbGFcblx0cmV0dXJuIHsgZm10OmNmIH07XG59O1xuXG5mdW5jdGlvbiBwYXJzZV9CSUZGNU9iaihibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0YmxvYi5sICs9IDQ7IC8vdmFyIGNudCA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0dmFyIG90ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgaWQgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBncmJpdCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0YmxvYi5sICs9IDI7IC8vdmFyIGNvbEwgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdGJsb2IubCArPSAyOyAvL3ZhciBkeEwgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdGJsb2IubCArPSAyOyAvL3ZhciByd1QgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdGJsb2IubCArPSAyOyAvL3ZhciBkeVQgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdGJsb2IubCArPSAyOyAvL3ZhciBjb2xSID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgKz0gMjsgLy92YXIgZHhSID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgKz0gMjsgLy92YXIgcndCID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgKz0gMjsgLy92YXIgZHlCID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgKz0gMjsgLy92YXIgY2JNYWNybyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0YmxvYi5sICs9IDY7XG5cdGxlbmd0aCAtPSAzNjtcblx0dmFyIGZ0cyA9IFtdO1xuXHRmdHMucHVzaCgocGFyc2VfQklGRjVPVFtvdF18fHBhcnNlbm9vcCkoYmxvYiwgbGVuZ3RoLCBvcHRzKSk7XG5cdHJldHVybiB7IGNtbzogW2lkLCBvdCwgZ3JiaXRdLCBmdDpmdHMgfTtcbn1cblxuLyogW01TLVhMU10gMi40LjMyOSBUT0RPOiBwYXJzZSBwcm9wZXJseSAqL1xuZnVuY3Rpb24gcGFyc2VfVHhPKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgcyA9IGJsb2IubDtcblx0dmFyIHRleHRzID0gXCJcIjtcbnRyeSB7XG5cdGJsb2IubCArPSA0O1xuXHR2YXIgb3QgPSAob3B0cy5sYXN0b2JqfHx7Y21vOlswLDBdfSkuY21vWzFdO1xuXHR2YXIgY29udHJvbEluZm87IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblx0aWYoWzAsNSw3LDExLDEyLDE0XS5pbmRleE9mKG90KSA9PSAtMSkgYmxvYi5sICs9IDY7XG5cdGVsc2UgY29udHJvbEluZm8gPSBwYXJzZV9Db250cm9sSW5mbyhibG9iLCA2LCBvcHRzKTtcblx0dmFyIGNjaFRleHQgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdC8qdmFyIGNiUnVucyA9ICovYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHQvKnZhciBpZm50RW1wdHkgPSAqL3BhcnNldWludDE2KGJsb2IsIDIpO1xuXHR2YXIgbGVuID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgKz0gbGVuO1xuXHQvL3ZhciBmbWxhID0gcGFyc2VfT2JqRm1sYShibG9iLCBzICsgbGVuZ3RoIC0gYmxvYi5sKTtcblxuXHRmb3IodmFyIGkgPSAxOyBpIDwgYmxvYi5sZW5zLmxlbmd0aC0xOyArK2kpIHtcblx0XHRpZihibG9iLmwtcyAhPSBibG9iLmxlbnNbaV0pIHRocm93IG5ldyBFcnJvcihcIlR4TzogYmFkIGNvbnRpbnVlIHJlY29yZFwiKTtcblx0XHR2YXIgaGRyID0gYmxvYltibG9iLmxdO1xuXHRcdHZhciB0ID0gcGFyc2VfWExVbmljb2RlU3RyaW5nTm9DY2goYmxvYiwgYmxvYi5sZW5zW2krMV0tYmxvYi5sZW5zW2ldLTEpO1xuXHRcdHRleHRzICs9IHQ7XG5cdFx0aWYodGV4dHMubGVuZ3RoID49IChoZHIgPyBjY2hUZXh0IDogMipjY2hUZXh0KSkgYnJlYWs7XG5cdH1cblx0aWYodGV4dHMubGVuZ3RoICE9PSBjY2hUZXh0ICYmIHRleHRzLmxlbmd0aCAhPT0gY2NoVGV4dCoyKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiY2NoVGV4dDogXCIgKyBjY2hUZXh0ICsgXCIgIT0gXCIgKyB0ZXh0cy5sZW5ndGgpO1xuXHR9XG5cblx0YmxvYi5sID0gcyArIGxlbmd0aDtcblx0LyogW01TLVhMU10gMi41LjI3MiBUeE9SdW5zICovXG4vL1x0dmFyIHJnVHhvUnVucyA9IFtdO1xuLy9cdGZvcih2YXIgaiA9IDA7IGogIT0gY2JSdW5zLzgtMTsgKytqKSBibG9iLmwgKz0gODtcbi8vXHR2YXIgY2NoVGV4dDIgPSBibG9iLnJlYWRfc2hpZnQoMik7XG4vL1x0aWYoY2NoVGV4dDIgIT09IGNjaFRleHQpIHRocm93IG5ldyBFcnJvcihcIlR4T0xhc3RSdW4gbWlzbWF0Y2g6IFwiICsgY2NoVGV4dDIgKyBcIiBcIiArIGNjaFRleHQpO1xuLy9cdGJsb2IubCArPSA2O1xuLy9cdGlmKHMgKyBsZW5ndGggIT0gYmxvYi5sKSB0aHJvdyBuZXcgRXJyb3IoXCJUeE8gXCIgKyAocyArIGxlbmd0aCkgKyBcIiwgYXQgXCIgKyBibG9iLmwpO1xuXHRyZXR1cm4geyB0OiB0ZXh0cyB9O1xufSBjYXRjaChlKSB7IGJsb2IubCA9IHMgKyBsZW5ndGg7IHJldHVybiB7IHQ6IHRleHRzIH07IH1cbn1cblxuLyogW01TLVhMU10gMi40LjE0MCAqL1xuZnVuY3Rpb24gcGFyc2VfSExpbmsoYmxvYiwgbGVuZ3RoKSB7XG5cdHZhciByZWYgPSBwYXJzZV9SZWY4VShibG9iLCA4KTtcblx0YmxvYi5sICs9IDE2OyAvKiBDTFNJRCAqL1xuXHR2YXIgaGxpbmsgPSBwYXJzZV9IeXBlcmxpbmsoYmxvYiwgbGVuZ3RoLTI0KTtcblx0cmV0dXJuIFtyZWYsIGhsaW5rXTtcbn1cbmZ1bmN0aW9uIHdyaXRlX0hMaW5rKGhsKSB7XG5cdHZhciBPID0gbmV3X2J1ZigyNCk7XG5cdHZhciByZWYgPSBkZWNvZGVfY2VsbChobFswXSk7XG5cdE8ud3JpdGVfc2hpZnQoMiwgcmVmLnIpOyBPLndyaXRlX3NoaWZ0KDIsIHJlZi5yKTtcblx0Ty53cml0ZV9zaGlmdCgyLCByZWYuYyk7IE8ud3JpdGVfc2hpZnQoMiwgcmVmLmMpO1xuXHR2YXIgY2xzaWQgPSBcImQwIGM5IGVhIDc5IGY5IGJhIGNlIDExIDhjIDgyIDAwIGFhIDAwIDRiIGE5IDBiXCIuc3BsaXQoXCIgXCIpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgTy53cml0ZV9zaGlmdCgxLCBwYXJzZUludChjbHNpZFtpXSwgMTYpKTtcblx0cmV0dXJuIGJjb25jYXQoW08sIHdyaXRlX0h5cGVybGluayhobFsxXSldKTtcbn1cblxuXG4vKiBbTVMtWExTXSAyLjQuMTQxICovXG5mdW5jdGlvbiBwYXJzZV9ITGlua1Rvb2x0aXAoYmxvYiwgbGVuZ3RoKSB7XG5cdGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIHJlZiA9IHBhcnNlX1JlZjhVKGJsb2IsIDgpO1xuXHR2YXIgd3pUb29sdGlwID0gYmxvYi5yZWFkX3NoaWZ0KChsZW5ndGgtMTApLzIsICdkYmNzLWNvbnQnKTtcblx0d3pUb29sdGlwID0gd3pUb29sdGlwLnJlcGxhY2UoY2hyMCxcIlwiKTtcblx0cmV0dXJuIFtyZWYsIHd6VG9vbHRpcF07XG59XG5mdW5jdGlvbiB3cml0ZV9ITGlua1Rvb2x0aXAoaGwpIHtcblx0dmFyIFRUID0gaGxbMV0uVG9vbHRpcDtcblx0dmFyIE8gPSBuZXdfYnVmKDEwICsgMiAqIChUVC5sZW5ndGggKyAxKSk7XG5cdE8ud3JpdGVfc2hpZnQoMiwgMHgwODAwKTtcblx0dmFyIHJlZiA9IGRlY29kZV9jZWxsKGhsWzBdKTtcblx0Ty53cml0ZV9zaGlmdCgyLCByZWYucik7IE8ud3JpdGVfc2hpZnQoMiwgcmVmLnIpO1xuXHRPLndyaXRlX3NoaWZ0KDIsIHJlZi5jKTsgTy53cml0ZV9zaGlmdCgyLCByZWYuYyk7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBUVC5sZW5ndGg7ICsraSkgTy53cml0ZV9zaGlmdCgyLCBUVC5jaGFyQ29kZUF0KGkpKTtcblx0Ty53cml0ZV9zaGlmdCgyLCAwKTtcblx0cmV0dXJuIE87XG59XG5cbi8qIFtNUy1YTFNdIDIuNC42MyAqL1xuZnVuY3Rpb24gcGFyc2VfQ291bnRyeShibG9iKSB7XG5cdHZhciBvID0gWzAsMF0sIGQ7XG5cdGQgPSBibG9iLnJlYWRfc2hpZnQoMik7IG9bMF0gPSBDb3VudHJ5RW51bVtkXSB8fCBkO1xuXHRkID0gYmxvYi5yZWFkX3NoaWZ0KDIpOyBvWzFdID0gQ291bnRyeUVudW1bZF0gfHwgZDtcblx0cmV0dXJuIG87XG59XG5mdW5jdGlvbiB3cml0ZV9Db3VudHJ5KG8pIHtcblx0aWYoIW8pIG8gPSBuZXdfYnVmKDQpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDB4MDEpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDB4MDEpO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU10gMi40LjUwIENscnRDbGllbnQgKi9cbmZ1bmN0aW9uIHBhcnNlX0NscnRDbGllbnQoYmxvYikge1xuXHR2YXIgY2N2ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgbyA9IFtdO1xuXHR3aGlsZShjY3YtLT4wKSBvLnB1c2gocGFyc2VfTG9uZ1JHQihibG9iLCA4KSk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTXSAyLjQuMTg4ICovXG5mdW5jdGlvbiBwYXJzZV9QYWxldHRlKGJsb2IpIHtcblx0dmFyIGNjdiA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIG8gPSBbXTtcblx0d2hpbGUoY2N2LS0+MCkgby5wdXNoKHBhcnNlX0xvbmdSR0IoYmxvYiwgOCkpO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU10gMi40LjM1NCAqL1xuZnVuY3Rpb24gcGFyc2VfWEZDUkMoYmxvYikge1xuXHRibG9iLmwgKz0gMjtcblx0dmFyIG8gPSB7Y3hmczowLCBjcmM6MH07XG5cdG8uY3hmcyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0by5jcmMgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTXSAyLjQuNTMgVE9ETzogcGFyc2UgZmxhZ3MgKi9cbi8qIFtNUy1YTFNCXSAyLjQuMzIzIFRPRE86IHBhcnNlIGZsYWdzICovXG5mdW5jdGlvbiBwYXJzZV9Db2xJbmZvKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRpZighb3B0cy5jZWxsU3R5bGVzKSByZXR1cm4gcGFyc2Vub29wKGJsb2IsIGxlbmd0aCk7XG5cdHZhciB3ID0gb3B0cyAmJiBvcHRzLmJpZmYgPj0gMTIgPyA0IDogMjtcblx0dmFyIGNvbEZpcnN0ID0gYmxvYi5yZWFkX3NoaWZ0KHcpO1xuXHR2YXIgY29sTGFzdCA9IGJsb2IucmVhZF9zaGlmdCh3KTtcblx0dmFyIGNvbGR4ID0gYmxvYi5yZWFkX3NoaWZ0KHcpO1xuXHR2YXIgaXhmZSA9IGJsb2IucmVhZF9zaGlmdCh3KTtcblx0dmFyIGZsYWdzID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRpZih3ID09IDIpIGJsb2IubCArPSAyO1xuXHR2YXIgbyA9ICh7czpjb2xGaXJzdCwgZTpjb2xMYXN0LCB3OmNvbGR4LCBpeGZlOml4ZmUsIGZsYWdzOmZsYWdzfSk7XG5cdGlmKG9wdHMuYmlmZiA+PSA1IHx8ICFvcHRzLmJpZmYpIG8ubGV2ZWwgPSAoZmxhZ3MgPj4gOCkgJiAweDc7XG5cdHJldHVybiBvO1xufVxuZnVuY3Rpb24gd3JpdGVfQ29sSW5mbyhjb2wsIGlkeCkge1xuXHR2YXIgbyA9IG5ld19idWYoMTIpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIGlkeCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgaWR4KTtcblx0by53cml0ZV9zaGlmdCgyLCBjb2wud2lkdGggKiAyNTYpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDApO1xuXHR2YXIgZiA9IDA7XG5cdGlmKGNvbC5oaWRkZW4pIGYgfD0gMTtcblx0by53cml0ZV9zaGlmdCgxLCBmKTtcblx0ZiA9IGNvbC5sZXZlbCB8fCAwO1xuXHRvLndyaXRlX3NoaWZ0KDEsIGYpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDApO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU10gMi40LjI1NyAqL1xuZnVuY3Rpb24gcGFyc2VfU2V0dXAoYmxvYiwgbGVuZ3RoKSB7XG5cdHZhciBvID0ge307XG5cdGlmKGxlbmd0aCA8IDMyKSByZXR1cm4gbztcblx0YmxvYi5sICs9IDE2O1xuXHRvLmhlYWRlciA9IHBhcnNlX1hudW0oYmxvYiwgOCk7XG5cdG8uZm9vdGVyID0gcGFyc2VfWG51bShibG9iLCA4KTtcblx0YmxvYi5sICs9IDI7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTXSAyLjQuMjYxICovXG5mdW5jdGlvbiBwYXJzZV9TaHRQcm9wcyhibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIGRlZiA9IHthcmVhOmZhbHNlfTtcblx0aWYob3B0cy5iaWZmICE9IDUpIHsgYmxvYi5sICs9IGxlbmd0aDsgcmV0dXJuIGRlZjsgfVxuXHR2YXIgZCA9IGJsb2IucmVhZF9zaGlmdCgxKTsgYmxvYi5sICs9IDM7XG5cdGlmKChkICYgMHgxMCkpIGRlZi5hcmVhID0gdHJ1ZTtcblx0cmV0dXJuIGRlZjtcbn1cblxuLyogW01TLVhMU10gMi40LjI0MSAqL1xuZnVuY3Rpb24gd3JpdGVfUlJUYWJJZChuKSB7XG5cdHZhciBvdXQgPSBuZXdfYnVmKDIgKiBuKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IG47ICsraSkgb3V0LndyaXRlX3NoaWZ0KDIsIGkrMSk7XG5cdHJldHVybiBvdXQ7XG59XG5cbnZhciBwYXJzZV9CbGFuayA9IHBhcnNlX1hMU0NlbGw7IC8qIFtNUy1YTFNdIDIuNC4yMCBKdXN0IHRoZSBjZWxsICovXG52YXIgcGFyc2VfU2NsID0gcGFyc2V1aW50MTZhOyAvKiBbTVMtWExTXSAyLjQuMjQ3IG51bSwgZGVuICovXG52YXIgcGFyc2VfU3RyaW5nID0gcGFyc2VfWExVbmljb2RlU3RyaW5nOyAvKiBbTVMtWExTXSAyLjQuMjY4ICovXG5cbi8qIC0tLSBTcGVjaWZpYyB0byB2ZXJzaW9ucyBiZWZvcmUgQklGRjggLS0tICovXG5mdW5jdGlvbiBwYXJzZV9JbURhdGEoYmxvYikge1xuXHR2YXIgY2YgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBlbnYgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBsY2IgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdHZhciBvID0ge2ZtdDpjZiwgZW52OmVudiwgbGVuOmxjYiwgZGF0YTpibG9iLnNsaWNlKGJsb2IubCxibG9iLmwrbGNiKX07XG5cdGJsb2IubCArPSBsY2I7XG5cdHJldHVybiBvO1xufVxuXG4vKiBCSUZGMl8/Pz8gd2hlcmUgPz8/IGlzIHRoZSBuYW1lIGZyb20gW1hMU10gKi9cbmZ1bmN0aW9uIHBhcnNlX0JJRkYyU1RSKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRpZihvcHRzLmJpZmZndWVzcyAmJiBvcHRzLmJpZmYgPT0gNSkgb3B0cy5iaWZmID0gMjtcblx0dmFyIGNlbGwgPSBwYXJzZV9YTFNDZWxsKGJsb2IsIDYpO1xuXHQrK2Jsb2IubDtcblx0dmFyIHN0ciA9IHBhcnNlX1hMVW5pY29kZVN0cmluZzIoYmxvYiwgbGVuZ3RoLTcsIG9wdHMpO1xuXHRjZWxsLnQgPSAnc3RyJztcblx0Y2VsbC52YWwgPSBzdHI7XG5cdHJldHVybiBjZWxsO1xufVxuXG5mdW5jdGlvbiBwYXJzZV9CSUZGMk5VTShibG9iKSB7XG5cdHZhciBjZWxsID0gcGFyc2VfWExTQ2VsbChibG9iLCA2KTtcblx0KytibG9iLmw7XG5cdHZhciBudW0gPSBwYXJzZV9YbnVtKGJsb2IsIDgpO1xuXHRjZWxsLnQgPSAnbic7XG5cdGNlbGwudmFsID0gbnVtO1xuXHRyZXR1cm4gY2VsbDtcbn1cbmZ1bmN0aW9uIHdyaXRlX0JJRkYyTlVNKHIsIGMsIHZhbCkge1xuXHR2YXIgb3V0ID0gbmV3X2J1ZigxNSk7XG5cdHdyaXRlX0JJRkYyQ2VsbChvdXQsIHIsIGMpO1xuXHRvdXQud3JpdGVfc2hpZnQoOCwgdmFsLCAnZicpO1xuXHRyZXR1cm4gb3V0O1xufVxuXG5mdW5jdGlvbiBwYXJzZV9CSUZGMklOVChibG9iKSB7XG5cdHZhciBjZWxsID0gcGFyc2VfWExTQ2VsbChibG9iLCA2KTtcblx0KytibG9iLmw7XG5cdHZhciBudW0gPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdGNlbGwudCA9ICduJztcblx0Y2VsbC52YWwgPSBudW07XG5cdHJldHVybiBjZWxsO1xufVxuZnVuY3Rpb24gd3JpdGVfQklGRjJJTlQociwgYywgdmFsKSB7XG5cdHZhciBvdXQgPSBuZXdfYnVmKDkpO1xuXHR3cml0ZV9CSUZGMkNlbGwob3V0LCByLCBjKTtcblx0b3V0LndyaXRlX3NoaWZ0KDIsIHZhbCk7XG5cdHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIHBhcnNlX0JJRkYyU1RSSU5HKGJsb2IpIHtcblx0dmFyIGNjaCA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0aWYoY2NoID09PSAwKSB7IGJsb2IubCsrOyByZXR1cm4gXCJcIjsgfVxuXHRyZXR1cm4gYmxvYi5yZWFkX3NoaWZ0KGNjaCwgJ3NiY3MtY29udCcpO1xufVxuXG4vKiBUT0RPOiBjb252ZXJ0IHRvIEJJRkY4IGZvbnQgc3RydWN0ICovXG5mdW5jdGlvbiBwYXJzZV9CSUZGMkZPTlRYVFJBKGJsb2IsIGxlbmd0aCkge1xuXHRibG9iLmwgKz0gNjsgLy8gdW5rbm93blxuXHRibG9iLmwgKz0gMjsgLy8gZm9udCB3ZWlnaHQgXCJibHNcIlxuXHRibG9iLmwgKz0gMTsgLy8gY2hhcnNldFxuXHRibG9iLmwgKz0gMzsgLy8gdW5rbm93blxuXHRibG9iLmwgKz0gMTsgLy8gZm9udCBmYW1pbHlcblx0YmxvYi5sICs9IGxlbmd0aCAtIDEzO1xufVxuXG4vKiBUT0RPOiBwYXJzZSByaWNoIHRleHQgcnVucyAqL1xuZnVuY3Rpb24gcGFyc2VfUlN0cmluZyhibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIGVuZCA9IGJsb2IubCArIGxlbmd0aDtcblx0dmFyIGNlbGwgPSBwYXJzZV9YTFNDZWxsKGJsb2IsIDYpO1xuXHR2YXIgY2NoID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgc3RyID0gcGFyc2VfWExVbmljb2RlU3RyaW5nTm9DY2goYmxvYiwgY2NoLCBvcHRzKTtcblx0YmxvYi5sID0gZW5kO1xuXHRjZWxsLnQgPSAnc3RyJztcblx0Y2VsbC52YWwgPSBzdHI7XG5cdHJldHVybiBjZWxsO1xufVxuLyogZnJvbSBqcy1oYXJiIChDKSAyMDE0LXByZXNlbnQgIFNoZWV0SlMgKi9cbnZhciBEQkYgPSAoZnVuY3Rpb24oKSB7XG52YXIgZGJmX2NvZGVwYWdlX21hcCA9IHtcblx0LyogQ29kZSBQYWdlcyBTdXBwb3J0ZWQgYnkgVmlzdWFsIEZveFBybyAqL1xuMHgwMTogICA0MzcsICAgICAgICAgICAweDAyOiAgIDg1MCxcbjB4MDM6ICAxMjUyLCAgICAgICAgICAgMHgwNDogMTAwMDAsXG4weDY0OiAgIDg1MiwgICAgICAgICAgIDB4NjU6ICAgODY2LFxuMHg2NjogICA4NjUsICAgICAgICAgICAweDY3OiAgIDg2MSxcbjB4Njg6ICAgODk1LCAgICAgICAgICAgMHg2OTogICA2MjAsXG4weDZBOiAgIDczNywgICAgICAgICAgIDB4NkI6ICAgODU3LFxuMHg3ODogICA5NTAsICAgICAgICAgICAweDc5OiAgIDk0OSxcbjB4N0E6ICAgOTM2LCAgICAgICAgICAgMHg3QjogICA5MzIsXG4weDdDOiAgIDg3NCwgICAgICAgICAgIDB4N0Q6ICAxMjU1LFxuMHg3RTogIDEyNTYsICAgICAgICAgICAweDk2OiAxMDAwNyxcbjB4OTc6IDEwMDI5LCAgICAgICAgICAgMHg5ODogMTAwMDYsXG4weEM4OiAgMTI1MCwgICAgICAgICAgIDB4Qzk6ICAxMjUxLFxuMHhDQTogIDEyNTQsICAgICAgICAgICAweENCOiAgMTI1MyxcblxuXHQvKiBzaGFwZWZpbGUgREJGIGV4dGVuc2lvbiAqL1xuMHgwMDogMjAxMjcsICAgICAgICAgICAweDA4OiAgIDg2NSxcbjB4MDk6ICAgNDM3LCAgICAgICAgICAgMHgwQTogICA4NTAsXG4weDBCOiAgIDQzNywgICAgICAgICAgIDB4MEQ6ICAgNDM3LFxuMHgwRTogICA4NTAsICAgICAgICAgICAweDBGOiAgIDQzNyxcbjB4MTA6ICAgODUwLCAgICAgICAgICAgMHgxMTogICA0MzcsXG4weDEyOiAgIDg1MCwgICAgICAgICAgIDB4MTM6ICAgOTMyLFxuMHgxNDogICA4NTAsICAgICAgICAgICAweDE1OiAgIDQzNyxcbjB4MTY6ICAgODUwLCAgICAgICAgICAgMHgxNzogICA4NjUsXG4weDE4OiAgIDQzNywgICAgICAgICAgIDB4MTk6ICAgNDM3LFxuMHgxQTogICA4NTAsICAgICAgICAgICAweDFCOiAgIDQzNyxcbjB4MUM6ICAgODYzLCAgICAgICAgICAgMHgxRDogICA4NTAsXG4weDFGOiAgIDg1MiwgICAgICAgICAgIDB4MjI6ICAgODUyLFxuMHgyMzogICA4NTIsICAgICAgICAgICAweDI0OiAgIDg2MCxcbjB4MjU6ICAgODUwLCAgICAgICAgICAgMHgyNjogICA4NjYsXG4weDM3OiAgIDg1MCwgICAgICAgICAgIDB4NDA6ICAgODUyLFxuMHg0RDogICA5MzYsICAgICAgICAgICAweDRFOiAgIDk0OSxcbjB4NEY6ICAgOTUwLCAgICAgICAgICAgMHg1MDogICA4NzQsXG4weDU3OiAgMTI1MiwgICAgICAgICAgIDB4NTg6ICAxMjUyLFxuMHg1OTogIDEyNTIsICAgICAgICAgICAweDZDOiAgIDg2MyxcbjB4ODY6ICAgNzM3LCAgICAgICAgICAgMHg4NzogICA4NTIsXG4weDg4OiAgIDg1NywgICAgICAgICAgIDB4Q0M6ICAxMjU3LFxuXG4weEZGOiAxNjk2OVxufTtcbnZhciBkYmZfcmV2ZXJzZV9tYXAgPSBldmVydCh7XG4weDAxOiAgIDQzNywgICAgICAgICAgIDB4MDI6ICAgODUwLFxuMHgwMzogIDEyNTIsICAgICAgICAgICAweDA0OiAxMDAwMCxcbjB4NjQ6ICAgODUyLCAgICAgICAgICAgMHg2NTogICA4NjYsXG4weDY2OiAgIDg2NSwgICAgICAgICAgIDB4Njc6ICAgODYxLFxuMHg2ODogICA4OTUsICAgICAgICAgICAweDY5OiAgIDYyMCxcbjB4NkE6ICAgNzM3LCAgICAgICAgICAgMHg2QjogICA4NTcsXG4weDc4OiAgIDk1MCwgICAgICAgICAgIDB4Nzk6ICAgOTQ5LFxuMHg3QTogICA5MzYsICAgICAgICAgICAweDdCOiAgIDkzMixcbjB4N0M6ICAgODc0LCAgICAgICAgICAgMHg3RDogIDEyNTUsXG4weDdFOiAgMTI1NiwgICAgICAgICAgIDB4OTY6IDEwMDA3LFxuMHg5NzogMTAwMjksICAgICAgICAgICAweDk4OiAxMDAwNixcbjB4Qzg6ICAxMjUwLCAgICAgICAgICAgMHhDOTogIDEyNTEsXG4weENBOiAgMTI1NCwgICAgICAgICAgIDB4Q0I6ICAxMjUzLFxuMHgwMDogMjAxMjdcbn0pO1xudmFyIERCRl9TVVBQT1JURURfVkVSU0lPTlMgPSBbMHgwMiwgMHgwMywgMHgzMCwgMHgzMSwgMHg4MywgMHg4QiwgMHg4QywgMHhGNV07XG4vKiBUT0RPOiBmaW5kIGFuIGFjdHVhbCBzcGVjaWZpY2F0aW9uICovXG5mdW5jdGlvbiBkYmZfdG9fYW9hKGJ1Ziwgb3B0cykge1xuXHR2YXIgb3V0ID0gW107XG5cdHZhciBkID0gKG5ld19yYXdfYnVmKDEpKTtcblx0c3dpdGNoKG9wdHMudHlwZSkge1xuXHRcdGNhc2UgJ2Jhc2U2NCc6IGQgPSBzMmEoQmFzZTY0LmRlY29kZShidWYpKTsgYnJlYWs7XG5cdFx0Y2FzZSAnYmluYXJ5JzogZCA9IHMyYShidWYpOyBicmVhaztcblx0XHRjYXNlICdidWZmZXInOlxuXHRcdGNhc2UgJ2FycmF5JzogZCA9IGJ1ZjsgYnJlYWs7XG5cdH1cblx0cHJlcF9ibG9iKGQsIDApO1xuXG5cdC8qIGhlYWRlciAqL1xuXHR2YXIgZnQgPSBkLnJlYWRfc2hpZnQoMSk7XG5cdHZhciBtZW1vID0gISEoZnQgJiAweDg4KTtcblx0dmFyIHZmcCA9IGZhbHNlLCBsNyA9IGZhbHNlO1xuXHRzd2l0Y2goZnQpIHtcblx0XHRjYXNlIDB4MDI6IGJyZWFrOyAvLyBkQkFTRSBJSVxuXHRcdGNhc2UgMHgwMzogYnJlYWs7IC8vIGRCQVNFIElJSVxuXHRcdGNhc2UgMHgzMDogdmZwID0gdHJ1ZTsgbWVtbyA9IHRydWU7IGJyZWFrOyAvLyBWRlBcblx0XHRjYXNlIDB4MzE6IHZmcCA9IHRydWU7IG1lbW8gPSB0cnVlOyBicmVhazsgLy8gVkZQIHdpdGggYXV0b2luY3JlbWVudFxuXHRcdC8vIDB4NDMgZEJBU0UgSVYgU1FMIHRhYmxlIGZpbGVzXG5cdFx0Ly8gMHg2MyBkQkFTRSBJViBTUUwgc3lzdGVtIGZpbGVzXG5cdFx0Y2FzZSAweDgzOiBicmVhazsgLy8gZEJBU0UgSUlJIHdpdGggbWVtb1xuXHRcdGNhc2UgMHg4QjogYnJlYWs7IC8vIGRCQVNFIElWIHdpdGggbWVtb1xuXHRcdGNhc2UgMHg4QzogbDcgPSB0cnVlOyBicmVhazsgLy8gZEJBU0UgTGV2ZWwgNyB3aXRoIG1lbW9cblx0XHQvLyBjYXNlIDB4Q0IgZEJBU0UgSVYgU1FMIHRhYmxlIGZpbGVzIHdpdGggbWVtb1xuXHRcdGNhc2UgMHhGNTogYnJlYWs7IC8vIEZveFBybyAyLnggd2l0aCBtZW1vXG5cdFx0Ly8gY2FzZSAweEZCIEZveEJBU0Vcblx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJEQkYgVW5zdXBwb3J0ZWQgVmVyc2lvbjogXCIgKyBmdC50b1N0cmluZygxNikpO1xuXHR9XG5cblx0dmFyIG5yb3cgPSAwLCBmcG9zID0gMHgwMjA5O1xuXHRpZihmdCA9PSAweDAyKSBucm93ID0gZC5yZWFkX3NoaWZ0KDIpO1xuXHRkLmwgKz0gMzsgLy8gZEJBU0UgSUkgc3RvcmVzIERETU1ZWSBkYXRlLCBvdGhlcnMgdXNlIFlZTU1ERFxuXHRpZihmdCAhPSAweDAyKSBucm93ID0gZC5yZWFkX3NoaWZ0KDQpO1xuXHRpZihucm93ID4gMTA0ODU3NikgbnJvdyA9IDFlNjtcblxuXHRpZihmdCAhPSAweDAyKSBmcG9zID0gZC5yZWFkX3NoaWZ0KDIpOyAvLyBoZWFkZXIgbGVuZ3RoXG5cdHZhciBybGVuID0gZC5yZWFkX3NoaWZ0KDIpOyAvLyByZWNvcmQgbGVuZ3RoXG5cblx0dmFyIC8qZmxhZ3MgPSAwLCovIGN1cnJlbnRfY3AgPSBvcHRzLmNvZGVwYWdlIHx8IDEyNTI7XG5cdGlmKGZ0ICE9IDB4MDIpIHsgLy8gMjAgcmVzZXJ2ZWQgYnl0ZXNcblx0XHRkLmwrPTE2O1xuXHRcdC8qZmxhZ3MgPSAqL2QucmVhZF9zaGlmdCgxKTtcblx0XHQvL2lmKG1lbW8gJiYgKChmbGFncyAmIDB4MDIpID09PSAwKSkgdGhyb3cgbmV3IEVycm9yKFwiREJGIEZsYWdzIFwiICsgZmxhZ3MudG9TdHJpbmcoMTYpICsgXCIgZnQgXCIgKyBmdC50b1N0cmluZygxNikpO1xuXG5cdFx0LyogY29kZXBhZ2UgcHJlc2VudCBpbiBGb3hQcm8gYW5kIGRCQVNFIExldmVsIDcgKi9cblx0XHRpZihkW2QubF0gIT09IDApIGN1cnJlbnRfY3AgPSBkYmZfY29kZXBhZ2VfbWFwW2RbZC5sXV07XG5cdFx0ZC5sKz0xO1xuXG5cdFx0ZC5sKz0yO1xuXHR9XG5cdGlmKGw3KSBkLmwgKz0gMzY7IC8vIExldmVsIDc6IDMyIGJ5dGUgXCJMYW5ndWFnZSBkcml2ZXIgbmFtZVwiLCA0IGJ5dGUgcmVzZXJ2ZWRcblxudmFyIGZpZWxkcyA9IFtdLCBmaWVsZCA9ICh7fSk7XG5cdHZhciBoZW5kID0gTWF0aC5taW4oZC5sZW5ndGgsIChmdCA9PSAweDAyID8gMHgyMDkgOiAoZnBvcyAtIDEwIC0gKHZmcCA/IDI2NCA6IDApKSkpO1xuXHR2YXIgd3cgPSBsNyA/IDMyIDogMTE7XG5cdHdoaWxlKGQubCA8IGhlbmQgJiYgZFtkLmxdICE9IDB4MGQpIHtcblx0XHRmaWVsZCA9ICh7fSk7XG5cdFx0ZmllbGQubmFtZSA9IGNwdGFibGUudXRpbHMuZGVjb2RlKGN1cnJlbnRfY3AsIGQuc2xpY2UoZC5sLCBkLmwrd3cpKS5yZXBsYWNlKC9bXFx1MDAwMFxcclxcbl0uKiQvZyxcIlwiKTtcblx0XHRkLmwgKz0gd3c7XG5cdFx0ZmllbGQudHlwZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoZC5yZWFkX3NoaWZ0KDEpKTtcblx0XHRpZihmdCAhPSAweDAyICYmICFsNykgZmllbGQub2Zmc2V0ID0gZC5yZWFkX3NoaWZ0KDQpO1xuXHRcdGZpZWxkLmxlbiA9IGQucmVhZF9zaGlmdCgxKTtcblx0XHRpZihmdCA9PSAweDAyKSBmaWVsZC5vZmZzZXQgPSBkLnJlYWRfc2hpZnQoMik7XG5cdFx0ZmllbGQuZGVjID0gZC5yZWFkX3NoaWZ0KDEpO1xuXHRcdGlmKGZpZWxkLm5hbWUubGVuZ3RoKSBmaWVsZHMucHVzaChmaWVsZCk7XG5cdFx0aWYoZnQgIT0gMHgwMikgZC5sICs9IGw3ID8gMTMgOiAxNDtcblx0XHRzd2l0Y2goZmllbGQudHlwZSkge1xuXHRcdFx0Y2FzZSAnQic6IC8vIERvdWJsZSAoVkZQKSAvIEJpbmFyeSAoZEJBU0UgTDcpXG5cdFx0XHRcdGlmKCghdmZwIHx8IGZpZWxkLmxlbiAhPSA4KSAmJiBvcHRzLldURikgY29uc29sZS5sb2coJ1NraXBwaW5nICcgKyBmaWVsZC5uYW1lICsgJzonICsgZmllbGQudHlwZSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnRyc6IC8vIEdlbmVyYWwgKEZveFBybyBhbmQgZEJBU0UgTDcpXG5cdFx0XHRjYXNlICdQJzogLy8gUGljdHVyZSAoRm94UHJvIGFuZCBkQkFTRSBMNylcblx0XHRcdFx0aWYob3B0cy5XVEYpIGNvbnNvbGUubG9nKCdTa2lwcGluZyAnICsgZmllbGQubmFtZSArICc6JyArIGZpZWxkLnR5cGUpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJysnOiAvLyBBdXRvaW5jcmVtZW50IChkQkFTRSBMNyBvbmx5KVxuXHRcdFx0Y2FzZSAnMCc6IC8vIF9OdWxsRmxhZ3MgKFZGUCBvbmx5KVxuXHRcdFx0Y2FzZSAnQCc6IC8vIFRpbWVzdGFtcCAoZEJBU0UgTDcgb25seSlcblx0XHRcdGNhc2UgJ0MnOiAvLyBDaGFyYWN0ZXIgKGRCQVNFIElJKVxuXHRcdFx0Y2FzZSAnRCc6IC8vIERhdGUgKGRCQVNFIElJSSlcblx0XHRcdGNhc2UgJ0YnOiAvLyBGbG9hdCAoZEJBU0UgSVYpXG5cdFx0XHRjYXNlICdJJzogLy8gTG9uZyAoVkZQIGFuZCBkQkFTRSBMNylcblx0XHRcdGNhc2UgJ0wnOiAvLyBMb2dpY2FsIChkQkFTRSBJSSlcblx0XHRcdGNhc2UgJ00nOiAvLyBNZW1vIChkQkFTRSBJSUkpXG5cdFx0XHRjYXNlICdOJzogLy8gTnVtYmVyIChkQkFTRSBJSSlcblx0XHRcdGNhc2UgJ08nOiAvLyBEb3VibGUgKGRCQVNFIEw3IG9ubHkpXG5cdFx0XHRjYXNlICdUJzogLy8gRGF0ZXRpbWUgKFZGUCBvbmx5KVxuXHRcdFx0Y2FzZSAnWSc6IC8vIEN1cnJlbmN5IChWRlAgb25seSlcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gRmllbGQgVHlwZTogJyArIGZpZWxkLnR5cGUpO1xuXHRcdH1cblx0fVxuXG5cdGlmKGRbZC5sXSAhPT0gMHgwRCkgZC5sID0gZnBvcy0xO1xuXHRpZihkLnJlYWRfc2hpZnQoMSkgIT09IDB4MEQpIHRocm93IG5ldyBFcnJvcihcIkRCRiBUZXJtaW5hdG9yIG5vdCBmb3VuZCBcIiArIGQubCArIFwiIFwiICsgZFtkLmxdKTtcblx0ZC5sID0gZnBvcztcblxuXHQvKiBkYXRhICovXG5cdHZhciBSID0gMCwgQyA9IDA7XG5cdG91dFswXSA9IFtdO1xuXHRmb3IoQyA9IDA7IEMgIT0gZmllbGRzLmxlbmd0aDsgKytDKSBvdXRbMF1bQ10gPSBmaWVsZHNbQ10ubmFtZTtcblx0d2hpbGUobnJvdy0tID4gMCkge1xuXHRcdGlmKGRbZC5sXSA9PT0gMHgyQSkge1xuXHRcdFx0Ly8gVE9ETzogcmVjb3JkIG1hcmtlZCBhcyBkZWxldGVkIC0tIGNyZWF0ZSBhIGhpZGRlbiByb3c/XG5cdFx0XHRkLmwrPXJsZW47XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cdFx0KytkLmw7XG5cdFx0b3V0WysrUl0gPSBbXTsgQyA9IDA7XG5cdFx0Zm9yKEMgPSAwOyBDICE9IGZpZWxkcy5sZW5ndGg7ICsrQykge1xuXHRcdFx0dmFyIGRkID0gZC5zbGljZShkLmwsIGQubCtmaWVsZHNbQ10ubGVuKTsgZC5sKz1maWVsZHNbQ10ubGVuO1xuXHRcdFx0cHJlcF9ibG9iKGRkLCAwKTtcblx0XHRcdHZhciBzID0gY3B0YWJsZS51dGlscy5kZWNvZGUoY3VycmVudF9jcCwgZGQpO1xuXHRcdFx0c3dpdGNoKGZpZWxkc1tDXS50eXBlKSB7XG5cdFx0XHRcdGNhc2UgJ0MnOlxuXHRcdFx0XHRcdC8vIE5PVEU6IGl0IGlzIGNvbnZlbnRpb25hbCB0byB3cml0ZSAnICAvICAvICAnIGZvciBlbXB0eSBkYXRlc1xuXHRcdFx0XHRcdGlmKHMudHJpbSgpLmxlbmd0aCkgb3V0W1JdW0NdID0gcy5yZXBsYWNlKC9cXHMrJC8sXCJcIik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0QnOlxuXHRcdFx0XHRcdGlmKHMubGVuZ3RoID09PSA4KSBvdXRbUl1bQ10gPSBuZXcgRGF0ZSgrcy5zbGljZSgwLDQpLCArcy5zbGljZSg0LDYpLTEsICtzLnNsaWNlKDYsOCkpO1xuXHRcdFx0XHRcdGVsc2Ugb3V0W1JdW0NdID0gcztcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnRic6IG91dFtSXVtDXSA9IHBhcnNlRmxvYXQocy50cmltKCkpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnKyc6IGNhc2UgJ0knOiBvdXRbUl1bQ10gPSBsNyA/IGRkLnJlYWRfc2hpZnQoLTQsICdpJykgXiAweDgwMDAwMDAwIDogZGQucmVhZF9zaGlmdCg0LCAnaScpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnTCc6IHN3aXRjaChzLnRyaW0oKS50b1VwcGVyQ2FzZSgpKSB7XG5cdFx0XHRcdFx0Y2FzZSAnWSc6IGNhc2UgJ1QnOiBvdXRbUl1bQ10gPSB0cnVlOyBicmVhaztcblx0XHRcdFx0XHRjYXNlICdOJzogY2FzZSAnRic6IG91dFtSXVtDXSA9IGZhbHNlOyBicmVhaztcblx0XHRcdFx0XHRjYXNlICcnOiBjYXNlICc/JzogYnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiREJGIFVucmVjb2duaXplZCBMOnxcIiArIHMgKyBcInxcIik7XG5cdFx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAnTSc6IC8qIFRPRE86IGhhbmRsZSBtZW1vIGZpbGVzICovXG5cdFx0XHRcdFx0aWYoIW1lbW8pIHRocm93IG5ldyBFcnJvcihcIkRCRiBVbmV4cGVjdGVkIE1FTU8gZm9yIHR5cGUgXCIgKyBmdC50b1N0cmluZygxNikpO1xuXHRcdFx0XHRcdG91dFtSXVtDXSA9IFwiIyNNRU1PIyNcIiArIChsNyA/IHBhcnNlSW50KHMudHJpbSgpLCAxMCk6IGRkLnJlYWRfc2hpZnQoNCkpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdOJzpcblx0XHRcdFx0XHRzID0gcy5yZXBsYWNlKC9cXHUwMDAwL2csXCJcIikudHJpbSgpO1xuXHRcdFx0XHRcdC8vIE5PVEU6IGRCQVNFIElJIGludGVycHJldHMgXCIgIC4gIFwiIGFzIDBcblx0XHRcdFx0XHRpZihzICYmIHMgIT0gXCIuXCIpIG91dFtSXVtDXSA9ICtzIHx8IDA7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdAJzpcblx0XHRcdFx0XHQvLyBOT1RFOiBkQkFTRSBzcGVjcyBhcHBlYXIgdG8gYmUgaW5jb3JyZWN0XG5cdFx0XHRcdFx0b3V0W1JdW0NdID0gbmV3IERhdGUoZGQucmVhZF9zaGlmdCgtOCwgJ2YnKSAtIDB4Mzg4MzE3NTMzNDAwKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnVCc6IG91dFtSXVtDXSA9IG5ldyBEYXRlKChkZC5yZWFkX3NoaWZ0KDQpIC0gMHgyNTNEOEMpICogMHg1MjY1QzAwICsgZGQucmVhZF9zaGlmdCg0KSk7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdZJzogb3V0W1JdW0NdID0gZGQucmVhZF9zaGlmdCg0LCdpJykvMWU0OyBicmVhaztcblx0XHRcdFx0Y2FzZSAnTyc6IG91dFtSXVtDXSA9IC1kZC5yZWFkX3NoaWZ0KC04LCAnZicpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnQic6IGlmKHZmcCAmJiBmaWVsZHNbQ10ubGVuID09IDgpIHsgb3V0W1JdW0NdID0gZGQucmVhZF9zaGlmdCg4LCdmJyk7IGJyZWFrOyB9XG5cdFx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRjYXNlICdHJzogY2FzZSAnUCc6IGRkLmwgKz0gZmllbGRzW0NdLmxlbjsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJzAnOlxuXHRcdFx0XHRcdGlmKGZpZWxkc1tDXS5uYW1lID09PSAnX051bGxGbGFncycpIGJyZWFrO1xuXHRcdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiREJGIFVuc3VwcG9ydGVkIGRhdGEgdHlwZSBcIiArIGZpZWxkc1tDXS50eXBlKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0aWYoZnQgIT0gMHgwMikgaWYoZC5sIDwgZC5sZW5ndGggJiYgZFtkLmwrK10gIT0gMHgxQSkgdGhyb3cgbmV3IEVycm9yKFwiREJGIEVPRiBNYXJrZXIgbWlzc2luZyBcIiArIChkLmwtMSkgKyBcIiBvZiBcIiArIGQubGVuZ3RoICsgXCIgXCIgKyBkW2QubC0xXS50b1N0cmluZygxNikpO1xuXHRpZihvcHRzICYmIG9wdHMuc2hlZXRSb3dzKSBvdXQgPSBvdXQuc2xpY2UoMCwgb3B0cy5zaGVldFJvd3MpO1xuXHRyZXR1cm4gb3V0O1xufVxuXG5mdW5jdGlvbiBkYmZfdG9fc2hlZXQoYnVmLCBvcHRzKSB7XG5cdHZhciBvID0gb3B0cyB8fCB7fTtcblx0aWYoIW8uZGF0ZU5GKSBvLmRhdGVORiA9IFwieXl5eW1tZGRcIjtcblx0cmV0dXJuIGFvYV90b19zaGVldChkYmZfdG9fYW9hKGJ1ZiwgbyksIG8pO1xufVxuXG5mdW5jdGlvbiBkYmZfdG9fd29ya2Jvb2soYnVmLCBvcHRzKSB7XG5cdHRyeSB7IHJldHVybiBzaGVldF90b193b3JrYm9vayhkYmZfdG9fc2hlZXQoYnVmLCBvcHRzKSwgb3B0cyk7IH1cblx0Y2F0Y2goZSkgeyBpZihvcHRzICYmIG9wdHMuV1RGKSB0aHJvdyBlOyB9XG5cdHJldHVybiAoe1NoZWV0TmFtZXM6W10sU2hlZXRzOnt9fSk7XG59XG5cbnZhciBfUkxFTiA9IHsgJ0InOiA4LCAnQyc6IDI1MCwgJ0wnOiAxLCAnRCc6IDgsICc/JzogMCwgJyc6IDAgfTtcbmZ1bmN0aW9uIHNoZWV0X3RvX2RiZih3cywgb3B0cykge1xuXHR2YXIgbyA9IG9wdHMgfHwge307XG5cdGlmKCtvLmNvZGVwYWdlID49IDApIHNldF9jcCgrby5jb2RlcGFnZSk7XG5cdGlmKG8udHlwZSA9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgd3JpdGUgREJGIHRvIEpTIHN0cmluZ1wiKTtcblx0dmFyIGJhID0gYnVmX2FycmF5KCk7XG5cdHZhciBhb2EgPSBzaGVldF90b19qc29uKHdzLCB7aGVhZGVyOjEsIHJhdzp0cnVlLCBjZWxsRGF0ZXM6dHJ1ZX0pO1xuXHR2YXIgaGVhZGVycyA9IGFvYVswXSwgZGF0YSA9IGFvYS5zbGljZSgxKTtcblx0dmFyIGkgPSAwLCBqID0gMCwgaGNudCA9IDAsIHJsZW4gPSAxO1xuXHRmb3IoaSA9IDA7IGkgPCBoZWFkZXJzLmxlbmd0aDsgKytpKSB7XG5cdFx0aWYoaSA9PSBudWxsKSBjb250aW51ZTtcblx0XHQrK2hjbnQ7XG5cdFx0aWYodHlwZW9mIGhlYWRlcnNbaV0gPT09ICdudW1iZXInKSBoZWFkZXJzW2ldID0gaGVhZGVyc1tpXS50b1N0cmluZygxMCk7XG5cdFx0aWYodHlwZW9mIGhlYWRlcnNbaV0gIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgRXJyb3IoXCJEQkYgSW52YWxpZCBjb2x1bW4gbmFtZSBcIiArIGhlYWRlcnNbaV0gKyBcIiB8XCIgKyAodHlwZW9mIGhlYWRlcnNbaV0pICsgXCJ8XCIpO1xuXHRcdGlmKGhlYWRlcnMuaW5kZXhPZihoZWFkZXJzW2ldKSAhPT0gaSkgZm9yKGo9MDsgajwxMDI0Oysrailcblx0XHRcdGlmKGhlYWRlcnMuaW5kZXhPZihoZWFkZXJzW2ldICsgXCJfXCIgKyBqKSA9PSAtMSkgeyBoZWFkZXJzW2ldICs9IFwiX1wiICsgajsgYnJlYWs7IH1cblx0fVxuXHR2YXIgcmFuZ2UgPSBzYWZlX2RlY29kZV9yYW5nZSh3c1snIXJlZiddKTtcblx0dmFyIGNvbHR5cGVzID0gW107XG5cdGZvcihpID0gMDsgaSA8PSByYW5nZS5lLmMgLSByYW5nZS5zLmM7ICsraSkge1xuXHRcdHZhciBjb2wgPSBbXTtcblx0XHRmb3Ioaj0wOyBqIDwgZGF0YS5sZW5ndGg7ICsraikge1xuXHRcdFx0aWYoZGF0YVtqXVtpXSAhPSBudWxsKSBjb2wucHVzaChkYXRhW2pdW2ldKTtcblx0XHR9XG5cdFx0aWYoY29sLmxlbmd0aCA9PSAwIHx8IGhlYWRlcnNbaV0gPT0gbnVsbCkgeyBjb2x0eXBlc1tpXSA9ICc/JzsgY29udGludWU7IH1cblx0XHR2YXIgZ3Vlc3MgPSAnJywgX2d1ZXNzID0gJyc7XG5cdFx0Zm9yKGogPSAwOyBqIDwgY29sLmxlbmd0aDsgKytqKSB7XG5cdFx0XHRzd2l0Y2godHlwZW9mIGNvbFtqXSkge1xuXHRcdFx0XHQvKiBUT0RPOiBjaGVjayBpZiBMMiBjb21wYXQgaXMgZGVzaXJlZCAqL1xuXHRcdFx0XHRjYXNlICdudW1iZXInOiBfZ3Vlc3MgPSAnQic7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdzdHJpbmcnOiBfZ3Vlc3MgPSAnQyc7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdib29sZWFuJzogX2d1ZXNzID0gJ0wnOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnb2JqZWN0JzogX2d1ZXNzID0gY29sW2pdIGluc3RhbmNlb2YgRGF0ZSA/ICdEJyA6ICdDJzsgYnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6IF9ndWVzcyA9ICdDJztcblx0XHRcdH1cblx0XHRcdGd1ZXNzID0gZ3Vlc3MgJiYgZ3Vlc3MgIT0gX2d1ZXNzID8gJ0MnIDogX2d1ZXNzO1xuXHRcdFx0aWYoZ3Vlc3MgPT0gJ0MnKSBicmVhaztcblx0XHR9XG5cdFx0cmxlbiArPSBfUkxFTltndWVzc10gfHwgMDtcblx0XHRjb2x0eXBlc1tpXSA9IGd1ZXNzO1xuXHR9XG5cblx0dmFyIGggPSBiYS5uZXh0KDMyKTtcblx0aC53cml0ZV9zaGlmdCg0LCAweDEzMDIxMTMwKTtcblx0aC53cml0ZV9zaGlmdCg0LCBkYXRhLmxlbmd0aCk7XG5cdGgud3JpdGVfc2hpZnQoMiwgMjk2ICsgMzIgKiBoY250KTtcblx0aC53cml0ZV9zaGlmdCgyLCBybGVuKTtcblx0Zm9yKGk9MDsgaSA8IDQ7ICsraSkgaC53cml0ZV9zaGlmdCg0LCAwKTtcblx0aC53cml0ZV9zaGlmdCg0LCAweDAwMDAwMDAwIHwgKCgrZGJmX3JldmVyc2VfbWFwW2N1cnJlbnRfYW5zaV0gfHwgMHgwMyk8PDgpKTtcblxuXHRmb3IoaSA9IDAsIGogPSAwOyBpIDwgaGVhZGVycy5sZW5ndGg7ICsraSkge1xuXHRcdGlmKGhlYWRlcnNbaV0gPT0gbnVsbCkgY29udGludWU7XG5cdFx0dmFyIGhmID0gYmEubmV4dCgzMik7XG5cdFx0dmFyIF9mID0gKGhlYWRlcnNbaV0uc2xpY2UoLTEwKSArIFwiXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFwiKS5zbGljZSgwLCAxMSk7XG5cdFx0aGYud3JpdGVfc2hpZnQoMSwgX2YsIFwic2Jjc1wiKTtcblx0XHRoZi53cml0ZV9zaGlmdCgxLCBjb2x0eXBlc1tpXSA9PSAnPycgPyAnQycgOiBjb2x0eXBlc1tpXSwgXCJzYmNzXCIpO1xuXHRcdGhmLndyaXRlX3NoaWZ0KDQsIGopO1xuXHRcdGhmLndyaXRlX3NoaWZ0KDEsIF9STEVOW2NvbHR5cGVzW2ldXSB8fCAwKTtcblx0XHRoZi53cml0ZV9zaGlmdCgxLCAwKTtcblx0XHRoZi53cml0ZV9zaGlmdCgxLCAweDAyKTtcblx0XHRoZi53cml0ZV9zaGlmdCg0LCAwKTtcblx0XHRoZi53cml0ZV9zaGlmdCgxLCAwKTtcblx0XHRoZi53cml0ZV9zaGlmdCg0LCAwKTtcblx0XHRoZi53cml0ZV9zaGlmdCg0LCAwKTtcblx0XHRqICs9IF9STEVOW2NvbHR5cGVzW2ldXSB8fCAwO1xuXHR9XG5cblx0dmFyIGhiID0gYmEubmV4dCgyNjQpO1xuXHRoYi53cml0ZV9zaGlmdCg0LCAweDAwMDAwMDBEKTtcblx0Zm9yKGk9MDsgaSA8IDY1OysraSkgaGIud3JpdGVfc2hpZnQoNCwgMHgwMDAwMDAwMCk7XG5cdGZvcihpPTA7IGkgPCBkYXRhLmxlbmd0aDsgKytpKSB7XG5cdFx0dmFyIHJvdXQgPSBiYS5uZXh0KHJsZW4pO1xuXHRcdHJvdXQud3JpdGVfc2hpZnQoMSwgMCk7XG5cdFx0Zm9yKGo9MDsgajxoZWFkZXJzLmxlbmd0aDsgKytqKSB7XG5cdFx0XHRpZihoZWFkZXJzW2pdID09IG51bGwpIGNvbnRpbnVlO1xuXHRcdFx0c3dpdGNoKGNvbHR5cGVzW2pdKSB7XG5cdFx0XHRcdGNhc2UgJ0wnOiByb3V0LndyaXRlX3NoaWZ0KDEsIGRhdGFbaV1bal0gPT0gbnVsbCA/IDB4M0YgOiBkYXRhW2ldW2pdID8gMHg1NCA6IDB4NDYpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnQic6IHJvdXQud3JpdGVfc2hpZnQoOCwgZGF0YVtpXVtqXXx8MCwgJ2YnKTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0QnOlxuXHRcdFx0XHRcdGlmKCFkYXRhW2ldW2pdKSByb3V0LndyaXRlX3NoaWZ0KDgsIFwiMDAwMDAwMDBcIiwgXCJzYmNzXCIpO1xuXHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0cm91dC53cml0ZV9zaGlmdCg0LCAoXCIwMDAwXCIrZGF0YVtpXVtqXS5nZXRGdWxsWWVhcigpKS5zbGljZSgtNCksIFwic2Jjc1wiKTtcblx0XHRcdFx0XHRcdHJvdXQud3JpdGVfc2hpZnQoMiwgKFwiMDBcIisoZGF0YVtpXVtqXS5nZXRNb250aCgpKzEpKS5zbGljZSgtMiksIFwic2Jjc1wiKTtcblx0XHRcdFx0XHRcdHJvdXQud3JpdGVfc2hpZnQoMiwgKFwiMDBcIitkYXRhW2ldW2pdLmdldERhdGUoKSkuc2xpY2UoLTIpLCBcInNiY3NcIik7XG5cdFx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAnQyc6XG5cdFx0XHRcdFx0dmFyIF9zID0gU3RyaW5nKGRhdGFbaV1bal18fFwiXCIpO1xuXHRcdFx0XHRcdHJvdXQud3JpdGVfc2hpZnQoMSwgX3MsIFwic2Jjc1wiKTtcblx0XHRcdFx0XHRmb3IoaGNudD0wOyBoY250IDwgMjUwLV9zLmxlbmd0aDsgKytoY250KSByb3V0LndyaXRlX3NoaWZ0KDEsIDB4MjApOyBicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8gZGF0YVxuXHR9XG5cdGJhLm5leHQoMSkud3JpdGVfc2hpZnQoMSwgMHgxQSk7XG5cdHJldHVybiBiYS5lbmQoKTtcbn1cblx0cmV0dXJuIHtcblx0XHR2ZXJzaW9uczogREJGX1NVUFBPUlRFRF9WRVJTSU9OUyxcblx0XHR0b193b3JrYm9vazogZGJmX3RvX3dvcmtib29rLFxuXHRcdHRvX3NoZWV0OiBkYmZfdG9fc2hlZXQsXG5cdFx0ZnJvbV9zaGVldDogc2hlZXRfdG9fZGJmXG5cdH07XG59KSgpO1xuXG52YXIgU1lMSyA9IChmdW5jdGlvbigpIHtcblx0LyogVE9ETzogc3RyZXNzIHRlc3Qgc2VxdWVuY2VzICovXG5cdHZhciBzeWxrX2VzY2FwZXMgPSAoe1xuXHRcdEFBOifDgCcsIEJBOifDgScsIENBOifDgicsIERBOjE5NSwgSEE6J8OEJywgSkE6MTk3LFxuXHRcdEFFOifDiCcsIEJFOifDiScsIENFOifDiicsICAgICAgICAgSEU6J8OLJyxcblx0XHRBSTonw4wnLCBCSTonw40nLCBDSTonw44nLCAgICAgICAgIEhJOifDjycsXG5cdFx0QU86J8OSJywgQk86J8OTJywgQ086J8OUJywgRE86MjEzLCBITzonw5YnLFxuXHRcdEFVOifDmScsIEJVOifDmicsIENVOifDmycsICAgICAgICAgSFU6J8OcJyxcblx0XHRBYTonw6AnLCBCYTonw6EnLCBDYTonw6InLCBEYToyMjcsIEhhOifDpCcsIEphOjIyOSxcblx0XHRBZTonw6gnLCBCZTonw6knLCBDZTonw6onLCAgICAgICAgIEhlOifDqycsXG5cdFx0QWk6J8OsJywgQmk6J8OtJywgQ2k6J8OuJywgICAgICAgICBIaTonw68nLFxuXHRcdEFvOifDsicsIEJvOifDsycsIENvOifDtCcsIERvOjI0NSwgSG86J8O2Jyxcblx0XHRBdTonw7knLCBCdTonw7onLCBDdTonw7snLCAgICAgICAgIEh1OifDvCcsXG5cdFx0S0M6J8OHJywgS2M6J8OnJywgcTonw6YnLCAgejonxZMnLCAgYTonw4YnLCAgajonxZInLFxuXHRcdEROOjIwOSwgRG46MjQxLCBIeToyNTUsXG5cdFx0UzoxNjksICBjOjE3MCwgIFI6MTc0LCAgXCJCIFwiOjE4MCxcbjA6MTc2LCAgICAxOjE3NywgIDI6MTc4LFxuMzoxNzksICAgIDU6MTgxLCAgNjoxODIsXG43OjE4MywgICAgUToxODUsICBrOjE4NiwgIGI6MjA4LCAgaToyMTYsICBsOjIyMiwgIHM6MjQwLCAgeToyNDgsXG5cdFx0XCIhXCI6MTYxLCAnXCInOjE2MiwgXCIjXCI6MTYzLCBcIihcIjoxNjQsIFwiJVwiOjE2NSwgXCInXCI6MTY3LCBcIkggXCI6MTY4LFxuXHRcdFwiK1wiOjE3MSwgXCI7XCI6MTg3LCBcIjxcIjoxODgsIFwiPVwiOjE4OSwgXCI+XCI6MTkwLCBcIj9cIjoxOTEsIFwie1wiOjIyM1xuXHR9KTtcblx0dmFyIHN5bGtfY2hhcl9yZWdleCA9IG5ldyBSZWdFeHAoXCJcXHUwMDFCTihcIiArIGtleXMoc3lsa19lc2NhcGVzKS5qb2luKFwifFwiKS5yZXBsYWNlKC9cXHxcXHxcXHwvLCBcInxcXFxcfHxcIikucmVwbGFjZSgvKFs/KCkrXSkvZyxcIlxcXFwkMVwiKSArIFwifFxcXFx8KVwiLCBcImdtXCIpO1xuXHR2YXIgc3lsa19jaGFyX2ZuID0gZnVuY3Rpb24oXywgJDEpeyB2YXIgbyA9IHN5bGtfZXNjYXBlc1skMV07IHJldHVybiB0eXBlb2YgbyA9PSBcIm51bWJlclwiID8gX2dldGFuc2kobykgOiBvOyB9O1xuXHR2YXIgZGVjb2RlX3N5bGtfY2hhciA9IGZ1bmN0aW9uKCQkLCAkMSwgJDIpIHsgdmFyIG5ld2NjID0gKCgkMS5jaGFyQ29kZUF0KDApIC0gMHgyMCk8PDQpIHwgKCQyLmNoYXJDb2RlQXQoMCkgLSAweDMwKTsgcmV0dXJuIG5ld2NjID09IDU5ID8gJCQgOiBfZ2V0YW5zaShuZXdjYyk7IH07XG5cdHN5bGtfZXNjYXBlc1tcInxcIl0gPSAyNTQ7XG5cdC8qIFRPRE86IGZpbmQgYW4gYWN0dWFsIHNwZWNpZmljYXRpb24gKi9cblx0ZnVuY3Rpb24gc3lsa190b19hb2EoZCwgb3B0cykge1xuXHRcdHN3aXRjaChvcHRzLnR5cGUpIHtcblx0XHRcdGNhc2UgJ2Jhc2U2NCc6IHJldHVybiBzeWxrX3RvX2FvYV9zdHIoQmFzZTY0LmRlY29kZShkKSwgb3B0cyk7XG5cdFx0XHRjYXNlICdiaW5hcnknOiByZXR1cm4gc3lsa190b19hb2Ffc3RyKGQsIG9wdHMpO1xuXHRcdFx0Y2FzZSAnYnVmZmVyJzogcmV0dXJuIHN5bGtfdG9fYW9hX3N0cihoYXNfYnVmICYmIEJ1ZmZlci5pc0J1ZmZlcihkKSA/IGQudG9TdHJpbmcoJ2JpbmFyeScpIDogYTJzKGQpLCBvcHRzKTtcblx0XHRcdGNhc2UgJ2FycmF5JzogcmV0dXJuIHN5bGtfdG9fYW9hX3N0cihjYzJzdHIoZCksIG9wdHMpO1xuXHRcdH1cblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgdHlwZSBcIiArIG9wdHMudHlwZSk7XG5cdH1cblx0ZnVuY3Rpb24gc3lsa190b19hb2Ffc3RyKHN0ciwgb3B0cykge1xuXHRcdHZhciByZWNvcmRzID0gc3RyLnNwbGl0KC9bXFxuXFxyXSsvKSwgUiA9IC0xLCBDID0gLTEsIHJpID0gMCwgcmogPSAwLCBhcnIgPSBbXTtcblx0XHR2YXIgZm9ybWF0cyA9IFtdO1xuXHRcdHZhciBuZXh0X2NlbGxfZm9ybWF0ID0gbnVsbDtcblx0XHR2YXIgc2h0ID0ge30sIHJvd2luZm8gPSBbXSwgY29saW5mbyA9IFtdLCBjdyA9IFtdO1xuXHRcdHZhciBNdmFsID0gMCwgajtcblx0XHRpZigrb3B0cy5jb2RlcGFnZSA+PSAwKSBzZXRfY3AoK29wdHMuY29kZXBhZ2UpO1xuXHRcdGZvciAoOyByaSAhPT0gcmVjb3Jkcy5sZW5ndGg7ICsrcmkpIHtcblx0XHRcdE12YWwgPSAwO1xuXHRcdFx0dmFyIHJzdHI9cmVjb3Jkc1tyaV0udHJpbSgpLnJlcGxhY2UoL1xceDFCKFtcXHgyMC1cXHgyRl0pKFtcXHgzMC1cXHgzRl0pL2csIGRlY29kZV9zeWxrX2NoYXIpLnJlcGxhY2Uoc3lsa19jaGFyX3JlZ2V4LCBzeWxrX2NoYXJfZm4pO1xuXHRcdFx0dmFyIHJlY29yZD1yc3RyLnJlcGxhY2UoLzs7L2csIFwiXFx1MDAwMFwiKS5zcGxpdChcIjtcIikubWFwKGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHgucmVwbGFjZSgvXFx1MDAwMC9nLCBcIjtcIik7IH0pO1xuXHRcdFx0dmFyIFJUPXJlY29yZFswXSwgdmFsO1xuXHRcdFx0aWYocnN0ci5sZW5ndGggPiAwKSBzd2l0Y2goUlQpIHtcblx0XHRcdGNhc2UgJ0lEJzogYnJlYWs7IC8qIGhlYWRlciAqL1xuXHRcdFx0Y2FzZSAnRSc6IGJyZWFrOyAvKiBFT0YgKi9cblx0XHRcdGNhc2UgJ0InOiBicmVhazsgLyogZGltZW5zaW9ucyAqL1xuXHRcdFx0Y2FzZSAnTyc6IGJyZWFrOyAvKiBvcHRpb25zPyAqL1xuXHRcdFx0Y2FzZSAnVyc6IGJyZWFrOyAvKiB3aW5kb3c/ICovXG5cdFx0XHRjYXNlICdQJzpcblx0XHRcdFx0aWYocmVjb3JkWzFdLmNoYXJBdCgwKSA9PSAnUCcpXG5cdFx0XHRcdFx0Zm9ybWF0cy5wdXNoKHJzdHIuc2xpY2UoMykucmVwbGFjZSgvOzsvZywgXCI7XCIpKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdDJzpcblx0XHRcdHZhciBDX3NlZW5fSyA9IGZhbHNlLCBDX3NlZW5fWCA9IGZhbHNlLCBDX3NlZW5fUyA9IGZhbHNlLCBDX3NlZW5fRSA9IGZhbHNlLCBfUiA9IC0xLCBfQyA9IC0xO1xuXHRcdFx0Zm9yKHJqPTE7IHJqPHJlY29yZC5sZW5ndGg7ICsrcmopIHN3aXRjaChyZWNvcmRbcmpdLmNoYXJBdCgwKSkge1xuXHRcdFx0XHRjYXNlICdBJzogYnJlYWs7IC8vIFRPRE86IGNvbW1lbnRcblx0XHRcdFx0Y2FzZSAnWCc6IEMgPSBwYXJzZUludChyZWNvcmRbcmpdLnNsaWNlKDEpKS0xOyBDX3NlZW5fWCA9IHRydWU7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdZJzpcblx0XHRcdFx0XHRSID0gcGFyc2VJbnQocmVjb3JkW3JqXS5zbGljZSgxKSktMTsgaWYoIUNfc2Vlbl9YKSBDID0gMDtcblx0XHRcdFx0XHRmb3IoaiA9IGFyci5sZW5ndGg7IGogPD0gUjsgKytqKSBhcnJbal0gPSBbXTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnSyc6XG5cdFx0XHRcdFx0dmFsID0gcmVjb3JkW3JqXS5zbGljZSgxKTtcblx0XHRcdFx0XHRpZih2YWwuY2hhckF0KDApID09PSAnXCInKSB2YWwgPSB2YWwuc2xpY2UoMSx2YWwubGVuZ3RoIC0gMSk7XG5cdFx0XHRcdFx0ZWxzZSBpZih2YWwgPT09ICdUUlVFJykgdmFsID0gdHJ1ZTtcblx0XHRcdFx0XHRlbHNlIGlmKHZhbCA9PT0gJ0ZBTFNFJykgdmFsID0gZmFsc2U7XG5cdFx0XHRcdFx0ZWxzZSBpZighaXNOYU4oZnV6enludW0odmFsKSkpIHtcblx0XHRcdFx0XHRcdHZhbCA9IGZ1enp5bnVtKHZhbCk7XG5cdFx0XHRcdFx0XHRpZihuZXh0X2NlbGxfZm9ybWF0ICE9PSBudWxsICYmIFNTRi5pc19kYXRlKG5leHRfY2VsbF9mb3JtYXQpKSB2YWwgPSBudW1kYXRlKHZhbCk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmKCFpc05hTihmdXp6eWRhdGUodmFsKS5nZXREYXRlKCkpKSB7XG5cdFx0XHRcdFx0XHR2YWwgPSBwYXJzZURhdGUodmFsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYodHlwZW9mIGNwdGFibGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB2YWwgPT0gXCJzdHJpbmdcIiAmJiAoKG9wdHN8fHt9KS50eXBlICE9IFwic3RyaW5nXCIpICYmIChvcHRzfHx7fSkuY29kZXBhZ2UpIHZhbCA9IGNwdGFibGUudXRpbHMuZGVjb2RlKG9wdHMuY29kZXBhZ2UsIHZhbCk7XG5cdFx0XHRcdFx0Q19zZWVuX0sgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdFJzpcblx0XHRcdFx0XHRDX3NlZW5fRSA9IHRydWU7XG5cdFx0XHRcdFx0dmFyIGZvcm11bGEgPSByY190b19hMShyZWNvcmRbcmpdLnNsaWNlKDEpLCB7cjpSLGM6Q30pO1xuXHRcdFx0XHRcdGFycltSXVtDXSA9IFthcnJbUl1bQ10sIGZvcm11bGFdO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdTJzpcblx0XHRcdFx0XHRDX3NlZW5fUyA9IHRydWU7XG5cdFx0XHRcdFx0YXJyW1JdW0NdID0gW2FycltSXVtDXSwgXCJTNVNcIl07XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0cnOiBicmVhazsgLy8gdW5rbm93blxuXHRcdFx0XHRjYXNlICdSJzogX1IgPSBwYXJzZUludChyZWNvcmRbcmpdLnNsaWNlKDEpKS0xOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnQyc6IF9DID0gcGFyc2VJbnQocmVjb3JkW3JqXS5zbGljZSgxKSktMTsgYnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6IGlmKG9wdHMgJiYgb3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihcIlNZTEsgYmFkIHJlY29yZCBcIiArIHJzdHIpO1xuXHRcdFx0fVxuXHRcdFx0aWYoQ19zZWVuX0spIHtcblx0XHRcdFx0aWYoYXJyW1JdW0NdICYmIGFycltSXVtDXS5sZW5ndGggPT0gMikgYXJyW1JdW0NdWzBdID0gdmFsO1xuXHRcdFx0XHRlbHNlIGFycltSXVtDXSA9IHZhbDtcblx0XHRcdFx0bmV4dF9jZWxsX2Zvcm1hdCA9IG51bGw7XG5cdFx0XHR9XG5cdFx0XHRpZihDX3NlZW5fUykge1xuXHRcdFx0XHRpZihDX3NlZW5fRSkgdGhyb3cgbmV3IEVycm9yKFwiU1lMSyBzaGFyZWQgZm9ybXVsYSBjYW5ub3QgaGF2ZSBvd24gZm9ybXVsYVwiKTtcblx0XHRcdFx0dmFyIHNocmJhc2UgPSBfUiA+IC0xICYmIGFycltfUl1bX0NdO1xuXHRcdFx0XHRpZighc2hyYmFzZSB8fCAhc2hyYmFzZVsxXSkgdGhyb3cgbmV3IEVycm9yKFwiU1lMSyBzaGFyZWQgZm9ybXVsYSBjYW5ub3QgZmluZCBiYXNlXCIpO1xuXHRcdFx0XHRhcnJbUl1bQ11bMV0gPSBzaGlmdF9mb3JtdWxhX3N0cihzaHJiYXNlWzFdLCB7cjogUiAtIF9SLCBjOiBDIC0gX0N9KTtcblx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnRic6XG5cdFx0XHR2YXIgRl9zZWVuID0gMDtcblx0XHRcdGZvcihyaj0xOyByajxyZWNvcmQubGVuZ3RoOyArK3JqKSBzd2l0Y2gocmVjb3JkW3JqXS5jaGFyQXQoMCkpIHtcblx0XHRcdFx0Y2FzZSAnWCc6IEMgPSBwYXJzZUludChyZWNvcmRbcmpdLnNsaWNlKDEpKS0xOyArK0Zfc2VlbjsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1knOlxuXHRcdFx0XHRcdFIgPSBwYXJzZUludChyZWNvcmRbcmpdLnNsaWNlKDEpKS0xOyAvKkMgPSAwOyovXG5cdFx0XHRcdFx0Zm9yKGogPSBhcnIubGVuZ3RoOyBqIDw9IFI7ICsraikgYXJyW2pdID0gW107XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ00nOiBNdmFsID0gcGFyc2VJbnQocmVjb3JkW3JqXS5zbGljZSgxKSkgLyAyMDsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0YnOiBicmVhazsgLyogPz8/ICovXG5cdFx0XHRcdGNhc2UgJ0cnOiBicmVhazsgLyogaGlkZSBncmlkICovXG5cdFx0XHRcdGNhc2UgJ1AnOlxuXHRcdFx0XHRcdG5leHRfY2VsbF9mb3JtYXQgPSBmb3JtYXRzW3BhcnNlSW50KHJlY29yZFtyal0uc2xpY2UoMSkpXTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnUyc6IGJyZWFrOyAvKiBjZWxsIHN0eWxlICovXG5cdFx0XHRcdGNhc2UgJ0QnOiBicmVhazsgLyogY29sdW1uICovXG5cdFx0XHRcdGNhc2UgJ04nOiBicmVhazsgLyogZm9udCAqL1xuXHRcdFx0XHRjYXNlICdXJzpcblx0XHRcdFx0XHRjdyA9IHJlY29yZFtyal0uc2xpY2UoMSkuc3BsaXQoXCIgXCIpO1xuXHRcdFx0XHRcdGZvcihqID0gcGFyc2VJbnQoY3dbMF0sIDEwKTsgaiA8PSBwYXJzZUludChjd1sxXSwgMTApOyArK2opIHtcblx0XHRcdFx0XHRcdE12YWwgPSBwYXJzZUludChjd1syXSwgMTApO1xuXHRcdFx0XHRcdFx0Y29saW5mb1tqLTFdID0gTXZhbCA9PT0gMCA/IHtoaWRkZW46dHJ1ZX06IHt3Y2g6TXZhbH07IHByb2Nlc3NfY29sKGNvbGluZm9bai0xXSk7XG5cdFx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAnQyc6IC8qIGRlZmF1bHQgY29sdW1uIGZvcm1hdCAqL1xuXHRcdFx0XHRcdEMgPSBwYXJzZUludChyZWNvcmRbcmpdLnNsaWNlKDEpKS0xO1xuXHRcdFx0XHRcdGlmKCFjb2xpbmZvW0NdKSBjb2xpbmZvW0NdID0ge307XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1InOiAvKiByb3cgcHJvcGVydGllcyAqL1xuXHRcdFx0XHRcdFIgPSBwYXJzZUludChyZWNvcmRbcmpdLnNsaWNlKDEpKS0xO1xuXHRcdFx0XHRcdGlmKCFyb3dpbmZvW1JdKSByb3dpbmZvW1JdID0ge307XG5cdFx0XHRcdFx0aWYoTXZhbCA+IDApIHsgcm93aW5mb1tSXS5ocHQgPSBNdmFsOyByb3dpbmZvW1JdLmhweCA9IHB0MnB4KE12YWwpOyB9XG5cdFx0XHRcdFx0ZWxzZSBpZihNdmFsID09PSAwKSByb3dpbmZvW1JdLmhpZGRlbiA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6IGlmKG9wdHMgJiYgb3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihcIlNZTEsgYmFkIHJlY29yZCBcIiArIHJzdHIpO1xuXHRcdFx0fVxuXHRcdFx0aWYoRl9zZWVuIDwgMSkgbmV4dF9jZWxsX2Zvcm1hdCA9IG51bGw7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogaWYob3B0cyAmJiBvcHRzLldURikgdGhyb3cgbmV3IEVycm9yKFwiU1lMSyBiYWQgcmVjb3JkIFwiICsgcnN0cik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKHJvd2luZm8ubGVuZ3RoID4gMCkgc2h0Wychcm93cyddID0gcm93aW5mbztcblx0XHRpZihjb2xpbmZvLmxlbmd0aCA+IDApIHNodFsnIWNvbHMnXSA9IGNvbGluZm87XG5cdFx0aWYob3B0cyAmJiBvcHRzLnNoZWV0Um93cykgYXJyID0gYXJyLnNsaWNlKDAsIG9wdHMuc2hlZXRSb3dzKTtcblx0XHRyZXR1cm4gW2Fyciwgc2h0XTtcblx0fVxuXG5cdGZ1bmN0aW9uIHN5bGtfdG9fc2hlZXQoZCwgb3B0cykge1xuXHRcdHZhciBhb2FzaHQgPSBzeWxrX3RvX2FvYShkLCBvcHRzKTtcblx0XHR2YXIgYW9hID0gYW9hc2h0WzBdLCB3cyA9IGFvYXNodFsxXTtcblx0XHR2YXIgbyA9IGFvYV90b19zaGVldChhb2EsIG9wdHMpO1xuXHRcdGtleXMod3MpLmZvckVhY2goZnVuY3Rpb24oaykgeyBvW2tdID0gd3Nba107IH0pO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gc3lsa190b193b3JrYm9vayhkLCBvcHRzKSB7IHJldHVybiBzaGVldF90b193b3JrYm9vayhzeWxrX3RvX3NoZWV0KGQsIG9wdHMpLCBvcHRzKTsgfVxuXG5cdGZ1bmN0aW9uIHdyaXRlX3dzX2NlbGxfc3lsayhjZWxsLCB3cywgUiwgQykge1xuXHRcdHZhciBvID0gXCJDO1lcIiArIChSKzEpICsgXCI7WFwiICsgKEMrMSkgKyBcIjtLXCI7XG5cdFx0c3dpdGNoKGNlbGwudCkge1xuXHRcdFx0Y2FzZSAnbic6XG5cdFx0XHRcdG8gKz0gKGNlbGwudnx8MCk7XG5cdFx0XHRcdGlmKGNlbGwuZiAmJiAhY2VsbC5GKSBvICs9IFwiO0VcIiArIGExX3RvX3JjKGNlbGwuZiwge3I6UiwgYzpDfSk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnYic6IG8gKz0gY2VsbC52ID8gXCJUUlVFXCIgOiBcIkZBTFNFXCI7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnZSc6IG8gKz0gY2VsbC53IHx8IGNlbGwudjsgYnJlYWs7XG5cdFx0XHRjYXNlICdkJzogbyArPSAnXCInICsgKGNlbGwudyB8fCBjZWxsLnYpICsgJ1wiJzsgYnJlYWs7XG5cdFx0XHRjYXNlICdzJzogbyArPSAnXCInICsgY2VsbC52LnJlcGxhY2UoL1wiL2csXCJcIikgKyAnXCInOyBicmVhaztcblx0XHR9XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZV93c19jb2xzX3N5bGsob3V0LCBjb2xzKSB7XG5cdFx0Y29scy5mb3JFYWNoKGZ1bmN0aW9uKGNvbCwgaSkge1xuXHRcdFx0dmFyIHJlYyA9IFwiRjtXXCIgKyAoaSsxKSArIFwiIFwiICsgKGkrMSkgKyBcIiBcIjtcblx0XHRcdGlmKGNvbC5oaWRkZW4pIHJlYyArPSBcIjBcIjtcblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRpZih0eXBlb2YgY29sLndpZHRoID09ICdudW1iZXInICYmICFjb2wud3B4KSBjb2wud3B4ID0gd2lkdGgycHgoY29sLndpZHRoKTtcblx0XHRcdFx0aWYodHlwZW9mIGNvbC53cHggPT0gJ251bWJlcicgJiYgIWNvbC53Y2gpIGNvbC53Y2ggPSBweDJjaGFyKGNvbC53cHgpO1xuXHRcdFx0XHRpZih0eXBlb2YgY29sLndjaCA9PSAnbnVtYmVyJykgcmVjICs9IE1hdGgucm91bmQoY29sLndjaCk7XG5cdFx0XHR9XG5cdFx0XHRpZihyZWMuY2hhckF0KHJlYy5sZW5ndGggLSAxKSAhPSBcIiBcIikgb3V0LnB1c2gocmVjKTtcblx0XHR9KTtcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX3dzX3Jvd3Nfc3lsayhvdXQsIHJvd3MpIHtcblx0XHRyb3dzLmZvckVhY2goZnVuY3Rpb24ocm93LCBpKSB7XG5cdFx0XHR2YXIgcmVjID0gXCJGO1wiO1xuXHRcdFx0aWYocm93LmhpZGRlbikgcmVjICs9IFwiTTA7XCI7XG5cdFx0XHRlbHNlIGlmKHJvdy5ocHQpIHJlYyArPSBcIk1cIiArIDIwICogcm93LmhwdCArIFwiO1wiO1xuXHRcdFx0ZWxzZSBpZihyb3cuaHB4KSByZWMgKz0gXCJNXCIgKyAyMCAqIHB4MnB0KHJvdy5ocHgpICsgXCI7XCI7XG5cdFx0XHRpZihyZWMubGVuZ3RoID4gMikgb3V0LnB1c2gocmVjICsgXCJSXCIgKyAoaSsxKSk7XG5cdFx0fSk7XG5cdH1cblxuXHRmdW5jdGlvbiBzaGVldF90b19zeWxrKHdzLCBvcHRzKSB7XG5cdFx0dmFyIHByZWFtYmxlID0gW1wiSUQ7UFdYTDtOO0VcIl0sIG8gPSBbXTtcblx0XHR2YXIgciA9IHNhZmVfZGVjb2RlX3JhbmdlKHdzWychcmVmJ10pLCBjZWxsO1xuXHRcdHZhciBkZW5zZSA9IEFycmF5LmlzQXJyYXkod3MpO1xuXHRcdHZhciBSUyA9IFwiXFxyXFxuXCI7XG5cblx0XHRwcmVhbWJsZS5wdXNoKFwiUDtQR2VuZXJhbFwiKTtcblx0XHRwcmVhbWJsZS5wdXNoKFwiRjtQMDtERzBHODtNMjU1XCIpO1xuXHRcdGlmKHdzWychY29scyddKSB3cml0ZV93c19jb2xzX3N5bGsocHJlYW1ibGUsIHdzWychY29scyddKTtcblx0XHRpZih3c1snIXJvd3MnXSkgd3JpdGVfd3Nfcm93c19zeWxrKHByZWFtYmxlLCB3c1snIXJvd3MnXSk7XG5cblx0XHRwcmVhbWJsZS5wdXNoKFwiQjtZXCIgKyAoci5lLnIgLSByLnMuciArIDEpICsgXCI7WFwiICsgKHIuZS5jIC0gci5zLmMgKyAxKSArIFwiO0RcIiArIFtyLnMuYyxyLnMucixyLmUuYyxyLmUucl0uam9pbihcIiBcIikpO1xuXHRcdGZvcih2YXIgUiA9IHIucy5yOyBSIDw9IHIuZS5yOyArK1IpIHtcblx0XHRcdGZvcih2YXIgQyA9IHIucy5jOyBDIDw9IHIuZS5jOyArK0MpIHtcblx0XHRcdFx0dmFyIGNvb3JkID0gZW5jb2RlX2NlbGwoe3I6UixjOkN9KTtcblx0XHRcdFx0Y2VsbCA9IGRlbnNlID8gKHdzW1JdfHxbXSlbQ106IHdzW2Nvb3JkXTtcblx0XHRcdFx0aWYoIWNlbGwgfHwgKGNlbGwudiA9PSBudWxsICYmICghY2VsbC5mIHx8IGNlbGwuRikpKSBjb250aW51ZTtcblx0XHRcdFx0by5wdXNoKHdyaXRlX3dzX2NlbGxfc3lsayhjZWxsLCB3cywgUiwgQywgb3B0cykpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gcHJlYW1ibGUuam9pbihSUykgKyBSUyArIG8uam9pbihSUykgKyBSUyArIFwiRVwiICsgUlM7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHRvX3dvcmtib29rOiBzeWxrX3RvX3dvcmtib29rLFxuXHRcdHRvX3NoZWV0OiBzeWxrX3RvX3NoZWV0LFxuXHRcdGZyb21fc2hlZXQ6IHNoZWV0X3RvX3N5bGtcblx0fTtcbn0pKCk7XG5cbnZhciBESUYgPSAoZnVuY3Rpb24oKSB7XG5cdGZ1bmN0aW9uIGRpZl90b19hb2EoZCwgb3B0cykge1xuXHRcdHN3aXRjaChvcHRzLnR5cGUpIHtcblx0XHRcdGNhc2UgJ2Jhc2U2NCc6IHJldHVybiBkaWZfdG9fYW9hX3N0cihCYXNlNjQuZGVjb2RlKGQpLCBvcHRzKTtcblx0XHRcdGNhc2UgJ2JpbmFyeSc6IHJldHVybiBkaWZfdG9fYW9hX3N0cihkLCBvcHRzKTtcblx0XHRcdGNhc2UgJ2J1ZmZlcic6IHJldHVybiBkaWZfdG9fYW9hX3N0cihoYXNfYnVmICYmIEJ1ZmZlci5pc0J1ZmZlcihkKSA/IGQudG9TdHJpbmcoJ2JpbmFyeScpIDogYTJzKGQpLCBvcHRzKTtcblx0XHRcdGNhc2UgJ2FycmF5JzogcmV0dXJuIGRpZl90b19hb2Ffc3RyKGNjMnN0cihkKSwgb3B0cyk7XG5cdFx0fVxuXHRcdHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCB0eXBlIFwiICsgb3B0cy50eXBlKTtcblx0fVxuXHRmdW5jdGlvbiBkaWZfdG9fYW9hX3N0cihzdHIsIG9wdHMpIHtcblx0XHR2YXIgcmVjb3JkcyA9IHN0ci5zcGxpdCgnXFxuJyksIFIgPSAtMSwgQyA9IC0xLCByaSA9IDAsIGFyciA9IFtdO1xuXHRcdGZvciAoOyByaSAhPT0gcmVjb3Jkcy5sZW5ndGg7ICsrcmkpIHtcblx0XHRcdGlmIChyZWNvcmRzW3JpXS50cmltKCkgPT09ICdCT1QnKSB7IGFyclsrK1JdID0gW107IEMgPSAwOyBjb250aW51ZTsgfVxuXHRcdFx0aWYgKFIgPCAwKSBjb250aW51ZTtcblx0XHRcdHZhciBtZXRhZGF0YSA9IHJlY29yZHNbcmldLnRyaW0oKS5zcGxpdChcIixcIik7XG5cdFx0XHR2YXIgdHlwZSA9IG1ldGFkYXRhWzBdLCB2YWx1ZSA9IG1ldGFkYXRhWzFdO1xuXHRcdFx0KytyaTtcblx0XHRcdHZhciBkYXRhID0gcmVjb3Jkc1tyaV0gfHwgXCJcIjtcblx0XHRcdHdoaWxlKCgoZGF0YS5tYXRjaCgvW1wiXS9nKXx8W10pLmxlbmd0aCAmIDEpICYmIHJpIDwgcmVjb3Jkcy5sZW5ndGggLSAxKSBkYXRhICs9IFwiXFxuXCIgKyByZWNvcmRzWysrcmldO1xuXHRcdFx0ZGF0YSA9IGRhdGEudHJpbSgpO1xuXHRcdFx0c3dpdGNoICgrdHlwZSkge1xuXHRcdFx0XHRjYXNlIC0xOlxuXHRcdFx0XHRcdGlmIChkYXRhID09PSAnQk9UJykgeyBhcnJbKytSXSA9IFtdOyBDID0gMDsgY29udGludWU7IH1cblx0XHRcdFx0XHRlbHNlIGlmIChkYXRhICE9PSAnRU9EJykgdGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkIERJRiBzcGVjaWFsIGNvbW1hbmQgXCIgKyBkYXRhKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAwOlxuXHRcdFx0XHRcdGlmKGRhdGEgPT09ICdUUlVFJykgYXJyW1JdW0NdID0gdHJ1ZTtcblx0XHRcdFx0XHRlbHNlIGlmKGRhdGEgPT09ICdGQUxTRScpIGFycltSXVtDXSA9IGZhbHNlO1xuXHRcdFx0XHRcdGVsc2UgaWYoIWlzTmFOKGZ1enp5bnVtKHZhbHVlKSkpIGFycltSXVtDXSA9IGZ1enp5bnVtKHZhbHVlKTtcblx0XHRcdFx0XHRlbHNlIGlmKCFpc05hTihmdXp6eWRhdGUodmFsdWUpLmdldERhdGUoKSkpIGFycltSXVtDXSA9IHBhcnNlRGF0ZSh2YWx1ZSk7XG5cdFx0XHRcdFx0ZWxzZSBhcnJbUl1bQ10gPSB2YWx1ZTtcblx0XHRcdFx0XHQrK0M7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0ZGF0YSA9IGRhdGEuc2xpY2UoMSxkYXRhLmxlbmd0aC0xKTtcblx0XHRcdFx0XHRkYXRhID0gZGF0YS5yZXBsYWNlKC9cIlwiL2csICdcIicpO1xuXHRcdFx0XHRcdGlmKERJRl9YTCAmJiBkYXRhICYmIGRhdGEubWF0Y2goL149XCIuKlwiJC8pKSBkYXRhID0gZGF0YS5zbGljZSgyLCAtMSk7XG5cdFx0XHRcdFx0YXJyW1JdW0MrK10gPSBkYXRhICE9PSAnJyA/IGRhdGEgOiBudWxsO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGRhdGEgPT09ICdFT0QnKSBicmVhaztcblx0XHR9XG5cdFx0aWYob3B0cyAmJiBvcHRzLnNoZWV0Um93cykgYXJyID0gYXJyLnNsaWNlKDAsIG9wdHMuc2hlZXRSb3dzKTtcblx0XHRyZXR1cm4gYXJyO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGlmX3RvX3NoZWV0KHN0ciwgb3B0cykgeyByZXR1cm4gYW9hX3RvX3NoZWV0KGRpZl90b19hb2Eoc3RyLCBvcHRzKSwgb3B0cyk7IH1cblx0ZnVuY3Rpb24gZGlmX3RvX3dvcmtib29rKHN0ciwgb3B0cykgeyByZXR1cm4gc2hlZXRfdG9fd29ya2Jvb2soZGlmX3RvX3NoZWV0KHN0ciwgb3B0cyksIG9wdHMpOyB9XG5cblx0dmFyIHNoZWV0X3RvX2RpZiA9IChmdW5jdGlvbigpIHtcblx0XHR2YXIgcHVzaF9maWVsZCA9IGZ1bmN0aW9uIHBmKG8sIHRvcGljLCB2LCBuLCBzKSB7XG5cdFx0XHRvLnB1c2godG9waWMpO1xuXHRcdFx0by5wdXNoKHYgKyBcIixcIiArIG4pO1xuXHRcdFx0by5wdXNoKCdcIicgKyBzLnJlcGxhY2UoL1wiL2csJ1wiXCInKSArICdcIicpO1xuXHRcdH07XG5cdFx0dmFyIHB1c2hfdmFsdWUgPSBmdW5jdGlvbiBwbyhvLCB0eXBlLCB2LCBzKSB7XG5cdFx0XHRvLnB1c2godHlwZSArIFwiLFwiICsgdik7XG5cdFx0XHRvLnB1c2godHlwZSA9PSAxID8gJ1wiJyArIHMucmVwbGFjZSgvXCIvZywnXCJcIicpICsgJ1wiJyA6IHMpO1xuXHRcdH07XG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHNoZWV0X3RvX2RpZih3cykge1xuXHRcdFx0dmFyIG8gPSBbXTtcblx0XHRcdHZhciByID0gc2FmZV9kZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSksIGNlbGw7XG5cdFx0XHR2YXIgZGVuc2UgPSBBcnJheS5pc0FycmF5KHdzKTtcblx0XHRcdHB1c2hfZmllbGQobywgXCJUQUJMRVwiLCAwLCAxLCBcInNoZWV0anNcIik7XG5cdFx0XHRwdXNoX2ZpZWxkKG8sIFwiVkVDVE9SU1wiLCAwLCByLmUuciAtIHIucy5yICsgMSxcIlwiKTtcblx0XHRcdHB1c2hfZmllbGQobywgXCJUVVBMRVNcIiwgMCwgci5lLmMgLSByLnMuYyArIDEsXCJcIik7XG5cdFx0XHRwdXNoX2ZpZWxkKG8sIFwiREFUQVwiLCAwLCAwLFwiXCIpO1xuXHRcdFx0Zm9yKHZhciBSID0gci5zLnI7IFIgPD0gci5lLnI7ICsrUikge1xuXHRcdFx0XHRwdXNoX3ZhbHVlKG8sIC0xLCAwLCBcIkJPVFwiKTtcblx0XHRcdFx0Zm9yKHZhciBDID0gci5zLmM7IEMgPD0gci5lLmM7ICsrQykge1xuXHRcdFx0XHRcdHZhciBjb29yZCA9IGVuY29kZV9jZWxsKHtyOlIsYzpDfSk7XG5cdFx0XHRcdFx0Y2VsbCA9IGRlbnNlID8gKHdzW1JdfHxbXSlbQ10gOiB3c1tjb29yZF07XG5cdFx0XHRcdFx0aWYoIWNlbGwpIHsgcHVzaF92YWx1ZShvLCAxLCAwLCBcIlwiKTsgY29udGludWU7fVxuXHRcdFx0XHRcdHN3aXRjaChjZWxsLnQpIHtcblx0XHRcdFx0XHRcdGNhc2UgJ24nOlxuXHRcdFx0XHRcdFx0XHR2YXIgdmFsID0gRElGX1hMID8gY2VsbC53IDogY2VsbC52O1xuXHRcdFx0XHRcdFx0XHRpZighdmFsICYmIGNlbGwudiAhPSBudWxsKSB2YWwgPSBjZWxsLnY7XG5cdFx0XHRcdFx0XHRcdGlmKHZhbCA9PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYoRElGX1hMICYmIGNlbGwuZiAmJiAhY2VsbC5GKSBwdXNoX3ZhbHVlKG8sIDEsIDAsIFwiPVwiICsgY2VsbC5mKTtcblx0XHRcdFx0XHRcdFx0XHRlbHNlIHB1c2hfdmFsdWUobywgMSwgMCwgXCJcIik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0ZWxzZSBwdXNoX3ZhbHVlKG8sIDAsIHZhbCwgXCJWXCIpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ2InOlxuXHRcdFx0XHRcdFx0XHRwdXNoX3ZhbHVlKG8sIDAsIGNlbGwudiA/IDEgOiAwLCBjZWxsLnYgPyBcIlRSVUVcIiA6IFwiRkFMU0VcIik7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAncyc6XG5cdFx0XHRcdFx0XHRcdHB1c2hfdmFsdWUobywgMSwgMCwgKCFESUZfWEwgfHwgaXNOYU4oY2VsbC52KSkgPyBjZWxsLnYgOiAnPVwiJyArIGNlbGwudiArICdcIicpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ2QnOlxuXHRcdFx0XHRcdFx0XHRpZighY2VsbC53KSBjZWxsLncgPSBTU0YuZm9ybWF0KGNlbGwueiB8fCBTU0YuX3RhYmxlWzE0XSwgZGF0ZW51bShwYXJzZURhdGUoY2VsbC52KSkpO1xuXHRcdFx0XHRcdFx0XHRpZihESUZfWEwpIHB1c2hfdmFsdWUobywgMCwgY2VsbC53LCBcIlZcIik7XG5cdFx0XHRcdFx0XHRcdGVsc2UgcHVzaF92YWx1ZShvLCAxLCAwLCBjZWxsLncpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGRlZmF1bHQ6IHB1c2hfdmFsdWUobywgMSwgMCwgXCJcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRwdXNoX3ZhbHVlKG8sIC0xLCAwLCBcIkVPRFwiKTtcblx0XHRcdHZhciBSUyA9IFwiXFxyXFxuXCI7XG5cdFx0XHR2YXIgb28gPSBvLmpvaW4oUlMpO1xuXHRcdFx0Ly93aGlsZSgob28ubGVuZ3RoICYgMHg3RikgIT0gMCkgb28gKz0gXCJcXDBcIjtcblx0XHRcdHJldHVybiBvbztcblx0XHR9O1xuXHR9KSgpO1xuXHRyZXR1cm4ge1xuXHRcdHRvX3dvcmtib29rOiBkaWZfdG9fd29ya2Jvb2ssXG5cdFx0dG9fc2hlZXQ6IGRpZl90b19zaGVldCxcblx0XHRmcm9tX3NoZWV0OiBzaGVldF90b19kaWZcblx0fTtcbn0pKCk7XG5cbnZhciBFVEggPSAoZnVuY3Rpb24oKSB7XG5cdGZ1bmN0aW9uIGRlY29kZShzKSB7IHJldHVybiBzLnJlcGxhY2UoL1xcXFxiL2csXCJcXFxcXCIpLnJlcGxhY2UoL1xcXFxjL2csXCI6XCIpLnJlcGxhY2UoL1xcXFxuL2csXCJcXG5cIik7IH1cblx0ZnVuY3Rpb24gZW5jb2RlKHMpIHsgcmV0dXJuIHMucmVwbGFjZSgvXFxcXC9nLCBcIlxcXFxiXCIpLnJlcGxhY2UoLzovZywgXCJcXFxcY1wiKS5yZXBsYWNlKC9cXG4vZyxcIlxcXFxuXCIpOyB9XG5cblx0ZnVuY3Rpb24gZXRoX3RvX2FvYShzdHIsIG9wdHMpIHtcblx0XHR2YXIgcmVjb3JkcyA9IHN0ci5zcGxpdCgnXFxuJyksIFIgPSAtMSwgQyA9IC0xLCByaSA9IDAsIGFyciA9IFtdO1xuXHRcdGZvciAoOyByaSAhPT0gcmVjb3Jkcy5sZW5ndGg7ICsrcmkpIHtcblx0XHRcdHZhciByZWNvcmQgPSByZWNvcmRzW3JpXS50cmltKCkuc3BsaXQoXCI6XCIpO1xuXHRcdFx0aWYocmVjb3JkWzBdICE9PSAnY2VsbCcpIGNvbnRpbnVlO1xuXHRcdFx0dmFyIGFkZHIgPSBkZWNvZGVfY2VsbChyZWNvcmRbMV0pO1xuXHRcdFx0aWYoYXJyLmxlbmd0aCA8PSBhZGRyLnIpIGZvcihSID0gYXJyLmxlbmd0aDsgUiA8PSBhZGRyLnI7ICsrUikgaWYoIWFycltSXSkgYXJyW1JdID0gW107XG5cdFx0XHRSID0gYWRkci5yOyBDID0gYWRkci5jO1xuXHRcdFx0c3dpdGNoKHJlY29yZFsyXSkge1xuXHRcdFx0XHRjYXNlICd0JzogYXJyW1JdW0NdID0gZGVjb2RlKHJlY29yZFszXSk7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICd2JzogYXJyW1JdW0NdID0gK3JlY29yZFszXTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ3Z0Zic6IHZhciBfZiA9IHJlY29yZFtyZWNvcmQubGVuZ3RoIC0gMV07XG5cdFx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRjYXNlICd2dGMnOlxuXHRcdFx0XHRcdHN3aXRjaChyZWNvcmRbM10pIHtcblx0XHRcdFx0XHRcdGNhc2UgJ25sJzogYXJyW1JdW0NdID0gK3JlY29yZFs0XSA/IHRydWUgOiBmYWxzZTsgYnJlYWs7XG5cdFx0XHRcdFx0XHRkZWZhdWx0OiBhcnJbUl1bQ10gPSArcmVjb3JkWzRdOyBicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYocmVjb3JkWzJdID09ICd2dGYnKSBhcnJbUl1bQ10gPSBbYXJyW1JdW0NdLCBfZl07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKG9wdHMgJiYgb3B0cy5zaGVldFJvd3MpIGFyciA9IGFyci5zbGljZSgwLCBvcHRzLnNoZWV0Um93cyk7XG5cdFx0cmV0dXJuIGFycjtcblx0fVxuXG5cdGZ1bmN0aW9uIGV0aF90b19zaGVldChkLCBvcHRzKSB7IHJldHVybiBhb2FfdG9fc2hlZXQoZXRoX3RvX2FvYShkLCBvcHRzKSwgb3B0cyk7IH1cblx0ZnVuY3Rpb24gZXRoX3RvX3dvcmtib29rKGQsIG9wdHMpIHsgcmV0dXJuIHNoZWV0X3RvX3dvcmtib29rKGV0aF90b19zaGVldChkLCBvcHRzKSwgb3B0cyk7IH1cblxuXHR2YXIgaGVhZGVyID0gW1xuXHRcdFwic29jaWFsY2FsYzp2ZXJzaW9uOjEuNVwiLFxuXHRcdFwiTUlNRS1WZXJzaW9uOiAxLjBcIixcblx0XHRcIkNvbnRlbnQtVHlwZTogbXVsdGlwYXJ0L21peGVkOyBib3VuZGFyeT1Tb2NpYWxDYWxjU3ByZWFkc2hlZXRDb250cm9sU2F2ZVwiXG5cdF0uam9pbihcIlxcblwiKTtcblxuXHR2YXIgc2VwID0gW1xuXHRcdFwiLS1Tb2NpYWxDYWxjU3ByZWFkc2hlZXRDb250cm9sU2F2ZVwiLFxuXHRcdFwiQ29udGVudC10eXBlOiB0ZXh0L3BsYWluOyBjaGFyc2V0PVVURi04XCJcblx0XS5qb2luKFwiXFxuXCIpICsgXCJcXG5cIjtcblxuXHQvKiBUT0RPOiB0aGUgb3RoZXIgcGFydHMgKi9cblx0dmFyIG1ldGEgPSBbXG5cdFx0XCIjIFNvY2lhbENhbGMgU3ByZWFkc2hlZXQgQ29udHJvbCBTYXZlXCIsXG5cdFx0XCJwYXJ0OnNoZWV0XCJcblx0XS5qb2luKFwiXFxuXCIpO1xuXG5cdHZhciBlbmQgPSBcIi0tU29jaWFsQ2FsY1NwcmVhZHNoZWV0Q29udHJvbFNhdmUtLVwiO1xuXG5cdGZ1bmN0aW9uIHNoZWV0X3RvX2V0aF9kYXRhKHdzKSB7XG5cdFx0aWYoIXdzIHx8ICF3c1snIXJlZiddKSByZXR1cm4gXCJcIjtcblx0XHR2YXIgbyA9IFtdLCBvbyA9IFtdLCBjZWxsLCBjb29yZCA9IFwiXCI7XG5cdFx0dmFyIHIgPSBkZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSk7XG5cdFx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheSh3cyk7XG5cdFx0Zm9yKHZhciBSID0gci5zLnI7IFIgPD0gci5lLnI7ICsrUikge1xuXHRcdFx0Zm9yKHZhciBDID0gci5zLmM7IEMgPD0gci5lLmM7ICsrQykge1xuXHRcdFx0XHRjb29yZCA9IGVuY29kZV9jZWxsKHtyOlIsYzpDfSk7XG5cdFx0XHRcdGNlbGwgPSBkZW5zZSA/ICh3c1tSXXx8W10pW0NdIDogd3NbY29vcmRdO1xuXHRcdFx0XHRpZighY2VsbCB8fCBjZWxsLnYgPT0gbnVsbCB8fCBjZWxsLnQgPT09ICd6JykgY29udGludWU7XG5cdFx0XHRcdG9vID0gW1wiY2VsbFwiLCBjb29yZCwgJ3QnXTtcblx0XHRcdFx0c3dpdGNoKGNlbGwudCkge1xuXHRcdFx0XHRcdGNhc2UgJ3MnOiBjYXNlICdzdHInOiBvby5wdXNoKGVuY29kZShjZWxsLnYpKTsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbic6XG5cdFx0XHRcdFx0XHRpZighY2VsbC5mKSB7IG9vWzJdPSd2Jzsgb29bM109Y2VsbC52OyB9XG5cdFx0XHRcdFx0XHRlbHNlIHsgb29bMl09J3Z0Zic7IG9vWzNdPSduJzsgb29bNF09Y2VsbC52OyBvb1s1XT1lbmNvZGUoY2VsbC5mKTsgfVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnYic6XG5cdFx0XHRcdFx0XHRvb1syXSA9ICd2dCcrKGNlbGwuZj8nZic6J2MnKTsgb29bM109J25sJzsgb29bNF09Y2VsbC52P1wiMVwiOlwiMFwiO1xuXHRcdFx0XHRcdFx0b29bNV0gPSBlbmNvZGUoY2VsbC5mfHwoY2VsbC52PydUUlVFJzonRkFMU0UnKSk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdkJzpcblx0XHRcdFx0XHRcdHZhciB0ID0gZGF0ZW51bShwYXJzZURhdGUoY2VsbC52KSk7XG5cdFx0XHRcdFx0XHRvb1syXSA9ICd2dGMnOyBvb1szXSA9ICduZCc7IG9vWzRdID0gXCJcIit0O1xuXHRcdFx0XHRcdFx0b29bNV0gPSBjZWxsLncgfHwgU1NGLmZvcm1hdChjZWxsLnogfHwgU1NGLl90YWJsZVsxNF0sIHQpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZSc6IGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG8ucHVzaChvby5qb2luKFwiOlwiKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdG8ucHVzaChcInNoZWV0OmM6XCIgKyAoci5lLmMtci5zLmMrMSkgKyBcIjpyOlwiICsgKHIuZS5yLXIucy5yKzEpICsgXCI6dHZmOjFcIik7XG5cdFx0by5wdXNoKFwidmFsdWVmb3JtYXQ6MTp0ZXh0LXdpa2lcIik7XG5cdFx0Ly9vLnB1c2goXCJjb3BpZWRmcm9tOlwiICsgd3NbJyFyZWYnXSk7IC8vIGNsaXBib2FyZCBvbmx5XG5cdFx0cmV0dXJuIG8uam9pbihcIlxcblwiKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHNoZWV0X3RvX2V0aCh3cykge1xuXHRcdHJldHVybiBbaGVhZGVyLCBzZXAsIG1ldGEsIHNlcCwgc2hlZXRfdG9fZXRoX2RhdGEod3MpLCBlbmRdLmpvaW4oXCJcXG5cIik7XG5cdFx0Ly8gcmV0dXJuIFtcInZlcnNpb246MS41XCIsIHNoZWV0X3RvX2V0aF9kYXRhKHdzKV0uam9pbihcIlxcblwiKTsgLy8gY2xpcGJvYXJkIGZvcm1cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0dG9fd29ya2Jvb2s6IGV0aF90b193b3JrYm9vayxcblx0XHR0b19zaGVldDogZXRoX3RvX3NoZWV0LFxuXHRcdGZyb21fc2hlZXQ6IHNoZWV0X3RvX2V0aFxuXHR9O1xufSkoKTtcblxudmFyIFBSTiA9IChmdW5jdGlvbigpIHtcblx0ZnVuY3Rpb24gc2V0X3RleHRfYXJyKGRhdGEsIGFyciwgUiwgQywgbykge1xuXHRcdGlmKG8ucmF3KSBhcnJbUl1bQ10gPSBkYXRhO1xuXHRcdGVsc2UgaWYoZGF0YSA9PT0gXCJcIil7LyogZW1wdHkgKi99XG5cdFx0ZWxzZSBpZihkYXRhID09PSAnVFJVRScpIGFycltSXVtDXSA9IHRydWU7XG5cdFx0ZWxzZSBpZihkYXRhID09PSAnRkFMU0UnKSBhcnJbUl1bQ10gPSBmYWxzZTtcblx0XHRlbHNlIGlmKCFpc05hTihmdXp6eW51bShkYXRhKSkpIGFycltSXVtDXSA9IGZ1enp5bnVtKGRhdGEpO1xuXHRcdGVsc2UgaWYoIWlzTmFOKGZ1enp5ZGF0ZShkYXRhKS5nZXREYXRlKCkpKSBhcnJbUl1bQ10gPSBwYXJzZURhdGUoZGF0YSk7XG5cdFx0ZWxzZSBhcnJbUl1bQ10gPSBkYXRhO1xuXHR9XG5cblx0ZnVuY3Rpb24gcHJuX3RvX2FvYV9zdHIoZiwgb3B0cykge1xuXHRcdHZhciBvID0gb3B0cyB8fCB7fTtcblx0XHR2YXIgYXJyID0gKFtdKTtcblx0XHRpZighZiB8fCBmLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGFycjtcblx0XHR2YXIgbGluZXMgPSBmLnNwbGl0KC9bXFxyXFxuXS8pO1xuXHRcdHZhciBMID0gbGluZXMubGVuZ3RoIC0gMTtcblx0XHR3aGlsZShMID49IDAgJiYgbGluZXNbTF0ubGVuZ3RoID09PSAwKSAtLUw7XG5cdFx0dmFyIHN0YXJ0ID0gMTAsIGlkeCA9IDA7XG5cdFx0dmFyIFIgPSAwO1xuXHRcdGZvcig7IFIgPD0gTDsgKytSKSB7XG5cdFx0XHRpZHggPSBsaW5lc1tSXS5pbmRleE9mKFwiIFwiKTtcblx0XHRcdGlmKGlkeCA9PSAtMSkgaWR4ID0gbGluZXNbUl0ubGVuZ3RoOyBlbHNlIGlkeCsrO1xuXHRcdFx0c3RhcnQgPSBNYXRoLm1heChzdGFydCwgaWR4KTtcblx0XHR9XG5cdFx0Zm9yKFIgPSAwOyBSIDw9IEw7ICsrUikge1xuXHRcdFx0YXJyW1JdID0gW107XG5cdFx0XHQvKiBUT0RPOiBjb25maXJtIHRoYXQgd2lkdGhzIGFyZSBhbHdheXMgMTAgKi9cblx0XHRcdHZhciBDID0gMDtcblx0XHRcdHNldF90ZXh0X2FycihsaW5lc1tSXS5zbGljZSgwLCBzdGFydCkudHJpbSgpLCBhcnIsIFIsIEMsIG8pO1xuXHRcdFx0Zm9yKEMgPSAxOyBDIDw9IChsaW5lc1tSXS5sZW5ndGggLSBzdGFydCkvMTAgKyAxOyArK0MpXG5cdFx0XHRcdHNldF90ZXh0X2FycihsaW5lc1tSXS5zbGljZShzdGFydCsoQy0xKSoxMCxzdGFydCtDKjEwKS50cmltKCksYXJyLFIsQyxvKTtcblx0XHR9XG5cdFx0aWYoby5zaGVldFJvd3MpIGFyciA9IGFyci5zbGljZSgwLCBvLnNoZWV0Um93cyk7XG5cdFx0cmV0dXJuIGFycjtcblx0fVxuXG5cdC8vIExpc3Qgb2YgYWNjZXB0ZWQgQ1NWIHNlcGFyYXRvcnNcblx0dmFyIGd1ZXNzX3NlcHMgPSB7XG4weDJDOiAnLCcsXG4weDA5OiBcIlxcdFwiLFxuMHgzQjogJzsnLFxuMHg3QzogJ3wnXG5cdH07XG5cblx0Ly8gQ1NWIHNlcGFyYXRvciB3ZWlnaHRzIHRvIGJlIHVzZWQgaW4gY2FzZSBvZiBlcXVhbCBudW1iZXJzXG5cdHZhciBndWVzc19zZXBfd2VpZ2h0cyA9IHtcbjB4MkM6IDMsXG4weDA5OiAyLFxuMHgzQjogMSxcbjB4N0M6IDBcblx0fTtcblxuXHRmdW5jdGlvbiBndWVzc19zZXAoc3RyKSB7XG5cdFx0dmFyIGNudCA9IHt9LCBpbnN0ciA9IGZhbHNlLCBlbmQgPSAwLCBjYyA9IDA7XG5cdFx0Zm9yKDtlbmQgPCBzdHIubGVuZ3RoOysrZW5kKSB7XG5cdFx0XHRpZigoY2M9c3RyLmNoYXJDb2RlQXQoZW5kKSkgPT0gMHgyMikgaW5zdHIgPSAhaW5zdHI7XG5cdFx0XHRlbHNlIGlmKCFpbnN0ciAmJiBjYyBpbiBndWVzc19zZXBzKSBjbnRbY2NdID0gKGNudFtjY118fDApKzE7XG5cdFx0fVxuXG5cdFx0Y2MgPSBbXTtcblx0XHRmb3IoZW5kIGluIGNudCkgaWYgKCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY250LCBlbmQpICkge1xuXHRcdFx0Y2MucHVzaChbIGNudFtlbmRdLCBlbmQgXSk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhY2MubGVuZ3RoICkge1xuXHRcdFx0Y250ID0gZ3Vlc3Nfc2VwX3dlaWdodHM7XG5cdFx0XHRmb3IoZW5kIGluIGNudCkgaWYgKCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY250LCBlbmQpICkge1xuXHRcdFx0XHRjYy5wdXNoKFsgY250W2VuZF0sIGVuZCBdKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjYy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIGFbMF0gLSBiWzBdIHx8IGd1ZXNzX3NlcF93ZWlnaHRzW2FbMV1dIC0gZ3Vlc3Nfc2VwX3dlaWdodHNbYlsxXV07IH0pO1xuXG5cdFx0cmV0dXJuIGd1ZXNzX3NlcHNbY2MucG9wKClbMV1dIHx8IDB4MkM7XG5cdH1cblxuXHRmdW5jdGlvbiBkc3ZfdG9fc2hlZXRfc3RyKHN0ciwgb3B0cykge1xuXHRcdHZhciBvID0gb3B0cyB8fCB7fTtcblx0XHR2YXIgc2VwID0gXCJcIjtcblx0XHRpZihERU5TRSAhPSBudWxsICYmIG8uZGVuc2UgPT0gbnVsbCkgby5kZW5zZSA9IERFTlNFO1xuXHRcdHZhciB3cyA9IG8uZGVuc2UgPyAoW10pIDogKHt9KTtcblx0XHR2YXIgcmFuZ2UgPSAoe3M6IHtjOjAsIHI6MH0sIGU6IHtjOjAsIHI6MH19KTtcblxuXHRcdGlmKHN0ci5zbGljZSgwLDQpID09IFwic2VwPVwiKSB7XG5cdFx0XHQvLyBJZiB0aGUgbGluZSBlbmRzIGluIFxcclxcblxuXHRcdFx0aWYoc3RyLmNoYXJDb2RlQXQoNSkgPT0gMTMgJiYgc3RyLmNoYXJDb2RlQXQoNikgPT0gMTAgKSB7XG5cdFx0XHRcdHNlcCA9IHN0ci5jaGFyQXQoNCk7IHN0ciA9IHN0ci5zbGljZSg3KTtcblx0XHRcdH1cblx0XHRcdC8vIElmIGxpbmUgZW5kcyBpbiBcXHIgT1IgXFxuXG5cdFx0XHRlbHNlIGlmKHN0ci5jaGFyQ29kZUF0KDUpID09IDEzIHx8IHN0ci5jaGFyQ29kZUF0KDUpID09IDEwICkge1xuXHRcdFx0XHRzZXAgPSBzdHIuY2hhckF0KDQpOyBzdHIgPSBzdHIuc2xpY2UoNik7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHNlcCA9IGd1ZXNzX3NlcChzdHIuc2xpY2UoMCwxMDI0KSk7XG5cdFx0fVxuXHRcdGVsc2UgaWYobyAmJiBvLkZTKSBzZXAgPSBvLkZTO1xuXHRcdGVsc2Ugc2VwID0gZ3Vlc3Nfc2VwKHN0ci5zbGljZSgwLDEwMjQpKTtcblx0XHR2YXIgUiA9IDAsIEMgPSAwLCB2ID0gMDtcblx0XHR2YXIgc3RhcnQgPSAwLCBlbmQgPSAwLCBzZXBjYyA9IHNlcC5jaGFyQ29kZUF0KDApLCBpbnN0ciA9IGZhbHNlLCBjYz0wLCBzdGFydGNjPXN0ci5jaGFyQ29kZUF0KDApO1xuXHRcdHN0ciA9IHN0ci5yZXBsYWNlKC9cXHJcXG4vbWcsIFwiXFxuXCIpO1xuXHRcdHZhciBfcmUgPSBvLmRhdGVORiAhPSBudWxsID8gZGF0ZU5GX3JlZ2V4KG8uZGF0ZU5GKSA6IG51bGw7XG5cdFx0ZnVuY3Rpb24gZmluaXNoX2NlbGwoKSB7XG5cdFx0XHR2YXIgcyA9IHN0ci5zbGljZShzdGFydCwgZW5kKTtcblx0XHRcdHZhciBjZWxsID0gKHt9KTtcblx0XHRcdGlmKHMuY2hhckF0KDApID09ICdcIicgJiYgcy5jaGFyQXQocy5sZW5ndGggLSAxKSA9PSAnXCInKSBzID0gcy5zbGljZSgxLC0xKS5yZXBsYWNlKC9cIlwiL2csJ1wiJyk7XG5cdFx0XHRpZihzLmxlbmd0aCA9PT0gMCkgY2VsbC50ID0gJ3onO1xuXHRcdFx0ZWxzZSBpZihvLnJhdykgeyBjZWxsLnQgPSAncyc7IGNlbGwudiA9IHM7IH1cblx0XHRcdGVsc2UgaWYocy50cmltKCkubGVuZ3RoID09PSAwKSB7IGNlbGwudCA9ICdzJzsgY2VsbC52ID0gczsgfVxuXHRcdFx0ZWxzZSBpZihzLmNoYXJDb2RlQXQoMCkgPT0gMHgzRCkge1xuXHRcdFx0XHRpZihzLmNoYXJDb2RlQXQoMSkgPT0gMHgyMiAmJiBzLmNoYXJDb2RlQXQocy5sZW5ndGggLSAxKSA9PSAweDIyKSB7IGNlbGwudCA9ICdzJzsgY2VsbC52ID0gcy5zbGljZSgyLC0xKS5yZXBsYWNlKC9cIlwiL2csJ1wiJyk7IH1cblx0XHRcdFx0ZWxzZSBpZihmdXp6eWZtbGEocykpIHsgY2VsbC50ID0gJ24nOyBjZWxsLmYgPSBzLnNsaWNlKDEpOyB9XG5cdFx0XHRcdGVsc2UgeyBjZWxsLnQgPSAncyc7IGNlbGwudiA9IHM7IH0gfVxuXHRcdFx0ZWxzZSBpZihzID09IFwiVFJVRVwiKSB7IGNlbGwudCA9ICdiJzsgY2VsbC52ID0gdHJ1ZTsgfVxuXHRcdFx0ZWxzZSBpZihzID09IFwiRkFMU0VcIikgeyBjZWxsLnQgPSAnYic7IGNlbGwudiA9IGZhbHNlOyB9XG5cdFx0XHRlbHNlIGlmKCFpc05hTih2ID0gZnV6enludW0ocykpKSB7IGNlbGwudCA9ICduJzsgaWYoby5jZWxsVGV4dCAhPT0gZmFsc2UpIGNlbGwudyA9IHM7IGNlbGwudiA9IHY7IH1cblx0XHRcdGVsc2UgaWYoIWlzTmFOKGZ1enp5ZGF0ZShzKS5nZXREYXRlKCkpIHx8IF9yZSAmJiBzLm1hdGNoKF9yZSkpIHtcblx0XHRcdFx0Y2VsbC56ID0gby5kYXRlTkYgfHwgU1NGLl90YWJsZVsxNF07XG5cdFx0XHRcdHZhciBrID0gMDtcblx0XHRcdFx0aWYoX3JlICYmIHMubWF0Y2goX3JlKSl7IHM9ZGF0ZU5GX2ZpeChzLCBvLmRhdGVORiwgKHMubWF0Y2goX3JlKXx8W10pKTsgaz0xOyB9XG5cdFx0XHRcdGlmKG8uY2VsbERhdGVzKSB7IGNlbGwudCA9ICdkJzsgY2VsbC52ID0gcGFyc2VEYXRlKHMsIGspOyB9XG5cdFx0XHRcdGVsc2UgeyBjZWxsLnQgPSAnbic7IGNlbGwudiA9IGRhdGVudW0ocGFyc2VEYXRlKHMsIGspKTsgfVxuXHRcdFx0XHRpZihvLmNlbGxUZXh0ICE9PSBmYWxzZSkgY2VsbC53ID0gU1NGLmZvcm1hdChjZWxsLnosIGNlbGwudiBpbnN0YW5jZW9mIERhdGUgPyBkYXRlbnVtKGNlbGwudik6Y2VsbC52KTtcblx0XHRcdFx0aWYoIW8uY2VsbE5GKSBkZWxldGUgY2VsbC56O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2VsbC50ID0gJ3MnO1xuXHRcdFx0XHRjZWxsLnYgPSBzO1xuXHRcdFx0fVxuXHRcdFx0aWYoY2VsbC50ID09ICd6Jyl7fVxuXHRcdFx0ZWxzZSBpZihvLmRlbnNlKSB7IGlmKCF3c1tSXSkgd3NbUl0gPSBbXTsgd3NbUl1bQ10gPSBjZWxsOyB9XG5cdFx0XHRlbHNlIHdzW2VuY29kZV9jZWxsKHtjOkMscjpSfSldID0gY2VsbDtcblx0XHRcdHN0YXJ0ID0gZW5kKzE7IHN0YXJ0Y2MgPSBzdHIuY2hhckNvZGVBdChzdGFydCk7XG5cdFx0XHRpZihyYW5nZS5lLmMgPCBDKSByYW5nZS5lLmMgPSBDO1xuXHRcdFx0aWYocmFuZ2UuZS5yIDwgUikgcmFuZ2UuZS5yID0gUjtcblx0XHRcdGlmKGNjID09IHNlcGNjKSArK0M7IGVsc2UgeyBDID0gMDsgKytSOyBpZihvLnNoZWV0Um93cyAmJiBvLnNoZWV0Um93cyA8PSBSKSByZXR1cm4gdHJ1ZTsgfVxuXHRcdH1cblx0XHRvdXRlcjogZm9yKDtlbmQgPCBzdHIubGVuZ3RoOysrZW5kKSBzd2l0Y2goKGNjPXN0ci5jaGFyQ29kZUF0KGVuZCkpKSB7XG5cdFx0XHRjYXNlIDB4MjI6IGlmKHN0YXJ0Y2MgPT09IDB4MjIpIGluc3RyID0gIWluc3RyOyBicmVhaztcblx0XHRcdGNhc2Ugc2VwY2M6IGNhc2UgMHgwYTogY2FzZSAweDBkOiBpZighaW5zdHIgJiYgZmluaXNoX2NlbGwoKSkgYnJlYWsgb3V0ZXI7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogYnJlYWs7XG5cdFx0fVxuXHRcdGlmKGVuZCAtIHN0YXJ0ID4gMCkgZmluaXNoX2NlbGwoKTtcblxuXHRcdHdzWychcmVmJ10gPSBlbmNvZGVfcmFuZ2UocmFuZ2UpO1xuXHRcdHJldHVybiB3cztcblx0fVxuXG5cdGZ1bmN0aW9uIHBybl90b19zaGVldF9zdHIoc3RyLCBvcHRzKSB7XG5cdFx0aWYoIShvcHRzICYmIG9wdHMuUFJOKSkgcmV0dXJuIGRzdl90b19zaGVldF9zdHIoc3RyLCBvcHRzKTtcblx0XHRpZihvcHRzLkZTKSByZXR1cm4gZHN2X3RvX3NoZWV0X3N0cihzdHIsIG9wdHMpO1xuXHRcdGlmKHN0ci5zbGljZSgwLDQpID09IFwic2VwPVwiKSByZXR1cm4gZHN2X3RvX3NoZWV0X3N0cihzdHIsIG9wdHMpO1xuXHRcdGlmKHN0ci5pbmRleE9mKFwiXFx0XCIpID49IDAgfHwgc3RyLmluZGV4T2YoXCIsXCIpID49IDAgfHwgc3RyLmluZGV4T2YoXCI7XCIpID49IDApIHJldHVybiBkc3ZfdG9fc2hlZXRfc3RyKHN0ciwgb3B0cyk7XG5cdFx0cmV0dXJuIGFvYV90b19zaGVldChwcm5fdG9fYW9hX3N0cihzdHIsIG9wdHMpLCBvcHRzKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHBybl90b19zaGVldChkLCBvcHRzKSB7XG5cdFx0dmFyIHN0ciA9IFwiXCIsIGJ5dGVzID0gb3B0cy50eXBlID09ICdzdHJpbmcnID8gWzAsMCwwLDBdIDogZmlyc3RieXRlKGQsIG9wdHMpO1xuXHRcdHN3aXRjaChvcHRzLnR5cGUpIHtcblx0XHRcdGNhc2UgJ2Jhc2U2NCc6IHN0ciA9IEJhc2U2NC5kZWNvZGUoZCk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnYmluYXJ5Jzogc3RyID0gZDsgYnJlYWs7XG5cdFx0XHRjYXNlICdidWZmZXInOlxuXHRcdFx0XHRpZihvcHRzLmNvZGVwYWdlID09IDY1MDAxKSBzdHIgPSBkLnRvU3RyaW5nKCd1dGY4Jyk7IC8vIFRPRE86IHRlc3QgaWYgYnVmXG5cdFx0XHRcdGVsc2UgaWYob3B0cy5jb2RlcGFnZSAmJiB0eXBlb2YgY3B0YWJsZSAhPT0gJ3VuZGVmaW5lZCcpIHN0ciA9IGNwdGFibGUudXRpbHMuZGVjb2RlKG9wdHMuY29kZXBhZ2UsIGQpO1xuXHRcdFx0XHRlbHNlIHN0ciA9IGhhc19idWYgJiYgQnVmZmVyLmlzQnVmZmVyKGQpID8gZC50b1N0cmluZygnYmluYXJ5JykgOiBhMnMoZCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnYXJyYXknOiBzdHIgPSBjYzJzdHIoZCk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnc3RyaW5nJzogc3RyID0gZDsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgdHlwZSBcIiArIG9wdHMudHlwZSk7XG5cdFx0fVxuXHRcdGlmKGJ5dGVzWzBdID09IDB4RUYgJiYgYnl0ZXNbMV0gPT0gMHhCQiAmJiBieXRlc1syXSA9PSAweEJGKSBzdHIgPSB1dGY4cmVhZChzdHIuc2xpY2UoMykpO1xuXHRcdGVsc2UgaWYob3B0cy50eXBlICE9ICdzdHJpbmcnICYmIG9wdHMuY29kZXBhZ2UgPT0gNjUwMDEpIHN0ciA9IHV0ZjhyZWFkKHN0cik7XG5cdFx0ZWxzZSBpZigob3B0cy50eXBlID09ICdiaW5hcnknKSAmJiB0eXBlb2YgY3B0YWJsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgb3B0cy5jb2RlcGFnZSkgIHN0ciA9IGNwdGFibGUudXRpbHMuZGVjb2RlKG9wdHMuY29kZXBhZ2UsIGNwdGFibGUudXRpbHMuZW5jb2RlKDI4NTkxLHN0cikpO1xuXHRcdGlmKHN0ci5zbGljZSgwLDE5KSA9PSBcInNvY2lhbGNhbGM6dmVyc2lvbjpcIikgcmV0dXJuIEVUSC50b19zaGVldChvcHRzLnR5cGUgPT0gJ3N0cmluZycgPyBzdHIgOiB1dGY4cmVhZChzdHIpLCBvcHRzKTtcblx0XHRyZXR1cm4gcHJuX3RvX3NoZWV0X3N0cihzdHIsIG9wdHMpO1xuXHR9XG5cblx0ZnVuY3Rpb24gcHJuX3RvX3dvcmtib29rKGQsIG9wdHMpIHsgcmV0dXJuIHNoZWV0X3RvX3dvcmtib29rKHBybl90b19zaGVldChkLCBvcHRzKSwgb3B0cyk7IH1cblxuXHRmdW5jdGlvbiBzaGVldF90b19wcm4od3MpIHtcblx0XHR2YXIgbyA9IFtdO1xuXHRcdHZhciByID0gc2FmZV9kZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSksIGNlbGw7XG5cdFx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheSh3cyk7XG5cdFx0Zm9yKHZhciBSID0gci5zLnI7IFIgPD0gci5lLnI7ICsrUikge1xuXHRcdFx0dmFyIG9vID0gW107XG5cdFx0XHRmb3IodmFyIEMgPSByLnMuYzsgQyA8PSByLmUuYzsgKytDKSB7XG5cdFx0XHRcdHZhciBjb29yZCA9IGVuY29kZV9jZWxsKHtyOlIsYzpDfSk7XG5cdFx0XHRcdGNlbGwgPSBkZW5zZSA/ICh3c1tSXXx8W10pW0NdIDogd3NbY29vcmRdO1xuXHRcdFx0XHRpZighY2VsbCB8fCBjZWxsLnYgPT0gbnVsbCkgeyBvby5wdXNoKFwiICAgICAgICAgIFwiKTsgY29udGludWU7IH1cblx0XHRcdFx0dmFyIHcgPSAoY2VsbC53IHx8IChmb3JtYXRfY2VsbChjZWxsKSwgY2VsbC53KSB8fCBcIlwiKS5zbGljZSgwLDEwKTtcblx0XHRcdFx0d2hpbGUody5sZW5ndGggPCAxMCkgdyArPSBcIiBcIjtcblx0XHRcdFx0b28ucHVzaCh3ICsgKEMgPT09IDAgPyBcIiBcIiA6IFwiXCIpKTtcblx0XHRcdH1cblx0XHRcdG8ucHVzaChvby5qb2luKFwiXCIpKTtcblx0XHR9XG5cdFx0cmV0dXJuIG8uam9pbihcIlxcblwiKTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0dG9fd29ya2Jvb2s6IHBybl90b193b3JrYm9vayxcblx0XHR0b19zaGVldDogcHJuX3RvX3NoZWV0LFxuXHRcdGZyb21fc2hlZXQ6IHNoZWV0X3RvX3ByblxuXHR9O1xufSkoKTtcblxuLyogRXhjZWwgZGVmYXVsdHMgdG8gU1lMSyBidXQgd2FybnMgaWYgZGF0YSBpcyBub3QgdmFsaWQgKi9cbmZ1bmN0aW9uIHJlYWRfd2JfSUQoZCwgb3B0cykge1xuXHR2YXIgbyA9IG9wdHMgfHwge30sIE9MRF9XVEYgPSAhIW8uV1RGOyBvLldURiA9IHRydWU7XG5cdHRyeSB7XG5cdFx0dmFyIG91dCA9IFNZTEsudG9fd29ya2Jvb2soZCwgbyk7XG5cdFx0by5XVEYgPSBPTERfV1RGO1xuXHRcdHJldHVybiBvdXQ7XG5cdH0gY2F0Y2goZSkge1xuXHRcdG8uV1RGID0gT0xEX1dURjtcblx0XHRpZighZS5tZXNzYWdlLm1hdGNoKC9TWUxLIGJhZCByZWNvcmQgSUQvKSAmJiBPTERfV1RGKSB0aHJvdyBlO1xuXHRcdHJldHVybiBQUk4udG9fd29ya2Jvb2soZCwgb3B0cyk7XG5cdH1cbn1cblxudmFyIFdLXyA9ICAoZnVuY3Rpb24oKSB7XG5cdGZ1bmN0aW9uIGxvdHVzaG9wcGVyKGRhdGEsIGNiLCBvcHRzKSB7XG5cdFx0aWYoIWRhdGEpIHJldHVybjtcblx0XHRwcmVwX2Jsb2IoZGF0YSwgZGF0YS5sIHx8IDApO1xuXHRcdHZhciBFbnVtID0gb3B0cy5FbnVtIHx8IFdLMUVudW07XG5cdFx0d2hpbGUoZGF0YS5sIDwgZGF0YS5sZW5ndGgpIHtcblx0XHRcdHZhciBSVCA9IGRhdGEucmVhZF9zaGlmdCgyKTtcblx0XHRcdHZhciBSID0gRW51bVtSVF0gfHwgRW51bVsweEZGRkZdO1xuXHRcdFx0dmFyIGxlbmd0aCA9IGRhdGEucmVhZF9zaGlmdCgyKTtcblx0XHRcdHZhciB0Z3QgPSBkYXRhLmwgKyBsZW5ndGg7XG5cdFx0XHR2YXIgZCA9IFIuZiAmJiBSLmYoZGF0YSwgbGVuZ3RoLCBvcHRzKTtcblx0XHRcdGRhdGEubCA9IHRndDtcblx0XHRcdGlmKGNiKGQsIFIsIFJUKSkgcmV0dXJuO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGxvdHVzX3RvX3dvcmtib29rKGQsIG9wdHMpIHtcblx0XHRzd2l0Y2gob3B0cy50eXBlKSB7XG5cdFx0XHRjYXNlICdiYXNlNjQnOiByZXR1cm4gbG90dXNfdG9fd29ya2Jvb2tfYnVmKHMyYShCYXNlNjQuZGVjb2RlKGQpKSwgb3B0cyk7XG5cdFx0XHRjYXNlICdiaW5hcnknOiByZXR1cm4gbG90dXNfdG9fd29ya2Jvb2tfYnVmKHMyYShkKSwgb3B0cyk7XG5cdFx0XHRjYXNlICdidWZmZXInOlxuXHRcdFx0Y2FzZSAnYXJyYXknOiByZXR1cm4gbG90dXNfdG9fd29ya2Jvb2tfYnVmKGQsIG9wdHMpO1xuXHRcdH1cblx0XHR0aHJvdyBcIlVuc3VwcG9ydGVkIHR5cGUgXCIgKyBvcHRzLnR5cGU7XG5cdH1cblxuXHRmdW5jdGlvbiBsb3R1c190b193b3JrYm9va19idWYoZCwgb3B0cykge1xuXHRcdGlmKCFkKSByZXR1cm4gZDtcblx0XHR2YXIgbyA9IG9wdHMgfHwge307XG5cdFx0aWYoREVOU0UgIT0gbnVsbCAmJiBvLmRlbnNlID09IG51bGwpIG8uZGVuc2UgPSBERU5TRTtcblx0XHR2YXIgcyA9ICgoby5kZW5zZSA/IFtdIDoge30pKSwgbiA9IFwiU2hlZXQxXCIsIHNpZHggPSAwO1xuXHRcdHZhciBzaGVldHMgPSB7fSwgc25hbWVzID0gW25dLCByZWFsbmFtZXMgPSBbXTtcblxuXHRcdHZhciByZWZndWVzcyA9IHtzOiB7cjowLCBjOjB9LCBlOiB7cjowLCBjOjB9IH07XG5cdFx0dmFyIHNoZWV0Um93cyA9IG8uc2hlZXRSb3dzIHx8IDA7XG5cblx0XHRpZihkWzJdID09IDB4MDIpIHtcblx0XHRcdG8uRW51bSA9IFdLMUVudW07XG5cdFx0XHRsb3R1c2hvcHBlcihkLCBmdW5jdGlvbih2YWwsIFIsIFJUKSB7IHN3aXRjaChSVCkge1xuXHRcdFx0XHRjYXNlIDB4MDA6IC8qIEJPRiAqL1xuXHRcdFx0XHRcdG8udmVycyA9IHZhbDtcblx0XHRcdFx0XHRpZih2YWwgPj0gMHgxMDAwKSBvLnFwcm8gPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDY6IHJlZmd1ZXNzID0gdmFsOyBicmVhazsgLyogUkFOR0UgKi9cblx0XHRcdFx0Y2FzZSAweDBGOiAvKiBMQUJFTCAqL1xuXHRcdFx0XHRjYXNlIDB4MzM6IC8qIFNUUklORyAqL1xuXHRcdFx0XHRcdGlmKCFvLnFwcm8pIHZhbFsxXS52ID0gdmFsWzFdLnYuc2xpY2UoMSk7XG5cdFx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRjYXNlIDB4MEQ6IC8qIElOVEVHRVIgKi9cblx0XHRcdFx0Y2FzZSAweDBFOiAvKiBOVU1CRVIgKi9cblx0XHRcdFx0Y2FzZSAweDEwOiAvKiBGT1JNVUxBICovXG5cdFx0XHRcdFx0LyogVE9ETzogYWN0dWFsIHRyYW5zbGF0aW9uIG9mIHRoZSBmb3JtYXQgY29kZSAqL1xuXHRcdFx0XHRcdGlmKFJUID09IDB4MEUgJiYgKHZhbFsyXSAmIDB4NzApID09IDB4NzAgJiYgKHZhbFsyXSAmIDB4MEYpID4gMSAmJiAodmFsWzJdICYgMHgwRikgPCAxNSkge1xuXHRcdFx0XHRcdFx0dmFsWzFdLnogPSBvLmRhdGVORiB8fCBTU0YuX3RhYmxlWzE0XTtcblx0XHRcdFx0XHRcdGlmKG8uY2VsbERhdGVzKSB7IHZhbFsxXS50ID0gJ2QnOyB2YWxbMV0udiA9IG51bWRhdGUodmFsWzFdLnYpOyB9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZhciB0bXBjZWxsID0gby5kZW5zZSA/IChzW3ZhbFswXS5yXXx8W10pW3ZhbFswXS5jXSA6IHNbZW5jb2RlX2NlbGwodmFsWzBdKV07XG5cdFx0XHRcdFx0aWYodG1wY2VsbCkge1xuXHRcdFx0XHRcdFx0dG1wY2VsbC50ID0gdmFsWzFdLnQ7IHRtcGNlbGwudiA9IHZhbFsxXS52O1xuXHRcdFx0XHRcdFx0aWYodmFsWzFdLnogIT0gbnVsbCkgdG1wY2VsbC56ID0gdmFsWzFdLno7XG5cdFx0XHRcdFx0XHRpZih2YWxbMV0uZiAhPSBudWxsKSB0bXBjZWxsLmYgPSB2YWxbMV0uZjtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZihvLmRlbnNlKSB7XG5cdFx0XHRcdFx0XHRpZighc1t2YWxbMF0ucl0pIHNbdmFsWzBdLnJdID0gW107XG5cdFx0XHRcdFx0XHRzW3ZhbFswXS5yXVt2YWxbMF0uY10gPSB2YWxbMV07XG5cdFx0XHRcdFx0fSBlbHNlIHNbZW5jb2RlX2NlbGwodmFsWzBdKV0gPSB2YWxbMV07XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHR9fSwgbyk7XG5cdFx0fSBlbHNlIGlmKGRbMl0gPT0gMHgxQSB8fCBkWzJdID09IDB4MEUpIHtcblx0XHRcdG8uRW51bSA9IFdLM0VudW07XG5cdFx0XHRpZihkWzJdID09IDB4MEUpIHsgby5xcHJvID0gdHJ1ZTsgZC5sID0gMDsgfVxuXHRcdFx0bG90dXNob3BwZXIoZCwgZnVuY3Rpb24odmFsLCBSLCBSVCkgeyBzd2l0Y2goUlQpIHtcblx0XHRcdFx0Y2FzZSAweDE2OiAvKiBMQUJFTDE2ICovXG5cdFx0XHRcdFx0dmFsWzFdLnYgPSB2YWxbMV0udi5zbGljZSgxKTtcblx0XHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdGNhc2UgMHgxNzogLyogTlVNQkVSMTcgKi9cblx0XHRcdFx0Y2FzZSAweDE4OiAvKiBOVU1CRVIxOCAqL1xuXHRcdFx0XHRjYXNlIDB4MTk6IC8qIEZPUk1VTEExOSAqL1xuXHRcdFx0XHRjYXNlIDB4MjU6IC8qIE5VTUJFUjI1ICovXG5cdFx0XHRcdGNhc2UgMHgyNzogLyogTlVNQkVSMjcgKi9cblx0XHRcdFx0Y2FzZSAweDI4OiAvKiBGT1JNVUxBMjggKi9cblx0XHRcdFx0XHRpZih2YWxbM10gPiBzaWR4KSB7XG5cdFx0XHRcdFx0XHRzW1wiIXJlZlwiXSA9IGVuY29kZV9yYW5nZShyZWZndWVzcyk7XG5cdFx0XHRcdFx0XHRzaGVldHNbbl0gPSBzO1xuXHRcdFx0XHRcdFx0cyA9IChvLmRlbnNlID8gW10gOiB7fSk7XG5cdFx0XHRcdFx0XHRyZWZndWVzcyA9IHtzOiB7cjowLCBjOjB9LCBlOiB7cjowLCBjOjB9IH07XG5cdFx0XHRcdFx0XHRzaWR4ID0gdmFsWzNdOyBuID0gXCJTaGVldFwiICsgKHNpZHggKyAxKTtcblx0XHRcdFx0XHRcdHNuYW1lcy5wdXNoKG4pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZihzaGVldFJvd3MgPiAwICYmIHZhbFswXS5yID49IHNoZWV0Um93cykgYnJlYWs7XG5cdFx0XHRcdFx0aWYoby5kZW5zZSkge1xuXHRcdFx0XHRcdFx0aWYoIXNbdmFsWzBdLnJdKSBzW3ZhbFswXS5yXSA9IFtdO1xuXHRcdFx0XHRcdFx0c1t2YWxbMF0ucl1bdmFsWzBdLmNdID0gdmFsWzFdO1xuXHRcdFx0XHRcdH0gZWxzZSBzW2VuY29kZV9jZWxsKHZhbFswXSldID0gdmFsWzFdO1xuXHRcdFx0XHRcdGlmKHJlZmd1ZXNzLmUuYyA8IHZhbFswXS5jKSByZWZndWVzcy5lLmMgPSB2YWxbMF0uYztcblx0XHRcdFx0XHRpZihyZWZndWVzcy5lLnIgPCB2YWxbMF0ucikgcmVmZ3Vlc3MuZS5yID0gdmFsWzBdLnI7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgxQjogLyogWEZPUk1BVCAqL1xuXHRcdFx0XHRcdGlmKHZhbFsweDM2YjBdKSByZWFsbmFtZXNbdmFsWzB4MzZiMF1bMF1dID0gdmFsWzB4MzZiMF1bMV07XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6IGJyZWFrO1xuXHRcdFx0fX0sIG8pO1xuXHRcdH0gZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgTE9UVVMgQk9GIFwiICsgZFsyXSk7XG5cblx0XHRzW1wiIXJlZlwiXSA9IGVuY29kZV9yYW5nZShyZWZndWVzcyk7XG5cdFx0c2hlZXRzW25dID0gcztcblx0XHRpZighcmVhbG5hbWVzLmxlbmd0aCkgcmV0dXJuIHsgU2hlZXROYW1lczogc25hbWVzLCBTaGVldHM6IHNoZWV0cyB9O1xuXHRcdHZhciBvc2hlZXRzID0ge30sIHJuYW1lcyA9IFtdO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCByZWFsbmFtZXMubGVuZ3RoOyArK2kpIGlmKHNoZWV0c1tzbmFtZXNbaV1dKSB7XG5cdFx0XHRybmFtZXMucHVzaChyZWFsbmFtZXNbaV0pO1xuXHRcdFx0b3NoZWV0c1tyZWFsbmFtZXNbaV1dID0gc2hlZXRzW3NuYW1lc1tpXV07XG5cdFx0fVxuXHRcdHJldHVybiB7IFNoZWV0TmFtZXM6IHJuYW1lcywgU2hlZXRzOiBvc2hlZXRzIH07XG5cdH1cblxuXHRmdW5jdGlvbiBzaGVldF90b193azEod3MsIG9wdHMpIHtcblx0XHR2YXIgbyA9IG9wdHMgfHwge307XG5cdFx0aWYoK28uY29kZXBhZ2UgPj0gMCkgc2V0X2NwKCtvLmNvZGVwYWdlKTtcblx0XHRpZihvLnR5cGUgPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHdyaXRlIFdLMSB0byBKUyBzdHJpbmdcIik7XG5cdFx0dmFyIGJhID0gYnVmX2FycmF5KCk7XG5cdFx0dmFyIHJhbmdlID0gc2FmZV9kZWNvZGVfcmFuZ2Uod3NbXCIhcmVmXCJdKTtcblx0XHR2YXIgZGVuc2UgPSBBcnJheS5pc0FycmF5KHdzKTtcblx0XHR2YXIgY29scyA9IFtdO1xuXG5cdFx0d3JpdGVfYmlmZl9yZWMoYmEsIDB4MDAsIHdyaXRlX0JPRl9XSzEoMHgwNDA2KSk7XG5cdFx0d3JpdGVfYmlmZl9yZWMoYmEsIDB4MDYsIHdyaXRlX1JBTkdFKHJhbmdlKSk7XG5cdFx0Zm9yKHZhciBSID0gcmFuZ2Uucy5yOyBSIDw9IHJhbmdlLmUucjsgKytSKSB7XG5cdFx0XHR2YXIgcnIgPSBlbmNvZGVfcm93KFIpO1xuXHRcdFx0Zm9yKHZhciBDID0gcmFuZ2Uucy5jOyBDIDw9IHJhbmdlLmUuYzsgKytDKSB7XG5cdFx0XHRcdGlmKFIgPT09IHJhbmdlLnMucikgY29sc1tDXSA9IGVuY29kZV9jb2woQyk7XG5cdFx0XHRcdHZhciByZWYgPSBjb2xzW0NdICsgcnI7XG5cdFx0XHRcdHZhciBjZWxsID0gZGVuc2UgPyAod3NbUl18fFtdKVtDXSA6IHdzW3JlZl07XG5cdFx0XHRcdGlmKCFjZWxsIHx8IGNlbGwudCA9PSBcInpcIikgY29udGludWU7XG5cdFx0XHRcdC8qIFRPRE86IGZvcm11bGEgcmVjb3JkcyAqL1xuXHRcdFx0XHRpZihjZWxsLnQgPT0gXCJuXCIpIHtcblx0XHRcdFx0XHRpZigoY2VsbC52fDApPT1jZWxsLnYgJiYgY2VsbC52ID49IC0zMjc2OCAmJiBjZWxsLnYgPD0gMzI3NjcpIHdyaXRlX2JpZmZfcmVjKGJhLCAweDBkLCB3cml0ZV9JTlRFR0VSKFIsIEMsIGNlbGwudikpO1xuXHRcdFx0XHRcdGVsc2Ugd3JpdGVfYmlmZl9yZWMoYmEsIDB4MGUsIHdyaXRlX05VTUJFUihSLCBDLCBjZWxsLnYpKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YXIgc3RyID0gZm9ybWF0X2NlbGwoY2VsbCk7XG5cdFx0XHRcdFx0d3JpdGVfYmlmZl9yZWMoYmEsIDB4MEYsIHdyaXRlX0xBQkVMKFIsIEMsIHN0ci5zbGljZSgwLCAyMzkpKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgwMSk7XG5cdFx0cmV0dXJuIGJhLmVuZCgpO1xuXHR9XG5cblx0ZnVuY3Rpb24gYm9va190b193azMod2IsIG9wdHMpIHtcblx0XHR2YXIgbyA9IG9wdHMgfHwge307XG5cdFx0aWYoK28uY29kZXBhZ2UgPj0gMCkgc2V0X2NwKCtvLmNvZGVwYWdlKTtcblx0XHRpZihvLnR5cGUgPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHdyaXRlIFdLMyB0byBKUyBzdHJpbmdcIik7XG5cdFx0dmFyIGJhID0gYnVmX2FycmF5KCk7XG5cblx0XHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgwMCwgd3JpdGVfQk9GX1dLMyh3YikpO1xuXG5cdFx0Zm9yKHZhciBpID0gMCwgY250ID0gMDsgaSA8IHdiLlNoZWV0TmFtZXMubGVuZ3RoOyArK2kpIGlmKCh3Yi5TaGVldHNbd2IuU2hlZXROYW1lc1tpXV0gfHwge30pW1wiIXJlZlwiXSkgd3JpdGVfYmlmZl9yZWMoYmEsIDB4MWIsIHdyaXRlX1hGT1JNQVRfU0hFRVROQU1FKHdiLlNoZWV0TmFtZXNbaV0sIGNudCsrKSk7XG5cblx0XHR2YXIgd3NpZHggPSAwO1xuXHRcdGZvcihpID0gMDsgaSA8IHdiLlNoZWV0TmFtZXMubGVuZ3RoOyArK2kpIHtcblx0XHRcdHZhciB3cyA9IHdiLlNoZWV0c1t3Yi5TaGVldE5hbWVzW2ldXTtcblx0XHRcdGlmKCF3cyB8fCAhd3NbXCIhcmVmXCJdKSBjb250aW51ZTtcblx0XHRcdHZhciByYW5nZSA9IHNhZmVfZGVjb2RlX3JhbmdlKHdzW1wiIXJlZlwiXSk7XG5cdFx0XHR2YXIgZGVuc2UgPSBBcnJheS5pc0FycmF5KHdzKTtcblx0XHRcdHZhciBjb2xzID0gW107XG5cdFx0XHRmb3IodmFyIFIgPSByYW5nZS5zLnI7IFIgPD0gcmFuZ2UuZS5yOyArK1IpIHtcblx0XHRcdFx0dmFyIHJyID0gZW5jb2RlX3JvdyhSKTtcblx0XHRcdFx0Zm9yKHZhciBDID0gcmFuZ2Uucy5jOyBDIDw9IHJhbmdlLmUuYzsgKytDKSB7XG5cdFx0XHRcdFx0aWYoUiA9PT0gcmFuZ2Uucy5yKSBjb2xzW0NdID0gZW5jb2RlX2NvbChDKTtcblx0XHRcdFx0XHR2YXIgcmVmID0gY29sc1tDXSArIHJyO1xuXHRcdFx0XHRcdHZhciBjZWxsID0gZGVuc2UgPyAod3NbUl18fFtdKVtDXSA6IHdzW3JlZl07XG5cdFx0XHRcdFx0aWYoIWNlbGwgfHwgY2VsbC50ID09IFwielwiKSBjb250aW51ZTtcblx0XHRcdFx0XHQvKiBUT0RPOiBGT1JNVUxBMTkgTlVNQkVSMTggcmVjb3JkcyAqL1xuXHRcdFx0XHRcdGlmKGNlbGwudCA9PSBcIm5cIikge1xuXHRcdFx0XHRcdFx0d3JpdGVfYmlmZl9yZWMoYmEsIDB4MTcsIHdyaXRlX05VTUJFUl8xNyhSLCBDLCB3c2lkeCwgY2VsbC52KSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHZhciBzdHIgPSBmb3JtYXRfY2VsbChjZWxsKTtcblx0XHRcdFx0XHRcdC8qIFRPRE86IG1heCBsZW4/ICovXG5cdFx0XHRcdFx0XHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgxNiwgd3JpdGVfTEFCRUxfMTYoUiwgQywgd3NpZHgsIHN0ci5zbGljZSgwLCAyMzkpKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQrK3dzaWR4O1xuXHRcdH1cblxuXHRcdHdyaXRlX2JpZmZfcmVjKGJhLCAweDAxKTtcblx0XHRyZXR1cm4gYmEuZW5kKCk7XG5cdH1cblxuXG5cdGZ1bmN0aW9uIHdyaXRlX0JPRl9XSzEodikge1xuXHRcdHZhciBvdXQgPSBuZXdfYnVmKDIpO1xuXHRcdG91dC53cml0ZV9zaGlmdCgyLCB2KTtcblx0XHRyZXR1cm4gb3V0O1xuXHR9XG5cblx0ZnVuY3Rpb24gd3JpdGVfQk9GX1dLMyh3Yikge1xuXHRcdHZhciBvdXQgPSBuZXdfYnVmKDI2KTtcblx0XHRvdXQud3JpdGVfc2hpZnQoMiwgMHgxMDAwKTtcblx0XHRvdXQud3JpdGVfc2hpZnQoMiwgMHgwMDA0KTtcblx0XHRvdXQud3JpdGVfc2hpZnQoNCwgMHgwMDAwKTtcblx0XHR2YXIgcm93cyA9IDAsIGNvbHMgPSAwLCB3c2NudCA9IDA7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHdiLlNoZWV0TmFtZXMubGVuZ3RoOyArK2kpIHtcblx0XHRcdHZhciBuYW1lID0gd2IuU2hlZXROYW1lc1tpXTtcblx0XHRcdHZhciB3cyA9IHdiLlNoZWV0c1tuYW1lXTtcblx0XHRcdGlmKCF3cyB8fCAhd3NbXCIhcmVmXCJdKSBjb250aW51ZTtcblx0XHRcdCsrd3NjbnQ7XG5cdFx0XHR2YXIgcmFuZ2UgPSBkZWNvZGVfcmFuZ2Uod3NbXCIhcmVmXCJdKTtcblx0XHRcdGlmKHJvd3MgPCByYW5nZS5lLnIpIHJvd3MgPSByYW5nZS5lLnI7XG5cdFx0XHRpZihjb2xzIDwgcmFuZ2UuZS5jKSBjb2xzID0gcmFuZ2UuZS5jO1xuXHRcdH1cblx0XHRvdXQud3JpdGVfc2hpZnQoMiwgcm93cyk7XG5cdFx0b3V0LndyaXRlX3NoaWZ0KDEsIHdzY250KTtcblx0XHRvdXQud3JpdGVfc2hpZnQoMSwgY29scyk7XG5cdFx0b3V0LndyaXRlX3NoaWZ0KDIsIDB4MDApO1xuXHRcdG91dC53cml0ZV9zaGlmdCgyLCAweDAwKTtcblx0XHRvdXQud3JpdGVfc2hpZnQoMSwgMHgwMSk7XG5cdFx0b3V0LndyaXRlX3NoaWZ0KDEsIDB4MDIpO1xuXHRcdG91dC53cml0ZV9zaGlmdCg0LCAwKTtcblx0XHRvdXQud3JpdGVfc2hpZnQoNCwgMCk7XG5cdFx0cmV0dXJuIG91dDtcblx0fVxuXG5cdGZ1bmN0aW9uIHBhcnNlX1JBTkdFKGJsb2IpIHtcblx0XHR2YXIgbyA9IHtzOntjOjAscjowfSxlOntjOjAscjowfX07XG5cdFx0by5zLmMgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0by5zLnIgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0by5lLmMgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0by5lLnIgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0aWYoby5zLmMgPT0gMHhGRkZGKSBvLnMuYyA9IG8uZS5jID0gby5zLnIgPSBvLmUuciA9IDA7XG5cdFx0cmV0dXJuIG87XG5cdH1cblx0ZnVuY3Rpb24gd3JpdGVfUkFOR0UocmFuZ2UpIHtcblx0XHR2YXIgb3V0ID0gbmV3X2J1Zig4KTtcblx0XHRvdXQud3JpdGVfc2hpZnQoMiwgcmFuZ2Uucy5jKTtcblx0XHRvdXQud3JpdGVfc2hpZnQoMiwgcmFuZ2Uucy5yKTtcblx0XHRvdXQud3JpdGVfc2hpZnQoMiwgcmFuZ2UuZS5jKTtcblx0XHRvdXQud3JpdGVfc2hpZnQoMiwgcmFuZ2UuZS5yKTtcblx0XHRyZXR1cm4gb3V0O1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VfY2VsbChibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgbyA9IFt7YzowLHI6MH0sIHt0OiduJyx2OjB9LCAwXTtcblx0XHRpZihvcHRzLnFwcm8gJiYgb3B0cy52ZXJzICE9IDB4NTEyMCkge1xuXHRcdFx0b1swXS5jID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRcdFx0YmxvYi5sKys7XG5cdFx0XHRvWzBdLnIgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0XHRibG9iLmwrPTI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG9bMl0gPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdFx0XHRvWzBdLmMgPSBibG9iLnJlYWRfc2hpZnQoMik7IG9bMF0uciA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHR9XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV9MQUJFTChibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgdGd0ID0gYmxvYi5sICsgbGVuZ3RoO1xuXHRcdHZhciBvID0gcGFyc2VfY2VsbChibG9iLCBsZW5ndGgsIG9wdHMpO1xuXHRcdG9bMV0udCA9ICdzJztcblx0XHRpZihvcHRzLnZlcnMgPT0gMHg1MTIwKSB7XG5cdFx0XHRibG9iLmwrKztcblx0XHRcdHZhciBsZW4gPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdFx0XHRvWzFdLnYgPSBibG9iLnJlYWRfc2hpZnQobGVuLCAndXRmOCcpO1xuXHRcdFx0cmV0dXJuIG87XG5cdFx0fVxuXHRcdGlmKG9wdHMucXBybykgYmxvYi5sKys7XG5cdFx0b1sxXS52ID0gYmxvYi5yZWFkX3NoaWZ0KHRndCAtIGJsb2IubCwgJ2NzdHInKTtcblx0XHRyZXR1cm4gbztcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV9MQUJFTChSLCBDLCBzKSB7XG5cdFx0LyogVE9ETzogZW5jb2RpbmcgKi9cblx0XHR2YXIgbyA9IG5ld19idWYoNyArIHMubGVuZ3RoKTtcblx0XHRvLndyaXRlX3NoaWZ0KDEsIDB4RkYpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgQyk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCBSKTtcblx0XHRvLndyaXRlX3NoaWZ0KDEsIDB4MjcpOyAvLyA/P1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBvLmxlbmd0aDsgKytpKSB7XG5cdFx0XHR2YXIgY2MgPSBzLmNoYXJDb2RlQXQoaSk7XG5cdFx0XHRvLndyaXRlX3NoaWZ0KDEsIGNjID49IDB4ODAgPyAweDVGIDogY2MpO1xuXHRcdH1cblx0XHRvLndyaXRlX3NoaWZ0KDEsIDApO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VfSU5URUdFUihibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgbyA9IHBhcnNlX2NlbGwoYmxvYiwgbGVuZ3RoLCBvcHRzKTtcblx0XHRvWzFdLnYgPSBibG9iLnJlYWRfc2hpZnQoMiwgJ2knKTtcblx0XHRyZXR1cm4gbztcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV9JTlRFR0VSKFIsIEMsIHYpIHtcblx0XHR2YXIgbyA9IG5ld19idWYoNyk7XG5cdFx0by53cml0ZV9zaGlmdCgxLCAweEZGKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIEMpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgUik7XG5cdFx0by53cml0ZV9zaGlmdCgyLCB2LCAnaScpO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VfTlVNQkVSKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciBvID0gcGFyc2VfY2VsbChibG9iLCBsZW5ndGgsIG9wdHMpO1xuXHRcdG9bMV0udiA9IGJsb2IucmVhZF9zaGlmdCg4LCAnZicpO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cdGZ1bmN0aW9uIHdyaXRlX05VTUJFUihSLCBDLCB2KSB7XG5cdFx0dmFyIG8gPSBuZXdfYnVmKDEzKTtcblx0XHRvLndyaXRlX3NoaWZ0KDEsIDB4RkYpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgQyk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCBSKTtcblx0XHRvLndyaXRlX3NoaWZ0KDgsIHYsICdmJyk7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV9GT1JNVUxBKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciB0Z3QgPSBibG9iLmwgKyBsZW5ndGg7XG5cdFx0dmFyIG8gPSBwYXJzZV9jZWxsKGJsb2IsIGxlbmd0aCwgb3B0cyk7XG5cdFx0LyogVE9ETzogZm9ybXVsYSAqL1xuXHRcdG9bMV0udiA9IGJsb2IucmVhZF9zaGlmdCg4LCAnZicpO1xuXHRcdGlmKG9wdHMucXBybykgYmxvYi5sID0gdGd0O1xuXHRcdGVsc2Uge1xuXHRcdFx0dmFyIGZsZW4gPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0XHR3azFfZm1sYV90b19jc2YoYmxvYi5zbGljZShibG9iLmwsIGJsb2IubCArIGZsZW4pLCBvKTtcblx0XHRcdGJsb2IubCArPSBmbGVuO1xuXHRcdH1cblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdGZ1bmN0aW9uIHdrMV9wYXJzZV9yYyhCLCBWLCBjb2wpIHtcblx0XHR2YXIgcmVsID0gViAmIDB4ODAwMDtcblx0XHRWICY9IH4weDgwMDA7XG5cdFx0ViA9IChyZWwgPyBCIDogMCkgKyAoKFYgPj0gMHgyMDAwKSA/IFYgLSAweDQwMDAgOiBWKTtcblx0XHRyZXR1cm4gKHJlbCA/IFwiXCIgOiBcIiRcIikgKyAoY29sID8gZW5jb2RlX2NvbChWKSA6IGVuY29kZV9yb3coVikpO1xuXHR9XG5cdHZhciBvcHJlYyA9IFtcblx0XHQ4LCA4LCA4LCA4LCA4LCA4LCA4LCA4LCA2LCA0LCA0LCA1LCA1LCA3LCAzLCAzLFxuXHRcdDMsIDMsIDMsIDMsIDEsIDEsIDIsIDYsIDgsIDgsIDgsIDgsIDgsIDgsIDgsIDhcblx0XTtcblx0LyogVE9ETzogZmxlc2ggb3V0ICovXG5cdHZhciBGdW5jVGFiID0ge1xuXHRcdDB4MzM6IFtcIkZBTFNFXCIsIDBdLFxuXHRcdDB4MzQ6IFtcIlRSVUVcIiwgMF0sXG5cdFx0MHg0NjogW1wiTEVOXCIsIDFdLFxuXHRcdDB4NTA6IFtcIlNVTVwiLCA2OV0sXG5cdFx0MHg1MTogW1wiQVZFUkFHRUFcIiwgNjldLFxuXHRcdDB4NTI6IFtcIkNPVU5UQVwiLCA2OV0sXG5cdFx0MHg1MzogW1wiTUlOQVwiLCA2OV0sXG5cdFx0MHg1NDogW1wiTUFYQVwiLCA2OV0sXG5cdFx0MHg2RjogW1wiVFwiLCAxXVxuXHR9O1xuXHR2YXIgQmluT3BUYWIgPSBbXG5cdFx0ICBcIlwiLCAgIFwiXCIsICAgXCJcIiwgICBcIlwiLCAgIFwiXCIsICAgXCJcIiwgICBcIlwiLCAgIFwiXCIsXG5cdFx0ICBcIlwiLCAgXCIrXCIsICBcIi1cIiwgIFwiKlwiLCAgXCIvXCIsICBcIl5cIiwgIFwiPVwiLCBcIjw+XCIsXG5cdFx0XCI8PVwiLCBcIj49XCIsICBcIjxcIiwgIFwiPlwiLCAgIFwiXCIsICAgXCJcIiwgICBcIlwiLCAgIFwiXCIsXG5cdFx0IFwiJlwiLCAgIFwiXCIsICAgXCJcIiwgICBcIlwiLCAgIFwiXCIsICAgXCJcIiwgICBcIlwiLCAgIFwiXCJcblx0XTtcblxuXHRmdW5jdGlvbiB3azFfZm1sYV90b19jc2YoYmxvYiwgbykge1xuXHRcdHByZXBfYmxvYihibG9iLCAwKTtcblx0XHR2YXIgb3V0ID0gW10sIGFyZ2MgPSAwLCBSID0gXCJcIiwgQyA9IFwiXCI7XG5cdFx0d2hpbGUoYmxvYi5sIDwgYmxvYi5sZW5ndGgpIHtcblx0XHRcdHZhciBjYyA9IGJsb2JbYmxvYi5sKytdO1xuXHRcdFx0c3dpdGNoKGNjKSB7XG5cdFx0XHRcdGNhc2UgMHgwMDogb3V0LnB1c2goYmxvYi5yZWFkX3NoaWZ0KDgsICdmJykpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAweDAxOiB7XG5cdFx0XHRcdFx0QyA9IHdrMV9wYXJzZV9yYyhvWzBdLmMsIGJsb2IucmVhZF9zaGlmdCgyKSwgdHJ1ZSk7XG5cdFx0XHRcdFx0UiA9IHdrMV9wYXJzZV9yYyhvWzBdLnIsIGJsb2IucmVhZF9zaGlmdCgyKSwgZmFsc2UpO1xuXHRcdFx0XHRcdG91dC5wdXNoKEMgKyBSKTtcblx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAweDAyOiB7XG5cdFx0XHRcdFx0dmFyIGMgPSB3azFfcGFyc2VfcmMob1swXS5jLCBibG9iLnJlYWRfc2hpZnQoMiksIHRydWUpO1xuXHRcdFx0XHRcdHZhciByID0gd2sxX3BhcnNlX3JjKG9bMF0uciwgYmxvYi5yZWFkX3NoaWZ0KDIpLCBmYWxzZSk7XG5cdFx0XHRcdFx0QyA9IHdrMV9wYXJzZV9yYyhvWzBdLmMsIGJsb2IucmVhZF9zaGlmdCgyKSwgdHJ1ZSk7XG5cdFx0XHRcdFx0UiA9IHdrMV9wYXJzZV9yYyhvWzBdLnIsIGJsb2IucmVhZF9zaGlmdCgyKSwgZmFsc2UpO1xuXHRcdFx0XHRcdG91dC5wdXNoKGMgKyByICsgXCI6XCIgKyBDICsgUik7XG5cdFx0XHRcdH0gYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMzpcblx0XHRcdFx0XHRpZihibG9iLmwgPCBibG9iLmxlbmd0aCkgeyBjb25zb2xlLmVycm9yKFwiV0sxIHByZW1hdHVyZSBmb3JtdWxhIGVuZFwiKTsgcmV0dXJuOyB9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwNDogb3V0LnB1c2goXCIoXCIgKyBvdXQucG9wKCkgKyBcIilcIik7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDU6IG91dC5wdXNoKGJsb2IucmVhZF9zaGlmdCgyKSk7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDY6IHtcblx0XHRcdFx0XHQvKiBUT0RPOiB0ZXh0IGVuY29kaW5nICovXG5cdFx0XHRcdFx0dmFyIFogPSBcIlwiOyB3aGlsZSgoY2MgPSBibG9iW2Jsb2IubCsrXSkpIFogKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjYyk7XG5cdFx0XHRcdFx0b3V0LnB1c2goJ1wiJyArIFoucmVwbGFjZSgvXCIvZywgJ1wiXCInKSArICdcIicpOyBicmVhaztcblx0XHRcdFx0fSBicmVhaztcblxuXHRcdFx0XHRjYXNlIDB4MDg6IG91dC5wdXNoKFwiLVwiICsgb3V0LnBvcCgpKTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgxNzogb3V0LnB1c2goXCIrXCIgKyBvdXQucG9wKCkpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAweDE2OiBvdXQucHVzaChcIk5PVChcIiArIG91dC5wb3AoKSArIFwiKVwiKTsgYnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAweDE0OiBjYXNlIDB4MTU6IHtcblx0XHRcdFx0XHR2YXIgYXJnUiA9IG91dC5wb3AoKSwgYXJnTCA9IG91dC5wb3AoKTtcblx0XHRcdFx0XHRvdXQucHVzaChbXCJBTkRcIiwgXCJPUlwiXVtjYyAtIDB4MTRdICsgXCIoXCIgKyBhcmdMICsgXCIsXCIgKyBhcmdSICsgXCIpXCIpO1xuXHRcdFx0XHR9IGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0aWYoY2MgPCAweDIwICYmIEJpbk9wVGFiW2NjXSkge1xuXHRcdFx0XHRcdFx0YXJnUiA9IG91dC5wb3AoKTsgYXJnTCA9IG91dC5wb3AoKTtcblx0XHRcdFx0XHRcdG91dC5wdXNoKGFyZ0wgKyBCaW5PcFRhYltjY10gKyBhcmdSKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYoRnVuY1RhYltjY10pIHtcblx0XHRcdFx0XHRcdGFyZ2MgPSBGdW5jVGFiW2NjXVsxXTtcblx0XHRcdFx0XHRcdGlmKGFyZ2MgPT0gNjkpIGFyZ2MgPSBibG9iW2Jsb2IubCsrXTtcblx0XHRcdFx0XHRcdGlmKGFyZ2MgPiBvdXQubGVuZ3RoKSB7IGNvbnNvbGUuZXJyb3IoXCJXSzEgYmFkIGZvcm11bGEgcGFyc2UgMHhcIiArIGNjLnRvU3RyaW5nKDE2KSArIFwiOnxcIiArIG91dC5qb2luKFwifFwiKSArIFwifFwiKTsgcmV0dXJuOyB9XG5cdFx0XHRcdFx0XHR2YXIgYXJncyA9IG91dC5zbGljZSgtYXJnYyk7XG5cdFx0XHRcdFx0XHRvdXQubGVuZ3RoIC09IGFyZ2M7XG5cdFx0XHRcdFx0XHRvdXQucHVzaChGdW5jVGFiW2NjXVswXSArIFwiKFwiICsgYXJncy5qb2luKFwiLFwiKSArIFwiKVwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSBpZihjYyA8PSAweDA3KSByZXR1cm4gY29uc29sZS5lcnJvcihcIldLMSBpbnZhbGlkIG9wY29kZSBcIiArIGNjLnRvU3RyaW5nKDE2KSk7XG5cdFx0XHRcdFx0ZWxzZSBpZihjYyA8PSAweDE4KSByZXR1cm4gY29uc29sZS5lcnJvcihcIldLMSB1bnN1cHBvcnRlZCBvcCBcIiArIGNjLnRvU3RyaW5nKDE2KSk7XG5cdFx0XHRcdFx0ZWxzZSBpZihjYyA8PSAweDFFKSByZXR1cm4gY29uc29sZS5lcnJvcihcIldLMSBpbnZhbGlkIG9wY29kZSBcIiArIGNjLnRvU3RyaW5nKDE2KSk7XG5cdFx0XHRcdFx0ZWxzZSBpZihjYyA8PSAweDczKSByZXR1cm4gY29uc29sZS5lcnJvcihcIldLMSB1bnN1cHBvcnRlZCBmdW5jdGlvbiBvcGNvZGUgXCIgKyBjYy50b1N0cmluZygxNikpO1xuXHRcdFx0XHRcdC8vIHBvc3NpYmxlIGZ1dHVyZSBmdW5jdGlvbnMgPz9cblx0XHRcdFx0XHRlbHNlIHJldHVybiBjb25zb2xlLmVycm9yKFwiV0sxIHVucmVjb2duaXplZCBvcGNvZGUgXCIgKyBjYy50b1N0cmluZygxNikpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihvdXQubGVuZ3RoID09IDEpIG9bMV0uZiA9IFwiXCIgKyBvdXRbMF07XG5cdFx0ZWxzZSBjb25zb2xlLmVycm9yKFwiV0sxIGJhZCBmb3JtdWxhIHBhcnNlIHxcIiArIG91dC5qb2luKFwifFwiKSArIFwifFwiKTtcblx0fVxuXG5cblx0ZnVuY3Rpb24gcGFyc2VfY2VsbF8zKGJsb2IpIHtcblx0XHR2YXIgbyA9IFt7YzowLHI6MH0sIHt0OiduJyx2OjB9LCAwXTtcblx0XHRvWzBdLnIgPSBibG9iLnJlYWRfc2hpZnQoMik7IG9bM10gPSBibG9iW2Jsb2IubCsrXTsgb1swXS5jID0gYmxvYltibG9iLmwrK107XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV9MQUJFTF8xNihibG9iLCBsZW5ndGgpIHtcblx0XHR2YXIgbyA9IHBhcnNlX2NlbGxfMyhibG9iLCBsZW5ndGgpO1xuXHRcdG9bMV0udCA9ICdzJztcblx0XHRvWzFdLnYgPSBibG9iLnJlYWRfc2hpZnQobGVuZ3RoIC0gNCwgJ2NzdHInKTtcblx0XHRyZXR1cm4gbztcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV9MQUJFTF8xNihSLCBDLCB3c2lkeCwgcykge1xuXHRcdC8qIFRPRE86IGVuY29kaW5nICovXG5cdFx0dmFyIG8gPSBuZXdfYnVmKDYgKyBzLmxlbmd0aCk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCBSKTtcblx0XHRvLndyaXRlX3NoaWZ0KDEsIHdzaWR4KTtcblx0XHRvLndyaXRlX3NoaWZ0KDEsIEMpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgMHgyNyk7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHMubGVuZ3RoOyArK2kpIHtcblx0XHRcdHZhciBjYyA9IHMuY2hhckNvZGVBdChpKTtcblx0XHRcdG8ud3JpdGVfc2hpZnQoMSwgY2MgPj0gMHg4MCA/IDB4NUYgOiBjYyk7XG5cdFx0fVxuXHRcdG8ud3JpdGVfc2hpZnQoMSwgMCk7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV9OVU1CRVJfMTgoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0dmFyIG8gPSBwYXJzZV9jZWxsXzMoYmxvYiwgbGVuZ3RoKTtcblx0XHRvWzFdLnYgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIHYgPSBvWzFdLnYgPj4gMTtcblx0XHRpZihvWzFdLnYgJiAweDEpIHtcblx0XHRcdHN3aXRjaCh2ICYgMHgwNykge1xuXHRcdFx0XHRjYXNlIDA6IHYgPSAodiA+PiAzKSAqIDUwMDA7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDE6IHYgPSAodiA+PiAzKSAqIDUwMDsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMjogdiA9ICh2ID4+IDMpIC8gMjA7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDM6IHYgPSAodiA+PiAzKSAvIDIwMDsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgNDogdiA9ICh2ID4+IDMpIC8gMjAwMDsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgNTogdiA9ICh2ID4+IDMpIC8gMjAwMDA7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDY6IHYgPSAodiA+PiAzKSAvIDE2OyBicmVhaztcblx0XHRcdFx0Y2FzZSA3OiB2ID0gKHYgPj4gMykgLyA2NDsgYnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdG9bMV0udiA9IHY7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV9OVU1CRVJfMTcoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0dmFyIG8gPSBwYXJzZV9jZWxsXzMoYmxvYiwgbGVuZ3RoKTtcblx0XHR2YXIgdjEgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0dmFyIHYyID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdHZhciBlID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdGlmKGUgPT0gMHhGRkZGKSB7XG5cdFx0XHRpZih2MSA9PT0gMCAmJiB2MiA9PT0gMHhDMDAwMDAwMCkgeyBvWzFdLnQgPSBcImVcIjsgb1sxXS52ID0gMHgwRjsgfSAvLyBFUlIgLT4gI1ZBTFVFIVxuXHRcdFx0ZWxzZSBpZih2MSA9PT0gMCAmJiB2MiA9PT0gMHhEMDAwMDAwMCkgeyBvWzFdLnQgPSBcImVcIjsgb1sxXS52ID0gMHgyQTsgfSAvLyBOQSAtPiAjTi9BXG5cdFx0XHRlbHNlIG9bMV0udiA9IDA7XG5cdFx0XHRyZXR1cm4gbztcblx0XHR9XG5cdFx0dmFyIHMgPSBlICYgMHg4MDAwOyBlID0gKGUmMHg3RkZGKSAtIDE2NDQ2O1xuXHRcdG9bMV0udiA9ICgxIC0gcyoyKSAqICh2MiAqIE1hdGgucG93KDIsIGUrMzIpICsgdjEgKiBNYXRoLnBvdygyLCBlKSk7XG5cdFx0cmV0dXJuIG87XG5cdH1cblx0ZnVuY3Rpb24gd3JpdGVfTlVNQkVSXzE3KFIsIEMsIHdzaWR4LCB2KSB7XG5cdFx0dmFyIG8gPSBuZXdfYnVmKDE0KTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIFIpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgd3NpZHgpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgQyk7XG5cdFx0aWYodiA9PSAwKSB7XG5cdFx0XHRvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRcdFx0by53cml0ZV9zaGlmdCg0LCAwKTtcblx0XHRcdG8ud3JpdGVfc2hpZnQoMiwgMHhGRkZGKTtcblx0XHRcdHJldHVybiBvO1xuXHRcdH1cblx0XHR2YXIgcyA9IDAsIGUgPSAwLCB2MSA9IDAsIHYyID0gMDtcblx0XHRpZih2IDwgMCkgeyBzID0gMTsgdiA9IC12OyB9XG5cdFx0ZSA9IE1hdGgubG9nMih2KSB8IDA7XG5cdFx0diAvPSBNYXRoLnBvdygyLCBlLTMxKTtcblx0XHR2MiA9ICh2KT4+PjA7XG5cdFx0aWYoKHYyJjB4ODAwMDAwMDApID09IDApIHsgdi89MjsgKytlOyB2MiA9IHYgPj4+IDA7IH1cblx0XHR2IC09IHYyO1xuXHRcdHYyIHw9IDB4ODAwMDAwMDA7XG5cdFx0djIgPj4+PSAwO1xuXHRcdHYgKj0gTWF0aC5wb3coMiwgMzIpO1xuXHRcdHYxID0gdj4+PjA7XG5cdFx0by53cml0ZV9zaGlmdCg0LCB2MSk7XG5cdFx0by53cml0ZV9zaGlmdCg0LCB2Mik7XG5cdFx0ZSArPSAweDNGRkYgKyAocyA/IDB4ODAwMCA6IDApO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgZSk7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV9GT1JNVUxBXzE5KGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciBvID0gcGFyc2VfTlVNQkVSXzE3KGJsb2IsIDE0KTtcblx0XHRibG9iLmwgKz0gbGVuZ3RoIC0gMTQ7IC8qIFRPRE86IFdLMyBmb3JtdWxhICovXG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV9OVU1CRVJfMjUoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0dmFyIG8gPSBwYXJzZV9jZWxsXzMoYmxvYiwgbGVuZ3RoKTtcblx0XHR2YXIgdjEgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0b1sxXS52ID0gdjEgPj4gNjtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdGZ1bmN0aW9uIHBhcnNlX05VTUJFUl8yNyhibG9iLCBsZW5ndGgpIHtcblx0XHR2YXIgbyA9IHBhcnNlX2NlbGxfMyhibG9iLCBsZW5ndGgpO1xuXHRcdHZhciB2MSA9IGJsb2IucmVhZF9zaGlmdCg4LCdmJyk7XG5cdFx0b1sxXS52ID0gdjE7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV9GT1JNVUxBXzI4KGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciBvID0gcGFyc2VfTlVNQkVSXzI3KGJsb2IsIDE0KTtcblx0XHRibG9iLmwgKz0gbGVuZ3RoIC0gMTA7IC8qIFRPRE86IGZvcm11bGEgKi9cblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdGZ1bmN0aW9uIHBhcnNlX1hGT1JNQVQoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0dmFyIG8gPSB7fSwgdGd0ID0gYmxvYi5sICsgbGVuZ3RoO1xuXHRcdHdoaWxlKGJsb2IubCA8IHRndCkge1xuXHRcdFx0dmFyIGR0ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdFx0aWYoZHQgPT0gMHgzNmIwKSB7XG5cdFx0XHRcdG9bZHRdID0gWzAsIFwiXCJdO1xuXHRcdFx0XHRvW2R0XVswXSA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRcdFx0d2hpbGUoYmxvYltibG9iLmxdKSB7IG9bZHRdWzFdICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYmxvYltibG9iLmxdKTsgYmxvYi5sKys7IH0gYmxvYi5sKys7XG5cdFx0XHR9XG5cdFx0XHQvLyBUT0RPOiAweDNhOTkgPz9cblx0XHR9XG5cdFx0cmV0dXJuIG87XG5cdH1cblx0ZnVuY3Rpb24gd3JpdGVfWEZPUk1BVF9TSEVFVE5BTUUobmFtZSwgd3NpZHgpIHtcblx0XHR2YXIgb3V0ID0gbmV3X2J1Zig1ICsgbmFtZS5sZW5ndGgpO1xuXHRcdG91dC53cml0ZV9zaGlmdCgyLCAweDM2YjApO1xuXHRcdG91dC53cml0ZV9zaGlmdCgyLCB3c2lkeCk7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG5hbWUubGVuZ3RoOyArK2kpIHtcblx0XHRcdHZhciBjYyA9IG5hbWUuY2hhckNvZGVBdChpKTtcblx0XHRcdG91dFtvdXQubCsrXSA9IGNjID4gMHg3RiA/IDB4NUYgOiBjYztcblx0XHR9XG5cdFx0b3V0W291dC5sKytdID0gMDtcblx0XHRyZXR1cm4gb3V0O1xuXHR9XG5cblx0dmFyIFdLMUVudW0gPSB7XG4weDAwMDA6IHsgbjpcIkJPRlwiLCBmOnBhcnNldWludDE2IH0sXG4weDAwMDE6IHsgbjpcIkVPRlwiIH0sXG4weDAwMDI6IHsgbjpcIkNBTENNT0RFXCIgfSxcbjB4MDAwMzogeyBuOlwiQ0FMQ09SREVSXCIgfSxcbjB4MDAwNDogeyBuOlwiU1BMSVRcIiB9LFxuMHgwMDA1OiB7IG46XCJTWU5DXCIgfSxcbjB4MDAwNjogeyBuOlwiUkFOR0VcIiwgZjpwYXJzZV9SQU5HRSB9LFxuMHgwMDA3OiB7IG46XCJXSU5ET1cxXCIgfSxcbjB4MDAwODogeyBuOlwiQ09MVzFcIiB9LFxuMHgwMDA5OiB7IG46XCJXSU5UV09cIiB9LFxuMHgwMDBBOiB7IG46XCJDT0xXMlwiIH0sXG4weDAwMEI6IHsgbjpcIk5BTUVcIiB9LFxuMHgwMDBDOiB7IG46XCJCTEFOS1wiIH0sXG4weDAwMEQ6IHsgbjpcIklOVEVHRVJcIiwgZjpwYXJzZV9JTlRFR0VSIH0sXG4weDAwMEU6IHsgbjpcIk5VTUJFUlwiLCBmOnBhcnNlX05VTUJFUiB9LFxuMHgwMDBGOiB7IG46XCJMQUJFTFwiLCBmOnBhcnNlX0xBQkVMIH0sXG4weDAwMTA6IHsgbjpcIkZPUk1VTEFcIiwgZjpwYXJzZV9GT1JNVUxBIH0sXG4weDAwMTg6IHsgbjpcIlRBQkxFXCIgfSxcbjB4MDAxOTogeyBuOlwiT1JBTkdFXCIgfSxcbjB4MDAxQTogeyBuOlwiUFJBTkdFXCIgfSxcbjB4MDAxQjogeyBuOlwiU1JBTkdFXCIgfSxcbjB4MDAxQzogeyBuOlwiRlJBTkdFXCIgfSxcbjB4MDAxRDogeyBuOlwiS1JBTkdFMVwiIH0sXG4weDAwMjA6IHsgbjpcIkhSQU5HRVwiIH0sXG4weDAwMjM6IHsgbjpcIktSQU5HRTJcIiB9LFxuMHgwMDI0OiB7IG46XCJQUk9URUNcIiB9LFxuMHgwMDI1OiB7IG46XCJGT09URVJcIiB9LFxuMHgwMDI2OiB7IG46XCJIRUFERVJcIiB9LFxuMHgwMDI3OiB7IG46XCJTRVRVUFwiIH0sXG4weDAwMjg6IHsgbjpcIk1BUkdJTlNcIiB9LFxuMHgwMDI5OiB7IG46XCJMQUJFTEZNVFwiIH0sXG4weDAwMkE6IHsgbjpcIlRJVExFU1wiIH0sXG4weDAwMkI6IHsgbjpcIlNIRUVUSlNcIiB9LFxuMHgwMDJEOiB7IG46XCJHUkFQSFwiIH0sXG4weDAwMkU6IHsgbjpcIk5HUkFQSFwiIH0sXG4weDAwMkY6IHsgbjpcIkNBTENDT1VOVFwiIH0sXG4weDAwMzA6IHsgbjpcIlVORk9STUFUVEVEXCIgfSxcbjB4MDAzMTogeyBuOlwiQ1VSU09SVzEyXCIgfSxcbjB4MDAzMjogeyBuOlwiV0lORE9XXCIgfSxcbjB4MDAzMzogeyBuOlwiU1RSSU5HXCIsIGY6cGFyc2VfTEFCRUwgfSxcbjB4MDAzNzogeyBuOlwiUEFTU1dPUkRcIiB9LFxuMHgwMDM4OiB7IG46XCJMT0NLRURcIiB9LFxuMHgwMDNDOiB7IG46XCJRVUVSWVwiIH0sXG4weDAwM0Q6IHsgbjpcIlFVRVJZTkFNRVwiIH0sXG4weDAwM0U6IHsgbjpcIlBSSU5UXCIgfSxcbjB4MDAzRjogeyBuOlwiUFJJTlROQU1FXCIgfSxcbjB4MDA0MDogeyBuOlwiR1JBUEgyXCIgfSxcbjB4MDA0MTogeyBuOlwiR1JBUEhOQU1FXCIgfSxcbjB4MDA0MjogeyBuOlwiWk9PTVwiIH0sXG4weDAwNDM6IHsgbjpcIlNZTVNQTElUXCIgfSxcbjB4MDA0NDogeyBuOlwiTlNST1dTXCIgfSxcbjB4MDA0NTogeyBuOlwiTlNDT0xTXCIgfSxcbjB4MDA0NjogeyBuOlwiUlVMRVJcIiB9LFxuMHgwMDQ3OiB7IG46XCJOTkFNRVwiIH0sXG4weDAwNDg6IHsgbjpcIkFDT01NXCIgfSxcbjB4MDA0OTogeyBuOlwiQU1BQ1JPXCIgfSxcbjB4MDA0QTogeyBuOlwiUEFSU0VcIiB9LFxuMHgwMDY2OiB7IG46XCJQUkFOR0VTPz9cIiB9LFxuMHgwMDY3OiB7IG46XCJSUkFOR0VTPz9cIiB9LFxuMHgwMDY4OiB7IG46XCJGTkFNRT8/XCIgfSxcbjB4MDA2OTogeyBuOlwiTVJBTkdFUz8/XCIgfSxcbjB4RkZGRjogeyBuOlwiXCIgfVxuXHR9O1xuXG5cdHZhciBXSzNFbnVtID0ge1xuMHgwMDAwOiB7IG46XCJCT0ZcIiB9LFxuMHgwMDAxOiB7IG46XCJFT0ZcIiB9LFxuMHgwMDAyOiB7IG46XCJQQVNTV09SRFwiIH0sXG4weDAwMDM6IHsgbjpcIkNBTENTRVRcIiB9LFxuMHgwMDA0OiB7IG46XCJXSU5ET1dTRVRcIiB9LFxuMHgwMDA1OiB7IG46XCJTSEVFVENFTExQVFJcIiB9LFxuMHgwMDA2OiB7IG46XCJTSEVFVExBWU9VVFwiIH0sXG4weDAwMDc6IHsgbjpcIkNPTFVNTldJRFRIXCIgfSxcbjB4MDAwODogeyBuOlwiSElEREVOQ09MVU1OXCIgfSxcbjB4MDAwOTogeyBuOlwiVVNFUlJBTkdFXCIgfSxcbjB4MDAwQTogeyBuOlwiU1lTVEVNUkFOR0VcIiB9LFxuMHgwMDBCOiB7IG46XCJaRVJPRk9SQ0VcIiB9LFxuMHgwMDBDOiB7IG46XCJTT1JUS0VZRElSXCIgfSxcbjB4MDAwRDogeyBuOlwiRklMRVNFQUxcIiB9LFxuMHgwMDBFOiB7IG46XCJEQVRBRklMTE5VTVNcIiB9LFxuMHgwMDBGOiB7IG46XCJQUklOVE1BSU5cIiB9LFxuMHgwMDEwOiB7IG46XCJQUklOVFNUUklOR1wiIH0sXG4weDAwMTE6IHsgbjpcIkdSQVBITUFJTlwiIH0sXG4weDAwMTI6IHsgbjpcIkdSQVBIU1RSSU5HXCIgfSxcbjB4MDAxMzogeyBuOlwiPz9cIiB9LFxuMHgwMDE0OiB7IG46XCJFUlJDRUxMXCIgfSxcbjB4MDAxNTogeyBuOlwiTkFDRUxMXCIgfSxcbjB4MDAxNjogeyBuOlwiTEFCRUwxNlwiLCBmOnBhcnNlX0xBQkVMXzE2fSxcbjB4MDAxNzogeyBuOlwiTlVNQkVSMTdcIiwgZjpwYXJzZV9OVU1CRVJfMTcgfSxcbjB4MDAxODogeyBuOlwiTlVNQkVSMThcIiwgZjpwYXJzZV9OVU1CRVJfMTggfSxcbjB4MDAxOTogeyBuOlwiRk9STVVMQTE5XCIsIGY6cGFyc2VfRk9STVVMQV8xOX0sXG4weDAwMUE6IHsgbjpcIkZPUk1VTEExQVwiIH0sXG4weDAwMUI6IHsgbjpcIlhGT1JNQVRcIiwgZjpwYXJzZV9YRk9STUFUIH0sXG4weDAwMUM6IHsgbjpcIkRUTEFCRUxNSVNDXCIgfSxcbjB4MDAxRDogeyBuOlwiRFRMQUJFTENFTExcIiB9LFxuMHgwMDFFOiB7IG46XCJHUkFQSFdJTkRPV1wiIH0sXG4weDAwMUY6IHsgbjpcIkNQQVwiIH0sXG4weDAwMjA6IHsgbjpcIkxQTEFVVE9cIiB9LFxuMHgwMDIxOiB7IG46XCJRVUVSWVwiIH0sXG4weDAwMjI6IHsgbjpcIkhJRERFTlNIRUVUXCIgfSxcbjB4MDAyMzogeyBuOlwiPz9cIiB9LFxuMHgwMDI1OiB7IG46XCJOVU1CRVIyNVwiLCBmOnBhcnNlX05VTUJFUl8yNSB9LFxuMHgwMDI2OiB7IG46XCI/P1wiIH0sXG4weDAwMjc6IHsgbjpcIk5VTUJFUjI3XCIsIGY6cGFyc2VfTlVNQkVSXzI3IH0sXG4weDAwMjg6IHsgbjpcIkZPUk1VTEEyOFwiLCBmOnBhcnNlX0ZPUk1VTEFfMjggfSxcbjB4MDA4RTogeyBuOlwiPz9cIiB9LFxuMHgwMDkzOiB7IG46XCI/P1wiIH0sXG4weDAwOTY6IHsgbjpcIj8/XCIgfSxcbjB4MDA5NzogeyBuOlwiPz9cIiB9LFxuMHgwMDk4OiB7IG46XCI/P1wiIH0sXG4weDAwOTk6IHsgbjpcIj8/XCIgfSxcbjB4MDA5QTogeyBuOlwiPz9cIiB9LFxuMHgwMDlCOiB7IG46XCI/P1wiIH0sXG4weDAwOUM6IHsgbjpcIj8/XCIgfSxcbjB4MDBBMzogeyBuOlwiPz9cIiB9LFxuMHgwMEFFOiB7IG46XCI/P1wiIH0sXG4weDAwQUY6IHsgbjpcIj8/XCIgfSxcbjB4MDBCMDogeyBuOlwiPz9cIiB9LFxuMHgwMEIxOiB7IG46XCI/P1wiIH0sXG4weDAwQjg6IHsgbjpcIj8/XCIgfSxcbjB4MDBCOTogeyBuOlwiPz9cIiB9LFxuMHgwMEJBOiB7IG46XCI/P1wiIH0sXG4weDAwQkI6IHsgbjpcIj8/XCIgfSxcbjB4MDBCQzogeyBuOlwiPz9cIiB9LFxuMHgwMEMzOiB7IG46XCI/P1wiIH0sXG4weDAwQzk6IHsgbjpcIj8/XCIgfSxcbjB4MDBDRDogeyBuOlwiPz9cIiB9LFxuMHgwMENFOiB7IG46XCI/P1wiIH0sXG4weDAwQ0Y6IHsgbjpcIj8/XCIgfSxcbjB4MDBEMDogeyBuOlwiPz9cIiB9LFxuMHgwMTAwOiB7IG46XCI/P1wiIH0sXG4weDAxMDM6IHsgbjpcIj8/XCIgfSxcbjB4MDEwNDogeyBuOlwiPz9cIiB9LFxuMHgwMTA1OiB7IG46XCI/P1wiIH0sXG4weDAxMDY6IHsgbjpcIj8/XCIgfSxcbjB4MDEwNzogeyBuOlwiPz9cIiB9LFxuMHgwMTA5OiB7IG46XCI/P1wiIH0sXG4weDAxMEE6IHsgbjpcIj8/XCIgfSxcbjB4MDEwQjogeyBuOlwiPz9cIiB9LFxuMHgwMTBDOiB7IG46XCI/P1wiIH0sXG4weDAxMEU6IHsgbjpcIj8/XCIgfSxcbjB4MDEwRjogeyBuOlwiPz9cIiB9LFxuMHgwMTgwOiB7IG46XCI/P1wiIH0sXG4weDAxODU6IHsgbjpcIj8/XCIgfSxcbjB4MDE4NjogeyBuOlwiPz9cIiB9LFxuMHgwMTg5OiB7IG46XCI/P1wiIH0sXG4weDAxOEM6IHsgbjpcIj8/XCIgfSxcbjB4MDIwMDogeyBuOlwiPz9cIiB9LFxuMHgwMjAyOiB7IG46XCI/P1wiIH0sXG4weDAyMDE6IHsgbjpcIj8/XCIgfSxcbjB4MDIwNDogeyBuOlwiPz9cIiB9LFxuMHgwMjA1OiB7IG46XCI/P1wiIH0sXG4weDAyODA6IHsgbjpcIj8/XCIgfSxcbjB4MDI4MTogeyBuOlwiPz9cIiB9LFxuMHgwMjgyOiB7IG46XCI/P1wiIH0sXG4weDAyODM6IHsgbjpcIj8/XCIgfSxcbjB4MDI4NDogeyBuOlwiPz9cIiB9LFxuMHgwMjg1OiB7IG46XCI/P1wiIH0sXG4weDAyODY6IHsgbjpcIj8/XCIgfSxcbjB4MDI4NzogeyBuOlwiPz9cIiB9LFxuMHgwMjg4OiB7IG46XCI/P1wiIH0sXG4weDAyOTI6IHsgbjpcIj8/XCIgfSxcbjB4MDI5MzogeyBuOlwiPz9cIiB9LFxuMHgwMjk0OiB7IG46XCI/P1wiIH0sXG4weDAyOTU6IHsgbjpcIj8/XCIgfSxcbjB4MDI5NjogeyBuOlwiPz9cIiB9LFxuMHgwMjk5OiB7IG46XCI/P1wiIH0sXG4weDAyOUE6IHsgbjpcIj8/XCIgfSxcbjB4MDMwMDogeyBuOlwiPz9cIiB9LFxuMHgwMzA0OiB7IG46XCI/P1wiIH0sXG4weDA2NDA6IHsgbjpcIj8/XCIgfSxcbjB4MDY0MjogeyBuOlwiPz9cIiB9LFxuMHgwNzAxOiB7IG46XCI/P1wiIH0sXG4weDA3MDI6IHsgbjpcIj8/XCIgfSxcbjB4MDcwMzogeyBuOlwiPz9cIiB9LFxuMHgwNzA0OiB7IG46XCI/P1wiIH0sXG4weDA3ODA6IHsgbjpcIj8/XCIgfSxcbjB4MDgwMDogeyBuOlwiPz9cIiB9LFxuMHgwODAxOiB7IG46XCI/P1wiIH0sXG4weDA4MDQ6IHsgbjpcIj8/XCIgfSxcbjB4MEE4MDogeyBuOlwiPz9cIiB9LFxuMHgyQUY2OiB7IG46XCI/P1wiIH0sXG4weDMyMzE6IHsgbjpcIj8/XCIgfSxcbjB4NkU0OTogeyBuOlwiPz9cIiB9LFxuMHg2RjQ0OiB7IG46XCI/P1wiIH0sXG4weEZGRkY6IHsgbjpcIlwiIH1cblx0fTtcblx0cmV0dXJuIHtcblx0XHRzaGVldF90b193azE6IHNoZWV0X3RvX3drMSxcblx0XHRib29rX3RvX3drMzogYm9va190b193azMsXG5cdFx0dG9fd29ya2Jvb2s6IGxvdHVzX3RvX3dvcmtib29rXG5cdH07XG59KSgpO1xuLyogMTguNC43IHJQciBDVF9SUHJFbHQgKi9cbmZ1bmN0aW9uIHBhcnNlX3JwcihycHIpIHtcblx0dmFyIGZvbnQgPSB7fSwgbSA9IHJwci5tYXRjaCh0YWdyZWdleCksIGkgPSAwO1xuXHR2YXIgcGFzcyA9IGZhbHNlO1xuXHRpZihtKSBmb3IoO2khPW0ubGVuZ3RoOyArK2kpIHtcblx0XHR2YXIgeSA9IHBhcnNleG1sdGFnKG1baV0pO1xuXHRcdHN3aXRjaCh5WzBdLnJlcGxhY2UoL1xcdyo6L2csXCJcIikpIHtcblx0XHRcdC8qIDE4LjguMTIgY29uZGVuc2UgQ1RfQm9vbGVhblByb3BlcnR5ICovXG5cdFx0XHQvKiAqKiBub3QgcmVxdWlyZWQgLiAqL1xuXHRcdFx0Y2FzZSAnPGNvbmRlbnNlJzogYnJlYWs7XG5cdFx0XHQvKiAxOC44LjE3IGV4dGVuZCBDVF9Cb29sZWFuUHJvcGVydHkgKi9cblx0XHRcdC8qICoqIG5vdCByZXF1aXJlZCAuICovXG5cdFx0XHRjYXNlICc8ZXh0ZW5kJzogYnJlYWs7XG5cdFx0XHQvKiAxOC44LjM2IHNoYWRvdyBDVF9Cb29sZWFuUHJvcGVydHkgKi9cblx0XHRcdC8qICoqIG5vdCByZXF1aXJlZCAuICovXG5cdFx0XHRjYXNlICc8c2hhZG93Jzpcblx0XHRcdFx0aWYoIXkudmFsKSBicmVhaztcblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0Y2FzZSAnPHNoYWRvdz4nOlxuXHRcdFx0Y2FzZSAnPHNoYWRvdy8+JzogZm9udC5zaGFkb3cgPSAxOyBicmVhaztcblx0XHRcdGNhc2UgJzwvc2hhZG93Pic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC40LjEgY2hhcnNldCBDVF9JbnRQcm9wZXJ0eSBUT0RPICovXG5cdFx0XHRjYXNlICc8Y2hhcnNldCc6XG5cdFx0XHRcdGlmKHkudmFsID09ICcxJykgYnJlYWs7XG5cdFx0XHRcdGZvbnQuY3AgPSBDUzJDUFtwYXJzZUludCh5LnZhbCwgMTApXTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdC8qIDE4LjQuMiBvdXRsaW5lIENUX0Jvb2xlYW5Qcm9wZXJ0eSBUT0RPICovXG5cdFx0XHRjYXNlICc8b3V0bGluZSc6XG5cdFx0XHRcdGlmKCF5LnZhbCkgYnJlYWs7XG5cdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdGNhc2UgJzxvdXRsaW5lPic6XG5cdFx0XHRjYXNlICc8b3V0bGluZS8+JzogZm9udC5vdXRsaW5lID0gMTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8L291dGxpbmU+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjQuNSByRm9udCBDVF9Gb250TmFtZSAqL1xuXHRcdFx0Y2FzZSAnPHJGb250JzogZm9udC5uYW1lID0geS52YWw7IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC40LjExIHN6IENUX0ZvbnRTaXplICovXG5cdFx0XHRjYXNlICc8c3onOiBmb250LnN6ID0geS52YWw7IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC40LjEwIHN0cmlrZSBDVF9Cb29sZWFuUHJvcGVydHkgKi9cblx0XHRcdGNhc2UgJzxzdHJpa2UnOlxuXHRcdFx0XHRpZigheS52YWwpIGJyZWFrO1xuXHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRjYXNlICc8c3RyaWtlPic6XG5cdFx0XHRjYXNlICc8c3RyaWtlLz4nOiBmb250LnN0cmlrZSA9IDE7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9zdHJpa2U+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjQuMTMgdSBDVF9VbmRlcmxpbmVQcm9wZXJ0eSAqL1xuXHRcdFx0Y2FzZSAnPHUnOlxuXHRcdFx0XHRpZigheS52YWwpIGJyZWFrO1xuXHRcdFx0XHRzd2l0Y2goeS52YWwpIHtcblx0XHRcdFx0XHRjYXNlICdkb3VibGUnOiBmb250LnV2YWwgPSBcImRvdWJsZVwiOyBicmVhaztcblx0XHRcdFx0XHRjYXNlICdzaW5nbGVBY2NvdW50aW5nJzogZm9udC51dmFsID0gXCJzaW5nbGUtYWNjb3VudGluZ1wiOyBicmVhaztcblx0XHRcdFx0XHRjYXNlICdkb3VibGVBY2NvdW50aW5nJzogZm9udC51dmFsID0gXCJkb3VibGUtYWNjb3VudGluZ1wiOyBicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRjYXNlICc8dT4nOlxuXHRcdFx0Y2FzZSAnPHUvPic6IGZvbnQudSA9IDE7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC91Pic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC44LjIgYiAqL1xuXHRcdFx0Y2FzZSAnPGInOlxuXHRcdFx0XHRpZih5LnZhbCA9PSAnMCcpIGJyZWFrO1xuXHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRjYXNlICc8Yj4nOlxuXHRcdFx0Y2FzZSAnPGIvPic6IGZvbnQuYiA9IDE7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9iPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC44LjI2IGkgKi9cblx0XHRcdGNhc2UgJzxpJzpcblx0XHRcdFx0aWYoeS52YWwgPT0gJzAnKSBicmVhaztcblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0Y2FzZSAnPGk+Jzpcblx0XHRcdGNhc2UgJzxpLz4nOiBmb250LmkgPSAxOyBicmVhaztcblx0XHRcdGNhc2UgJzwvaT4nOiBicmVhaztcblxuXHRcdFx0LyogMTguMy4xLjE1IGNvbG9yIENUX0NvbG9yIFRPRE86IHRpbnQsIHRoZW1lLCBhdXRvLCBpbmRleGVkICovXG5cdFx0XHRjYXNlICc8Y29sb3InOlxuXHRcdFx0XHRpZih5LnJnYikgZm9udC5jb2xvciA9IHkucmdiLnNsaWNlKDIsOCk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHQvKiAxOC44LjE4IGZhbWlseSBTVF9Gb250RmFtaWx5ICovXG5cdFx0XHRjYXNlICc8ZmFtaWx5JzogZm9udC5mYW1pbHkgPSB5LnZhbDsgYnJlYWs7XG5cblx0XHRcdC8qIDE4LjQuMTQgdmVydEFsaWduIENUX1ZlcnRpY2FsQWxpZ25Gb250UHJvcGVydHkgVE9ETyAqL1xuXHRcdFx0Y2FzZSAnPHZlcnRBbGlnbic6IGZvbnQudmFsaWduID0geS52YWw7IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC44LjM1IHNjaGVtZSBDVF9Gb250U2NoZW1lIFRPRE8gKi9cblx0XHRcdGNhc2UgJzxzY2hlbWUnOiBicmVhaztcblxuXHRcdFx0LyogMTguMi4xMCBleHRMc3QgQ1RfRXh0ZW5zaW9uTGlzdCA/ICovXG5cdFx0XHRjYXNlICc8ZXh0THN0JzogY2FzZSAnPGV4dExzdD4nOiBjYXNlICc8L2V4dExzdD4nOiBicmVhaztcblx0XHRcdGNhc2UgJzxleHQnOiBwYXNzID0gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8L2V4dD4nOiBwYXNzID0gZmFsc2U7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0aWYoeVswXS5jaGFyQ29kZUF0KDEpICE9PSA0NyAmJiAhcGFzcykgdGhyb3cgbmV3IEVycm9yKCdVbnJlY29nbml6ZWQgcmljaCBmb3JtYXQgJyArIHlbMF0pO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZm9udDtcbn1cblxudmFyIHBhcnNlX3JzID0gKGZ1bmN0aW9uKCkge1xuXHR2YXIgdHJlZ2V4ID0gbWF0Y2h0YWcoXCJ0XCIpLCBycHJlZ2V4ID0gbWF0Y2h0YWcoXCJyUHJcIik7XG5cdC8qIDE4LjQuNCByIENUX1JFbHQgKi9cblx0ZnVuY3Rpb24gcGFyc2VfcihyKSB7XG5cdFx0LyogMTguNC4xMiB0IFNUX1hzdHJpbmcgKi9cblx0XHR2YXIgdCA9IHIubWF0Y2godHJlZ2V4KS8qLCBjcCA9IDY1MDAxKi87XG5cdFx0aWYoIXQpIHJldHVybiB7dDpcInNcIiwgdjpcIlwifTtcblxuXHRcdHZhciBvID0gKHt0OidzJywgdjp1bmVzY2FwZXhtbCh0WzFdKX0pO1xuXHRcdHZhciBycHIgPSByLm1hdGNoKHJwcmVnZXgpO1xuXHRcdGlmKHJwcikgby5zID0gcGFyc2VfcnByKHJwclsxXSk7XG5cdFx0cmV0dXJuIG87XG5cdH1cblx0dmFyIHJyZWdleCA9IC88KD86XFx3KzopP3I+L2csIHJlbmQgPSAvPFxcLyg/Olxcdys6KT9yPi87XG5cdHJldHVybiBmdW5jdGlvbiBwYXJzZV9ycyhycykge1xuXHRcdHJldHVybiBycy5yZXBsYWNlKHJyZWdleCxcIlwiKS5zcGxpdChyZW5kKS5tYXAocGFyc2VfcikuZmlsdGVyKGZ1bmN0aW9uKHIpIHsgcmV0dXJuIHIudjsgfSk7XG5cdH07XG59KSgpO1xuXG5cbi8qIFBhcnNlIGEgbGlzdCBvZiA8cj4gdGFncyAqL1xudmFyIHJzX3RvX2h0bWwgPSAoZnVuY3Rpb24gcGFyc2VfcnNfZmFjdG9yeSgpIHtcblx0dmFyIG5scmVnZXggPSAvKFxcclxcbnxcXG4pL2c7XG5cdGZ1bmN0aW9uIHBhcnNlX3JwcjIoZm9udCwgaW50cm8sIG91dHJvKSB7XG5cdFx0dmFyIHN0eWxlID0gW107XG5cblx0XHRpZihmb250LnUpIHN0eWxlLnB1c2goXCJ0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcIik7XG5cdFx0aWYoZm9udC51dmFsKSBzdHlsZS5wdXNoKFwidGV4dC11bmRlcmxpbmUtc3R5bGU6XCIgKyBmb250LnV2YWwgKyBcIjtcIik7XG5cdFx0aWYoZm9udC5zeikgc3R5bGUucHVzaChcImZvbnQtc2l6ZTpcIiArIGZvbnQuc3ogKyBcInB0O1wiKTtcblx0XHRpZihmb250Lm91dGxpbmUpIHN0eWxlLnB1c2goXCJ0ZXh0LWVmZmVjdDogb3V0bGluZTtcIik7XG5cdFx0aWYoZm9udC5zaGFkb3cpIHN0eWxlLnB1c2goXCJ0ZXh0LXNoYWRvdzogYXV0bztcIik7XG5cdFx0aW50cm8ucHVzaCgnPHNwYW4gc3R5bGU9XCInICsgc3R5bGUuam9pbihcIlwiKSArICdcIj4nKTtcblxuXHRcdGlmKGZvbnQuYikgeyBpbnRyby5wdXNoKFwiPGI+XCIpOyBvdXRyby5wdXNoKFwiPC9iPlwiKTsgfVxuXHRcdGlmKGZvbnQuaSkgeyBpbnRyby5wdXNoKFwiPGk+XCIpOyBvdXRyby5wdXNoKFwiPC9pPlwiKTsgfVxuXHRcdGlmKGZvbnQuc3RyaWtlKSB7IGludHJvLnB1c2goXCI8cz5cIik7IG91dHJvLnB1c2goXCI8L3M+XCIpOyB9XG5cblx0XHR2YXIgYWxpZ24gPSBmb250LnZhbGlnbiB8fCBcIlwiO1xuXHRcdGlmKGFsaWduID09IFwic3VwZXJzY3JpcHRcIiB8fCBhbGlnbiA9PSBcInN1cGVyXCIpIGFsaWduID0gXCJzdXBcIjtcblx0XHRlbHNlIGlmKGFsaWduID09IFwic3Vic2NyaXB0XCIpIGFsaWduID0gXCJzdWJcIjtcblx0XHRpZihhbGlnbiAhPSBcIlwiKSB7IGludHJvLnB1c2goXCI8XCIgKyBhbGlnbiArIFwiPlwiKTsgb3V0cm8ucHVzaChcIjwvXCIgKyBhbGlnbiArIFwiPlwiKTsgfVxuXG5cdFx0b3V0cm8ucHVzaChcIjwvc3Bhbj5cIik7XG5cdFx0cmV0dXJuIGZvbnQ7XG5cdH1cblxuXHQvKiAxOC40LjQgciBDVF9SRWx0ICovXG5cdGZ1bmN0aW9uIHJfdG9faHRtbChyKSB7XG5cdFx0dmFyIHRlcm1zID0gW1tdLHIudixbXV07XG5cdFx0aWYoIXIudikgcmV0dXJuIFwiXCI7XG5cblx0XHRpZihyLnMpIHBhcnNlX3JwcjIoci5zLCB0ZXJtc1swXSwgdGVybXNbMl0pO1xuXG5cdFx0cmV0dXJuIHRlcm1zWzBdLmpvaW4oXCJcIikgKyB0ZXJtc1sxXS5yZXBsYWNlKG5scmVnZXgsJzxici8+JykgKyB0ZXJtc1syXS5qb2luKFwiXCIpO1xuXHR9XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHBhcnNlX3JzKHJzKSB7XG5cdFx0cmV0dXJuIHJzLm1hcChyX3RvX2h0bWwpLmpvaW4oXCJcIik7XG5cdH07XG59KSgpO1xuXG4vKiAxOC40Ljggc2kgQ1RfUnN0ICovXG52YXIgc2l0cmVnZXggPSAvPCg/Olxcdys6KT90W14+XSo+KFtePF0qKTxcXC8oPzpcXHcrOik/dD4vZywgc2lycmVnZXggPSAvPCg/Olxcdys6KT9yPi87XG52YXIgc2lycGhyZWdleCA9IC88KD86XFx3KzopP3JQaC4qPz4oW1xcc1xcU10qPyk8XFwvKD86XFx3KzopP3JQaD4vZztcbmZ1bmN0aW9uIHBhcnNlX3NpKHgsIG9wdHMpIHtcblx0dmFyIGh0bWwgPSBvcHRzID8gb3B0cy5jZWxsSFRNTCA6IHRydWU7XG5cdHZhciB6ID0ge307XG5cdGlmKCF4KSByZXR1cm4geyB0OiBcIlwiIH07XG5cdC8vdmFyIHk7XG5cdC8qIDE4LjQuMTIgdCBTVF9Yc3RyaW5nIChQbGFpbnRleHQgU3RyaW5nKSAqL1xuXHQvLyBUT0RPOiBpcyB3aGl0ZXNwYWNlIGFjdHVhbGx5IHZhbGlkIGhlcmU/XG5cdGlmKHgubWF0Y2goL15cXHMqPCg/Olxcdys6KT90W14+XSo+LykpIHtcblx0XHR6LnQgPSB1bmVzY2FwZXhtbCh1dGY4cmVhZCh4LnNsaWNlKHguaW5kZXhPZihcIj5cIikrMSkuc3BsaXQoLzxcXC8oPzpcXHcrOik/dD4vKVswXXx8XCJcIikpO1xuXHRcdHouciA9IHV0ZjhyZWFkKHgpO1xuXHRcdGlmKGh0bWwpIHouaCA9IGVzY2FwZWh0bWwoei50KTtcblx0fVxuXHQvKiAxOC40LjQgciBDVF9SRWx0IChSaWNoIFRleHQgUnVuKSAqL1xuXHRlbHNlIGlmKCgvKnkgPSAqL3gubWF0Y2goc2lycmVnZXgpKSkge1xuXHRcdHouciA9IHV0ZjhyZWFkKHgpO1xuXHRcdHoudCA9IHVuZXNjYXBleG1sKHV0ZjhyZWFkKCh4LnJlcGxhY2Uoc2lycGhyZWdleCwgJycpLm1hdGNoKHNpdHJlZ2V4KXx8W10pLmpvaW4oXCJcIikucmVwbGFjZSh0YWdyZWdleCxcIlwiKSkpO1xuXHRcdGlmKGh0bWwpIHouaCA9IHJzX3RvX2h0bWwocGFyc2VfcnMoei5yKSk7XG5cdH1cblx0LyogMTguNC4zIHBob25ldGljUHIgQ1RfUGhvbmV0aWNQciAoVE9ETzogbmVlZGVkIGZvciBBc2lhbiBzdXBwb3J0KSAqL1xuXHQvKiAxOC40LjYgclBoIENUX1Bob25ldGljUnVuIChUT0RPOiBuZWVkZWQgZm9yIEFzaWFuIHN1cHBvcnQpICovXG5cdHJldHVybiB6O1xufVxuXG4vKiAxOC40IFNoYXJlZCBTdHJpbmcgVGFibGUgKi9cbnZhciBzc3RyMCA9IC88KD86XFx3KzopP3NzdChbXj5dKik+KFtcXHNcXFNdKik8XFwvKD86XFx3KzopP3NzdD4vO1xudmFyIHNzdHIxID0gLzwoPzpcXHcrOik/KD86c2l8c3N0SXRlbSk+L2c7XG52YXIgc3N0cjIgPSAvPFxcLyg/Olxcdys6KT8oPzpzaXxzc3RJdGVtKT4vO1xuZnVuY3Rpb24gcGFyc2Vfc3N0X3htbChkYXRhLCBvcHRzKSB7XG5cdHZhciBzID0gKFtdKSwgc3MgPSBcIlwiO1xuXHRpZighZGF0YSkgcmV0dXJuIHM7XG5cdC8qIDE4LjQuOSBzc3QgQ1RfU3N0ICovXG5cdHZhciBzc3QgPSBkYXRhLm1hdGNoKHNzdHIwKTtcblx0aWYoc3N0KSB7XG5cdFx0c3MgPSBzc3RbMl0ucmVwbGFjZShzc3RyMSxcIlwiKS5zcGxpdChzc3RyMik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSAhPSBzcy5sZW5ndGg7ICsraSkge1xuXHRcdFx0dmFyIG8gPSBwYXJzZV9zaShzc1tpXS50cmltKCksIG9wdHMpO1xuXHRcdFx0aWYobyAhPSBudWxsKSBzW3MubGVuZ3RoXSA9IG87XG5cdFx0fVxuXHRcdHNzdCA9IHBhcnNleG1sdGFnKHNzdFsxXSk7IHMuQ291bnQgPSBzc3QuY291bnQ7IHMuVW5pcXVlID0gc3N0LnVuaXF1ZUNvdW50O1xuXHR9XG5cdHJldHVybiBzO1xufVxuXG5SRUxTLlNTVCA9IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9zaGFyZWRTdHJpbmdzXCI7XG52YXIgc3RyYXl3c3JlZ2V4ID0gL15cXHN8XFxzJHxbXFx0XFxuXFxyXS87XG5mdW5jdGlvbiB3cml0ZV9zc3RfeG1sKHNzdCwgb3B0cykge1xuXHRpZighb3B0cy5ib29rU1NUKSByZXR1cm4gXCJcIjtcblx0dmFyIG8gPSBbWE1MX0hFQURFUl07XG5cdG9bby5sZW5ndGhdID0gKHdyaXRleHRhZygnc3N0JywgbnVsbCwge1xuXHRcdHhtbG5zOiBYTUxOUy5tYWluWzBdLFxuXHRcdGNvdW50OiBzc3QuQ291bnQsXG5cdFx0dW5pcXVlQ291bnQ6IHNzdC5VbmlxdWVcblx0fSkpO1xuXHRmb3IodmFyIGkgPSAwOyBpICE9IHNzdC5sZW5ndGg7ICsraSkgeyBpZihzc3RbaV0gPT0gbnVsbCkgY29udGludWU7XG5cdFx0dmFyIHMgPSBzc3RbaV07XG5cdFx0dmFyIHNpdGFnID0gXCI8c2k+XCI7XG5cdFx0aWYocy5yKSBzaXRhZyArPSBzLnI7XG5cdFx0ZWxzZSB7XG5cdFx0XHRzaXRhZyArPSBcIjx0XCI7XG5cdFx0XHRpZighcy50KSBzLnQgPSBcIlwiO1xuXHRcdFx0aWYocy50Lm1hdGNoKHN0cmF5d3NyZWdleCkpIHNpdGFnICs9ICcgeG1sOnNwYWNlPVwicHJlc2VydmVcIic7XG5cdFx0XHRzaXRhZyArPSBcIj5cIiArIGVzY2FwZXhtbChzLnQpICsgXCI8L3Q+XCI7XG5cdFx0fVxuXHRcdHNpdGFnICs9IFwiPC9zaT5cIjtcblx0XHRvW28ubGVuZ3RoXSA9IChzaXRhZyk7XG5cdH1cblx0aWYoby5sZW5ndGg+Mil7IG9bby5sZW5ndGhdID0gKCc8L3NzdD4nKTsgb1sxXT1vWzFdLnJlcGxhY2UoXCIvPlwiLFwiPlwiKTsgfVxuXHRyZXR1cm4gby5qb2luKFwiXCIpO1xufVxuLyogW01TLVhMU0JdIDIuNC4yMjEgQnJ0QmVnaW5Tc3QgKi9cbmZ1bmN0aW9uIHBhcnNlX0JydEJlZ2luU3N0KGRhdGEpIHtcblx0cmV0dXJuIFtkYXRhLnJlYWRfc2hpZnQoNCksIGRhdGEucmVhZF9zaGlmdCg0KV07XG59XG5cbi8qIFtNUy1YTFNCXSAyLjEuNy40NSBTaGFyZWQgU3RyaW5ncyAqL1xuZnVuY3Rpb24gcGFyc2Vfc3N0X2JpbihkYXRhLCBvcHRzKSB7XG5cdHZhciBzID0gKFtdKTtcblx0dmFyIHBhc3MgPSBmYWxzZTtcblx0cmVjb3JkaG9wcGVyKGRhdGEsIGZ1bmN0aW9uIGhvcHBlcl9zc3QodmFsLCBSX24sIFJUKSB7XG5cdFx0c3dpdGNoKFJUKSB7XG5cdFx0XHRjYXNlIDB4MDA5RjogLyogJ0JydEJlZ2luU3N0JyAqL1xuXHRcdFx0XHRzLkNvdW50ID0gdmFsWzBdOyBzLlVuaXF1ZSA9IHZhbFsxXTsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAxMzogLyogJ0JydFNTVEl0ZW0nICovXG5cdFx0XHRcdHMucHVzaCh2YWwpOyBicmVhaztcblx0XHRcdGNhc2UgMHgwMEEwOiAvKiAnQnJ0RW5kU3N0JyAqL1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdFx0Y2FzZSAweDAwMjM6IC8qICdCcnRGUlRCZWdpbicgKi9cblx0XHRcdFx0cGFzcyA9IHRydWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAweDAwMjQ6IC8qICdCcnRGUlRFbmQnICovXG5cdFx0XHRcdHBhc3MgPSBmYWxzZTsgYnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGlmKFJfbi5pbmRleE9mKFwiQmVnaW5cIikgPiAwKXsvKiBlbXB0eSAqL31cblx0XHRcdFx0ZWxzZSBpZihSX24uaW5kZXhPZihcIkVuZFwiKSA+IDApey8qIGVtcHR5ICovfVxuXHRcdFx0XHRpZighcGFzcyB8fCBvcHRzLldURikgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCByZWNvcmQgXCIgKyBSVCArIFwiIFwiICsgUl9uKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcztcbn1cblxuZnVuY3Rpb24gd3JpdGVfQnJ0QmVnaW5Tc3Qoc3N0LCBvKSB7XG5cdGlmKCFvKSBvID0gbmV3X2J1Zig4KTtcblx0by53cml0ZV9zaGlmdCg0LCBzc3QuQ291bnQpO1xuXHRvLndyaXRlX3NoaWZ0KDQsIHNzdC5VbmlxdWUpO1xuXHRyZXR1cm4gbztcbn1cblxudmFyIHdyaXRlX0JydFNTVEl0ZW0gPSB3cml0ZV9SaWNoU3RyO1xuXG5mdW5jdGlvbiB3cml0ZV9zc3RfYmluKHNzdCkge1xuXHR2YXIgYmEgPSBidWZfYXJyYXkoKTtcblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEJlZ2luU3N0XCIsIHdyaXRlX0JydEJlZ2luU3N0KHNzdCkpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgc3N0Lmxlbmd0aDsgKytpKSB3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0U1NUSXRlbVwiLCB3cml0ZV9CcnRTU1RJdGVtKHNzdFtpXSkpO1xuXHQvKiBGUlRTU1QgKi9cblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEVuZFNzdFwiKTtcblx0cmV0dXJuIGJhLmVuZCgpO1xufVxuZnVuY3Rpb24gX0pTMkFOU0koc3RyKSB7XG5cdGlmKHR5cGVvZiBjcHRhYmxlICE9PSAndW5kZWZpbmVkJykgcmV0dXJuIGNwdGFibGUudXRpbHMuZW5jb2RlKGN1cnJlbnRfYW5zaSwgc3RyKTtcblx0dmFyIG8gPSBbXSwgb28gPSBzdHIuc3BsaXQoXCJcIik7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBvby5sZW5ndGg7ICsraSkgb1tpXSA9IG9vW2ldLmNoYXJDb2RlQXQoMCk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtT0ZGQ1JZUFRPXSAyLjEuNCBWZXJzaW9uICovXG5mdW5jdGlvbiBwYXJzZV9DUllQVE9WZXJzaW9uKGJsb2IsIGxlbmd0aCkge1xuXHR2YXIgbyA9IHt9O1xuXHRvLk1ham9yID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRvLk1pbm9yID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuaWYobGVuZ3RoID49IDQpIGJsb2IubCArPSBsZW5ndGggLSA0O1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLU9GRkNSWVBUT10gMi4xLjUgRGF0YVNwYWNlVmVyc2lvbkluZm8gKi9cbmZ1bmN0aW9uIHBhcnNlX0RhdGFTcGFjZVZlcnNpb25JbmZvKGJsb2IpIHtcblx0dmFyIG8gPSB7fTtcblx0by5pZCA9IGJsb2IucmVhZF9zaGlmdCgwLCAnbHBwNCcpO1xuXHRvLlIgPSBwYXJzZV9DUllQVE9WZXJzaW9uKGJsb2IsIDQpO1xuXHRvLlUgPSBwYXJzZV9DUllQVE9WZXJzaW9uKGJsb2IsIDQpO1xuXHRvLlcgPSBwYXJzZV9DUllQVE9WZXJzaW9uKGJsb2IsIDQpO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLU9GRkNSWVBUT10gMi4xLjYuMSBEYXRhU3BhY2VNYXBFbnRyeSBTdHJ1Y3R1cmUgKi9cbmZ1bmN0aW9uIHBhcnNlX0RhdGFTcGFjZU1hcEVudHJ5KGJsb2IpIHtcblx0dmFyIGxlbiA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0dmFyIGVuZCA9IGJsb2IubCArIGxlbiAtIDQ7XG5cdHZhciBvID0ge307XG5cdHZhciBjbnQgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdHZhciBjb21wcyA9IFtdO1xuXHQvKiBbTVMtT0ZGQ1JZUFRPXSAyLjEuNi4yIERhdGFTcGFjZVJlZmVyZW5jZUNvbXBvbmVudCBTdHJ1Y3R1cmUgKi9cblx0d2hpbGUoY250LS0gPiAwKSBjb21wcy5wdXNoKHsgdDogYmxvYi5yZWFkX3NoaWZ0KDQpLCB2OiBibG9iLnJlYWRfc2hpZnQoMCwgJ2xwcDQnKSB9KTtcblx0by5uYW1lID0gYmxvYi5yZWFkX3NoaWZ0KDAsICdscHA0Jyk7XG5cdG8uY29tcHMgPSBjb21wcztcblx0aWYoYmxvYi5sICE9IGVuZCkgdGhyb3cgbmV3IEVycm9yKFwiQmFkIERhdGFTcGFjZU1hcEVudHJ5OiBcIiArIGJsb2IubCArIFwiICE9IFwiICsgZW5kKTtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1PRkZDUllQVE9dIDIuMS42IERhdGFTcGFjZU1hcCAqL1xuZnVuY3Rpb24gcGFyc2VfRGF0YVNwYWNlTWFwKGJsb2IpIHtcblx0dmFyIG8gPSBbXTtcblx0YmxvYi5sICs9IDQ7IC8vIG11c3QgYmUgMHg4XG5cdHZhciBjbnQgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdHdoaWxlKGNudC0tID4gMCkgby5wdXNoKHBhcnNlX0RhdGFTcGFjZU1hcEVudHJ5KGJsb2IpKTtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1PRkZDUllQVE9dIDIuMS43IERhdGFTcGFjZURlZmluaXRpb24gKi9cbmZ1bmN0aW9uIHBhcnNlX0RhdGFTcGFjZURlZmluaXRpb24oYmxvYikge1xuXHR2YXIgbyA9IFtdO1xuXHRibG9iLmwgKz0gNDsgLy8gbXVzdCBiZSAweDhcblx0dmFyIGNudCA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0d2hpbGUoY250LS0gPiAwKSBvLnB1c2goYmxvYi5yZWFkX3NoaWZ0KDAsICdscHA0JykpO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLU9GRkNSWVBUT10gMi4xLjggRGF0YVNwYWNlRGVmaW5pdGlvbiAqL1xuZnVuY3Rpb24gcGFyc2VfVHJhbnNmb3JtSW5mb0hlYWRlcihibG9iKSB7XG5cdHZhciBvID0ge307XG5cdC8qdmFyIGxlbiA9ICovYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRibG9iLmwgKz0gNDsgLy8gbXVzdCBiZSAweDFcblx0by5pZCA9IGJsb2IucmVhZF9zaGlmdCgwLCAnbHBwNCcpO1xuXHRvLm5hbWUgPSBibG9iLnJlYWRfc2hpZnQoMCwgJ2xwcDQnKTtcblx0by5SID0gcGFyc2VfQ1JZUFRPVmVyc2lvbihibG9iLCA0KTtcblx0by5VID0gcGFyc2VfQ1JZUFRPVmVyc2lvbihibG9iLCA0KTtcblx0by5XID0gcGFyc2VfQ1JZUFRPVmVyc2lvbihibG9iLCA0KTtcblx0cmV0dXJuIG87XG59XG5cbmZ1bmN0aW9uIHBhcnNlX1ByaW1hcnkoYmxvYikge1xuXHQvKiBbTVMtT0ZGQ1JZUFRPXSAyLjIuNiBJUk1EU1RyYW5zZm9ybUluZm8gKi9cblx0dmFyIGhkciA9IHBhcnNlX1RyYW5zZm9ybUluZm9IZWFkZXIoYmxvYik7XG5cdC8qIFtNUy1PRkZDUllQVE9dIDIuMS45IEVuY3J5cHRpb25UcmFuc2Zvcm1JbmZvICovXG5cdGhkci5lbmFtZSA9IGJsb2IucmVhZF9zaGlmdCgwLCAnOGxwcDQnKTtcblx0aGRyLmJsa3N6ID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRoZHIuY21vZGUgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdGlmKGJsb2IucmVhZF9zaGlmdCg0KSAhPSAweDA0KSB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgIVByaW1hcnkgcmVjb3JkXCIpO1xuXHRyZXR1cm4gaGRyO1xufVxuXG4vKiBbTVMtT0ZGQ1JZUFRPXSAyLjMuMiBFbmNyeXB0aW9uIEhlYWRlciAqL1xuZnVuY3Rpb24gcGFyc2VfRW5jcnlwdGlvbkhlYWRlcihibG9iLCBsZW5ndGgpIHtcblx0dmFyIHRndCA9IGJsb2IubCArIGxlbmd0aDtcblx0dmFyIG8gPSB7fTtcblx0by5GbGFncyA9IChibG9iLnJlYWRfc2hpZnQoNCkgJiAweDNGKTtcblx0YmxvYi5sICs9IDQ7XG5cdG8uQWxnSUQgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdHZhciB2YWxpZCA9IGZhbHNlO1xuXHRzd2l0Y2goby5BbGdJRCkge1xuXHRcdGNhc2UgMHg2NjBFOiBjYXNlIDB4NjYwRjogY2FzZSAweDY2MTA6IHZhbGlkID0gKG8uRmxhZ3MgPT0gMHgyNCk7IGJyZWFrO1xuXHRcdGNhc2UgMHg2ODAxOiB2YWxpZCA9IChvLkZsYWdzID09IDB4MDQpOyBicmVhaztcblx0XHRjYXNlIDA6IHZhbGlkID0gKG8uRmxhZ3MgPT0gMHgxMCB8fCBvLkZsYWdzID09IDB4MDQgfHwgby5GbGFncyA9PSAweDI0KTsgYnJlYWs7XG5cdFx0ZGVmYXVsdDogdGhyb3cgJ1VucmVjb2duaXplZCBlbmNyeXB0aW9uIGFsZ29yaXRobTogJyArIG8uQWxnSUQ7XG5cdH1cblx0aWYoIXZhbGlkKSB0aHJvdyBuZXcgRXJyb3IoXCJFbmNyeXB0aW9uIEZsYWdzL0FsZ0lEIG1pc21hdGNoXCIpO1xuXHRvLkFsZ0lESGFzaCA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0by5LZXlTaXplID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRvLlByb3ZpZGVyVHlwZSA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0YmxvYi5sICs9IDg7XG5cdG8uQ1NQTmFtZSA9IGJsb2IucmVhZF9zaGlmdCgodGd0LWJsb2IubCk+PjEsICd1dGYxNmxlJyk7XG5cdGJsb2IubCA9IHRndDtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1PRkZDUllQVE9dIDIuMy4zIEVuY3J5cHRpb24gVmVyaWZpZXIgKi9cbmZ1bmN0aW9uIHBhcnNlX0VuY3J5cHRpb25WZXJpZmllcihibG9iLCBsZW5ndGgpIHtcblx0dmFyIG8gPSB7fSwgdGd0ID0gYmxvYi5sICsgbGVuZ3RoO1xuXHRibG9iLmwgKz0gNDsgLy8gU2FsdFNpemUgbXVzdCBiZSAweDEwXG5cdG8uU2FsdCA9IGJsb2Iuc2xpY2UoYmxvYi5sLCBibG9iLmwrMTYpOyBibG9iLmwgKz0gMTY7XG5cdG8uVmVyaWZpZXIgPSBibG9iLnNsaWNlKGJsb2IubCwgYmxvYi5sKzE2KTsgYmxvYi5sICs9IDE2O1xuXHQvKnZhciBzeiA9ICovYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRvLlZlcmlmaWVySGFzaCA9IGJsb2Iuc2xpY2UoYmxvYi5sLCB0Z3QpOyBibG9iLmwgPSB0Z3Q7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtT0ZGQ1JZUFRPXSAyLjMuNC4qIEVuY3J5cHRpb25JbmZvIFN0cmVhbSAqL1xuZnVuY3Rpb24gcGFyc2VfRW5jcnlwdGlvbkluZm8oYmxvYikge1xuXHR2YXIgdmVycyA9IHBhcnNlX0NSWVBUT1ZlcnNpb24oYmxvYik7XG5cdHN3aXRjaCh2ZXJzLk1pbm9yKSB7XG5cdFx0Y2FzZSAweDAyOiByZXR1cm4gW3ZlcnMuTWlub3IsIHBhcnNlX0VuY0luZm9TdGQoYmxvYiwgdmVycyldO1xuXHRcdGNhc2UgMHgwMzogcmV0dXJuIFt2ZXJzLk1pbm9yLCBwYXJzZV9FbmNJbmZvRXh0KGJsb2IsIHZlcnMpXTtcblx0XHRjYXNlIDB4MDQ6IHJldHVybiBbdmVycy5NaW5vciwgcGFyc2VfRW5jSW5mb0FnbChibG9iLCB2ZXJzKV07XG5cdH1cblx0dGhyb3cgbmV3IEVycm9yKFwiRUNNQS0zNzYgRW5jcnlwdGVkIGZpbGUgdW5yZWNvZ25pemVkIFZlcnNpb246IFwiICsgdmVycy5NaW5vcik7XG59XG5cbi8qIFtNUy1PRkZDUllQVE9dIDIuMy40LjUgIEVuY3J5cHRpb25JbmZvIFN0cmVhbSAoU3RhbmRhcmQgRW5jcnlwdGlvbikgKi9cbmZ1bmN0aW9uIHBhcnNlX0VuY0luZm9TdGQoYmxvYikge1xuXHR2YXIgZmxhZ3MgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdGlmKChmbGFncyAmIDB4M0YpICE9IDB4MjQpIHRocm93IG5ldyBFcnJvcihcIkVuY3J5cHRpb25JbmZvIG1pc21hdGNoXCIpO1xuXHR2YXIgc3ogPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdC8vdmFyIHRndCA9IGJsb2IubCArIHN6O1xuXHR2YXIgaGRyID0gcGFyc2VfRW5jcnlwdGlvbkhlYWRlcihibG9iLCBzeik7XG5cdHZhciB2ZXJpZmllciA9IHBhcnNlX0VuY3J5cHRpb25WZXJpZmllcihibG9iLCBibG9iLmxlbmd0aCAtIGJsb2IubCk7XG5cdHJldHVybiB7IHQ6XCJTdGRcIiwgaDpoZHIsIHY6dmVyaWZpZXIgfTtcbn1cbi8qIFtNUy1PRkZDUllQVE9dIDIuMy40LjYgIEVuY3J5cHRpb25JbmZvIFN0cmVhbSAoRXh0ZW5zaWJsZSBFbmNyeXB0aW9uKSAqL1xuZnVuY3Rpb24gcGFyc2VfRW5jSW5mb0V4dCgpIHsgdGhyb3cgbmV3IEVycm9yKFwiRmlsZSBpcyBwYXNzd29yZC1wcm90ZWN0ZWQ6IEVDTUEtMzc2IEV4dGVuc2libGVcIik7IH1cbi8qIFtNUy1PRkZDUllQVE9dIDIuMy40LjEwIEVuY3J5cHRpb25JbmZvIFN0cmVhbSAoQWdpbGUgRW5jcnlwdGlvbikgKi9cbmZ1bmN0aW9uIHBhcnNlX0VuY0luZm9BZ2woYmxvYikge1xuXHR2YXIgS2V5RGF0YSA9IFtcInNhbHRTaXplXCIsXCJibG9ja1NpemVcIixcImtleUJpdHNcIixcImhhc2hTaXplXCIsXCJjaXBoZXJBbGdvcml0aG1cIixcImNpcGhlckNoYWluaW5nXCIsXCJoYXNoQWxnb3JpdGhtXCIsXCJzYWx0VmFsdWVcIl07XG5cdGJsb2IubCs9NDtcblx0dmFyIHhtbCA9IGJsb2IucmVhZF9zaGlmdChibG9iLmxlbmd0aCAtIGJsb2IubCwgJ3V0ZjgnKTtcblx0dmFyIG8gPSB7fTtcblx0eG1sLnJlcGxhY2UodGFncmVnZXgsIGZ1bmN0aW9uIHhtbF9hZ2lsZSh4KSB7XG5cdFx0dmFyIHkgPSBwYXJzZXhtbHRhZyh4KTtcblx0XHRzd2l0Y2goc3RyaXBfbnMoeVswXSkpIHtcblx0XHRcdGNhc2UgJzw/eG1sJzogYnJlYWs7XG5cdFx0XHRjYXNlICc8ZW5jcnlwdGlvbic6IGNhc2UgJzwvZW5jcnlwdGlvbj4nOiBicmVhaztcblx0XHRcdGNhc2UgJzxrZXlEYXRhJzogS2V5RGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGspIHsgb1trXSA9IHlba107IH0pOyBicmVhaztcblx0XHRcdGNhc2UgJzxkYXRhSW50ZWdyaXR5Jzogby5lbmNyeXB0ZWRIbWFjS2V5ID0geS5lbmNyeXB0ZWRIbWFjS2V5OyBvLmVuY3J5cHRlZEhtYWNWYWx1ZSA9IHkuZW5jcnlwdGVkSG1hY1ZhbHVlOyBicmVhaztcblx0XHRcdGNhc2UgJzxrZXlFbmNyeXB0b3JzPic6IGNhc2UgJzxrZXlFbmNyeXB0b3JzJzogby5lbmNzID0gW107IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9rZXlFbmNyeXB0b3JzPic6IGJyZWFrO1xuXG5cdFx0XHRjYXNlICc8a2V5RW5jcnlwdG9yJzogby51cmkgPSB5LnVyaTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8L2tleUVuY3J5cHRvcj4nOiBicmVhaztcblx0XHRcdGNhc2UgJzxlbmNyeXB0ZWRLZXknOiBvLmVuY3MucHVzaCh5KTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyB5WzBdO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtT0ZGQ1JZUFRPXSAyLjMuNS4xIFJDNCBDcnlwdG9BUEkgRW5jcnlwdGlvbiBIZWFkZXIgKi9cbmZ1bmN0aW9uIHBhcnNlX1JDNENyeXB0b0hlYWRlcihibG9iLCBsZW5ndGgpIHtcblx0dmFyIG8gPSB7fTtcblx0dmFyIHZlcnMgPSBvLkVuY3J5cHRpb25WZXJzaW9uSW5mbyA9IHBhcnNlX0NSWVBUT1ZlcnNpb24oYmxvYiwgNCk7IGxlbmd0aCAtPSA0O1xuXHRpZih2ZXJzLk1pbm9yICE9IDIpIHRocm93IG5ldyBFcnJvcigndW5yZWNvZ25pemVkIG1pbm9yIHZlcnNpb24gY29kZTogJyArIHZlcnMuTWlub3IpO1xuXHRpZih2ZXJzLk1ham9yID4gNCB8fCB2ZXJzLk1ham9yIDwgMikgdGhyb3cgbmV3IEVycm9yKCd1bnJlY29nbml6ZWQgbWFqb3IgdmVyc2lvbiBjb2RlOiAnICsgdmVycy5NYWpvcik7XG5cdG8uRmxhZ3MgPSBibG9iLnJlYWRfc2hpZnQoNCk7IGxlbmd0aCAtPSA0O1xuXHR2YXIgc3ogPSBibG9iLnJlYWRfc2hpZnQoNCk7IGxlbmd0aCAtPSA0O1xuXHRvLkVuY3J5cHRpb25IZWFkZXIgPSBwYXJzZV9FbmNyeXB0aW9uSGVhZGVyKGJsb2IsIHN6KTsgbGVuZ3RoIC09IHN6O1xuXHRvLkVuY3J5cHRpb25WZXJpZmllciA9IHBhcnNlX0VuY3J5cHRpb25WZXJpZmllcihibG9iLCBsZW5ndGgpO1xuXHRyZXR1cm4gbztcbn1cbi8qIFtNUy1PRkZDUllQVE9dIDIuMy42LjEgUkM0IEVuY3J5cHRpb24gSGVhZGVyICovXG5mdW5jdGlvbiBwYXJzZV9SQzRIZWFkZXIoYmxvYikge1xuXHR2YXIgbyA9IHt9O1xuXHR2YXIgdmVycyA9IG8uRW5jcnlwdGlvblZlcnNpb25JbmZvID0gcGFyc2VfQ1JZUFRPVmVyc2lvbihibG9iLCA0KTtcblx0aWYodmVycy5NYWpvciAhPSAxIHx8IHZlcnMuTWlub3IgIT0gMSkgdGhyb3cgJ3VucmVjb2duaXplZCB2ZXJzaW9uIGNvZGUgJyArIHZlcnMuTWFqb3IgKyAnIDogJyArIHZlcnMuTWlub3I7XG5cdG8uU2FsdCA9IGJsb2IucmVhZF9zaGlmdCgxNik7XG5cdG8uRW5jcnlwdGVkVmVyaWZpZXIgPSBibG9iLnJlYWRfc2hpZnQoMTYpO1xuXHRvLkVuY3J5cHRlZFZlcmlmaWVySGFzaCA9IGJsb2IucmVhZF9zaGlmdCgxNik7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtT0ZGQ1JZUFRPXSAyLjMuNy4xIEJpbmFyeSBEb2N1bWVudCBQYXNzd29yZCBWZXJpZmllciBEZXJpdmF0aW9uICovXG5mdW5jdGlvbiBjcnlwdG9fQ3JlYXRlUGFzc3dvcmRWZXJpZmllcl9NZXRob2QxKFBhc3N3b3JkKSB7XG5cdHZhciBWZXJpZmllciA9IDB4MDAwMCwgUGFzc3dvcmRBcnJheTtcblx0dmFyIFBhc3N3b3JkRGVjb2RlZCA9IF9KUzJBTlNJKFBhc3N3b3JkKTtcblx0dmFyIGxlbiA9IFBhc3N3b3JkRGVjb2RlZC5sZW5ndGggKyAxLCBpLCBQYXNzd29yZEJ5dGU7XG5cdHZhciBJbnRlcm1lZGlhdGUxLCBJbnRlcm1lZGlhdGUyLCBJbnRlcm1lZGlhdGUzO1xuXHRQYXNzd29yZEFycmF5ID0gbmV3X3Jhd19idWYobGVuKTtcblx0UGFzc3dvcmRBcnJheVswXSA9IFBhc3N3b3JkRGVjb2RlZC5sZW5ndGg7XG5cdGZvcihpID0gMTsgaSAhPSBsZW47ICsraSkgUGFzc3dvcmRBcnJheVtpXSA9IFBhc3N3b3JkRGVjb2RlZFtpLTFdO1xuXHRmb3IoaSA9IGxlbi0xOyBpID49IDA7IC0taSkge1xuXHRcdFBhc3N3b3JkQnl0ZSA9IFBhc3N3b3JkQXJyYXlbaV07XG5cdFx0SW50ZXJtZWRpYXRlMSA9ICgoVmVyaWZpZXIgJiAweDQwMDApID09PSAweDAwMDApID8gMCA6IDE7XG5cdFx0SW50ZXJtZWRpYXRlMiA9IChWZXJpZmllciA8PCAxKSAmIDB4N0ZGRjtcblx0XHRJbnRlcm1lZGlhdGUzID0gSW50ZXJtZWRpYXRlMSB8IEludGVybWVkaWF0ZTI7XG5cdFx0VmVyaWZpZXIgPSBJbnRlcm1lZGlhdGUzIF4gUGFzc3dvcmRCeXRlO1xuXHR9XG5cdHJldHVybiBWZXJpZmllciBeIDB4Q0U0Qjtcbn1cblxuLyogW01TLU9GRkNSWVBUT10gMi4zLjcuMiBCaW5hcnkgRG9jdW1lbnQgWE9SIEFycmF5IEluaXRpYWxpemF0aW9uICovXG52YXIgY3J5cHRvX0NyZWF0ZVhvckFycmF5X01ldGhvZDEgPSAoZnVuY3Rpb24oKSB7XG5cdHZhciBQYWRBcnJheSA9IFsweEJCLCAweEZGLCAweEZGLCAweEJBLCAweEZGLCAweEZGLCAweEI5LCAweDgwLCAweDAwLCAweEJFLCAweDBGLCAweDAwLCAweEJGLCAweDBGLCAweDAwXTtcblx0dmFyIEluaXRpYWxDb2RlID0gWzB4RTFGMCwgMHgxRDBGLCAweENDOUMsIDB4ODRDMCwgMHgxMTBDLCAweDBFMTAsIDB4RjFDRSwgMHgzMTNFLCAweDE4NzIsIDB4RTEzOSwgMHhENDBGLCAweDg0RjksIDB4MjgwQywgMHhBOTZBLCAweDRFQzNdO1xuXHR2YXIgWG9yTWF0cml4ID0gWzB4QUVGQywgMHg0REQ5LCAweDlCQjIsIDB4Mjc0NSwgMHg0RThBLCAweDlEMTQsIDB4MkEwOSwgMHg3QjYxLCAweEY2QzIsIDB4RkRBNSwgMHhFQjZCLCAweEM2RjcsIDB4OURDRiwgMHgyQkJGLCAweDQ1NjMsIDB4OEFDNiwgMHgwNUFELCAweDBCNUEsIDB4MTZCNCwgMHgyRDY4LCAweDVBRDAsIDB4MDM3NSwgMHgwNkVBLCAweDBERDQsIDB4MUJBOCwgMHgzNzUwLCAweDZFQTAsIDB4REQ0MCwgMHhEODQ5LCAweEEwQjMsIDB4NTE0NywgMHhBMjhFLCAweDU1M0QsIDB4QUE3QSwgMHg0NEQ1LCAweDZGNDUsIDB4REU4QSwgMHhBRDM1LCAweDRBNEIsIDB4OTQ5NiwgMHgzOTBELCAweDcyMUEsIDB4RUIyMywgMHhDNjY3LCAweDlDRUYsIDB4MjlGRiwgMHg1M0ZFLCAweEE3RkMsIDB4NUZEOSwgMHg0N0QzLCAweDhGQTYsIDB4MEY2RCwgMHgxRURBLCAweDNEQjQsIDB4N0I2OCwgMHhGNkQwLCAweEI4NjEsIDB4NjBFMywgMHhDMUM2LCAweDkzQUQsIDB4Mzc3QiwgMHg2RUY2LCAweERERUMsIDB4NDVBMCwgMHg4QjQwLCAweDA2QTEsIDB4MEQ0MiwgMHgxQTg0LCAweDM1MDgsIDB4NkExMCwgMHhBQTUxLCAweDQ0ODMsIDB4ODkwNiwgMHgwMjJELCAweDA0NUEsIDB4MDhCNCwgMHgxMTY4LCAweDc2QjQsIDB4RUQ2OCwgMHhDQUYxLCAweDg1QzMsIDB4MUJBNywgMHgzNzRFLCAweDZFOUMsIDB4MzczMCwgMHg2RTYwLCAweERDQzAsIDB4QTlBMSwgMHg0MzYzLCAweDg2QzYsIDB4MURBRCwgMHgzMzMxLCAweDY2NjIsIDB4Q0NDNCwgMHg4OUE5LCAweDAzNzMsIDB4MDZFNiwgMHgwRENDLCAweDEwMjEsIDB4MjA0MiwgMHg0MDg0LCAweDgxMDgsIDB4MTIzMSwgMHgyNDYyLCAweDQ4QzRdO1xuXHR2YXIgUm9yID0gZnVuY3Rpb24oQnl0ZSkgeyByZXR1cm4gKChCeXRlLzIpIHwgKEJ5dGUqMTI4KSkgJiAweEZGOyB9O1xuXHR2YXIgWG9yUm9yID0gZnVuY3Rpb24oYnl0ZTEsIGJ5dGUyKSB7IHJldHVybiBSb3IoYnl0ZTEgXiBieXRlMik7IH07XG5cdHZhciBDcmVhdGVYb3JLZXlfTWV0aG9kMSA9IGZ1bmN0aW9uKFBhc3N3b3JkKSB7XG5cdFx0dmFyIFhvcktleSA9IEluaXRpYWxDb2RlW1Bhc3N3b3JkLmxlbmd0aCAtIDFdO1xuXHRcdHZhciBDdXJyZW50RWxlbWVudCA9IDB4Njg7XG5cdFx0Zm9yKHZhciBpID0gUGFzc3dvcmQubGVuZ3RoLTE7IGkgPj0gMDsgLS1pKSB7XG5cdFx0XHR2YXIgQ2hhciA9IFBhc3N3b3JkW2ldO1xuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiAhPSA3OyArK2opIHtcblx0XHRcdFx0aWYoQ2hhciAmIDB4NDApIFhvcktleSBePSBYb3JNYXRyaXhbQ3VycmVudEVsZW1lbnRdO1xuXHRcdFx0XHRDaGFyICo9IDI7IC0tQ3VycmVudEVsZW1lbnQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBYb3JLZXk7XG5cdH07XG5cdHJldHVybiBmdW5jdGlvbihwYXNzd29yZCkge1xuXHRcdHZhciBQYXNzd29yZCA9IF9KUzJBTlNJKHBhc3N3b3JkKTtcblx0XHR2YXIgWG9yS2V5ID0gQ3JlYXRlWG9yS2V5X01ldGhvZDEoUGFzc3dvcmQpO1xuXHRcdHZhciBJbmRleCA9IFBhc3N3b3JkLmxlbmd0aDtcblx0XHR2YXIgT2JmdXNjYXRpb25BcnJheSA9IG5ld19yYXdfYnVmKDE2KTtcblx0XHRmb3IodmFyIGkgPSAwOyBpICE9IDE2OyArK2kpIE9iZnVzY2F0aW9uQXJyYXlbaV0gPSAweDAwO1xuXHRcdHZhciBUZW1wLCBQYXNzd29yZExhc3RDaGFyLCBQYWRJbmRleDtcblx0XHRpZigoSW5kZXggJiAxKSA9PT0gMSkge1xuXHRcdFx0VGVtcCA9IFhvcktleSA+PiA4O1xuXHRcdFx0T2JmdXNjYXRpb25BcnJheVtJbmRleF0gPSBYb3JSb3IoUGFkQXJyYXlbMF0sIFRlbXApO1xuXHRcdFx0LS1JbmRleDtcblx0XHRcdFRlbXAgPSBYb3JLZXkgJiAweEZGO1xuXHRcdFx0UGFzc3dvcmRMYXN0Q2hhciA9IFBhc3N3b3JkW1Bhc3N3b3JkLmxlbmd0aCAtIDFdO1xuXHRcdFx0T2JmdXNjYXRpb25BcnJheVtJbmRleF0gPSBYb3JSb3IoUGFzc3dvcmRMYXN0Q2hhciwgVGVtcCk7XG5cdFx0fVxuXHRcdHdoaWxlKEluZGV4ID4gMCkge1xuXHRcdFx0LS1JbmRleDtcblx0XHRcdFRlbXAgPSBYb3JLZXkgPj4gODtcblx0XHRcdE9iZnVzY2F0aW9uQXJyYXlbSW5kZXhdID0gWG9yUm9yKFBhc3N3b3JkW0luZGV4XSwgVGVtcCk7XG5cdFx0XHQtLUluZGV4O1xuXHRcdFx0VGVtcCA9IFhvcktleSAmIDB4RkY7XG5cdFx0XHRPYmZ1c2NhdGlvbkFycmF5W0luZGV4XSA9IFhvclJvcihQYXNzd29yZFtJbmRleF0sIFRlbXApO1xuXHRcdH1cblx0XHRJbmRleCA9IDE1O1xuXHRcdFBhZEluZGV4ID0gMTUgLSBQYXNzd29yZC5sZW5ndGg7XG5cdFx0d2hpbGUoUGFkSW5kZXggPiAwKSB7XG5cdFx0XHRUZW1wID0gWG9yS2V5ID4+IDg7XG5cdFx0XHRPYmZ1c2NhdGlvbkFycmF5W0luZGV4XSA9IFhvclJvcihQYWRBcnJheVtQYWRJbmRleF0sIFRlbXApO1xuXHRcdFx0LS1JbmRleDtcblx0XHRcdC0tUGFkSW5kZXg7XG5cdFx0XHRUZW1wID0gWG9yS2V5ICYgMHhGRjtcblx0XHRcdE9iZnVzY2F0aW9uQXJyYXlbSW5kZXhdID0gWG9yUm9yKFBhc3N3b3JkW0luZGV4XSwgVGVtcCk7XG5cdFx0XHQtLUluZGV4O1xuXHRcdFx0LS1QYWRJbmRleDtcblx0XHR9XG5cdFx0cmV0dXJuIE9iZnVzY2F0aW9uQXJyYXk7XG5cdH07XG59KSgpO1xuXG4vKiBbTVMtT0ZGQ1JZUFRPXSAyLjMuNy4zIEJpbmFyeSBEb2N1bWVudCBYT1IgRGF0YSBUcmFuc2Zvcm1hdGlvbiBNZXRob2QgMSAqL1xudmFyIGNyeXB0b19EZWNyeXB0RGF0YV9NZXRob2QxID0gZnVuY3Rpb24ocGFzc3dvcmQsIERhdGEsIFhvckFycmF5SW5kZXgsIFhvckFycmF5LCBPKSB7XG5cdC8qIElmIFhvckFycmF5IGlzIHNldCwgdXNlIGl0OyBpZiBPIGlzIG5vdCBzZXQsIG1ha2UgY2hhbmdlcyBpbi1wbGFjZSAqL1xuXHRpZighTykgTyA9IERhdGE7XG5cdGlmKCFYb3JBcnJheSkgWG9yQXJyYXkgPSBjcnlwdG9fQ3JlYXRlWG9yQXJyYXlfTWV0aG9kMShwYXNzd29yZCk7XG5cdHZhciBJbmRleCwgVmFsdWU7XG5cdGZvcihJbmRleCA9IDA7IEluZGV4ICE9IERhdGEubGVuZ3RoOyArK0luZGV4KSB7XG5cdFx0VmFsdWUgPSBEYXRhW0luZGV4XTtcblx0XHRWYWx1ZSBePSBYb3JBcnJheVtYb3JBcnJheUluZGV4XTtcblx0XHRWYWx1ZSA9ICgoVmFsdWU+PjUpIHwgKFZhbHVlPDwzKSkgJiAweEZGO1xuXHRcdE9bSW5kZXhdID0gVmFsdWU7XG5cdFx0KytYb3JBcnJheUluZGV4O1xuXHR9XG5cdHJldHVybiBbTywgWG9yQXJyYXlJbmRleCwgWG9yQXJyYXldO1xufTtcblxudmFyIGNyeXB0b19NYWtlWG9yRGVjcnlwdG9yID0gZnVuY3Rpb24ocGFzc3dvcmQpIHtcblx0dmFyIFhvckFycmF5SW5kZXggPSAwLCBYb3JBcnJheSA9IGNyeXB0b19DcmVhdGVYb3JBcnJheV9NZXRob2QxKHBhc3N3b3JkKTtcblx0cmV0dXJuIGZ1bmN0aW9uKERhdGEpIHtcblx0XHR2YXIgTyA9IGNyeXB0b19EZWNyeXB0RGF0YV9NZXRob2QxKFwiXCIsIERhdGEsIFhvckFycmF5SW5kZXgsIFhvckFycmF5KTtcblx0XHRYb3JBcnJheUluZGV4ID0gT1sxXTtcblx0XHRyZXR1cm4gT1swXTtcblx0fTtcbn07XG5cbi8qIDIuNS4zNDMgKi9cbmZ1bmN0aW9uIHBhcnNlX1hPUk9iZnVzY2F0aW9uKGJsb2IsIGxlbmd0aCwgb3B0cywgb3V0KSB7XG5cdHZhciBvID0gKHsga2V5OiBwYXJzZXVpbnQxNihibG9iKSwgdmVyaWZpY2F0aW9uQnl0ZXM6IHBhcnNldWludDE2KGJsb2IpIH0pO1xuXHRpZihvcHRzLnBhc3N3b3JkKSBvLnZlcmlmaWVyID0gY3J5cHRvX0NyZWF0ZVBhc3N3b3JkVmVyaWZpZXJfTWV0aG9kMShvcHRzLnBhc3N3b3JkKTtcblx0b3V0LnZhbGlkID0gby52ZXJpZmljYXRpb25CeXRlcyA9PT0gby52ZXJpZmllcjtcblx0aWYob3V0LnZhbGlkKSBvdXQuaW5zaXR1ID0gY3J5cHRvX01ha2VYb3JEZWNyeXB0b3Iob3B0cy5wYXNzd29yZCk7XG5cdHJldHVybiBvO1xufVxuXG4vKiAyLjQuMTE3ICovXG5mdW5jdGlvbiBwYXJzZV9GaWxlUGFzc0hlYWRlcihibG9iLCBsZW5ndGgsIG9vKSB7XG5cdHZhciBvID0gb28gfHwge307IG8uSW5mbyA9IGJsb2IucmVhZF9zaGlmdCgyKTsgYmxvYi5sIC09IDI7XG5cdGlmKG8uSW5mbyA9PT0gMSkgby5EYXRhID0gcGFyc2VfUkM0SGVhZGVyKGJsb2IsIGxlbmd0aCk7XG5cdGVsc2Ugby5EYXRhID0gcGFyc2VfUkM0Q3J5cHRvSGVhZGVyKGJsb2IsIGxlbmd0aCk7XG5cdHJldHVybiBvO1xufVxuZnVuY3Rpb24gcGFyc2VfRmlsZVBhc3MoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciBvID0gKHsgVHlwZTogb3B0cy5iaWZmID49IDggPyBibG9iLnJlYWRfc2hpZnQoMikgOiAwIH0pOyAvKiB3RW5jcnlwdGlvblR5cGUgKi9cblx0aWYoby5UeXBlKSBwYXJzZV9GaWxlUGFzc0hlYWRlcihibG9iLCBsZW5ndGgtMiwgbyk7XG5cdGVsc2UgcGFyc2VfWE9ST2JmdXNjYXRpb24oYmxvYiwgb3B0cy5iaWZmID49IDggPyBsZW5ndGggOiBsZW5ndGggLSAyLCBvcHRzLCBvKTtcblx0cmV0dXJuIG87XG59XG5cblxudmFyIFJURiA9IChmdW5jdGlvbigpIHtcblx0ZnVuY3Rpb24gcnRmX3RvX3NoZWV0KGQsIG9wdHMpIHtcblx0XHRzd2l0Y2gob3B0cy50eXBlKSB7XG5cdFx0XHRjYXNlICdiYXNlNjQnOiByZXR1cm4gcnRmX3RvX3NoZWV0X3N0cihCYXNlNjQuZGVjb2RlKGQpLCBvcHRzKTtcblx0XHRcdGNhc2UgJ2JpbmFyeSc6IHJldHVybiBydGZfdG9fc2hlZXRfc3RyKGQsIG9wdHMpO1xuXHRcdFx0Y2FzZSAnYnVmZmVyJzogcmV0dXJuIHJ0Zl90b19zaGVldF9zdHIoaGFzX2J1ZiAmJiBCdWZmZXIuaXNCdWZmZXIoZCkgPyBkLnRvU3RyaW5nKCdiaW5hcnknKSA6IGEycyhkKSwgb3B0cyk7XG5cdFx0XHRjYXNlICdhcnJheSc6ICByZXR1cm4gcnRmX3RvX3NoZWV0X3N0cihjYzJzdHIoZCksIG9wdHMpO1xuXHRcdH1cblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgdHlwZSBcIiArIG9wdHMudHlwZSk7XG5cdH1cblxuXHQvKiBUT0RPOiB0aGlzIGlzIGEgc3R1YiAqL1xuXHRmdW5jdGlvbiBydGZfdG9fc2hlZXRfc3RyKHN0ciwgb3B0cykge1xuXHRcdHZhciBvID0gb3B0cyB8fCB7fTtcblx0XHR2YXIgd3MgPSBvLmRlbnNlID8gKFtdKSA6ICh7fSk7XG5cblx0XHR2YXIgcm93cyA9IHN0ci5tYXRjaCgvXFxcXHRyb3dkLio/XFxcXHJvd1xcYi9nKTtcblx0XHRpZighcm93cy5sZW5ndGgpIHRocm93IG5ldyBFcnJvcihcIlJURiBtaXNzaW5nIHRhYmxlXCIpO1xuXHRcdHZhciByYW5nZSA9ICh7czoge2M6MCwgcjowfSwgZToge2M6MCwgcjpyb3dzLmxlbmd0aCAtIDF9fSk7XG5cdFx0cm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvd3RmLCBSKSB7XG5cdFx0XHRpZihBcnJheS5pc0FycmF5KHdzKSkgd3NbUl0gPSBbXTtcblx0XHRcdHZhciBydGZyZSA9IC9cXFxcXFx3K1xcYi9nO1xuXHRcdFx0dmFyIGxhc3RfaW5kZXggPSAwO1xuXHRcdFx0dmFyIHJlcztcblx0XHRcdHZhciBDID0gLTE7XG5cdFx0XHR3aGlsZSgocmVzID0gcnRmcmUuZXhlYyhyb3d0ZikpKSB7XG5cdFx0XHRcdHN3aXRjaChyZXNbMF0pIHtcblx0XHRcdFx0XHRjYXNlIFwiXFxcXGNlbGxcIjpcblx0XHRcdFx0XHRcdHZhciBkYXRhID0gcm93dGYuc2xpY2UobGFzdF9pbmRleCwgcnRmcmUubGFzdEluZGV4IC0gcmVzWzBdLmxlbmd0aCk7XG5cdFx0XHRcdFx0XHRpZihkYXRhWzBdID09IFwiIFwiKSBkYXRhID0gZGF0YS5zbGljZSgxKTtcblx0XHRcdFx0XHRcdCsrQztcblx0XHRcdFx0XHRcdGlmKGRhdGEubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IHZhbHVlIHBhcnNpbmcsIGluY2x1ZGluZyBjb2RlcGFnZSBhZGp1c3RtZW50c1xuXHRcdFx0XHRcdFx0XHR2YXIgY2VsbCA9IHt2OiBkYXRhLCB0Olwic1wifTtcblx0XHRcdFx0XHRcdFx0aWYoQXJyYXkuaXNBcnJheSh3cykpIHdzW1JdW0NdID0gY2VsbDtcblx0XHRcdFx0XHRcdFx0ZWxzZSB3c1tlbmNvZGVfY2VsbCh7cjpSLCBjOkN9KV0gPSBjZWxsO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGFzdF9pbmRleCA9IHJ0ZnJlLmxhc3RJbmRleDtcblx0XHRcdH1cblx0XHRcdGlmKEMgPiByYW5nZS5lLmMpIHJhbmdlLmUuYyA9IEM7XG5cdFx0fSk7XG5cdFx0d3NbJyFyZWYnXSA9IGVuY29kZV9yYW5nZShyYW5nZSk7XG5cdFx0cmV0dXJuIHdzO1xuXHR9XG5cblx0ZnVuY3Rpb24gcnRmX3RvX3dvcmtib29rKGQsIG9wdHMpIHsgcmV0dXJuIHNoZWV0X3RvX3dvcmtib29rKHJ0Zl90b19zaGVldChkLCBvcHRzKSwgb3B0cyk7IH1cblxuXHQvKiBUT0RPOiB0aGlzIGlzIGEgc3R1YiAqL1xuXHRmdW5jdGlvbiBzaGVldF90b19ydGYod3MpIHtcblx0XHR2YXIgbyA9IFtcIntcXFxccnRmMVxcXFxhbnNpXCJdO1xuXHRcdHZhciByID0gc2FmZV9kZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSksIGNlbGw7XG5cdFx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheSh3cyk7XG5cdFx0Zm9yKHZhciBSID0gci5zLnI7IFIgPD0gci5lLnI7ICsrUikge1xuXHRcdFx0by5wdXNoKFwiXFxcXHRyb3dkXFxcXHRyYXV0b2ZpdDFcIik7XG5cdFx0XHRmb3IodmFyIEMgPSByLnMuYzsgQyA8PSByLmUuYzsgKytDKSBvLnB1c2goXCJcXFxcY2VsbHhcIiArIChDKzEpKTtcblx0XHRcdG8ucHVzaChcIlxcXFxwYXJkXFxcXGludGJsXCIpO1xuXHRcdFx0Zm9yKEMgPSByLnMuYzsgQyA8PSByLmUuYzsgKytDKSB7XG5cdFx0XHRcdHZhciBjb29yZCA9IGVuY29kZV9jZWxsKHtyOlIsYzpDfSk7XG5cdFx0XHRcdGNlbGwgPSBkZW5zZSA/ICh3c1tSXXx8W10pW0NdOiB3c1tjb29yZF07XG5cdFx0XHRcdGlmKCFjZWxsIHx8IGNlbGwudiA9PSBudWxsICYmICghY2VsbC5mIHx8IGNlbGwuRikpIGNvbnRpbnVlO1xuXHRcdFx0XHRvLnB1c2goXCIgXCIgKyAoY2VsbC53IHx8IChmb3JtYXRfY2VsbChjZWxsKSwgY2VsbC53KSkpO1xuXHRcdFx0XHRvLnB1c2goXCJcXFxcY2VsbFwiKTtcblx0XHRcdH1cblx0XHRcdG8ucHVzaChcIlxcXFxwYXJkXFxcXGludGJsXFxcXHJvd1wiKTtcblx0XHR9XG5cdFx0cmV0dXJuIG8uam9pbihcIlwiKSArIFwifVwiO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHR0b193b3JrYm9vazogcnRmX3RvX3dvcmtib29rLFxuXHRcdHRvX3NoZWV0OiBydGZfdG9fc2hlZXQsXG5cdFx0ZnJvbV9zaGVldDogc2hlZXRfdG9fcnRmXG5cdH07XG59KSgpO1xuZnVuY3Rpb24gaGV4MlJHQihoKSB7XG5cdHZhciBvID0gaC5zbGljZShoWzBdPT09XCIjXCI/MTowKS5zbGljZSgwLDYpO1xuXHRyZXR1cm4gW3BhcnNlSW50KG8uc2xpY2UoMCwyKSwxNikscGFyc2VJbnQoby5zbGljZSgyLDQpLDE2KSxwYXJzZUludChvLnNsaWNlKDQsNiksMTYpXTtcbn1cbmZ1bmN0aW9uIHJnYjJIZXgocmdiKSB7XG5cdGZvcih2YXIgaT0wLG89MTsgaSE9MzsgKytpKSBvID0gbyoyNTYgKyAocmdiW2ldPjI1NT8yNTU6cmdiW2ldPDA/MDpyZ2JbaV0pO1xuXHRyZXR1cm4gby50b1N0cmluZygxNikudG9VcHBlckNhc2UoKS5zbGljZSgxKTtcbn1cblxuZnVuY3Rpb24gcmdiMkhTTChyZ2IpIHtcblx0dmFyIFIgPSByZ2JbMF0vMjU1LCBHID0gcmdiWzFdLzI1NSwgQj1yZ2JbMl0vMjU1O1xuXHR2YXIgTSA9IE1hdGgubWF4KFIsIEcsIEIpLCBtID0gTWF0aC5taW4oUiwgRywgQiksIEMgPSBNIC0gbTtcblx0aWYoQyA9PT0gMCkgcmV0dXJuIFswLCAwLCBSXTtcblxuXHR2YXIgSDYgPSAwLCBTID0gMCwgTDIgPSAoTSArIG0pO1xuXHRTID0gQyAvIChMMiA+IDEgPyAyIC0gTDIgOiBMMik7XG5cdHN3aXRjaChNKXtcblx0XHRjYXNlIFI6IEg2ID0gKChHIC0gQikgLyBDICsgNiklNjsgYnJlYWs7XG5cdFx0Y2FzZSBHOiBINiA9ICgoQiAtIFIpIC8gQyArIDIpOyBicmVhaztcblx0XHRjYXNlIEI6IEg2ID0gKChSIC0gRykgLyBDICsgNCk7IGJyZWFrO1xuXHR9XG5cdHJldHVybiBbSDYgLyA2LCBTLCBMMiAvIDJdO1xufVxuXG5mdW5jdGlvbiBoc2wyUkdCKGhzbCl7XG5cdHZhciBIID0gaHNsWzBdLCBTID0gaHNsWzFdLCBMID0gaHNsWzJdO1xuXHR2YXIgQyA9IFMgKiAyICogKEwgPCAwLjUgPyBMIDogMSAtIEwpLCBtID0gTCAtIEMvMjtcblx0dmFyIHJnYiA9IFttLG0sbV0sIGg2ID0gNipIO1xuXG5cdHZhciBYO1xuXHRpZihTICE9PSAwKSBzd2l0Y2goaDZ8MCkge1xuXHRcdGNhc2UgMDogY2FzZSA2OiBYID0gQyAqIGg2OyByZ2JbMF0gKz0gQzsgcmdiWzFdICs9IFg7IGJyZWFrO1xuXHRcdGNhc2UgMTogWCA9IEMgKiAoMiAtIGg2KTsgICByZ2JbMF0gKz0gWDsgcmdiWzFdICs9IEM7IGJyZWFrO1xuXHRcdGNhc2UgMjogWCA9IEMgKiAoaDYgLSAyKTsgICByZ2JbMV0gKz0gQzsgcmdiWzJdICs9IFg7IGJyZWFrO1xuXHRcdGNhc2UgMzogWCA9IEMgKiAoNCAtIGg2KTsgICByZ2JbMV0gKz0gWDsgcmdiWzJdICs9IEM7IGJyZWFrO1xuXHRcdGNhc2UgNDogWCA9IEMgKiAoaDYgLSA0KTsgICByZ2JbMl0gKz0gQzsgcmdiWzBdICs9IFg7IGJyZWFrO1xuXHRcdGNhc2UgNTogWCA9IEMgKiAoNiAtIGg2KTsgICByZ2JbMl0gKz0gWDsgcmdiWzBdICs9IEM7IGJyZWFrO1xuXHR9XG5cdGZvcih2YXIgaSA9IDA7IGkgIT0gMzsgKytpKSByZ2JbaV0gPSBNYXRoLnJvdW5kKHJnYltpXSoyNTUpO1xuXHRyZXR1cm4gcmdiO1xufVxuXG4vKiAxOC44LjMgYmdDb2xvciB0aW50IGFsZ29yaXRobSAqL1xuZnVuY3Rpb24gcmdiX3RpbnQoaGV4LCB0aW50KSB7XG5cdGlmKHRpbnQgPT09IDApIHJldHVybiBoZXg7XG5cdHZhciBoc2wgPSByZ2IySFNMKGhleDJSR0IoaGV4KSk7XG5cdGlmICh0aW50IDwgMCkgaHNsWzJdID0gaHNsWzJdICogKDEgKyB0aW50KTtcblx0ZWxzZSBoc2xbMl0gPSAxIC0gKDEgLSBoc2xbMl0pICogKDEgLSB0aW50KTtcblx0cmV0dXJuIHJnYjJIZXgoaHNsMlJHQihoc2wpKTtcbn1cblxuLyogMTguMy4xLjEzIHdpZHRoIGNhbGN1bGF0aW9ucyAqL1xuLyogW01TLU9JMjk1MDBdIDIuMS41OTUgQ29sdW1uIFdpZHRoICYgRm9ybWF0dGluZyAqL1xudmFyIERFRl9NRFcgPSA2LCBNQVhfTURXID0gMTUsIE1JTl9NRFcgPSAxLCBNRFcgPSBERUZfTURXO1xuZnVuY3Rpb24gd2lkdGgycHgod2lkdGgpIHsgcmV0dXJuIE1hdGguZmxvb3IoKCB3aWR0aCArIChNYXRoLnJvdW5kKDEyOC9NRFcpKS8yNTYgKSogTURXICk7IH1cbmZ1bmN0aW9uIHB4MmNoYXIocHgpIHsgcmV0dXJuIChNYXRoLmZsb29yKChweCAtIDUpL01EVyAqIDEwMCArIDAuNSkpLzEwMDsgfVxuZnVuY3Rpb24gY2hhcjJ3aWR0aChjaHIpIHsgcmV0dXJuIChNYXRoLnJvdW5kKChjaHIgKiBNRFcgKyA1KS9NRFcqMjU2KSkvMjU2OyB9XG4vL2Z1bmN0aW9uIHB4MmNoYXJfKHB4KSB7IHJldHVybiAoKChweCAtIDUpL01EVyAqIDEwMCArIDAuNSkpLzEwMDsgfVxuLy9mdW5jdGlvbiBjaGFyMndpZHRoXyhjaHIpIHsgcmV0dXJuICgoKGNociAqIE1EVyArIDUpL01EVyoyNTYpKS8yNTY7IH1cbmZ1bmN0aW9uIGN5Y2xlX3dpZHRoKGNvbGx3KSB7IHJldHVybiBjaGFyMndpZHRoKHB4MmNoYXIod2lkdGgycHgoY29sbHcpKSk7IH1cbi8qIFhMU1gvWExTQi9YTFMgc3BlY2lmeSB3aWR0aCBpbiB1bml0cyBvZiBNRFcgKi9cbmZ1bmN0aW9uIGZpbmRfbWR3X2NvbHcoY29sbHcpIHtcblx0dmFyIGRlbHRhID0gTWF0aC5hYnMoY29sbHcgLSBjeWNsZV93aWR0aChjb2xsdykpLCBfTURXID0gTURXO1xuXHRpZihkZWx0YSA+IDAuMDA1KSBmb3IoTURXPU1JTl9NRFc7IE1EVzxNQVhfTURXOyArK01EVykgaWYoTWF0aC5hYnMoY29sbHcgLSBjeWNsZV93aWR0aChjb2xsdykpIDw9IGRlbHRhKSB7IGRlbHRhID0gTWF0aC5hYnMoY29sbHcgLSBjeWNsZV93aWR0aChjb2xsdykpOyBfTURXID0gTURXOyB9XG5cdE1EVyA9IF9NRFc7XG59XG4vKiBYTE1MIHNwZWNpZmllcyB3aWR0aCBpbiB0ZXJtcyBvZiBwaXhlbHMgKi9cbi8qZnVuY3Rpb24gZmluZF9tZHdfd3B4KHdweCkge1xuXHR2YXIgZGVsdGEgPSBJbmZpbml0eSwgZ3Vlc3MgPSAwLCBfTURXID0gTUlOX01EVztcblx0Zm9yKE1EVz1NSU5fTURXOyBNRFc8TUFYX01EVzsgKytNRFcpIHtcblx0XHRndWVzcyA9IGNoYXIyd2lkdGhfKHB4MmNoYXJfKHdweCkpKjI1Njtcblx0XHRndWVzcyA9IChndWVzcykgJSAxO1xuXHRcdGlmKGd1ZXNzID4gMC41KSBndWVzcy0tO1xuXHRcdGlmKE1hdGguYWJzKGd1ZXNzKSA8IGRlbHRhKSB7IGRlbHRhID0gTWF0aC5hYnMoZ3Vlc3MpOyBfTURXID0gTURXOyB9XG5cdH1cblx0TURXID0gX01EVztcbn0qL1xuXG5mdW5jdGlvbiBwcm9jZXNzX2NvbChjb2xsKSB7XG5cdGlmKGNvbGwud2lkdGgpIHtcblx0XHRjb2xsLndweCA9IHdpZHRoMnB4KGNvbGwud2lkdGgpO1xuXHRcdGNvbGwud2NoID0gcHgyY2hhcihjb2xsLndweCk7XG5cdFx0Y29sbC5NRFcgPSBNRFc7XG5cdH0gZWxzZSBpZihjb2xsLndweCkge1xuXHRcdGNvbGwud2NoID0gcHgyY2hhcihjb2xsLndweCk7XG5cdFx0Y29sbC53aWR0aCA9IGNoYXIyd2lkdGgoY29sbC53Y2gpO1xuXHRcdGNvbGwuTURXID0gTURXO1xuXHR9IGVsc2UgaWYodHlwZW9mIGNvbGwud2NoID09ICdudW1iZXInKSB7XG5cdFx0Y29sbC53aWR0aCA9IGNoYXIyd2lkdGgoY29sbC53Y2gpO1xuXHRcdGNvbGwud3B4ID0gd2lkdGgycHgoY29sbC53aWR0aCk7XG5cdFx0Y29sbC5NRFcgPSBNRFc7XG5cdH1cblx0aWYoY29sbC5jdXN0b21XaWR0aCkgZGVsZXRlIGNvbGwuY3VzdG9tV2lkdGg7XG59XG5cbnZhciBERUZfUFBJID0gOTYsIFBQSSA9IERFRl9QUEk7XG5mdW5jdGlvbiBweDJwdChweCkgeyByZXR1cm4gcHggKiA5NiAvIFBQSTsgfVxuZnVuY3Rpb24gcHQycHgocHQpIHsgcmV0dXJuIHB0ICogUFBJIC8gOTY7IH1cblxuLyogW01TLUVYU1BYTUwzXSAyLjQuNTQgU1RfZW5tUGF0dGVybiAqL1xudmFyIFhMTUxQYXR0ZXJuVHlwZU1hcCA9IHtcblx0XCJOb25lXCI6IFwibm9uZVwiLFxuXHRcIlNvbGlkXCI6IFwic29saWRcIixcblx0XCJHcmF5NTBcIjogXCJtZWRpdW1HcmF5XCIsXG5cdFwiR3JheTc1XCI6IFwiZGFya0dyYXlcIixcblx0XCJHcmF5MjVcIjogXCJsaWdodEdyYXlcIixcblx0XCJIb3J6U3RyaXBlXCI6IFwiZGFya0hvcml6b250YWxcIixcblx0XCJWZXJ0U3RyaXBlXCI6IFwiZGFya1ZlcnRpY2FsXCIsXG5cdFwiUmV2ZXJzZURpYWdTdHJpcGVcIjogXCJkYXJrRG93blwiLFxuXHRcIkRpYWdTdHJpcGVcIjogXCJkYXJrVXBcIixcblx0XCJEaWFnQ3Jvc3NcIjogXCJkYXJrR3JpZFwiLFxuXHRcIlRoaWNrRGlhZ0Nyb3NzXCI6IFwiZGFya1RyZWxsaXNcIixcblx0XCJUaGluSG9yelN0cmlwZVwiOiBcImxpZ2h0SG9yaXpvbnRhbFwiLFxuXHRcIlRoaW5WZXJ0U3RyaXBlXCI6IFwibGlnaHRWZXJ0aWNhbFwiLFxuXHRcIlRoaW5SZXZlcnNlRGlhZ1N0cmlwZVwiOiBcImxpZ2h0RG93blwiLFxuXHRcIlRoaW5Ib3J6Q3Jvc3NcIjogXCJsaWdodEdyaWRcIlxufTtcblxuLyogMTguOC41IGJvcmRlcnMgQ1RfQm9yZGVycyAqL1xuZnVuY3Rpb24gcGFyc2VfYm9yZGVycyh0LCBzdHlsZXMsIHRoZW1lcywgb3B0cykge1xuXHRzdHlsZXMuQm9yZGVycyA9IFtdO1xuXHR2YXIgYm9yZGVyID0ge307XG5cdHZhciBwYXNzID0gZmFsc2U7XG5cdCh0WzBdLm1hdGNoKHRhZ3JlZ2V4KXx8W10pLmZvckVhY2goZnVuY3Rpb24oeCkge1xuXHRcdHZhciB5ID0gcGFyc2V4bWx0YWcoeCk7XG5cdFx0c3dpdGNoKHN0cmlwX25zKHlbMF0pKSB7XG5cdFx0XHRjYXNlICc8Ym9yZGVycyc6IGNhc2UgJzxib3JkZXJzPic6IGNhc2UgJzwvYm9yZGVycz4nOiBicmVhaztcblxuXHRcdFx0LyogMTguOC40IGJvcmRlciBDVF9Cb3JkZXIgKi9cblx0XHRcdGNhc2UgJzxib3JkZXInOiBjYXNlICc8Ym9yZGVyPic6IGNhc2UgJzxib3JkZXIvPic6XG5cdFx0XHRcdGJvcmRlciA9IHt9O1xuXHRcdFx0XHRpZih5LmRpYWdvbmFsVXApIGJvcmRlci5kaWFnb25hbFVwID0gcGFyc2V4bWxib29sKHkuZGlhZ29uYWxVcCk7XG5cdFx0XHRcdGlmKHkuZGlhZ29uYWxEb3duKSBib3JkZXIuZGlhZ29uYWxEb3duID0gcGFyc2V4bWxib29sKHkuZGlhZ29uYWxEb3duKTtcblx0XHRcdFx0c3R5bGVzLkJvcmRlcnMucHVzaChib3JkZXIpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJzwvYm9yZGVyPic6IGJyZWFrO1xuXG5cdFx0XHQvKiBub3RlOiBub3QgaW4gc3BlYywgYXBwZWFycyB0byBiZSBDVF9Cb3JkZXJQciAqL1xuXHRcdFx0Y2FzZSAnPGxlZnQvPic6IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPGxlZnQnOiBjYXNlICc8bGVmdD4nOiBicmVhaztcblx0XHRcdGNhc2UgJzwvbGVmdD4nOiBicmVhaztcblxuXHRcdFx0Lyogbm90ZTogbm90IGluIHNwZWMsIGFwcGVhcnMgdG8gYmUgQ1RfQm9yZGVyUHIgKi9cblx0XHRcdGNhc2UgJzxyaWdodC8+JzogYnJlYWs7XG5cdFx0XHRjYXNlICc8cmlnaHQnOiBjYXNlICc8cmlnaHQ+JzogYnJlYWs7XG5cdFx0XHRjYXNlICc8L3JpZ2h0Pic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC44LjQzIHRvcCBDVF9Cb3JkZXJQciAqL1xuXHRcdFx0Y2FzZSAnPHRvcC8+JzogYnJlYWs7XG5cdFx0XHRjYXNlICc8dG9wJzogY2FzZSAnPHRvcD4nOiBicmVhaztcblx0XHRcdGNhc2UgJzwvdG9wPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC44LjYgYm90dG9tIENUX0JvcmRlclByICovXG5cdFx0XHRjYXNlICc8Ym90dG9tLz4nOiBicmVhaztcblx0XHRcdGNhc2UgJzxib3R0b20nOiBjYXNlICc8Ym90dG9tPic6IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9ib3R0b20+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjguMTMgZGlhZ29uYWwgQ1RfQm9yZGVyUHIgKi9cblx0XHRcdGNhc2UgJzxkaWFnb25hbCc6IGNhc2UgJzxkaWFnb25hbD4nOiBjYXNlICc8ZGlhZ29uYWwvPic6IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9kaWFnb25hbD4nOiBicmVhaztcblxuXHRcdFx0LyogMTguOC4yNSBob3Jpem9udGFsIENUX0JvcmRlclByICovXG5cdFx0XHRjYXNlICc8aG9yaXpvbnRhbCc6IGNhc2UgJzxob3Jpem9udGFsPic6IGNhc2UgJzxob3Jpem9udGFsLz4nOiBicmVhaztcblx0XHRcdGNhc2UgJzwvaG9yaXpvbnRhbD4nOiBicmVhaztcblxuXHRcdFx0LyogMTguOC40NCB2ZXJ0aWNhbCBDVF9Cb3JkZXJQciAqL1xuXHRcdFx0Y2FzZSAnPHZlcnRpY2FsJzogY2FzZSAnPHZlcnRpY2FsPic6IGNhc2UgJzx2ZXJ0aWNhbC8+JzogYnJlYWs7XG5cdFx0XHRjYXNlICc8L3ZlcnRpY2FsPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC44LjM3IHN0YXJ0IENUX0JvcmRlclByICovXG5cdFx0XHRjYXNlICc8c3RhcnQnOiBjYXNlICc8c3RhcnQ+JzogY2FzZSAnPHN0YXJ0Lz4nOiBicmVhaztcblx0XHRcdGNhc2UgJzwvc3RhcnQ+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjguMTYgZW5kIENUX0JvcmRlclByICovXG5cdFx0XHRjYXNlICc8ZW5kJzogY2FzZSAnPGVuZD4nOiBjYXNlICc8ZW5kLz4nOiBicmVhaztcblx0XHRcdGNhc2UgJzwvZW5kPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC44Lj8gY29sb3IgQ1RfQ29sb3IgKi9cblx0XHRcdGNhc2UgJzxjb2xvcic6IGNhc2UgJzxjb2xvcj4nOlxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJzxjb2xvci8+JzogY2FzZSAnPC9jb2xvcj4nOiBicmVhaztcblxuXHRcdFx0LyogMTguMi4xMCBleHRMc3QgQ1RfRXh0ZW5zaW9uTGlzdCA/ICovXG5cdFx0XHRjYXNlICc8ZXh0THN0JzogY2FzZSAnPGV4dExzdD4nOiBjYXNlICc8L2V4dExzdD4nOiBicmVhaztcblx0XHRcdGNhc2UgJzxleHQnOiBwYXNzID0gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8L2V4dD4nOiBwYXNzID0gZmFsc2U7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogaWYob3B0cyAmJiBvcHRzLldURikge1xuXHRcdFx0XHRpZighcGFzcykgdGhyb3cgbmV3IEVycm9yKCd1bnJlY29nbml6ZWQgJyArIHlbMF0gKyAnIGluIGJvcmRlcnMnKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG4vKiAxOC44LjIxIGZpbGxzIENUX0ZpbGxzICovXG5mdW5jdGlvbiBwYXJzZV9maWxscyh0LCBzdHlsZXMsIHRoZW1lcywgb3B0cykge1xuXHRzdHlsZXMuRmlsbHMgPSBbXTtcblx0dmFyIGZpbGwgPSB7fTtcblx0dmFyIHBhc3MgPSBmYWxzZTtcblx0KHRbMF0ubWF0Y2godGFncmVnZXgpfHxbXSkuZm9yRWFjaChmdW5jdGlvbih4KSB7XG5cdFx0dmFyIHkgPSBwYXJzZXhtbHRhZyh4KTtcblx0XHRzd2l0Y2goc3RyaXBfbnMoeVswXSkpIHtcblx0XHRcdGNhc2UgJzxmaWxscyc6IGNhc2UgJzxmaWxscz4nOiBjYXNlICc8L2ZpbGxzPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC44LjIwIGZpbGwgQ1RfRmlsbCAqL1xuXHRcdFx0Y2FzZSAnPGZpbGw+JzogY2FzZSAnPGZpbGwnOiBjYXNlICc8ZmlsbC8+Jzpcblx0XHRcdFx0ZmlsbCA9IHt9OyBzdHlsZXMuRmlsbHMucHVzaChmaWxsKTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8L2ZpbGw+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjguMjQgZ3JhZGllbnRGaWxsIENUX0dyYWRpZW50RmlsbCAqL1xuXHRcdFx0Y2FzZSAnPGdyYWRpZW50RmlsbD4nOiBicmVhaztcblx0XHRcdGNhc2UgJzxncmFkaWVudEZpbGwnOlxuXHRcdFx0Y2FzZSAnPC9ncmFkaWVudEZpbGw+Jzogc3R5bGVzLkZpbGxzLnB1c2goZmlsbCk7IGZpbGwgPSB7fTsgYnJlYWs7XG5cblx0XHRcdC8qIDE4LjguMzIgcGF0dGVybkZpbGwgQ1RfUGF0dGVybkZpbGwgKi9cblx0XHRcdGNhc2UgJzxwYXR0ZXJuRmlsbCc6IGNhc2UgJzxwYXR0ZXJuRmlsbD4nOlxuXHRcdFx0XHRpZih5LnBhdHRlcm5UeXBlKSBmaWxsLnBhdHRlcm5UeXBlID0geS5wYXR0ZXJuVHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICc8cGF0dGVybkZpbGwvPic6IGNhc2UgJzwvcGF0dGVybkZpbGw+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjguMyBiZ0NvbG9yIENUX0NvbG9yICovXG5cdFx0XHRjYXNlICc8YmdDb2xvcic6XG5cdFx0XHRcdGlmKCFmaWxsLmJnQ29sb3IpIGZpbGwuYmdDb2xvciA9IHt9O1xuXHRcdFx0XHRpZih5LmluZGV4ZWQpIGZpbGwuYmdDb2xvci5pbmRleGVkID0gcGFyc2VJbnQoeS5pbmRleGVkLCAxMCk7XG5cdFx0XHRcdGlmKHkudGhlbWUpIGZpbGwuYmdDb2xvci50aGVtZSA9IHBhcnNlSW50KHkudGhlbWUsIDEwKTtcblx0XHRcdFx0aWYoeS50aW50KSBmaWxsLmJnQ29sb3IudGludCA9IHBhcnNlRmxvYXQoeS50aW50KTtcblx0XHRcdFx0LyogRXhjZWwgdXNlcyBBUkdCIHN0cmluZ3MgKi9cblx0XHRcdFx0aWYoeS5yZ2IpIGZpbGwuYmdDb2xvci5yZ2IgPSB5LnJnYi5zbGljZSgtNik7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnPGJnQ29sb3IvPic6IGNhc2UgJzwvYmdDb2xvcj4nOiBicmVhaztcblxuXHRcdFx0LyogMTguOC4xOSBmZ0NvbG9yIENUX0NvbG9yICovXG5cdFx0XHRjYXNlICc8ZmdDb2xvcic6XG5cdFx0XHRcdGlmKCFmaWxsLmZnQ29sb3IpIGZpbGwuZmdDb2xvciA9IHt9O1xuXHRcdFx0XHRpZih5LnRoZW1lKSBmaWxsLmZnQ29sb3IudGhlbWUgPSBwYXJzZUludCh5LnRoZW1lLCAxMCk7XG5cdFx0XHRcdGlmKHkudGludCkgZmlsbC5mZ0NvbG9yLnRpbnQgPSBwYXJzZUZsb2F0KHkudGludCk7XG5cdFx0XHRcdC8qIEV4Y2VsIHVzZXMgQVJHQiBzdHJpbmdzICovXG5cdFx0XHRcdGlmKHkucmdiICE9IG51bGwpIGZpbGwuZmdDb2xvci5yZ2IgPSB5LnJnYi5zbGljZSgtNik7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnPGZnQ29sb3IvPic6IGNhc2UgJzwvZmdDb2xvcj4nOiBicmVhaztcblxuXHRcdFx0LyogMTguOC4zOCBzdG9wIENUX0dyYWRpZW50U3RvcCAqL1xuXHRcdFx0Y2FzZSAnPHN0b3AnOiBjYXNlICc8c3RvcC8+JzogYnJlYWs7XG5cdFx0XHRjYXNlICc8L3N0b3A+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjguPyBjb2xvciBDVF9Db2xvciAqL1xuXHRcdFx0Y2FzZSAnPGNvbG9yJzogY2FzZSAnPGNvbG9yLz4nOiBicmVhaztcblx0XHRcdGNhc2UgJzwvY29sb3I+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjIuMTAgZXh0THN0IENUX0V4dGVuc2lvbkxpc3QgPyAqL1xuXHRcdFx0Y2FzZSAnPGV4dExzdCc6IGNhc2UgJzxleHRMc3Q+JzogY2FzZSAnPC9leHRMc3Q+JzogYnJlYWs7XG5cdFx0XHRjYXNlICc8ZXh0JzogcGFzcyA9IHRydWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9leHQ+JzogcGFzcyA9IGZhbHNlOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IGlmKG9wdHMgJiYgb3B0cy5XVEYpIHtcblx0XHRcdFx0aWYoIXBhc3MpIHRocm93IG5ldyBFcnJvcigndW5yZWNvZ25pemVkICcgKyB5WzBdICsgJyBpbiBmaWxscycpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbi8qIDE4LjguMjMgZm9udHMgQ1RfRm9udHMgKi9cbmZ1bmN0aW9uIHBhcnNlX2ZvbnRzKHQsIHN0eWxlcywgdGhlbWVzLCBvcHRzKSB7XG5cdHN0eWxlcy5Gb250cyA9IFtdO1xuXHR2YXIgZm9udCA9IHt9O1xuXHR2YXIgcGFzcyA9IGZhbHNlO1xuXHQodFswXS5tYXRjaCh0YWdyZWdleCl8fFtdKS5mb3JFYWNoKGZ1bmN0aW9uKHgpIHtcblx0XHR2YXIgeSA9IHBhcnNleG1sdGFnKHgpO1xuXHRcdHN3aXRjaChzdHJpcF9ucyh5WzBdKSkge1xuXHRcdFx0Y2FzZSAnPGZvbnRzJzogY2FzZSAnPGZvbnRzPic6IGNhc2UgJzwvZm9udHM+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjguMjIgZm9udCBDVF9Gb250ICovXG5cdFx0XHRjYXNlICc8Zm9udCc6IGNhc2UgJzxmb250Pic6IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9mb250Pic6IGNhc2UgJzxmb250Lz4nOlxuXHRcdFx0XHRzdHlsZXMuRm9udHMucHVzaChmb250KTtcblx0XHRcdFx0Zm9udCA9IHt9O1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0LyogMTguOC4yOSBuYW1lIENUX0ZvbnROYW1lICovXG5cdFx0XHRjYXNlICc8bmFtZSc6IGlmKHkudmFsKSBmb250Lm5hbWUgPSB1dGY4cmVhZCh5LnZhbCk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPG5hbWUvPic6IGNhc2UgJzwvbmFtZT4nOiBicmVhaztcblxuXHRcdFx0LyogMTguOC4yICBiIENUX0Jvb2xlYW5Qcm9wZXJ0eSAqL1xuXHRcdFx0Y2FzZSAnPGInOiBmb250LmJvbGQgPSB5LnZhbCA/IHBhcnNleG1sYm9vbCh5LnZhbCkgOiAxOyBicmVhaztcblx0XHRcdGNhc2UgJzxiLz4nOiBmb250LmJvbGQgPSAxOyBicmVhaztcblxuXHRcdFx0LyogMTguOC4yNiBpIENUX0Jvb2xlYW5Qcm9wZXJ0eSAqL1xuXHRcdFx0Y2FzZSAnPGknOiBmb250Lml0YWxpYyA9IHkudmFsID8gcGFyc2V4bWxib29sKHkudmFsKSA6IDE7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPGkvPic6IGZvbnQuaXRhbGljID0gMTsgYnJlYWs7XG5cblx0XHRcdC8qIDE4LjQuMTMgdSBDVF9VbmRlcmxpbmVQcm9wZXJ0eSAqL1xuXHRcdFx0Y2FzZSAnPHUnOlxuXHRcdFx0XHRzd2l0Y2goeS52YWwpIHtcblx0XHRcdFx0XHRjYXNlIFwibm9uZVwiOiBmb250LnVuZGVybGluZSA9IDB4MDA7IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgXCJzaW5nbGVcIjogZm9udC51bmRlcmxpbmUgPSAweDAxOyBicmVhaztcblx0XHRcdFx0XHRjYXNlIFwiZG91YmxlXCI6IGZvbnQudW5kZXJsaW5lID0gMHgwMjsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBcInNpbmdsZUFjY291bnRpbmdcIjogZm9udC51bmRlcmxpbmUgPSAweDIxOyBicmVhaztcblx0XHRcdFx0XHRjYXNlIFwiZG91YmxlQWNjb3VudGluZ1wiOiBmb250LnVuZGVybGluZSA9IDB4MjI7IGJyZWFrO1xuXHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPHUvPic6IGZvbnQudW5kZXJsaW5lID0gMTsgYnJlYWs7XG5cblx0XHRcdC8qIDE4LjQuMTAgc3RyaWtlIENUX0Jvb2xlYW5Qcm9wZXJ0eSAqL1xuXHRcdFx0Y2FzZSAnPHN0cmlrZSc6IGZvbnQuc3RyaWtlID0geS52YWwgPyBwYXJzZXhtbGJvb2woeS52YWwpIDogMTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8c3RyaWtlLz4nOiBmb250LnN0cmlrZSA9IDE7IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC40LjIgIG91dGxpbmUgQ1RfQm9vbGVhblByb3BlcnR5ICovXG5cdFx0XHRjYXNlICc8b3V0bGluZSc6IGZvbnQub3V0bGluZSA9IHkudmFsID8gcGFyc2V4bWxib29sKHkudmFsKSA6IDE7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPG91dGxpbmUvPic6IGZvbnQub3V0bGluZSA9IDE7IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC44LjM2IHNoYWRvdyBDVF9Cb29sZWFuUHJvcGVydHkgKi9cblx0XHRcdGNhc2UgJzxzaGFkb3cnOiBmb250LnNoYWRvdyA9IHkudmFsID8gcGFyc2V4bWxib29sKHkudmFsKSA6IDE7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPHNoYWRvdy8+JzogZm9udC5zaGFkb3cgPSAxOyBicmVhaztcblxuXHRcdFx0LyogMTguOC4xMiBjb25kZW5zZSBDVF9Cb29sZWFuUHJvcGVydHkgKi9cblx0XHRcdGNhc2UgJzxjb25kZW5zZSc6IGZvbnQuY29uZGVuc2UgPSB5LnZhbCA/IHBhcnNleG1sYm9vbCh5LnZhbCkgOiAxOyBicmVhaztcblx0XHRcdGNhc2UgJzxjb25kZW5zZS8+JzogZm9udC5jb25kZW5zZSA9IDE7IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC44LjE3IGV4dGVuZCBDVF9Cb29sZWFuUHJvcGVydHkgKi9cblx0XHRcdGNhc2UgJzxleHRlbmQnOiBmb250LmV4dGVuZCA9IHkudmFsID8gcGFyc2V4bWxib29sKHkudmFsKSA6IDE7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPGV4dGVuZC8+JzogZm9udC5leHRlbmQgPSAxOyBicmVhaztcblxuXHRcdFx0LyogMTguNC4xMSBzeiBDVF9Gb250U2l6ZSAqL1xuXHRcdFx0Y2FzZSAnPHN6JzogaWYoeS52YWwpIGZvbnQuc3ogPSAreS52YWw7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPHN6Lz4nOiBjYXNlICc8L3N6Pic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC40LjE0IHZlcnRBbGlnbiBDVF9WZXJ0aWNhbEFsaWduRm9udFByb3BlcnR5ICovXG5cdFx0XHRjYXNlICc8dmVydEFsaWduJzogaWYoeS52YWwpIGZvbnQudmVydEFsaWduID0geS52YWw7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPHZlcnRBbGlnbi8+JzogY2FzZSAnPC92ZXJ0QWxpZ24+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjguMTggZmFtaWx5IENUX0ZvbnRGYW1pbHkgKi9cblx0XHRcdGNhc2UgJzxmYW1pbHknOiBpZih5LnZhbCkgZm9udC5mYW1pbHkgPSBwYXJzZUludCh5LnZhbCwxMCk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPGZhbWlseS8+JzogY2FzZSAnPC9mYW1pbHk+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjguMzUgc2NoZW1lIENUX0ZvbnRTY2hlbWUgKi9cblx0XHRcdGNhc2UgJzxzY2hlbWUnOiBpZih5LnZhbCkgZm9udC5zY2hlbWUgPSB5LnZhbDsgYnJlYWs7XG5cdFx0XHRjYXNlICc8c2NoZW1lLz4nOiBjYXNlICc8L3NjaGVtZT4nOiBicmVhaztcblxuXHRcdFx0LyogMTguNC4xIGNoYXJzZXQgQ1RfSW50UHJvcGVydHkgKi9cblx0XHRcdGNhc2UgJzxjaGFyc2V0Jzpcblx0XHRcdFx0aWYoeS52YWwgPT0gJzEnKSBicmVhaztcblx0XHRcdFx0eS5jb2RlcGFnZSA9IENTMkNQW3BhcnNlSW50KHkudmFsLCAxMCldO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0LyogMTguPy4/IGNvbG9yIENUX0NvbG9yICovXG5cdFx0XHRjYXNlICc8Y29sb3InOlxuXHRcdFx0XHRpZighZm9udC5jb2xvcikgZm9udC5jb2xvciA9IHt9O1xuXHRcdFx0XHRpZih5LmF1dG8pIGZvbnQuY29sb3IuYXV0byA9IHBhcnNleG1sYm9vbCh5LmF1dG8pO1xuXG5cdFx0XHRcdGlmKHkucmdiKSBmb250LmNvbG9yLnJnYiA9IHkucmdiLnNsaWNlKC02KTtcblx0XHRcdFx0ZWxzZSBpZih5LmluZGV4ZWQpIHtcblx0XHRcdFx0XHRmb250LmNvbG9yLmluZGV4ID0gcGFyc2VJbnQoeS5pbmRleGVkLCAxMCk7XG5cdFx0XHRcdFx0dmFyIGljdiA9IFhMU0ljdltmb250LmNvbG9yLmluZGV4XTtcblx0XHRcdFx0XHRpZihmb250LmNvbG9yLmluZGV4ID09IDgxKSBpY3YgPSBYTFNJY3ZbMV07XG5cdFx0XHRcdFx0aWYoIWljdikgaWN2ID0gWExTSWN2WzFdOyAvL3Rocm93IG5ldyBFcnJvcih4KTsgLy8gbm90ZTogMjA2IGlzIHZhbGlkXG5cdFx0XHRcdFx0Zm9udC5jb2xvci5yZ2IgPSBpY3ZbMF0udG9TdHJpbmcoMTYpICsgaWN2WzFdLnRvU3RyaW5nKDE2KSArIGljdlsyXS50b1N0cmluZygxNik7XG5cdFx0XHRcdH0gZWxzZSBpZih5LnRoZW1lKSB7XG5cdFx0XHRcdFx0Zm9udC5jb2xvci50aGVtZSA9IHBhcnNlSW50KHkudGhlbWUsIDEwKTtcblx0XHRcdFx0XHRpZih5LnRpbnQpIGZvbnQuY29sb3IudGludCA9IHBhcnNlRmxvYXQoeS50aW50KTtcblx0XHRcdFx0XHRpZih5LnRoZW1lICYmIHRoZW1lcy50aGVtZUVsZW1lbnRzICYmIHRoZW1lcy50aGVtZUVsZW1lbnRzLmNsclNjaGVtZSkge1xuXHRcdFx0XHRcdFx0Zm9udC5jb2xvci5yZ2IgPSByZ2JfdGludCh0aGVtZXMudGhlbWVFbGVtZW50cy5jbHJTY2hlbWVbZm9udC5jb2xvci50aGVtZV0ucmdiLCBmb250LmNvbG9yLnRpbnQgfHwgMCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICc8Y29sb3IvPic6IGNhc2UgJzwvY29sb3I+JzogYnJlYWs7XG5cblx0XHRcdC8qIG5vdGU6IHNvbWV0aW1lcyBtYzpBbHRlcm5hdGVDb250ZW50IGFwcGVhcnMgYmFyZSAqL1xuXHRcdFx0Y2FzZSAnPEFsdGVybmF0ZUNvbnRlbnQnOiBwYXNzID0gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8L0FsdGVybmF0ZUNvbnRlbnQ+JzogcGFzcyA9IGZhbHNlOyBicmVhaztcblxuXHRcdFx0LyogMTguMi4xMCBleHRMc3QgQ1RfRXh0ZW5zaW9uTGlzdCA/ICovXG5cdFx0XHRjYXNlICc8ZXh0THN0JzogY2FzZSAnPGV4dExzdD4nOiBjYXNlICc8L2V4dExzdD4nOiBicmVhaztcblx0XHRcdGNhc2UgJzxleHQnOiBwYXNzID0gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8L2V4dD4nOiBwYXNzID0gZmFsc2U7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogaWYob3B0cyAmJiBvcHRzLldURikge1xuXHRcdFx0XHRpZighcGFzcykgdGhyb3cgbmV3IEVycm9yKCd1bnJlY29nbml6ZWQgJyArIHlbMF0gKyAnIGluIGZvbnRzJyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxuLyogMTguOC4zMSBudW1GbXRzIENUX051bUZtdHMgKi9cbmZ1bmN0aW9uIHBhcnNlX251bUZtdHModCwgc3R5bGVzLCBvcHRzKSB7XG5cdHN0eWxlcy5OdW1iZXJGbXQgPSBbXTtcblx0dmFyIGsvKkFycmF5PG51bWJlcj4qLyA9IChrZXlzKFNTRi5fdGFibGUpKTtcblx0Zm9yKHZhciBpPTA7IGkgPCBrLmxlbmd0aDsgKytpKSBzdHlsZXMuTnVtYmVyRm10W2tbaV1dID0gU1NGLl90YWJsZVtrW2ldXTtcblx0dmFyIG0gPSB0WzBdLm1hdGNoKHRhZ3JlZ2V4KTtcblx0aWYoIW0pIHJldHVybjtcblx0Zm9yKGk9MDsgaSA8IG0ubGVuZ3RoOyArK2kpIHtcblx0XHR2YXIgeSA9IHBhcnNleG1sdGFnKG1baV0pO1xuXHRcdHN3aXRjaChzdHJpcF9ucyh5WzBdKSkge1xuXHRcdFx0Y2FzZSAnPG51bUZtdHMnOiBjYXNlICc8L251bUZtdHM+JzogY2FzZSAnPG51bUZtdHMvPic6IGNhc2UgJzxudW1GbXRzPic6IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPG51bUZtdCc6IHtcblx0XHRcdFx0dmFyIGY9dW5lc2NhcGV4bWwodXRmOHJlYWQoeS5mb3JtYXRDb2RlKSksIGo9cGFyc2VJbnQoeS5udW1GbXRJZCwxMCk7XG5cdFx0XHRcdHN0eWxlcy5OdW1iZXJGbXRbal0gPSBmO1xuXHRcdFx0XHRpZihqPjApIHtcblx0XHRcdFx0XHRpZihqID4gMHgxODgpIHtcblx0XHRcdFx0XHRcdGZvcihqID0gMHgxODg7IGogPiAweDNjOyAtLWopIGlmKHN0eWxlcy5OdW1iZXJGbXRbal0gPT0gbnVsbCkgYnJlYWs7XG5cdFx0XHRcdFx0XHRzdHlsZXMuTnVtYmVyRm10W2pdID0gZjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0U1NGLmxvYWQoZixqKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBicmVhaztcblx0XHRcdGNhc2UgJzwvbnVtRm10Pic6IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogaWYob3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcigndW5yZWNvZ25pemVkICcgKyB5WzBdICsgJyBpbiBudW1GbXRzJyk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHdyaXRlX251bUZtdHMoTkYpIHtcblx0dmFyIG8gPSBbXCI8bnVtRm10cz5cIl07XG5cdFtbNSw4XSxbMjMsMjZdLFs0MSw0NF0sWy8qNjMqLzUwLC8qNjZdLFsxNjQsKi8zOTJdXS5mb3JFYWNoKGZ1bmN0aW9uKHIpIHtcblx0XHRmb3IodmFyIGkgPSByWzBdOyBpIDw9IHJbMV07ICsraSkgaWYoTkZbaV0gIT0gbnVsbCkgb1tvLmxlbmd0aF0gPSAod3JpdGV4dGFnKCdudW1GbXQnLG51bGwse251bUZtdElkOmksZm9ybWF0Q29kZTplc2NhcGV4bWwoTkZbaV0pfSkpO1xuXHR9KTtcblx0aWYoby5sZW5ndGggPT09IDEpIHJldHVybiBcIlwiO1xuXHRvW28ubGVuZ3RoXSA9IChcIjwvbnVtRm10cz5cIik7XG5cdG9bMF0gPSB3cml0ZXh0YWcoJ251bUZtdHMnLCBudWxsLCB7IGNvdW50Om8ubGVuZ3RoLTIgfSkucmVwbGFjZShcIi8+XCIsIFwiPlwiKTtcblx0cmV0dXJuIG8uam9pbihcIlwiKTtcbn1cblxuLyogMTguOC4xMCBjZWxsWGZzIENUX0NlbGxYZnMgKi9cbnZhciBjZWxsWEZfdWludCA9IFsgXCJudW1GbXRJZFwiLCBcImZpbGxJZFwiLCBcImZvbnRJZFwiLCBcImJvcmRlcklkXCIsIFwieGZJZFwiIF07XG52YXIgY2VsbFhGX2Jvb2wgPSBbIFwiYXBwbHlBbGlnbm1lbnRcIiwgXCJhcHBseUJvcmRlclwiLCBcImFwcGx5RmlsbFwiLCBcImFwcGx5Rm9udFwiLCBcImFwcGx5TnVtYmVyRm9ybWF0XCIsIFwiYXBwbHlQcm90ZWN0aW9uXCIsIFwicGl2b3RCdXR0b25cIiwgXCJxdW90ZVByZWZpeFwiIF07XG5mdW5jdGlvbiBwYXJzZV9jZWxsWGZzKHQsIHN0eWxlcywgb3B0cykge1xuXHRzdHlsZXMuQ2VsbFhmID0gW107XG5cdHZhciB4Zjtcblx0dmFyIHBhc3MgPSBmYWxzZTtcblx0KHRbMF0ubWF0Y2godGFncmVnZXgpfHxbXSkuZm9yRWFjaChmdW5jdGlvbih4KSB7XG5cdFx0dmFyIHkgPSBwYXJzZXhtbHRhZyh4KSwgaSA9IDA7XG5cdFx0c3dpdGNoKHN0cmlwX25zKHlbMF0pKSB7XG5cdFx0XHRjYXNlICc8Y2VsbFhmcyc6IGNhc2UgJzxjZWxsWGZzPic6IGNhc2UgJzxjZWxsWGZzLz4nOiBjYXNlICc8L2NlbGxYZnM+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjguNDUgeGYgQ1RfWGYgKi9cblx0XHRcdGNhc2UgJzx4Zic6IGNhc2UgJzx4Zi8+Jzpcblx0XHRcdFx0eGYgPSB5O1xuXHRcdFx0XHRkZWxldGUgeGZbMF07XG5cdFx0XHRcdGZvcihpID0gMDsgaSA8IGNlbGxYRl91aW50Lmxlbmd0aDsgKytpKSBpZih4ZltjZWxsWEZfdWludFtpXV0pXG5cdFx0XHRcdFx0eGZbY2VsbFhGX3VpbnRbaV1dID0gcGFyc2VJbnQoeGZbY2VsbFhGX3VpbnRbaV1dLCAxMCk7XG5cdFx0XHRcdGZvcihpID0gMDsgaSA8IGNlbGxYRl9ib29sLmxlbmd0aDsgKytpKSBpZih4ZltjZWxsWEZfYm9vbFtpXV0pXG5cdFx0XHRcdFx0eGZbY2VsbFhGX2Jvb2xbaV1dID0gcGFyc2V4bWxib29sKHhmW2NlbGxYRl9ib29sW2ldXSk7XG5cdFx0XHRcdGlmKHN0eWxlcy5OdW1iZXJGbXQgJiYgeGYubnVtRm10SWQgPiAweDE4OCkge1xuXHRcdFx0XHRcdGZvcihpID0gMHgxODg7IGkgPiAweDNjOyAtLWkpIGlmKHN0eWxlcy5OdW1iZXJGbXRbeGYubnVtRm10SWRdID09IHN0eWxlcy5OdW1iZXJGbXRbaV0pIHsgeGYubnVtRm10SWQgPSBpOyBicmVhazsgfVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlcy5DZWxsWGYucHVzaCh4Zik7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC94Zj4nOiBicmVhaztcblxuXHRcdFx0LyogMTguOC4xIGFsaWdubWVudCBDVF9DZWxsQWxpZ25tZW50ICovXG5cdFx0XHRjYXNlICc8YWxpZ25tZW50JzogY2FzZSAnPGFsaWdubWVudC8+Jzpcblx0XHRcdFx0dmFyIGFsaWdubWVudCA9IHt9O1xuXHRcdFx0XHRpZih5LnZlcnRpY2FsKSBhbGlnbm1lbnQudmVydGljYWwgPSB5LnZlcnRpY2FsO1xuXHRcdFx0XHRpZih5Lmhvcml6b250YWwpIGFsaWdubWVudC5ob3Jpem9udGFsID0geS5ob3Jpem9udGFsO1xuXHRcdFx0XHRpZih5LnRleHRSb3RhdGlvbiAhPSBudWxsKSBhbGlnbm1lbnQudGV4dFJvdGF0aW9uID0geS50ZXh0Um90YXRpb247XG5cdFx0XHRcdGlmKHkuaW5kZW50KSBhbGlnbm1lbnQuaW5kZW50ID0geS5pbmRlbnQ7XG5cdFx0XHRcdGlmKHkud3JhcFRleHQpIGFsaWdubWVudC53cmFwVGV4dCA9IHBhcnNleG1sYm9vbCh5LndyYXBUZXh0KTtcblx0XHRcdFx0eGYuYWxpZ25tZW50ID0gYWxpZ25tZW50O1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJzwvYWxpZ25tZW50Pic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC44LjMzIHByb3RlY3Rpb24gQ1RfQ2VsbFByb3RlY3Rpb24gKi9cblx0XHRcdGNhc2UgJzxwcm90ZWN0aW9uJzpcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICc8L3Byb3RlY3Rpb24+JzogY2FzZSAnPHByb3RlY3Rpb24vPic6IGJyZWFrO1xuXG5cdFx0XHQvKiBub3RlOiBzb21ldGltZXMgbWM6QWx0ZXJuYXRlQ29udGVudCBhcHBlYXJzIGJhcmUgKi9cblx0XHRcdGNhc2UgJzxBbHRlcm5hdGVDb250ZW50JzogcGFzcyA9IHRydWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9BbHRlcm5hdGVDb250ZW50Pic6IHBhc3MgPSBmYWxzZTsgYnJlYWs7XG5cblx0XHRcdC8qIDE4LjIuMTAgZXh0THN0IENUX0V4dGVuc2lvbkxpc3QgPyAqL1xuXHRcdFx0Y2FzZSAnPGV4dExzdCc6IGNhc2UgJzxleHRMc3Q+JzogY2FzZSAnPC9leHRMc3Q+JzogYnJlYWs7XG5cdFx0XHRjYXNlICc8ZXh0JzogcGFzcyA9IHRydWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9leHQ+JzogcGFzcyA9IGZhbHNlOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IGlmKG9wdHMgJiYgb3B0cy5XVEYpIHtcblx0XHRcdFx0aWYoIXBhc3MpIHRocm93IG5ldyBFcnJvcigndW5yZWNvZ25pemVkICcgKyB5WzBdICsgJyBpbiBjZWxsWGZzJyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfY2VsbFhmcyhjZWxsWGZzKSB7XG5cdHZhciBvID0gW107XG5cdG9bby5sZW5ndGhdID0gKHdyaXRleHRhZygnY2VsbFhmcycsbnVsbCkpO1xuXHRjZWxsWGZzLmZvckVhY2goZnVuY3Rpb24oYykge1xuXHRcdG9bby5sZW5ndGhdID0gKHdyaXRleHRhZygneGYnLCBudWxsLCBjKSk7XG5cdH0pO1xuXHRvW28ubGVuZ3RoXSA9IChcIjwvY2VsbFhmcz5cIik7XG5cdGlmKG8ubGVuZ3RoID09PSAyKSByZXR1cm4gXCJcIjtcblx0b1swXSA9IHdyaXRleHRhZygnY2VsbFhmcycsbnVsbCwge2NvdW50Om8ubGVuZ3RoLTJ9KS5yZXBsYWNlKFwiLz5cIixcIj5cIik7XG5cdHJldHVybiBvLmpvaW4oXCJcIik7XG59XG5cbi8qIDE4LjggU3R5bGVzIENUX1N0eWxlc2hlZXQqL1xudmFyIHBhcnNlX3N0eV94bWw9IChmdW5jdGlvbiBtYWtlX3BzdHl4KCkge1xudmFyIG51bUZtdFJlZ2V4ID0gLzwoPzpcXHcrOik/bnVtRm10cyhbXj5dKik+W1xcU1xcc10qPzxcXC8oPzpcXHcrOik/bnVtRm10cz4vO1xudmFyIGNlbGxYZlJlZ2V4ID0gLzwoPzpcXHcrOik/Y2VsbFhmcyhbXj5dKik+W1xcU1xcc10qPzxcXC8oPzpcXHcrOik/Y2VsbFhmcz4vO1xudmFyIGZpbGxzUmVnZXggPSAvPCg/Olxcdys6KT9maWxscyhbXj5dKik+W1xcU1xcc10qPzxcXC8oPzpcXHcrOik/ZmlsbHM+LztcbnZhciBmb250c1JlZ2V4ID0gLzwoPzpcXHcrOik/Zm9udHMoW14+XSopPltcXFNcXHNdKj88XFwvKD86XFx3KzopP2ZvbnRzPi87XG52YXIgYm9yZGVyc1JlZ2V4ID0gLzwoPzpcXHcrOik/Ym9yZGVycyhbXj5dKik+W1xcU1xcc10qPzxcXC8oPzpcXHcrOik/Ym9yZGVycz4vO1xuXG5yZXR1cm4gZnVuY3Rpb24gcGFyc2Vfc3R5X3htbChkYXRhLCB0aGVtZXMsIG9wdHMpIHtcblx0dmFyIHN0eWxlcyA9IHt9O1xuXHRpZighZGF0YSkgcmV0dXJuIHN0eWxlcztcblx0ZGF0YSA9IGRhdGEucmVwbGFjZSgvPCEtLShbXFxzXFxTXSo/KS0tPi9tZyxcIlwiKS5yZXBsYWNlKC88IURPQ1RZUEVbXlxcW10qXFxbW15cXF1dKlxcXT4vZ20sXCJcIik7XG5cdC8qIDE4LjguMzkgc3R5bGVTaGVldCBDVF9TdHlsZXNoZWV0ICovXG5cdHZhciB0O1xuXG5cdC8qIDE4LjguMzEgbnVtRm10cyBDVF9OdW1GbXRzID8gKi9cblx0aWYoKHQ9ZGF0YS5tYXRjaChudW1GbXRSZWdleCkpKSBwYXJzZV9udW1GbXRzKHQsIHN0eWxlcywgb3B0cyk7XG5cblx0LyogMTguOC4yMyBmb250cyBDVF9Gb250cyA/ICovXG5cdGlmKCh0PWRhdGEubWF0Y2goZm9udHNSZWdleCkpKSBwYXJzZV9mb250cyh0LCBzdHlsZXMsIHRoZW1lcywgb3B0cyk7XG5cblx0LyogMTguOC4yMSBmaWxscyBDVF9GaWxscyA/ICovXG5cdGlmKCh0PWRhdGEubWF0Y2goZmlsbHNSZWdleCkpKSBwYXJzZV9maWxscyh0LCBzdHlsZXMsIHRoZW1lcywgb3B0cyk7XG5cblx0LyogMTguOC41ICBib3JkZXJzIENUX0JvcmRlcnMgPyAqL1xuXHRpZigodD1kYXRhLm1hdGNoKGJvcmRlcnNSZWdleCkpKSBwYXJzZV9ib3JkZXJzKHQsIHN0eWxlcywgdGhlbWVzLCBvcHRzKTtcblxuXHQvKiAxOC44LjkgIGNlbGxTdHlsZVhmcyBDVF9DZWxsU3R5bGVYZnMgPyAqL1xuXHQvKiAxOC44LjggIGNlbGxTdHlsZXMgQ1RfQ2VsbFN0eWxlcyA/ICovXG5cblx0LyogMTguOC4xMCBjZWxsWGZzIENUX0NlbGxYZnMgPyAqL1xuXHRpZigodD1kYXRhLm1hdGNoKGNlbGxYZlJlZ2V4KSkpIHBhcnNlX2NlbGxYZnModCwgc3R5bGVzLCBvcHRzKTtcblxuXHQvKiAxOC44LjE1IGR4ZnMgQ1RfRHhmcyA/ICovXG5cdC8qIDE4LjguNDIgdGFibGVTdHlsZXMgQ1RfVGFibGVTdHlsZXMgPyAqL1xuXHQvKiAxOC44LjExIGNvbG9ycyBDVF9Db2xvcnMgPyAqL1xuXHQvKiAxOC4yLjEwIGV4dExzdCBDVF9FeHRlbnNpb25MaXN0ID8gKi9cblxuXHRyZXR1cm4gc3R5bGVzO1xufTtcbn0pKCk7XG5cbnZhciBTVFlMRVNfWE1MX1JPT1QgPSB3cml0ZXh0YWcoJ3N0eWxlU2hlZXQnLCBudWxsLCB7XG5cdCd4bWxucyc6IFhNTE5TLm1haW5bMF0sXG5cdCd4bWxuczp2dCc6IFhNTE5TLnZ0XG59KTtcblxuUkVMUy5TVFkgPSBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvc3R5bGVzXCI7XG5cbmZ1bmN0aW9uIHdyaXRlX3N0eV94bWwod2IsIG9wdHMpIHtcblx0dmFyIG8gPSBbWE1MX0hFQURFUiwgU1RZTEVTX1hNTF9ST09UXSwgdztcblx0aWYod2IuU1NGICYmICh3ID0gd3JpdGVfbnVtRm10cyh3Yi5TU0YpKSAhPSBudWxsKSBvW28ubGVuZ3RoXSA9IHc7XG5cdG9bby5sZW5ndGhdID0gKCc8Zm9udHMgY291bnQ9XCIxXCI+PGZvbnQ+PHN6IHZhbD1cIjEyXCIvPjxjb2xvciB0aGVtZT1cIjFcIi8+PG5hbWUgdmFsPVwiQ2FsaWJyaVwiLz48ZmFtaWx5IHZhbD1cIjJcIi8+PHNjaGVtZSB2YWw9XCJtaW5vclwiLz48L2ZvbnQ+PC9mb250cz4nKTtcblx0b1tvLmxlbmd0aF0gPSAoJzxmaWxscyBjb3VudD1cIjJcIj48ZmlsbD48cGF0dGVybkZpbGwgcGF0dGVyblR5cGU9XCJub25lXCIvPjwvZmlsbD48ZmlsbD48cGF0dGVybkZpbGwgcGF0dGVyblR5cGU9XCJncmF5MTI1XCIvPjwvZmlsbD48L2ZpbGxzPicpO1xuXHRvW28ubGVuZ3RoXSA9ICgnPGJvcmRlcnMgY291bnQ9XCIxXCI+PGJvcmRlcj48bGVmdC8+PHJpZ2h0Lz48dG9wLz48Ym90dG9tLz48ZGlhZ29uYWwvPjwvYm9yZGVyPjwvYm9yZGVycz4nKTtcblx0b1tvLmxlbmd0aF0gPSAoJzxjZWxsU3R5bGVYZnMgY291bnQ9XCIxXCI+PHhmIG51bUZtdElkPVwiMFwiIGZvbnRJZD1cIjBcIiBmaWxsSWQ9XCIwXCIgYm9yZGVySWQ9XCIwXCIvPjwvY2VsbFN0eWxlWGZzPicpO1xuXHRpZigodyA9IHdyaXRlX2NlbGxYZnMob3B0cy5jZWxsWGZzKSkpIG9bby5sZW5ndGhdID0gKHcpO1xuXHRvW28ubGVuZ3RoXSA9ICgnPGNlbGxTdHlsZXMgY291bnQ9XCIxXCI+PGNlbGxTdHlsZSBuYW1lPVwiTm9ybWFsXCIgeGZJZD1cIjBcIiBidWlsdGluSWQ9XCIwXCIvPjwvY2VsbFN0eWxlcz4nKTtcblx0b1tvLmxlbmd0aF0gPSAoJzxkeGZzIGNvdW50PVwiMFwiLz4nKTtcblx0b1tvLmxlbmd0aF0gPSAoJzx0YWJsZVN0eWxlcyBjb3VudD1cIjBcIiBkZWZhdWx0VGFibGVTdHlsZT1cIlRhYmxlU3R5bGVNZWRpdW05XCIgZGVmYXVsdFBpdm90U3R5bGU9XCJQaXZvdFN0eWxlTWVkaXVtNFwiLz4nKTtcblxuXHRpZihvLmxlbmd0aD4yKXsgb1tvLmxlbmd0aF0gPSAoJzwvc3R5bGVTaGVldD4nKTsgb1sxXT1vWzFdLnJlcGxhY2UoXCIvPlwiLFwiPlwiKTsgfVxuXHRyZXR1cm4gby5qb2luKFwiXCIpO1xufVxuLyogW01TLVhMU0JdIDIuNC42NTcgQnJ0Rm10ICovXG5mdW5jdGlvbiBwYXJzZV9CcnRGbXQoZGF0YSwgbGVuZ3RoKSB7XG5cdHZhciBudW1GbXRJZCA9IGRhdGEucmVhZF9zaGlmdCgyKTtcblx0dmFyIHN0Rm10Q29kZSA9IHBhcnNlX1hMV2lkZVN0cmluZyhkYXRhLGxlbmd0aC0yKTtcblx0cmV0dXJuIFtudW1GbXRJZCwgc3RGbXRDb2RlXTtcbn1cbmZ1bmN0aW9uIHdyaXRlX0JydEZtdChpLCBmLCBvKSB7XG5cdGlmKCFvKSBvID0gbmV3X2J1Zig2ICsgNCAqIGYubGVuZ3RoKTtcblx0by53cml0ZV9zaGlmdCgyLCBpKTtcblx0d3JpdGVfWExXaWRlU3RyaW5nKGYsIG8pO1xuXHR2YXIgb3V0ID0gKG8ubGVuZ3RoID4gby5sKSA/IG8uc2xpY2UoMCwgby5sKSA6IG87XG5cdGlmKG8ubCA9PSBudWxsKSBvLmwgPSBvLmxlbmd0aDtcblx0cmV0dXJuIG91dDtcbn1cblxuLyogW01TLVhMU0JdIDIuNC42NTkgQnJ0Rm9udCBUT0RPICovXG5mdW5jdGlvbiBwYXJzZV9CcnRGb250KGRhdGEsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgb3V0ID0gKHt9KTtcblxuXHRvdXQuc3ogPSBkYXRhLnJlYWRfc2hpZnQoMikgLyAyMDtcblxuXHR2YXIgZ3JiaXQgPSBwYXJzZV9Gb250RmxhZ3MoZGF0YSwgMiwgb3B0cyk7XG5cdGlmKGdyYml0LmZJdGFsaWMpIG91dC5pdGFsaWMgPSAxO1xuXHRpZihncmJpdC5mQ29uZGVuc2UpIG91dC5jb25kZW5zZSA9IDE7XG5cdGlmKGdyYml0LmZFeHRlbmQpIG91dC5leHRlbmQgPSAxO1xuXHRpZihncmJpdC5mU2hhZG93KSBvdXQuc2hhZG93ID0gMTtcblx0aWYoZ3JiaXQuZk91dGxpbmUpIG91dC5vdXRsaW5lID0gMTtcblx0aWYoZ3JiaXQuZlN0cmlrZW91dCkgb3V0LnN0cmlrZSA9IDE7XG5cblx0dmFyIGJscyA9IGRhdGEucmVhZF9zaGlmdCgyKTtcblx0aWYoYmxzID09PSAweDAyQkMpIG91dC5ib2xkID0gMTtcblxuXHRzd2l0Y2goZGF0YS5yZWFkX3NoaWZ0KDIpKSB7XG5cdFx0LyogY2FzZSAwOiBvdXQudmVydEFsaWduID0gXCJiYXNlbGluZVwiOyBicmVhazsgKi9cblx0XHRjYXNlIDE6IG91dC52ZXJ0QWxpZ24gPSBcInN1cGVyc2NyaXB0XCI7IGJyZWFrO1xuXHRcdGNhc2UgMjogb3V0LnZlcnRBbGlnbiA9IFwic3Vic2NyaXB0XCI7IGJyZWFrO1xuXHR9XG5cblx0dmFyIHVuZGVybGluZSA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblx0aWYodW5kZXJsaW5lICE9IDApIG91dC51bmRlcmxpbmUgPSB1bmRlcmxpbmU7XG5cblx0dmFyIGZhbWlseSA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblx0aWYoZmFtaWx5ID4gMCkgb3V0LmZhbWlseSA9IGZhbWlseTtcblxuXHR2YXIgYkNoYXJTZXQgPSBkYXRhLnJlYWRfc2hpZnQoMSk7XG5cdGlmKGJDaGFyU2V0ID4gMCkgb3V0LmNoYXJzZXQgPSBiQ2hhclNldDtcblxuXHRkYXRhLmwrKztcblx0b3V0LmNvbG9yID0gcGFyc2VfQnJ0Q29sb3IoZGF0YSwgOCk7XG5cblx0c3dpdGNoKGRhdGEucmVhZF9zaGlmdCgxKSkge1xuXHRcdC8qIGNhc2UgMDogb3V0LnNjaGVtZSA9IFwibm9uZVwiOiBicmVhazsgKi9cblx0XHRjYXNlIDE6IG91dC5zY2hlbWUgPSBcIm1ham9yXCI7IGJyZWFrO1xuXHRcdGNhc2UgMjogb3V0LnNjaGVtZSA9IFwibWlub3JcIjsgYnJlYWs7XG5cdH1cblxuXHRvdXQubmFtZSA9IHBhcnNlX1hMV2lkZVN0cmluZyhkYXRhLCBsZW5ndGggLSAyMSk7XG5cblx0cmV0dXJuIG91dDtcbn1cbmZ1bmN0aW9uIHdyaXRlX0JydEZvbnQoZm9udCwgbykge1xuXHRpZighbykgbyA9IG5ld19idWYoMjUrNCozMik7XG5cdG8ud3JpdGVfc2hpZnQoMiwgZm9udC5zeiAqIDIwKTtcblx0d3JpdGVfRm9udEZsYWdzKGZvbnQsIG8pO1xuXHRvLndyaXRlX3NoaWZ0KDIsIGZvbnQuYm9sZCA/IDB4MDJCQyA6IDB4MDE5MCk7XG5cdHZhciBzc3MgPSAwO1xuXHRpZihmb250LnZlcnRBbGlnbiA9PSBcInN1cGVyc2NyaXB0XCIpIHNzcyA9IDE7XG5cdGVsc2UgaWYoZm9udC52ZXJ0QWxpZ24gPT0gXCJzdWJzY3JpcHRcIikgc3NzID0gMjtcblx0by53cml0ZV9zaGlmdCgyLCBzc3MpO1xuXHRvLndyaXRlX3NoaWZ0KDEsIGZvbnQudW5kZXJsaW5lIHx8IDApO1xuXHRvLndyaXRlX3NoaWZ0KDEsIGZvbnQuZmFtaWx5IHx8IDApO1xuXHRvLndyaXRlX3NoaWZ0KDEsIGZvbnQuY2hhcnNldCB8fCAwKTtcblx0by53cml0ZV9zaGlmdCgxLCAwKTtcblx0d3JpdGVfQnJ0Q29sb3IoZm9udC5jb2xvciwgbyk7XG5cdHZhciBzY2hlbWUgPSAwO1xuXHRpZihmb250LnNjaGVtZSA9PSBcIm1ham9yXCIpIHNjaGVtZSA9IDE7XG5cdGlmKGZvbnQuc2NoZW1lID09IFwibWlub3JcIikgc2NoZW1lID0gMjtcblx0by53cml0ZV9zaGlmdCgxLCBzY2hlbWUpO1xuXHR3cml0ZV9YTFdpZGVTdHJpbmcoZm9udC5uYW1lLCBvKTtcblx0cmV0dXJuIG8ubGVuZ3RoID4gby5sID8gby5zbGljZSgwLCBvLmwpIDogbztcbn1cblxuLyogW01TLVhMU0JdIDIuNC42NTAgQnJ0RmlsbCAqL1xudmFyIFhMU0JGaWxsUFROYW1lcyA9IFtcblx0XCJub25lXCIsXG5cdFwic29saWRcIixcblx0XCJtZWRpdW1HcmF5XCIsXG5cdFwiZGFya0dyYXlcIixcblx0XCJsaWdodEdyYXlcIixcblx0XCJkYXJrSG9yaXpvbnRhbFwiLFxuXHRcImRhcmtWZXJ0aWNhbFwiLFxuXHRcImRhcmtEb3duXCIsXG5cdFwiZGFya1VwXCIsXG5cdFwiZGFya0dyaWRcIixcblx0XCJkYXJrVHJlbGxpc1wiLFxuXHRcImxpZ2h0SG9yaXpvbnRhbFwiLFxuXHRcImxpZ2h0VmVydGljYWxcIixcblx0XCJsaWdodERvd25cIixcblx0XCJsaWdodFVwXCIsXG5cdFwibGlnaHRHcmlkXCIsXG5cdFwibGlnaHRUcmVsbGlzXCIsXG5cdFwiZ3JheTEyNVwiLFxuXHRcImdyYXkwNjI1XCJcbl07XG52YXIgcmV2X1hMU0JGaWxsUFROYW1lcyA9IChldmVydChYTFNCRmlsbFBUTmFtZXMpKTtcbi8qIFRPRE86IGdyYWRpZW50IGZpbGwgcmVwcmVzZW50YXRpb24gKi9cbnZhciBwYXJzZV9CcnRGaWxsID0gcGFyc2Vub29wO1xuZnVuY3Rpb24gd3JpdGVfQnJ0RmlsbChmaWxsLCBvKSB7XG5cdGlmKCFvKSBvID0gbmV3X2J1Zig0KjMgKyA4KjcgKyAxNioxKTtcblx0dmFyIGZscyA9IHJldl9YTFNCRmlsbFBUTmFtZXNbZmlsbC5wYXR0ZXJuVHlwZV07XG5cdGlmKGZscyA9PSBudWxsKSBmbHMgPSAweDI4O1xuXHRvLndyaXRlX3NoaWZ0KDQsIGZscyk7XG5cdHZhciBqID0gMDtcblx0aWYoZmxzICE9IDB4MjgpIHtcblx0XHQvKiBUT0RPOiBjdXN0b20gRkcgQ29sb3IgKi9cblx0XHR3cml0ZV9CcnRDb2xvcih7YXV0bzoxfSwgbyk7XG5cdFx0LyogVE9ETzogY3VzdG9tIEJHIENvbG9yICovXG5cdFx0d3JpdGVfQnJ0Q29sb3Ioe2F1dG86MX0sIG8pO1xuXG5cdFx0Zm9yKDsgaiA8IDEyOyArK2opIG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdH0gZWxzZSB7XG5cdFx0Zm9yKDsgaiA8IDQ7ICsraikgby53cml0ZV9zaGlmdCg0LCAwKTtcblxuXHRcdGZvcig7IGogPCAxMjsgKytqKSBvLndyaXRlX3NoaWZ0KDQsIDApOyAvKiBUT0RPICovXG5cdFx0LyogaUdyYWRpZW50VHlwZSAqL1xuXHRcdC8qIHhudW1EZWdyZWUgKi9cblx0XHQvKiB4bnVtRmlsbFRvTGVmdCAqL1xuXHRcdC8qIHhudW1GaWxsVG9SaWdodCAqL1xuXHRcdC8qIHhudW1GaWxsVG9Ub3AgKi9cblx0XHQvKiB4bnVtRmlsbFRvQm90dG9tICovXG5cdFx0LyogY051bVN0b3AgKi9cblx0XHQvKiB4ZmlsbEdyYWRpZW50U3RvcCAqL1xuXHR9XG5cdHJldHVybiBvLmxlbmd0aCA+IG8ubCA/IG8uc2xpY2UoMCwgby5sKSA6IG87XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuODI0IEJydFhGICovXG5mdW5jdGlvbiBwYXJzZV9CcnRYRihkYXRhLCBsZW5ndGgpIHtcblx0dmFyIHRndCA9IGRhdGEubCArIGxlbmd0aDtcblx0dmFyIGl4ZmVQYXJlbnQgPSBkYXRhLnJlYWRfc2hpZnQoMik7XG5cdHZhciBpZm10ID0gZGF0YS5yZWFkX3NoaWZ0KDIpO1xuXHRkYXRhLmwgPSB0Z3Q7XG5cdHJldHVybiB7aXhmZTppeGZlUGFyZW50LCBudW1GbXRJZDppZm10IH07XG59XG5mdW5jdGlvbiB3cml0ZV9CcnRYRihkYXRhLCBpeGZlUCwgbykge1xuXHRpZighbykgbyA9IG5ld19idWYoMTYpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIGl4ZmVQfHwwKTtcblx0by53cml0ZV9zaGlmdCgyLCBkYXRhLm51bUZtdElkfHwwKTtcblx0by53cml0ZV9zaGlmdCgyLCAwKTsgLyogaUZvbnQgKi9cblx0by53cml0ZV9zaGlmdCgyLCAwKTsgLyogaUZpbGwgKi9cblx0by53cml0ZV9zaGlmdCgyLCAwKTsgLyogaXhCb3JkZXIgKi9cblx0by53cml0ZV9zaGlmdCgxLCAwKTsgLyogdHJvdCAqL1xuXHRvLndyaXRlX3NoaWZ0KDEsIDApOyAvKiBpbmRlbnQgKi9cblx0dmFyIGZsb3cgPSAwO1xuXHRvLndyaXRlX3NoaWZ0KDEsIGZsb3cpOyAvKiBmbGFncyAqL1xuXHRvLndyaXRlX3NoaWZ0KDEsIDApOyAvKiBmbGFncyAqL1xuXHRvLndyaXRlX3NoaWZ0KDEsIDApOyAvKiB4ZkdyYml0QXRyICovXG5cdG8ud3JpdGVfc2hpZnQoMSwgMCk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTQl0gMi41LjQgQmx4ZiBUT0RPICovXG5mdW5jdGlvbiB3cml0ZV9CbHhmKGRhdGEsIG8pIHtcblx0aWYoIW8pIG8gPSBuZXdfYnVmKDEwKTtcblx0by53cml0ZV9zaGlmdCgxLCAwKTsgLyogZGcgKi9cblx0by53cml0ZV9zaGlmdCgxLCAwKTtcblx0by53cml0ZV9zaGlmdCg0LCAwKTsgLyogY29sb3IgKi9cblx0by53cml0ZV9zaGlmdCg0LCAwKTsgLyogY29sb3IgKi9cblx0cmV0dXJuIG87XG59XG4vKiBbTVMtWExTQl0gMi40LjMwMiBCcnRCb3JkZXIgVE9ETyAqL1xudmFyIHBhcnNlX0JydEJvcmRlciA9IHBhcnNlbm9vcDtcbmZ1bmN0aW9uIHdyaXRlX0JydEJvcmRlcihib3JkZXIsIG8pIHtcblx0aWYoIW8pIG8gPSBuZXdfYnVmKDUxKTtcblx0by53cml0ZV9zaGlmdCgxLCAwKTsgLyogZGlhZ29uYWwgKi9cblx0d3JpdGVfQmx4ZihudWxsLCBvKTsgLyogdG9wICovXG5cdHdyaXRlX0JseGYobnVsbCwgbyk7IC8qIGJvdHRvbSAqL1xuXHR3cml0ZV9CbHhmKG51bGwsIG8pOyAvKiBsZWZ0ICovXG5cdHdyaXRlX0JseGYobnVsbCwgbyk7IC8qIHJpZ2h0ICovXG5cdHdyaXRlX0JseGYobnVsbCwgbyk7IC8qIGRpYWcgKi9cblx0cmV0dXJuIG8ubGVuZ3RoID4gby5sID8gby5zbGljZSgwLCBvLmwpIDogbztcbn1cblxuLyogW01TLVhMU0JdIDIuNC43NjMgQnJ0U3R5bGUgVE9ETyAqL1xuZnVuY3Rpb24gd3JpdGVfQnJ0U3R5bGUoc3R5bGUsIG8pIHtcblx0aWYoIW8pIG8gPSBuZXdfYnVmKDEyKzQqMTApO1xuXHRvLndyaXRlX3NoaWZ0KDQsIHN0eWxlLnhmSWQpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDEpO1xuXHRvLndyaXRlX3NoaWZ0KDEsICtzdHlsZS5idWlsdGluSWQpO1xuXHRvLndyaXRlX3NoaWZ0KDEsIDApOyAvKiBpTGV2ZWwgKi9cblx0d3JpdGVfWExOdWxsYWJsZVdpZGVTdHJpbmcoc3R5bGUubmFtZSB8fCBcIlwiLCBvKTtcblx0cmV0dXJuIG8ubGVuZ3RoID4gby5sID8gby5zbGljZSgwLCBvLmwpIDogbztcbn1cblxuLyogW01TLVhMU0JdIDIuNC4yNzIgQnJ0QmVnaW5UYWJsZVN0eWxlcyAqL1xuZnVuY3Rpb24gd3JpdGVfQnJ0QmVnaW5UYWJsZVN0eWxlcyhjbnQsIGRlZlRhYmxlU3R5bGUsIGRlZlBpdm90U3R5bGUpIHtcblx0dmFyIG8gPSBuZXdfYnVmKDQrMjU2KjIqNCk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgY250KTtcblx0d3JpdGVfWExOdWxsYWJsZVdpZGVTdHJpbmcoZGVmVGFibGVTdHlsZSwgbyk7XG5cdHdyaXRlX1hMTnVsbGFibGVXaWRlU3RyaW5nKGRlZlBpdm90U3R5bGUsIG8pO1xuXHRyZXR1cm4gby5sZW5ndGggPiBvLmwgPyBvLnNsaWNlKDAsIG8ubCkgOiBvO1xufVxuXG4vKiBbTVMtWExTQl0gMi4xLjcuNTAgU3R5bGVzICovXG5mdW5jdGlvbiBwYXJzZV9zdHlfYmluKGRhdGEsIHRoZW1lcywgb3B0cykge1xuXHR2YXIgc3R5bGVzID0ge307XG5cdHN0eWxlcy5OdW1iZXJGbXQgPSAoW10pO1xuXHRmb3IodmFyIHkgaW4gU1NGLl90YWJsZSkgc3R5bGVzLk51bWJlckZtdFt5XSA9IFNTRi5fdGFibGVbeV07XG5cblx0c3R5bGVzLkNlbGxYZiA9IFtdO1xuXHRzdHlsZXMuRm9udHMgPSBbXTtcblx0dmFyIHN0YXRlID0gW107XG5cdHZhciBwYXNzID0gZmFsc2U7XG5cdHJlY29yZGhvcHBlcihkYXRhLCBmdW5jdGlvbiBob3BwZXJfc3R5KHZhbCwgUl9uLCBSVCkge1xuXHRcdHN3aXRjaChSVCkge1xuXHRcdFx0Y2FzZSAweDAwMkM6IC8qICdCcnRGbXQnICovXG5cdFx0XHRcdHN0eWxlcy5OdW1iZXJGbXRbdmFsWzBdXSA9IHZhbFsxXTsgU1NGLmxvYWQodmFsWzFdLCB2YWxbMF0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMHgwMDJCOiAvKiAnQnJ0Rm9udCcgKi9cblx0XHRcdFx0c3R5bGVzLkZvbnRzLnB1c2godmFsKTtcblx0XHRcdFx0aWYodmFsLmNvbG9yLnRoZW1lICE9IG51bGwgJiYgdGhlbWVzICYmIHRoZW1lcy50aGVtZUVsZW1lbnRzICYmIHRoZW1lcy50aGVtZUVsZW1lbnRzLmNsclNjaGVtZSkge1xuXHRcdFx0XHRcdHZhbC5jb2xvci5yZ2IgPSByZ2JfdGludCh0aGVtZXMudGhlbWVFbGVtZW50cy5jbHJTY2hlbWVbdmFsLmNvbG9yLnRoZW1lXS5yZ2IsIHZhbC5jb2xvci50aW50IHx8IDApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAweDA0MDE6IC8qICdCcnRLbm93bkZvbnRzJyAqLyBicmVhaztcblx0XHRcdGNhc2UgMHgwMDJEOiAvKiAnQnJ0RmlsbCcgKi9cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAyRTogLyogJ0JydEJvcmRlcicgKi9cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAyRjogLyogJ0JydFhGJyAqL1xuXHRcdFx0XHRpZihzdGF0ZVtzdGF0ZS5sZW5ndGggLSAxXSA9PSBcIkJydEJlZ2luQ2VsbFhGc1wiKSB7XG5cdFx0XHRcdFx0c3R5bGVzLkNlbGxYZi5wdXNoKHZhbCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAzMDogLyogJ0JydFN0eWxlJyAqL1xuXHRcdFx0Y2FzZSAweDAxRkI6IC8qICdCcnREWEYnICovXG5cdFx0XHRjYXNlIDB4MDIzQzogLyogJ0JydE1SVUNvbG9yJyAqL1xuXHRcdFx0Y2FzZSAweDAxREI6IC8qICdCcnRJbmRleGVkQ29sb3InOiAqL1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAweDA0OTM6IC8qICdCcnREWEYxNCcgKi9cblx0XHRcdGNhc2UgMHgwODM2OiAvKiAnQnJ0RFhGMTUnICovXG5cdFx0XHRjYXNlIDB4MDQ2QTogLyogJ0JydFNsaWNlclN0eWxlRWxlbWVudCcgKi9cblx0XHRcdGNhc2UgMHgwMjAwOiAvKiAnQnJ0VGFibGVTdHlsZUVsZW1lbnQnICovXG5cdFx0XHRjYXNlIDB4MDgyRjogLyogJ0JydFRpbWVsaW5lU3R5bGVFbGVtZW50JyAqL1xuXHRcdFx0Y2FzZSAweDBDMDA6IC8qICdCcnRVaWQnICovXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDB4MDAyMzogLyogJ0JydEZSVEJlZ2luJyAqL1xuXHRcdFx0XHRwYXNzID0gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAyNDogLyogJ0JydEZSVEVuZCcgKi9cblx0XHRcdFx0cGFzcyA9IGZhbHNlOyBicmVhaztcblx0XHRcdGNhc2UgMHgwMDI1OiAvKiAnQnJ0QUNCZWdpbicgKi9cblx0XHRcdFx0c3RhdGUucHVzaChSX24pOyBwYXNzID0gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAyNjogLyogJ0JydEFDRW5kJyAqL1xuXHRcdFx0XHRzdGF0ZS5wb3AoKTsgcGFzcyA9IGZhbHNlOyBicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0aWYoKFJfbnx8XCJcIikuaW5kZXhPZihcIkJlZ2luXCIpID4gMCkgc3RhdGUucHVzaChSX24pO1xuXHRcdFx0XHRlbHNlIGlmKChSX258fFwiXCIpLmluZGV4T2YoXCJFbmRcIikgPiAwKSBzdGF0ZS5wb3AoKTtcblx0XHRcdFx0ZWxzZSBpZighcGFzcyB8fCAob3B0cy5XVEYgJiYgc3RhdGVbc3RhdGUubGVuZ3RoLTFdICE9IFwiQnJ0QUNCZWdpblwiKSkgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCByZWNvcmQgXCIgKyBSVCArIFwiIFwiICsgUl9uKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9GTVRTX2JpbihiYSwgTkYpIHtcblx0aWYoIU5GKSByZXR1cm47XG5cdHZhciBjbnQgPSAwO1xuXHRbWzUsOF0sWzIzLDI2XSxbNDEsNDRdLFsvKjYzKi81MCwvKjY2XSxbMTY0LCovMzkyXV0uZm9yRWFjaChmdW5jdGlvbihyKSB7XG5mb3IodmFyIGkgPSByWzBdOyBpIDw9IHJbMV07ICsraSkgaWYoTkZbaV0gIT0gbnVsbCkgKytjbnQ7XG5cdH0pO1xuXG5cdGlmKGNudCA9PSAwKSByZXR1cm47XG5cdHdyaXRlX3JlY29yZChiYSwgXCJCcnRCZWdpbkZtdHNcIiwgd3JpdGVfVUludDMyTEUoY250KSk7XG5cdFtbNSw4XSxbMjMsMjZdLFs0MSw0NF0sWy8qNjMqLzUwLC8qNjZdLFsxNjQsKi8zOTJdXS5mb3JFYWNoKGZ1bmN0aW9uKHIpIHtcbmZvcih2YXIgaSA9IHJbMF07IGkgPD0gclsxXTsgKytpKSBpZihORltpXSAhPSBudWxsKSB3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0Rm10XCIsIHdyaXRlX0JydEZtdChpLCBORltpXSkpO1xuXHR9KTtcblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEVuZEZtdHNcIik7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX0ZPTlRTX2JpbihiYSkge1xuXHR2YXIgY250ID0gMTtcblxuXHRpZihjbnQgPT0gMCkgcmV0dXJuO1xuXHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0QmVnaW5Gb250c1wiLCB3cml0ZV9VSW50MzJMRShjbnQpKTtcblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEZvbnRcIiwgd3JpdGVfQnJ0Rm9udCh7XG5cdFx0c3o6MTIsXG5cdFx0Y29sb3I6IHt0aGVtZToxfSxcblx0XHRuYW1lOiBcIkNhbGlicmlcIixcblx0XHRmYW1pbHk6IDIsXG5cdFx0c2NoZW1lOiBcIm1pbm9yXCJcblx0fSkpO1xuXHQvKiAxKjY1NDkxQnJ0Rm9udCBbQUNGT05UU10gKi9cblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEVuZEZvbnRzXCIpO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9GSUxMU19iaW4oYmEpIHtcblx0dmFyIGNudCA9IDI7XG5cblx0aWYoY250ID09IDApIHJldHVybjtcblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEJlZ2luRmlsbHNcIiwgd3JpdGVfVUludDMyTEUoY250KSk7XG5cdHdyaXRlX3JlY29yZChiYSwgXCJCcnRGaWxsXCIsIHdyaXRlX0JydEZpbGwoe3BhdHRlcm5UeXBlOlwibm9uZVwifSkpO1xuXHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0RmlsbFwiLCB3cml0ZV9CcnRGaWxsKHtwYXR0ZXJuVHlwZTpcImdyYXkxMjVcIn0pKTtcblx0LyogMSo2NTQzMUJydEZpbGwgKi9cblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEVuZEZpbGxzXCIpO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9CT1JERVJTX2JpbihiYSkge1xuXHR2YXIgY250ID0gMTtcblxuXHRpZihjbnQgPT0gMCkgcmV0dXJuO1xuXHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0QmVnaW5Cb3JkZXJzXCIsIHdyaXRlX1VJbnQzMkxFKGNudCkpO1xuXHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0Qm9yZGVyXCIsIHdyaXRlX0JydEJvcmRlcih7fSkpO1xuXHQvKiAxKjY1NDMwQnJ0Qm9yZGVyICovXG5cdHdyaXRlX3JlY29yZChiYSwgXCJCcnRFbmRCb3JkZXJzXCIpO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9DRUxMU1RZTEVYRlNfYmluKGJhKSB7XG5cdHZhciBjbnQgPSAxO1xuXHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0QmVnaW5DZWxsU3R5bGVYRnNcIiwgd3JpdGVfVUludDMyTEUoY250KSk7XG5cdHdyaXRlX3JlY29yZChiYSwgXCJCcnRYRlwiLCB3cml0ZV9CcnRYRih7XG5cdFx0bnVtRm10SWQ6IDAsXG5cdFx0Zm9udElkOiAgIDAsXG5cdFx0ZmlsbElkOiAgIDAsXG5cdFx0Ym9yZGVySWQ6IDBcblx0fSwgMHhGRkZGKSk7XG5cdC8qIDEqNjU0MzAoQnJ0WEYgKkZSVCkgKi9cblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEVuZENlbGxTdHlsZVhGc1wiKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfQ0VMTFhGU19iaW4oYmEsIGRhdGEpIHtcblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEJlZ2luQ2VsbFhGc1wiLCB3cml0ZV9VSW50MzJMRShkYXRhLmxlbmd0aCkpO1xuXHRkYXRhLmZvckVhY2goZnVuY3Rpb24oYykgeyB3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0WEZcIiwgd3JpdGVfQnJ0WEYoYywwKSk7IH0pO1xuXHQvKiAxKjY1NDMwKEJydFhGICpGUlQpICovXG5cdHdyaXRlX3JlY29yZChiYSwgXCJCcnRFbmRDZWxsWEZzXCIpO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9TVFlMRVNfYmluKGJhKSB7XG5cdHZhciBjbnQgPSAxO1xuXG5cdHdyaXRlX3JlY29yZChiYSwgXCJCcnRCZWdpblN0eWxlc1wiLCB3cml0ZV9VSW50MzJMRShjbnQpKTtcblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydFN0eWxlXCIsIHdyaXRlX0JydFN0eWxlKHtcblx0XHR4ZklkOjAsXG5cdFx0YnVpbHRpbklkOjAsXG5cdFx0bmFtZTpcIk5vcm1hbFwiXG5cdH0pKTtcblx0LyogMSo2NTQzMChCcnRTdHlsZSAqRlJUKSAqL1xuXHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0RW5kU3R5bGVzXCIpO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9EWEZTX2JpbihiYSkge1xuXHR2YXIgY250ID0gMDtcblxuXHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0QmVnaW5EWEZzXCIsIHdyaXRlX1VJbnQzMkxFKGNudCkpO1xuXHQvKiAqMjE0NzQ4MzY0NyhCcnREWEYgKkZSVCkgKi9cblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEVuZERYRnNcIik7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX1RBQkxFU1RZTEVTX2JpbihiYSkge1xuXHR2YXIgY250ID0gMDtcblxuXHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0QmVnaW5UYWJsZVN0eWxlc1wiLCB3cml0ZV9CcnRCZWdpblRhYmxlU3R5bGVzKGNudCwgXCJUYWJsZVN0eWxlTWVkaXVtOVwiLCBcIlBpdm90U3R5bGVNZWRpdW00XCIpKTtcblx0LyogKlRBQkxFU1RZTEUgKi9cblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEVuZFRhYmxlU3R5bGVzXCIpO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9DT0xPUlBBTEVUVEVfYmluKCkge1xuXHRyZXR1cm47XG5cdC8qIEJydEJlZ2luQ29sb3JQYWxldHRlIFtJTkRFWEVEQ09MT1JTXSBbTVJVQ09MT1JTXSBCcnRFbmRDb2xvclBhbGV0dGUgKi9cbn1cblxuLyogW01TLVhMU0JdIDIuMS43LjUwIFN0eWxlcyAqL1xuZnVuY3Rpb24gd3JpdGVfc3R5X2Jpbih3Yiwgb3B0cykge1xuXHR2YXIgYmEgPSBidWZfYXJyYXkoKTtcblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEJlZ2luU3R5bGVTaGVldFwiKTtcblx0d3JpdGVfRk1UU19iaW4oYmEsIHdiLlNTRik7XG5cdHdyaXRlX0ZPTlRTX2JpbihiYSwgd2IpO1xuXHR3cml0ZV9GSUxMU19iaW4oYmEsIHdiKTtcblx0d3JpdGVfQk9SREVSU19iaW4oYmEsIHdiKTtcblx0d3JpdGVfQ0VMTFNUWUxFWEZTX2JpbihiYSwgd2IpO1xuXHR3cml0ZV9DRUxMWEZTX2JpbihiYSwgb3B0cy5jZWxsWGZzKTtcblx0d3JpdGVfU1RZTEVTX2JpbihiYSwgd2IpO1xuXHR3cml0ZV9EWEZTX2JpbihiYSwgd2IpO1xuXHR3cml0ZV9UQUJMRVNUWUxFU19iaW4oYmEsIHdiKTtcblx0d3JpdGVfQ09MT1JQQUxFVFRFX2JpbihiYSwgd2IpO1xuXHQvKiBGUlRTVFlMRVNIRUVUKi9cblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEVuZFN0eWxlU2hlZXRcIik7XG5cdHJldHVybiBiYS5lbmQoKTtcbn1cblJFTFMuVEhFTUUgPSBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvdGhlbWVcIjtcblxuLyogRXZlbiB0aG91Z2ggdGhlbWUgbGF5b3V0IGlzIGRrMSBsdDEgZGsyIGx0MiwgdHJ1ZSBvcmRlciBpcyBsdDEgZGsxIGx0MiBkazIgKi9cbnZhciBYTFNYVGhlbWVDbHJTY2hlbWUgPSBbXG5cdCc8L2E6bHQxPicsICc8L2E6ZGsxPicsICc8L2E6bHQyPicsICc8L2E6ZGsyPicsXG5cdCc8L2E6YWNjZW50MT4nLCAnPC9hOmFjY2VudDI+JywgJzwvYTphY2NlbnQzPicsXG5cdCc8L2E6YWNjZW50ND4nLCAnPC9hOmFjY2VudDU+JywgJzwvYTphY2NlbnQ2PicsXG5cdCc8L2E6aGxpbms+JywgJzwvYTpmb2xIbGluaz4nXG5dO1xuLyogMjAuMS42LjIgY2xyU2NoZW1lIENUX0NvbG9yU2NoZW1lICovXG5mdW5jdGlvbiBwYXJzZV9jbHJTY2hlbWUodCwgdGhlbWVzLCBvcHRzKSB7XG5cdHRoZW1lcy50aGVtZUVsZW1lbnRzLmNsclNjaGVtZSA9IFtdO1xuXHR2YXIgY29sb3IgPSB7fTtcblx0KHRbMF0ubWF0Y2godGFncmVnZXgpfHxbXSkuZm9yRWFjaChmdW5jdGlvbih4KSB7XG5cdFx0dmFyIHkgPSBwYXJzZXhtbHRhZyh4KTtcblx0XHRzd2l0Y2goeVswXSkge1xuXHRcdFx0LyogMjAuMS42LjIgY2xyU2NoZW1lIChDb2xvciBTY2hlbWUpIENUX0NvbG9yU2NoZW1lICovXG5cdFx0XHRjYXNlICc8YTpjbHJTY2hlbWUnOiBjYXNlICc8L2E6Y2xyU2NoZW1lPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAyMC4xLjIuMy4zMiBzcmdiQ2xyIENUX1NSZ2JDb2xvciAqL1xuXHRcdFx0Y2FzZSAnPGE6c3JnYkNscic6XG5cdFx0XHRcdGNvbG9yLnJnYiA9IHkudmFsOyBicmVhaztcblxuXHRcdFx0LyogMjAuMS4yLjMuMzMgc3lzQ2xyIENUX1N5c3RlbUNvbG9yICovXG5cdFx0XHRjYXNlICc8YTpzeXNDbHInOlxuXHRcdFx0XHRjb2xvci5yZ2IgPSB5Lmxhc3RDbHI7IGJyZWFrO1xuXG5cdFx0XHQvKiAyMC4xLjQuMS4xIGFjY2VudDEgKEFjY2VudCAxKSAqL1xuXHRcdFx0LyogMjAuMS40LjEuMiBhY2NlbnQyIChBY2NlbnQgMikgKi9cblx0XHRcdC8qIDIwLjEuNC4xLjMgYWNjZW50MyAoQWNjZW50IDMpICovXG5cdFx0XHQvKiAyMC4xLjQuMS40IGFjY2VudDQgKEFjY2VudCA0KSAqL1xuXHRcdFx0LyogMjAuMS40LjEuNSBhY2NlbnQ1IChBY2NlbnQgNSkgKi9cblx0XHRcdC8qIDIwLjEuNC4xLjYgYWNjZW50NiAoQWNjZW50IDYpICovXG5cdFx0XHQvKiAyMC4xLjQuMS45IGRrMSAoRGFyayAxKSAqL1xuXHRcdFx0LyogMjAuMS40LjEuMTAgZGsyIChEYXJrIDIpICovXG5cdFx0XHQvKiAyMC4xLjQuMS4xNSBmb2xIbGluayAoRm9sbG93ZWQgSHlwZXJsaW5rKSAqL1xuXHRcdFx0LyogMjAuMS40LjEuMTkgaGxpbmsgKEh5cGVybGluaykgKi9cblx0XHRcdC8qIDIwLjEuNC4xLjIyIGx0MSAoTGlnaHQgMSkgKi9cblx0XHRcdC8qIDIwLjEuNC4xLjIzIGx0MiAoTGlnaHQgMikgKi9cblx0XHRcdGNhc2UgJzxhOmRrMT4nOiBjYXNlICc8L2E6ZGsxPic6XG5cdFx0XHRjYXNlICc8YTpsdDE+JzogY2FzZSAnPC9hOmx0MT4nOlxuXHRcdFx0Y2FzZSAnPGE6ZGsyPic6IGNhc2UgJzwvYTpkazI+Jzpcblx0XHRcdGNhc2UgJzxhOmx0Mj4nOiBjYXNlICc8L2E6bHQyPic6XG5cdFx0XHRjYXNlICc8YTphY2NlbnQxPic6IGNhc2UgJzwvYTphY2NlbnQxPic6XG5cdFx0XHRjYXNlICc8YTphY2NlbnQyPic6IGNhc2UgJzwvYTphY2NlbnQyPic6XG5cdFx0XHRjYXNlICc8YTphY2NlbnQzPic6IGNhc2UgJzwvYTphY2NlbnQzPic6XG5cdFx0XHRjYXNlICc8YTphY2NlbnQ0Pic6IGNhc2UgJzwvYTphY2NlbnQ0Pic6XG5cdFx0XHRjYXNlICc8YTphY2NlbnQ1Pic6IGNhc2UgJzwvYTphY2NlbnQ1Pic6XG5cdFx0XHRjYXNlICc8YTphY2NlbnQ2Pic6IGNhc2UgJzwvYTphY2NlbnQ2Pic6XG5cdFx0XHRjYXNlICc8YTpobGluaz4nOiBjYXNlICc8L2E6aGxpbms+Jzpcblx0XHRcdGNhc2UgJzxhOmZvbEhsaW5rPic6IGNhc2UgJzwvYTpmb2xIbGluaz4nOlxuXHRcdFx0XHRpZiAoeVswXS5jaGFyQXQoMSkgPT09ICcvJykge1xuXHRcdFx0XHRcdHRoZW1lcy50aGVtZUVsZW1lbnRzLmNsclNjaGVtZVtYTFNYVGhlbWVDbHJTY2hlbWUuaW5kZXhPZih5WzBdKV0gPSBjb2xvcjtcblx0XHRcdFx0XHRjb2xvciA9IHt9O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbG9yLm5hbWUgPSB5WzBdLnNsaWNlKDMsIHlbMF0ubGVuZ3RoIC0gMSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6IGlmKG9wdHMgJiYgb3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcignVW5yZWNvZ25pemVkICcgKyB5WzBdICsgJyBpbiBjbHJTY2hlbWUnKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vKiAyMC4xLjQuMS4xOCBmb250U2NoZW1lIENUX0ZvbnRTY2hlbWUgKi9cbmZ1bmN0aW9uIHBhcnNlX2ZvbnRTY2hlbWUoKSB7IH1cblxuLyogMjAuMS40LjEuMTUgZm10U2NoZW1lIENUX1N0eWxlTWF0cml4ICovXG5mdW5jdGlvbiBwYXJzZV9mbXRTY2hlbWUoKSB7IH1cblxudmFyIGNscnNyZWdleCA9IC88YTpjbHJTY2hlbWUoW14+XSopPltcXHNcXFNdKjxcXC9hOmNsclNjaGVtZT4vO1xudmFyIGZudHNyZWdleCA9IC88YTpmb250U2NoZW1lKFtePl0qKT5bXFxzXFxTXSo8XFwvYTpmb250U2NoZW1lPi87XG52YXIgZm10c3JlZ2V4ID0gLzxhOmZtdFNjaGVtZShbXj5dKik+W1xcc1xcU10qPFxcL2E6Zm10U2NoZW1lPi87XG5cbi8qIDIwLjEuNi4xMCB0aGVtZUVsZW1lbnRzIENUX0Jhc2VTdHlsZXMgKi9cbmZ1bmN0aW9uIHBhcnNlX3RoZW1lRWxlbWVudHMoZGF0YSwgdGhlbWVzLCBvcHRzKSB7XG5cdHRoZW1lcy50aGVtZUVsZW1lbnRzID0ge307XG5cblx0dmFyIHQ7XG5cblx0W1xuXHRcdC8qIGNsclNjaGVtZSBDVF9Db2xvclNjaGVtZSAqL1xuXHRcdFsnY2xyU2NoZW1lJywgY2xyc3JlZ2V4LCBwYXJzZV9jbHJTY2hlbWVdLFxuXHRcdC8qIGZvbnRTY2hlbWUgQ1RfRm9udFNjaGVtZSAqL1xuXHRcdFsnZm9udFNjaGVtZScsIGZudHNyZWdleCwgcGFyc2VfZm9udFNjaGVtZV0sXG5cdFx0LyogZm10U2NoZW1lIENUX1N0eWxlTWF0cml4ICovXG5cdFx0WydmbXRTY2hlbWUnLCBmbXRzcmVnZXgsIHBhcnNlX2ZtdFNjaGVtZV1cblx0XS5mb3JFYWNoKGZ1bmN0aW9uKG0pIHtcblx0XHRpZighKHQ9ZGF0YS5tYXRjaChtWzFdKSkpIHRocm93IG5ldyBFcnJvcihtWzBdICsgJyBub3QgZm91bmQgaW4gdGhlbWVFbGVtZW50cycpO1xuXHRcdG1bMl0odCwgdGhlbWVzLCBvcHRzKTtcblx0fSk7XG59XG5cbnZhciB0aGVtZWx0cmVnZXggPSAvPGE6dGhlbWVFbGVtZW50cyhbXj5dKik+W1xcc1xcU10qPFxcL2E6dGhlbWVFbGVtZW50cz4vO1xuXG4vKiAxNC4yLjcgVGhlbWUgUGFydCAqL1xuZnVuY3Rpb24gcGFyc2VfdGhlbWVfeG1sKGRhdGEsIG9wdHMpIHtcblx0LyogMjAuMS42LjkgdGhlbWUgQ1RfT2ZmaWNlU3R5bGVTaGVldCAqL1xuXHRpZighZGF0YSB8fCBkYXRhLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHBhcnNlX3RoZW1lX3htbCh3cml0ZV90aGVtZSgpKTtcblxuXHR2YXIgdDtcblx0dmFyIHRoZW1lcyA9IHt9O1xuXG5cdC8qIHRoZW1lRWxlbWVudHMgQ1RfQmFzZVN0eWxlcyAqL1xuXHRpZighKHQ9ZGF0YS5tYXRjaCh0aGVtZWx0cmVnZXgpKSkgdGhyb3cgbmV3IEVycm9yKCd0aGVtZUVsZW1lbnRzIG5vdCBmb3VuZCBpbiB0aGVtZScpO1xuXHRwYXJzZV90aGVtZUVsZW1lbnRzKHRbMF0sIHRoZW1lcywgb3B0cyk7XG5cdHRoZW1lcy5yYXcgPSBkYXRhO1xuXHRyZXR1cm4gdGhlbWVzO1xufVxuXG5mdW5jdGlvbiB3cml0ZV90aGVtZShUaGVtZXMsIG9wdHMpIHtcblx0aWYob3B0cyAmJiBvcHRzLnRoZW1lWExTWCkgcmV0dXJuIG9wdHMudGhlbWVYTFNYO1xuXHRpZihUaGVtZXMgJiYgdHlwZW9mIFRoZW1lcy5yYXcgPT0gXCJzdHJpbmdcIikgcmV0dXJuIFRoZW1lcy5yYXc7XG5cdHZhciBvID0gW1hNTF9IRUFERVJdO1xuXHRvW28ubGVuZ3RoXSA9ICc8YTp0aGVtZSB4bWxuczphPVwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL2RyYXdpbmdtbC8yMDA2L21haW5cIiBuYW1lPVwiT2ZmaWNlIFRoZW1lXCI+Jztcblx0b1tvLmxlbmd0aF0gPSAgJzxhOnRoZW1lRWxlbWVudHM+JztcblxuXHRvW28ubGVuZ3RoXSA9ICAgJzxhOmNsclNjaGVtZSBuYW1lPVwiT2ZmaWNlXCI+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAnPGE6ZGsxPjxhOnN5c0NsciB2YWw9XCJ3aW5kb3dUZXh0XCIgbGFzdENscj1cIjAwMDAwMFwiLz48L2E6ZGsxPic7XG5cdG9bby5sZW5ndGhdID0gICAgJzxhOmx0MT48YTpzeXNDbHIgdmFsPVwid2luZG93XCIgbGFzdENscj1cIkZGRkZGRlwiLz48L2E6bHQxPic7XG5cdG9bby5sZW5ndGhdID0gICAgJzxhOmRrMj48YTpzcmdiQ2xyIHZhbD1cIjFGNDk3RFwiLz48L2E6ZGsyPic7XG5cdG9bby5sZW5ndGhdID0gICAgJzxhOmx0Mj48YTpzcmdiQ2xyIHZhbD1cIkVFRUNFMVwiLz48L2E6bHQyPic7XG5cdG9bby5sZW5ndGhdID0gICAgJzxhOmFjY2VudDE+PGE6c3JnYkNsciB2YWw9XCI0RjgxQkRcIi8+PC9hOmFjY2VudDE+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAnPGE6YWNjZW50Mj48YTpzcmdiQ2xyIHZhbD1cIkMwNTA0RFwiLz48L2E6YWNjZW50Mj4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICc8YTphY2NlbnQzPjxhOnNyZ2JDbHIgdmFsPVwiOUJCQjU5XCIvPjwvYTphY2NlbnQzPic7XG5cdG9bby5sZW5ndGhdID0gICAgJzxhOmFjY2VudDQ+PGE6c3JnYkNsciB2YWw9XCI4MDY0QTJcIi8+PC9hOmFjY2VudDQ+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAnPGE6YWNjZW50NT48YTpzcmdiQ2xyIHZhbD1cIjRCQUNDNlwiLz48L2E6YWNjZW50NT4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICc8YTphY2NlbnQ2PjxhOnNyZ2JDbHIgdmFsPVwiRjc5NjQ2XCIvPjwvYTphY2NlbnQ2Pic7XG5cdG9bby5sZW5ndGhdID0gICAgJzxhOmhsaW5rPjxhOnNyZ2JDbHIgdmFsPVwiMDAwMEZGXCIvPjwvYTpobGluaz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICc8YTpmb2xIbGluaz48YTpzcmdiQ2xyIHZhbD1cIjgwMDA4MFwiLz48L2E6Zm9sSGxpbms+Jztcblx0b1tvLmxlbmd0aF0gPSAgICc8L2E6Y2xyU2NoZW1lPic7XG5cblx0b1tvLmxlbmd0aF0gPSAgICc8YTpmb250U2NoZW1lIG5hbWU9XCJPZmZpY2VcIj4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICc8YTptYWpvckZvbnQ+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmxhdGluIHR5cGVmYWNlPVwiQ2FtYnJpYVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6ZWEgdHlwZWZhY2U9XCJcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmNzIHR5cGVmYWNlPVwiXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkpwYW5cIiB0eXBlZmFjZT1cIu+8re+8syDvvLDjgrTjgrfjg4Pjgq9cIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiSGFuZ1wiIHR5cGVmYWNlPVwi66eR7J2AIOqzoOuUlVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJIYW5zXCIgdHlwZWZhY2U9XCLlrovkvZNcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiSGFudFwiIHR5cGVmYWNlPVwi5paw57Sw5piO6auUXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkFyYWJcIiB0eXBlZmFjZT1cIlRpbWVzIE5ldyBSb21hblwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJIZWJyXCIgdHlwZWZhY2U9XCJUaW1lcyBOZXcgUm9tYW5cIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiVGhhaVwiIHR5cGVmYWNlPVwiVGFob21hXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkV0aGlcIiB0eXBlZmFjZT1cIk55YWxhXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkJlbmdcIiB0eXBlZmFjZT1cIlZyaW5kYVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJHdWpyXCIgdHlwZWZhY2U9XCJTaHJ1dGlcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiS2htclwiIHR5cGVmYWNlPVwiTW9vbEJvcmFuXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIktuZGFcIiB0eXBlZmFjZT1cIlR1bmdhXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkd1cnVcIiB0eXBlZmFjZT1cIlJhYXZpXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkNhbnNcIiB0eXBlZmFjZT1cIkV1cGhlbWlhXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkNoZXJcIiB0eXBlZmFjZT1cIlBsYW50YWdlbmV0IENoZXJva2VlXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIllpaWlcIiB0eXBlZmFjZT1cIk1pY3Jvc29mdCBZaSBCYWl0aVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJUaWJ0XCIgdHlwZWZhY2U9XCJNaWNyb3NvZnQgSGltYWxheWFcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiVGhhYVwiIHR5cGVmYWNlPVwiTVYgQm9saVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJEZXZhXCIgdHlwZWZhY2U9XCJNYW5nYWxcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiVGVsdVwiIHR5cGVmYWNlPVwiR2F1dGFtaVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJUYW1sXCIgdHlwZWZhY2U9XCJMYXRoYVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJTeXJjXCIgdHlwZWZhY2U9XCJFc3RyYW5nZWxvIEVkZXNzYVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJPcnlhXCIgdHlwZWZhY2U9XCJLYWxpbmdhXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIk1seW1cIiB0eXBlZmFjZT1cIkthcnRpa2FcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiTGFvb1wiIHR5cGVmYWNlPVwiRG9rQ2hhbXBhXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIlNpbmhcIiB0eXBlZmFjZT1cIklza29vbGEgUG90YVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJNb25nXCIgdHlwZWZhY2U9XCJNb25nb2xpYW4gQmFpdGlcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiVmlldFwiIHR5cGVmYWNlPVwiVGltZXMgTmV3IFJvbWFuXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIlVpZ2hcIiB0eXBlZmFjZT1cIk1pY3Jvc29mdCBVaWdodXJcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiR2VvclwiIHR5cGVmYWNlPVwiU3lsZmFlblwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICc8L2E6bWFqb3JGb250Pic7XG5cdG9bby5sZW5ndGhdID0gICAgJzxhOm1pbm9yRm9udD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6bGF0aW4gdHlwZWZhY2U9XCJDYWxpYnJpXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTplYSB0eXBlZmFjZT1cIlwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Y3MgdHlwZWZhY2U9XCJcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiSnBhblwiIHR5cGVmYWNlPVwi77yt77yzIO+8sOOCtOOCt+ODg+OCr1wiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJIYW5nXCIgdHlwZWZhY2U9XCLrp5HsnYAg6rOg65SVXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkhhbnNcIiB0eXBlZmFjZT1cIuWui+S9k1wiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJIYW50XCIgdHlwZWZhY2U9XCLmlrDntLDmmI7pq5RcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiQXJhYlwiIHR5cGVmYWNlPVwiQXJpYWxcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiSGViclwiIHR5cGVmYWNlPVwiQXJpYWxcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiVGhhaVwiIHR5cGVmYWNlPVwiVGFob21hXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkV0aGlcIiB0eXBlZmFjZT1cIk55YWxhXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkJlbmdcIiB0eXBlZmFjZT1cIlZyaW5kYVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJHdWpyXCIgdHlwZWZhY2U9XCJTaHJ1dGlcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiS2htclwiIHR5cGVmYWNlPVwiRGF1blBlbmhcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiS25kYVwiIHR5cGVmYWNlPVwiVHVuZ2FcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiR3VydVwiIHR5cGVmYWNlPVwiUmFhdmlcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiQ2Fuc1wiIHR5cGVmYWNlPVwiRXVwaGVtaWFcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiQ2hlclwiIHR5cGVmYWNlPVwiUGxhbnRhZ2VuZXQgQ2hlcm9rZWVcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiWWlpaVwiIHR5cGVmYWNlPVwiTWljcm9zb2Z0IFlpIEJhaXRpXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIlRpYnRcIiB0eXBlZmFjZT1cIk1pY3Jvc29mdCBIaW1hbGF5YVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJUaGFhXCIgdHlwZWZhY2U9XCJNViBCb2xpXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkRldmFcIiB0eXBlZmFjZT1cIk1hbmdhbFwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJUZWx1XCIgdHlwZWZhY2U9XCJHYXV0YW1pXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIlRhbWxcIiB0eXBlZmFjZT1cIkxhdGhhXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIlN5cmNcIiB0eXBlZmFjZT1cIkVzdHJhbmdlbG8gRWRlc3NhXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIk9yeWFcIiB0eXBlZmFjZT1cIkthbGluZ2FcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiTWx5bVwiIHR5cGVmYWNlPVwiS2FydGlrYVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJMYW9vXCIgdHlwZWZhY2U9XCJEb2tDaGFtcGFcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiU2luaFwiIHR5cGVmYWNlPVwiSXNrb29sYSBQb3RhXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIk1vbmdcIiB0eXBlZmFjZT1cIk1vbmdvbGlhbiBCYWl0aVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJWaWV0XCIgdHlwZWZhY2U9XCJBcmlhbFwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJVaWdoXCIgdHlwZWZhY2U9XCJNaWNyb3NvZnQgVWlnaHVyXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkdlb3JcIiB0eXBlZmFjZT1cIlN5bGZhZW5cIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAnPC9hOm1pbm9yRm9udD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgJzwvYTpmb250U2NoZW1lPic7XG5cblx0b1tvLmxlbmd0aF0gPSAgICc8YTpmbXRTY2hlbWUgbmFtZT1cIk9mZmljZVwiPic7XG5cdG9bby5sZW5ndGhdID0gICAgJzxhOmZpbGxTdHlsZUxzdD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6c29saWRGaWxsPjxhOnNjaGVtZUNsciB2YWw9XCJwaENsclwiLz48L2E6c29saWRGaWxsPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpncmFkRmlsbCByb3RXaXRoU2hhcGU9XCIxXCI+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICc8YTpnc0xzdD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAgICc8YTpncyBwb3M9XCIwXCI+PGE6c2NoZW1lQ2xyIHZhbD1cInBoQ2xyXCI+PGE6dGludCB2YWw9XCI1MDAwMFwiLz48YTpzYXRNb2QgdmFsPVwiMzAwMDAwXCIvPjwvYTpzY2hlbWVDbHI+PC9hOmdzPic7XG5cdG9bby5sZW5ndGhdID0gICAgICAgJzxhOmdzIHBvcz1cIjM1MDAwXCI+PGE6c2NoZW1lQ2xyIHZhbD1cInBoQ2xyXCI+PGE6dGludCB2YWw9XCIzNzAwMFwiLz48YTpzYXRNb2QgdmFsPVwiMzAwMDAwXCIvPjwvYTpzY2hlbWVDbHI+PC9hOmdzPic7XG5cdG9bby5sZW5ndGhdID0gICAgICAgJzxhOmdzIHBvcz1cIjEwMDAwMFwiPjxhOnNjaGVtZUNsciB2YWw9XCJwaENsclwiPjxhOnRpbnQgdmFsPVwiMTUwMDBcIi8+PGE6c2F0TW9kIHZhbD1cIjM1MDAwMFwiLz48L2E6c2NoZW1lQ2xyPjwvYTpncz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAgJzwvYTpnc0xzdD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAgJzxhOmxpbiBhbmc9XCIxNjIwMDAwMFwiIHNjYWxlZD1cIjFcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzwvYTpncmFkRmlsbD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Z3JhZEZpbGwgcm90V2l0aFNoYXBlPVwiMVwiPic7XG5cdG9bby5sZW5ndGhdID0gICAgICAnPGE6Z3NMc3Q+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICAnPGE6Z3MgcG9zPVwiMFwiPjxhOnNjaGVtZUNsciB2YWw9XCJwaENsclwiPjxhOnRpbnQgdmFsPVwiMTAwMDAwXCIvPjxhOnNoYWRlIHZhbD1cIjEwMDAwMFwiLz48YTpzYXRNb2QgdmFsPVwiMTMwMDAwXCIvPjwvYTpzY2hlbWVDbHI+PC9hOmdzPic7XG5cdG9bby5sZW5ndGhdID0gICAgICAgJzxhOmdzIHBvcz1cIjEwMDAwMFwiPjxhOnNjaGVtZUNsciB2YWw9XCJwaENsclwiPjxhOnRpbnQgdmFsPVwiNTAwMDBcIi8+PGE6c2hhZGUgdmFsPVwiMTAwMDAwXCIvPjxhOnNhdE1vZCB2YWw9XCIzNTAwMDBcIi8+PC9hOnNjaGVtZUNscj48L2E6Z3M+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICc8L2E6Z3NMc3Q+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICc8YTpsaW4gYW5nPVwiMTYyMDAwMDBcIiBzY2FsZWQ9XCIwXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8L2E6Z3JhZEZpbGw+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAnPC9hOmZpbGxTdHlsZUxzdD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICc8YTpsblN0eWxlTHN0Pic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpsbiB3PVwiOTUyNVwiIGNhcD1cImZsYXRcIiBjbXBkPVwic25nXCIgYWxnbj1cImN0clwiPjxhOnNvbGlkRmlsbD48YTpzY2hlbWVDbHIgdmFsPVwicGhDbHJcIj48YTpzaGFkZSB2YWw9XCI5NTAwMFwiLz48YTpzYXRNb2QgdmFsPVwiMTA1MDAwXCIvPjwvYTpzY2hlbWVDbHI+PC9hOnNvbGlkRmlsbD48YTpwcnN0RGFzaCB2YWw9XCJzb2xpZFwiLz48L2E6bG4+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmxuIHc9XCIyNTQwMFwiIGNhcD1cImZsYXRcIiBjbXBkPVwic25nXCIgYWxnbj1cImN0clwiPjxhOnNvbGlkRmlsbD48YTpzY2hlbWVDbHIgdmFsPVwicGhDbHJcIi8+PC9hOnNvbGlkRmlsbD48YTpwcnN0RGFzaCB2YWw9XCJzb2xpZFwiLz48L2E6bG4+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmxuIHc9XCIzODEwMFwiIGNhcD1cImZsYXRcIiBjbXBkPVwic25nXCIgYWxnbj1cImN0clwiPjxhOnNvbGlkRmlsbD48YTpzY2hlbWVDbHIgdmFsPVwicGhDbHJcIi8+PC9hOnNvbGlkRmlsbD48YTpwcnN0RGFzaCB2YWw9XCJzb2xpZFwiLz48L2E6bG4+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAnPC9hOmxuU3R5bGVMc3Q+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAnPGE6ZWZmZWN0U3R5bGVMc3Q+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmVmZmVjdFN0eWxlPic7XG5cdG9bby5sZW5ndGhdID0gICAgICAnPGE6ZWZmZWN0THN0Pic7XG5cdG9bby5sZW5ndGhdID0gICAgICAgJzxhOm91dGVyU2hkdyBibHVyUmFkPVwiNDAwMDBcIiBkaXN0PVwiMjAwMDBcIiBkaXI9XCI1NDAwMDAwXCIgcm90V2l0aFNoYXBlPVwiMFwiPjxhOnNyZ2JDbHIgdmFsPVwiMDAwMDAwXCI+PGE6YWxwaGEgdmFsPVwiMzgwMDBcIi8+PC9hOnNyZ2JDbHI+PC9hOm91dGVyU2hkdz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAgJzwvYTplZmZlY3RMc3Q+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzwvYTplZmZlY3RTdHlsZT4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6ZWZmZWN0U3R5bGU+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICc8YTplZmZlY3RMc3Q+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICAnPGE6b3V0ZXJTaGR3IGJsdXJSYWQ9XCI0MDAwMFwiIGRpc3Q9XCIyMzAwMFwiIGRpcj1cIjU0MDAwMDBcIiByb3RXaXRoU2hhcGU9XCIwXCI+PGE6c3JnYkNsciB2YWw9XCIwMDAwMDBcIj48YTphbHBoYSB2YWw9XCIzNTAwMFwiLz48L2E6c3JnYkNscj48L2E6b3V0ZXJTaGR3Pic7XG5cdG9bby5sZW5ndGhdID0gICAgICAnPC9hOmVmZmVjdExzdD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPC9hOmVmZmVjdFN0eWxlPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTplZmZlY3RTdHlsZT4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAgJzxhOmVmZmVjdExzdD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAgICc8YTpvdXRlclNoZHcgYmx1clJhZD1cIjQwMDAwXCIgZGlzdD1cIjIzMDAwXCIgZGlyPVwiNTQwMDAwMFwiIHJvdFdpdGhTaGFwZT1cIjBcIj48YTpzcmdiQ2xyIHZhbD1cIjAwMDAwMFwiPjxhOmFscGhhIHZhbD1cIjM1MDAwXCIvPjwvYTpzcmdiQ2xyPjwvYTpvdXRlclNoZHc+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICc8L2E6ZWZmZWN0THN0Pic7XG5cdG9bby5sZW5ndGhdID0gICAgICAnPGE6c2NlbmUzZD48YTpjYW1lcmEgcHJzdD1cIm9ydGhvZ3JhcGhpY0Zyb250XCI+PGE6cm90IGxhdD1cIjBcIiBsb249XCIwXCIgcmV2PVwiMFwiLz48L2E6Y2FtZXJhPjxhOmxpZ2h0UmlnIHJpZz1cInRocmVlUHRcIiBkaXI9XCJ0XCI+PGE6cm90IGxhdD1cIjBcIiBsb249XCIwXCIgcmV2PVwiMTIwMDAwMFwiLz48L2E6bGlnaHRSaWc+PC9hOnNjZW5lM2Q+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICc8YTpzcDNkPjxhOmJldmVsVCB3PVwiNjM1MDBcIiBoPVwiMjU0MDBcIi8+PC9hOnNwM2Q+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzwvYTplZmZlY3RTdHlsZT4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICc8L2E6ZWZmZWN0U3R5bGVMc3Q+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAnPGE6YmdGaWxsU3R5bGVMc3Q+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOnNvbGlkRmlsbD48YTpzY2hlbWVDbHIgdmFsPVwicGhDbHJcIi8+PC9hOnNvbGlkRmlsbD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Z3JhZEZpbGwgcm90V2l0aFNoYXBlPVwiMVwiPic7XG5cdG9bby5sZW5ndGhdID0gICAgICAnPGE6Z3NMc3Q+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICAnPGE6Z3MgcG9zPVwiMFwiPjxhOnNjaGVtZUNsciB2YWw9XCJwaENsclwiPjxhOnRpbnQgdmFsPVwiNDAwMDBcIi8+PGE6c2F0TW9kIHZhbD1cIjM1MDAwMFwiLz48L2E6c2NoZW1lQ2xyPjwvYTpncz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAgICc8YTpncyBwb3M9XCI0MDAwMFwiPjxhOnNjaGVtZUNsciB2YWw9XCJwaENsclwiPjxhOnRpbnQgdmFsPVwiNDUwMDBcIi8+PGE6c2hhZGUgdmFsPVwiOTkwMDBcIi8+PGE6c2F0TW9kIHZhbD1cIjM1MDAwMFwiLz48L2E6c2NoZW1lQ2xyPjwvYTpncz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAgICc8YTpncyBwb3M9XCIxMDAwMDBcIj48YTpzY2hlbWVDbHIgdmFsPVwicGhDbHJcIj48YTpzaGFkZSB2YWw9XCIyMDAwMFwiLz48YTpzYXRNb2QgdmFsPVwiMjU1MDAwXCIvPjwvYTpzY2hlbWVDbHI+PC9hOmdzPic7XG5cdG9bby5sZW5ndGhdID0gICAgICAnPC9hOmdzTHN0Pic7XG5cdG9bby5sZW5ndGhdID0gICAgICAnPGE6cGF0aCBwYXRoPVwiY2lyY2xlXCI+PGE6ZmlsbFRvUmVjdCBsPVwiNTAwMDBcIiB0PVwiLTgwMDAwXCIgcj1cIjUwMDAwXCIgYj1cIjE4MDAwMFwiLz48L2E6cGF0aD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPC9hOmdyYWRGaWxsPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpncmFkRmlsbCByb3RXaXRoU2hhcGU9XCIxXCI+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICc8YTpnc0xzdD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAgICc8YTpncyBwb3M9XCIwXCI+PGE6c2NoZW1lQ2xyIHZhbD1cInBoQ2xyXCI+PGE6dGludCB2YWw9XCI4MDAwMFwiLz48YTpzYXRNb2QgdmFsPVwiMzAwMDAwXCIvPjwvYTpzY2hlbWVDbHI+PC9hOmdzPic7XG5cdG9bby5sZW5ndGhdID0gICAgICAgJzxhOmdzIHBvcz1cIjEwMDAwMFwiPjxhOnNjaGVtZUNsciB2YWw9XCJwaENsclwiPjxhOnNoYWRlIHZhbD1cIjMwMDAwXCIvPjxhOnNhdE1vZCB2YWw9XCIyMDAwMDBcIi8+PC9hOnNjaGVtZUNscj48L2E6Z3M+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICc8L2E6Z3NMc3Q+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICc8YTpwYXRoIHBhdGg9XCJjaXJjbGVcIj48YTpmaWxsVG9SZWN0IGw9XCI1MDAwMFwiIHQ9XCI1MDAwMFwiIHI9XCI1MDAwMFwiIGI9XCI1MDAwMFwiLz48L2E6cGF0aD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPC9hOmdyYWRGaWxsPic7XG5cdG9bby5sZW5ndGhdID0gICAgJzwvYTpiZ0ZpbGxTdHlsZUxzdD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgJzwvYTpmbXRTY2hlbWU+Jztcblx0b1tvLmxlbmd0aF0gPSAgJzwvYTp0aGVtZUVsZW1lbnRzPic7XG5cblx0b1tvLmxlbmd0aF0gPSAgJzxhOm9iamVjdERlZmF1bHRzPic7XG5cdG9bby5sZW5ndGhdID0gICAnPGE6c3BEZWY+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAnPGE6c3BQci8+PGE6Ym9keVByLz48YTpsc3RTdHlsZS8+PGE6c3R5bGU+PGE6bG5SZWYgaWR4PVwiMVwiPjxhOnNjaGVtZUNsciB2YWw9XCJhY2NlbnQxXCIvPjwvYTpsblJlZj48YTpmaWxsUmVmIGlkeD1cIjNcIj48YTpzY2hlbWVDbHIgdmFsPVwiYWNjZW50MVwiLz48L2E6ZmlsbFJlZj48YTplZmZlY3RSZWYgaWR4PVwiMlwiPjxhOnNjaGVtZUNsciB2YWw9XCJhY2NlbnQxXCIvPjwvYTplZmZlY3RSZWY+PGE6Zm9udFJlZiBpZHg9XCJtaW5vclwiPjxhOnNjaGVtZUNsciB2YWw9XCJsdDFcIi8+PC9hOmZvbnRSZWY+PC9hOnN0eWxlPic7XG5cdG9bby5sZW5ndGhdID0gICAnPC9hOnNwRGVmPic7XG5cdG9bby5sZW5ndGhdID0gICAnPGE6bG5EZWY+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAnPGE6c3BQci8+PGE6Ym9keVByLz48YTpsc3RTdHlsZS8+PGE6c3R5bGU+PGE6bG5SZWYgaWR4PVwiMlwiPjxhOnNjaGVtZUNsciB2YWw9XCJhY2NlbnQxXCIvPjwvYTpsblJlZj48YTpmaWxsUmVmIGlkeD1cIjBcIj48YTpzY2hlbWVDbHIgdmFsPVwiYWNjZW50MVwiLz48L2E6ZmlsbFJlZj48YTplZmZlY3RSZWYgaWR4PVwiMVwiPjxhOnNjaGVtZUNsciB2YWw9XCJhY2NlbnQxXCIvPjwvYTplZmZlY3RSZWY+PGE6Zm9udFJlZiBpZHg9XCJtaW5vclwiPjxhOnNjaGVtZUNsciB2YWw9XCJ0eDFcIi8+PC9hOmZvbnRSZWY+PC9hOnN0eWxlPic7XG5cdG9bby5sZW5ndGhdID0gICAnPC9hOmxuRGVmPic7XG5cdG9bby5sZW5ndGhdID0gICc8L2E6b2JqZWN0RGVmYXVsdHM+Jztcblx0b1tvLmxlbmd0aF0gPSAgJzxhOmV4dHJhQ2xyU2NoZW1lTHN0Lz4nO1xuXHRvW28ubGVuZ3RoXSA9ICc8L2E6dGhlbWU+Jztcblx0cmV0dXJuIG8uam9pbihcIlwiKTtcbn1cbi8qIFtNUy1YTFNdIDIuNC4zMjYgVE9ETzogcGF5bG9hZCBpcyBhIHppcCBmaWxlICovXG5mdW5jdGlvbiBwYXJzZV9UaGVtZShibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIGVuZCA9IGJsb2IubCArIGxlbmd0aDtcblx0dmFyIGR3VGhlbWVWZXJzaW9uID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRpZihkd1RoZW1lVmVyc2lvbiA9PT0gMTI0MjI2KSByZXR1cm47XG5cdGlmKCFvcHRzLmNlbGxTdHlsZXMpIHsgYmxvYi5sID0gZW5kOyByZXR1cm47IH1cblx0dmFyIGRhdGEgPSBibG9iLnNsaWNlKGJsb2IubCk7XG5cdGJsb2IubCA9IGVuZDtcblx0dmFyIHppcDsgdHJ5IHsgemlwID0gemlwX3JlYWQoZGF0YSwge3R5cGU6IFwiYXJyYXlcIn0pOyB9IGNhdGNoKGUpIHsgcmV0dXJuOyB9XG5cdHZhciB0aGVtZVhNTCA9IGdldHppcHN0cih6aXAsIFwidGhlbWUvdGhlbWUvdGhlbWUxLnhtbFwiLCB0cnVlKTtcblx0aWYoIXRoZW1lWE1MKSByZXR1cm47XG5cdHJldHVybiBwYXJzZV90aGVtZV94bWwodGhlbWVYTUwsIG9wdHMpO1xufVxuXG4vKiAyLjUuNDkgKi9cbmZ1bmN0aW9uIHBhcnNlX0NvbG9yVGhlbWUoYmxvYikgeyByZXR1cm4gYmxvYi5yZWFkX3NoaWZ0KDQpOyB9XG5cbi8qIDIuNS4xNTUgKi9cbmZ1bmN0aW9uIHBhcnNlX0Z1bGxDb2xvckV4dChibG9iKSB7XG5cdHZhciBvID0ge307XG5cdG8ueGNsclR5cGUgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdG8ublRpbnRTaGFkZSA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0c3dpdGNoKG8ueGNsclR5cGUpIHtcblx0XHRjYXNlIDA6IGJsb2IubCArPSA0OyBicmVhaztcblx0XHRjYXNlIDE6IG8ueGNsclZhbHVlID0gcGFyc2VfSWN2WEYoYmxvYiwgNCk7IGJyZWFrO1xuXHRcdGNhc2UgMjogby54Y2xyVmFsdWUgPSBwYXJzZV9Mb25nUkdCQShibG9iLCA0KTsgYnJlYWs7XG5cdFx0Y2FzZSAzOiBvLnhjbHJWYWx1ZSA9IHBhcnNlX0NvbG9yVGhlbWUoYmxvYiwgNCk7IGJyZWFrO1xuXHRcdGNhc2UgNDogYmxvYi5sICs9IDQ7IGJyZWFrO1xuXHR9XG5cdGJsb2IubCArPSA4O1xuXHRyZXR1cm4gbztcbn1cblxuLyogMi41LjE2NCBUT0RPOiByZWFkIDcgYml0cyovXG5mdW5jdGlvbiBwYXJzZV9JY3ZYRihibG9iLCBsZW5ndGgpIHtcblx0cmV0dXJuIHBhcnNlbm9vcChibG9iLCBsZW5ndGgpO1xufVxuXG4vKiAyLjUuMjgwICovXG5mdW5jdGlvbiBwYXJzZV9YRkV4dEdyYWRpZW50KGJsb2IsIGxlbmd0aCkge1xuXHRyZXR1cm4gcGFyc2Vub29wKGJsb2IsIGxlbmd0aCk7XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xMDggKi9cbmZ1bmN0aW9uIHBhcnNlX0V4dFByb3AoYmxvYikge1xuXHR2YXIgZXh0VHlwZSA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIGNiID0gYmxvYi5yZWFkX3NoaWZ0KDIpIC0gNDtcblx0dmFyIG8gPSBbZXh0VHlwZV07XG5cdHN3aXRjaChleHRUeXBlKSB7XG5cdFx0Y2FzZSAweDA0OiBjYXNlIDB4MDU6IGNhc2UgMHgwNzogY2FzZSAweDA4OlxuXHRcdGNhc2UgMHgwOTogY2FzZSAweDBBOiBjYXNlIDB4MEI6IGNhc2UgMHgwRDpcblx0XHRcdG9bMV0gPSBwYXJzZV9GdWxsQ29sb3JFeHQoYmxvYiwgY2IpOyBicmVhaztcblx0XHRjYXNlIDB4MDY6IG9bMV0gPSBwYXJzZV9YRkV4dEdyYWRpZW50KGJsb2IsIGNiKTsgYnJlYWs7XG5cdFx0Y2FzZSAweDBFOiBjYXNlIDB4MEY6IG9bMV0gPSBibG9iLnJlYWRfc2hpZnQoY2IgPT09IDEgPyAxIDogMik7IGJyZWFrO1xuXHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCBFeHRQcm9wIHR5cGU6IFwiICsgZXh0VHlwZSArIFwiIFwiICsgY2IpO1xuXHR9XG5cdHJldHVybiBvO1xufVxuXG4vKiAyLjQuMzU1ICovXG5mdW5jdGlvbiBwYXJzZV9YRkV4dChibG9iLCBsZW5ndGgpIHtcblx0dmFyIGVuZCA9IGJsb2IubCArIGxlbmd0aDtcblx0YmxvYi5sICs9IDI7XG5cdHZhciBpeGZlID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgKz0gMjtcblx0dmFyIGNleHRzID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgZXh0ID0gW107XG5cdHdoaWxlKGNleHRzLS0gPiAwKSBleHQucHVzaChwYXJzZV9FeHRQcm9wKGJsb2IsIGVuZC1ibG9iLmwpKTtcblx0cmV0dXJuIHtpeGZlOml4ZmUsIGV4dDpleHR9O1xufVxuXG4vKiB4ZiBpcyBhbiBYRiwgc2VlIHBhcnNlX1hGRXh0IGZvciB4ZmV4dCAqL1xuZnVuY3Rpb24gdXBkYXRlX3hmZXh0KHhmLCB4ZmV4dCkge1xuXHR4ZmV4dC5mb3JFYWNoKGZ1bmN0aW9uKHhmZSkge1xuXHRcdHN3aXRjaCh4ZmVbMF0pIHsgLyogMi41LjEwOCBleHRQcm9wRGF0YSAqL1xuXHRcdFx0Y2FzZSAweDA0OiBicmVhazsgLyogZm9yZWdyb3VuZCBjb2xvciAqL1xuXHRcdFx0Y2FzZSAweDA1OiBicmVhazsgLyogYmFja2dyb3VuZCBjb2xvciAqL1xuXHRcdFx0Y2FzZSAweDA2OiBicmVhazsgLyogZ3JhZGllbnQgZmlsbCAqL1xuXHRcdFx0Y2FzZSAweDA3OiBicmVhazsgLyogdG9wIGNlbGwgYm9yZGVyIGNvbG9yICovXG5cdFx0XHRjYXNlIDB4MDg6IGJyZWFrOyAvKiBib3R0b20gY2VsbCBib3JkZXIgY29sb3IgKi9cblx0XHRcdGNhc2UgMHgwOTogYnJlYWs7IC8qIGxlZnQgY2VsbCBib3JkZXIgY29sb3IgKi9cblx0XHRcdGNhc2UgMHgwYTogYnJlYWs7IC8qIHJpZ2h0IGNlbGwgYm9yZGVyIGNvbG9yICovXG5cdFx0XHRjYXNlIDB4MGI6IGJyZWFrOyAvKiBkaWFnb25hbCBjZWxsIGJvcmRlciBjb2xvciAqL1xuXHRcdFx0Y2FzZSAweDBkOiAvKiB0ZXh0IGNvbG9yICovXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAweDBlOiBicmVhazsgLyogZm9udCBzY2hlbWUgKi9cblx0XHRcdGNhc2UgMHgwZjogYnJlYWs7IC8qIGluZGVudGF0aW9uIGxldmVsICovXG5cdFx0fVxuXHR9KTtcbn1cblxuLyogMTguNiBDYWxjdWxhdGlvbiBDaGFpbiAqL1xuZnVuY3Rpb24gcGFyc2VfY2NfeG1sKGRhdGEpIHtcblx0dmFyIGQgPSBbXTtcblx0aWYoIWRhdGEpIHJldHVybiBkO1xuXHR2YXIgaSA9IDE7XG5cdChkYXRhLm1hdGNoKHRhZ3JlZ2V4KXx8W10pLmZvckVhY2goZnVuY3Rpb24oeCkge1xuXHRcdHZhciB5ID0gcGFyc2V4bWx0YWcoeCk7XG5cdFx0c3dpdGNoKHlbMF0pIHtcblx0XHRcdGNhc2UgJzw/eG1sJzogYnJlYWs7XG5cdFx0XHQvKiAxOC42LjIgIGNhbGNDaGFpbiBDVF9DYWxjQ2hhaW4gMSAqL1xuXHRcdFx0Y2FzZSAnPGNhbGNDaGFpbic6IGNhc2UgJzxjYWxjQ2hhaW4+JzogY2FzZSAnPC9jYWxjQ2hhaW4+JzogYnJlYWs7XG5cdFx0XHQvKiAxOC42LjEgIGMgQ1RfQ2FsY0NlbGwgMSAqL1xuXHRcdFx0Y2FzZSAnPGMnOiBkZWxldGUgeVswXTsgaWYoeS5pKSBpID0geS5pOyBlbHNlIHkuaSA9IGk7IGQucHVzaCh5KTsgYnJlYWs7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGQ7XG59XG5cbi8vZnVuY3Rpb24gd3JpdGVfY2NfeG1sKGRhdGEsIG9wdHMpIHsgfVxuXG4vKiBbTVMtWExTQl0gMi42LjQuMSAqL1xuZnVuY3Rpb24gcGFyc2VfQnJ0Q2FsY0NoYWluSXRlbSQoZGF0YSkge1xuXHR2YXIgb3V0ID0ge307XG5cdG91dC5pID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgY2VsbCA9IHt9O1xuXHRjZWxsLnIgPSBkYXRhLnJlYWRfc2hpZnQoNCk7XG5cdGNlbGwuYyA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0b3V0LnIgPSBlbmNvZGVfY2VsbChjZWxsKTtcblx0dmFyIGZsYWdzID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHRpZihmbGFncyAmIDB4Mikgb3V0LmwgPSAnMSc7XG5cdGlmKGZsYWdzICYgMHg4KSBvdXQuYSA9ICcxJztcblx0cmV0dXJuIG91dDtcbn1cblxuLyogMTguNiBDYWxjdWxhdGlvbiBDaGFpbiAqL1xuZnVuY3Rpb24gcGFyc2VfY2NfYmluKGRhdGEsIG5hbWUsIG9wdHMpIHtcblx0dmFyIG91dCA9IFtdO1xuXHR2YXIgcGFzcyA9IGZhbHNlO1xuXHRyZWNvcmRob3BwZXIoZGF0YSwgZnVuY3Rpb24gaG9wcGVyX2NjKHZhbCwgUl9uLCBSVCkge1xuXHRcdHN3aXRjaChSVCkge1xuXHRcdFx0Y2FzZSAweDAwM0Y6IC8qICdCcnRDYWxjQ2hhaW5JdGVtJCcgKi9cblx0XHRcdFx0b3V0LnB1c2godmFsKTsgYnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGlmKChSX258fFwiXCIpLmluZGV4T2YoXCJCZWdpblwiKSA+IDApey8qIGVtcHR5ICovfVxuXHRcdFx0XHRlbHNlIGlmKChSX258fFwiXCIpLmluZGV4T2YoXCJFbmRcIikgPiAwKXsvKiBlbXB0eSAqL31cblx0XHRcdFx0ZWxzZSBpZighcGFzcyB8fCBvcHRzLldURikgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCByZWNvcmQgXCIgKyBSVCArIFwiIFwiICsgUl9uKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gb3V0O1xufVxuXG4vL2Z1bmN0aW9uIHdyaXRlX2NjX2JpbihkYXRhLCBvcHRzKSB7IH1cbi8qIDE4LjE0IFN1cHBsZW1lbnRhcnkgV29ya2Jvb2sgRGF0YSAqL1xuZnVuY3Rpb24gcGFyc2VfeGxpbmtfeG1sKCkge1xuXHQvL3ZhciBvcHRzID0gX29wdHMgfHwge307XG5cdC8vaWYob3B0cy5XVEYpIHRocm93IFwiWExTWCBFeHRlcm5hbCBMaW5rXCI7XG59XG5cbi8qIFtNUy1YTFNCXSAyLjEuNy4yNSBFeHRlcm5hbCBMaW5rICovXG5mdW5jdGlvbiBwYXJzZV94bGlua19iaW4oZGF0YSwgcmVsLCBuYW1lLCBfb3B0cykge1xuXHRpZighZGF0YSkgcmV0dXJuIGRhdGE7XG5cdHZhciBvcHRzID0gX29wdHMgfHwge307XG5cblx0dmFyIHBhc3MgPSBmYWxzZSwgZW5kID0gZmFsc2U7XG5cblx0cmVjb3JkaG9wcGVyKGRhdGEsIGZ1bmN0aW9uIHhsaW5rX3BhcnNlKHZhbCwgUl9uLCBSVCkge1xuXHRcdGlmKGVuZCkgcmV0dXJuO1xuXHRcdHN3aXRjaChSVCkge1xuXHRcdFx0Y2FzZSAweDAxNjc6IC8qICdCcnRTdXBUYWJzJyAqL1xuXHRcdFx0Y2FzZSAweDAxNkI6IC8qICdCcnRFeHRlcm5UYWJsZVN0YXJ0JyAqL1xuXHRcdFx0Y2FzZSAweDAxNkM6IC8qICdCcnRFeHRlcm5UYWJsZUVuZCcgKi9cblx0XHRcdGNhc2UgMHgwMTZFOiAvKiAnQnJ0RXh0ZXJuUm93SGRyJyAqL1xuXHRcdFx0Y2FzZSAweDAxNkY6IC8qICdCcnRFeHRlcm5DZWxsQmxhbmsnICovXG5cdFx0XHRjYXNlIDB4MDE3MDogLyogJ0JydEV4dGVybkNlbGxSZWFsJyAqL1xuXHRcdFx0Y2FzZSAweDAxNzE6IC8qICdCcnRFeHRlcm5DZWxsQm9vbCcgKi9cblx0XHRcdGNhc2UgMHgwMTcyOiAvKiAnQnJ0RXh0ZXJuQ2VsbEVycm9yJyAqL1xuXHRcdFx0Y2FzZSAweDAxNzM6IC8qICdCcnRFeHRlcm5DZWxsU3RyaW5nJyAqL1xuXHRcdFx0Y2FzZSAweDAxRDg6IC8qICdCcnRFeHRlcm5WYWx1ZU1ldGEnICovXG5cdFx0XHRjYXNlIDB4MDI0MTogLyogJ0JydFN1cE5hbWVTdGFydCcgKi9cblx0XHRcdGNhc2UgMHgwMjQyOiAvKiAnQnJ0U3VwTmFtZVZhbHVlU3RhcnQnICovXG5cdFx0XHRjYXNlIDB4MDI0MzogLyogJ0JydFN1cE5hbWVWYWx1ZUVuZCcgKi9cblx0XHRcdGNhc2UgMHgwMjQ0OiAvKiAnQnJ0U3VwTmFtZU51bScgKi9cblx0XHRcdGNhc2UgMHgwMjQ1OiAvKiAnQnJ0U3VwTmFtZUVycicgKi9cblx0XHRcdGNhc2UgMHgwMjQ2OiAvKiAnQnJ0U3VwTmFtZVN0JyAqL1xuXHRcdFx0Y2FzZSAweDAyNDc6IC8qICdCcnRTdXBOYW1lTmlsJyAqL1xuXHRcdFx0Y2FzZSAweDAyNDg6IC8qICdCcnRTdXBOYW1lQm9vbCcgKi9cblx0XHRcdGNhc2UgMHgwMjQ5OiAvKiAnQnJ0U3VwTmFtZUZtbGEnICovXG5cdFx0XHRjYXNlIDB4MDI0QTogLyogJ0JydFN1cE5hbWVCaXRzJyAqL1xuXHRcdFx0Y2FzZSAweDAyNEI6IC8qICdCcnRTdXBOYW1lRW5kJyAqL1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAweDAwMjM6IC8qICdCcnRGUlRCZWdpbicgKi9cblx0XHRcdFx0cGFzcyA9IHRydWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAweDAwMjQ6IC8qICdCcnRGUlRFbmQnICovXG5cdFx0XHRcdHBhc3MgPSBmYWxzZTsgYnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGlmKChSX258fFwiXCIpLmluZGV4T2YoXCJCZWdpblwiKSA+IDApey8qIGVtcHR5ICovfVxuXHRcdFx0XHRlbHNlIGlmKChSX258fFwiXCIpLmluZGV4T2YoXCJFbmRcIikgPiAwKXsvKiBlbXB0eSAqL31cblx0XHRcdFx0ZWxzZSBpZighcGFzcyB8fCBvcHRzLldURikgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCByZWNvcmQgXCIgKyBSVC50b1N0cmluZygxNikgKyBcIiBcIiArIFJfbik7XG5cdFx0fVxuXHR9LCBvcHRzKTtcbn1cbi8qIDIwLjUgRHJhd2luZ01MIC0gU3ByZWFkc2hlZXRNTCBEcmF3aW5nICovXG5SRUxTLklNRyA9IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9pbWFnZVwiO1xuUkVMUy5EUkFXID0gXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2RyYXdpbmdcIjtcblxuLyogMjAuNS4yLjM1IHdzRHIgQ1RfRHJhd2luZyAqL1xuZnVuY3Rpb24gcGFyc2VfZHJhd2luZyhkYXRhLCByZWxzKSB7XG5cdGlmKCFkYXRhKSByZXR1cm4gXCI/P1wiO1xuXHQvKlxuXHQgIENoYXJ0c2hlZXQgRHJhd2luZzpcblx0ICAgLSAyMC41LjIuMzUgd3NEciBDVF9EcmF3aW5nXG5cdCAgICAtIDIwLjUuMi4xICBhYnNvbHV0ZUFuY2hvciBDVF9BYnNvbHV0ZUFuY2hvclxuXHQgICAgIC0gMjAuNS4yLjE2IGdyYXBoaWNGcmFtZSBDVF9HcmFwaGljYWxPYmplY3RGcmFtZVxuXHQgICAgICAtIDIwLjEuMi4yLjE2IGdyYXBoaWMgQ1RfR3JhcGhpY2FsT2JqZWN0XG5cdCAgICAgICAtIDIwLjEuMi4yLjE3IGdyYXBoaWNEYXRhIENUX0dyYXBoaWNhbE9iamVjdERhdGFcbiAgICAgICAgICAtIGNoYXJ0IHJlZmVyZW5jZVxuXHQgICB0aGUgYWN0dWFsIHR5cGUgaXMgYmFzZWQgb24gdGhlIFVSSSBvZiB0aGUgZ3JhcGhpY0RhdGFcblx0XHRUT0RPOiBoYW5kbGUgZW1iZWRkZWQgY2hhcnRzIGFuZCBvdGhlciB0eXBlcyBvZiBncmFwaGljc1xuXHQqL1xuXHR2YXIgaWQgPSAoZGF0YS5tYXRjaCgvPGM6Y2hhcnQgW14+XSpyOmlkPVwiKFteXCJdKilcIi8pfHxbXCJcIixcIlwiXSlbMV07XG5cblx0cmV0dXJuIHJlbHNbJyFpZCddW2lkXS5UYXJnZXQ7XG59XG5cbi8qIEwuNS41LjIgU3ByZWFkc2hlZXRNTCBDb21tZW50cyArIFZNTCBTY2hlbWEgKi9cbnZhciBfc2hhcGVpZCA9IDEwMjQ7XG5mdW5jdGlvbiB3cml0ZV9jb21tZW50c192bWwocklkLCBjb21tZW50cykge1xuXHR2YXIgY3NpemUgPSBbMjE2MDAsIDIxNjAwXTtcblx0LyogTC41LjIuMS4yIFBhdGggQXR0cmlidXRlICovXG5cdHZhciBiYm94ID0gW1wibTAsMGwwXCIsY3NpemVbMV0sY3NpemVbMF0sY3NpemVbMV0sY3NpemVbMF0sXCIweGVcIl0uam9pbihcIixcIik7XG5cdHZhciBvID0gW1xuXHRcdHdyaXRleHRhZyhcInhtbFwiLCBudWxsLCB7ICd4bWxuczp2JzogWExNTE5TLnYsICd4bWxuczpvJzogWExNTE5TLm8sICd4bWxuczp4JzogWExNTE5TLngsICd4bWxuczptdic6IFhMTUxOUy5tdiB9KS5yZXBsYWNlKC9cXC8+LyxcIj5cIiksXG5cdFx0d3JpdGV4dGFnKFwibzpzaGFwZWxheW91dFwiLCB3cml0ZXh0YWcoXCJvOmlkbWFwXCIsIG51bGwsIHsndjpleHQnOlwiZWRpdFwiLCAnZGF0YSc6cklkfSksIHsndjpleHQnOlwiZWRpdFwifSksXG5cdFx0d3JpdGV4dGFnKFwidjpzaGFwZXR5cGVcIiwgW1xuXHRcdFx0d3JpdGV4dGFnKFwidjpzdHJva2VcIiwgbnVsbCwge2pvaW5zdHlsZTpcIm1pdGVyXCJ9KSxcblx0XHRcdHdyaXRleHRhZyhcInY6cGF0aFwiLCBudWxsLCB7Z3JhZGllbnRzaGFwZW9rOlwidFwiLCAnbzpjb25uZWN0dHlwZSc6XCJyZWN0XCJ9KVxuXHRcdF0uam9pbihcIlwiKSwge2lkOlwiX3gwMDAwX3QyMDJcIiwgJ286c3B0JzoyMDIsIGNvb3Jkc2l6ZTpjc2l6ZS5qb2luKFwiLFwiKSxwYXRoOmJib3h9KVxuXHRdO1xuXHR3aGlsZShfc2hhcGVpZCA8IHJJZCAqIDEwMDApIF9zaGFwZWlkICs9IDEwMDA7XG5cblx0Y29tbWVudHMuZm9yRWFjaChmdW5jdGlvbih4KSB7XG5cdHZhciBjID0gZGVjb2RlX2NlbGwoeFswXSk7XG5cdHZhciBmaWxsb3B0cyA9IHsnY29sb3IyJzpcIiNCRUZGODJcIiwgJ3R5cGUnOlwiZ3JhZGllbnRcIn07XG5cdGlmKGZpbGxvcHRzLnR5cGUgPT0gXCJncmFkaWVudFwiKSBmaWxsb3B0cy5hbmdsZSA9IFwiLTE4MFwiO1xuXHR2YXIgZmlsbHBhcm0gPSBmaWxsb3B0cy50eXBlID09IFwiZ3JhZGllbnRcIiA/IHdyaXRleHRhZyhcIm86ZmlsbFwiLCBudWxsLCB7dHlwZTpcImdyYWRpZW50VW5zY2FsZWRcIiwgJ3Y6ZXh0JzpcInZpZXdcIn0pIDogbnVsbDtcblx0dmFyIGZpbGx4bWwgPSB3cml0ZXh0YWcoJ3Y6ZmlsbCcsIGZpbGxwYXJtLCBmaWxsb3B0cyk7XG5cblx0dmFyIHNoYWRhdGEgPSAoe29uOlwidFwiLCAnb2JzY3VyZWQnOlwidFwifSk7XG5cdCsrX3NoYXBlaWQ7XG5cblx0byA9IG8uY29uY2F0KFtcblx0Jzx2OnNoYXBlJyArIHd4dF9oZWxwZXIoe1xuXHRcdGlkOidfeDAwMDBfcycgKyBfc2hhcGVpZCxcblx0XHR0eXBlOlwiI194MDAwMF90MjAyXCIsXG5cdFx0c3R5bGU6XCJwb3NpdGlvbjphYnNvbHV0ZTsgbWFyZ2luLWxlZnQ6ODBwdDttYXJnaW4tdG9wOjVwdDt3aWR0aDoxMDRwdDtoZWlnaHQ6NjRwdDt6LWluZGV4OjEwXCIgKyAoeFsxXS5oaWRkZW4gPyBcIjt2aXNpYmlsaXR5OmhpZGRlblwiIDogXCJcIikgLFxuXHRcdGZpbGxjb2xvcjpcIiNFQ0ZBRDRcIixcblx0XHRzdHJva2Vjb2xvcjpcIiNlZGVhYTFcIlxuXHR9KSArICc+Jyxcblx0XHRmaWxseG1sLFxuXHRcdHdyaXRleHRhZyhcInY6c2hhZG93XCIsIG51bGwsIHNoYWRhdGEpLFxuXHRcdHdyaXRleHRhZyhcInY6cGF0aFwiLCBudWxsLCB7J286Y29ubmVjdHR5cGUnOlwibm9uZVwifSksXG5cdFx0Jzx2OnRleHRib3g+PGRpdiBzdHlsZT1cInRleHQtYWxpZ246bGVmdFwiPjwvZGl2Pjwvdjp0ZXh0Ym94PicsXG5cdFx0Jzx4OkNsaWVudERhdGEgT2JqZWN0VHlwZT1cIk5vdGVcIj4nLFxuXHRcdFx0Jzx4Ok1vdmVXaXRoQ2VsbHMvPicsXG5cdFx0XHQnPHg6U2l6ZVdpdGhDZWxscy8+Jyxcblx0XHRcdC8qIFBhcnQgNCAxOS40LjIuMyBBbmNob3IgKEFuY2hvcikgKi9cblx0XHRcdHdyaXRldGFnKCd4OkFuY2hvcicsIFtjLmMrMSwgMCwgYy5yKzEsIDAsIGMuYyszLCAyMCwgYy5yKzUsIDIwXS5qb2luKFwiLFwiKSksXG5cdFx0XHR3cml0ZXRhZygneDpBdXRvRmlsbCcsIFwiRmFsc2VcIiksXG5cdFx0XHR3cml0ZXRhZygneDpSb3cnLCBTdHJpbmcoYy5yKSksXG5cdFx0XHR3cml0ZXRhZygneDpDb2x1bW4nLCBTdHJpbmcoYy5jKSksXG5cdFx0XHR4WzFdLmhpZGRlbiA/ICcnIDogJzx4OlZpc2libGUvPicsXG5cdFx0JzwveDpDbGllbnREYXRhPicsXG5cdCc8L3Y6c2hhcGU+J1xuXHRdKTsgfSk7XG5cdG8ucHVzaCgnPC94bWw+Jyk7XG5cdHJldHVybiBvLmpvaW4oXCJcIik7XG59XG5SRUxTLkNNTlQgPSBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvY29tbWVudHNcIjtcblxuZnVuY3Rpb24gc2hlZXRfaW5zZXJ0X2NvbW1lbnRzKHNoZWV0LCBjb21tZW50cykge1xuXHR2YXIgZGVuc2UgPSBBcnJheS5pc0FycmF5KHNoZWV0KTtcblx0dmFyIGNlbGw7XG5cdGNvbW1lbnRzLmZvckVhY2goZnVuY3Rpb24oY29tbWVudCkge1xuXHRcdHZhciByID0gZGVjb2RlX2NlbGwoY29tbWVudC5yZWYpO1xuXHRcdGlmKGRlbnNlKSB7XG5cdFx0XHRpZighc2hlZXRbci5yXSkgc2hlZXRbci5yXSA9IFtdO1xuXHRcdFx0Y2VsbCA9IHNoZWV0W3Iucl1bci5jXTtcblx0XHR9IGVsc2UgY2VsbCA9IHNoZWV0W2NvbW1lbnQucmVmXTtcblx0XHRpZiAoIWNlbGwpIHtcblx0XHRcdGNlbGwgPSAoe3Q6XCJ6XCJ9KTtcblx0XHRcdGlmKGRlbnNlKSBzaGVldFtyLnJdW3IuY10gPSBjZWxsO1xuXHRcdFx0ZWxzZSBzaGVldFtjb21tZW50LnJlZl0gPSBjZWxsO1xuXHRcdFx0dmFyIHJhbmdlID0gc2FmZV9kZWNvZGVfcmFuZ2Uoc2hlZXRbXCIhcmVmXCJdfHxcIkJEV0dPMTAwMDAwMTpBMVwiKTtcblx0XHRcdGlmKHJhbmdlLnMuciA+IHIucikgcmFuZ2Uucy5yID0gci5yO1xuXHRcdFx0aWYocmFuZ2UuZS5yIDwgci5yKSByYW5nZS5lLnIgPSByLnI7XG5cdFx0XHRpZihyYW5nZS5zLmMgPiByLmMpIHJhbmdlLnMuYyA9IHIuYztcblx0XHRcdGlmKHJhbmdlLmUuYyA8IHIuYykgcmFuZ2UuZS5jID0gci5jO1xuXHRcdFx0dmFyIGVuY29kZWQgPSBlbmNvZGVfcmFuZ2UocmFuZ2UpO1xuXHRcdFx0aWYgKGVuY29kZWQgIT09IHNoZWV0W1wiIXJlZlwiXSkgc2hlZXRbXCIhcmVmXCJdID0gZW5jb2RlZDtcblx0XHR9XG5cblx0XHRpZiAoIWNlbGwuYykgY2VsbC5jID0gW107XG5cdFx0dmFyIG8gPSAoe2E6IGNvbW1lbnQuYXV0aG9yLCB0OiBjb21tZW50LnQsIHI6IGNvbW1lbnQucn0pO1xuXHRcdGlmKGNvbW1lbnQuaCkgby5oID0gY29tbWVudC5oO1xuXHRcdGNlbGwuYy5wdXNoKG8pO1xuXHR9KTtcbn1cblxuLyogMTguNyBDb21tZW50cyAqL1xuZnVuY3Rpb24gcGFyc2VfY29tbWVudHNfeG1sKGRhdGEsIG9wdHMpIHtcblx0LyogMTguNy42IENUX0NvbW1lbnRzICovXG5cdGlmKGRhdGEubWF0Y2goLzwoPzpcXHcrOik/Y29tbWVudHMgKlxcLz4vKSkgcmV0dXJuIFtdO1xuXHR2YXIgYXV0aG9ycyA9IFtdO1xuXHR2YXIgY29tbWVudExpc3QgPSBbXTtcblx0dmFyIGF1dGh0YWcgPSBkYXRhLm1hdGNoKC88KD86XFx3KzopP2F1dGhvcnM+KFtcXHNcXFNdKik8XFwvKD86XFx3KzopP2F1dGhvcnM+Lyk7XG5cdGlmKGF1dGh0YWcgJiYgYXV0aHRhZ1sxXSkgYXV0aHRhZ1sxXS5zcGxpdCgvPFxcL1xcdyo6P2F1dGhvcj4vKS5mb3JFYWNoKGZ1bmN0aW9uKHgpIHtcblx0XHRpZih4ID09PSBcIlwiIHx8IHgudHJpbSgpID09PSBcIlwiKSByZXR1cm47XG5cdFx0dmFyIGEgPSB4Lm1hdGNoKC88KD86XFx3KzopP2F1dGhvcltePl0qPiguKikvKTtcblx0XHRpZihhKSBhdXRob3JzLnB1c2goYVsxXSk7XG5cdH0pO1xuXHR2YXIgY21udHRhZyA9IGRhdGEubWF0Y2goLzwoPzpcXHcrOik/Y29tbWVudExpc3Q+KFtcXHNcXFNdKik8XFwvKD86XFx3KzopP2NvbW1lbnRMaXN0Pi8pO1xuXHRpZihjbW50dGFnICYmIGNtbnR0YWdbMV0pIGNtbnR0YWdbMV0uc3BsaXQoLzxcXC9cXHcqOj9jb21tZW50Pi8pLmZvckVhY2goZnVuY3Rpb24oeCkge1xuXHRcdGlmKHggPT09IFwiXCIgfHwgeC50cmltKCkgPT09IFwiXCIpIHJldHVybjtcblx0XHR2YXIgY20gPSB4Lm1hdGNoKC88KD86XFx3KzopP2NvbW1lbnRbXj5dKj4vKTtcblx0XHRpZighY20pIHJldHVybjtcblx0XHR2YXIgeSA9IHBhcnNleG1sdGFnKGNtWzBdKTtcblx0XHR2YXIgY29tbWVudCA9ICh7IGF1dGhvcjogeS5hdXRob3JJZCAmJiBhdXRob3JzW3kuYXV0aG9ySWRdIHx8IFwic2hlZXRqc2dob3N0XCIsIHJlZjogeS5yZWYsIGd1aWQ6IHkuZ3VpZCB9KTtcblx0XHR2YXIgY2VsbCA9IGRlY29kZV9jZWxsKHkucmVmKTtcblx0XHRpZihvcHRzLnNoZWV0Um93cyAmJiBvcHRzLnNoZWV0Um93cyA8PSBjZWxsLnIpIHJldHVybjtcblx0XHR2YXIgdGV4dE1hdGNoID0geC5tYXRjaCgvPCg/Olxcdys6KT90ZXh0PihbXFxzXFxTXSopPFxcLyg/Olxcdys6KT90ZXh0Pi8pO1xuXHRcdHZhciBydCA9ICEhdGV4dE1hdGNoICYmICEhdGV4dE1hdGNoWzFdICYmIHBhcnNlX3NpKHRleHRNYXRjaFsxXSkgfHwge3I6XCJcIix0OlwiXCIsaDpcIlwifTtcblx0XHRjb21tZW50LnIgPSBydC5yO1xuXHRcdGlmKHJ0LnIgPT0gXCI8dD48L3Q+XCIpIHJ0LnQgPSBydC5oID0gXCJcIjtcblx0XHRjb21tZW50LnQgPSAocnQudHx8XCJcIikucmVwbGFjZSgvXFxyXFxuL2csXCJcXG5cIikucmVwbGFjZSgvXFxyL2csXCJcXG5cIik7XG5cdFx0aWYob3B0cy5jZWxsSFRNTCkgY29tbWVudC5oID0gcnQuaDtcblx0XHRjb21tZW50TGlzdC5wdXNoKGNvbW1lbnQpO1xuXHR9KTtcblx0cmV0dXJuIGNvbW1lbnRMaXN0O1xufVxuXG52YXIgQ01OVF9YTUxfUk9PVCA9IHdyaXRleHRhZygnY29tbWVudHMnLCBudWxsLCB7ICd4bWxucyc6IFhNTE5TLm1haW5bMF0gfSk7XG5mdW5jdGlvbiB3cml0ZV9jb21tZW50c194bWwoZGF0YSkge1xuXHR2YXIgbyA9IFtYTUxfSEVBREVSLCBDTU5UX1hNTF9ST09UXTtcblxuXHR2YXIgaWF1dGhvciA9IFtdO1xuXHRvLnB1c2goXCI8YXV0aG9ycz5cIik7XG5cdGRhdGEuZm9yRWFjaChmdW5jdGlvbih4KSB7IHhbMV0uZm9yRWFjaChmdW5jdGlvbih3KSB7IHZhciBhID0gZXNjYXBleG1sKHcuYSk7XG5cdFx0aWYoaWF1dGhvci5pbmRleE9mKGEpID4gLTEpIHJldHVybjtcblx0XHRpYXV0aG9yLnB1c2goYSk7XG5cdFx0by5wdXNoKFwiPGF1dGhvcj5cIiArIGEgKyBcIjwvYXV0aG9yPlwiKTtcblx0fSk7IH0pO1xuXHRvLnB1c2goXCI8L2F1dGhvcnM+XCIpO1xuXHRvLnB1c2goXCI8Y29tbWVudExpc3Q+XCIpO1xuXHRkYXRhLmZvckVhY2goZnVuY3Rpb24oZCkge1xuXHRcdGRbMV0uZm9yRWFjaChmdW5jdGlvbihjKSB7XG5cdFx0XHQvKiAxOC43LjMgQ1RfQ29tbWVudCAqL1xuXHRcdFx0by5wdXNoKCc8Y29tbWVudCByZWY9XCInICsgZFswXSArICdcIiBhdXRob3JJZD1cIicgKyBpYXV0aG9yLmluZGV4T2YoZXNjYXBleG1sKGMuYSkpICsgJ1wiPjx0ZXh0PicpO1xuXHRcdFx0by5wdXNoKHdyaXRldGFnKFwidFwiLCBjLnQgPT0gbnVsbCA/IFwiXCIgOiBlc2NhcGV4bWwoYy50KSkpO1xuXHRcdFx0by5wdXNoKCc8L3RleHQ+PC9jb21tZW50PicpO1xuXHRcdH0pO1xuXHR9KTtcblx0by5wdXNoKFwiPC9jb21tZW50TGlzdD5cIik7XG5cdGlmKG8ubGVuZ3RoPjIpIHsgb1tvLmxlbmd0aF0gPSAoJzwvY29tbWVudHM+Jyk7IG9bMV09b1sxXS5yZXBsYWNlKFwiLz5cIixcIj5cIik7IH1cblx0cmV0dXJuIG8uam9pbihcIlwiKTtcbn1cbi8qIFtNUy1YTFNCXSAyLjQuMjggQnJ0QmVnaW5Db21tZW50ICovXG5mdW5jdGlvbiBwYXJzZV9CcnRCZWdpbkNvbW1lbnQoZGF0YSkge1xuXHR2YXIgb3V0ID0ge307XG5cdG91dC5pYXV0aG9yID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgcmZ4ID0gcGFyc2VfVW5jaGVja2VkUmZYKGRhdGEsIDE2KTtcblx0b3V0LnJmeCA9IHJmeC5zO1xuXHRvdXQucmVmID0gZW5jb2RlX2NlbGwocmZ4LnMpO1xuXHRkYXRhLmwgKz0gMTY7IC8qdmFyIGd1aWQgPSBwYXJzZV9HVUlEKGRhdGEpOyAqL1xuXHRyZXR1cm4gb3V0O1xufVxuZnVuY3Rpb24gd3JpdGVfQnJ0QmVnaW5Db21tZW50KGRhdGEsIG8pIHtcblx0aWYobyA9PSBudWxsKSBvID0gbmV3X2J1ZigzNik7XG5cdG8ud3JpdGVfc2hpZnQoNCwgZGF0YVsxXS5pYXV0aG9yKTtcblx0d3JpdGVfVW5jaGVja2VkUmZYKChkYXRhWzBdKSwgbyk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTQl0gMi40LjMyNyBCcnRDb21tZW50QXV0aG9yICovXG52YXIgcGFyc2VfQnJ0Q29tbWVudEF1dGhvciA9IHBhcnNlX1hMV2lkZVN0cmluZztcbmZ1bmN0aW9uIHdyaXRlX0JydENvbW1lbnRBdXRob3IoZGF0YSkgeyByZXR1cm4gd3JpdGVfWExXaWRlU3RyaW5nKGRhdGEuc2xpY2UoMCwgNTQpKTsgfVxuXG4vKiBbTVMtWExTQl0gMi4xLjcuOCBDb21tZW50cyAqL1xuZnVuY3Rpb24gcGFyc2VfY29tbWVudHNfYmluKGRhdGEsIG9wdHMpIHtcblx0dmFyIG91dCA9IFtdO1xuXHR2YXIgYXV0aG9ycyA9IFtdO1xuXHR2YXIgYyA9IHt9O1xuXHR2YXIgcGFzcyA9IGZhbHNlO1xuXHRyZWNvcmRob3BwZXIoZGF0YSwgZnVuY3Rpb24gaG9wcGVyX2NtbnQodmFsLCBSX24sIFJUKSB7XG5cdFx0c3dpdGNoKFJUKSB7XG5cdFx0XHRjYXNlIDB4MDI3ODogLyogJ0JydENvbW1lbnRBdXRob3InICovXG5cdFx0XHRcdGF1dGhvcnMucHVzaCh2YWwpOyBicmVhaztcblx0XHRcdGNhc2UgMHgwMjdCOiAvKiAnQnJ0QmVnaW5Db21tZW50JyAqL1xuXHRcdFx0XHRjID0gdmFsOyBicmVhaztcblx0XHRcdGNhc2UgMHgwMjdEOiAvKiAnQnJ0Q29tbWVudFRleHQnICovXG5cdFx0XHRcdGMudCA9IHZhbC50OyBjLmggPSB2YWwuaDsgYy5yID0gdmFsLnI7IGJyZWFrO1xuXHRcdFx0Y2FzZSAweDAyN0M6IC8qICdCcnRFbmRDb21tZW50JyAqL1xuXHRcdFx0XHRjLmF1dGhvciA9IGF1dGhvcnNbYy5pYXV0aG9yXTtcblx0XHRcdFx0ZGVsZXRlIChjKS5pYXV0aG9yO1xuXHRcdFx0XHRpZihvcHRzLnNoZWV0Um93cyAmJiBjLnJmeCAmJiBvcHRzLnNoZWV0Um93cyA8PSBjLnJmeC5yKSBicmVhaztcblx0XHRcdFx0aWYoIWMudCkgYy50ID0gXCJcIjtcblx0XHRcdFx0ZGVsZXRlIGMucmZ4OyBvdXQucHVzaChjKTsgYnJlYWs7XG5cblx0XHRcdGNhc2UgMHgwQzAwOiAvKiAnQnJ0VWlkJyAqL1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAweDAwMjM6IC8qICdCcnRGUlRCZWdpbicgKi9cblx0XHRcdFx0cGFzcyA9IHRydWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAweDAwMjQ6IC8qICdCcnRGUlRFbmQnICovXG5cdFx0XHRcdHBhc3MgPSBmYWxzZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAyNTogLyogJ0JydEFDQmVnaW4nICovIGJyZWFrO1xuXHRcdFx0Y2FzZSAweDAwMjY6IC8qICdCcnRBQ0VuZCcgKi8gYnJlYWs7XG5cblxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0aWYoKFJfbnx8XCJcIikuaW5kZXhPZihcIkJlZ2luXCIpID4gMCl7LyogZW1wdHkgKi99XG5cdFx0XHRcdGVsc2UgaWYoKFJfbnx8XCJcIikuaW5kZXhPZihcIkVuZFwiKSA+IDApey8qIGVtcHR5ICovfVxuXHRcdFx0XHRlbHNlIGlmKCFwYXNzIHx8IG9wdHMuV1RGKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIHJlY29yZCBcIiArIFJUICsgXCIgXCIgKyBSX24pO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX2NvbW1lbnRzX2JpbihkYXRhKSB7XG5cdHZhciBiYSA9IGJ1Zl9hcnJheSgpO1xuXHR2YXIgaWF1dGhvciA9IFtdO1xuXHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0QmVnaW5Db21tZW50c1wiKTtcblxuXHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0QmVnaW5Db21tZW50QXV0aG9yc1wiKTtcblx0ZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGNvbW1lbnQpIHtcblx0XHRjb21tZW50WzFdLmZvckVhY2goZnVuY3Rpb24oYykge1xuXHRcdFx0aWYoaWF1dGhvci5pbmRleE9mKGMuYSkgPiAtMSkgcmV0dXJuO1xuXHRcdFx0aWF1dGhvci5wdXNoKGMuYS5zbGljZSgwLDU0KSk7XG5cdFx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0Q29tbWVudEF1dGhvclwiLCB3cml0ZV9CcnRDb21tZW50QXV0aG9yKGMuYSkpO1xuXHRcdH0pO1xuXHR9KTtcblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEVuZENvbW1lbnRBdXRob3JzXCIpO1xuXG5cdHdyaXRlX3JlY29yZChiYSwgXCJCcnRCZWdpbkNvbW1lbnRMaXN0XCIpO1xuXHRkYXRhLmZvckVhY2goZnVuY3Rpb24oY29tbWVudCkge1xuXHRcdGNvbW1lbnRbMV0uZm9yRWFjaChmdW5jdGlvbihjKSB7XG5cdFx0XHRjLmlhdXRob3IgPSBpYXV0aG9yLmluZGV4T2YoYy5hKTtcblx0XHRcdHZhciByYW5nZSA9IHtzOmRlY29kZV9jZWxsKGNvbW1lbnRbMF0pLGU6ZGVjb2RlX2NlbGwoY29tbWVudFswXSl9O1xuXHRcdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEJlZ2luQ29tbWVudFwiLCB3cml0ZV9CcnRCZWdpbkNvbW1lbnQoW3JhbmdlLCBjXSkpO1xuXHRcdFx0aWYoYy50ICYmIGMudC5sZW5ndGggPiAwKSB3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0Q29tbWVudFRleHRcIiwgd3JpdGVfQnJ0Q29tbWVudFRleHQoYykpO1xuXHRcdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEVuZENvbW1lbnRcIik7XG5cdFx0XHRkZWxldGUgYy5pYXV0aG9yO1xuXHRcdH0pO1xuXHR9KTtcblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEVuZENvbW1lbnRMaXN0XCIpO1xuXG5cdHdyaXRlX3JlY29yZChiYSwgXCJCcnRFbmRDb21tZW50c1wiKTtcblx0cmV0dXJuIGJhLmVuZCgpO1xufVxudmFyIENUX1ZCQSA9IFwiYXBwbGljYXRpb24vdm5kLm1zLW9mZmljZS52YmFQcm9qZWN0XCI7XG5mdW5jdGlvbiBtYWtlX3ZiYV94bHMoY2ZiKSB7XG5cdHZhciBuZXdjZmIgPSBDRkIudXRpbHMuY2ZiX25ldyh7cm9vdDpcIlJcIn0pO1xuXHRjZmIuRnVsbFBhdGhzLmZvckVhY2goZnVuY3Rpb24ocCwgaSkge1xuXHRcdGlmKHAuc2xpY2UoLTEpID09PSBcIi9cIiB8fCAhcC5tYXRjaCgvX1ZCQV9QUk9KRUNUX0NVUi8pKSByZXR1cm47XG5cdFx0dmFyIG5ld3BhdGggPSBwLnJlcGxhY2UoL15bXlxcL10qLyxcIlJcIikucmVwbGFjZSgvXFwvX1ZCQV9QUk9KRUNUX0NVUlxcdTAwMDAqLywgXCJcIik7XG5cdFx0Q0ZCLnV0aWxzLmNmYl9hZGQobmV3Y2ZiLCBuZXdwYXRoLCBjZmIuRmlsZUluZGV4W2ldLmNvbnRlbnQpO1xuXHR9KTtcblx0cmV0dXJuIENGQi53cml0ZShuZXdjZmIpO1xufVxuXG5mdW5jdGlvbiBmaWxsX3ZiYV94bHMoY2ZiLCB2YmEpIHtcblx0dmJhLkZ1bGxQYXRocy5mb3JFYWNoKGZ1bmN0aW9uKHAsIGkpIHtcblx0XHRpZihpID09IDApIHJldHVybjtcblx0XHR2YXIgbmV3cGF0aCA9IHAucmVwbGFjZSgvW15cXC9dKltcXC9dLywgXCIvX1ZCQV9QUk9KRUNUX0NVUi9cIik7XG5cdFx0aWYobmV3cGF0aC5zbGljZSgtMSkgIT09IFwiL1wiKSBDRkIudXRpbHMuY2ZiX2FkZChjZmIsIG5ld3BhdGgsIHZiYS5GaWxlSW5kZXhbaV0uY29udGVudCk7XG5cdH0pO1xufVxuXG52YXIgVkJBRk1UUyA9IFsgXCJ4bHNiXCIsIFwieGxzbVwiLCBcInhsYW1cIiwgXCJiaWZmOFwiLCBcInhsYVwiIF07XG5cblJFTFMuRFMgPSBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvZGlhbG9nc2hlZXRcIjtcblJFTFMuTVMgPSBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlLzIwMDYvcmVsYXRpb25zaGlwcy94bE1hY3Jvc2hlZXRcIjtcblxuLyogbWFjcm8gYW5kIGRpYWxvZyBzaGVldCBzdHVicyAqL1xuZnVuY3Rpb24gcGFyc2VfZHNfYmluKCkgeyByZXR1cm4geychdHlwZSc6J2RpYWxvZyd9OyB9XG5mdW5jdGlvbiBwYXJzZV9kc194bWwoKSB7IHJldHVybiB7JyF0eXBlJzonZGlhbG9nJ307IH1cbmZ1bmN0aW9uIHBhcnNlX21zX2JpbigpIHsgcmV0dXJuIHsnIXR5cGUnOidtYWNybyd9OyB9XG5mdW5jdGlvbiBwYXJzZV9tc194bWwoKSB7IHJldHVybiB7JyF0eXBlJzonbWFjcm8nfTsgfVxuLyogVE9ETzogaXQgd2lsbCBiZSB1c2VmdWwgdG8gcGFyc2UgdGhlIGZ1bmN0aW9uIHN0ciAqL1xudmFyIHJjX3RvX2ExID0gKGZ1bmN0aW9uKCl7XG5cdHZhciByY3JlZ2V4ID0gLyhefFteQS1aYS16X10pUihcXFs/LT9cXGQrXFxdfFsxLTldXFxkKnwpQyhcXFs/LT9cXGQrXFxdfFsxLTldXFxkKnwpKD8hW0EtWmEtejAtOV9dKS9nO1xuXHR2YXIgcmNiYXNlID0gKHtyOjAsYzowfSk7XG5cdGZ1bmN0aW9uIHJjZnVuYygkJCwkMSwkMiwkMykge1xuXHRcdHZhciBjUmVsID0gZmFsc2UsIHJSZWwgPSBmYWxzZTtcblxuXHRcdGlmKCQyLmxlbmd0aCA9PSAwKSByUmVsID0gdHJ1ZTtcblx0XHRlbHNlIGlmKCQyLmNoYXJBdCgwKSA9PSBcIltcIikgeyByUmVsID0gdHJ1ZTsgJDIgPSAkMi5zbGljZSgxLCAtMSk7IH1cblxuXHRcdGlmKCQzLmxlbmd0aCA9PSAwKSBjUmVsID0gdHJ1ZTtcblx0XHRlbHNlIGlmKCQzLmNoYXJBdCgwKSA9PSBcIltcIikgeyBjUmVsID0gdHJ1ZTsgJDMgPSAkMy5zbGljZSgxLCAtMSk7IH1cblxuXHRcdHZhciBSID0gJDIubGVuZ3RoPjA/cGFyc2VJbnQoJDIsMTApfDA6MCwgQyA9ICQzLmxlbmd0aD4wP3BhcnNlSW50KCQzLDEwKXwwOjA7XG5cblx0XHRpZihjUmVsKSBDICs9IHJjYmFzZS5jOyBlbHNlIC0tQztcblx0XHRpZihyUmVsKSBSICs9IHJjYmFzZS5yOyBlbHNlIC0tUjtcblx0XHRyZXR1cm4gJDEgKyAoY1JlbCA/IFwiXCIgOiBcIiRcIikgKyBlbmNvZGVfY29sKEMpICsgKHJSZWwgPyBcIlwiIDogXCIkXCIpICsgZW5jb2RlX3JvdyhSKTtcblx0fVxuXHRyZXR1cm4gZnVuY3Rpb24gcmNfdG9fYTEoZnN0ciwgYmFzZSkge1xuXHRcdHJjYmFzZSA9IGJhc2U7XG5cdFx0cmV0dXJuIGZzdHIucmVwbGFjZShyY3JlZ2V4LCByY2Z1bmMpO1xuXHR9O1xufSkoKTtcblxudmFyIGNyZWZyZWdleCA9IC8oXnxbXi5fQS1aMC05XSkoWyRdPykoW0EtWl17MSwyfXxbQS1XXVtBLVpdezJ9fFhbQS1FXVtBLVpdfFhGW0EtRF0pKFskXT8pKDEwWzAtM11cXGR7NH18MTA0WzAtN11cXGR7M318MTA0OFswLTRdXFxkezJ9fDEwNDg1WzAtNl1cXGR8MTA0ODU3WzAtNl18WzEtOV1cXGR7MCw1fSkoPyFbXy5cXChBLVphLXowLTldKS9nO1xudmFyIGExX3RvX3JjID0oZnVuY3Rpb24oKXtcblx0cmV0dXJuIGZ1bmN0aW9uIGExX3RvX3JjKGZzdHIsIGJhc2UpIHtcblx0XHRyZXR1cm4gZnN0ci5yZXBsYWNlKGNyZWZyZWdleCwgZnVuY3Rpb24oJDAsICQxLCAkMiwgJDMsICQ0LCAkNSkge1xuXHRcdFx0dmFyIGMgPSBkZWNvZGVfY29sKCQzKSAtICgkMiA/IDAgOiBiYXNlLmMpO1xuXHRcdFx0dmFyIHIgPSBkZWNvZGVfcm93KCQ1KSAtICgkNCA/IDAgOiBiYXNlLnIpO1xuXHRcdFx0dmFyIFIgPSAociA9PSAwID8gXCJcIiA6ICEkNCA/IFwiW1wiICsgciArIFwiXVwiIDogKHIrMSkpO1xuXHRcdFx0dmFyIEMgPSAoYyA9PSAwID8gXCJcIiA6ICEkMiA/IFwiW1wiICsgYyArIFwiXVwiIDogKGMrMSkpO1xuXHRcdFx0cmV0dXJuICQxICsgXCJSXCIgKyBSICsgXCJDXCIgKyBDO1xuXHRcdH0pO1xuXHR9O1xufSkoKTtcblxuLyogbm8gZGVmaW5lZCBuYW1lIGNhbiBjb2xsaWRlIHdpdGggYSB2YWxpZCBjZWxsIGFkZHJlc3MgQTE6WEZEMTA0ODU3NiAuLi4gZXhjZXB0IExPRzEwISAqL1xuZnVuY3Rpb24gc2hpZnRfZm9ybXVsYV9zdHIoZiwgZGVsdGEpIHtcblx0cmV0dXJuIGYucmVwbGFjZShjcmVmcmVnZXgsIGZ1bmN0aW9uKCQwLCAkMSwgJDIsICQzLCAkNCwgJDUpIHtcblx0XHRyZXR1cm4gJDErKCQyPT1cIiRcIiA/ICQyKyQzIDogZW5jb2RlX2NvbChkZWNvZGVfY29sKCQzKStkZWx0YS5jKSkrKCQ0PT1cIiRcIiA/ICQ0KyQ1IDogZW5jb2RlX3JvdyhkZWNvZGVfcm93KCQ1KSArIGRlbHRhLnIpKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIHNoaWZ0X2Zvcm11bGFfeGxzeChmLCByYW5nZSwgY2VsbCkge1xuXHR2YXIgciA9IGRlY29kZV9yYW5nZShyYW5nZSksIHMgPSByLnMsIGMgPSBkZWNvZGVfY2VsbChjZWxsKTtcblx0dmFyIGRlbHRhID0ge3I6Yy5yIC0gcy5yLCBjOmMuYyAtIHMuY307XG5cdHJldHVybiBzaGlmdF9mb3JtdWxhX3N0cihmLCBkZWx0YSk7XG59XG5cbi8qIFRPRE86IHBhcnNlIGZvcm11bGEgKi9cbmZ1bmN0aW9uIGZ1enp5Zm1sYShmKSB7XG5cdGlmKGYubGVuZ3RoID09IDEpIHJldHVybiBmYWxzZTtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIF94bGZuKGYpIHtcblx0cmV0dXJuIGYucmVwbGFjZSgvX3hsZm5cXC4vZyxcIlwiKTtcbn1cbmZ1bmN0aW9uIHBhcnNlcmVhZDEoYmxvYikgeyBibG9iLmwrPTE7IHJldHVybjsgfVxuXG4vKiBbTVMtWExTXSAyLjUuNTEgKi9cbmZ1bmN0aW9uIHBhcnNlX0NvbFJlbFUoYmxvYiwgbGVuZ3RoKSB7XG5cdHZhciBjID0gYmxvYi5yZWFkX3NoaWZ0KGxlbmd0aCA9PSAxID8gMSA6IDIpO1xuXHRyZXR1cm4gW2MgJiAweDNGRkYsIChjID4+IDE0KSAmIDEsIChjID4+IDE1KSAmIDFdO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4LjEwNSA7IFtNUy1YTFNCXSAyLjUuOTcuODkgKi9cbmZ1bmN0aW9uIHBhcnNlX1JnY2VBcmVhKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgdyA9IDI7XG5cdGlmKG9wdHMpIHtcblx0XHRpZihvcHRzLmJpZmYgPj0gMiAmJiBvcHRzLmJpZmYgPD0gNSkgcmV0dXJuIHBhcnNlX1JnY2VBcmVhX0JJRkYyKGJsb2IsIGxlbmd0aCwgb3B0cyk7XG5cdFx0ZWxzZSBpZihvcHRzLmJpZmYgPT0gMTIpIHcgPSA0O1xuXHR9XG5cdHZhciByPWJsb2IucmVhZF9zaGlmdCh3KSwgUj1ibG9iLnJlYWRfc2hpZnQodyk7XG5cdHZhciBjPXBhcnNlX0NvbFJlbFUoYmxvYiwgMik7XG5cdHZhciBDPXBhcnNlX0NvbFJlbFUoYmxvYiwgMik7XG5cdHJldHVybiB7IHM6e3I6ciwgYzpjWzBdLCBjUmVsOmNbMV0sIHJSZWw6Y1syXX0sIGU6e3I6UiwgYzpDWzBdLCBjUmVsOkNbMV0sIHJSZWw6Q1syXX0gfTtcbn1cbi8qIEJJRkYgMi01IGVuY29kZXMgZmxhZ3MgaW4gdGhlIHJvdyBmaWVsZCAqL1xuZnVuY3Rpb24gcGFyc2VfUmdjZUFyZWFfQklGRjIoYmxvYikge1xuXHR2YXIgcj1wYXJzZV9Db2xSZWxVKGJsb2IsIDIpLCBSPXBhcnNlX0NvbFJlbFUoYmxvYiwgMik7XG5cdHZhciBjPWJsb2IucmVhZF9zaGlmdCgxKTtcblx0dmFyIEM9YmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRyZXR1cm4geyBzOntyOnJbMF0sIGM6YywgY1JlbDpyWzFdLCByUmVsOnJbMl19LCBlOntyOlJbMF0sIGM6QywgY1JlbDpSWzFdLCByUmVsOlJbMl19IH07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguMTA1IDsgW01TLVhMU0JdIDIuNS45Ny45MCAqL1xuZnVuY3Rpb24gcGFyc2VfUmdjZUFyZWFSZWwoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdGlmKG9wdHMuYmlmZiA8IDgpIHJldHVybiBwYXJzZV9SZ2NlQXJlYV9CSUZGMihibG9iLCBsZW5ndGgsIG9wdHMpO1xuXHR2YXIgcj1ibG9iLnJlYWRfc2hpZnQob3B0cy5iaWZmID09IDEyID8gNCA6IDIpLCBSPWJsb2IucmVhZF9zaGlmdChvcHRzLmJpZmYgPT0gMTIgPyA0IDogMik7XG5cdHZhciBjPXBhcnNlX0NvbFJlbFUoYmxvYiwgMik7XG5cdHZhciBDPXBhcnNlX0NvbFJlbFUoYmxvYiwgMik7XG5cdHJldHVybiB7IHM6e3I6ciwgYzpjWzBdLCBjUmVsOmNbMV0sIHJSZWw6Y1syXX0sIGU6e3I6UiwgYzpDWzBdLCBjUmVsOkNbMV0sIHJSZWw6Q1syXX0gfTtcbn1cblxuLyogW01TLVhMU10gMi41LjE5OC4xMDkgOyBbTVMtWExTQl0gMi41Ljk3LjkxICovXG5mdW5jdGlvbiBwYXJzZV9SZ2NlTG9jKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRpZihvcHRzICYmIG9wdHMuYmlmZiA+PSAyICYmIG9wdHMuYmlmZiA8PSA1KSByZXR1cm4gcGFyc2VfUmdjZUxvY19CSUZGMihibG9iLCBsZW5ndGgsIG9wdHMpO1xuXHR2YXIgciA9IGJsb2IucmVhZF9zaGlmdChvcHRzICYmIG9wdHMuYmlmZiA9PSAxMiA/IDQgOiAyKTtcblx0dmFyIGMgPSBwYXJzZV9Db2xSZWxVKGJsb2IsIDIpO1xuXHRyZXR1cm4ge3I6ciwgYzpjWzBdLCBjUmVsOmNbMV0sIHJSZWw6Y1syXX07XG59XG5mdW5jdGlvbiBwYXJzZV9SZ2NlTG9jX0JJRkYyKGJsb2IpIHtcblx0dmFyIHIgPSBwYXJzZV9Db2xSZWxVKGJsb2IsIDIpO1xuXHR2YXIgYyA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0cmV0dXJuIHtyOnJbMF0sIGM6YywgY1JlbDpyWzFdLCByUmVsOnJbMl19O1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4LjEwNywgMi41LjQ3ICovXG5mdW5jdGlvbiBwYXJzZV9SZ2NlRWxmTG9jKGJsb2IpIHtcblx0dmFyIHIgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBjID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRyZXR1cm4ge3I6ciwgYzpjICYgMHhGRiwgZlF1b3RlZDohIShjICYgMHg0MDAwKSwgY1JlbDpjPj4xNSwgclJlbDpjPj4xNSB9O1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4LjExMSA7IFtNUy1YTFNCXSAyLjUuOTcuOTIgVE9ETyAqL1xuZnVuY3Rpb24gcGFyc2VfUmdjZUxvY1JlbChibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIGJpZmYgPSBvcHRzICYmIG9wdHMuYmlmZiA/IG9wdHMuYmlmZiA6IDg7XG5cdGlmKGJpZmYgPj0gMiAmJiBiaWZmIDw9IDUpIHJldHVybiBwYXJzZV9SZ2NlTG9jUmVsX0JJRkYyKGJsb2IsIGxlbmd0aCwgb3B0cyk7XG5cdHZhciByID0gYmxvYi5yZWFkX3NoaWZ0KGJpZmYgPj0gMTIgPyA0IDogMik7XG5cdHZhciBjbCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIGNSZWwgPSAoY2wgJiAweDQwMDApID4+IDE0LCByUmVsID0gKGNsICYgMHg4MDAwKSA+PiAxNTtcblx0Y2wgJj0gMHgzRkZGO1xuXHRpZihyUmVsID09IDEpIHdoaWxlKHIgPiAweDdGRkZGKSByIC09IDB4MTAwMDAwO1xuXHRpZihjUmVsID09IDEpIHdoaWxlKGNsID4gMHgxRkZGKSBjbCA9IGNsIC0gMHg0MDAwO1xuXHRyZXR1cm4ge3I6cixjOmNsLGNSZWw6Y1JlbCxyUmVsOnJSZWx9O1xufVxuZnVuY3Rpb24gcGFyc2VfUmdjZUxvY1JlbF9CSUZGMihibG9iKSB7XG5cdHZhciBybCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIGMgPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdHZhciByUmVsID0gKHJsICYgMHg4MDAwKSA+PiAxNSwgY1JlbCA9IChybCAmIDB4NDAwMCkgPj4gMTQ7XG5cdHJsICY9IDB4M0ZGRjtcblx0aWYoclJlbCA9PSAxICYmIHJsID49IDB4MjAwMCkgcmwgPSBybCAtIDB4NDAwMDtcblx0aWYoY1JlbCA9PSAxICYmIGMgPj0gMHg4MCkgYyA9IGMgLSAweDEwMDtcblx0cmV0dXJuIHtyOnJsLGM6YyxjUmVsOmNSZWwsclJlbDpyUmVsfTtcbn1cblxuLyogW01TLVhMU10gMi41LjE5OC4yNyA7IFtNUy1YTFNCXSAyLjUuOTcuMTggKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z0FyZWEoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciB0eXBlID0gKGJsb2JbYmxvYi5sKytdICYgMHg2MCkgPj4gNTtcblx0dmFyIGFyZWEgPSBwYXJzZV9SZ2NlQXJlYShibG9iLCBvcHRzLmJpZmYgPj0gMiAmJiBvcHRzLmJpZmYgPD0gNSA/IDYgOiA4LCBvcHRzKTtcblx0cmV0dXJuIFt0eXBlLCBhcmVhXTtcbn1cblxuLyogW01TLVhMU10gMi41LjE5OC4yOCA7IFtNUy1YTFNCXSAyLjUuOTcuMTkgKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z0FyZWEzZChibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIHR5cGUgPSAoYmxvYltibG9iLmwrK10gJiAweDYwKSA+PiA1O1xuXHR2YXIgaXh0aSA9IGJsb2IucmVhZF9zaGlmdCgyLCAnaScpO1xuXHR2YXIgdyA9IDg7XG5cdGlmKG9wdHMpIHN3aXRjaChvcHRzLmJpZmYpIHtcblx0XHRjYXNlIDU6IGJsb2IubCArPSAxMjsgdyA9IDY7IGJyZWFrO1xuXHRcdGNhc2UgMTI6IHcgPSAxMjsgYnJlYWs7XG5cdH1cblx0dmFyIGFyZWEgPSBwYXJzZV9SZ2NlQXJlYShibG9iLCB3LCBvcHRzKTtcblx0cmV0dXJuIFt0eXBlLCBpeHRpLCBhcmVhXTtcbn1cblxuLyogW01TLVhMU10gMi41LjE5OC4yOSA7IFtNUy1YTFNCXSAyLjUuOTcuMjAgKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z0FyZWFFcnIoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciB0eXBlID0gKGJsb2JbYmxvYi5sKytdICYgMHg2MCkgPj4gNTtcblx0YmxvYi5sICs9IG9wdHMgJiYgKG9wdHMuYmlmZiA+IDgpID8gMTIgOiAob3B0cy5iaWZmIDwgOCA/IDYgOiA4KTtcblx0cmV0dXJuIFt0eXBlXTtcbn1cbi8qIFtNUy1YTFNdIDIuNS4xOTguMzAgOyBbTVMtWExTQl0gMi41Ljk3LjIxICovXG5mdW5jdGlvbiBwYXJzZV9QdGdBcmVhRXJyM2QoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciB0eXBlID0gKGJsb2JbYmxvYi5sKytdICYgMHg2MCkgPj4gNTtcblx0dmFyIGl4dGkgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciB3ID0gODtcblx0aWYob3B0cykgc3dpdGNoKG9wdHMuYmlmZikge1xuXHRcdGNhc2UgNTogYmxvYi5sICs9IDEyOyB3ID0gNjsgYnJlYWs7XG5cdFx0Y2FzZSAxMjogdyA9IDEyOyBicmVhaztcblx0fVxuXHRibG9iLmwgKz0gdztcblx0cmV0dXJuIFt0eXBlLCBpeHRpXTtcbn1cblxuLyogW01TLVhMU10gMi41LjE5OC4zMSA7IFtNUy1YTFNCXSAyLjUuOTcuMjIgKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z0FyZWFOKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgdHlwZSA9IChibG9iW2Jsb2IubCsrXSAmIDB4NjApID4+IDU7XG5cdHZhciBhcmVhID0gcGFyc2VfUmdjZUFyZWFSZWwoYmxvYiwgbGVuZ3RoIC0gMSwgb3B0cyk7XG5cdHJldHVybiBbdHlwZSwgYXJlYV07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguMzIgOyBbTVMtWExTQl0gMi41Ljk3LjIzICovXG5mdW5jdGlvbiBwYXJzZV9QdGdBcnJheShibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIHR5cGUgPSAoYmxvYltibG9iLmwrK10gJiAweDYwKSA+PiA1O1xuXHRibG9iLmwgKz0gb3B0cy5iaWZmID09IDIgPyA2IDogb3B0cy5iaWZmID09IDEyID8gMTQgOiA3O1xuXHRyZXR1cm4gW3R5cGVdO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4LjMzIDsgW01TLVhMU0JdIDIuNS45Ny4yNCAqL1xuZnVuY3Rpb24gcGFyc2VfUHRnQXR0ckJheGNlbChibG9iKSB7XG5cdHZhciBiaXRTZW1pID0gYmxvYltibG9iLmwrMV0gJiAweDAxOyAvKiAxID0gdm9sYXRpbGUgKi9cblx0dmFyIGJpdEJheGNlbCA9IDE7XG5cdGJsb2IubCArPSA0O1xuXHRyZXR1cm4gW2JpdFNlbWksIGJpdEJheGNlbF07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguMzQgOyBbTVMtWExTQl0gMi41Ljk3LjI1ICovXG5mdW5jdGlvbiBwYXJzZV9QdGdBdHRyQ2hvb3NlKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRibG9iLmwgKz0yO1xuXHR2YXIgb2Zmc2V0ID0gYmxvYi5yZWFkX3NoaWZ0KG9wdHMgJiYgb3B0cy5iaWZmID09IDIgPyAxIDogMik7XG5cdHZhciBvID0gW107XG5cdC8qIG9mZnNldCBpcyAxIGxlc3MgdGhhbiB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzICovXG5cdGZvcih2YXIgaSA9IDA7IGkgPD0gb2Zmc2V0OyArK2kpIG8ucHVzaChibG9iLnJlYWRfc2hpZnQob3B0cyAmJiBvcHRzLmJpZmYgPT0gMiA/IDEgOiAyKSk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4LjM1IDsgW01TLVhMU0JdIDIuNS45Ny4yNiAqL1xuZnVuY3Rpb24gcGFyc2VfUHRnQXR0ckdvdG8oYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciBiaXRHb3RvID0gKGJsb2JbYmxvYi5sKzFdICYgMHhGRikgPyAxIDogMDtcblx0YmxvYi5sICs9IDI7XG5cdHJldHVybiBbYml0R290bywgYmxvYi5yZWFkX3NoaWZ0KG9wdHMgJiYgb3B0cy5iaWZmID09IDIgPyAxIDogMildO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4LjM2IDsgW01TLVhMU0JdIDIuNS45Ny4yNyAqL1xuZnVuY3Rpb24gcGFyc2VfUHRnQXR0cklmKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgYml0SWYgPSAoYmxvYltibG9iLmwrMV0gJiAweEZGKSA/IDEgOiAwO1xuXHRibG9iLmwgKz0gMjtcblx0cmV0dXJuIFtiaXRJZiwgYmxvYi5yZWFkX3NoaWZ0KG9wdHMgJiYgb3B0cy5iaWZmID09IDIgPyAxIDogMildO1xufVxuXG4vKiBbTVMtWExTQl0gMi41Ljk3LjI4ICovXG5mdW5jdGlvbiBwYXJzZV9QdGdBdHRySWZFcnJvcihibG9iKSB7XG5cdHZhciBiaXRJZiA9IChibG9iW2Jsb2IubCsxXSAmIDB4RkYpID8gMSA6IDA7XG5cdGJsb2IubCArPSAyO1xuXHRyZXR1cm4gW2JpdElmLCBibG9iLnJlYWRfc2hpZnQoMildO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4LjM3IDsgW01TLVhMU0JdIDIuNS45Ny4yOSAqL1xuZnVuY3Rpb24gcGFyc2VfUHRnQXR0clNlbWkoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciBiaXRTZW1pID0gKGJsb2JbYmxvYi5sKzFdICYgMHhGRikgPyAxIDogMDtcblx0YmxvYi5sICs9IG9wdHMgJiYgb3B0cy5iaWZmID09IDIgPyAzIDogNDtcblx0cmV0dXJuIFtiaXRTZW1pXTtcbn1cblxuLyogW01TLVhMU10gMi41LjE5OC40MCA7IFtNUy1YTFNCXSAyLjUuOTcuMzIgKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z0F0dHJTcGFjZVR5cGUoYmxvYikge1xuXHR2YXIgdHlwZSA9IGJsb2IucmVhZF9zaGlmdCgxKSwgY2NoID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRyZXR1cm4gW3R5cGUsIGNjaF07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguMzggOyBbTVMtWExTQl0gMi41Ljk3LjMwICovXG5mdW5jdGlvbiBwYXJzZV9QdGdBdHRyU3BhY2UoYmxvYikge1xuXHRibG9iLnJlYWRfc2hpZnQoMik7XG5cdHJldHVybiBwYXJzZV9QdGdBdHRyU3BhY2VUeXBlKGJsb2IsIDIpO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4LjM5IDsgW01TLVhMU0JdIDIuNS45Ny4zMSAqL1xuZnVuY3Rpb24gcGFyc2VfUHRnQXR0clNwYWNlU2VtaShibG9iKSB7XG5cdGJsb2IucmVhZF9zaGlmdCgyKTtcblx0cmV0dXJuIHBhcnNlX1B0Z0F0dHJTcGFjZVR5cGUoYmxvYiwgMik7XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguODQgOyBbTVMtWExTQl0gMi41Ljk3LjY4IFRPRE8gKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z1JlZihibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0Ly92YXIgcHRnID0gYmxvYltibG9iLmxdICYgMHgxRjtcblx0dmFyIHR5cGUgPSAoYmxvYltibG9iLmxdICYgMHg2MCk+PjU7XG5cdGJsb2IubCArPSAxO1xuXHR2YXIgbG9jID0gcGFyc2VfUmdjZUxvYyhibG9iLCAwLCBvcHRzKTtcblx0cmV0dXJuIFt0eXBlLCBsb2NdO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4Ljg4IDsgW01TLVhMU0JdIDIuNS45Ny43MiBUT0RPICovXG5mdW5jdGlvbiBwYXJzZV9QdGdSZWZOKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgdHlwZSA9IChibG9iW2Jsb2IubF0gJiAweDYwKT4+NTtcblx0YmxvYi5sICs9IDE7XG5cdHZhciBsb2MgPSBwYXJzZV9SZ2NlTG9jUmVsKGJsb2IsIDAsIG9wdHMpO1xuXHRyZXR1cm4gW3R5cGUsIGxvY107XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguODUgOyBbTVMtWExTQl0gMi41Ljk3LjY5IFRPRE8gKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z1JlZjNkKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgdHlwZSA9IChibG9iW2Jsb2IubF0gJiAweDYwKT4+NTtcblx0YmxvYi5sICs9IDE7XG5cdHZhciBpeHRpID0gYmxvYi5yZWFkX3NoaWZ0KDIpOyAvLyBYdGlJbmRleFxuXHRpZihvcHRzICYmIG9wdHMuYmlmZiA9PSA1KSBibG9iLmwgKz0gMTI7XG5cdHZhciBsb2MgPSBwYXJzZV9SZ2NlTG9jKGJsb2IsIDAsIG9wdHMpOyAvLyBUT0RPOiBvciBSZ2NlTG9jUmVsXG5cdHJldHVybiBbdHlwZSwgaXh0aSwgbG9jXTtcbn1cblxuXG4vKiBbTVMtWExTXSAyLjUuMTk4LjYyIDsgW01TLVhMU0JdIDIuNS45Ny40NSBUT0RPICovXG5mdW5jdGlvbiBwYXJzZV9QdGdGdW5jKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHQvL3ZhciBwdGcgPSBibG9iW2Jsb2IubF0gJiAweDFGO1xuXHR2YXIgdHlwZSA9IChibG9iW2Jsb2IubF0gJiAweDYwKT4+NTtcblx0YmxvYi5sICs9IDE7XG5cdHZhciBpZnRhYiA9IGJsb2IucmVhZF9zaGlmdChvcHRzICYmIG9wdHMuYmlmZiA8PSAzID8gMSA6IDIpO1xuXHRyZXR1cm4gW0Z0YWJBcmdjW2lmdGFiXSwgRnRhYltpZnRhYl0sIHR5cGVdO1xufVxuLyogW01TLVhMU10gMi41LjE5OC42MyA7IFtNUy1YTFNCXSAyLjUuOTcuNDYgVE9ETyAqL1xuZnVuY3Rpb24gcGFyc2VfUHRnRnVuY1ZhcihibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIHR5cGUgPSBibG9iW2Jsb2IubCsrXTtcblx0dmFyIGNwYXJhbXMgPSBibG9iLnJlYWRfc2hpZnQoMSksIHRhYiA9IG9wdHMgJiYgb3B0cy5iaWZmIDw9IDMgPyBbKHR5cGUgPT0gMHg1OCA/IC0xIDogMCksIGJsb2IucmVhZF9zaGlmdCgxKV06IHBhcnNldGFiKGJsb2IpO1xuXHRyZXR1cm4gW2NwYXJhbXMsICh0YWJbMF0gPT09IDAgPyBGdGFiIDogQ2V0YWIpW3RhYlsxXV1dO1xufVxuXG5mdW5jdGlvbiBwYXJzZXRhYihibG9iKSB7XG5cdHJldHVybiBbYmxvYltibG9iLmwrMV0+PjcsIGJsb2IucmVhZF9zaGlmdCgyKSAmIDB4N0ZGRl07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguNDEgOyBbTVMtWExTQl0gMi41Ljk3LjMzICovXG5mdW5jdGlvbiBwYXJzZV9QdGdBdHRyU3VtKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRibG9iLmwgKz0gb3B0cyAmJiBvcHRzLmJpZmYgPT0gMiA/IDMgOiA0OyByZXR1cm47XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguNTggOyBbTVMtWExTQl0gMi41Ljk3LjQwICovXG5mdW5jdGlvbiBwYXJzZV9QdGdFeHAoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdGJsb2IubCsrO1xuXHRpZihvcHRzICYmIG9wdHMuYmlmZiA9PSAxMikgcmV0dXJuIFtibG9iLnJlYWRfc2hpZnQoNCwgJ2knKSwgMF07XG5cdHZhciByb3cgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBjb2wgPSBibG9iLnJlYWRfc2hpZnQob3B0cyAmJiBvcHRzLmJpZmYgPT0gMiA/IDEgOiAyKTtcblx0cmV0dXJuIFtyb3csIGNvbF07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguNTcgOyBbTVMtWExTQl0gMi41Ljk3LjM5ICovXG5mdW5jdGlvbiBwYXJzZV9QdGdFcnIoYmxvYikgeyBibG9iLmwrKzsgcmV0dXJuIEJFcnJbYmxvYi5yZWFkX3NoaWZ0KDEpXTsgfVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4LjY2IDsgW01TLVhMU0JdIDIuNS45Ny40OSAqL1xuZnVuY3Rpb24gcGFyc2VfUHRnSW50KGJsb2IpIHsgYmxvYi5sKys7IHJldHVybiBibG9iLnJlYWRfc2hpZnQoMik7IH1cblxuLyogW01TLVhMU10gMi41LjE5OC40MiA7IFtNUy1YTFNCXSAyLjUuOTcuMzQgKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z0Jvb2woYmxvYikgeyBibG9iLmwrKzsgcmV0dXJuIGJsb2IucmVhZF9zaGlmdCgxKSE9PTA7fVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4Ljc5IDsgW01TLVhMU0JdIDIuNS45Ny42MyAqL1xuZnVuY3Rpb24gcGFyc2VfUHRnTnVtKGJsb2IpIHsgYmxvYi5sKys7IHJldHVybiBwYXJzZV9YbnVtKGJsb2IsIDgpOyB9XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguODkgOyBbTVMtWExTQl0gMi41Ljk3Ljc0ICovXG5mdW5jdGlvbiBwYXJzZV9QdGdTdHIoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7IGJsb2IubCsrOyByZXR1cm4gcGFyc2VfU2hvcnRYTFVuaWNvZGVTdHJpbmcoYmxvYiwgbGVuZ3RoLTEsIG9wdHMpOyB9XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTIuMTEyICsgMi41LjE5Mi4xMXszLDQsNSw2LDd9ICovXG4vKiBbTVMtWExTQl0gMi41Ljk3LjkzICsgMi41Ljk3Ljl7NCw1LDYsN30gKi9cbmZ1bmN0aW9uIHBhcnNlX1NlckFyKGJsb2IsIGJpZmYpIHtcblx0dmFyIHZhbCA9IFtibG9iLnJlYWRfc2hpZnQoMSldO1xuXHRpZihiaWZmID09IDEyKSBzd2l0Y2godmFsWzBdKSB7XG5cdFx0Y2FzZSAweDAyOiB2YWxbMF0gPSAweDA0OyBicmVhazsgLyogU2VyQm9vbCAqL1xuXHRcdGNhc2UgMHgwNDogdmFsWzBdID0gMHgxMDsgYnJlYWs7IC8qIFNlckVyciAqL1xuXHRcdGNhc2UgMHgwMDogdmFsWzBdID0gMHgwMTsgYnJlYWs7IC8qIFNlck51bSAqL1xuXHRcdGNhc2UgMHgwMTogdmFsWzBdID0gMHgwMjsgYnJlYWs7IC8qIFNlclN0ciAqL1xuXHR9XG5cdHN3aXRjaCh2YWxbMF0pIHtcblx0XHRjYXNlIDB4MDQ6IC8qIFNlckJvb2wgLS0gYm9vbGVhbiAqL1xuXHRcdFx0dmFsWzFdID0gcGFyc2Vib29sKGJsb2IsIDEpID8gJ1RSVUUnIDogJ0ZBTFNFJztcblx0XHRcdGlmKGJpZmYgIT0gMTIpIGJsb2IubCArPSA3OyBicmVhaztcblx0XHRjYXNlIDB4MjU6IC8qIGFwcGVhcnMgdG8gYmUgYW4gYWxpYXMgKi9cblx0XHRjYXNlIDB4MTA6IC8qIFNlckVyciAtLSBlcnJvciAqL1xuXHRcdFx0dmFsWzFdID0gQkVycltibG9iW2Jsb2IubF1dO1xuXHRcdFx0YmxvYi5sICs9ICgoYmlmZiA9PSAxMikgPyA0IDogOCk7IGJyZWFrO1xuXHRcdGNhc2UgMHgwMDogLyogU2VyTmlsIC0tIGhvbmVzdGx5LCBJJ20gbm90IHN1cmUgaG93IHRvIHJlcHJvZHVjZSB0aGlzICovXG5cdFx0XHRibG9iLmwgKz0gODsgYnJlYWs7XG5cdFx0Y2FzZSAweDAxOiAvKiBTZXJOdW0gLS0gWG51bSAqL1xuXHRcdFx0dmFsWzFdID0gcGFyc2VfWG51bShibG9iLCA4KTsgYnJlYWs7XG5cdFx0Y2FzZSAweDAyOiAvKiBTZXJTdHIgLS0gWExVbmljb2RlU3RyaW5nICg8MjU2IGNoYXJzKSAqL1xuXHRcdFx0dmFsWzFdID0gcGFyc2VfWExVbmljb2RlU3RyaW5nMihibG9iLCAwLCB7YmlmZjpiaWZmID4gMCAmJiBiaWZmIDwgOCA/IDIgOiBiaWZmfSk7IGJyZWFrO1xuXHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihcIkJhZCBTZXJBcjogXCIgKyB2YWxbMF0pOyAvKiBVbnJlYWNoYWJsZSAqL1xuXHR9XG5cdHJldHVybiB2YWw7XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguNjEgOyBbTVMtWExTQl0gMi41Ljk3LjQ0ICovXG5mdW5jdGlvbiBwYXJzZV9QdGdFeHRyYU1lbShibG9iLCBjY2UsIG9wdHMpIHtcblx0dmFyIGNvdW50ID0gYmxvYi5yZWFkX3NoaWZ0KChvcHRzLmJpZmYgPT0gMTIpID8gNCA6IDIpO1xuXHR2YXIgb3V0ID0gW107XG5cdGZvcih2YXIgaSA9IDA7IGkgIT0gY291bnQ7ICsraSkgb3V0LnB1c2goKChvcHRzLmJpZmYgPT0gMTIpID8gcGFyc2VfVW5jaGVja2VkUmZYIDogcGFyc2VfUmVmOFUpKGJsb2IsIDgpKTtcblx0cmV0dXJuIG91dDtcbn1cblxuLyogW01TLVhMU10gMi41LjE5OC41OSA7IFtNUy1YTFNCXSAyLjUuOTcuNDEgKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z0V4dHJhQXJyYXkoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciByb3dzID0gMCwgY29scyA9IDA7XG5cdGlmKG9wdHMuYmlmZiA9PSAxMikge1xuXHRcdHJvd3MgPSBibG9iLnJlYWRfc2hpZnQoNCk7IC8vIERSd1xuXHRcdGNvbHMgPSBibG9iLnJlYWRfc2hpZnQoNCk7IC8vIERDb2xcblx0fSBlbHNlIHtcblx0XHRjb2xzID0gMSArIGJsb2IucmVhZF9zaGlmdCgxKTsgLy9EQ29sQnl0ZVVcblx0XHRyb3dzID0gMSArIGJsb2IucmVhZF9zaGlmdCgyKTsgLy9EUndcblx0fVxuXHRpZihvcHRzLmJpZmYgPj0gMiAmJiBvcHRzLmJpZmYgPCA4KSB7IC0tcm93czsgaWYoLS1jb2xzID09IDApIGNvbHMgPSAweDEwMDsgfVxuXHQvLyAkRmxvd0lnbm9yZVxuXHRmb3IodmFyIGkgPSAwLCBvID0gW107IGkgIT0gcm93cyAmJiAob1tpXSA9IFtdKTsgKytpKVxuXHRcdGZvcih2YXIgaiA9IDA7IGogIT0gY29sczsgKytqKSBvW2ldW2pdID0gcGFyc2VfU2VyQXIoYmxvYiwgb3B0cy5iaWZmKTtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguNzYgOyBbTVMtWExTQl0gMi41Ljk3LjYwICovXG5mdW5jdGlvbiBwYXJzZV9QdGdOYW1lKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgdHlwZSA9IChibG9iLnJlYWRfc2hpZnQoMSkgPj4+IDUpICYgMHgwMztcblx0dmFyIHcgPSAoIW9wdHMgfHwgKG9wdHMuYmlmZiA+PSA4KSkgPyA0IDogMjtcblx0dmFyIG5hbWVpbmRleCA9IGJsb2IucmVhZF9zaGlmdCh3KTtcblx0c3dpdGNoKG9wdHMuYmlmZikge1xuXHRcdGNhc2UgMjogYmxvYi5sICs9IDU7IGJyZWFrO1xuXHRcdGNhc2UgMzogY2FzZSA0OiBibG9iLmwgKz0gODsgYnJlYWs7XG5cdFx0Y2FzZSA1OiBibG9iLmwgKz0gMTI7IGJyZWFrO1xuXHR9XG5cdHJldHVybiBbdHlwZSwgMCwgbmFtZWluZGV4XTtcbn1cblxuLyogW01TLVhMU10gMi41LjE5OC43NyA7IFtNUy1YTFNCXSAyLjUuOTcuNjEgKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z05hbWVYKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRpZihvcHRzLmJpZmYgPT0gNSkgcmV0dXJuIHBhcnNlX1B0Z05hbWVYX0JJRkY1KGJsb2IsIGxlbmd0aCwgb3B0cyk7XG5cdHZhciB0eXBlID0gKGJsb2IucmVhZF9zaGlmdCgxKSA+Pj4gNSkgJiAweDAzO1xuXHR2YXIgaXh0aSA9IGJsb2IucmVhZF9zaGlmdCgyKTsgLy8gWHRpSW5kZXhcblx0dmFyIG5hbWVpbmRleCA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0cmV0dXJuIFt0eXBlLCBpeHRpLCBuYW1laW5kZXhdO1xufVxuZnVuY3Rpb24gcGFyc2VfUHRnTmFtZVhfQklGRjUoYmxvYikge1xuXHR2YXIgdHlwZSA9IChibG9iLnJlYWRfc2hpZnQoMSkgPj4+IDUpICYgMHgwMztcblx0dmFyIGl4dGkgPSBibG9iLnJlYWRfc2hpZnQoMiwgJ2knKTsgLy8gWHRpSW5kZXhcblx0YmxvYi5sICs9IDg7XG5cdHZhciBuYW1laW5kZXggPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdGJsb2IubCArPSAxMjtcblx0cmV0dXJuIFt0eXBlLCBpeHRpLCBuYW1laW5kZXhdO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4LjcwIDsgW01TLVhMU0JdIDIuNS45Ny41NCAqL1xuZnVuY3Rpb24gcGFyc2VfUHRnTWVtQXJlYShibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIHR5cGUgPSAoYmxvYi5yZWFkX3NoaWZ0KDEpID4+PiA1KSAmIDB4MDM7XG5cdGJsb2IubCArPSAob3B0cyAmJiBvcHRzLmJpZmYgPT0gMiA/IDMgOiA0KTtcblx0dmFyIGNjZSA9IGJsb2IucmVhZF9zaGlmdChvcHRzICYmIG9wdHMuYmlmZiA9PSAyID8gMSA6IDIpO1xuXHRyZXR1cm4gW3R5cGUsIGNjZV07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguNzIgOyBbTVMtWExTQl0gMi41Ljk3LjU2ICovXG5mdW5jdGlvbiBwYXJzZV9QdGdNZW1GdW5jKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgdHlwZSA9IChibG9iLnJlYWRfc2hpZnQoMSkgPj4+IDUpICYgMHgwMztcblx0dmFyIGNjZSA9IGJsb2IucmVhZF9zaGlmdChvcHRzICYmIG9wdHMuYmlmZiA9PSAyID8gMSA6IDIpO1xuXHRyZXR1cm4gW3R5cGUsIGNjZV07XG59XG5cblxuLyogW01TLVhMU10gMi41LjE5OC44NiA7IFtNUy1YTFNCXSAyLjUuOTcuNjkgKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z1JlZkVycihibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIHR5cGUgPSAoYmxvYi5yZWFkX3NoaWZ0KDEpID4+PiA1KSAmIDB4MDM7XG5cdGJsb2IubCArPSA0O1xuXHRpZihvcHRzLmJpZmYgPCA4KSBibG9iLmwtLTtcblx0aWYob3B0cy5iaWZmID09IDEyKSBibG9iLmwgKz0gMjtcblx0cmV0dXJuIFt0eXBlXTtcbn1cblxuLyogW01TLVhMU10gMi41LjE5OC44NyA7IFtNUy1YTFNCXSAyLjUuOTcuNzEgKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z1JlZkVycjNkKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgdHlwZSA9IChibG9iW2Jsb2IubCsrXSAmIDB4NjApID4+IDU7XG5cdHZhciBpeHRpID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgdyA9IDQ7XG5cdGlmKG9wdHMpIHN3aXRjaChvcHRzLmJpZmYpIHtcblx0XHRjYXNlIDU6IHcgPSAxNTsgYnJlYWs7XG5cdFx0Y2FzZSAxMjogdyA9IDY7IGJyZWFrO1xuXHR9XG5cdGJsb2IubCArPSB3O1xuXHRyZXR1cm4gW3R5cGUsIGl4dGldO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4LjcxIDsgW01TLVhMU0JdIDIuNS45Ny41NSAqL1xudmFyIHBhcnNlX1B0Z01lbUVyciA9IHBhcnNlbm9vcDtcbi8qIFtNUy1YTFNdIDIuNS4xOTguNzMgIDsgW01TLVhMU0JdIDIuNS45Ny41NyAqL1xudmFyIHBhcnNlX1B0Z01lbU5vTWVtID0gcGFyc2Vub29wO1xuLyogW01TLVhMU10gMi41LjE5OC45MiAqL1xudmFyIHBhcnNlX1B0Z1RibCA9IHBhcnNlbm9vcDtcblxuZnVuY3Rpb24gcGFyc2VfUHRnRWxmTG9jKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRibG9iLmwgKz0gMjtcblx0cmV0dXJuIFtwYXJzZV9SZ2NlRWxmTG9jKGJsb2IsIDQsIG9wdHMpXTtcbn1cbmZ1bmN0aW9uIHBhcnNlX1B0Z0VsZk5vb3AoYmxvYikge1xuXHRibG9iLmwgKz0gNjtcblx0cmV0dXJuIFtdO1xufVxuLyogW01TLVhMU10gMi41LjE5OC40NiAqL1xudmFyIHBhcnNlX1B0Z0VsZkNvbCA9IHBhcnNlX1B0Z0VsZkxvYztcbi8qIFtNUy1YTFNdIDIuNS4xOTguNDcgKi9cbnZhciBwYXJzZV9QdGdFbGZDb2xTID0gcGFyc2VfUHRnRWxmTm9vcDtcbi8qIFtNUy1YTFNdIDIuNS4xOTguNDggKi9cbnZhciBwYXJzZV9QdGdFbGZDb2xTViA9IHBhcnNlX1B0Z0VsZk5vb3A7XG4vKiBbTVMtWExTXSAyLjUuMTk4LjQ5ICovXG52YXIgcGFyc2VfUHRnRWxmQ29sViA9IHBhcnNlX1B0Z0VsZkxvYztcbi8qIFtNUy1YTFNdIDIuNS4xOTguNTAgKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z0VsZkxlbChibG9iKSB7XG5cdGJsb2IubCArPSAyO1xuXHRyZXR1cm4gW3BhcnNldWludDE2KGJsb2IpLCBibG9iLnJlYWRfc2hpZnQoMikgJiAweDAxXTtcbn1cbi8qIFtNUy1YTFNdIDIuNS4xOTguNTEgKi9cbnZhciBwYXJzZV9QdGdFbGZSYWRpY2FsID0gcGFyc2VfUHRnRWxmTG9jO1xuLyogW01TLVhMU10gMi41LjE5OC41MiAqL1xudmFyIHBhcnNlX1B0Z0VsZlJhZGljYWxMZWwgPSBwYXJzZV9QdGdFbGZMZWw7XG4vKiBbTVMtWExTXSAyLjUuMTk4LjUzICovXG52YXIgcGFyc2VfUHRnRWxmUmFkaWNhbFMgPSBwYXJzZV9QdGdFbGZOb29wO1xuLyogW01TLVhMU10gMi41LjE5OC41NCAqL1xudmFyIHBhcnNlX1B0Z0VsZlJ3ID0gcGFyc2VfUHRnRWxmTG9jO1xuLyogW01TLVhMU10gMi41LjE5OC41NSAqL1xudmFyIHBhcnNlX1B0Z0VsZlJ3ViA9IHBhcnNlX1B0Z0VsZkxvYztcblxuLyogW01TLVhMU0JdIDIuNS45Ny41MiBUT0RPICovXG52YXIgUHRnTGlzdFJUID0gW1xuXHRcIkRhdGFcIixcblx0XCJBbGxcIixcblx0XCJIZWFkZXJzXCIsXG5cdFwiPz9cIixcblx0XCI/RGF0YTJcIixcblx0XCI/P1wiLFxuXHRcIj9EYXRhSGVhZGVyc1wiLFxuXHRcIj8/XCIsXG5cdFwiVG90YWxzXCIsXG5cdFwiPz9cIixcblx0XCI/P1wiLFxuXHRcIj8/XCIsXG5cdFwiP0RhdGFUb3RhbHNcIixcblx0XCI/P1wiLFxuXHRcIj8/XCIsXG5cdFwiPz9cIixcblx0XCI/Q3VycmVudFwiXG5dO1xuZnVuY3Rpb24gcGFyc2VfUHRnTGlzdChibG9iKSB7XG5cdGJsb2IubCArPSAyO1xuXHR2YXIgaXh0aSA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIGZsYWdzID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgaWR4ID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgYyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIEMgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBydCA9IFB0Z0xpc3RSVFsoZmxhZ3MgPj4gMikgJiAweDFGXTtcblx0cmV0dXJuIHtpeHRpOiBpeHRpLCBjb2x0eXBlOihmbGFncyYweDMpLCBydDpydCwgaWR4OmlkeCwgYzpjLCBDOkN9O1xufVxuLyogW01TLVhMU10gMi41LjE5OC45MSA7IFtNUy1YTFNCXSAyLjUuOTcuNzYgKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z1N4TmFtZShibG9iKSB7XG5cdGJsb2IubCArPSAyO1xuXHRyZXR1cm4gW2Jsb2IucmVhZF9zaGlmdCg0KV07XG59XG5cbi8qIFtYTFNdIG9sZCBzcGVjICovXG5mdW5jdGlvbiBwYXJzZV9QdGdTaGVldChibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0YmxvYi5sICs9IDU7XG5cdGJsb2IubCArPSAyO1xuXHRibG9iLmwgKz0gKG9wdHMuYmlmZiA9PSAyID8gMSA6IDQpO1xuXHRyZXR1cm4gW1wiUFRHU0hFRVRcIl07XG59XG5mdW5jdGlvbiBwYXJzZV9QdGdFbmRTaGVldChibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0YmxvYi5sICs9IChvcHRzLmJpZmYgPT0gMiA/IDQgOiA1KTtcblx0cmV0dXJuIFtcIlBUR0VORFNIRUVUXCJdO1xufVxuZnVuY3Rpb24gcGFyc2VfUHRnTWVtQXJlYU4oYmxvYikge1xuXHR2YXIgdHlwZSA9IChibG9iLnJlYWRfc2hpZnQoMSkgPj4+IDUpICYgMHgwMztcblx0dmFyIGNjZSA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0cmV0dXJuIFt0eXBlLCBjY2VdO1xufVxuZnVuY3Rpb24gcGFyc2VfUHRnTWVtTm9NZW1OKGJsb2IpIHtcblx0dmFyIHR5cGUgPSAoYmxvYi5yZWFkX3NoaWZ0KDEpID4+PiA1KSAmIDB4MDM7XG5cdHZhciBjY2UgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHJldHVybiBbdHlwZSwgY2NlXTtcbn1cbmZ1bmN0aW9uIHBhcnNlX1B0Z0F0dHJOb29wKGJsb2IpIHtcblx0YmxvYi5sICs9IDQ7XG5cdHJldHVybiBbMCwgMF07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguMjUgOyBbTVMtWExTQl0gMi41Ljk3LjE2ICovXG52YXIgUHRnVHlwZXMgPSB7XG4weDAxOiB7IG46J1B0Z0V4cCcsIGY6cGFyc2VfUHRnRXhwIH0sXG4weDAyOiB7IG46J1B0Z1RibCcsIGY6cGFyc2VfUHRnVGJsIH0sXG4weDAzOiB7IG46J1B0Z0FkZCcsIGY6cGFyc2VyZWFkMSB9LFxuMHgwNDogeyBuOidQdGdTdWInLCBmOnBhcnNlcmVhZDEgfSxcbjB4MDU6IHsgbjonUHRnTXVsJywgZjpwYXJzZXJlYWQxIH0sXG4weDA2OiB7IG46J1B0Z0RpdicsIGY6cGFyc2VyZWFkMSB9LFxuMHgwNzogeyBuOidQdGdQb3dlcicsIGY6cGFyc2VyZWFkMSB9LFxuMHgwODogeyBuOidQdGdDb25jYXQnLCBmOnBhcnNlcmVhZDEgfSxcbjB4MDk6IHsgbjonUHRnTHQnLCBmOnBhcnNlcmVhZDEgfSxcbjB4MEE6IHsgbjonUHRnTGUnLCBmOnBhcnNlcmVhZDEgfSxcbjB4MEI6IHsgbjonUHRnRXEnLCBmOnBhcnNlcmVhZDEgfSxcbjB4MEM6IHsgbjonUHRnR2UnLCBmOnBhcnNlcmVhZDEgfSxcbjB4MEQ6IHsgbjonUHRnR3QnLCBmOnBhcnNlcmVhZDEgfSxcbjB4MEU6IHsgbjonUHRnTmUnLCBmOnBhcnNlcmVhZDEgfSxcbjB4MEY6IHsgbjonUHRnSXNlY3QnLCBmOnBhcnNlcmVhZDEgfSxcbjB4MTA6IHsgbjonUHRnVW5pb24nLCBmOnBhcnNlcmVhZDEgfSxcbjB4MTE6IHsgbjonUHRnUmFuZ2UnLCBmOnBhcnNlcmVhZDEgfSxcbjB4MTI6IHsgbjonUHRnVXBsdXMnLCBmOnBhcnNlcmVhZDEgfSxcbjB4MTM6IHsgbjonUHRnVW1pbnVzJywgZjpwYXJzZXJlYWQxIH0sXG4weDE0OiB7IG46J1B0Z1BlcmNlbnQnLCBmOnBhcnNlcmVhZDEgfSxcbjB4MTU6IHsgbjonUHRnUGFyZW4nLCBmOnBhcnNlcmVhZDEgfSxcbjB4MTY6IHsgbjonUHRnTWlzc0FyZycsIGY6cGFyc2VyZWFkMSB9LFxuMHgxNzogeyBuOidQdGdTdHInLCBmOnBhcnNlX1B0Z1N0ciB9LFxuMHgxQTogeyBuOidQdGdTaGVldCcsIGY6cGFyc2VfUHRnU2hlZXQgfSxcbjB4MUI6IHsgbjonUHRnRW5kU2hlZXQnLCBmOnBhcnNlX1B0Z0VuZFNoZWV0IH0sXG4weDFDOiB7IG46J1B0Z0VycicsIGY6cGFyc2VfUHRnRXJyIH0sXG4weDFEOiB7IG46J1B0Z0Jvb2wnLCBmOnBhcnNlX1B0Z0Jvb2wgfSxcbjB4MUU6IHsgbjonUHRnSW50JywgZjpwYXJzZV9QdGdJbnQgfSxcbjB4MUY6IHsgbjonUHRnTnVtJywgZjpwYXJzZV9QdGdOdW0gfSxcbjB4MjA6IHsgbjonUHRnQXJyYXknLCBmOnBhcnNlX1B0Z0FycmF5IH0sXG4weDIxOiB7IG46J1B0Z0Z1bmMnLCBmOnBhcnNlX1B0Z0Z1bmMgfSxcbjB4MjI6IHsgbjonUHRnRnVuY1ZhcicsIGY6cGFyc2VfUHRnRnVuY1ZhciB9LFxuMHgyMzogeyBuOidQdGdOYW1lJywgZjpwYXJzZV9QdGdOYW1lIH0sXG4weDI0OiB7IG46J1B0Z1JlZicsIGY6cGFyc2VfUHRnUmVmIH0sXG4weDI1OiB7IG46J1B0Z0FyZWEnLCBmOnBhcnNlX1B0Z0FyZWEgfSxcbjB4MjY6IHsgbjonUHRnTWVtQXJlYScsIGY6cGFyc2VfUHRnTWVtQXJlYSB9LFxuMHgyNzogeyBuOidQdGdNZW1FcnInLCBmOnBhcnNlX1B0Z01lbUVyciB9LFxuMHgyODogeyBuOidQdGdNZW1Ob01lbScsIGY6cGFyc2VfUHRnTWVtTm9NZW0gfSxcbjB4Mjk6IHsgbjonUHRnTWVtRnVuYycsIGY6cGFyc2VfUHRnTWVtRnVuYyB9LFxuMHgyQTogeyBuOidQdGdSZWZFcnInLCBmOnBhcnNlX1B0Z1JlZkVyciB9LFxuMHgyQjogeyBuOidQdGdBcmVhRXJyJywgZjpwYXJzZV9QdGdBcmVhRXJyIH0sXG4weDJDOiB7IG46J1B0Z1JlZk4nLCBmOnBhcnNlX1B0Z1JlZk4gfSxcbjB4MkQ6IHsgbjonUHRnQXJlYU4nLCBmOnBhcnNlX1B0Z0FyZWFOIH0sXG4weDJFOiB7IG46J1B0Z01lbUFyZWFOJywgZjpwYXJzZV9QdGdNZW1BcmVhTiB9LFxuMHgyRjogeyBuOidQdGdNZW1Ob01lbU4nLCBmOnBhcnNlX1B0Z01lbU5vTWVtTiB9LFxuMHgzOTogeyBuOidQdGdOYW1lWCcsIGY6cGFyc2VfUHRnTmFtZVggfSxcbjB4M0E6IHsgbjonUHRnUmVmM2QnLCBmOnBhcnNlX1B0Z1JlZjNkIH0sXG4weDNCOiB7IG46J1B0Z0FyZWEzZCcsIGY6cGFyc2VfUHRnQXJlYTNkIH0sXG4weDNDOiB7IG46J1B0Z1JlZkVycjNkJywgZjpwYXJzZV9QdGdSZWZFcnIzZCB9LFxuMHgzRDogeyBuOidQdGdBcmVhRXJyM2QnLCBmOnBhcnNlX1B0Z0FyZWFFcnIzZCB9LFxuMHhGRjoge31cbn07XG4vKiBUaGVzZSBhcmUgZHVwbGljYXRlZCBpbiB0aGUgUHRnVHlwZXMgdGFibGUgKi9cbnZhciBQdGdEdXBlcyA9IHtcbjB4NDA6IDB4MjAsIDB4NjA6IDB4MjAsXG4weDQxOiAweDIxLCAweDYxOiAweDIxLFxuMHg0MjogMHgyMiwgMHg2MjogMHgyMixcbjB4NDM6IDB4MjMsIDB4NjM6IDB4MjMsXG4weDQ0OiAweDI0LCAweDY0OiAweDI0LFxuMHg0NTogMHgyNSwgMHg2NTogMHgyNSxcbjB4NDY6IDB4MjYsIDB4NjY6IDB4MjYsXG4weDQ3OiAweDI3LCAweDY3OiAweDI3LFxuMHg0ODogMHgyOCwgMHg2ODogMHgyOCxcbjB4NDk6IDB4MjksIDB4Njk6IDB4MjksXG4weDRBOiAweDJBLCAweDZBOiAweDJBLFxuMHg0QjogMHgyQiwgMHg2QjogMHgyQixcbjB4NEM6IDB4MkMsIDB4NkM6IDB4MkMsXG4weDREOiAweDJELCAweDZEOiAweDJELFxuMHg0RTogMHgyRSwgMHg2RTogMHgyRSxcbjB4NEY6IDB4MkYsIDB4NkY6IDB4MkYsXG4weDU4OiAweDIyLCAweDc4OiAweDIyLFxuMHg1OTogMHgzOSwgMHg3OTogMHgzOSxcbjB4NUE6IDB4M0EsIDB4N0E6IDB4M0EsXG4weDVCOiAweDNCLCAweDdCOiAweDNCLFxuMHg1QzogMHgzQywgMHg3QzogMHgzQyxcbjB4NUQ6IDB4M0QsIDB4N0Q6IDB4M0Rcbn07XG4oZnVuY3Rpb24oKXtmb3IodmFyIHkgaW4gUHRnRHVwZXMpIFB0Z1R5cGVzW3ldID0gUHRnVHlwZXNbUHRnRHVwZXNbeV1dO30pKCk7XG5cbnZhciBQdGcxOCA9IHtcbjB4MDE6IHsgbjonUHRnRWxmTGVsJywgZjpwYXJzZV9QdGdFbGZMZWwgfSxcbjB4MDI6IHsgbjonUHRnRWxmUncnLCBmOnBhcnNlX1B0Z0VsZlJ3IH0sXG4weDAzOiB7IG46J1B0Z0VsZkNvbCcsIGY6cGFyc2VfUHRnRWxmQ29sIH0sXG4weDA2OiB7IG46J1B0Z0VsZlJ3VicsIGY6cGFyc2VfUHRnRWxmUndWIH0sXG4weDA3OiB7IG46J1B0Z0VsZkNvbFYnLCBmOnBhcnNlX1B0Z0VsZkNvbFYgfSxcbjB4MEE6IHsgbjonUHRnRWxmUmFkaWNhbCcsIGY6cGFyc2VfUHRnRWxmUmFkaWNhbCB9LFxuMHgwQjogeyBuOidQdGdFbGZSYWRpY2FsUycsIGY6cGFyc2VfUHRnRWxmUmFkaWNhbFMgfSxcbjB4MEQ6IHsgbjonUHRnRWxmQ29sUycsIGY6cGFyc2VfUHRnRWxmQ29sUyB9LFxuMHgwRjogeyBuOidQdGdFbGZDb2xTVicsIGY6cGFyc2VfUHRnRWxmQ29sU1YgfSxcbjB4MTA6IHsgbjonUHRnRWxmUmFkaWNhbExlbCcsIGY6cGFyc2VfUHRnRWxmUmFkaWNhbExlbCB9LFxuMHgxOTogeyBuOidQdGdMaXN0JywgZjpwYXJzZV9QdGdMaXN0IH0sXG4weDFEOiB7IG46J1B0Z1N4TmFtZScsIGY6cGFyc2VfUHRnU3hOYW1lIH0sXG4weEZGOiB7fVxufTtcbnZhciBQdGcxOSA9IHtcbjB4MDA6IHsgbjonUHRnQXR0ck5vb3AnLCBmOnBhcnNlX1B0Z0F0dHJOb29wIH0sXG4weDAxOiB7IG46J1B0Z0F0dHJTZW1pJywgZjpwYXJzZV9QdGdBdHRyU2VtaSB9LFxuMHgwMjogeyBuOidQdGdBdHRySWYnLCBmOnBhcnNlX1B0Z0F0dHJJZiB9LFxuMHgwNDogeyBuOidQdGdBdHRyQ2hvb3NlJywgZjpwYXJzZV9QdGdBdHRyQ2hvb3NlIH0sXG4weDA4OiB7IG46J1B0Z0F0dHJHb3RvJywgZjpwYXJzZV9QdGdBdHRyR290byB9LFxuMHgxMDogeyBuOidQdGdBdHRyU3VtJywgZjpwYXJzZV9QdGdBdHRyU3VtIH0sXG4weDIwOiB7IG46J1B0Z0F0dHJCYXhjZWwnLCBmOnBhcnNlX1B0Z0F0dHJCYXhjZWwgfSxcbjB4NDA6IHsgbjonUHRnQXR0clNwYWNlJywgZjpwYXJzZV9QdGdBdHRyU3BhY2UgfSxcbjB4NDE6IHsgbjonUHRnQXR0clNwYWNlU2VtaScsIGY6cGFyc2VfUHRnQXR0clNwYWNlU2VtaSB9LFxuMHg4MDogeyBuOidQdGdBdHRySWZFcnJvcicsIGY6cGFyc2VfUHRnQXR0cklmRXJyb3IgfSxcbjB4RkY6IHt9XG59O1xuUHRnMTlbMHgyMV0gPSBQdGcxOVsweDIwXTtcblxuLyogW01TLVhMU10gMi41LjE5OC4xMDMgOyBbTVMtWExTQl0gMi41Ljk3Ljg3ICovXG5mdW5jdGlvbiBwYXJzZV9SZ2JFeHRyYShibG9iLCBsZW5ndGgsIHJnY2UsIG9wdHMpIHtcblx0aWYob3B0cy5iaWZmIDwgOCkgcmV0dXJuIHBhcnNlbm9vcChibG9iLCBsZW5ndGgpO1xuXHR2YXIgdGFyZ2V0ID0gYmxvYi5sICsgbGVuZ3RoO1xuXHR2YXIgbyA9IFtdO1xuXHRmb3IodmFyIGkgPSAwOyBpICE9PSByZ2NlLmxlbmd0aDsgKytpKSB7XG5cdFx0c3dpdGNoKHJnY2VbaV1bMF0pIHtcblx0XHRcdGNhc2UgJ1B0Z0FycmF5JzogLyogUHRnQXJyYXkgLT4gUHRnRXh0cmFBcnJheSAqL1xuXHRcdFx0XHRyZ2NlW2ldWzFdID0gcGFyc2VfUHRnRXh0cmFBcnJheShibG9iLCAwLCBvcHRzKTtcblx0XHRcdFx0by5wdXNoKHJnY2VbaV1bMV0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ1B0Z01lbUFyZWEnOiAvKiBQdGdNZW1BcmVhIC0+IFB0Z0V4dHJhTWVtICovXG5cdFx0XHRcdHJnY2VbaV1bMl0gPSBwYXJzZV9QdGdFeHRyYU1lbShibG9iLCByZ2NlW2ldWzFdLCBvcHRzKTtcblx0XHRcdFx0by5wdXNoKHJnY2VbaV1bMl0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ1B0Z0V4cCc6IC8qIFB0Z0V4cCAtPiBQdGdFeHRyYUNvbCAqL1xuXHRcdFx0XHRpZihvcHRzICYmIG9wdHMuYmlmZiA9PSAxMikge1xuXHRcdFx0XHRcdHJnY2VbaV1bMV1bMV0gPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0XHRcdFx0by5wdXNoKHJnY2VbaV1bMV0pO1xuXHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0Y2FzZSAnUHRnTGlzdCc6IC8qIFRPRE86IFB0Z0xpc3QgLT4gUHRnRXh0cmFMaXN0ICovXG5cdFx0XHRjYXNlICdQdGdFbGZSYWRpY2FsUyc6IC8qIFRPRE86IFB0Z0VsZlJhZGljYWxTIC0+IFB0Z0V4dHJhRWxmICovXG5cdFx0XHRjYXNlICdQdGdFbGZDb2xTJzogLyogVE9ETzogUHRnRWxmQ29sUyAtPiBQdGdFeHRyYUVsZiAqL1xuXHRcdFx0Y2FzZSAnUHRnRWxmQ29sU1YnOiAvKiBUT0RPOiBQdGdFbGZDb2xTViAtPiBQdGdFeHRyYUVsZiAqL1xuXHRcdFx0XHR0aHJvdyBcIlVuc3VwcG9ydGVkIFwiICsgcmdjZVtpXVswXTtcblx0XHRcdGRlZmF1bHQ6IGJyZWFrO1xuXHRcdH1cblx0fVxuXHRsZW5ndGggPSB0YXJnZXQgLSBibG9iLmw7XG5cdC8qIG5vdGU6IHRoaXMgaXMgdGVjaG5pY2FsbHkgYW4gZXJyb3IgYnV0IEV4Y2VsIGRpc3JlZ2FyZHMgKi9cblx0Ly9pZih0YXJnZXQgIT09IGJsb2IubCAmJiBibG9iLmwgIT09IHRhcmdldCAtIGxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKHRhcmdldCArIFwiICE9IFwiICsgYmxvYi5sKTtcblx0aWYobGVuZ3RoICE9PSAwKSBvLnB1c2gocGFyc2Vub29wKGJsb2IsIGxlbmd0aCkpO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU10gMi41LjE5OC4xMDQgOyBbTVMtWExTQl0gMi41Ljk3Ljg4ICovXG5mdW5jdGlvbiBwYXJzZV9SZ2NlKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgdGFyZ2V0ID0gYmxvYi5sICsgbGVuZ3RoO1xuXHR2YXIgUiwgaWQsIHB0Z3MgPSBbXTtcblx0d2hpbGUodGFyZ2V0ICE9IGJsb2IubCkge1xuXHRcdGxlbmd0aCA9IHRhcmdldCAtIGJsb2IubDtcblx0XHRpZCA9IGJsb2JbYmxvYi5sXTtcblx0XHRSID0gUHRnVHlwZXNbaWRdO1xuXHRcdGlmKGlkID09PSAweDE4IHx8IGlkID09PSAweDE5KSBSID0gKGlkID09PSAweDE4ID8gUHRnMTggOiBQdGcxOSlbYmxvYltibG9iLmwgKyAxXV07XG5cdFx0aWYoIVIgfHwgIVIuZikgeyAvKnB0Z3MucHVzaCovKHBhcnNlbm9vcChibG9iLCBsZW5ndGgpKTsgfVxuXHRcdGVsc2UgeyBwdGdzLnB1c2goW1IubiwgUi5mKGJsb2IsIGxlbmd0aCwgb3B0cyldKTsgfVxuXHR9XG5cdHJldHVybiBwdGdzO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlfYXJyYXkoZikge1xuXHR2YXIgbyA9IFtdO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgZi5sZW5ndGg7ICsraSkge1xuXHRcdHZhciB4ID0gZltpXSwgciA9IFtdO1xuXHRcdGZvcih2YXIgaiA9IDA7IGogPCB4Lmxlbmd0aDsgKytqKSB7XG5cdFx0XHR2YXIgeSA9IHhbal07XG5cdFx0XHRpZih5KSBzd2l0Y2goeVswXSkge1xuXHRcdFx0XHQvLyBUT0RPOiBoYW5kbGUgZW1iZWRkZWQgcXVvdGVzXG5cdFx0XHRcdGNhc2UgMHgwMjpcbnIucHVzaCgnXCInICsgeVsxXS5yZXBsYWNlKC9cIi9nLCdcIlwiJykgKyAnXCInKTsgYnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6IHIucHVzaCh5WzFdKTtcblx0XHRcdH0gZWxzZSByLnB1c2goXCJcIik7XG5cdFx0fVxuXHRcdG8ucHVzaChyLmpvaW4oXCIsXCIpKTtcblx0fVxuXHRyZXR1cm4gby5qb2luKFwiO1wiKTtcbn1cblxuLyogW01TLVhMU10gMi4yLjIgOyBbTVMtWExTQl0gMi4yLjIgVE9ETyAqL1xudmFyIFB0Z0Jpbk9wID0ge1xuXHRQdGdBZGQ6IFwiK1wiLFxuXHRQdGdDb25jYXQ6IFwiJlwiLFxuXHRQdGdEaXY6IFwiL1wiLFxuXHRQdGdFcTogXCI9XCIsXG5cdFB0Z0dlOiBcIj49XCIsXG5cdFB0Z0d0OiBcIj5cIixcblx0UHRnTGU6IFwiPD1cIixcblx0UHRnTHQ6IFwiPFwiLFxuXHRQdGdNdWw6IFwiKlwiLFxuXHRQdGdOZTogXCI8PlwiLFxuXHRQdGdQb3dlcjogXCJeXCIsXG5cdFB0Z1N1YjogXCItXCJcbn07XG5cbi8vIExpc3Qgb2YgaW52YWxpZCBjaGFyYWN0ZXJzIG5lZWRzIHRvIGJlIHRlc3RlZCBmdXJ0aGVyXG52YXIgcXVvdGVDaGFyYWN0ZXJzICA9IG5ldyBSZWdFeHAoL1teXFx3XFx1NEUwMC1cXHU5RkZGXFx1MzA0MC1cXHUzMEZGXS8pO1xuZnVuY3Rpb24gZm9ybXVsYV9xdW90ZV9zaGVldF9uYW1lKHNuYW1lLCBvcHRzKSB7XG5cdGlmKCFzbmFtZSAmJiAhKG9wdHMgJiYgb3B0cy5iaWZmIDw9IDUgJiYgb3B0cy5iaWZmID49IDIpKSB0aHJvdyBuZXcgRXJyb3IoXCJlbXB0eSBzaGVldCBuYW1lXCIpO1xuXHRpZiAocXVvdGVDaGFyYWN0ZXJzLnRlc3Qoc25hbWUpKSByZXR1cm4gXCInXCIgKyBzbmFtZSArIFwiJ1wiO1xuXHRyZXR1cm4gc25hbWU7XG59XG5mdW5jdGlvbiBnZXRfaXh0aV9yYXcoc3VwYm9va3MsIGl4dGksIG9wdHMpIHtcblx0aWYoIXN1cGJvb2tzKSByZXR1cm4gXCJTSDMzVEpTRVJSMFwiO1xuXHRpZihvcHRzLmJpZmYgPiA4ICYmICghc3VwYm9va3MuWFRJIHx8ICFzdXBib29rcy5YVElbaXh0aV0pKSByZXR1cm4gc3VwYm9va3MuU2hlZXROYW1lc1tpeHRpXTtcblx0aWYoIXN1cGJvb2tzLlhUSSkgcmV0dXJuIFwiU0gzM1RKU0VSUjZcIjtcblx0dmFyIFhUSSA9IHN1cGJvb2tzLlhUSVtpeHRpXTtcblx0aWYob3B0cy5iaWZmIDwgOCkge1xuXHRcdGlmKGl4dGkgPiAxMDAwMCkgaXh0aS09IDY1NTM2O1xuXHRcdGlmKGl4dGkgPCAwKSBpeHRpID0gLWl4dGk7XG5cdFx0cmV0dXJuIGl4dGkgPT0gMCA/IFwiXCIgOiBzdXBib29rcy5YVElbaXh0aSAtIDFdO1xuXHR9XG5cdGlmKCFYVEkpIHJldHVybiBcIlNIMzNUSlNFUlIxXCI7XG5cdHZhciBvID0gXCJcIjtcblx0aWYob3B0cy5iaWZmID4gOCkgc3dpdGNoKHN1cGJvb2tzW1hUSVswXV1bMF0pIHtcblx0XHRjYXNlIDB4MDE2NTogLyogJ0JydFN1cFNlbGYnICovXG5cdFx0XHRvID0gWFRJWzFdID09IC0xID8gXCIjUkVGXCIgOiBzdXBib29rcy5TaGVldE5hbWVzW1hUSVsxXV07XG5cdFx0XHRyZXR1cm4gWFRJWzFdID09IFhUSVsyXSA/IG8gOiBvICsgXCI6XCIgKyBzdXBib29rcy5TaGVldE5hbWVzW1hUSVsyXV07XG5cdFx0Y2FzZSAweDAxNjY6IC8qICdCcnRTdXBTYW1lJyAqL1xuXHRcdFx0aWYob3B0cy5TSUQgIT0gbnVsbCkgcmV0dXJuIHN1cGJvb2tzLlNoZWV0TmFtZXNbb3B0cy5TSURdO1xuXHRcdFx0cmV0dXJuIFwiU0gzM1RKU1NBTUVcIiArIHN1cGJvb2tzW1hUSVswXV1bMF07XG5cdFx0Y2FzZSAweDAxNjM6IC8qICdCcnRTdXBCb29rU3JjJyAqL1xuXHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdGRlZmF1bHQ6IHJldHVybiBcIlNIMzNUSlNTUkNcIiArIHN1cGJvb2tzW1hUSVswXV1bMF07XG5cdH1cblx0c3dpdGNoKHN1cGJvb2tzW1hUSVswXV1bMF1bMF0pIHtcblx0XHRjYXNlIDB4MDQwMTpcblx0XHRcdG8gPSBYVElbMV0gPT0gLTEgPyBcIiNSRUZcIiA6IChzdXBib29rcy5TaGVldE5hbWVzW1hUSVsxXV0gfHwgXCJTSDMzVEpTRVJSM1wiKTtcblx0XHRcdHJldHVybiBYVElbMV0gPT0gWFRJWzJdID8gbyA6IG8gKyBcIjpcIiArIHN1cGJvb2tzLlNoZWV0TmFtZXNbWFRJWzJdXTtcblx0XHRjYXNlIDB4M0EwMTogcmV0dXJuIHN1cGJvb2tzW1hUSVswXV0uc2xpY2UoMSkubWFwKGZ1bmN0aW9uKG5hbWUpIHsgcmV0dXJuIG5hbWUuTmFtZTsgfSkuam9pbihcIjs7XCIpOyAvL3JldHVybiBcIlNIMzNUSlNFUlI4XCI7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdGlmKCFzdXBib29rc1tYVElbMF1dWzBdWzNdKSByZXR1cm4gXCJTSDMzVEpTRVJSMlwiO1xuXHRcdFx0byA9IFhUSVsxXSA9PSAtMSA/IFwiI1JFRlwiIDogKHN1cGJvb2tzW1hUSVswXV1bMF1bM11bWFRJWzFdXSB8fCBcIlNIMzNUSlNFUlI0XCIpO1xuXHRcdFx0cmV0dXJuIFhUSVsxXSA9PSBYVElbMl0gPyBvIDogbyArIFwiOlwiICsgc3VwYm9va3NbWFRJWzBdXVswXVszXVtYVElbMl1dO1xuXHR9XG59XG5mdW5jdGlvbiBnZXRfaXh0aShzdXBib29rcywgaXh0aSwgb3B0cykge1xuXHR2YXIgaXh0aXJhdyA9IGdldF9peHRpX3JhdyhzdXBib29rcywgaXh0aSwgb3B0cyk7XG5cdHJldHVybiBpeHRpcmF3ID09IFwiI1JFRlwiID8gaXh0aXJhdyA6IGZvcm11bGFfcXVvdGVfc2hlZXRfbmFtZShpeHRpcmF3LCBvcHRzKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeV9mb3JtdWxhKGZvcm11bGEvKkFycmF5PGFueT4qLywgcmFuZ2UsIGNlbGwsIHN1cGJvb2tzLCBvcHRzKSB7XG5cdHZhciBiaWZmID0gKG9wdHMgJiYgb3B0cy5iaWZmKSB8fCA4O1xuXHR2YXIgX3JhbmdlID0gLypyYW5nZSAhPSBudWxsID8gcmFuZ2UgOiovIHtzOntjOjAsIHI6MH0sZTp7YzowLCByOjB9fTtcblx0dmFyIHN0YWNrID0gW10sIGUxLCBlMiwgIGMsIGl4dGk9MCwgbmFtZWlkeD0wLCByLCBzbmFtZT1cIlwiO1xuXHRpZighZm9ybXVsYVswXSB8fCAhZm9ybXVsYVswXVswXSkgcmV0dXJuIFwiXCI7XG5cdHZhciBsYXN0X3NwID0gLTEsIHNwID0gXCJcIjtcblx0Zm9yKHZhciBmZiA9IDAsIGZmbGVuID0gZm9ybXVsYVswXS5sZW5ndGg7IGZmIDwgZmZsZW47ICsrZmYpIHtcblx0XHR2YXIgZiA9IGZvcm11bGFbMF1bZmZdO1xuXHRcdHN3aXRjaChmWzBdKSB7XG5cdFx0XHRjYXNlICdQdGdVbWludXMnOiAvKiBbTVMtWExTXSAyLjUuMTk4LjkzICovXG5cdFx0XHRcdHN0YWNrLnB1c2goXCItXCIgKyBzdGFjay5wb3AoKSk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnUHRnVXBsdXMnOiAvKiBbTVMtWExTXSAyLjUuMTk4Ljk1ICovXG5cdFx0XHRcdHN0YWNrLnB1c2goXCIrXCIgKyBzdGFjay5wb3AoKSk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnUHRnUGVyY2VudCc6IC8qIFtNUy1YTFNdIDIuNS4xOTguODEgKi9cblx0XHRcdFx0c3RhY2sucHVzaChzdGFjay5wb3AoKSArIFwiJVwiKTsgYnJlYWs7XG5cblx0XHRcdGNhc2UgJ1B0Z0FkZCc6ICAgIC8qIFtNUy1YTFNdIDIuNS4xOTguMjYgKi9cblx0XHRcdGNhc2UgJ1B0Z0NvbmNhdCc6IC8qIFtNUy1YTFNdIDIuNS4xOTguNDMgKi9cblx0XHRcdGNhc2UgJ1B0Z0Rpdic6ICAgIC8qIFtNUy1YTFNdIDIuNS4xOTguNDUgKi9cblx0XHRcdGNhc2UgJ1B0Z0VxJzogICAgIC8qIFtNUy1YTFNdIDIuNS4xOTguNTYgKi9cblx0XHRcdGNhc2UgJ1B0Z0dlJzogICAgIC8qIFtNUy1YTFNdIDIuNS4xOTguNjQgKi9cblx0XHRcdGNhc2UgJ1B0Z0d0JzogICAgIC8qIFtNUy1YTFNdIDIuNS4xOTguNjUgKi9cblx0XHRcdGNhc2UgJ1B0Z0xlJzogICAgIC8qIFtNUy1YTFNdIDIuNS4xOTguNjggKi9cblx0XHRcdGNhc2UgJ1B0Z0x0JzogICAgIC8qIFtNUy1YTFNdIDIuNS4xOTguNjkgKi9cblx0XHRcdGNhc2UgJ1B0Z011bCc6ICAgIC8qIFtNUy1YTFNdIDIuNS4xOTguNzUgKi9cblx0XHRcdGNhc2UgJ1B0Z05lJzogICAgIC8qIFtNUy1YTFNdIDIuNS4xOTguNzggKi9cblx0XHRcdGNhc2UgJ1B0Z1Bvd2VyJzogIC8qIFtNUy1YTFNdIDIuNS4xOTguODIgKi9cblx0XHRcdGNhc2UgJ1B0Z1N1Yic6ICAgIC8qIFtNUy1YTFNdIDIuNS4xOTguOTAgKi9cblx0XHRcdFx0ZTEgPSBzdGFjay5wb3AoKTsgZTIgPSBzdGFjay5wb3AoKTtcblx0XHRcdFx0aWYobGFzdF9zcCA+PSAwKSB7XG5cdFx0XHRcdFx0c3dpdGNoKGZvcm11bGFbMF1bbGFzdF9zcF1bMV1bMF0pIHtcblx0XHRcdFx0XHRcdGNhc2UgMDpcblx0XHRcdFx0XHRcdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRcdFx0XHRcdFx0c3AgPSBmaWxsKFwiIFwiLCBmb3JtdWxhWzBdW2xhc3Rfc3BdWzFdWzFdKTsgYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0XHRcdC8vICRGbG93SWdub3JlXG5cdFx0XHRcdFx0XHRcdHNwID0gZmlsbChcIlxcclwiLCBmb3JtdWxhWzBdW2xhc3Rfc3BdWzFdWzFdKTsgYnJlYWs7XG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRzcCA9IFwiXCI7XG5cdFx0XHRcdFx0XHRcdC8vICRGbG93SWdub3JlXG5cdFx0XHRcdFx0XHRcdGlmKG9wdHMuV1RGKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIFB0Z0F0dHJTcGFjZVR5cGUgXCIgKyBmb3JtdWxhWzBdW2xhc3Rfc3BdWzFdWzBdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZTIgPSBlMiArIHNwO1xuXHRcdFx0XHRcdGxhc3Rfc3AgPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzdGFjay5wdXNoKGUyK1B0Z0Jpbk9wW2ZbMF1dK2UxKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1B0Z0lzZWN0JzogLyogW01TLVhMU10gMi41LjE5OC42NyAqL1xuXHRcdFx0XHRlMSA9IHN0YWNrLnBvcCgpOyBlMiA9IHN0YWNrLnBvcCgpO1xuXHRcdFx0XHRzdGFjay5wdXNoKGUyK1wiIFwiK2UxKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdQdGdVbmlvbic6IC8qIFtNUy1YTFNdIDIuNS4xOTguOTQgKi9cblx0XHRcdFx0ZTEgPSBzdGFjay5wb3AoKTsgZTIgPSBzdGFjay5wb3AoKTtcblx0XHRcdFx0c3RhY2sucHVzaChlMitcIixcIitlMSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnUHRnUmFuZ2UnOiAvKiBbTVMtWExTXSAyLjUuMTk4LjgzICovXG5cdFx0XHRcdGUxID0gc3RhY2sucG9wKCk7IGUyID0gc3RhY2sucG9wKCk7XG5cdFx0XHRcdHN0YWNrLnB1c2goZTIrXCI6XCIrZTEpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUHRnQXR0ckNob29zZSc6IC8qIFtNUy1YTFNdIDIuNS4xOTguMzQgKi9cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdQdGdBdHRyR290byc6IC8qIFtNUy1YTFNdIDIuNS4xOTguMzUgKi9cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdQdGdBdHRySWYnOiAvKiBbTVMtWExTXSAyLjUuMTk4LjM2ICovXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnUHRnQXR0cklmRXJyb3InOiAvKiBbTVMtWExTQl0gMi41Ljk3LjI4ICovXG5cdFx0XHRcdGJyZWFrO1xuXG5cblx0XHRcdGNhc2UgJ1B0Z1JlZic6IC8qIFtNUy1YTFNdIDIuNS4xOTguODQgKi9cbmMgPSBzaGlmdF9jZWxsX3hscygoZlsxXVsxXSksIF9yYW5nZSwgb3B0cyk7XG5cdFx0XHRcdHN0YWNrLnB1c2goZW5jb2RlX2NlbGxfeGxzKGMsIGJpZmYpKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdQdGdSZWZOJzogLyogW01TLVhMU10gMi41LjE5OC44OCAqL1xuYyA9IGNlbGwgPyBzaGlmdF9jZWxsX3hscygoZlsxXVsxXSksIGNlbGwsIG9wdHMpIDogKGZbMV1bMV0pO1xuXHRcdFx0XHRzdGFjay5wdXNoKGVuY29kZV9jZWxsX3hscyhjLCBiaWZmKSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnUHRnUmVmM2QnOiAvKiBbTVMtWExTXSAyLjUuMTk4Ljg1ICovXG5peHRpID0gZlsxXVsxXTsgYyA9IHNoaWZ0X2NlbGxfeGxzKChmWzFdWzJdKSwgX3JhbmdlLCBvcHRzKTtcblx0XHRcdFx0c25hbWUgPSBnZXRfaXh0aShzdXBib29rcywgaXh0aSwgb3B0cyk7XG5cdFx0XHRcdHZhciB3ID0gc25hbWU7IC8qIElFOSBmYWlscyBvbiBkZWZpbmVkIG5hbWVzICovIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblx0XHRcdFx0c3RhY2sucHVzaChzbmFtZSArIFwiIVwiICsgZW5jb2RlX2NlbGxfeGxzKGMsIGJpZmYpKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1B0Z0Z1bmMnOiAvKiBbTVMtWExTXSAyLjUuMTk4LjYyICovXG5cdFx0XHRjYXNlICdQdGdGdW5jVmFyJzogLyogW01TLVhMU10gMi41LjE5OC42MyAqL1xuXHRcdFx0XHQvKiBmWzFdID0gW2FyZ2MsIGZ1bmMsIHR5cGVdICovXG5cdFx0XHRcdHZhciBhcmdjID0gKGZbMV1bMF0pLCBmdW5jID0gKGZbMV1bMV0pO1xuXHRcdFx0XHRpZighYXJnYykgYXJnYyA9IDA7XG5cdFx0XHRcdGFyZ2MgJj0gMHg3Rjtcblx0XHRcdFx0dmFyIGFyZ3MgPSBhcmdjID09IDAgPyBbXSA6IHN0YWNrLnNsaWNlKC1hcmdjKTtcblx0XHRcdFx0c3RhY2subGVuZ3RoIC09IGFyZ2M7XG5cdFx0XHRcdGlmKGZ1bmMgPT09ICdVc2VyJykgZnVuYyA9IGFyZ3Muc2hpZnQoKTtcblx0XHRcdFx0c3RhY2sucHVzaChmdW5jICsgXCIoXCIgKyBhcmdzLmpvaW4oXCIsXCIpICsgXCIpXCIpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUHRnQm9vbCc6IC8qIFtNUy1YTFNdIDIuNS4xOTguNDIgKi9cblx0XHRcdFx0c3RhY2sucHVzaChmWzFdID8gXCJUUlVFXCIgOiBcIkZBTFNFXCIpOyBicmVhaztcblx0XHRcdGNhc2UgJ1B0Z0ludCc6IC8qIFtNUy1YTFNdIDIuNS4xOTguNjYgKi9cblx0XHRcdFx0c3RhY2sucHVzaChmWzFdKTsgYnJlYWs7XG5cdFx0XHRjYXNlICdQdGdOdW0nOiAvKiBbTVMtWExTXSAyLjUuMTk4Ljc5IFRPRE86IHByZWNpc2lvbj8gKi9cblx0XHRcdFx0c3RhY2sucHVzaChTdHJpbmcoZlsxXSkpOyBicmVhaztcblx0XHRcdGNhc2UgJ1B0Z1N0cic6IC8qIFtNUy1YTFNdIDIuNS4xOTguODkgKi9cblx0XHRcdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRcdFx0c3RhY2sucHVzaCgnXCInICsgZlsxXS5yZXBsYWNlKC9cIi9nLCAnXCJcIicpICsgJ1wiJyk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnUHRnRXJyJzogLyogW01TLVhMU10gMi41LjE5OC41NyAqL1xuXHRcdFx0XHRzdGFjay5wdXNoKGZbMV0pOyBicmVhaztcblx0XHRcdGNhc2UgJ1B0Z0FyZWFOJzogLyogW01TLVhMU10gMi41LjE5OC4zMSBUT0RPICovXG5yID0gc2hpZnRfcmFuZ2VfeGxzKGZbMV1bMV0sIGNlbGwgPyB7czpjZWxsfSA6IF9yYW5nZSwgb3B0cyk7XG5cdFx0XHRcdHN0YWNrLnB1c2goZW5jb2RlX3JhbmdlX3hscygociksIG9wdHMpKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdQdGdBcmVhJzogLyogW01TLVhMU10gMi41LjE5OC4yNyBUT0RPOiBmaXhlZCBwb2ludHMgKi9cbnIgPSBzaGlmdF9yYW5nZV94bHMoZlsxXVsxXSwgX3JhbmdlLCBvcHRzKTtcblx0XHRcdFx0c3RhY2sucHVzaChlbmNvZGVfcmFuZ2VfeGxzKChyKSwgb3B0cykpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ1B0Z0FyZWEzZCc6IC8qIFtNUy1YTFNdIDIuNS4xOTguMjggVE9ETyAqL1xuaXh0aSA9IGZbMV1bMV07IHIgPSBmWzFdWzJdO1xuXHRcdFx0XHRzbmFtZSA9IGdldF9peHRpKHN1cGJvb2tzLCBpeHRpLCBvcHRzKTtcblx0XHRcdFx0c3RhY2sucHVzaChzbmFtZSArIFwiIVwiICsgZW5jb2RlX3JhbmdlX3hscygociksIG9wdHMpKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdQdGdBdHRyU3VtJzogLyogW01TLVhMU10gMi41LjE5OC40MSAqL1xuXHRcdFx0XHRzdGFjay5wdXNoKFwiU1VNKFwiICsgc3RhY2sucG9wKCkgKyBcIilcIik7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdQdGdBdHRyQmF4Y2VsJzogLyogW01TLVhMU10gMi41LjE5OC4zMyAqL1xuXHRcdFx0Y2FzZSAnUHRnQXR0clNlbWknOiAvKiBbTVMtWExTXSAyLjUuMTk4LjM3ICovXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdQdGdOYW1lJzogLyogW01TLVhMU10gMi41LjE5OC43NiA7IFtNUy1YTFNCXSAyLjUuOTcuNjAgVE9ETzogcmV2aXNpb25zICovXG5cdFx0XHRcdC8qIGZbMV0gPSB0eXBlLCAwLCBuYW1laW5kZXggKi9cblx0XHRcdFx0bmFtZWlkeCA9IChmWzFdWzJdKTtcblx0XHRcdFx0dmFyIGxibCA9IChzdXBib29rcy5uYW1lc3x8W10pW25hbWVpZHgtMV0gfHwgKHN1cGJvb2tzWzBdfHxbXSlbbmFtZWlkeF07XG5cdFx0XHRcdHZhciBuYW1lID0gbGJsID8gbGJsLk5hbWUgOiBcIlNIMzNUSlNOQU1FXCIgKyBTdHJpbmcobmFtZWlkeCk7XG5cdFx0XHRcdGlmKG5hbWUgaW4gWExTWEZ1dHVyZUZ1bmN0aW9ucykgbmFtZSA9IFhMU1hGdXR1cmVGdW5jdGlvbnNbbmFtZV07XG5cdFx0XHRcdHN0YWNrLnB1c2gobmFtZSk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdQdGdOYW1lWCc6IC8qIFtNUy1YTFNdIDIuNS4xOTguNzcgOyBbTVMtWExTQl0gMi41Ljk3LjYxIFRPRE86IHJldmlzaW9ucyAqL1xuXHRcdFx0XHQvKiBmWzFdID0gdHlwZSwgaXh0aSwgbmFtZWluZGV4ICovXG5cdFx0XHRcdHZhciBib29raWR4ID0gKGZbMV1bMV0pOyBuYW1laWR4ID0gKGZbMV1bMl0pOyB2YXIgZXh0ZXJuYm9vaztcblx0XHRcdFx0LyogVE9ETzogUHJvcGVybHkgaGFuZGxlIG1pc3NpbmcgdmFsdWVzIC0tIHRoaXMgc2hvdWxkIGJlIHVzaW5nIGdldF9peHRpX3JhdyBwcmltYXJpbHkgKi9cblx0XHRcdFx0aWYob3B0cy5iaWZmIDw9IDUpIHtcblx0XHRcdFx0XHRpZihib29raWR4IDwgMCkgYm9va2lkeCA9IC1ib29raWR4O1xuXHRcdFx0XHRcdGlmKHN1cGJvb2tzW2Jvb2tpZHhdKSBleHRlcm5ib29rID0gc3VwYm9va3NbYm9va2lkeF1bbmFtZWlkeF07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFyIG8gPSBcIlwiO1xuXHRcdFx0XHRcdGlmKCgoc3VwYm9va3NbYm9va2lkeF18fFtdKVswXXx8W10pWzBdID09IDB4M0EwMSl7LyogZW1wdHkgKi99XG5cdFx0XHRcdFx0ZWxzZSBpZigoKHN1cGJvb2tzW2Jvb2tpZHhdfHxbXSlbMF18fFtdKVswXSA9PSAweDA0MDEpe1xuXHRcdFx0XHRcdFx0aWYoc3VwYm9va3NbYm9va2lkeF1bbmFtZWlkeF0gJiYgc3VwYm9va3NbYm9va2lkeF1bbmFtZWlkeF0uaXRhYiA+IDApIHtcblx0XHRcdFx0XHRcdFx0byA9IHN1cGJvb2tzLlNoZWV0TmFtZXNbc3VwYm9va3NbYm9va2lkeF1bbmFtZWlkeF0uaXRhYi0xXSArIFwiIVwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIG8gPSBzdXBib29rcy5TaGVldE5hbWVzW25hbWVpZHgtMV0rIFwiIVwiO1xuXHRcdFx0XHRcdGlmKHN1cGJvb2tzW2Jvb2tpZHhdICYmIHN1cGJvb2tzW2Jvb2tpZHhdW25hbWVpZHhdKSBvICs9IHN1cGJvb2tzW2Jvb2tpZHhdW25hbWVpZHhdLk5hbWU7XG5cdFx0XHRcdFx0ZWxzZSBpZihzdXBib29rc1swXSAmJiBzdXBib29rc1swXVtuYW1laWR4XSkgbyArPSBzdXBib29rc1swXVtuYW1laWR4XS5OYW1lO1xuXHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0dmFyIGl4dGlkYXRhID0gKGdldF9peHRpX3JhdyhzdXBib29rcywgYm9va2lkeCwgb3B0cyl8fFwiXCIpLnNwbGl0KFwiOztcIik7XG5cdFx0XHRcdFx0XHRpZihpeHRpZGF0YVtuYW1laWR4IC0gMV0pIG8gPSBpeHRpZGF0YVtuYW1laWR4IC0gMV07IC8vIFRPRE86IGNvbmZpcm0gdGhpcyBpcyBjb3JyZWN0XG5cdFx0XHRcdFx0XHRlbHNlIG8gKz0gXCJTSDMzVEpTRVJSWFwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzdGFjay5wdXNoKG8pO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKCFleHRlcm5ib29rKSBleHRlcm5ib29rID0ge05hbWU6IFwiU0gzM1RKU0VSUllcIn07XG5cdFx0XHRcdHN0YWNrLnB1c2goZXh0ZXJuYm9vay5OYW1lKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1B0Z1BhcmVuJzogLyogW01TLVhMU10gMi41LjE5OC44MCAqL1xuXHRcdFx0XHR2YXIgbHAgPSAnKCcsIHJwID0gJyknO1xuXHRcdFx0XHRpZihsYXN0X3NwID49IDApIHtcblx0XHRcdFx0XHRzcCA9IFwiXCI7XG5cdFx0XHRcdFx0c3dpdGNoKGZvcm11bGFbMF1bbGFzdF9zcF1bMV1bMF0pIHtcblx0XHRcdFx0XHRcdC8vICRGbG93SWdub3JlXG5cdFx0XHRcdFx0XHRjYXNlIDI6IGxwID0gZmlsbChcIiBcIiwgZm9ybXVsYVswXVtsYXN0X3NwXVsxXVsxXSkgKyBscDsgYnJlYWs7XG5cdFx0XHRcdFx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdFx0XHRcdFx0Y2FzZSAzOiBscCA9IGZpbGwoXCJcXHJcIiwgZm9ybXVsYVswXVtsYXN0X3NwXVsxXVsxXSkgKyBscDsgYnJlYWs7XG5cdFx0XHRcdFx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdFx0XHRcdFx0Y2FzZSA0OiBycCA9IGZpbGwoXCIgXCIsIGZvcm11bGFbMF1bbGFzdF9zcF1bMV1bMV0pICsgcnA7IGJyZWFrO1xuXHRcdFx0XHRcdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRcdFx0XHRcdGNhc2UgNTogcnAgPSBmaWxsKFwiXFxyXCIsIGZvcm11bGFbMF1bbGFzdF9zcF1bMV1bMV0pICsgcnA7IGJyZWFrO1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRcdFx0XHRcdFx0aWYob3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgUHRnQXR0clNwYWNlVHlwZSBcIiArIGZvcm11bGFbMF1bbGFzdF9zcF1bMV1bMF0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRsYXN0X3NwID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RhY2sucHVzaChscCArIHN0YWNrLnBvcCgpICsgcnApOyBicmVhaztcblxuXHRcdFx0Y2FzZSAnUHRnUmVmRXJyJzogLyogW01TLVhMU10gMi41LjE5OC44NiAqL1xuXHRcdFx0XHRzdGFjay5wdXNoKCcjUkVGIScpOyBicmVhaztcblxuXHRcdFx0Y2FzZSAnUHRnUmVmRXJyM2QnOiAvKiBbTVMtWExTXSAyLjUuMTk4Ljg3ICovXG5cdFx0XHRcdHN0YWNrLnB1c2goJyNSRUYhJyk7IGJyZWFrO1xuXG5cdFx0XHRjYXNlICdQdGdFeHAnOiAvKiBbTVMtWExTXSAyLjUuMTk4LjU4IFRPRE8gKi9cblx0XHRcdFx0YyA9IHtjOihmWzFdWzFdKSxyOihmWzFdWzBdKX07XG5cdFx0XHRcdHZhciBxID0gKHtjOiBjZWxsLmMsIHI6Y2VsbC5yfSk7XG5cdFx0XHRcdGlmKHN1cGJvb2tzLnNoYXJlZGZbZW5jb2RlX2NlbGwoYyldKSB7XG5cdFx0XHRcdFx0dmFyIHBhcnNlZGYgPSAoc3VwYm9va3Muc2hhcmVkZltlbmNvZGVfY2VsbChjKV0pO1xuXHRcdFx0XHRcdHN0YWNrLnB1c2goc3RyaW5naWZ5X2Zvcm11bGEocGFyc2VkZiwgX3JhbmdlLCBxLCBzdXBib29rcywgb3B0cykpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhciBmbmQgPSBmYWxzZTtcblx0XHRcdFx0XHRmb3IoZTE9MDtlMSE9c3VwYm9va3MuYXJyYXlmLmxlbmd0aDsgKytlMSkge1xuXHRcdFx0XHRcdFx0LyogVE9ETzogc2hvdWxkIGJlIHNvbWV0aGluZyBsaWtlIHJhbmdlX2hhcyAqL1xuXHRcdFx0XHRcdFx0ZTIgPSBzdXBib29rcy5hcnJheWZbZTFdO1xuXHRcdFx0XHRcdFx0aWYoYy5jIDwgZTJbMF0ucy5jIHx8IGMuYyA+IGUyWzBdLmUuYykgY29udGludWU7XG5cdFx0XHRcdFx0XHRpZihjLnIgPCBlMlswXS5zLnIgfHwgYy5yID4gZTJbMF0uZS5yKSBjb250aW51ZTtcblx0XHRcdFx0XHRcdHN0YWNrLnB1c2goc3RyaW5naWZ5X2Zvcm11bGEoZTJbMV0sIF9yYW5nZSwgcSwgc3VwYm9va3MsIG9wdHMpKTtcblx0XHRcdFx0XHRcdGZuZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoIWZuZCkgc3RhY2sucHVzaChmWzFdKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUHRnQXJyYXknOiAvKiBbTVMtWExTXSAyLjUuMTk4LjMyIFRPRE8gKi9cblx0XHRcdFx0c3RhY2sucHVzaChcIntcIiArIHN0cmluZ2lmeV9hcnJheShmWzFdKSArIFwifVwiKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1B0Z01lbUFyZWEnOiAvKiBbTVMtWExTXSAyLjUuMTk4LjcwIFRPRE86IGNvbmZpcm0gdGhpcyBpcyBhIG5vbi1kaXNwbGF5ICovXG5cdFx0XHRcdC8vc3RhY2sucHVzaChcIihcIiArIGZbMl0ubWFwKGVuY29kZV9yYW5nZSkuam9pbihcIixcIikgKyBcIilcIik7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdQdGdBdHRyU3BhY2UnOiAvKiBbTVMtWExTXSAyLjUuMTk4LjM4ICovXG5cdFx0XHRjYXNlICdQdGdBdHRyU3BhY2VTZW1pJzogLyogW01TLVhMU10gMi41LjE5OC4zOSAqL1xuXHRcdFx0XHRsYXN0X3NwID0gZmY7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdQdGdUYmwnOiAvKiBbTVMtWExTXSAyLjUuMTk4LjkyIFRPRE8gKi9cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1B0Z01lbUVycic6IC8qIFtNUy1YTFNdIDIuNS4xOTguNzEgKi9cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1B0Z01pc3NBcmcnOiAvKiBbTVMtWExTXSAyLjUuMTk4Ljc0ICovXG5cdFx0XHRcdHN0YWNrLnB1c2goXCJcIik7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdQdGdBcmVhRXJyJzogLyogW01TLVhMU10gMi41LjE5OC4yOSAqL1xuXHRcdFx0XHRzdGFjay5wdXNoKFwiI1JFRiFcIik7IGJyZWFrO1xuXG5cdFx0XHRjYXNlICdQdGdBcmVhRXJyM2QnOiAvKiBbTVMtWExTXSAyLjUuMTk4LjMwICovXG5cdFx0XHRcdHN0YWNrLnB1c2goXCIjUkVGIVwiKTsgYnJlYWs7XG5cblx0XHRcdGNhc2UgJ1B0Z0xpc3QnOiAvKiBbTVMtWExTQl0gMi41Ljk3LjUyICovXG5cdFx0XHRcdC8vICRGbG93SWdub3JlXG5cdFx0XHRcdHN0YWNrLnB1c2goXCJUYWJsZVwiICsgZlsxXS5pZHggKyBcIlsjXCIgKyBmWzFdLnJ0ICsgXCJdXCIpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUHRnTWVtQXJlYU4nOlxuXHRcdFx0Y2FzZSAnUHRnTWVtTm9NZW1OJzpcblx0XHRcdGNhc2UgJ1B0Z0F0dHJOb29wJzpcblx0XHRcdGNhc2UgJ1B0Z1NoZWV0Jzpcblx0XHRcdGNhc2UgJ1B0Z0VuZFNoZWV0Jzpcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1B0Z01lbUZ1bmMnOiAvKiBbTVMtWExTXSAyLjUuMTk4LjcyIFRPRE8gKi9cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdQdGdNZW1Ob01lbSc6IC8qIFtNUy1YTFNdIDIuNS4xOTguNzMgVE9ETyAqL1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUHRnRWxmQ29sJzogLyogW01TLVhMU10gMi41LjE5OC40NiAqL1xuXHRcdFx0Y2FzZSAnUHRnRWxmQ29sUyc6IC8qIFtNUy1YTFNdIDIuNS4xOTguNDcgKi9cblx0XHRcdGNhc2UgJ1B0Z0VsZkNvbFNWJzogLyogW01TLVhMU10gMi41LjE5OC40OCAqL1xuXHRcdFx0Y2FzZSAnUHRnRWxmQ29sVic6IC8qIFtNUy1YTFNdIDIuNS4xOTguNDkgKi9cblx0XHRcdGNhc2UgJ1B0Z0VsZkxlbCc6IC8qIFtNUy1YTFNdIDIuNS4xOTguNTAgKi9cblx0XHRcdGNhc2UgJ1B0Z0VsZlJhZGljYWwnOiAvKiBbTVMtWExTXSAyLjUuMTk4LjUxICovXG5cdFx0XHRjYXNlICdQdGdFbGZSYWRpY2FsTGVsJzogLyogW01TLVhMU10gMi41LjE5OC41MiAqL1xuXHRcdFx0Y2FzZSAnUHRnRWxmUmFkaWNhbFMnOiAvKiBbTVMtWExTXSAyLjUuMTk4LjUzICovXG5cdFx0XHRjYXNlICdQdGdFbGZSdyc6IC8qIFtNUy1YTFNdIDIuNS4xOTguNTQgKi9cblx0XHRcdGNhc2UgJ1B0Z0VsZlJ3Vic6IC8qIFtNUy1YTFNdIDIuNS4xOTguNTUgKi9cblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgRUxGc1wiKTtcblxuXHRcdFx0Y2FzZSAnUHRnU3hOYW1lJzogLyogW01TLVhMU10gMi41LjE5OC45MSBUT0RPIC0tIGZpbmQgYSB0ZXN0IGNhc2UgKi9cblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdVbnJlY29nbml6ZWQgRm9ybXVsYSBUb2tlbjogJyArIFN0cmluZyhmKSk7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ1VucmVjb2duaXplZCBGb3JtdWxhIFRva2VuOiAnICsgU3RyaW5nKGYpKTtcblx0XHR9XG5cdFx0dmFyIFB0Z05vbkRpc3AgPSBbJ1B0Z0F0dHJTcGFjZScsICdQdGdBdHRyU3BhY2VTZW1pJywgJ1B0Z0F0dHJHb3RvJ107XG5cdFx0aWYob3B0cy5iaWZmICE9IDMpIGlmKGxhc3Rfc3AgPj0gMCAmJiBQdGdOb25EaXNwLmluZGV4T2YoZm9ybXVsYVswXVtmZl1bMF0pID09IC0xKSB7XG5cdFx0XHRmID0gZm9ybXVsYVswXVtsYXN0X3NwXTtcblx0XHRcdHZhciBfbGVmdCA9IHRydWU7XG5cdFx0XHRzd2l0Y2goZlsxXVswXSkge1xuXHRcdFx0XHQvKiBub3RlOiBzb21lIGJhZCBYTFNCIGZpbGVzIG9taXQgdGhlIFB0Z1BhcmVuICovXG5cdFx0XHRcdGNhc2UgNDogX2xlZnQgPSBmYWxzZTtcblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRjYXNlIDA6XG5cdFx0XHRcdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRcdFx0XHRzcCA9IGZpbGwoXCIgXCIsIGZbMV1bMV0pOyBicmVhaztcblx0XHRcdFx0Y2FzZSA1OiBfbGVmdCA9IGZhbHNlO1xuXHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdGNhc2UgMTpcblx0XHRcdFx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdFx0XHRcdHNwID0gZmlsbChcIlxcclwiLCBmWzFdWzFdKTsgYnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0c3AgPSBcIlwiO1xuXHRcdFx0XHRcdC8vICRGbG93SWdub3JlXG5cdFx0XHRcdFx0aWYob3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgUHRnQXR0clNwYWNlVHlwZSBcIiArIGZbMV1bMF0pO1xuXHRcdFx0fVxuXHRcdFx0c3RhY2sucHVzaCgoX2xlZnQgPyBzcCA6IFwiXCIpICsgc3RhY2sucG9wKCkgKyAoX2xlZnQgPyBcIlwiIDogc3ApKTtcblx0XHRcdGxhc3Rfc3AgPSAtMTtcblx0XHR9XG5cdH1cblx0aWYoc3RhY2subGVuZ3RoID4gMSAmJiBvcHRzLldURikgdGhyb3cgbmV3IEVycm9yKFwiYmFkIGZvcm11bGEgc3RhY2tcIik7XG5cdHJldHVybiBzdGFja1swXTtcbn1cblxuLyogW01TLVhMU10gMi41LjE5OC4xIFRPRE8gKi9cbmZ1bmN0aW9uIHBhcnNlX0FycmF5UGFyc2VkRm9ybXVsYShibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIHRhcmdldCA9IGJsb2IubCArIGxlbmd0aCwgbGVuID0gb3B0cy5iaWZmID09IDIgPyAxIDogMjtcblx0dmFyIHJnY2IsIGNjZSA9IGJsb2IucmVhZF9zaGlmdChsZW4pOyAvLyBsZW5ndGggb2YgcmdjZVxuXHRpZihjY2UgPT0gMHhGRkZGKSByZXR1cm4gW1tdLHBhcnNlbm9vcChibG9iLCBsZW5ndGgtMildO1xuXHR2YXIgcmdjZSA9IHBhcnNlX1JnY2UoYmxvYiwgY2NlLCBvcHRzKTtcblx0aWYobGVuZ3RoICE9PSBjY2UgKyBsZW4pIHJnY2IgPSBwYXJzZV9SZ2JFeHRyYShibG9iLCBsZW5ndGggLSBjY2UgLSBsZW4sIHJnY2UsIG9wdHMpO1xuXHRibG9iLmwgPSB0YXJnZXQ7XG5cdHJldHVybiBbcmdjZSwgcmdjYl07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguMyBUT0RPICovXG5mdW5jdGlvbiBwYXJzZV9YTFNDZWxsUGFyc2VkRm9ybXVsYShibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIHRhcmdldCA9IGJsb2IubCArIGxlbmd0aCwgbGVuID0gb3B0cy5iaWZmID09IDIgPyAxIDogMjtcblx0dmFyIHJnY2IsIGNjZSA9IGJsb2IucmVhZF9zaGlmdChsZW4pOyAvLyBsZW5ndGggb2YgcmdjZVxuXHRpZihjY2UgPT0gMHhGRkZGKSByZXR1cm4gW1tdLHBhcnNlbm9vcChibG9iLCBsZW5ndGgtMildO1xuXHR2YXIgcmdjZSA9IHBhcnNlX1JnY2UoYmxvYiwgY2NlLCBvcHRzKTtcblx0aWYobGVuZ3RoICE9PSBjY2UgKyBsZW4pIHJnY2IgPSBwYXJzZV9SZ2JFeHRyYShibG9iLCBsZW5ndGggLSBjY2UgLSBsZW4sIHJnY2UsIG9wdHMpO1xuXHRibG9iLmwgPSB0YXJnZXQ7XG5cdHJldHVybiBbcmdjZSwgcmdjYl07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguMjEgKi9cbmZ1bmN0aW9uIHBhcnNlX05hbWVQYXJzZWRGb3JtdWxhKGJsb2IsIGxlbmd0aCwgb3B0cywgY2NlKSB7XG5cdHZhciB0YXJnZXQgPSBibG9iLmwgKyBsZW5ndGg7XG5cdHZhciByZ2NlID0gcGFyc2VfUmdjZShibG9iLCBjY2UsIG9wdHMpO1xuXHR2YXIgcmdjYjtcblx0aWYodGFyZ2V0ICE9PSBibG9iLmwpIHJnY2IgPSBwYXJzZV9SZ2JFeHRyYShibG9iLCB0YXJnZXQgLSBibG9iLmwsIHJnY2UsIG9wdHMpO1xuXHRyZXR1cm4gW3JnY2UsIHJnY2JdO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4LjExOCBUT0RPICovXG5mdW5jdGlvbiBwYXJzZV9TaGFyZWRQYXJzZWRGb3JtdWxhKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgdGFyZ2V0ID0gYmxvYi5sICsgbGVuZ3RoO1xuXHR2YXIgcmdjYiwgY2NlID0gYmxvYi5yZWFkX3NoaWZ0KDIpOyAvLyBsZW5ndGggb2YgcmdjZVxuXHR2YXIgcmdjZSA9IHBhcnNlX1JnY2UoYmxvYiwgY2NlLCBvcHRzKTtcblx0aWYoY2NlID09IDB4RkZGRikgcmV0dXJuIFtbXSxwYXJzZW5vb3AoYmxvYiwgbGVuZ3RoLTIpXTtcblx0aWYobGVuZ3RoICE9PSBjY2UgKyAyKSByZ2NiID0gcGFyc2VfUmdiRXh0cmEoYmxvYiwgdGFyZ2V0IC0gY2NlIC0gMiwgcmdjZSwgb3B0cyk7XG5cdHJldHVybiBbcmdjZSwgcmdjYl07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xMzMgVE9ETzogaG93IHRvIGVtaXQgZW1wdHkgc3RyaW5ncz8gKi9cbmZ1bmN0aW9uIHBhcnNlX0Zvcm11bGFWYWx1ZShibG9iKSB7XG5cdHZhciBiO1xuXHRpZihfX3JlYWRVSW50MTZMRShibG9iLGJsb2IubCArIDYpICE9PSAweEZGRkYpIHJldHVybiBbcGFyc2VfWG51bShibG9iKSwnbiddO1xuXHRzd2l0Y2goYmxvYltibG9iLmxdKSB7XG5cdFx0Y2FzZSAweDAwOiBibG9iLmwgKz0gODsgcmV0dXJuIFtcIlN0cmluZ1wiLCAncyddO1xuXHRcdGNhc2UgMHgwMTogYiA9IGJsb2JbYmxvYi5sKzJdID09PSAweDE7IGJsb2IubCArPSA4OyByZXR1cm4gW2IsJ2InXTtcblx0XHRjYXNlIDB4MDI6IGIgPSBibG9iW2Jsb2IubCsyXTsgYmxvYi5sICs9IDg7IHJldHVybiBbYiwnZSddO1xuXHRcdGNhc2UgMHgwMzogYmxvYi5sICs9IDg7IHJldHVybiBbXCJcIiwncyddO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cbmZ1bmN0aW9uIHdyaXRlX0Zvcm11bGFWYWx1ZSh2YWx1ZSkge1xuXHRpZih2YWx1ZSA9PSBudWxsKSB7XG5cdFx0Ly8gQmxhbmsgU3RyaW5nIFZhbHVlXG5cdFx0dmFyIG8gPSBuZXdfYnVmKDgpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgMHgwMyk7XG5cdFx0by53cml0ZV9zaGlmdCgxLCAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIDApO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCAweEZGRkYpO1xuXHRcdHJldHVybiBvO1xuXHR9IGVsc2UgaWYodHlwZW9mIHZhbHVlID09IFwibnVtYmVyXCIpIHJldHVybiB3cml0ZV9YbnVtKHZhbHVlKTtcblx0cmV0dXJuIHdyaXRlX1hudW0oMCk7XG59XG5cbi8qIFtNUy1YTFNdIDIuNC4xMjcgVE9ETyAqL1xuZnVuY3Rpb24gcGFyc2VfRm9ybXVsYShibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIGVuZCA9IGJsb2IubCArIGxlbmd0aDtcblx0dmFyIGNlbGwgPSBwYXJzZV9YTFNDZWxsKGJsb2IsIDYpO1xuXHRpZihvcHRzLmJpZmYgPT0gMikgKytibG9iLmw7XG5cdHZhciB2YWwgPSBwYXJzZV9Gb3JtdWxhVmFsdWUoYmxvYiw4KTtcblx0dmFyIGZsYWdzID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRpZihvcHRzLmJpZmYgIT0gMikge1xuXHRcdGJsb2IucmVhZF9zaGlmdCgxKTtcblx0XHRpZihvcHRzLmJpZmYgPj0gNSkge1xuXHRcdFx0Lyp2YXIgY2huID0gKi9ibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0fVxuXHR9XG5cdHZhciBjYmYgPSBwYXJzZV9YTFNDZWxsUGFyc2VkRm9ybXVsYShibG9iLCBlbmQgLSBibG9iLmwsIG9wdHMpO1xuXHRyZXR1cm4ge2NlbGw6Y2VsbCwgdmFsOnZhbFswXSwgZm9ybXVsYTpjYmYsIHNoYXJlZDogKGZsYWdzID4+IDMpICYgMSwgdHQ6dmFsWzFdfTtcbn1cbmZ1bmN0aW9uIHdyaXRlX0Zvcm11bGEoY2VsbCwgUiwgQywgb3B0cywgb3MpIHtcblx0Ly8gQ2VsbFxuXHR2YXIgbzEgPSB3cml0ZV9YTFNDZWxsKFIsIEMsIG9zKTtcblxuXHQvLyBGb3JtdWxhVmFsdWVcblx0dmFyIG8yID0gd3JpdGVfRm9ybXVsYVZhbHVlKGNlbGwudik7XG5cblx0Ly8gZmxhZ3MgKyBjYWNoZVxuXHR2YXIgbzMgPSBuZXdfYnVmKDYpO1xuXHR2YXIgZmxhZ3MgPSAweDAxIHwgMHgyMDtcblx0bzMud3JpdGVfc2hpZnQoMiwgZmxhZ3MpO1xuXHRvMy53cml0ZV9zaGlmdCg0LCAwKTtcblxuXHQvLyBDZWxsUGFyc2VkRm9ybXVsYVxuXHR2YXIgYmYgPSBuZXdfYnVmKGNlbGwuYmYubGVuZ3RoKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGNlbGwuYmYubGVuZ3RoOyArK2kpIGJmW2ldID0gY2VsbC5iZltpXTtcblxuXHR2YXIgb3V0ID0gYmNvbmNhdChbbzEsIG8yLCBvMywgYmZdKTtcblx0cmV0dXJuIG91dDtcbn1cblxuXG4vKiBYTFNCIFBhcnNlZCBGb3JtdWxhIHJlY29yZHMgaGF2ZSB0aGUgc2FtZSBzaGFwZSAqL1xuZnVuY3Rpb24gcGFyc2VfWExTQlBhcnNlZEZvcm11bGEoZGF0YSwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciBjY2UgPSBkYXRhLnJlYWRfc2hpZnQoNCk7XG5cdHZhciByZ2NlID0gcGFyc2VfUmdjZShkYXRhLCBjY2UsIG9wdHMpO1xuXHR2YXIgY2IgPSBkYXRhLnJlYWRfc2hpZnQoNCk7XG5cdHZhciByZ2NiID0gY2IgPiAwID8gcGFyc2VfUmdiRXh0cmEoZGF0YSwgY2IsIHJnY2UsIG9wdHMpIDogbnVsbDtcblx0cmV0dXJuIFtyZ2NlLCByZ2NiXTtcbn1cblxuLyogW01TLVhMU0JdIDIuNS45Ny4xIEFycmF5UGFyc2VkRm9ybXVsYSAqL1xudmFyIHBhcnNlX1hMU0JBcnJheVBhcnNlZEZvcm11bGEgPSBwYXJzZV9YTFNCUGFyc2VkRm9ybXVsYTtcbi8qIFtNUy1YTFNCXSAyLjUuOTcuNCBDZWxsUGFyc2VkRm9ybXVsYSAqL1xudmFyIHBhcnNlX1hMU0JDZWxsUGFyc2VkRm9ybXVsYSA9IHBhcnNlX1hMU0JQYXJzZWRGb3JtdWxhO1xuLyogW01TLVhMU0JdIDIuNS45Ny44IERWUGFyc2VkRm9ybXVsYSAqL1xuLy92YXIgcGFyc2VfWExTQkRWUGFyc2VkRm9ybXVsYSA9IHBhcnNlX1hMU0JQYXJzZWRGb3JtdWxhO1xuLyogW01TLVhMU0JdIDIuNS45Ny45IEZSVFBhcnNlZEZvcm11bGEgKi9cbi8vdmFyIHBhcnNlX1hMU0JGUlRQYXJzZWRGb3JtdWxhID0gcGFyc2VfWExTQlBhcnNlZEZvcm11bGEyO1xuLyogW01TLVhMU0JdIDIuNS45Ny4xMiBOYW1lUGFyc2VkRm9ybXVsYSAqL1xudmFyIHBhcnNlX1hMU0JOYW1lUGFyc2VkRm9ybXVsYSA9IHBhcnNlX1hMU0JQYXJzZWRGb3JtdWxhO1xuLyogW01TLVhMU0JdIDIuNS45Ny45OCBTaGFyZWRQYXJzZWRGb3JtdWxhICovXG52YXIgcGFyc2VfWExTQlNoYXJlZFBhcnNlZEZvcm11bGEgPSBwYXJzZV9YTFNCUGFyc2VkRm9ybXVsYTtcbi8qIFtNUy1YTFNdIDIuNS4xOTguNCAqL1xudmFyIENldGFiID0ge1xuMHgwMDAwOiAnQkVFUCcsXG4weDAwMDE6ICdPUEVOJyxcbjB4MDAwMjogJ09QRU4uTElOS1MnLFxuMHgwMDAzOiAnQ0xPU0UuQUxMJyxcbjB4MDAwNDogJ1NBVkUnLFxuMHgwMDA1OiAnU0FWRS5BUycsXG4weDAwMDY6ICdGSUxFLkRFTEVURScsXG4weDAwMDc6ICdQQUdFLlNFVFVQJyxcbjB4MDAwODogJ1BSSU5UJyxcbjB4MDAwOTogJ1BSSU5URVIuU0VUVVAnLFxuMHgwMDBBOiAnUVVJVCcsXG4weDAwMEI6ICdORVcuV0lORE9XJyxcbjB4MDAwQzogJ0FSUkFOR0UuQUxMJyxcbjB4MDAwRDogJ1dJTkRPVy5TSVpFJyxcbjB4MDAwRTogJ1dJTkRPVy5NT1ZFJyxcbjB4MDAwRjogJ0ZVTEwnLFxuMHgwMDEwOiAnQ0xPU0UnLFxuMHgwMDExOiAnUlVOJyxcbjB4MDAxNjogJ1NFVC5QUklOVC5BUkVBJyxcbjB4MDAxNzogJ1NFVC5QUklOVC5USVRMRVMnLFxuMHgwMDE4OiAnU0VULlBBR0UuQlJFQUsnLFxuMHgwMDE5OiAnUkVNT1ZFLlBBR0UuQlJFQUsnLFxuMHgwMDFBOiAnRk9OVCcsXG4weDAwMUI6ICdESVNQTEFZJyxcbjB4MDAxQzogJ1BST1RFQ1QuRE9DVU1FTlQnLFxuMHgwMDFEOiAnUFJFQ0lTSU9OJyxcbjB4MDAxRTogJ0ExLlIxQzEnLFxuMHgwMDFGOiAnQ0FMQ1VMQVRFLk5PVycsXG4weDAwMjA6ICdDQUxDVUxBVElPTicsXG4weDAwMjI6ICdEQVRBLkZJTkQnLFxuMHgwMDIzOiAnRVhUUkFDVCcsXG4weDAwMjQ6ICdEQVRBLkRFTEVURScsXG4weDAwMjU6ICdTRVQuREFUQUJBU0UnLFxuMHgwMDI2OiAnU0VULkNSSVRFUklBJyxcbjB4MDAyNzogJ1NPUlQnLFxuMHgwMDI4OiAnREFUQS5TRVJJRVMnLFxuMHgwMDI5OiAnVEFCTEUnLFxuMHgwMDJBOiAnRk9STUFULk5VTUJFUicsXG4weDAwMkI6ICdBTElHTk1FTlQnLFxuMHgwMDJDOiAnU1RZTEUnLFxuMHgwMDJEOiAnQk9SREVSJyxcbjB4MDAyRTogJ0NFTEwuUFJPVEVDVElPTicsXG4weDAwMkY6ICdDT0xVTU4uV0lEVEgnLFxuMHgwMDMwOiAnVU5ETycsXG4weDAwMzE6ICdDVVQnLFxuMHgwMDMyOiAnQ09QWScsXG4weDAwMzM6ICdQQVNURScsXG4weDAwMzQ6ICdDTEVBUicsXG4weDAwMzU6ICdQQVNURS5TUEVDSUFMJyxcbjB4MDAzNjogJ0VESVQuREVMRVRFJyxcbjB4MDAzNzogJ0lOU0VSVCcsXG4weDAwMzg6ICdGSUxMLlJJR0hUJyxcbjB4MDAzOTogJ0ZJTEwuRE9XTicsXG4weDAwM0Q6ICdERUZJTkUuTkFNRScsXG4weDAwM0U6ICdDUkVBVEUuTkFNRVMnLFxuMHgwMDNGOiAnRk9STVVMQS5HT1RPJyxcbjB4MDA0MDogJ0ZPUk1VTEEuRklORCcsXG4weDAwNDE6ICdTRUxFQ1QuTEFTVC5DRUxMJyxcbjB4MDA0MjogJ1NIT1cuQUNUSVZFLkNFTEwnLFxuMHgwMDQzOiAnR0FMTEVSWS5BUkVBJyxcbjB4MDA0NDogJ0dBTExFUlkuQkFSJyxcbjB4MDA0NTogJ0dBTExFUlkuQ09MVU1OJyxcbjB4MDA0NjogJ0dBTExFUlkuTElORScsXG4weDAwNDc6ICdHQUxMRVJZLlBJRScsXG4weDAwNDg6ICdHQUxMRVJZLlNDQVRURVInLFxuMHgwMDQ5OiAnQ09NQklOQVRJT04nLFxuMHgwMDRBOiAnUFJFRkVSUkVEJyxcbjB4MDA0QjogJ0FERC5PVkVSTEFZJyxcbjB4MDA0QzogJ0dSSURMSU5FUycsXG4weDAwNEQ6ICdTRVQuUFJFRkVSUkVEJyxcbjB4MDA0RTogJ0FYRVMnLFxuMHgwMDRGOiAnTEVHRU5EJyxcbjB4MDA1MDogJ0FUVEFDSC5URVhUJyxcbjB4MDA1MTogJ0FERC5BUlJPVycsXG4weDAwNTI6ICdTRUxFQ1QuQ0hBUlQnLFxuMHgwMDUzOiAnU0VMRUNULlBMT1QuQVJFQScsXG4weDAwNTQ6ICdQQVRURVJOUycsXG4weDAwNTU6ICdNQUlOLkNIQVJUJyxcbjB4MDA1NjogJ09WRVJMQVknLFxuMHgwMDU3OiAnU0NBTEUnLFxuMHgwMDU4OiAnRk9STUFULkxFR0VORCcsXG4weDAwNTk6ICdGT1JNQVQuVEVYVCcsXG4weDAwNUE6ICdFRElULlJFUEVBVCcsXG4weDAwNUI6ICdQQVJTRScsXG4weDAwNUM6ICdKVVNUSUZZJyxcbjB4MDA1RDogJ0hJREUnLFxuMHgwMDVFOiAnVU5ISURFJyxcbjB4MDA1RjogJ1dPUktTUEFDRScsXG4weDAwNjA6ICdGT1JNVUxBJyxcbjB4MDA2MTogJ0ZPUk1VTEEuRklMTCcsXG4weDAwNjI6ICdGT1JNVUxBLkFSUkFZJyxcbjB4MDA2MzogJ0RBVEEuRklORC5ORVhUJyxcbjB4MDA2NDogJ0RBVEEuRklORC5QUkVWJyxcbjB4MDA2NTogJ0ZPUk1VTEEuRklORC5ORVhUJyxcbjB4MDA2NjogJ0ZPUk1VTEEuRklORC5QUkVWJyxcbjB4MDA2NzogJ0FDVElWQVRFJyxcbjB4MDA2ODogJ0FDVElWQVRFLk5FWFQnLFxuMHgwMDY5OiAnQUNUSVZBVEUuUFJFVicsXG4weDAwNkE6ICdVTkxPQ0tFRC5ORVhUJyxcbjB4MDA2QjogJ1VOTE9DS0VELlBSRVYnLFxuMHgwMDZDOiAnQ09QWS5QSUNUVVJFJyxcbjB4MDA2RDogJ1NFTEVDVCcsXG4weDAwNkU6ICdERUxFVEUuTkFNRScsXG4weDAwNkY6ICdERUxFVEUuRk9STUFUJyxcbjB4MDA3MDogJ1ZMSU5FJyxcbjB4MDA3MTogJ0hMSU5FJyxcbjB4MDA3MjogJ1ZQQUdFJyxcbjB4MDA3MzogJ0hQQUdFJyxcbjB4MDA3NDogJ1ZTQ1JPTEwnLFxuMHgwMDc1OiAnSFNDUk9MTCcsXG4weDAwNzY6ICdBTEVSVCcsXG4weDAwNzc6ICdORVcnLFxuMHgwMDc4OiAnQ0FOQ0VMLkNPUFknLFxuMHgwMDc5OiAnU0hPVy5DTElQQk9BUkQnLFxuMHgwMDdBOiAnTUVTU0FHRScsXG4weDAwN0M6ICdQQVNURS5MSU5LJyxcbjB4MDA3RDogJ0FQUC5BQ1RJVkFURScsXG4weDAwN0U6ICdERUxFVEUuQVJST1cnLFxuMHgwMDdGOiAnUk9XLkhFSUdIVCcsXG4weDAwODA6ICdGT1JNQVQuTU9WRScsXG4weDAwODE6ICdGT1JNQVQuU0laRScsXG4weDAwODI6ICdGT1JNVUxBLlJFUExBQ0UnLFxuMHgwMDgzOiAnU0VORC5LRVlTJyxcbjB4MDA4NDogJ1NFTEVDVC5TUEVDSUFMJyxcbjB4MDA4NTogJ0FQUExZLk5BTUVTJyxcbjB4MDA4NjogJ1JFUExBQ0UuRk9OVCcsXG4weDAwODc6ICdGUkVFWkUuUEFORVMnLFxuMHgwMDg4OiAnU0hPVy5JTkZPJyxcbjB4MDA4OTogJ1NQTElUJyxcbjB4MDA4QTogJ09OLldJTkRPVycsXG4weDAwOEI6ICdPTi5EQVRBJyxcbjB4MDA4QzogJ0RJU0FCTEUuSU5QVVQnLFxuMHgwMDhFOiAnT1VUTElORScsXG4weDAwOEY6ICdMSVNULk5BTUVTJyxcbjB4MDA5MDogJ0ZJTEUuQ0xPU0UnLFxuMHgwMDkxOiAnU0FWRS5XT1JLQk9PSycsXG4weDAwOTI6ICdEQVRBLkZPUk0nLFxuMHgwMDkzOiAnQ09QWS5DSEFSVCcsXG4weDAwOTQ6ICdPTi5USU1FJyxcbjB4MDA5NTogJ1dBSVQnLFxuMHgwMDk2OiAnRk9STUFULkZPTlQnLFxuMHgwMDk3OiAnRklMTC5VUCcsXG4weDAwOTg6ICdGSUxMLkxFRlQnLFxuMHgwMDk5OiAnREVMRVRFLk9WRVJMQVknLFxuMHgwMDlCOiAnU0hPUlQuTUVOVVMnLFxuMHgwMDlGOiAnU0VULlVQREFURS5TVEFUVVMnLFxuMHgwMEExOiAnQ09MT1IuUEFMRVRURScsXG4weDAwQTI6ICdERUxFVEUuU1RZTEUnLFxuMHgwMEEzOiAnV0lORE9XLlJFU1RPUkUnLFxuMHgwMEE0OiAnV0lORE9XLk1BWElNSVpFJyxcbjB4MDBBNjogJ0NIQU5HRS5MSU5LJyxcbjB4MDBBNzogJ0NBTENVTEFURS5ET0NVTUVOVCcsXG4weDAwQTg6ICdPTi5LRVknLFxuMHgwMEE5OiAnQVBQLlJFU1RPUkUnLFxuMHgwMEFBOiAnQVBQLk1PVkUnLFxuMHgwMEFCOiAnQVBQLlNJWkUnLFxuMHgwMEFDOiAnQVBQLk1JTklNSVpFJyxcbjB4MDBBRDogJ0FQUC5NQVhJTUlaRScsXG4weDAwQUU6ICdCUklORy5UTy5GUk9OVCcsXG4weDAwQUY6ICdTRU5ELlRPLkJBQ0snLFxuMHgwMEI5OiAnTUFJTi5DSEFSVC5UWVBFJyxcbjB4MDBCQTogJ09WRVJMQVkuQ0hBUlQuVFlQRScsXG4weDAwQkI6ICdTRUxFQ1QuRU5EJyxcbjB4MDBCQzogJ09QRU4uTUFJTCcsXG4weDAwQkQ6ICdTRU5ELk1BSUwnLFxuMHgwMEJFOiAnU1RBTkRBUkQuRk9OVCcsXG4weDAwQkY6ICdDT05TT0xJREFURScsXG4weDAwQzA6ICdTT1JULlNQRUNJQUwnLFxuMHgwMEMxOiAnR0FMTEVSWS4zRC5BUkVBJyxcbjB4MDBDMjogJ0dBTExFUlkuM0QuQ09MVU1OJyxcbjB4MDBDMzogJ0dBTExFUlkuM0QuTElORScsXG4weDAwQzQ6ICdHQUxMRVJZLjNELlBJRScsXG4weDAwQzU6ICdWSUVXLjNEJyxcbjB4MDBDNjogJ0dPQUwuU0VFSycsXG4weDAwQzc6ICdXT1JLR1JPVVAnLFxuMHgwMEM4OiAnRklMTC5HUk9VUCcsXG4weDAwQzk6ICdVUERBVEUuTElOSycsXG4weDAwQ0E6ICdQUk9NT1RFJyxcbjB4MDBDQjogJ0RFTU9URScsXG4weDAwQ0M6ICdTSE9XLkRFVEFJTCcsXG4weDAwQ0U6ICdVTkdST1VQJyxcbjB4MDBDRjogJ09CSkVDVC5QUk9QRVJUSUVTJyxcbjB4MDBEMDogJ1NBVkUuTkVXLk9CSkVDVCcsXG4weDAwRDE6ICdTSEFSRScsXG4weDAwRDI6ICdTSEFSRS5OQU1FJyxcbjB4MDBEMzogJ0RVUExJQ0FURScsXG4weDAwRDQ6ICdBUFBMWS5TVFlMRScsXG4weDAwRDU6ICdBU1NJR04uVE8uT0JKRUNUJyxcbjB4MDBENjogJ09CSkVDVC5QUk9URUNUSU9OJyxcbjB4MDBENzogJ0hJREUuT0JKRUNUJyxcbjB4MDBEODogJ1NFVC5FWFRSQUNUJyxcbjB4MDBEOTogJ0NSRUFURS5QVUJMSVNIRVInLFxuMHgwMERBOiAnU1VCU0NSSUJFLlRPJyxcbjB4MDBEQjogJ0FUVFJJQlVURVMnLFxuMHgwMERDOiAnU0hPVy5UT09MQkFSJyxcbjB4MDBERTogJ1BSSU5ULlBSRVZJRVcnLFxuMHgwMERGOiAnRURJVC5DT0xPUicsXG4weDAwRTA6ICdTSE9XLkxFVkVMUycsXG4weDAwRTE6ICdGT1JNQVQuTUFJTicsXG4weDAwRTI6ICdGT1JNQVQuT1ZFUkxBWScsXG4weDAwRTM6ICdPTi5SRUNBTEMnLFxuMHgwMEU0OiAnRURJVC5TRVJJRVMnLFxuMHgwMEU1OiAnREVGSU5FLlNUWUxFJyxcbjB4MDBGMDogJ0xJTkUuUFJJTlQnLFxuMHgwMEYzOiAnRU5URVIuREFUQScsXG4weDAwRjk6ICdHQUxMRVJZLlJBREFSJyxcbjB4MDBGQTogJ01FUkdFLlNUWUxFUycsXG4weDAwRkI6ICdFRElUSU9OLk9QVElPTlMnLFxuMHgwMEZDOiAnUEFTVEUuUElDVFVSRScsXG4weDAwRkQ6ICdQQVNURS5QSUNUVVJFLkxJTksnLFxuMHgwMEZFOiAnU1BFTExJTkcnLFxuMHgwMTAwOiAnWk9PTScsXG4weDAxMDM6ICdJTlNFUlQuT0JKRUNUJyxcbjB4MDEwNDogJ1dJTkRPVy5NSU5JTUlaRScsXG4weDAxMDk6ICdTT1VORC5OT1RFJyxcbjB4MDEwQTogJ1NPVU5ELlBMQVknLFxuMHgwMTBCOiAnRk9STUFULlNIQVBFJyxcbjB4MDEwQzogJ0VYVEVORC5QT0xZR09OJyxcbjB4MDEwRDogJ0ZPUk1BVC5BVVRPJyxcbjB4MDExMDogJ0dBTExFUlkuM0QuQkFSJyxcbjB4MDExMTogJ0dBTExFUlkuM0QuU1VSRkFDRScsXG4weDAxMTI6ICdGSUxMLkFVVE8nLFxuMHgwMTE0OiAnQ1VTVE9NSVpFLlRPT0xCQVInLFxuMHgwMTE1OiAnQURELlRPT0wnLFxuMHgwMTE2OiAnRURJVC5PQkpFQ1QnLFxuMHgwMTE3OiAnT04uRE9VQkxFQ0xJQ0snLFxuMHgwMTE4OiAnT04uRU5UUlknLFxuMHgwMTE5OiAnV09SS0JPT0suQUREJyxcbjB4MDExQTogJ1dPUktCT09LLk1PVkUnLFxuMHgwMTFCOiAnV09SS0JPT0suQ09QWScsXG4weDAxMUM6ICdXT1JLQk9PSy5PUFRJT05TJyxcbjB4MDExRDogJ1NBVkUuV09SS1NQQUNFJyxcbjB4MDEyMDogJ0NIQVJULldJWkFSRCcsXG4weDAxMjE6ICdERUxFVEUuVE9PTCcsXG4weDAxMjI6ICdNT1ZFLlRPT0wnLFxuMHgwMTIzOiAnV09SS0JPT0suU0VMRUNUJyxcbjB4MDEyNDogJ1dPUktCT09LLkFDVElWQVRFJyxcbjB4MDEyNTogJ0FTU0lHTi5UTy5UT09MJyxcbjB4MDEyNzogJ0NPUFkuVE9PTCcsXG4weDAxMjg6ICdSRVNFVC5UT09MJyxcbjB4MDEyOTogJ0NPTlNUUkFJTi5OVU1FUklDJyxcbjB4MDEyQTogJ1BBU1RFLlRPT0wnLFxuMHgwMTJFOiAnV09SS0JPT0suTkVXJyxcbjB4MDEzMTogJ1NDRU5BUklPLkNFTExTJyxcbjB4MDEzMjogJ1NDRU5BUklPLkRFTEVURScsXG4weDAxMzM6ICdTQ0VOQVJJTy5BREQnLFxuMHgwMTM0OiAnU0NFTkFSSU8uRURJVCcsXG4weDAxMzU6ICdTQ0VOQVJJTy5TSE9XJyxcbjB4MDEzNjogJ1NDRU5BUklPLlNIT1cuTkVYVCcsXG4weDAxMzc6ICdTQ0VOQVJJTy5TVU1NQVJZJyxcbjB4MDEzODogJ1BJVk9ULlRBQkxFLldJWkFSRCcsXG4weDAxMzk6ICdQSVZPVC5GSUVMRC5QUk9QRVJUSUVTJyxcbjB4MDEzQTogJ1BJVk9ULkZJRUxEJyxcbjB4MDEzQjogJ1BJVk9ULklURU0nLFxuMHgwMTNDOiAnUElWT1QuQURELkZJRUxEUycsXG4weDAxM0U6ICdPUFRJT05TLkNBTENVTEFUSU9OJyxcbjB4MDEzRjogJ09QVElPTlMuRURJVCcsXG4weDAxNDA6ICdPUFRJT05TLlZJRVcnLFxuMHgwMTQxOiAnQURESU4uTUFOQUdFUicsXG4weDAxNDI6ICdNRU5VLkVESVRPUicsXG4weDAxNDM6ICdBVFRBQ0guVE9PTEJBUlMnLFxuMHgwMTQ0OiAnVkJBQWN0aXZhdGUnLFxuMHgwMTQ1OiAnT1BUSU9OUy5DSEFSVCcsXG4weDAxNDg6ICdWQkEuSU5TRVJULkZJTEUnLFxuMHgwMTRBOiAnVkJBLlBST0NFRFVSRS5ERUZJTklUSU9OJyxcbjB4MDE1MDogJ1JPVVRJTkcuU0xJUCcsXG4weDAxNTI6ICdST1VURS5ET0NVTUVOVCcsXG4weDAxNTM6ICdNQUlMLkxPR09OJyxcbjB4MDE1NjogJ0lOU0VSVC5QSUNUVVJFJyxcbjB4MDE1NzogJ0VESVQuVE9PTCcsXG4weDAxNTg6ICdHQUxMRVJZLkRPVUdITlVUJyxcbjB4MDE1RTogJ0NIQVJULlRSRU5EJyxcbjB4MDE2MDogJ1BJVk9ULklURU0uUFJPUEVSVElFUycsXG4weDAxNjI6ICdXT1JLQk9PSy5JTlNFUlQnLFxuMHgwMTYzOiAnT1BUSU9OUy5UUkFOU0lUSU9OJyxcbjB4MDE2NDogJ09QVElPTlMuR0VORVJBTCcsXG4weDAxNzI6ICdGSUxURVIuQURWQU5DRUQnLFxuMHgwMTc1OiAnTUFJTC5BREQuTUFJTEVSJyxcbjB4MDE3NjogJ01BSUwuREVMRVRFLk1BSUxFUicsXG4weDAxNzc6ICdNQUlMLlJFUExZJyxcbjB4MDE3ODogJ01BSUwuUkVQTFkuQUxMJyxcbjB4MDE3OTogJ01BSUwuRk9SV0FSRCcsXG4weDAxN0E6ICdNQUlMLk5FWFQuTEVUVEVSJyxcbjB4MDE3QjogJ0RBVEEuTEFCRUwnLFxuMHgwMTdDOiAnSU5TRVJULlRJVExFJyxcbjB4MDE3RDogJ0ZPTlQuUFJPUEVSVElFUycsXG4weDAxN0U6ICdNQUNSTy5PUFRJT05TJyxcbjB4MDE3RjogJ1dPUktCT09LLkhJREUnLFxuMHgwMTgwOiAnV09SS0JPT0suVU5ISURFJyxcbjB4MDE4MTogJ1dPUktCT09LLkRFTEVURScsXG4weDAxODI6ICdXT1JLQk9PSy5OQU1FJyxcbjB4MDE4NDogJ0dBTExFUlkuQ1VTVE9NJyxcbjB4MDE4NjogJ0FERC5DSEFSVC5BVVRPRk9STUFUJyxcbjB4MDE4NzogJ0RFTEVURS5DSEFSVC5BVVRPRk9STUFUJyxcbjB4MDE4ODogJ0NIQVJULkFERC5EQVRBJyxcbjB4MDE4OTogJ0FVVE8uT1VUTElORScsXG4weDAxOEE6ICdUQUIuT1JERVInLFxuMHgwMThCOiAnU0hPVy5ESUFMT0cnLFxuMHgwMThDOiAnU0VMRUNULkFMTCcsXG4weDAxOEQ6ICdVTkdST1VQLlNIRUVUUycsXG4weDAxOEU6ICdTVUJUT1RBTC5DUkVBVEUnLFxuMHgwMThGOiAnU1VCVE9UQUwuUkVNT1ZFJyxcbjB4MDE5MDogJ1JFTkFNRS5PQkpFQ1QnLFxuMHgwMTlDOiAnV09SS0JPT0suU0NST0xMJyxcbjB4MDE5RDogJ1dPUktCT09LLk5FWFQnLFxuMHgwMTlFOiAnV09SS0JPT0suUFJFVicsXG4weDAxOUY6ICdXT1JLQk9PSy5UQUIuU1BMSVQnLFxuMHgwMUEwOiAnRlVMTC5TQ1JFRU4nLFxuMHgwMUExOiAnV09SS0JPT0suUFJPVEVDVCcsXG4weDAxQTQ6ICdTQ1JPTExCQVIuUFJPUEVSVElFUycsXG4weDAxQTU6ICdQSVZPVC5TSE9XLlBBR0VTJyxcbjB4MDFBNjogJ1RFWFQuVE8uQ09MVU1OUycsXG4weDAxQTc6ICdGT1JNQVQuQ0hBUlRUWVBFJyxcbjB4MDFBODogJ0xJTksuRk9STUFUJyxcbjB4MDFBOTogJ1RSQUNFUi5ESVNQTEFZJyxcbjB4MDFBRTogJ1RSQUNFUi5OQVZJR0FURScsXG4weDAxQUY6ICdUUkFDRVIuQ0xFQVInLFxuMHgwMUIwOiAnVFJBQ0VSLkVSUk9SJyxcbjB4MDFCMTogJ1BJVk9ULkZJRUxELkdST1VQJyxcbjB4MDFCMjogJ1BJVk9ULkZJRUxELlVOR1JPVVAnLFxuMHgwMUIzOiAnQ0hFQ0tCT1guUFJPUEVSVElFUycsXG4weDAxQjQ6ICdMQUJFTC5QUk9QRVJUSUVTJyxcbjB4MDFCNTogJ0xJU1RCT1guUFJPUEVSVElFUycsXG4weDAxQjY6ICdFRElUQk9YLlBST1BFUlRJRVMnLFxuMHgwMUI3OiAnUElWT1QuUkVGUkVTSCcsXG4weDAxQjg6ICdMSU5LLkNPTUJPJyxcbjB4MDFCOTogJ09QRU4uVEVYVCcsXG4weDAxQkE6ICdISURFLkRJQUxPRycsXG4weDAxQkI6ICdTRVQuRElBTE9HLkZPQ1VTJyxcbjB4MDFCQzogJ0VOQUJMRS5PQkpFQ1QnLFxuMHgwMUJEOiAnUFVTSEJVVFRPTi5QUk9QRVJUSUVTJyxcbjB4MDFCRTogJ1NFVC5ESUFMT0cuREVGQVVMVCcsXG4weDAxQkY6ICdGSUxURVInLFxuMHgwMUMwOiAnRklMVEVSLlNIT1cuQUxMJyxcbjB4MDFDMTogJ0NMRUFSLk9VVExJTkUnLFxuMHgwMUMyOiAnRlVOQ1RJT04uV0laQVJEJyxcbjB4MDFDMzogJ0FERC5MSVNULklURU0nLFxuMHgwMUM0OiAnU0VULkxJU1QuSVRFTScsXG4weDAxQzU6ICdSRU1PVkUuTElTVC5JVEVNJyxcbjB4MDFDNjogJ1NFTEVDVC5MSVNULklURU0nLFxuMHgwMUM3OiAnU0VULkNPTlRST0wuVkFMVUUnLFxuMHgwMUM4OiAnU0FWRS5DT1BZLkFTJyxcbjB4MDFDQTogJ09QVElPTlMuTElTVFMuQUREJyxcbjB4MDFDQjogJ09QVElPTlMuTElTVFMuREVMRVRFJyxcbjB4MDFDQzogJ1NFUklFUy5BWEVTJyxcbjB4MDFDRDogJ1NFUklFUy5YJyxcbjB4MDFDRTogJ1NFUklFUy5ZJyxcbjB4MDFDRjogJ0VSUk9SQkFSLlgnLFxuMHgwMUQwOiAnRVJST1JCQVIuWScsXG4weDAxRDE6ICdGT1JNQVQuQ0hBUlQnLFxuMHgwMUQyOiAnU0VSSUVTLk9SREVSJyxcbjB4MDFEMzogJ01BSUwuTE9HT0ZGJyxcbjB4MDFENDogJ0NMRUFSLlJPVVRJTkcuU0xJUCcsXG4weDAxRDU6ICdBUFAuQUNUSVZBVEUuTUlDUk9TT0ZUJyxcbjB4MDFENjogJ01BSUwuRURJVC5NQUlMRVInLFxuMHgwMUQ3OiAnT04uU0hFRVQnLFxuMHgwMUQ4OiAnU1RBTkRBUkQuV0lEVEgnLFxuMHgwMUQ5OiAnU0NFTkFSSU8uTUVSR0UnLFxuMHgwMURBOiAnU1VNTUFSWS5JTkZPJyxcbjB4MDFEQjogJ0ZJTkQuRklMRScsXG4weDAxREM6ICdBQ1RJVkUuQ0VMTC5GT05UJyxcbjB4MDFERDogJ0VOQUJMRS5USVBXSVpBUkQnLFxuMHgwMURFOiAnVkJBLk1BS0UuQURESU4nLFxuMHgwMUUwOiAnSU5TRVJUREFUQVRBQkxFJyxcbjB4MDFFMTogJ1dPUktHUk9VUC5PUFRJT05TJyxcbjB4MDFFMjogJ01BSUwuU0VORC5NQUlMRVInLFxuMHgwMUU1OiAnQVVUT0NPUlJFQ1QnLFxuMHgwMUU5OiAnUE9TVC5ET0NVTUVOVCcsXG4weDAxRUI6ICdQSUNLTElTVCcsXG4weDAxRUQ6ICdWSUVXLlNIT1cnLFxuMHgwMUVFOiAnVklFVy5ERUZJTkUnLFxuMHgwMUVGOiAnVklFVy5ERUxFVEUnLFxuMHgwMUZEOiAnU0hFRVQuQkFDS0dST1VORCcsXG4weDAxRkU6ICdJTlNFUlQuTUFQLk9CSkVDVCcsXG4weDAxRkY6ICdPUFRJT05TLk1FTk9OTycsXG4weDAyMDU6ICdNU09DSEVDS1MnLFxuMHgwMjA2OiAnTk9STUFMJyxcbjB4MDIwNzogJ0xBWU9VVCcsXG4weDAyMDg6ICdSTS5QUklOVC5BUkVBJyxcbjB4MDIwOTogJ0NMRUFSLlBSSU5ULkFSRUEnLFxuMHgwMjBBOiAnQURELlBSSU5ULkFSRUEnLFxuMHgwMjBCOiAnTU9WRS5CUksnLFxuMHgwMjIxOiAnSElERUNVUlIuTk9URScsXG4weDAyMjI6ICdISURFQUxMLk5PVEVTJyxcbjB4MDIyMzogJ0RFTEVURS5OT1RFJyxcbjB4MDIyNDogJ1RSQVZFUlNFLk5PVEVTJyxcbjB4MDIyNTogJ0FDVElWQVRFLk5PVEVTJyxcbjB4MDI2QzogJ1BST1RFQ1QuUkVWSVNJT05TJyxcbjB4MDI2RDogJ1VOUFJPVEVDVC5SRVZJU0lPTlMnLFxuMHgwMjg3OiAnT1BUSU9OUy5NRScsXG4weDAyOEQ6ICdXRUIuUFVCTElTSCcsXG4weDAyOUI6ICdORVdXRUJRVUVSWScsXG4weDAyQTE6ICdQSVZPVC5UQUJMRS5DSEFSVCcsXG4weDAyRjE6ICdPUFRJT05TLlNBVkUnLFxuMHgwMkYzOiAnT1BUSU9OUy5TUEVMTCcsXG4weDAzMjg6ICdISURFQUxMLklOS0FOTk9UUydcbn07XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguMTcgKi9cbi8qIFtNUy1YTFNCXSAyLjUuOTcuMTAgKi9cbnZhciBGdGFiID0ge1xuMHgwMDAwOiAnQ09VTlQnLFxuMHgwMDAxOiAnSUYnLFxuMHgwMDAyOiAnSVNOQScsXG4weDAwMDM6ICdJU0VSUk9SJyxcbjB4MDAwNDogJ1NVTScsXG4weDAwMDU6ICdBVkVSQUdFJyxcbjB4MDAwNjogJ01JTicsXG4weDAwMDc6ICdNQVgnLFxuMHgwMDA4OiAnUk9XJyxcbjB4MDAwOTogJ0NPTFVNTicsXG4weDAwMEE6ICdOQScsXG4weDAwMEI6ICdOUFYnLFxuMHgwMDBDOiAnU1RERVYnLFxuMHgwMDBEOiAnRE9MTEFSJyxcbjB4MDAwRTogJ0ZJWEVEJyxcbjB4MDAwRjogJ1NJTicsXG4weDAwMTA6ICdDT1MnLFxuMHgwMDExOiAnVEFOJyxcbjB4MDAxMjogJ0FUQU4nLFxuMHgwMDEzOiAnUEknLFxuMHgwMDE0OiAnU1FSVCcsXG4weDAwMTU6ICdFWFAnLFxuMHgwMDE2OiAnTE4nLFxuMHgwMDE3OiAnTE9HMTAnLFxuMHgwMDE4OiAnQUJTJyxcbjB4MDAxOTogJ0lOVCcsXG4weDAwMUE6ICdTSUdOJyxcbjB4MDAxQjogJ1JPVU5EJyxcbjB4MDAxQzogJ0xPT0tVUCcsXG4weDAwMUQ6ICdJTkRFWCcsXG4weDAwMUU6ICdSRVBUJyxcbjB4MDAxRjogJ01JRCcsXG4weDAwMjA6ICdMRU4nLFxuMHgwMDIxOiAnVkFMVUUnLFxuMHgwMDIyOiAnVFJVRScsXG4weDAwMjM6ICdGQUxTRScsXG4weDAwMjQ6ICdBTkQnLFxuMHgwMDI1OiAnT1InLFxuMHgwMDI2OiAnTk9UJyxcbjB4MDAyNzogJ01PRCcsXG4weDAwMjg6ICdEQ09VTlQnLFxuMHgwMDI5OiAnRFNVTScsXG4weDAwMkE6ICdEQVZFUkFHRScsXG4weDAwMkI6ICdETUlOJyxcbjB4MDAyQzogJ0RNQVgnLFxuMHgwMDJEOiAnRFNUREVWJyxcbjB4MDAyRTogJ1ZBUicsXG4weDAwMkY6ICdEVkFSJyxcbjB4MDAzMDogJ1RFWFQnLFxuMHgwMDMxOiAnTElORVNUJyxcbjB4MDAzMjogJ1RSRU5EJyxcbjB4MDAzMzogJ0xPR0VTVCcsXG4weDAwMzQ6ICdHUk9XVEgnLFxuMHgwMDM1OiAnR09UTycsXG4weDAwMzY6ICdIQUxUJyxcbjB4MDAzNzogJ1JFVFVSTicsXG4weDAwMzg6ICdQVicsXG4weDAwMzk6ICdGVicsXG4weDAwM0E6ICdOUEVSJyxcbjB4MDAzQjogJ1BNVCcsXG4weDAwM0M6ICdSQVRFJyxcbjB4MDAzRDogJ01JUlInLFxuMHgwMDNFOiAnSVJSJyxcbjB4MDAzRjogJ1JBTkQnLFxuMHgwMDQwOiAnTUFUQ0gnLFxuMHgwMDQxOiAnREFURScsXG4weDAwNDI6ICdUSU1FJyxcbjB4MDA0MzogJ0RBWScsXG4weDAwNDQ6ICdNT05USCcsXG4weDAwNDU6ICdZRUFSJyxcbjB4MDA0NjogJ1dFRUtEQVknLFxuMHgwMDQ3OiAnSE9VUicsXG4weDAwNDg6ICdNSU5VVEUnLFxuMHgwMDQ5OiAnU0VDT05EJyxcbjB4MDA0QTogJ05PVycsXG4weDAwNEI6ICdBUkVBUycsXG4weDAwNEM6ICdST1dTJyxcbjB4MDA0RDogJ0NPTFVNTlMnLFxuMHgwMDRFOiAnT0ZGU0VUJyxcbjB4MDA0RjogJ0FCU1JFRicsXG4weDAwNTA6ICdSRUxSRUYnLFxuMHgwMDUxOiAnQVJHVU1FTlQnLFxuMHgwMDUyOiAnU0VBUkNIJyxcbjB4MDA1MzogJ1RSQU5TUE9TRScsXG4weDAwNTQ6ICdFUlJPUicsXG4weDAwNTU6ICdTVEVQJyxcbjB4MDA1NjogJ1RZUEUnLFxuMHgwMDU3OiAnRUNITycsXG4weDAwNTg6ICdTRVQuTkFNRScsXG4weDAwNTk6ICdDQUxMRVInLFxuMHgwMDVBOiAnREVSRUYnLFxuMHgwMDVCOiAnV0lORE9XUycsXG4weDAwNUM6ICdTRVJJRVMnLFxuMHgwMDVEOiAnRE9DVU1FTlRTJyxcbjB4MDA1RTogJ0FDVElWRS5DRUxMJyxcbjB4MDA1RjogJ1NFTEVDVElPTicsXG4weDAwNjA6ICdSRVNVTFQnLFxuMHgwMDYxOiAnQVRBTjInLFxuMHgwMDYyOiAnQVNJTicsXG4weDAwNjM6ICdBQ09TJyxcbjB4MDA2NDogJ0NIT09TRScsXG4weDAwNjU6ICdITE9PS1VQJyxcbjB4MDA2NjogJ1ZMT09LVVAnLFxuMHgwMDY3OiAnTElOS1MnLFxuMHgwMDY4OiAnSU5QVVQnLFxuMHgwMDY5OiAnSVNSRUYnLFxuMHgwMDZBOiAnR0VULkZPUk1VTEEnLFxuMHgwMDZCOiAnR0VULk5BTUUnLFxuMHgwMDZDOiAnU0VULlZBTFVFJyxcbjB4MDA2RDogJ0xPRycsXG4weDAwNkU6ICdFWEVDJyxcbjB4MDA2RjogJ0NIQVInLFxuMHgwMDcwOiAnTE9XRVInLFxuMHgwMDcxOiAnVVBQRVInLFxuMHgwMDcyOiAnUFJPUEVSJyxcbjB4MDA3MzogJ0xFRlQnLFxuMHgwMDc0OiAnUklHSFQnLFxuMHgwMDc1OiAnRVhBQ1QnLFxuMHgwMDc2OiAnVFJJTScsXG4weDAwNzc6ICdSRVBMQUNFJyxcbjB4MDA3ODogJ1NVQlNUSVRVVEUnLFxuMHgwMDc5OiAnQ09ERScsXG4weDAwN0E6ICdOQU1FUycsXG4weDAwN0I6ICdESVJFQ1RPUlknLFxuMHgwMDdDOiAnRklORCcsXG4weDAwN0Q6ICdDRUxMJyxcbjB4MDA3RTogJ0lTRVJSJyxcbjB4MDA3RjogJ0lTVEVYVCcsXG4weDAwODA6ICdJU05VTUJFUicsXG4weDAwODE6ICdJU0JMQU5LJyxcbjB4MDA4MjogJ1QnLFxuMHgwMDgzOiAnTicsXG4weDAwODQ6ICdGT1BFTicsXG4weDAwODU6ICdGQ0xPU0UnLFxuMHgwMDg2OiAnRlNJWkUnLFxuMHgwMDg3OiAnRlJFQURMTicsXG4weDAwODg6ICdGUkVBRCcsXG4weDAwODk6ICdGV1JJVEVMTicsXG4weDAwOEE6ICdGV1JJVEUnLFxuMHgwMDhCOiAnRlBPUycsXG4weDAwOEM6ICdEQVRFVkFMVUUnLFxuMHgwMDhEOiAnVElNRVZBTFVFJyxcbjB4MDA4RTogJ1NMTicsXG4weDAwOEY6ICdTWUQnLFxuMHgwMDkwOiAnRERCJyxcbjB4MDA5MTogJ0dFVC5ERUYnLFxuMHgwMDkyOiAnUkVGVEVYVCcsXG4weDAwOTM6ICdURVhUUkVGJyxcbjB4MDA5NDogJ0lORElSRUNUJyxcbjB4MDA5NTogJ1JFR0lTVEVSJyxcbjB4MDA5NjogJ0NBTEwnLFxuMHgwMDk3OiAnQURELkJBUicsXG4weDAwOTg6ICdBREQuTUVOVScsXG4weDAwOTk6ICdBREQuQ09NTUFORCcsXG4weDAwOUE6ICdFTkFCTEUuQ09NTUFORCcsXG4weDAwOUI6ICdDSEVDSy5DT01NQU5EJyxcbjB4MDA5QzogJ1JFTkFNRS5DT01NQU5EJyxcbjB4MDA5RDogJ1NIT1cuQkFSJyxcbjB4MDA5RTogJ0RFTEVURS5NRU5VJyxcbjB4MDA5RjogJ0RFTEVURS5DT01NQU5EJyxcbjB4MDBBMDogJ0dFVC5DSEFSVC5JVEVNJyxcbjB4MDBBMTogJ0RJQUxPRy5CT1gnLFxuMHgwMEEyOiAnQ0xFQU4nLFxuMHgwMEEzOiAnTURFVEVSTScsXG4weDAwQTQ6ICdNSU5WRVJTRScsXG4weDAwQTU6ICdNTVVMVCcsXG4weDAwQTY6ICdGSUxFUycsXG4weDAwQTc6ICdJUE1UJyxcbjB4MDBBODogJ1BQTVQnLFxuMHgwMEE5OiAnQ09VTlRBJyxcbjB4MDBBQTogJ0NBTkNFTC5LRVknLFxuMHgwMEFCOiAnRk9SJyxcbjB4MDBBQzogJ1dISUxFJyxcbjB4MDBBRDogJ0JSRUFLJyxcbjB4MDBBRTogJ05FWFQnLFxuMHgwMEFGOiAnSU5JVElBVEUnLFxuMHgwMEIwOiAnUkVRVUVTVCcsXG4weDAwQjE6ICdQT0tFJyxcbjB4MDBCMjogJ0VYRUNVVEUnLFxuMHgwMEIzOiAnVEVSTUlOQVRFJyxcbjB4MDBCNDogJ1JFU1RBUlQnLFxuMHgwMEI1OiAnSEVMUCcsXG4weDAwQjY6ICdHRVQuQkFSJyxcbjB4MDBCNzogJ1BST0RVQ1QnLFxuMHgwMEI4OiAnRkFDVCcsXG4weDAwQjk6ICdHRVQuQ0VMTCcsXG4weDAwQkE6ICdHRVQuV09SS1NQQUNFJyxcbjB4MDBCQjogJ0dFVC5XSU5ET1cnLFxuMHgwMEJDOiAnR0VULkRPQ1VNRU5UJyxcbjB4MDBCRDogJ0RQUk9EVUNUJyxcbjB4MDBCRTogJ0lTTk9OVEVYVCcsXG4weDAwQkY6ICdHRVQuTk9URScsXG4weDAwQzA6ICdOT1RFJyxcbjB4MDBDMTogJ1NUREVWUCcsXG4weDAwQzI6ICdWQVJQJyxcbjB4MDBDMzogJ0RTVERFVlAnLFxuMHgwMEM0OiAnRFZBUlAnLFxuMHgwMEM1OiAnVFJVTkMnLFxuMHgwMEM2OiAnSVNMT0dJQ0FMJyxcbjB4MDBDNzogJ0RDT1VOVEEnLFxuMHgwMEM4OiAnREVMRVRFLkJBUicsXG4weDAwQzk6ICdVTlJFR0lTVEVSJyxcbjB4MDBDQzogJ1VTRE9MTEFSJyxcbjB4MDBDRDogJ0ZJTkRCJyxcbjB4MDBDRTogJ1NFQVJDSEInLFxuMHgwMENGOiAnUkVQTEFDRUInLFxuMHgwMEQwOiAnTEVGVEInLFxuMHgwMEQxOiAnUklHSFRCJyxcbjB4MDBEMjogJ01JREInLFxuMHgwMEQzOiAnTEVOQicsXG4weDAwRDQ6ICdST1VORFVQJyxcbjB4MDBENTogJ1JPVU5ERE9XTicsXG4weDAwRDY6ICdBU0MnLFxuMHgwMEQ3OiAnREJDUycsXG4weDAwRDg6ICdSQU5LJyxcbjB4MDBEQjogJ0FERFJFU1MnLFxuMHgwMERDOiAnREFZUzM2MCcsXG4weDAwREQ6ICdUT0RBWScsXG4weDAwREU6ICdWREInLFxuMHgwMERGOiAnRUxTRScsXG4weDAwRTA6ICdFTFNFLklGJyxcbjB4MDBFMTogJ0VORC5JRicsXG4weDAwRTI6ICdGT1IuQ0VMTCcsXG4weDAwRTM6ICdNRURJQU4nLFxuMHgwMEU0OiAnU1VNUFJPRFVDVCcsXG4weDAwRTU6ICdTSU5IJyxcbjB4MDBFNjogJ0NPU0gnLFxuMHgwMEU3OiAnVEFOSCcsXG4weDAwRTg6ICdBU0lOSCcsXG4weDAwRTk6ICdBQ09TSCcsXG4weDAwRUE6ICdBVEFOSCcsXG4weDAwRUI6ICdER0VUJyxcbjB4MDBFQzogJ0NSRUFURS5PQkpFQ1QnLFxuMHgwMEVEOiAnVk9MQVRJTEUnLFxuMHgwMEVFOiAnTEFTVC5FUlJPUicsXG4weDAwRUY6ICdDVVNUT00uVU5ETycsXG4weDAwRjA6ICdDVVNUT00uUkVQRUFUJyxcbjB4MDBGMTogJ0ZPUk1VTEEuQ09OVkVSVCcsXG4weDAwRjI6ICdHRVQuTElOSy5JTkZPJyxcbjB4MDBGMzogJ1RFWFQuQk9YJyxcbjB4MDBGNDogJ0lORk8nLFxuMHgwMEY1OiAnR1JPVVAnLFxuMHgwMEY2OiAnR0VULk9CSkVDVCcsXG4weDAwRjc6ICdEQicsXG4weDAwRjg6ICdQQVVTRScsXG4weDAwRkI6ICdSRVNVTUUnLFxuMHgwMEZDOiAnRlJFUVVFTkNZJyxcbjB4MDBGRDogJ0FERC5UT09MQkFSJyxcbjB4MDBGRTogJ0RFTEVURS5UT09MQkFSJyxcbjB4MDBGRjogJ1VzZXInLFxuMHgwMTAwOiAnUkVTRVQuVE9PTEJBUicsXG4weDAxMDE6ICdFVkFMVUFURScsXG4weDAxMDI6ICdHRVQuVE9PTEJBUicsXG4weDAxMDM6ICdHRVQuVE9PTCcsXG4weDAxMDQ6ICdTUEVMTElORy5DSEVDSycsXG4weDAxMDU6ICdFUlJPUi5UWVBFJyxcbjB4MDEwNjogJ0FQUC5USVRMRScsXG4weDAxMDc6ICdXSU5ET1cuVElUTEUnLFxuMHgwMTA4OiAnU0FWRS5UT09MQkFSJyxcbjB4MDEwOTogJ0VOQUJMRS5UT09MJyxcbjB4MDEwQTogJ1BSRVNTLlRPT0wnLFxuMHgwMTBCOiAnUkVHSVNURVIuSUQnLFxuMHgwMTBDOiAnR0VULldPUktCT09LJyxcbjB4MDEwRDogJ0FWRURFVicsXG4weDAxMEU6ICdCRVRBRElTVCcsXG4weDAxMEY6ICdHQU1NQUxOJyxcbjB4MDExMDogJ0JFVEFJTlYnLFxuMHgwMTExOiAnQklOT01ESVNUJyxcbjB4MDExMjogJ0NISURJU1QnLFxuMHgwMTEzOiAnQ0hJSU5WJyxcbjB4MDExNDogJ0NPTUJJTicsXG4weDAxMTU6ICdDT05GSURFTkNFJyxcbjB4MDExNjogJ0NSSVRCSU5PTScsXG4weDAxMTc6ICdFVkVOJyxcbjB4MDExODogJ0VYUE9ORElTVCcsXG4weDAxMTk6ICdGRElTVCcsXG4weDAxMUE6ICdGSU5WJyxcbjB4MDExQjogJ0ZJU0hFUicsXG4weDAxMUM6ICdGSVNIRVJJTlYnLFxuMHgwMTFEOiAnRkxPT1InLFxuMHgwMTFFOiAnR0FNTUFESVNUJyxcbjB4MDExRjogJ0dBTU1BSU5WJyxcbjB4MDEyMDogJ0NFSUxJTkcnLFxuMHgwMTIxOiAnSFlQR0VPTURJU1QnLFxuMHgwMTIyOiAnTE9HTk9STURJU1QnLFxuMHgwMTIzOiAnTE9HSU5WJyxcbjB4MDEyNDogJ05FR0JJTk9NRElTVCcsXG4weDAxMjU6ICdOT1JNRElTVCcsXG4weDAxMjY6ICdOT1JNU0RJU1QnLFxuMHgwMTI3OiAnTk9STUlOVicsXG4weDAxMjg6ICdOT1JNU0lOVicsXG4weDAxMjk6ICdTVEFOREFSRElaRScsXG4weDAxMkE6ICdPREQnLFxuMHgwMTJCOiAnUEVSTVVUJyxcbjB4MDEyQzogJ1BPSVNTT04nLFxuMHgwMTJEOiAnVERJU1QnLFxuMHgwMTJFOiAnV0VJQlVMTCcsXG4weDAxMkY6ICdTVU1YTVkyJyxcbjB4MDEzMDogJ1NVTVgyTVkyJyxcbjB4MDEzMTogJ1NVTVgyUFkyJyxcbjB4MDEzMjogJ0NISVRFU1QnLFxuMHgwMTMzOiAnQ09SUkVMJyxcbjB4MDEzNDogJ0NPVkFSJyxcbjB4MDEzNTogJ0ZPUkVDQVNUJyxcbjB4MDEzNjogJ0ZURVNUJyxcbjB4MDEzNzogJ0lOVEVSQ0VQVCcsXG4weDAxMzg6ICdQRUFSU09OJyxcbjB4MDEzOTogJ1JTUScsXG4weDAxM0E6ICdTVEVZWCcsXG4weDAxM0I6ICdTTE9QRScsXG4weDAxM0M6ICdUVEVTVCcsXG4weDAxM0Q6ICdQUk9CJyxcbjB4MDEzRTogJ0RFVlNRJyxcbjB4MDEzRjogJ0dFT01FQU4nLFxuMHgwMTQwOiAnSEFSTUVBTicsXG4weDAxNDE6ICdTVU1TUScsXG4weDAxNDI6ICdLVVJUJyxcbjB4MDE0MzogJ1NLRVcnLFxuMHgwMTQ0OiAnWlRFU1QnLFxuMHgwMTQ1OiAnTEFSR0UnLFxuMHgwMTQ2OiAnU01BTEwnLFxuMHgwMTQ3OiAnUVVBUlRJTEUnLFxuMHgwMTQ4OiAnUEVSQ0VOVElMRScsXG4weDAxNDk6ICdQRVJDRU5UUkFOSycsXG4weDAxNEE6ICdNT0RFJyxcbjB4MDE0QjogJ1RSSU1NRUFOJyxcbjB4MDE0QzogJ1RJTlYnLFxuMHgwMTRFOiAnTU9WSUUuQ09NTUFORCcsXG4weDAxNEY6ICdHRVQuTU9WSUUnLFxuMHgwMTUwOiAnQ09OQ0FURU5BVEUnLFxuMHgwMTUxOiAnUE9XRVInLFxuMHgwMTUyOiAnUElWT1QuQURELkRBVEEnLFxuMHgwMTUzOiAnR0VULlBJVk9ULlRBQkxFJyxcbjB4MDE1NDogJ0dFVC5QSVZPVC5GSUVMRCcsXG4weDAxNTU6ICdHRVQuUElWT1QuSVRFTScsXG4weDAxNTY6ICdSQURJQU5TJyxcbjB4MDE1NzogJ0RFR1JFRVMnLFxuMHgwMTU4OiAnU1VCVE9UQUwnLFxuMHgwMTU5OiAnU1VNSUYnLFxuMHgwMTVBOiAnQ09VTlRJRicsXG4weDAxNUI6ICdDT1VOVEJMQU5LJyxcbjB4MDE1QzogJ1NDRU5BUklPLkdFVCcsXG4weDAxNUQ6ICdPUFRJT05TLkxJU1RTLkdFVCcsXG4weDAxNUU6ICdJU1BNVCcsXG4weDAxNUY6ICdEQVRFRElGJyxcbjB4MDE2MDogJ0RBVEVTVFJJTkcnLFxuMHgwMTYxOiAnTlVNQkVSU1RSSU5HJyxcbjB4MDE2MjogJ1JPTUFOJyxcbjB4MDE2MzogJ09QRU4uRElBTE9HJyxcbjB4MDE2NDogJ1NBVkUuRElBTE9HJyxcbjB4MDE2NTogJ1ZJRVcuR0VUJyxcbjB4MDE2NjogJ0dFVFBJVk9UREFUQScsXG4weDAxNjc6ICdIWVBFUkxJTksnLFxuMHgwMTY4OiAnUEhPTkVUSUMnLFxuMHgwMTY5OiAnQVZFUkFHRUEnLFxuMHgwMTZBOiAnTUFYQScsXG4weDAxNkI6ICdNSU5BJyxcbjB4MDE2QzogJ1NUREVWUEEnLFxuMHgwMTZEOiAnVkFSUEEnLFxuMHgwMTZFOiAnU1RERVZBJyxcbjB4MDE2RjogJ1ZBUkEnLFxuMHgwMTcwOiAnQkFIVFRFWFQnLFxuMHgwMTcxOiAnVEhBSURBWU9GV0VFSycsXG4weDAxNzI6ICdUSEFJRElHSVQnLFxuMHgwMTczOiAnVEhBSU1PTlRIT0ZZRUFSJyxcbjB4MDE3NDogJ1RIQUlOVU1TT1VORCcsXG4weDAxNzU6ICdUSEFJTlVNU1RSSU5HJyxcbjB4MDE3NjogJ1RIQUlTVFJJTkdMRU5HVEgnLFxuMHgwMTc3OiAnSVNUSEFJRElHSVQnLFxuMHgwMTc4OiAnUk9VTkRCQUhURE9XTicsXG4weDAxNzk6ICdST1VOREJBSFRVUCcsXG4weDAxN0E6ICdUSEFJWUVBUicsXG4weDAxN0I6ICdSVEQnLFxuXG4weDAxN0M6ICdDVUJFVkFMVUUnLFxuMHgwMTdEOiAnQ1VCRU1FTUJFUicsXG4weDAxN0U6ICdDVUJFTUVNQkVSUFJPUEVSVFknLFxuMHgwMTdGOiAnQ1VCRVJBTktFRE1FTUJFUicsXG4weDAxODA6ICdIRVgyQklOJyxcbjB4MDE4MTogJ0hFWDJERUMnLFxuMHgwMTgyOiAnSEVYMk9DVCcsXG4weDAxODM6ICdERUMyQklOJyxcbjB4MDE4NDogJ0RFQzJIRVgnLFxuMHgwMTg1OiAnREVDMk9DVCcsXG4weDAxODY6ICdPQ1QyQklOJyxcbjB4MDE4NzogJ09DVDJIRVgnLFxuMHgwMTg4OiAnT0NUMkRFQycsXG4weDAxODk6ICdCSU4yREVDJyxcbjB4MDE4QTogJ0JJTjJPQ1QnLFxuMHgwMThCOiAnQklOMkhFWCcsXG4weDAxOEM6ICdJTVNVQicsXG4weDAxOEQ6ICdJTURJVicsXG4weDAxOEU6ICdJTVBPV0VSJyxcbjB4MDE4RjogJ0lNQUJTJyxcbjB4MDE5MDogJ0lNU1FSVCcsXG4weDAxOTE6ICdJTUxOJyxcbjB4MDE5MjogJ0lNTE9HMicsXG4weDAxOTM6ICdJTUxPRzEwJyxcbjB4MDE5NDogJ0lNU0lOJyxcbjB4MDE5NTogJ0lNQ09TJyxcbjB4MDE5NjogJ0lNRVhQJyxcbjB4MDE5NzogJ0lNQVJHVU1FTlQnLFxuMHgwMTk4OiAnSU1DT05KVUdBVEUnLFxuMHgwMTk5OiAnSU1BR0lOQVJZJyxcbjB4MDE5QTogJ0lNUkVBTCcsXG4weDAxOUI6ICdDT01QTEVYJyxcbjB4MDE5QzogJ0lNU1VNJyxcbjB4MDE5RDogJ0lNUFJPRFVDVCcsXG4weDAxOUU6ICdTRVJJRVNTVU0nLFxuMHgwMTlGOiAnRkFDVERPVUJMRScsXG4weDAxQTA6ICdTUVJUUEknLFxuMHgwMUExOiAnUVVPVElFTlQnLFxuMHgwMUEyOiAnREVMVEEnLFxuMHgwMUEzOiAnR0VTVEVQJyxcbjB4MDFBNDogJ0lTRVZFTicsXG4weDAxQTU6ICdJU09ERCcsXG4weDAxQTY6ICdNUk9VTkQnLFxuMHgwMUE3OiAnRVJGJyxcbjB4MDFBODogJ0VSRkMnLFxuMHgwMUE5OiAnQkVTU0VMSicsXG4weDAxQUE6ICdCRVNTRUxLJyxcbjB4MDFBQjogJ0JFU1NFTFknLFxuMHgwMUFDOiAnQkVTU0VMSScsXG4weDAxQUQ6ICdYSVJSJyxcbjB4MDFBRTogJ1hOUFYnLFxuMHgwMUFGOiAnUFJJQ0VNQVQnLFxuMHgwMUIwOiAnWUlFTERNQVQnLFxuMHgwMUIxOiAnSU5UUkFURScsXG4weDAxQjI6ICdSRUNFSVZFRCcsXG4weDAxQjM6ICdESVNDJyxcbjB4MDFCNDogJ1BSSUNFRElTQycsXG4weDAxQjU6ICdZSUVMRERJU0MnLFxuMHgwMUI2OiAnVEJJTExFUScsXG4weDAxQjc6ICdUQklMTFBSSUNFJyxcbjB4MDFCODogJ1RCSUxMWUlFTEQnLFxuMHgwMUI5OiAnUFJJQ0UnLFxuMHgwMUJBOiAnWUlFTEQnLFxuMHgwMUJCOiAnRE9MTEFSREUnLFxuMHgwMUJDOiAnRE9MTEFSRlInLFxuMHgwMUJEOiAnTk9NSU5BTCcsXG4weDAxQkU6ICdFRkZFQ1QnLFxuMHgwMUJGOiAnQ1VNUFJJTkMnLFxuMHgwMUMwOiAnQ1VNSVBNVCcsXG4weDAxQzE6ICdFREFURScsXG4weDAxQzI6ICdFT01PTlRIJyxcbjB4MDFDMzogJ1lFQVJGUkFDJyxcbjB4MDFDNDogJ0NPVVBEQVlCUycsXG4weDAxQzU6ICdDT1VQREFZUycsXG4weDAxQzY6ICdDT1VQREFZU05DJyxcbjB4MDFDNzogJ0NPVVBOQ0QnLFxuMHgwMUM4OiAnQ09VUE5VTScsXG4weDAxQzk6ICdDT1VQUENEJyxcbjB4MDFDQTogJ0RVUkFUSU9OJyxcbjB4MDFDQjogJ01EVVJBVElPTicsXG4weDAxQ0M6ICdPRERMUFJJQ0UnLFxuMHgwMUNEOiAnT0RETFlJRUxEJyxcbjB4MDFDRTogJ09EREZQUklDRScsXG4weDAxQ0Y6ICdPRERGWUlFTEQnLFxuMHgwMUQwOiAnUkFOREJFVFdFRU4nLFxuMHgwMUQxOiAnV0VFS05VTScsXG4weDAxRDI6ICdBTU9SREVHUkMnLFxuMHgwMUQzOiAnQU1PUkxJTkMnLFxuMHgwMUQ0OiAnQ09OVkVSVCcsXG4weDAyRDQ6ICdTSEVFVEpTJyxcbjB4MDFENTogJ0FDQ1JJTlQnLFxuMHgwMUQ2OiAnQUNDUklOVE0nLFxuMHgwMUQ3OiAnV09SS0RBWScsXG4weDAxRDg6ICdORVRXT1JLREFZUycsXG4weDAxRDk6ICdHQ0QnLFxuMHgwMURBOiAnTVVMVElOT01JQUwnLFxuMHgwMURCOiAnTENNJyxcbjB4MDFEQzogJ0ZWU0NIRURVTEUnLFxuMHgwMUREOiAnQ1VCRUtQSU1FTUJFUicsXG4weDAxREU6ICdDVUJFU0VUJyxcbjB4MDFERjogJ0NVQkVTRVRDT1VOVCcsXG4weDAxRTA6ICdJRkVSUk9SJyxcbjB4MDFFMTogJ0NPVU5USUZTJyxcbjB4MDFFMjogJ1NVTUlGUycsXG4weDAxRTM6ICdBVkVSQUdFSUYnLFxuMHgwMUU0OiAnQVZFUkFHRUlGUydcbn07XG52YXIgRnRhYkFyZ2MgPSB7XG4weDAwMDI6IDEsIC8qIElTTkEgKi9cbjB4MDAwMzogMSwgLyogSVNFUlJPUiAqL1xuMHgwMDBBOiAwLCAvKiBOQSAqL1xuMHgwMDBGOiAxLCAvKiBTSU4gKi9cbjB4MDAxMDogMSwgLyogQ09TICovXG4weDAwMTE6IDEsIC8qIFRBTiAqL1xuMHgwMDEyOiAxLCAvKiBBVEFOICovXG4weDAwMTM6IDAsIC8qIFBJICovXG4weDAwMTQ6IDEsIC8qIFNRUlQgKi9cbjB4MDAxNTogMSwgLyogRVhQICovXG4weDAwMTY6IDEsIC8qIExOICovXG4weDAwMTc6IDEsIC8qIExPRzEwICovXG4weDAwMTg6IDEsIC8qIEFCUyAqL1xuMHgwMDE5OiAxLCAvKiBJTlQgKi9cbjB4MDAxQTogMSwgLyogU0lHTiAqL1xuMHgwMDFCOiAyLCAvKiBST1VORCAqL1xuMHgwMDFFOiAyLCAvKiBSRVBUICovXG4weDAwMUY6IDMsIC8qIE1JRCAqL1xuMHgwMDIwOiAxLCAvKiBMRU4gKi9cbjB4MDAyMTogMSwgLyogVkFMVUUgKi9cbjB4MDAyMjogMCwgLyogVFJVRSAqL1xuMHgwMDIzOiAwLCAvKiBGQUxTRSAqL1xuMHgwMDI2OiAxLCAvKiBOT1QgKi9cbjB4MDAyNzogMiwgLyogTU9EICovXG4weDAwMjg6IDMsIC8qIERDT1VOVCAqL1xuMHgwMDI5OiAzLCAvKiBEU1VNICovXG4weDAwMkE6IDMsIC8qIERBVkVSQUdFICovXG4weDAwMkI6IDMsIC8qIERNSU4gKi9cbjB4MDAyQzogMywgLyogRE1BWCAqL1xuMHgwMDJEOiAzLCAvKiBEU1RERVYgKi9cbjB4MDAyRjogMywgLyogRFZBUiAqL1xuMHgwMDMwOiAyLCAvKiBURVhUICovXG4weDAwMzU6IDEsIC8qIEdPVE8gKi9cbjB4MDAzRDogMywgLyogTUlSUiAqL1xuMHgwMDNGOiAwLCAvKiBSQU5EICovXG4weDAwNDE6IDMsIC8qIERBVEUgKi9cbjB4MDA0MjogMywgLyogVElNRSAqL1xuMHgwMDQzOiAxLCAvKiBEQVkgKi9cbjB4MDA0NDogMSwgLyogTU9OVEggKi9cbjB4MDA0NTogMSwgLyogWUVBUiAqL1xuMHgwMDQ2OiAxLCAvKiBXRUVLREFZICovXG4weDAwNDc6IDEsIC8qIEhPVVIgKi9cbjB4MDA0ODogMSwgLyogTUlOVVRFICovXG4weDAwNDk6IDEsIC8qIFNFQ09ORCAqL1xuMHgwMDRBOiAwLCAvKiBOT1cgKi9cbjB4MDA0QjogMSwgLyogQVJFQVMgKi9cbjB4MDA0QzogMSwgLyogUk9XUyAqL1xuMHgwMDREOiAxLCAvKiBDT0xVTU5TICovXG4weDAwNEY6IDIsIC8qIEFCU1JFRiAqL1xuMHgwMDUwOiAyLCAvKiBSRUxSRUYgKi9cbjB4MDA1MzogMSwgLyogVFJBTlNQT1NFICovXG4weDAwNTU6IDAsIC8qIFNURVAgKi9cbjB4MDA1NjogMSwgLyogVFlQRSAqL1xuMHgwMDU5OiAwLCAvKiBDQUxMRVIgKi9cbjB4MDA1QTogMSwgLyogREVSRUYgKi9cbjB4MDA1RTogMCwgLyogQUNUSVZFLkNFTEwgKi9cbjB4MDA1RjogMCwgLyogU0VMRUNUSU9OICovXG4weDAwNjE6IDIsIC8qIEFUQU4yICovXG4weDAwNjI6IDEsIC8qIEFTSU4gKi9cbjB4MDA2MzogMSwgLyogQUNPUyAqL1xuMHgwMDY1OiAzLCAvKiBITE9PS1VQICovXG4weDAwNjY6IDMsIC8qIFZMT09LVVAgKi9cbjB4MDA2OTogMSwgLyogSVNSRUYgKi9cbjB4MDA2QTogMSwgLyogR0VULkZPUk1VTEEgKi9cbjB4MDA2QzogMiwgLyogU0VULlZBTFVFICovXG4weDAwNkY6IDEsIC8qIENIQVIgKi9cbjB4MDA3MDogMSwgLyogTE9XRVIgKi9cbjB4MDA3MTogMSwgLyogVVBQRVIgKi9cbjB4MDA3MjogMSwgLyogUFJPUEVSICovXG4weDAwNzU6IDIsIC8qIEVYQUNUICovXG4weDAwNzY6IDEsIC8qIFRSSU0gKi9cbjB4MDA3NzogNCwgLyogUkVQTEFDRSAqL1xuMHgwMDc5OiAxLCAvKiBDT0RFICovXG4weDAwN0U6IDEsIC8qIElTRVJSICovXG4weDAwN0Y6IDEsIC8qIElTVEVYVCAqL1xuMHgwMDgwOiAxLCAvKiBJU05VTUJFUiAqL1xuMHgwMDgxOiAxLCAvKiBJU0JMQU5LICovXG4weDAwODI6IDEsIC8qIFQgKi9cbjB4MDA4MzogMSwgLyogTiAqL1xuMHgwMDg1OiAxLCAvKiBGQ0xPU0UgKi9cbjB4MDA4NjogMSwgLyogRlNJWkUgKi9cbjB4MDA4NzogMSwgLyogRlJFQURMTiAqL1xuMHgwMDg4OiAyLCAvKiBGUkVBRCAqL1xuMHgwMDg5OiAyLCAvKiBGV1JJVEVMTiAqL1xuMHgwMDhBOiAyLCAvKiBGV1JJVEUgKi9cbjB4MDA4QzogMSwgLyogREFURVZBTFVFICovXG4weDAwOEQ6IDEsIC8qIFRJTUVWQUxVRSAqL1xuMHgwMDhFOiAzLCAvKiBTTE4gKi9cbjB4MDA4RjogNCwgLyogU1lEICovXG4weDAwOTA6IDQsIC8qIEREQiAqL1xuMHgwMEExOiAxLCAvKiBESUFMT0cuQk9YICovXG4weDAwQTI6IDEsIC8qIENMRUFOICovXG4weDAwQTM6IDEsIC8qIE1ERVRFUk0gKi9cbjB4MDBBNDogMSwgLyogTUlOVkVSU0UgKi9cbjB4MDBBNTogMiwgLyogTU1VTFQgKi9cbjB4MDBBQzogMSwgLyogV0hJTEUgKi9cbjB4MDBBRjogMiwgLyogSU5JVElBVEUgKi9cbjB4MDBCMDogMiwgLyogUkVRVUVTVCAqL1xuMHgwMEIxOiAzLCAvKiBQT0tFICovXG4weDAwQjI6IDIsIC8qIEVYRUNVVEUgKi9cbjB4MDBCMzogMSwgLyogVEVSTUlOQVRFICovXG4weDAwQjg6IDEsIC8qIEZBQ1QgKi9cbjB4MDBCQTogMSwgLyogR0VULldPUktTUEFDRSAqL1xuMHgwMEJEOiAzLCAvKiBEUFJPRFVDVCAqL1xuMHgwMEJFOiAxLCAvKiBJU05PTlRFWFQgKi9cbjB4MDBDMzogMywgLyogRFNUREVWUCAqL1xuMHgwMEM0OiAzLCAvKiBEVkFSUCAqL1xuMHgwMEM1OiAxLCAvKiBUUlVOQyAqL1xuMHgwMEM2OiAxLCAvKiBJU0xPR0lDQUwgKi9cbjB4MDBDNzogMywgLyogRENPVU5UQSAqL1xuMHgwMEM5OiAxLCAvKiBVTlJFR0lTVEVSICovXG4weDAwQ0Y6IDQsIC8qIFJFUExBQ0VCICovXG4weDAwRDI6IDMsIC8qIE1JREIgKi9cbjB4MDBEMzogMSwgLyogTEVOQiAqL1xuMHgwMEQ0OiAyLCAvKiBST1VORFVQICovXG4weDAwRDU6IDIsIC8qIFJPVU5ERE9XTiAqL1xuMHgwMEQ2OiAxLCAvKiBBU0MgKi9cbjB4MDBENzogMSwgLyogREJDUyAqL1xuMHgwMEUxOiAwLCAvKiBFTkQuSUYgKi9cbjB4MDBFNTogMSwgLyogU0lOSCAqL1xuMHgwMEU2OiAxLCAvKiBDT1NIICovXG4weDAwRTc6IDEsIC8qIFRBTkggKi9cbjB4MDBFODogMSwgLyogQVNJTkggKi9cbjB4MDBFOTogMSwgLyogQUNPU0ggKi9cbjB4MDBFQTogMSwgLyogQVRBTkggKi9cbjB4MDBFQjogMywgLyogREdFVCAqL1xuMHgwMEY0OiAxLCAvKiBJTkZPICovXG4weDAwRjc6IDQsIC8qIERCICovXG4weDAwRkM6IDIsIC8qIEZSRVFVRU5DWSAqL1xuMHgwMTAxOiAxLCAvKiBFVkFMVUFURSAqL1xuMHgwMTA1OiAxLCAvKiBFUlJPUi5UWVBFICovXG4weDAxMEY6IDEsIC8qIEdBTU1BTE4gKi9cbjB4MDExMTogNCwgLyogQklOT01ESVNUICovXG4weDAxMTI6IDIsIC8qIENISURJU1QgKi9cbjB4MDExMzogMiwgLyogQ0hJSU5WICovXG4weDAxMTQ6IDIsIC8qIENPTUJJTiAqL1xuMHgwMTE1OiAzLCAvKiBDT05GSURFTkNFICovXG4weDAxMTY6IDMsIC8qIENSSVRCSU5PTSAqL1xuMHgwMTE3OiAxLCAvKiBFVkVOICovXG4weDAxMTg6IDMsIC8qIEVYUE9ORElTVCAqL1xuMHgwMTE5OiAzLCAvKiBGRElTVCAqL1xuMHgwMTFBOiAzLCAvKiBGSU5WICovXG4weDAxMUI6IDEsIC8qIEZJU0hFUiAqL1xuMHgwMTFDOiAxLCAvKiBGSVNIRVJJTlYgKi9cbjB4MDExRDogMiwgLyogRkxPT1IgKi9cbjB4MDExRTogNCwgLyogR0FNTUFESVNUICovXG4weDAxMUY6IDMsIC8qIEdBTU1BSU5WICovXG4weDAxMjA6IDIsIC8qIENFSUxJTkcgKi9cbjB4MDEyMTogNCwgLyogSFlQR0VPTURJU1QgKi9cbjB4MDEyMjogMywgLyogTE9HTk9STURJU1QgKi9cbjB4MDEyMzogMywgLyogTE9HSU5WICovXG4weDAxMjQ6IDMsIC8qIE5FR0JJTk9NRElTVCAqL1xuMHgwMTI1OiA0LCAvKiBOT1JNRElTVCAqL1xuMHgwMTI2OiAxLCAvKiBOT1JNU0RJU1QgKi9cbjB4MDEyNzogMywgLyogTk9STUlOViAqL1xuMHgwMTI4OiAxLCAvKiBOT1JNU0lOViAqL1xuMHgwMTI5OiAzLCAvKiBTVEFOREFSRElaRSAqL1xuMHgwMTJBOiAxLCAvKiBPREQgKi9cbjB4MDEyQjogMiwgLyogUEVSTVVUICovXG4weDAxMkM6IDMsIC8qIFBPSVNTT04gKi9cbjB4MDEyRDogMywgLyogVERJU1QgKi9cbjB4MDEyRTogNCwgLyogV0VJQlVMTCAqL1xuMHgwMTJGOiAyLCAvKiBTVU1YTVkyICovXG4weDAxMzA6IDIsIC8qIFNVTVgyTVkyICovXG4weDAxMzE6IDIsIC8qIFNVTVgyUFkyICovXG4weDAxMzI6IDIsIC8qIENISVRFU1QgKi9cbjB4MDEzMzogMiwgLyogQ09SUkVMICovXG4weDAxMzQ6IDIsIC8qIENPVkFSICovXG4weDAxMzU6IDMsIC8qIEZPUkVDQVNUICovXG4weDAxMzY6IDIsIC8qIEZURVNUICovXG4weDAxMzc6IDIsIC8qIElOVEVSQ0VQVCAqL1xuMHgwMTM4OiAyLCAvKiBQRUFSU09OICovXG4weDAxMzk6IDIsIC8qIFJTUSAqL1xuMHgwMTNBOiAyLCAvKiBTVEVZWCAqL1xuMHgwMTNCOiAyLCAvKiBTTE9QRSAqL1xuMHgwMTNDOiA0LCAvKiBUVEVTVCAqL1xuMHgwMTQ1OiAyLCAvKiBMQVJHRSAqL1xuMHgwMTQ2OiAyLCAvKiBTTUFMTCAqL1xuMHgwMTQ3OiAyLCAvKiBRVUFSVElMRSAqL1xuMHgwMTQ4OiAyLCAvKiBQRVJDRU5USUxFICovXG4weDAxNEI6IDIsIC8qIFRSSU1NRUFOICovXG4weDAxNEM6IDIsIC8qIFRJTlYgKi9cbjB4MDE1MTogMiwgLyogUE9XRVIgKi9cbjB4MDE1NjogMSwgLyogUkFESUFOUyAqL1xuMHgwMTU3OiAxLCAvKiBERUdSRUVTICovXG4weDAxNUE6IDIsIC8qIENPVU5USUYgKi9cbjB4MDE1QjogMSwgLyogQ09VTlRCTEFOSyAqL1xuMHgwMTVFOiA0LCAvKiBJU1BNVCAqL1xuMHgwMTVGOiAzLCAvKiBEQVRFRElGICovXG4weDAxNjA6IDEsIC8qIERBVEVTVFJJTkcgKi9cbjB4MDE2MTogMiwgLyogTlVNQkVSU1RSSU5HICovXG4weDAxNjg6IDEsIC8qIFBIT05FVElDICovXG4weDAxNzA6IDEsIC8qIEJBSFRURVhUICovXG4weDAxNzE6IDEsIC8qIFRIQUlEQVlPRldFRUsgKi9cbjB4MDE3MjogMSwgLyogVEhBSURJR0lUICovXG4weDAxNzM6IDEsIC8qIFRIQUlNT05USE9GWUVBUiAqL1xuMHgwMTc0OiAxLCAvKiBUSEFJTlVNU09VTkQgKi9cbjB4MDE3NTogMSwgLyogVEhBSU5VTVNUUklORyAqL1xuMHgwMTc2OiAxLCAvKiBUSEFJU1RSSU5HTEVOR1RIICovXG4weDAxNzc6IDEsIC8qIElTVEhBSURJR0lUICovXG4weDAxNzg6IDEsIC8qIFJPVU5EQkFIVERPV04gKi9cbjB4MDE3OTogMSwgLyogUk9VTkRCQUhUVVAgKi9cbjB4MDE3QTogMSwgLyogVEhBSVlFQVIgKi9cbjB4MDE3RTogMywgLyogQ1VCRU1FTUJFUlBST1BFUlRZICovXG4weDAxODE6IDEsIC8qIEhFWDJERUMgKi9cbjB4MDE4ODogMSwgLyogT0NUMkRFQyAqL1xuMHgwMTg5OiAxLCAvKiBCSU4yREVDICovXG4weDAxOEM6IDIsIC8qIElNU1VCICovXG4weDAxOEQ6IDIsIC8qIElNRElWICovXG4weDAxOEU6IDIsIC8qIElNUE9XRVIgKi9cbjB4MDE4RjogMSwgLyogSU1BQlMgKi9cbjB4MDE5MDogMSwgLyogSU1TUVJUICovXG4weDAxOTE6IDEsIC8qIElNTE4gKi9cbjB4MDE5MjogMSwgLyogSU1MT0cyICovXG4weDAxOTM6IDEsIC8qIElNTE9HMTAgKi9cbjB4MDE5NDogMSwgLyogSU1TSU4gKi9cbjB4MDE5NTogMSwgLyogSU1DT1MgKi9cbjB4MDE5NjogMSwgLyogSU1FWFAgKi9cbjB4MDE5NzogMSwgLyogSU1BUkdVTUVOVCAqL1xuMHgwMTk4OiAxLCAvKiBJTUNPTkpVR0FURSAqL1xuMHgwMTk5OiAxLCAvKiBJTUFHSU5BUlkgKi9cbjB4MDE5QTogMSwgLyogSU1SRUFMICovXG4weDAxOUU6IDQsIC8qIFNFUklFU1NVTSAqL1xuMHgwMTlGOiAxLCAvKiBGQUNURE9VQkxFICovXG4weDAxQTA6IDEsIC8qIFNRUlRQSSAqL1xuMHgwMUExOiAyLCAvKiBRVU9USUVOVCAqL1xuMHgwMUE0OiAxLCAvKiBJU0VWRU4gKi9cbjB4MDFBNTogMSwgLyogSVNPREQgKi9cbjB4MDFBNjogMiwgLyogTVJPVU5EICovXG4weDAxQTg6IDEsIC8qIEVSRkMgKi9cbjB4MDFBOTogMiwgLyogQkVTU0VMSiAqL1xuMHgwMUFBOiAyLCAvKiBCRVNTRUxLICovXG4weDAxQUI6IDIsIC8qIEJFU1NFTFkgKi9cbjB4MDFBQzogMiwgLyogQkVTU0VMSSAqL1xuMHgwMUFFOiAzLCAvKiBYTlBWICovXG4weDAxQjY6IDMsIC8qIFRCSUxMRVEgKi9cbjB4MDFCNzogMywgLyogVEJJTExQUklDRSAqL1xuMHgwMUI4OiAzLCAvKiBUQklMTFlJRUxEICovXG4weDAxQkI6IDIsIC8qIERPTExBUkRFICovXG4weDAxQkM6IDIsIC8qIERPTExBUkZSICovXG4weDAxQkQ6IDIsIC8qIE5PTUlOQUwgKi9cbjB4MDFCRTogMiwgLyogRUZGRUNUICovXG4weDAxQkY6IDYsIC8qIENVTVBSSU5DICovXG4weDAxQzA6IDYsIC8qIENVTUlQTVQgKi9cbjB4MDFDMTogMiwgLyogRURBVEUgKi9cbjB4MDFDMjogMiwgLyogRU9NT05USCAqL1xuMHgwMUQwOiAyLCAvKiBSQU5EQkVUV0VFTiAqL1xuMHgwMUQ0OiAzLCAvKiBDT05WRVJUICovXG4weDAxREM6IDIsIC8qIEZWU0NIRURVTEUgKi9cbjB4MDFERjogMSwgLyogQ1VCRVNFVENPVU5UICovXG4weDAxRTA6IDIsIC8qIElGRVJST1IgKi9cbjB4RkZGRjogMFxufTtcbi8qIFtNUy1YTFNYXSAyLjIuMyBGdW5jdGlvbnMgKi9cbi8qIFtNUy1YTFNCXSAyLjUuOTcuMTAgRnRhYiAqL1xudmFyIFhMU1hGdXR1cmVGdW5jdGlvbnMgPSB7XG5cdFwiX3hsZm4uQUNPVFwiOiBcIkFDT1RcIixcblx0XCJfeGxmbi5BQ09USFwiOiBcIkFDT1RIXCIsXG5cdFwiX3hsZm4uQUdHUkVHQVRFXCI6IFwiQUdHUkVHQVRFXCIsXG5cdFwiX3hsZm4uQVJBQklDXCI6IFwiQVJBQklDXCIsXG5cdFwiX3hsZm4uQVZFUkFHRUlGXCI6IFwiQVZFUkFHRUlGXCIsXG5cdFwiX3hsZm4uQVZFUkFHRUlGU1wiOiBcIkFWRVJBR0VJRlNcIixcblx0XCJfeGxmbi5CQVNFXCI6IFwiQkFTRVwiLFxuXHRcIl94bGZuLkJFVEEuRElTVFwiOiBcIkJFVEEuRElTVFwiLFxuXHRcIl94bGZuLkJFVEEuSU5WXCI6IFwiQkVUQS5JTlZcIixcblx0XCJfeGxmbi5CSU5PTS5ESVNUXCI6IFwiQklOT00uRElTVFwiLFxuXHRcIl94bGZuLkJJTk9NLkRJU1QuUkFOR0VcIjogXCJCSU5PTS5ESVNULlJBTkdFXCIsXG5cdFwiX3hsZm4uQklOT00uSU5WXCI6IFwiQklOT00uSU5WXCIsXG5cdFwiX3hsZm4uQklUQU5EXCI6IFwiQklUQU5EXCIsXG5cdFwiX3hsZm4uQklUTFNISUZUXCI6IFwiQklUTFNISUZUXCIsXG5cdFwiX3hsZm4uQklUT1JcIjogXCJCSVRPUlwiLFxuXHRcIl94bGZuLkJJVFJTSElGVFwiOiBcIkJJVFJTSElGVFwiLFxuXHRcIl94bGZuLkJJVFhPUlwiOiBcIkJJVFhPUlwiLFxuXHRcIl94bGZuLkNFSUxJTkcuTUFUSFwiOiBcIkNFSUxJTkcuTUFUSFwiLFxuXHRcIl94bGZuLkNFSUxJTkcuUFJFQ0lTRVwiOiBcIkNFSUxJTkcuUFJFQ0lTRVwiLFxuXHRcIl94bGZuLkNISVNRLkRJU1RcIjogXCJDSElTUS5ESVNUXCIsXG5cdFwiX3hsZm4uQ0hJU1EuRElTVC5SVFwiOiBcIkNISVNRLkRJU1QuUlRcIixcblx0XCJfeGxmbi5DSElTUS5JTlZcIjogXCJDSElTUS5JTlZcIixcblx0XCJfeGxmbi5DSElTUS5JTlYuUlRcIjogXCJDSElTUS5JTlYuUlRcIixcblx0XCJfeGxmbi5DSElTUS5URVNUXCI6IFwiQ0hJU1EuVEVTVFwiLFxuXHRcIl94bGZuLkNPTUJJTkFcIjogXCJDT01CSU5BXCIsXG5cdFwiX3hsZm4uQ09OQ0FUXCI6IFwiQ09OQ0FUXCIsXG5cdFwiX3hsZm4uQ09ORklERU5DRS5OT1JNXCI6IFwiQ09ORklERU5DRS5OT1JNXCIsXG5cdFwiX3hsZm4uQ09ORklERU5DRS5UXCI6IFwiQ09ORklERU5DRS5UXCIsXG5cdFwiX3hsZm4uQ09UXCI6IFwiQ09UXCIsXG5cdFwiX3hsZm4uQ09USFwiOiBcIkNPVEhcIixcblx0XCJfeGxmbi5DT1VOVElGU1wiOiBcIkNPVU5USUZTXCIsXG5cdFwiX3hsZm4uQ09WQVJJQU5DRS5QXCI6IFwiQ09WQVJJQU5DRS5QXCIsXG5cdFwiX3hsZm4uQ09WQVJJQU5DRS5TXCI6IFwiQ09WQVJJQU5DRS5TXCIsXG5cdFwiX3hsZm4uQ1NDXCI6IFwiQ1NDXCIsXG5cdFwiX3hsZm4uQ1NDSFwiOiBcIkNTQ0hcIixcblx0XCJfeGxmbi5EQVlTXCI6IFwiREFZU1wiLFxuXHRcIl94bGZuLkRFQ0lNQUxcIjogXCJERUNJTUFMXCIsXG5cdFwiX3hsZm4uRUNNQS5DRUlMSU5HXCI6IFwiRUNNQS5DRUlMSU5HXCIsXG5cdFwiX3hsZm4uRVJGLlBSRUNJU0VcIjogXCJFUkYuUFJFQ0lTRVwiLFxuXHRcIl94bGZuLkVSRkMuUFJFQ0lTRVwiOiBcIkVSRkMuUFJFQ0lTRVwiLFxuXHRcIl94bGZuLkVYUE9OLkRJU1RcIjogXCJFWFBPTi5ESVNUXCIsXG5cdFwiX3hsZm4uRi5ESVNUXCI6IFwiRi5ESVNUXCIsXG5cdFwiX3hsZm4uRi5ESVNULlJUXCI6IFwiRi5ESVNULlJUXCIsXG5cdFwiX3hsZm4uRi5JTlZcIjogXCJGLklOVlwiLFxuXHRcIl94bGZuLkYuSU5WLlJUXCI6IFwiRi5JTlYuUlRcIixcblx0XCJfeGxmbi5GLlRFU1RcIjogXCJGLlRFU1RcIixcblx0XCJfeGxmbi5GSUxURVJYTUxcIjogXCJGSUxURVJYTUxcIixcblx0XCJfeGxmbi5GTE9PUi5NQVRIXCI6IFwiRkxPT1IuTUFUSFwiLFxuXHRcIl94bGZuLkZMT09SLlBSRUNJU0VcIjogXCJGTE9PUi5QUkVDSVNFXCIsXG5cdFwiX3hsZm4uRk9SRUNBU1QuRVRTXCI6IFwiRk9SRUNBU1QuRVRTXCIsXG5cdFwiX3hsZm4uRk9SRUNBU1QuRVRTLkNPTkZJTlRcIjogXCJGT1JFQ0FTVC5FVFMuQ09ORklOVFwiLFxuXHRcIl94bGZuLkZPUkVDQVNULkVUUy5TRUFTT05BTElUWVwiOiBcIkZPUkVDQVNULkVUUy5TRUFTT05BTElUWVwiLFxuXHRcIl94bGZuLkZPUkVDQVNULkVUUy5TVEFUXCI6IFwiRk9SRUNBU1QuRVRTLlNUQVRcIixcblx0XCJfeGxmbi5GT1JFQ0FTVC5MSU5FQVJcIjogXCJGT1JFQ0FTVC5MSU5FQVJcIixcblx0XCJfeGxmbi5GT1JNVUxBVEVYVFwiOiBcIkZPUk1VTEFURVhUXCIsXG5cdFwiX3hsZm4uR0FNTUFcIjogXCJHQU1NQVwiLFxuXHRcIl94bGZuLkdBTU1BLkRJU1RcIjogXCJHQU1NQS5ESVNUXCIsXG5cdFwiX3hsZm4uR0FNTUEuSU5WXCI6IFwiR0FNTUEuSU5WXCIsXG5cdFwiX3hsZm4uR0FNTUFMTi5QUkVDSVNFXCI6IFwiR0FNTUFMTi5QUkVDSVNFXCIsXG5cdFwiX3hsZm4uR0FVU1NcIjogXCJHQVVTU1wiLFxuXHRcIl94bGZuLkhZUEdFT00uRElTVFwiOiBcIkhZUEdFT00uRElTVFwiLFxuXHRcIl94bGZuLklGRVJST1JcIjogXCJJRkVSUk9SXCIsXG5cdFwiX3hsZm4uSUZOQVwiOiBcIklGTkFcIixcblx0XCJfeGxmbi5JRlNcIjogXCJJRlNcIixcblx0XCJfeGxmbi5JTUNPU0hcIjogXCJJTUNPU0hcIixcblx0XCJfeGxmbi5JTUNPVFwiOiBcIklNQ09UXCIsXG5cdFwiX3hsZm4uSU1DU0NcIjogXCJJTUNTQ1wiLFxuXHRcIl94bGZuLklNQ1NDSFwiOiBcIklNQ1NDSFwiLFxuXHRcIl94bGZuLklNU0VDXCI6IFwiSU1TRUNcIixcblx0XCJfeGxmbi5JTVNFQ0hcIjogXCJJTVNFQ0hcIixcblx0XCJfeGxmbi5JTVNJTkhcIjogXCJJTVNJTkhcIixcblx0XCJfeGxmbi5JTVRBTlwiOiBcIklNVEFOXCIsXG5cdFwiX3hsZm4uSVNGT1JNVUxBXCI6IFwiSVNGT1JNVUxBXCIsXG5cdFwiX3hsZm4uSVNPLkNFSUxJTkdcIjogXCJJU08uQ0VJTElOR1wiLFxuXHRcIl94bGZuLklTT1dFRUtOVU1cIjogXCJJU09XRUVLTlVNXCIsXG5cdFwiX3hsZm4uTE9HTk9STS5ESVNUXCI6IFwiTE9HTk9STS5ESVNUXCIsXG5cdFwiX3hsZm4uTE9HTk9STS5JTlZcIjogXCJMT0dOT1JNLklOVlwiLFxuXHRcIl94bGZuLk1BWElGU1wiOiBcIk1BWElGU1wiLFxuXHRcIl94bGZuLk1JTklGU1wiOiBcIk1JTklGU1wiLFxuXHRcIl94bGZuLk1PREUuTVVMVFwiOiBcIk1PREUuTVVMVFwiLFxuXHRcIl94bGZuLk1PREUuU05HTFwiOiBcIk1PREUuU05HTFwiLFxuXHRcIl94bGZuLk1VTklUXCI6IFwiTVVOSVRcIixcblx0XCJfeGxmbi5ORUdCSU5PTS5ESVNUXCI6IFwiTkVHQklOT00uRElTVFwiLFxuXHRcIl94bGZuLk5FVFdPUktEQVlTLklOVExcIjogXCJORVRXT1JLREFZUy5JTlRMXCIsXG5cdFwiX3hsZm4uTklHQklOT01cIjogXCJOSUdCSU5PTVwiLFxuXHRcIl94bGZuLk5PUk0uRElTVFwiOiBcIk5PUk0uRElTVFwiLFxuXHRcIl94bGZuLk5PUk0uSU5WXCI6IFwiTk9STS5JTlZcIixcblx0XCJfeGxmbi5OT1JNLlMuRElTVFwiOiBcIk5PUk0uUy5ESVNUXCIsXG5cdFwiX3hsZm4uTk9STS5TLklOVlwiOiBcIk5PUk0uUy5JTlZcIixcblx0XCJfeGxmbi5OVU1CRVJWQUxVRVwiOiBcIk5VTUJFUlZBTFVFXCIsXG5cdFwiX3hsZm4uUERVUkFUSU9OXCI6IFwiUERVUkFUSU9OXCIsXG5cdFwiX3hsZm4uUEVSQ0VOVElMRS5FWENcIjogXCJQRVJDRU5USUxFLkVYQ1wiLFxuXHRcIl94bGZuLlBFUkNFTlRJTEUuSU5DXCI6IFwiUEVSQ0VOVElMRS5JTkNcIixcblx0XCJfeGxmbi5QRVJDRU5UUkFOSy5FWENcIjogXCJQRVJDRU5UUkFOSy5FWENcIixcblx0XCJfeGxmbi5QRVJDRU5UUkFOSy5JTkNcIjogXCJQRVJDRU5UUkFOSy5JTkNcIixcblx0XCJfeGxmbi5QRVJNVVRBVElPTkFcIjogXCJQRVJNVVRBVElPTkFcIixcblx0XCJfeGxmbi5QSElcIjogXCJQSElcIixcblx0XCJfeGxmbi5QT0lTU09OLkRJU1RcIjogXCJQT0lTU09OLkRJU1RcIixcblx0XCJfeGxmbi5RVUFSVElMRS5FWENcIjogXCJRVUFSVElMRS5FWENcIixcblx0XCJfeGxmbi5RVUFSVElMRS5JTkNcIjogXCJRVUFSVElMRS5JTkNcIixcblx0XCJfeGxmbi5RVUVSWVNUUklOR1wiOiBcIlFVRVJZU1RSSU5HXCIsXG5cdFwiX3hsZm4uUkFOSy5BVkdcIjogXCJSQU5LLkFWR1wiLFxuXHRcIl94bGZuLlJBTksuRVFcIjogXCJSQU5LLkVRXCIsXG5cdFwiX3hsZm4uUlJJXCI6IFwiUlJJXCIsXG5cdFwiX3hsZm4uU0VDXCI6IFwiU0VDXCIsXG5cdFwiX3hsZm4uU0VDSFwiOiBcIlNFQ0hcIixcblx0XCJfeGxmbi5TSEVFVFwiOiBcIlNIRUVUXCIsXG5cdFwiX3hsZm4uU0hFRVRTXCI6IFwiU0hFRVRTXCIsXG5cdFwiX3hsZm4uU0tFVy5QXCI6IFwiU0tFVy5QXCIsXG5cdFwiX3hsZm4uU1RERVYuUFwiOiBcIlNUREVWLlBcIixcblx0XCJfeGxmbi5TVERFVi5TXCI6IFwiU1RERVYuU1wiLFxuXHRcIl94bGZuLlNVTUlGU1wiOiBcIlNVTUlGU1wiLFxuXHRcIl94bGZuLlNXSVRDSFwiOiBcIlNXSVRDSFwiLFxuXHRcIl94bGZuLlQuRElTVFwiOiBcIlQuRElTVFwiLFxuXHRcIl94bGZuLlQuRElTVC4yVFwiOiBcIlQuRElTVC4yVFwiLFxuXHRcIl94bGZuLlQuRElTVC5SVFwiOiBcIlQuRElTVC5SVFwiLFxuXHRcIl94bGZuLlQuSU5WXCI6IFwiVC5JTlZcIixcblx0XCJfeGxmbi5ULklOVi4yVFwiOiBcIlQuSU5WLjJUXCIsXG5cdFwiX3hsZm4uVC5URVNUXCI6IFwiVC5URVNUXCIsXG5cdFwiX3hsZm4uVEVYVEpPSU5cIjogXCJURVhUSk9JTlwiLFxuXHRcIl94bGZuLlVOSUNIQVJcIjogXCJVTklDSEFSXCIsXG5cdFwiX3hsZm4uVU5JQ09ERVwiOiBcIlVOSUNPREVcIixcblx0XCJfeGxmbi5WQVIuUFwiOiBcIlZBUi5QXCIsXG5cdFwiX3hsZm4uVkFSLlNcIjogXCJWQVIuU1wiLFxuXHRcIl94bGZuLldFQlNFUlZJQ0VcIjogXCJXRUJTRVJWSUNFXCIsXG5cdFwiX3hsZm4uV0VJQlVMTC5ESVNUXCI6IFwiV0VJQlVMTC5ESVNUXCIsXG5cdFwiX3hsZm4uV09SS0RBWS5JTlRMXCI6IFwiV09SS0RBWS5JTlRMXCIsXG5cdFwiX3hsZm4uWE9SXCI6IFwiWE9SXCIsXG5cdFwiX3hsZm4uWi5URVNUXCI6IFwiWi5URVNUXCJcbn07XG5cbi8qIFBhcnQgMyBUT0RPOiBhY3R1YWxseSBwYXJzZSBmb3JtdWxhZSAqL1xuZnVuY3Rpb24gb2RzX3RvX2NzZl9mb3JtdWxhKGYpIHtcblx0aWYoZi5zbGljZSgwLDMpID09IFwib2Y6XCIpIGYgPSBmLnNsaWNlKDMpO1xuXHQvKiA1LjIgQmFzaWMgRXhwcmVzc2lvbnMgKi9cblx0aWYoZi5jaGFyQ29kZUF0KDApID09IDYxKSB7XG5cdFx0ZiA9IGYuc2xpY2UoMSk7XG5cdFx0aWYoZi5jaGFyQ29kZUF0KDApID09IDYxKSBmID0gZi5zbGljZSgxKTtcblx0fVxuXHRmID0gZi5yZXBsYWNlKC9DT01cXC5NSUNST1NPRlRcXC4vZywgXCJcIik7XG5cdC8qIFBhcnQgMyBTZWN0aW9uIDUuOCBSZWZlcmVuY2VzICovXG5cdGYgPSBmLnJlcGxhY2UoL1xcWygoPzpcXC5bQS1aXStbMC05XSspKD86OlxcLltBLVpdK1swLTldKyk/KVxcXS9nLCBmdW5jdGlvbigkJCwgJDEpIHsgcmV0dXJuICQxLnJlcGxhY2UoL1xcLi9nLFwiXCIpOyB9KTtcblx0LyogVE9ETzogc29tZXRoaW5nIG90aGVyIHRoYW4gdGhpcyAqL1xuXHRmID0gZi5yZXBsYWNlKC9cXFsuKCNbQS1aXSpbPyFdKVxcXS9nLCBcIiQxXCIpO1xuXHRyZXR1cm4gZi5yZXBsYWNlKC9bO35dL2csXCIsXCIpLnJlcGxhY2UoL1xcfC9nLFwiO1wiKTtcbn1cblxuZnVuY3Rpb24gY3NmX3RvX29kc19mb3JtdWxhKGYpIHtcblx0dmFyIG8gPSBcIm9mOj1cIiArIGYucmVwbGFjZShjcmVmcmVnZXgsIFwiJDFbLiQyJDMkNCQ1XVwiKS5yZXBsYWNlKC9cXF06XFxbL2csXCI6XCIpO1xuXHQvKiBUT0RPOiBzb21ldGhpbmcgb3RoZXIgdGhhbiB0aGlzICovXG5cdHJldHVybiBvLnJlcGxhY2UoLzsvZywgXCJ8XCIpLnJlcGxhY2UoLywvZyxcIjtcIik7XG59XG5cbmZ1bmN0aW9uIG9kc190b19jc2ZfM0Qocikge1xuXHR2YXIgYSA9IHIuc3BsaXQoXCI6XCIpO1xuXHR2YXIgcyA9IGFbMF0uc3BsaXQoXCIuXCIpWzBdO1xuXHRyZXR1cm4gW3MsIGFbMF0uc3BsaXQoXCIuXCIpWzFdICsgKGEubGVuZ3RoID4gMSA/IChcIjpcIiArIChhWzFdLnNwbGl0KFwiLlwiKVsxXSB8fCBhWzFdLnNwbGl0KFwiLlwiKVswXSkpIDogXCJcIildO1xufVxuXG5mdW5jdGlvbiBjc2ZfdG9fb2RzXzNEKHIpIHtcblx0cmV0dXJuIHIucmVwbGFjZSgvXFwuLyxcIiFcIik7XG59XG5cbnZhciBzdHJzID0ge307IC8vIHNoYXJlZCBzdHJpbmdzXG52YXIgX3NzZm9wdHMgPSB7fTsgLy8gc3ByZWFkc2hlZXQgZm9ybWF0dGluZyBvcHRpb25zXG5cblJFTFMuV1MgPSBbXG5cdFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy93b3Jrc2hlZXRcIixcblx0XCJodHRwOi8vcHVybC5vY2xjLm9yZy9vb3htbC9vZmZpY2VEb2N1bWVudC9yZWxhdGlvbnNoaXBzL3dvcmtzaGVldFwiXG5dO1xuXG4vKmdsb2JhbCBNYXAgKi9cbnZhciBicm93c2VyX2hhc19NYXAgPSB0eXBlb2YgTWFwICE9PSAndW5kZWZpbmVkJztcblxuZnVuY3Rpb24gZ2V0X3NzdF9pZChzc3QsIHN0ciwgcmV2KSB7XG5cdHZhciBpID0gMCwgbGVuID0gc3N0Lmxlbmd0aDtcblx0aWYocmV2KSB7XG5cdFx0aWYoYnJvd3Nlcl9oYXNfTWFwID8gcmV2LmhhcyhzdHIpIDogT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJldiwgc3RyKSkge1xuXHRcdFx0dmFyIHJldmFyciA9IGJyb3dzZXJfaGFzX01hcCA/IHJldi5nZXQoc3RyKSA6IHJldltzdHJdO1xuXHRcdFx0Zm9yKDsgaSA8IHJldmFyci5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRpZihzc3RbcmV2YXJyW2ldXS50ID09PSBzdHIpIHsgc3N0LkNvdW50ICsrOyByZXR1cm4gcmV2YXJyW2ldOyB9XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgZm9yKDsgaSA8IGxlbjsgKytpKSB7XG5cdFx0aWYoc3N0W2ldLnQgPT09IHN0cikgeyBzc3QuQ291bnQgKys7IHJldHVybiBpOyB9XG5cdH1cblx0c3N0W2xlbl0gPSAoe3Q6c3RyfSk7IHNzdC5Db3VudCArKzsgc3N0LlVuaXF1ZSArKztcblx0aWYocmV2KSB7XG5cdFx0aWYoYnJvd3Nlcl9oYXNfTWFwKSB7XG5cdFx0XHRpZighcmV2LmhhcyhzdHIpKSByZXYuc2V0KHN0ciwgW10pO1xuXHRcdFx0cmV2LmdldChzdHIpLnB1c2gobGVuKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZXYsIHN0cikpIHJldltzdHJdID0gW107XG5cdFx0XHRyZXZbc3RyXS5wdXNoKGxlbik7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBsZW47XG59XG5cbmZ1bmN0aW9uIGNvbF9vYmpfdyhDLCBjb2wpIHtcblx0dmFyIHAgPSAoe21pbjpDKzEsbWF4OkMrMX0pO1xuXHQvKiB3Y2ggKGNoYXJzKSwgd3B4IChwaXhlbHMpICovXG5cdHZhciB3Y2ggPSAtMTtcblx0aWYoY29sLk1EVykgTURXID0gY29sLk1EVztcblx0aWYoY29sLndpZHRoICE9IG51bGwpIHAuY3VzdG9tV2lkdGggPSAxO1xuXHRlbHNlIGlmKGNvbC53cHggIT0gbnVsbCkgd2NoID0gcHgyY2hhcihjb2wud3B4KTtcblx0ZWxzZSBpZihjb2wud2NoICE9IG51bGwpIHdjaCA9IGNvbC53Y2g7XG5cdGlmKHdjaCA+IC0xKSB7IHAud2lkdGggPSBjaGFyMndpZHRoKHdjaCk7IHAuY3VzdG9tV2lkdGggPSAxOyB9XG5cdGVsc2UgaWYoY29sLndpZHRoICE9IG51bGwpIHAud2lkdGggPSBjb2wud2lkdGg7XG5cdGlmKGNvbC5oaWRkZW4pIHAuaGlkZGVuID0gdHJ1ZTtcblx0aWYoY29sLmxldmVsICE9IG51bGwpIHsgcC5vdXRsaW5lTGV2ZWwgPSBwLmxldmVsID0gY29sLmxldmVsOyB9XG5cdHJldHVybiBwO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0X21hcmdpbnMobWFyZ2lucywgbW9kZSkge1xuXHRpZighbWFyZ2lucykgcmV0dXJuO1xuXHR2YXIgZGVmcyA9IFswLjcsIDAuNywgMC43NSwgMC43NSwgMC4zLCAwLjNdO1xuXHRpZihtb2RlID09ICd4bG1sJykgZGVmcyA9IFsxLCAxLCAxLCAxLCAwLjUsIDAuNV07XG5cdGlmKG1hcmdpbnMubGVmdCAgID09IG51bGwpIG1hcmdpbnMubGVmdCAgID0gZGVmc1swXTtcblx0aWYobWFyZ2lucy5yaWdodCAgPT0gbnVsbCkgbWFyZ2lucy5yaWdodCAgPSBkZWZzWzFdO1xuXHRpZihtYXJnaW5zLnRvcCAgICA9PSBudWxsKSBtYXJnaW5zLnRvcCAgICA9IGRlZnNbMl07XG5cdGlmKG1hcmdpbnMuYm90dG9tID09IG51bGwpIG1hcmdpbnMuYm90dG9tID0gZGVmc1szXTtcblx0aWYobWFyZ2lucy5oZWFkZXIgPT0gbnVsbCkgbWFyZ2lucy5oZWFkZXIgPSBkZWZzWzRdO1xuXHRpZihtYXJnaW5zLmZvb3RlciA9PSBudWxsKSBtYXJnaW5zLmZvb3RlciA9IGRlZnNbNV07XG59XG5cbmZ1bmN0aW9uIGdldF9jZWxsX3N0eWxlKHN0eWxlcywgY2VsbCwgb3B0cykge1xuXHR2YXIgeiA9IG9wdHMucmV2c3NmW2NlbGwueiAhPSBudWxsID8gY2VsbC56IDogXCJHZW5lcmFsXCJdO1xuXHR2YXIgaSA9IDB4M2MsIGxlbiA9IHN0eWxlcy5sZW5ndGg7XG5cdGlmKHogPT0gbnVsbCAmJiBvcHRzLnNzZikge1xuXHRcdGZvcig7IGkgPCAweDE4ODsgKytpKSBpZihvcHRzLnNzZltpXSA9PSBudWxsKSB7XG5cdFx0XHRTU0YubG9hZChjZWxsLnosIGkpO1xuXHRcdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRcdG9wdHMuc3NmW2ldID0gY2VsbC56O1xuXHRcdFx0b3B0cy5yZXZzc2ZbY2VsbC56XSA9IHogPSBpO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cdGZvcihpID0gMDsgaSAhPSBsZW47ICsraSkgaWYoc3R5bGVzW2ldLm51bUZtdElkID09PSB6KSByZXR1cm4gaTtcblx0c3R5bGVzW2xlbl0gPSB7XG5cdFx0bnVtRm10SWQ6eixcblx0XHRmb250SWQ6MCxcblx0XHRmaWxsSWQ6MCxcblx0XHRib3JkZXJJZDowLFxuXHRcdHhmSWQ6MCxcblx0XHRhcHBseU51bWJlckZvcm1hdDoxXG5cdH07XG5cdHJldHVybiBsZW47XG59XG5cbmZ1bmN0aW9uIHNhZmVfZm9ybWF0KHAsIGZtdGlkLCBmaWxsaWQsIG9wdHMsIHRoZW1lcywgc3R5bGVzKSB7XG5cdHRyeSB7XG5cdFx0aWYob3B0cy5jZWxsTkYpIHAueiA9IFNTRi5fdGFibGVbZm10aWRdO1xuXHR9IGNhdGNoKGUpIHsgaWYob3B0cy5XVEYpIHRocm93IGU7IH1cblx0aWYocC50ID09PSAneicgJiYgIW9wdHMuY2VsbFN0eWxlcykgcmV0dXJuO1xuXHRpZihwLnQgPT09ICdkJyAmJiB0eXBlb2YgcC52ID09PSAnc3RyaW5nJykgcC52ID0gcGFyc2VEYXRlKHAudik7XG5cdGlmKCghb3B0cyB8fCBvcHRzLmNlbGxUZXh0ICE9PSBmYWxzZSkgJiYgcC50ICE9PSAneicpIHRyeSB7XG5cdFx0aWYoU1NGLl90YWJsZVtmbXRpZF0gPT0gbnVsbCkgU1NGLmxvYWQoU1NGSW1wbGljaXRbZm10aWRdIHx8IFwiR2VuZXJhbFwiLCBmbXRpZCk7XG5cdFx0aWYocC50ID09PSAnZScpIHAudyA9IHAudyB8fCBCRXJyW3Audl07XG5cdFx0ZWxzZSBpZihmbXRpZCA9PT0gMCkge1xuXHRcdFx0aWYocC50ID09PSAnbicpIHtcblx0XHRcdFx0aWYoKHAudnwwKSA9PT0gcC52KSBwLncgPSBTU0YuX2dlbmVyYWxfaW50KHAudik7XG5cdFx0XHRcdGVsc2UgcC53ID0gU1NGLl9nZW5lcmFsX251bShwLnYpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZihwLnQgPT09ICdkJykge1xuXHRcdFx0XHR2YXIgZGQgPSBkYXRlbnVtKHAudik7XG5cdFx0XHRcdGlmKChkZHwwKSA9PT0gZGQpIHAudyA9IFNTRi5fZ2VuZXJhbF9pbnQoZGQpO1xuXHRcdFx0XHRlbHNlIHAudyA9IFNTRi5fZ2VuZXJhbF9udW0oZGQpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZihwLnYgPT09IHVuZGVmaW5lZCkgcmV0dXJuIFwiXCI7XG5cdFx0XHRlbHNlIHAudyA9IFNTRi5fZ2VuZXJhbChwLnYsX3NzZm9wdHMpO1xuXHRcdH1cblx0XHRlbHNlIGlmKHAudCA9PT0gJ2QnKSBwLncgPSBTU0YuZm9ybWF0KGZtdGlkLGRhdGVudW0ocC52KSxfc3Nmb3B0cyk7XG5cdFx0ZWxzZSBwLncgPSBTU0YuZm9ybWF0KGZtdGlkLHAudixfc3Nmb3B0cyk7XG5cdH0gY2F0Y2goZSkgeyBpZihvcHRzLldURikgdGhyb3cgZTsgfVxuXHRpZighb3B0cy5jZWxsU3R5bGVzKSByZXR1cm47XG5cdGlmKGZpbGxpZCAhPSBudWxsKSB0cnkge1xuXHRcdHAucyA9IHN0eWxlcy5GaWxsc1tmaWxsaWRdO1xuXHRcdGlmIChwLnMuZmdDb2xvciAmJiBwLnMuZmdDb2xvci50aGVtZSAmJiAhcC5zLmZnQ29sb3IucmdiKSB7XG5cdFx0XHRwLnMuZmdDb2xvci5yZ2IgPSByZ2JfdGludCh0aGVtZXMudGhlbWVFbGVtZW50cy5jbHJTY2hlbWVbcC5zLmZnQ29sb3IudGhlbWVdLnJnYiwgcC5zLmZnQ29sb3IudGludCB8fCAwKTtcblx0XHRcdGlmKG9wdHMuV1RGKSBwLnMuZmdDb2xvci5yYXdfcmdiID0gdGhlbWVzLnRoZW1lRWxlbWVudHMuY2xyU2NoZW1lW3Aucy5mZ0NvbG9yLnRoZW1lXS5yZ2I7XG5cdFx0fVxuXHRcdGlmIChwLnMuYmdDb2xvciAmJiBwLnMuYmdDb2xvci50aGVtZSkge1xuXHRcdFx0cC5zLmJnQ29sb3IucmdiID0gcmdiX3RpbnQodGhlbWVzLnRoZW1lRWxlbWVudHMuY2xyU2NoZW1lW3Aucy5iZ0NvbG9yLnRoZW1lXS5yZ2IsIHAucy5iZ0NvbG9yLnRpbnQgfHwgMCk7XG5cdFx0XHRpZihvcHRzLldURikgcC5zLmJnQ29sb3IucmF3X3JnYiA9IHRoZW1lcy50aGVtZUVsZW1lbnRzLmNsclNjaGVtZVtwLnMuYmdDb2xvci50aGVtZV0ucmdiO1xuXHRcdH1cblx0fSBjYXRjaChlKSB7IGlmKG9wdHMuV1RGICYmIHN0eWxlcy5GaWxscykgdGhyb3cgZTsgfVxufVxuXG5mdW5jdGlvbiBjaGVja193cyh3cywgc25hbWUsIGkpIHtcblx0aWYod3MgJiYgd3NbJyFyZWYnXSkge1xuXHRcdHZhciByYW5nZSA9IHNhZmVfZGVjb2RlX3JhbmdlKHdzWychcmVmJ10pO1xuXHRcdGlmKHJhbmdlLmUuYyA8IHJhbmdlLnMuYyB8fCByYW5nZS5lLnIgPCByYW5nZS5zLnIpIHRocm93IG5ldyBFcnJvcihcIkJhZCByYW5nZSAoXCIgKyBpICsgXCIpOiBcIiArIHdzWychcmVmJ10pO1xuXHR9XG59XG5mdW5jdGlvbiBwYXJzZV93c194bWxfZGltKHdzLCBzKSB7XG5cdHZhciBkID0gc2FmZV9kZWNvZGVfcmFuZ2Uocyk7XG5cdGlmKGQucy5yPD1kLmUuciAmJiBkLnMuYzw9ZC5lLmMgJiYgZC5zLnI+PTAgJiYgZC5zLmM+PTApIHdzW1wiIXJlZlwiXSA9IGVuY29kZV9yYW5nZShkKTtcbn1cbnZhciBtZXJnZWNyZWdleCA9IC88KD86XFx3Oik/bWVyZ2VDZWxsIHJlZj1cIltBLVowLTk6XStcIlxccypbXFwvXT8+L2c7XG52YXIgc2hlZXRkYXRhcmVnZXggPSAvPCg/Olxcdys6KT9zaGVldERhdGFbXj5dKj4oW1xcc1xcU10qKTxcXC8oPzpcXHcrOik/c2hlZXREYXRhPi87XG52YXIgaGxpbmtyZWdleCA9IC88KD86XFx3Oik/aHlwZXJsaW5rIFtePl0qPi9tZztcbnZhciBkaW1yZWdleCA9IC9cIihcXHcqOlxcdyopXCIvO1xudmFyIGNvbHJlZ2V4ID0gLzwoPzpcXHc6KT9jb2xcXGJbXj5dKltcXC9dPz4vZztcbnZhciBhZnJlZ2V4ID0gLzwoPzpcXHc6KT9hdXRvRmlsdGVyW14+XSooW1xcL118PihbXFxzXFxTXSopPFxcLyg/OlxcdzopP2F1dG9GaWx0ZXIpPi9nO1xudmFyIG1hcmdpbnJlZ2V4PSAvPCg/OlxcdzopP3BhZ2VNYXJnaW5zW14+XSpcXC8+L2c7XG52YXIgc2hlZXRwcnJlZ2V4ID0gLzwoPzpcXHc6KT9zaGVldFByXFxiKD86W14+YS16XVtePl0qKT9cXC8+LztcbnZhciBzaGVldHBycmVnZXgyPSAvPCg/OlxcdzopP3NoZWV0UHJbXj5dKig/OltcXC9dfD4oW1xcc1xcU10qKTxcXC8oPzpcXHc6KT9zaGVldFByKT4vO1xudmFyIHN2c3JlZ2V4ID0gLzwoPzpcXHc6KT9zaGVldFZpZXdzW14+XSooPzpbXFwvXXw+KFtcXHNcXFNdKik8XFwvKD86XFx3Oik/c2hlZXRWaWV3cyk+LztcblxuLyogMTguMyBXb3Jrc2hlZXRzICovXG5mdW5jdGlvbiBwYXJzZV93c194bWwoZGF0YSwgb3B0cywgaWR4LCByZWxzLCB3YiwgdGhlbWVzLCBzdHlsZXMpIHtcblx0aWYoIWRhdGEpIHJldHVybiBkYXRhO1xuXHRpZighcmVscykgcmVscyA9IHsnIWlkJzp7fX07XG5cdGlmKERFTlNFICE9IG51bGwgJiYgb3B0cy5kZW5zZSA9PSBudWxsKSBvcHRzLmRlbnNlID0gREVOU0U7XG5cblx0LyogMTguMy4xLjk5IHdvcmtzaGVldCBDVF9Xb3Jrc2hlZXQgKi9cblx0dmFyIHMgPSBvcHRzLmRlbnNlID8gKFtdKSA6ICh7fSk7XG5cdHZhciByZWZndWVzcyA9ICh7czoge3I6MjAwMDAwMCwgYzoyMDAwMDAwfSwgZToge3I6MCwgYzowfSB9KTtcblxuXHR2YXIgZGF0YTEgPSBcIlwiLCBkYXRhMiA9IFwiXCI7XG5cdHZhciBtdGNoID0gZGF0YS5tYXRjaChzaGVldGRhdGFyZWdleCk7XG5cdGlmKG10Y2gpIHtcblx0XHRkYXRhMSA9IGRhdGEuc2xpY2UoMCwgbXRjaC5pbmRleCk7XG5cdFx0ZGF0YTIgPSBkYXRhLnNsaWNlKG10Y2guaW5kZXggKyBtdGNoWzBdLmxlbmd0aCk7XG5cdH0gZWxzZSBkYXRhMSA9IGRhdGEyID0gZGF0YTtcblxuXHQvKiAxOC4zLjEuODIgc2hlZXRQciBDVF9TaGVldFByICovXG5cdHZhciBzaGVldFByID0gZGF0YTEubWF0Y2goc2hlZXRwcnJlZ2V4KTtcblx0aWYoc2hlZXRQcikgcGFyc2Vfd3NfeG1sX3NoZWV0cHIoc2hlZXRQclswXSwgcywgd2IsIGlkeCk7XG5cdGVsc2UgaWYoKHNoZWV0UHIgPSBkYXRhMS5tYXRjaChzaGVldHBycmVnZXgyKSkpIHBhcnNlX3dzX3htbF9zaGVldHByMihzaGVldFByWzBdLCBzaGVldFByWzFdfHxcIlwiLCBzLCB3YiwgaWR4LCBzdHlsZXMsIHRoZW1lcyk7XG5cblx0LyogMTguMy4xLjM1IGRpbWVuc2lvbiBDVF9TaGVldERpbWVuc2lvbiAqL1xuXHR2YXIgcmlkeCA9IChkYXRhMS5tYXRjaCgvPCg/Olxcdyo6KT9kaW1lbnNpb24vKXx8e2luZGV4Oi0xfSkuaW5kZXg7XG5cdGlmKHJpZHggPiAwKSB7XG5cdFx0dmFyIHJlZiA9IGRhdGExLnNsaWNlKHJpZHgscmlkeCs1MCkubWF0Y2goZGltcmVnZXgpO1xuXHRcdGlmKHJlZikgcGFyc2Vfd3NfeG1sX2RpbShzLCByZWZbMV0pO1xuXHR9XG5cblx0LyogMTguMy4xLjg4IHNoZWV0Vmlld3MgQ1RfU2hlZXRWaWV3cyAqL1xuXHR2YXIgc3ZzID0gZGF0YTEubWF0Y2goc3ZzcmVnZXgpO1xuXHRpZihzdnMgJiYgc3ZzWzFdKSBwYXJzZV93c194bWxfc2hlZXR2aWV3cyhzdnNbMV0sIHdiKTtcblxuXHQvKiAxOC4zLjEuMTcgY29scyBDVF9Db2xzICovXG5cdHZhciBjb2x1bW5zID0gW107XG5cdGlmKG9wdHMuY2VsbFN0eWxlcykge1xuXHRcdC8qIDE4LjMuMS4xMyBjb2wgQ1RfQ29sICovXG5cdFx0dmFyIGNvbHMgPSBkYXRhMS5tYXRjaChjb2xyZWdleCk7XG5cdFx0aWYoY29scykgcGFyc2Vfd3NfeG1sX2NvbHMoY29sdW1ucywgY29scyk7XG5cdH1cblxuXHQvKiAxOC4zLjEuODAgc2hlZXREYXRhIENUX1NoZWV0RGF0YSA/ICovXG5cdGlmKG10Y2gpIHBhcnNlX3dzX3htbF9kYXRhKG10Y2hbMV0sIHMsIG9wdHMsIHJlZmd1ZXNzLCB0aGVtZXMsIHN0eWxlcyk7XG5cblx0LyogMTguMy4xLjIgIGF1dG9GaWx0ZXIgQ1RfQXV0b0ZpbHRlciAqL1xuXHR2YXIgYWZpbHRlciA9IGRhdGEyLm1hdGNoKGFmcmVnZXgpO1xuXHRpZihhZmlsdGVyKSBzWychYXV0b2ZpbHRlciddID0gcGFyc2Vfd3NfeG1sX2F1dG9maWx0ZXIoYWZpbHRlclswXSk7XG5cblx0LyogMTguMy4xLjU1IG1lcmdlQ2VsbHMgQ1RfTWVyZ2VDZWxscyAqL1xuXHR2YXIgbWVyZ2VzID0gW107XG5cdHZhciBfbWVyZ2UgPSBkYXRhMi5tYXRjaChtZXJnZWNyZWdleCk7XG5cdGlmKF9tZXJnZSkgZm9yKHJpZHggPSAwOyByaWR4ICE9IF9tZXJnZS5sZW5ndGg7ICsrcmlkeClcblx0XHRtZXJnZXNbcmlkeF0gPSBzYWZlX2RlY29kZV9yYW5nZShfbWVyZ2VbcmlkeF0uc2xpY2UoX21lcmdlW3JpZHhdLmluZGV4T2YoXCJcXFwiXCIpKzEpKTtcblxuXHQvKiAxOC4zLjEuNDggaHlwZXJsaW5rcyBDVF9IeXBlcmxpbmtzICovXG5cdHZhciBobGluayA9IGRhdGEyLm1hdGNoKGhsaW5rcmVnZXgpO1xuXHRpZihobGluaykgcGFyc2Vfd3NfeG1sX2hsaW5rcyhzLCBobGluaywgcmVscyk7XG5cblx0LyogMTguMy4xLjYyIHBhZ2VNYXJnaW5zIENUX1BhZ2VNYXJnaW5zICovXG5cdHZhciBtYXJnaW5zID0gZGF0YTIubWF0Y2gobWFyZ2lucmVnZXgpO1xuXHRpZihtYXJnaW5zKSBzWychbWFyZ2lucyddID0gcGFyc2Vfd3NfeG1sX21hcmdpbnMocGFyc2V4bWx0YWcobWFyZ2luc1swXSkpO1xuXG5cdGlmKCFzW1wiIXJlZlwiXSAmJiByZWZndWVzcy5lLmMgPj0gcmVmZ3Vlc3Mucy5jICYmIHJlZmd1ZXNzLmUuciA+PSByZWZndWVzcy5zLnIpIHNbXCIhcmVmXCJdID0gZW5jb2RlX3JhbmdlKHJlZmd1ZXNzKTtcblx0aWYob3B0cy5zaGVldFJvd3MgPiAwICYmIHNbXCIhcmVmXCJdKSB7XG5cdFx0dmFyIHRtcHJlZiA9IHNhZmVfZGVjb2RlX3JhbmdlKHNbXCIhcmVmXCJdKTtcblx0XHRpZihvcHRzLnNoZWV0Um93cyA8PSArdG1wcmVmLmUucikge1xuXHRcdFx0dG1wcmVmLmUuciA9IG9wdHMuc2hlZXRSb3dzIC0gMTtcblx0XHRcdGlmKHRtcHJlZi5lLnIgPiByZWZndWVzcy5lLnIpIHRtcHJlZi5lLnIgPSByZWZndWVzcy5lLnI7XG5cdFx0XHRpZih0bXByZWYuZS5yIDwgdG1wcmVmLnMucikgdG1wcmVmLnMuciA9IHRtcHJlZi5lLnI7XG5cdFx0XHRpZih0bXByZWYuZS5jID4gcmVmZ3Vlc3MuZS5jKSB0bXByZWYuZS5jID0gcmVmZ3Vlc3MuZS5jO1xuXHRcdFx0aWYodG1wcmVmLmUuYyA8IHRtcHJlZi5zLmMpIHRtcHJlZi5zLmMgPSB0bXByZWYuZS5jO1xuXHRcdFx0c1tcIiFmdWxscmVmXCJdID0gc1tcIiFyZWZcIl07XG5cdFx0XHRzW1wiIXJlZlwiXSA9IGVuY29kZV9yYW5nZSh0bXByZWYpO1xuXHRcdH1cblx0fVxuXHRpZihjb2x1bW5zLmxlbmd0aCA+IDApIHNbXCIhY29sc1wiXSA9IGNvbHVtbnM7XG5cdGlmKG1lcmdlcy5sZW5ndGggPiAwKSBzW1wiIW1lcmdlc1wiXSA9IG1lcmdlcztcblx0cmV0dXJuIHM7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX3dzX3htbF9tZXJnZXMobWVyZ2VzKSB7XG5cdGlmKG1lcmdlcy5sZW5ndGggPT09IDApIHJldHVybiBcIlwiO1xuXHR2YXIgbyA9ICc8bWVyZ2VDZWxscyBjb3VudD1cIicgKyBtZXJnZXMubGVuZ3RoICsgJ1wiPic7XG5cdGZvcih2YXIgaSA9IDA7IGkgIT0gbWVyZ2VzLmxlbmd0aDsgKytpKSBvICs9ICc8bWVyZ2VDZWxsIHJlZj1cIicgKyBlbmNvZGVfcmFuZ2UobWVyZ2VzW2ldKSArICdcIi8+Jztcblx0cmV0dXJuIG8gKyAnPC9tZXJnZUNlbGxzPic7XG59XG5cbi8qIDE4LjMuMS44Mi0zIHNoZWV0UHIgQ1RfQ2hhcnRzaGVldFByIC8gQ1RfU2hlZXRQciAqL1xuZnVuY3Rpb24gcGFyc2Vfd3NfeG1sX3NoZWV0cHIoc2hlZXRQciwgcywgd2IsIGlkeCkge1xuXHR2YXIgZGF0YSA9IHBhcnNleG1sdGFnKHNoZWV0UHIpO1xuXHRpZighd2IuU2hlZXRzW2lkeF0pIHdiLlNoZWV0c1tpZHhdID0ge307XG5cdGlmKGRhdGEuY29kZU5hbWUpIHdiLlNoZWV0c1tpZHhdLkNvZGVOYW1lID0gdW5lc2NhcGV4bWwodXRmOHJlYWQoZGF0YS5jb2RlTmFtZSkpO1xufVxuZnVuY3Rpb24gcGFyc2Vfd3NfeG1sX3NoZWV0cHIyKHNoZWV0UHIsIGJvZHksIHMsIHdiLCBpZHgsIHN0eWxlcywgdGhlbWVzKSB7XG5cdHBhcnNlX3dzX3htbF9zaGVldHByKHNoZWV0UHIuc2xpY2UoMCwgc2hlZXRQci5pbmRleE9mKFwiPlwiKSksIHMsIHdiLCBpZHgpO1xufVxuZnVuY3Rpb24gd3JpdGVfd3NfeG1sX3NoZWV0cHIod3MsIHdiLCBpZHgsIG9wdHMsIG8pIHtcblx0dmFyIG5lZWRlZCA9IGZhbHNlO1xuXHR2YXIgcHJvcHMgPSB7fSwgcGF5bG9hZCA9IG51bGw7XG5cdGlmKG9wdHMuYm9va1R5cGUgIT09ICd4bHN4JyAmJiB3Yi52YmFyYXcpIHtcblx0XHR2YXIgY25hbWUgPSB3Yi5TaGVldE5hbWVzW2lkeF07XG5cdFx0dHJ5IHsgaWYod2IuV29ya2Jvb2spIGNuYW1lID0gd2IuV29ya2Jvb2suU2hlZXRzW2lkeF0uQ29kZU5hbWUgfHwgY25hbWU7IH0gY2F0Y2goZSkge31cblx0XHRuZWVkZWQgPSB0cnVlO1xuXHRcdHByb3BzLmNvZGVOYW1lID0gdXRmOHdyaXRlKGVzY2FwZXhtbChjbmFtZSkpO1xuXHR9XG5cblx0aWYod3MgJiYgd3NbXCIhb3V0bGluZVwiXSkge1xuXHRcdHZhciBvdXRsaW5lcHJvcHMgPSB7c3VtbWFyeUJlbG93OjEsIHN1bW1hcnlSaWdodDoxfTtcblx0XHRpZih3c1tcIiFvdXRsaW5lXCJdLmFib3ZlKSBvdXRsaW5lcHJvcHMuc3VtbWFyeUJlbG93ID0gMDtcblx0XHRpZih3c1tcIiFvdXRsaW5lXCJdLmxlZnQpIG91dGxpbmVwcm9wcy5zdW1tYXJ5UmlnaHQgPSAwO1xuXHRcdHBheWxvYWQgPSAocGF5bG9hZHx8XCJcIikgKyB3cml0ZXh0YWcoJ291dGxpbmVQcicsIG51bGwsIG91dGxpbmVwcm9wcyk7XG5cdH1cblxuXHRpZighbmVlZGVkICYmICFwYXlsb2FkKSByZXR1cm47XG5cdG9bby5sZW5ndGhdID0gKHdyaXRleHRhZygnc2hlZXRQcicsIHBheWxvYWQsIHByb3BzKSk7XG59XG5cbi8qIDE4LjMuMS44NSBzaGVldFByb3RlY3Rpb24gQ1RfU2hlZXRQcm90ZWN0aW9uICovXG52YXIgc2hlZXRwcm90X2RlZmZhbHNlID0gW1wib2JqZWN0c1wiLCBcInNjZW5hcmlvc1wiLCBcInNlbGVjdExvY2tlZENlbGxzXCIsIFwic2VsZWN0VW5sb2NrZWRDZWxsc1wiXTtcbnZhciBzaGVldHByb3RfZGVmdHJ1ZSA9IFtcblx0XCJmb3JtYXRDb2x1bW5zXCIsIFwiZm9ybWF0Um93c1wiLCBcImZvcm1hdENlbGxzXCIsXG5cdFwiaW5zZXJ0Q29sdW1uc1wiLCBcImluc2VydFJvd3NcIiwgXCJpbnNlcnRIeXBlcmxpbmtzXCIsXG5cdFwiZGVsZXRlQ29sdW1uc1wiLCBcImRlbGV0ZVJvd3NcIixcblx0XCJzb3J0XCIsIFwiYXV0b0ZpbHRlclwiLCBcInBpdm90VGFibGVzXCJcbl07XG5mdW5jdGlvbiB3cml0ZV93c194bWxfcHJvdGVjdGlvbihzcCkge1xuXHQvLyBhbGdvcml0aG1OYW1lLCBoYXNoVmFsdWUsIHNhbHRWYWx1ZSwgc3BpbkNvdW50XG5cdHZhciBvID0gKHtzaGVldDoxfSk7XG5cdHNoZWV0cHJvdF9kZWZmYWxzZS5mb3JFYWNoKGZ1bmN0aW9uKG4pIHsgaWYoc3Bbbl0gIT0gbnVsbCAmJiBzcFtuXSkgb1tuXSA9IFwiMVwiOyB9KTtcblx0c2hlZXRwcm90X2RlZnRydWUuZm9yRWFjaChmdW5jdGlvbihuKSB7IGlmKHNwW25dICE9IG51bGwgJiYgIXNwW25dKSBvW25dID0gXCIwXCI7IH0pO1xuXHQvKiBUT0RPOiBhbGdvcml0aG0gKi9cblx0aWYoc3AucGFzc3dvcmQpIG8ucGFzc3dvcmQgPSBjcnlwdG9fQ3JlYXRlUGFzc3dvcmRWZXJpZmllcl9NZXRob2QxKHNwLnBhc3N3b3JkKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcblx0cmV0dXJuIHdyaXRleHRhZygnc2hlZXRQcm90ZWN0aW9uJywgbnVsbCwgbyk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlX3dzX3htbF9obGlua3MocywgZGF0YSwgcmVscykge1xuXHR2YXIgZGVuc2UgPSBBcnJheS5pc0FycmF5KHMpO1xuXHRmb3IodmFyIGkgPSAwOyBpICE9IGRhdGEubGVuZ3RoOyArK2kpIHtcblx0XHR2YXIgdmFsID0gcGFyc2V4bWx0YWcodXRmOHJlYWQoZGF0YVtpXSksIHRydWUpO1xuXHRcdGlmKCF2YWwucmVmKSByZXR1cm47XG5cdFx0dmFyIHJlbCA9ICgocmVscyB8fCB7fSlbJyFpZCddfHxbXSlbdmFsLmlkXTtcblx0XHRpZihyZWwpIHtcblx0XHRcdHZhbC5UYXJnZXQgPSByZWwuVGFyZ2V0O1xuXHRcdFx0aWYodmFsLmxvY2F0aW9uKSB2YWwuVGFyZ2V0ICs9IFwiI1wiK3VuZXNjYXBleG1sKHZhbC5sb2NhdGlvbik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhbC5UYXJnZXQgPSBcIiNcIiArIHVuZXNjYXBleG1sKHZhbC5sb2NhdGlvbik7XG5cdFx0XHRyZWwgPSB7VGFyZ2V0OiB2YWwuVGFyZ2V0LCBUYXJnZXRNb2RlOiAnSW50ZXJuYWwnfTtcblx0XHR9XG5cdFx0dmFsLlJlbCA9IHJlbDtcblx0XHRpZih2YWwudG9vbHRpcCkgeyB2YWwuVG9vbHRpcCA9IHZhbC50b29sdGlwOyBkZWxldGUgdmFsLnRvb2x0aXA7IH1cblx0XHR2YXIgcm5nID0gc2FmZV9kZWNvZGVfcmFuZ2UodmFsLnJlZik7XG5cdFx0Zm9yKHZhciBSPXJuZy5zLnI7Ujw9cm5nLmUucjsrK1IpIGZvcih2YXIgQz1ybmcucy5jO0M8PXJuZy5lLmM7KytDKSB7XG5cdFx0XHR2YXIgYWRkciA9IGVuY29kZV9jZWxsKHtjOkMscjpSfSk7XG5cdFx0XHRpZihkZW5zZSkge1xuXHRcdFx0XHRpZighc1tSXSkgc1tSXSA9IFtdO1xuXHRcdFx0XHRpZighc1tSXVtDXSkgc1tSXVtDXSA9IHt0OlwielwiLHY6dW5kZWZpbmVkfTtcblx0XHRcdFx0c1tSXVtDXS5sID0gdmFsO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYoIXNbYWRkcl0pIHNbYWRkcl0gPSB7dDpcInpcIix2OnVuZGVmaW5lZH07XG5cdFx0XHRcdHNbYWRkcl0ubCA9IHZhbDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcGFyc2Vfd3NfeG1sX21hcmdpbnMobWFyZ2luKSB7XG5cdHZhciBvID0ge307XG5cdFtcImxlZnRcIiwgXCJyaWdodFwiLCBcInRvcFwiLCBcImJvdHRvbVwiLCBcImhlYWRlclwiLCBcImZvb3RlclwiXS5mb3JFYWNoKGZ1bmN0aW9uKGspIHtcblx0XHRpZihtYXJnaW5ba10pIG9ba10gPSBwYXJzZUZsb2F0KG1hcmdpbltrXSk7XG5cdH0pO1xuXHRyZXR1cm4gbztcbn1cbmZ1bmN0aW9uIHdyaXRlX3dzX3htbF9tYXJnaW5zKG1hcmdpbikge1xuXHRkZWZhdWx0X21hcmdpbnMobWFyZ2luKTtcblx0cmV0dXJuIHdyaXRleHRhZygncGFnZU1hcmdpbnMnLCBudWxsLCBtYXJnaW4pO1xufVxuXG5mdW5jdGlvbiBwYXJzZV93c194bWxfY29scyhjb2x1bW5zLCBjb2xzKSB7XG5cdHZhciBzZWVuY29sID0gZmFsc2U7XG5cdGZvcih2YXIgY29saSA9IDA7IGNvbGkgIT0gY29scy5sZW5ndGg7ICsrY29saSkge1xuXHRcdHZhciBjb2xsID0gcGFyc2V4bWx0YWcoY29sc1tjb2xpXSwgdHJ1ZSk7XG5cdFx0aWYoY29sbC5oaWRkZW4pIGNvbGwuaGlkZGVuID0gcGFyc2V4bWxib29sKGNvbGwuaGlkZGVuKTtcblx0XHR2YXIgY29sbT1wYXJzZUludChjb2xsLm1pbiwgMTApLTEsIGNvbE09cGFyc2VJbnQoY29sbC5tYXgsMTApLTE7XG5cdFx0aWYoY29sbC5vdXRsaW5lTGV2ZWwpIGNvbGwubGV2ZWwgPSAoK2NvbGwub3V0bGluZUxldmVsIHx8IDApO1xuXHRcdGRlbGV0ZSBjb2xsLm1pbjsgZGVsZXRlIGNvbGwubWF4OyBjb2xsLndpZHRoID0gK2NvbGwud2lkdGg7XG5cdFx0aWYoIXNlZW5jb2wgJiYgY29sbC53aWR0aCkgeyBzZWVuY29sID0gdHJ1ZTsgZmluZF9tZHdfY29sdyhjb2xsLndpZHRoKTsgfVxuXHRcdHByb2Nlc3NfY29sKGNvbGwpO1xuXHRcdHdoaWxlKGNvbG0gPD0gY29sTSkgY29sdW1uc1tjb2xtKytdID0gZHVwKGNvbGwpO1xuXHR9XG59XG5mdW5jdGlvbiB3cml0ZV93c194bWxfY29scyh3cywgY29scykge1xuXHR2YXIgbyA9IFtcIjxjb2xzPlwiXSwgY29sO1xuXHRmb3IodmFyIGkgPSAwOyBpICE9IGNvbHMubGVuZ3RoOyArK2kpIHtcblx0XHRpZighKGNvbCA9IGNvbHNbaV0pKSBjb250aW51ZTtcblx0XHRvW28ubGVuZ3RoXSA9ICh3cml0ZXh0YWcoJ2NvbCcsIG51bGwsIGNvbF9vYmpfdyhpLCBjb2wpKSk7XG5cdH1cblx0b1tvLmxlbmd0aF0gPSBcIjwvY29scz5cIjtcblx0cmV0dXJuIG8uam9pbihcIlwiKTtcbn1cblxuZnVuY3Rpb24gcGFyc2Vfd3NfeG1sX2F1dG9maWx0ZXIoZGF0YSkge1xuXHR2YXIgbyA9IHsgcmVmOiAoZGF0YS5tYXRjaCgvcmVmPVwiKFteXCJdKilcIi8pfHxbXSlbMV19O1xuXHRyZXR1cm4gbztcbn1cbmZ1bmN0aW9uIHdyaXRlX3dzX3htbF9hdXRvZmlsdGVyKGRhdGEsIHdzLCB3YiwgaWR4KSB7XG5cdHZhciByZWYgPSB0eXBlb2YgZGF0YS5yZWYgPT0gXCJzdHJpbmdcIiA/IGRhdGEucmVmIDogZW5jb2RlX3JhbmdlKGRhdGEucmVmKTtcblx0aWYoIXdiLldvcmtib29rKSB3Yi5Xb3JrYm9vayA9ICh7U2hlZXRzOltdfSk7XG5cdGlmKCF3Yi5Xb3JrYm9vay5OYW1lcykgd2IuV29ya2Jvb2suTmFtZXMgPSBbXTtcblx0dmFyIG5hbWVzID0gd2IuV29ya2Jvb2suTmFtZXM7XG5cdHZhciByYW5nZSA9IGRlY29kZV9yYW5nZShyZWYpO1xuXHRpZihyYW5nZS5zLnIgPT0gcmFuZ2UuZS5yKSB7IHJhbmdlLmUuciA9IGRlY29kZV9yYW5nZSh3c1tcIiFyZWZcIl0pLmUucjsgcmVmID0gZW5jb2RlX3JhbmdlKHJhbmdlKTsgfVxuXHRmb3IodmFyIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyArK2kpIHtcblx0XHR2YXIgbmFtZSA9IG5hbWVzW2ldO1xuXHRcdGlmKG5hbWUuTmFtZSAhPSAnX3hsbm0uX0ZpbHRlckRhdGFiYXNlJykgY29udGludWU7XG5cdFx0aWYobmFtZS5TaGVldCAhPSBpZHgpIGNvbnRpbnVlO1xuXHRcdG5hbWUuUmVmID0gXCInXCIgKyB3Yi5TaGVldE5hbWVzW2lkeF0gKyBcIichXCIgKyByZWY7IGJyZWFrO1xuXHR9XG5cdGlmKGkgPT0gbmFtZXMubGVuZ3RoKSBuYW1lcy5wdXNoKHsgTmFtZTogJ194bG5tLl9GaWx0ZXJEYXRhYmFzZScsIFNoZWV0OiBpZHgsIFJlZjogXCInXCIgKyB3Yi5TaGVldE5hbWVzW2lkeF0gKyBcIichXCIgKyByZWYgIH0pO1xuXHRyZXR1cm4gd3JpdGV4dGFnKFwiYXV0b0ZpbHRlclwiLCBudWxsLCB7cmVmOnJlZn0pO1xufVxuXG4vKiAxOC4zLjEuODggc2hlZXRWaWV3cyBDVF9TaGVldFZpZXdzICovXG4vKiAxOC4zLjEuODcgc2hlZXRWaWV3IENUX1NoZWV0VmlldyAqL1xudmFyIHN2aWV3cmVnZXggPSAvPCg/OlxcdzopP3NoZWV0Vmlldyg/OltePmEtel1bXj5dKik/XFwvPz4vO1xuZnVuY3Rpb24gcGFyc2Vfd3NfeG1sX3NoZWV0dmlld3MoZGF0YSwgd2IpIHtcblx0aWYoIXdiLlZpZXdzKSB3Yi5WaWV3cyA9IFt7fV07XG5cdChkYXRhLm1hdGNoKHN2aWV3cmVnZXgpfHxbXSkuZm9yRWFjaChmdW5jdGlvbihyLCBpKSB7XG5cdFx0dmFyIHRhZyA9IHBhcnNleG1sdGFnKHIpO1xuXHRcdC8vICRGbG93SWdub3JlXG5cdFx0aWYoIXdiLlZpZXdzW2ldKSB3Yi5WaWV3c1tpXSA9IHt9O1xuXHRcdC8vICRGbG93SWdub3JlXG5cdFx0aWYoK3RhZy56b29tU2NhbGUpIHdiLlZpZXdzW2ldLnpvb20gPSArdGFnLnpvb21TY2FsZTtcblx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdGlmKHBhcnNleG1sYm9vbCh0YWcucmlnaHRUb0xlZnQpKSB3Yi5WaWV3c1tpXS5SVEwgPSB0cnVlO1xuXHR9KTtcbn1cbmZ1bmN0aW9uIHdyaXRlX3dzX3htbF9zaGVldHZpZXdzKHdzLCBvcHRzLCBpZHgsIHdiKSB7XG5cdHZhciBzdmlldyA9ICh7d29ya2Jvb2tWaWV3SWQ6XCIwXCJ9KTtcblx0Ly8gJEZsb3dJZ25vcmVcblx0aWYoKCgod2J8fHt9KS5Xb3JrYm9va3x8e30pLlZpZXdzfHxbXSlbMF0pIHN2aWV3LnJpZ2h0VG9MZWZ0ID0gd2IuV29ya2Jvb2suVmlld3NbMF0uUlRMID8gXCIxXCIgOiBcIjBcIjtcblx0cmV0dXJuIHdyaXRleHRhZyhcInNoZWV0Vmlld3NcIiwgd3JpdGV4dGFnKFwic2hlZXRWaWV3XCIsIG51bGwsIHN2aWV3KSwge30pO1xufVxuXG5mdW5jdGlvbiB3cml0ZV93c194bWxfY2VsbChjZWxsLCByZWYsIHdzLCBvcHRzKSB7XG5cdGlmKGNlbGwudiA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBjZWxsLmYgIT09IFwic3RyaW5nXCIgfHwgY2VsbC50ID09PSAneicpIHJldHVybiBcIlwiO1xuXHR2YXIgdnYgPSBcIlwiO1xuXHR2YXIgb2xkdCA9IGNlbGwudCwgb2xkdiA9IGNlbGwudjtcblx0aWYoY2VsbC50ICE9PSBcInpcIikgc3dpdGNoKGNlbGwudCkge1xuXHRcdGNhc2UgJ2InOiB2diA9IGNlbGwudiA/IFwiMVwiIDogXCIwXCI7IGJyZWFrO1xuXHRcdGNhc2UgJ24nOiB2diA9ICcnK2NlbGwudjsgYnJlYWs7XG5cdFx0Y2FzZSAnZSc6IHZ2ID0gQkVycltjZWxsLnZdOyBicmVhaztcblx0XHRjYXNlICdkJzpcblx0XHRcdGlmKG9wdHMgJiYgb3B0cy5jZWxsRGF0ZXMpIHZ2ID0gcGFyc2VEYXRlKGNlbGwudiwgLTEpLnRvSVNPU3RyaW5nKCk7XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Y2VsbCA9IGR1cChjZWxsKTtcblx0XHRcdFx0Y2VsbC50ID0gJ24nO1xuXHRcdFx0XHR2diA9ICcnKyhjZWxsLnYgPSBkYXRlbnVtKHBhcnNlRGF0ZShjZWxsLnYpKSk7XG5cdFx0XHR9XG5cdFx0XHRpZih0eXBlb2YgY2VsbC56ID09PSAndW5kZWZpbmVkJykgY2VsbC56ID0gU1NGLl90YWJsZVsxNF07XG5cdFx0XHRicmVhaztcblx0XHRkZWZhdWx0OiB2diA9IGNlbGwudjsgYnJlYWs7XG5cdH1cblx0dmFyIHYgPSB3cml0ZXRhZygndicsIGVzY2FwZXhtbCh2dikpLCBvID0gKHtyOnJlZn0pO1xuXHQvKiBUT0RPOiBjZWxsIHN0eWxlICovXG5cdHZhciBvcyA9IGdldF9jZWxsX3N0eWxlKG9wdHMuY2VsbFhmcywgY2VsbCwgb3B0cyk7XG5cdGlmKG9zICE9PSAwKSBvLnMgPSBvcztcblx0c3dpdGNoKGNlbGwudCkge1xuXHRcdGNhc2UgJ24nOiBicmVhaztcblx0XHRjYXNlICdkJzogby50ID0gXCJkXCI7IGJyZWFrO1xuXHRcdGNhc2UgJ2InOiBvLnQgPSBcImJcIjsgYnJlYWs7XG5cdFx0Y2FzZSAnZSc6IG8udCA9IFwiZVwiOyBicmVhaztcblx0XHRjYXNlICd6JzogYnJlYWs7XG5cdFx0ZGVmYXVsdDogaWYoY2VsbC52ID09IG51bGwpIHsgZGVsZXRlIGNlbGwudDsgYnJlYWs7IH1cblx0XHRcdGlmKGNlbGwudi5sZW5ndGggPiAzMjc2NykgdGhyb3cgbmV3IEVycm9yKFwiVGV4dCBsZW5ndGggbXVzdCBub3QgZXhjZWVkIDMyNzY3IGNoYXJhY3RlcnNcIik7XG5cdFx0XHRpZihvcHRzICYmIG9wdHMuYm9va1NTVCkge1xuXHRcdFx0XHR2ID0gd3JpdGV0YWcoJ3YnLCAnJytnZXRfc3N0X2lkKG9wdHMuU3RyaW5ncywgY2VsbC52LCBvcHRzLnJldlN0cmluZ3MpKTtcblx0XHRcdFx0by50ID0gXCJzXCI7IGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0by50ID0gXCJzdHJcIjsgYnJlYWs7XG5cdH1cblx0aWYoY2VsbC50ICE9IG9sZHQpIHsgY2VsbC50ID0gb2xkdDsgY2VsbC52ID0gb2xkdjsgfVxuXHRpZih0eXBlb2YgY2VsbC5mID09IFwic3RyaW5nXCIgJiYgY2VsbC5mKSB7XG5cdFx0dmFyIGZmID0gY2VsbC5GICYmIGNlbGwuRi5zbGljZSgwLCByZWYubGVuZ3RoKSA9PSByZWYgPyB7dDpcImFycmF5XCIsIHJlZjpjZWxsLkZ9IDogbnVsbDtcblx0XHR2ID0gd3JpdGV4dGFnKCdmJywgZXNjYXBleG1sKGNlbGwuZiksIGZmKSArIChjZWxsLnYgIT0gbnVsbCA/IHYgOiBcIlwiKTtcblx0fVxuXHRpZihjZWxsLmwpIHdzWychbGlua3MnXS5wdXNoKFtyZWYsIGNlbGwubF0pO1xuXHRpZihjZWxsLmMpIHdzWychY29tbWVudHMnXS5wdXNoKFtyZWYsIGNlbGwuY10pO1xuXHRyZXR1cm4gd3JpdGV4dGFnKCdjJywgdiwgbyk7XG59XG5cbnZhciBwYXJzZV93c194bWxfZGF0YSA9IChmdW5jdGlvbigpIHtcblx0dmFyIGNlbGxyZWdleCA9IC88KD86XFx3KzopP2NbIFxcLz5dLywgcm93cmVnZXggPSAvPFxcLyg/Olxcdys6KT9yb3c+Lztcblx0dmFyIHJyZWdleCA9IC9yPVtcIiddKFteXCInXSopW1wiJ10vLCBpc3JlZ2V4ID0gLzwoPzpcXHcrOik/aXM+KFtcXFNcXHNdKj8pPFxcLyg/Olxcdys6KT9pcz4vO1xuXHR2YXIgcmVmcmVnZXggPSAvcmVmPVtcIiddKFteXCInXSopW1wiJ10vO1xuXHR2YXIgbWF0Y2hfdiA9IG1hdGNodGFnKFwidlwiKSwgbWF0Y2hfZiA9IG1hdGNodGFnKFwiZlwiKTtcblxucmV0dXJuIGZ1bmN0aW9uIHBhcnNlX3dzX3htbF9kYXRhKHNkYXRhLCBzLCBvcHRzLCBndWVzcywgdGhlbWVzLCBzdHlsZXMpIHtcblx0dmFyIHJpID0gMCwgeCA9IFwiXCIsIGNlbGxzID0gW10sIGNyZWYgPSBbXSwgaWR4PTAsIGk9MCwgY2M9MCwgZD1cIlwiLCBwO1xuXHR2YXIgdGFnLCB0YWdyID0gMCwgdGFnYyA9IDA7XG5cdHZhciBzc3RyLCBmdGFnO1xuXHR2YXIgZm10aWQgPSAwLCBmaWxsaWQgPSAwO1xuXHR2YXIgZG9fZm9ybWF0ID0gQXJyYXkuaXNBcnJheShzdHlsZXMuQ2VsbFhmKSwgY2Y7XG5cdHZhciBhcnJheWYgPSBbXTtcblx0dmFyIHNoYXJlZGYgPSBbXTtcblx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheShzKTtcblx0dmFyIHJvd3MgPSBbXSwgcm93b2JqID0ge30sIHJvd3JpdGUgPSBmYWxzZTtcblx0dmFyIHNoZWV0U3R1YnMgPSAhIW9wdHMuc2hlZXRTdHVicztcblx0Zm9yKHZhciBtYXJyID0gc2RhdGEuc3BsaXQocm93cmVnZXgpLCBtdCA9IDAsIG1hcnJsZW4gPSBtYXJyLmxlbmd0aDsgbXQgIT0gbWFycmxlbjsgKyttdCkge1xuXHRcdHggPSBtYXJyW210XS50cmltKCk7XG5cdFx0dmFyIHhsZW4gPSB4Lmxlbmd0aDtcblx0XHRpZih4bGVuID09PSAwKSBjb250aW51ZTtcblxuXHRcdC8qIDE4LjMuMS43MyByb3cgQ1RfUm93ICovXG5cdFx0dmFyIHJzdGFydGkgPSAwO1xuXHRcdG91dGE6IGZvcihyaSA9IDA7IHJpIDwgeGxlbjsgKytyaSkgc3dpdGNoKC8qeC5jaGFyQ29kZUF0KHJpKSoveFtyaV0pIHtcblx0XHRcdGNhc2UgXCI+XCIgLyo2MiovOlxuXHRcdFx0XHRpZigvKnguY2hhckNvZGVBdChyaS0xKSAhPSA0NyoveFtyaS0xXSAhPSBcIi9cIikgeyArK3JpOyBicmVhayBvdXRhOyB9XG5cdFx0XHRcdGlmKG9wdHMgJiYgb3B0cy5jZWxsU3R5bGVzKSB7XG5cdFx0XHRcdFx0Ly8gVE9ETzogYXZvaWQgZHVwbGljYXRpb25cblx0XHRcdFx0XHR0YWcgPSBwYXJzZXhtbHRhZyh4LnNsaWNlKHJzdGFydGkscmkpLCB0cnVlKTtcblx0XHRcdFx0XHR0YWdyID0gdGFnLnIgIT0gbnVsbCA/IHBhcnNlSW50KHRhZy5yLCAxMCkgOiB0YWdyKzE7IHRhZ2MgPSAtMTtcblx0XHRcdFx0XHRpZihvcHRzLnNoZWV0Um93cyAmJiBvcHRzLnNoZWV0Um93cyA8IHRhZ3IpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdHJvd29iaiA9IHt9OyByb3dyaXRlID0gZmFsc2U7XG5cdFx0XHRcdFx0aWYodGFnLmh0KSB7IHJvd3JpdGUgPSB0cnVlOyByb3dvYmouaHB0ID0gcGFyc2VGbG9hdCh0YWcuaHQpOyByb3dvYmouaHB4ID0gcHQycHgocm93b2JqLmhwdCk7IH1cblx0XHRcdFx0XHRpZih0YWcuaGlkZGVuID09IFwiMVwiKSB7IHJvd3JpdGUgPSB0cnVlOyByb3dvYmouaGlkZGVuID0gdHJ1ZTsgfVxuXHRcdFx0XHRcdGlmKHRhZy5vdXRsaW5lTGV2ZWwgIT0gbnVsbCkgeyByb3dyaXRlID0gdHJ1ZTsgcm93b2JqLmxldmVsID0gK3RhZy5vdXRsaW5lTGV2ZWw7IH1cblx0XHRcdFx0XHRpZihyb3dyaXRlKSByb3dzW3RhZ3ItMV0gPSByb3dvYmo7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiPFwiIC8qNjAqLzogcnN0YXJ0aSA9IHJpOyBicmVhaztcblx0XHR9XG5cdFx0aWYocnN0YXJ0aSA+PSByaSkgYnJlYWs7XG5cdFx0dGFnID0gcGFyc2V4bWx0YWcoeC5zbGljZShyc3RhcnRpLHJpKSwgdHJ1ZSk7XG5cdFx0dGFnciA9IHRhZy5yICE9IG51bGwgPyBwYXJzZUludCh0YWcuciwgMTApIDogdGFncisxOyB0YWdjID0gLTE7XG5cdFx0aWYob3B0cy5zaGVldFJvd3MgJiYgb3B0cy5zaGVldFJvd3MgPCB0YWdyKSBjb250aW51ZTtcblx0XHRpZihndWVzcy5zLnIgPiB0YWdyIC0gMSkgZ3Vlc3Mucy5yID0gdGFnciAtIDE7XG5cdFx0aWYoZ3Vlc3MuZS5yIDwgdGFnciAtIDEpIGd1ZXNzLmUuciA9IHRhZ3IgLSAxO1xuXG5cdFx0aWYob3B0cyAmJiBvcHRzLmNlbGxTdHlsZXMpIHtcblx0XHRcdHJvd29iaiA9IHt9OyByb3dyaXRlID0gZmFsc2U7XG5cdFx0XHRpZih0YWcuaHQpIHsgcm93cml0ZSA9IHRydWU7IHJvd29iai5ocHQgPSBwYXJzZUZsb2F0KHRhZy5odCk7IHJvd29iai5ocHggPSBwdDJweChyb3dvYmouaHB0KTsgfVxuXHRcdFx0aWYodGFnLmhpZGRlbiA9PSBcIjFcIikgeyByb3dyaXRlID0gdHJ1ZTsgcm93b2JqLmhpZGRlbiA9IHRydWU7IH1cblx0XHRcdGlmKHRhZy5vdXRsaW5lTGV2ZWwgIT0gbnVsbCkgeyByb3dyaXRlID0gdHJ1ZTsgcm93b2JqLmxldmVsID0gK3RhZy5vdXRsaW5lTGV2ZWw7IH1cblx0XHRcdGlmKHJvd3JpdGUpIHJvd3NbdGFnci0xXSA9IHJvd29iajtcblx0XHR9XG5cblx0XHQvKiAxOC4zLjEuNCBjIENUX0NlbGwgKi9cblx0XHRjZWxscyA9IHguc2xpY2UocmkpLnNwbGl0KGNlbGxyZWdleCk7XG5cdFx0Zm9yKHZhciByc2xpY2UgPSAwOyByc2xpY2UgIT0gY2VsbHMubGVuZ3RoOyArK3JzbGljZSkgaWYoY2VsbHNbcnNsaWNlXS50cmltKCkuY2hhckF0KDApICE9IFwiPFwiKSBicmVhaztcblx0XHRjZWxscyA9IGNlbGxzLnNsaWNlKHJzbGljZSk7XG5cdFx0Zm9yKHJpID0gMDsgcmkgIT0gY2VsbHMubGVuZ3RoOyArK3JpKSB7XG5cdFx0XHR4ID0gY2VsbHNbcmldLnRyaW0oKTtcblx0XHRcdGlmKHgubGVuZ3RoID09PSAwKSBjb250aW51ZTtcblx0XHRcdGNyZWYgPSB4Lm1hdGNoKHJyZWdleCk7IGlkeCA9IHJpOyBpPTA7IGNjPTA7XG5cdFx0XHR4ID0gXCI8YyBcIiArICh4LnNsaWNlKDAsMSk9PVwiPFwiP1wiPlwiOlwiXCIpICsgeDtcblx0XHRcdGlmKGNyZWYgIT0gbnVsbCAmJiBjcmVmLmxlbmd0aCA9PT0gMikge1xuXHRcdFx0XHRpZHggPSAwOyBkPWNyZWZbMV07XG5cdFx0XHRcdGZvcihpPTA7IGkgIT0gZC5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRcdGlmKChjYz1kLmNoYXJDb2RlQXQoaSktNjQpIDwgMSB8fCBjYyA+IDI2KSBicmVhaztcblx0XHRcdFx0XHRpZHggPSAyNippZHggKyBjYztcblx0XHRcdFx0fVxuXHRcdFx0XHQtLWlkeDtcblx0XHRcdFx0dGFnYyA9IGlkeDtcblx0XHRcdH0gZWxzZSArK3RhZ2M7XG5cdFx0XHRmb3IoaSA9IDA7IGkgIT0geC5sZW5ndGg7ICsraSkgaWYoeC5jaGFyQ29kZUF0KGkpID09PSA2MikgYnJlYWs7ICsraTtcblx0XHRcdHRhZyA9IHBhcnNleG1sdGFnKHguc2xpY2UoMCxpKSwgdHJ1ZSk7XG5cdFx0XHRpZighdGFnLnIpIHRhZy5yID0gZW5jb2RlX2NlbGwoe3I6dGFnci0xLCBjOnRhZ2N9KTtcblx0XHRcdGQgPSB4LnNsaWNlKGkpO1xuXHRcdFx0cCA9ICh7dDpcIlwifSk7XG5cblx0XHRcdGlmKChjcmVmPWQubWF0Y2gobWF0Y2hfdikpIT0gbnVsbCAmJiBjcmVmWzFdICE9PSAnJykgcC52PXVuZXNjYXBleG1sKGNyZWZbMV0pO1xuXHRcdFx0aWYob3B0cy5jZWxsRm9ybXVsYSkge1xuXHRcdFx0XHRpZigoY3JlZj1kLm1hdGNoKG1hdGNoX2YpKSE9IG51bGwgJiYgY3JlZlsxXSAhPT0gJycpIHtcblx0XHRcdFx0XHQvKiBUT0RPOiBtYXRjaCBhZ2FpbnN0IFhMU1hGdXR1cmVGdW5jdGlvbnMgKi9cblx0XHRcdFx0XHRwLmY9dW5lc2NhcGV4bWwodXRmOHJlYWQoY3JlZlsxXSkpLnJlcGxhY2UoL1xcclxcbi9nLCBcIlxcblwiKTtcblx0XHRcdFx0XHRpZighb3B0cy54bGZuKSBwLmYgPSBfeGxmbihwLmYpO1xuXHRcdFx0XHRcdGlmKGNyZWZbMF0uaW5kZXhPZigndD1cImFycmF5XCInKSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRwLkYgPSAoZC5tYXRjaChyZWZyZWdleCl8fFtdKVsxXTtcblx0XHRcdFx0XHRcdGlmKHAuRi5pbmRleE9mKFwiOlwiKSA+IC0xKSBhcnJheWYucHVzaChbc2FmZV9kZWNvZGVfcmFuZ2UocC5GKSwgcC5GXSk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmKGNyZWZbMF0uaW5kZXhPZigndD1cInNoYXJlZFwiJykgPiAtMSkge1xuXHRcdFx0XHRcdFx0Ly8gVE9ETzogcGFyc2UgZm9ybXVsYVxuXHRcdFx0XHRcdFx0ZnRhZyA9IHBhcnNleG1sdGFnKGNyZWZbMF0pO1xuXHRcdFx0XHRcdFx0dmFyIF9fX2YgPSB1bmVzY2FwZXhtbCh1dGY4cmVhZChjcmVmWzFdKSk7XG5cdFx0XHRcdFx0XHRpZighb3B0cy54bGZuKSBfX19mID0gX3hsZm4oX19fZik7XG5cdFx0XHRcdFx0XHRzaGFyZWRmW3BhcnNlSW50KGZ0YWcuc2ksIDEwKV0gPSBbZnRhZywgX19fZiwgdGFnLnJdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmKChjcmVmPWQubWF0Y2goLzxmW14+XSpcXC8+LykpKSB7XG5cdFx0XHRcdFx0ZnRhZyA9IHBhcnNleG1sdGFnKGNyZWZbMF0pO1xuXHRcdFx0XHRcdGlmKHNoYXJlZGZbZnRhZy5zaV0pIHAuZiA9IHNoaWZ0X2Zvcm11bGFfeGxzeChzaGFyZWRmW2Z0YWcuc2ldWzFdLCBzaGFyZWRmW2Z0YWcuc2ldWzJdLypbMF0ucmVmKi8sIHRhZy5yKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvKiBUT0RPOiBmYWN0b3Igb3V0IGNvbnRhaW5zIGxvZ2ljICovXG5cdFx0XHRcdHZhciBfdGFnID0gZGVjb2RlX2NlbGwodGFnLnIpO1xuXHRcdFx0XHRmb3IoaSA9IDA7IGkgPCBhcnJheWYubGVuZ3RoOyArK2kpXG5cdFx0XHRcdFx0aWYoX3RhZy5yID49IGFycmF5ZltpXVswXS5zLnIgJiYgX3RhZy5yIDw9IGFycmF5ZltpXVswXS5lLnIpXG5cdFx0XHRcdFx0XHRpZihfdGFnLmMgPj0gYXJyYXlmW2ldWzBdLnMuYyAmJiBfdGFnLmMgPD0gYXJyYXlmW2ldWzBdLmUuYylcblx0XHRcdFx0XHRcdFx0cC5GID0gYXJyYXlmW2ldWzFdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZih0YWcudCA9PSBudWxsICYmIHAudiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGlmKHAuZiB8fCBwLkYpIHtcblx0XHRcdFx0XHRwLnYgPSAwOyBwLnQgPSBcIm5cIjtcblx0XHRcdFx0fSBlbHNlIGlmKCFzaGVldFN0dWJzKSBjb250aW51ZTtcblx0XHRcdFx0ZWxzZSBwLnQgPSBcInpcIjtcblx0XHRcdH1cblx0XHRcdGVsc2UgcC50ID0gdGFnLnQgfHwgXCJuXCI7XG5cdFx0XHRpZihndWVzcy5zLmMgPiB0YWdjKSBndWVzcy5zLmMgPSB0YWdjO1xuXHRcdFx0aWYoZ3Vlc3MuZS5jIDwgdGFnYykgZ3Vlc3MuZS5jID0gdGFnYztcblx0XHRcdC8qIDE4LjE4LjExIHQgU1RfQ2VsbFR5cGUgKi9cblx0XHRcdHN3aXRjaChwLnQpIHtcblx0XHRcdFx0Y2FzZSAnbic6XG5cdFx0XHRcdFx0aWYocC52ID09IFwiXCIgfHwgcC52ID09IG51bGwpIHtcblx0XHRcdFx0XHRcdGlmKCFzaGVldFN0dWJzKSBjb250aW51ZTtcblx0XHRcdFx0XHRcdHAudCA9ICd6Jztcblx0XHRcdFx0XHR9IGVsc2UgcC52ID0gcGFyc2VGbG9hdChwLnYpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdzJzpcblx0XHRcdFx0XHRpZih0eXBlb2YgcC52ID09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0XHRpZighc2hlZXRTdHVicykgY29udGludWU7XG5cdFx0XHRcdFx0XHRwLnQgPSAneic7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNzdHIgPSBzdHJzW3BhcnNlSW50KHAudiwgMTApXTtcblx0XHRcdFx0XHRcdHAudiA9IHNzdHIudDtcblx0XHRcdFx0XHRcdHAuciA9IHNzdHIucjtcblx0XHRcdFx0XHRcdGlmKG9wdHMuY2VsbEhUTUwpIHAuaCA9IHNzdHIuaDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ3N0cic6XG5cdFx0XHRcdFx0cC50ID0gXCJzXCI7XG5cdFx0XHRcdFx0cC52ID0gKHAudiE9bnVsbCkgPyB1dGY4cmVhZChwLnYpIDogJyc7XG5cdFx0XHRcdFx0aWYob3B0cy5jZWxsSFRNTCkgcC5oID0gZXNjYXBlaHRtbChwLnYpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdpbmxpbmVTdHInOlxuXHRcdFx0XHRcdGNyZWYgPSBkLm1hdGNoKGlzcmVnZXgpO1xuXHRcdFx0XHRcdHAudCA9ICdzJztcblx0XHRcdFx0XHRpZihjcmVmICE9IG51bGwgJiYgKHNzdHIgPSBwYXJzZV9zaShjcmVmWzFdKSkpIHtcblx0XHRcdFx0XHRcdHAudiA9IHNzdHIudDtcblx0XHRcdFx0XHRcdGlmKG9wdHMuY2VsbEhUTUwpIHAuaCA9IHNzdHIuaDtcblx0XHRcdFx0XHR9IGVsc2UgcC52ID0gXCJcIjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnYic6IHAudiA9IHBhcnNleG1sYm9vbChwLnYpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnZCc6XG5cdFx0XHRcdFx0aWYob3B0cy5jZWxsRGF0ZXMpIHAudiA9IHBhcnNlRGF0ZShwLnYsIDEpO1xuXHRcdFx0XHRcdGVsc2UgeyBwLnYgPSBkYXRlbnVtKHBhcnNlRGF0ZShwLnYsIDEpKTsgcC50ID0gJ24nOyB9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdC8qIGVycm9yIHN0cmluZyBpbiAudywgbnVtYmVyIGluIC52ICovXG5cdFx0XHRcdGNhc2UgJ2UnOlxuXHRcdFx0XHRcdGlmKCFvcHRzIHx8IG9wdHMuY2VsbFRleHQgIT09IGZhbHNlKSBwLncgPSBwLnY7XG5cdFx0XHRcdFx0cC52ID0gUkJFcnJbcC52XTsgYnJlYWs7XG5cdFx0XHR9XG5cdFx0XHQvKiBmb3JtYXR0aW5nICovXG5cdFx0XHRmbXRpZCA9IGZpbGxpZCA9IDA7XG5cdFx0XHRjZiA9IG51bGw7XG5cdFx0XHRpZihkb19mb3JtYXQgJiYgdGFnLnMgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRjZiA9IHN0eWxlcy5DZWxsWGZbdGFnLnNdO1xuXHRcdFx0XHRpZihjZiAhPSBudWxsKSB7XG5cdFx0XHRcdFx0aWYoY2YubnVtRm10SWQgIT0gbnVsbCkgZm10aWQgPSBjZi5udW1GbXRJZDtcblx0XHRcdFx0XHRpZihvcHRzLmNlbGxTdHlsZXMpIHtcblx0XHRcdFx0XHRcdGlmKGNmLmZpbGxJZCAhPSBudWxsKSBmaWxsaWQgPSBjZi5maWxsSWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRzYWZlX2Zvcm1hdChwLCBmbXRpZCwgZmlsbGlkLCBvcHRzLCB0aGVtZXMsIHN0eWxlcyk7XG5cdFx0XHRpZihvcHRzLmNlbGxEYXRlcyAmJiBkb19mb3JtYXQgJiYgcC50ID09ICduJyAmJiBTU0YuaXNfZGF0ZShTU0YuX3RhYmxlW2ZtdGlkXSkpIHsgcC50ID0gJ2QnOyBwLnYgPSBudW1kYXRlKHAudik7IH1cblx0XHRcdGlmKGRlbnNlKSB7XG5cdFx0XHRcdHZhciBfciA9IGRlY29kZV9jZWxsKHRhZy5yKTtcblx0XHRcdFx0aWYoIXNbX3Iucl0pIHNbX3Iucl0gPSBbXTtcblx0XHRcdFx0c1tfci5yXVtfci5jXSA9IHA7XG5cdFx0XHR9IGVsc2Ugc1t0YWcucl0gPSBwO1xuXHRcdH1cblx0fVxuXHRpZihyb3dzLmxlbmd0aCA+IDApIHNbJyFyb3dzJ10gPSByb3dzO1xufTsgfSkoKTtcblxuZnVuY3Rpb24gd3JpdGVfd3NfeG1sX2RhdGEod3MsIG9wdHMsIGlkeCwgd2IpIHtcblx0dmFyIG8gPSBbXSwgciA9IFtdLCByYW5nZSA9IHNhZmVfZGVjb2RlX3JhbmdlKHdzWychcmVmJ10pLCBjZWxsPVwiXCIsIHJlZiwgcnIgPSBcIlwiLCBjb2xzID0gW10sIFI9MCwgQz0wLCByb3dzID0gd3NbJyFyb3dzJ107XG5cdHZhciBkZW5zZSA9IEFycmF5LmlzQXJyYXkod3MpO1xuXHR2YXIgcGFyYW1zID0gKHtyOnJyfSksIHJvdywgaGVpZ2h0ID0gLTE7XG5cdGZvcihDID0gcmFuZ2Uucy5jOyBDIDw9IHJhbmdlLmUuYzsgKytDKSBjb2xzW0NdID0gZW5jb2RlX2NvbChDKTtcblx0Zm9yKFIgPSByYW5nZS5zLnI7IFIgPD0gcmFuZ2UuZS5yOyArK1IpIHtcblx0XHRyID0gW107XG5cdFx0cnIgPSBlbmNvZGVfcm93KFIpO1xuXHRcdGZvcihDID0gcmFuZ2Uucy5jOyBDIDw9IHJhbmdlLmUuYzsgKytDKSB7XG5cdFx0XHRyZWYgPSBjb2xzW0NdICsgcnI7XG5cdFx0XHR2YXIgX2NlbGwgPSBkZW5zZSA/ICh3c1tSXXx8W10pW0NdOiB3c1tyZWZdO1xuXHRcdFx0aWYoX2NlbGwgPT09IHVuZGVmaW5lZCkgY29udGludWU7XG5cdFx0XHRpZigoY2VsbCA9IHdyaXRlX3dzX3htbF9jZWxsKF9jZWxsLCByZWYsIHdzLCBvcHRzLCBpZHgsIHdiKSkgIT0gbnVsbCkgci5wdXNoKGNlbGwpO1xuXHRcdH1cblx0XHRpZihyLmxlbmd0aCA+IDAgfHwgKHJvd3MgJiYgcm93c1tSXSkpIHtcblx0XHRcdHBhcmFtcyA9ICh7cjpycn0pO1xuXHRcdFx0aWYocm93cyAmJiByb3dzW1JdKSB7XG5cdFx0XHRcdHJvdyA9IHJvd3NbUl07XG5cdFx0XHRcdGlmKHJvdy5oaWRkZW4pIHBhcmFtcy5oaWRkZW4gPSAxO1xuXHRcdFx0XHRoZWlnaHQgPSAtMTtcblx0XHRcdFx0aWYocm93LmhweCkgaGVpZ2h0ID0gcHgycHQocm93LmhweCk7XG5cdFx0XHRcdGVsc2UgaWYocm93LmhwdCkgaGVpZ2h0ID0gcm93LmhwdDtcblx0XHRcdFx0aWYoaGVpZ2h0ID4gLTEpIHsgcGFyYW1zLmh0ID0gaGVpZ2h0OyBwYXJhbXMuY3VzdG9tSGVpZ2h0ID0gMTsgfVxuXHRcdFx0XHRpZihyb3cubGV2ZWwpIHsgcGFyYW1zLm91dGxpbmVMZXZlbCA9IHJvdy5sZXZlbDsgfVxuXHRcdFx0fVxuXHRcdFx0b1tvLmxlbmd0aF0gPSAod3JpdGV4dGFnKCdyb3cnLCByLmpvaW4oXCJcIiksIHBhcmFtcykpO1xuXHRcdH1cblx0fVxuXHRpZihyb3dzKSBmb3IoOyBSIDwgcm93cy5sZW5ndGg7ICsrUikge1xuXHRcdGlmKHJvd3MgJiYgcm93c1tSXSkge1xuXHRcdFx0cGFyYW1zID0gKHtyOlIrMX0pO1xuXHRcdFx0cm93ID0gcm93c1tSXTtcblx0XHRcdGlmKHJvdy5oaWRkZW4pIHBhcmFtcy5oaWRkZW4gPSAxO1xuXHRcdFx0aGVpZ2h0ID0gLTE7XG5cdFx0XHRpZiAocm93LmhweCkgaGVpZ2h0ID0gcHgycHQocm93LmhweCk7XG5cdFx0XHRlbHNlIGlmIChyb3cuaHB0KSBoZWlnaHQgPSByb3cuaHB0O1xuXHRcdFx0aWYgKGhlaWdodCA+IC0xKSB7IHBhcmFtcy5odCA9IGhlaWdodDsgcGFyYW1zLmN1c3RvbUhlaWdodCA9IDE7IH1cblx0XHRcdGlmIChyb3cubGV2ZWwpIHsgcGFyYW1zLm91dGxpbmVMZXZlbCA9IHJvdy5sZXZlbDsgfVxuXHRcdFx0b1tvLmxlbmd0aF0gPSAod3JpdGV4dGFnKCdyb3cnLCBcIlwiLCBwYXJhbXMpKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG8uam9pbihcIlwiKTtcbn1cblxudmFyIFdTX1hNTF9ST09UID0gd3JpdGV4dGFnKCd3b3Jrc2hlZXQnLCBudWxsLCB7XG5cdCd4bWxucyc6IFhNTE5TLm1haW5bMF0sXG5cdCd4bWxuczpyJzogWE1MTlMuclxufSk7XG5cbmZ1bmN0aW9uIHdyaXRlX3dzX3htbChpZHgsIG9wdHMsIHdiLCByZWxzKSB7XG5cdHZhciBvID0gW1hNTF9IRUFERVIsIFdTX1hNTF9ST09UXTtcblx0dmFyIHMgPSB3Yi5TaGVldE5hbWVzW2lkeF0sIHNpZHggPSAwLCByZGF0YSA9IFwiXCI7XG5cdHZhciB3cyA9IHdiLlNoZWV0c1tzXTtcblx0aWYod3MgPT0gbnVsbCkgd3MgPSB7fTtcblx0dmFyIHJlZiA9IHdzWychcmVmJ10gfHwgJ0ExJztcblx0dmFyIHJhbmdlID0gc2FmZV9kZWNvZGVfcmFuZ2UocmVmKTtcblx0aWYocmFuZ2UuZS5jID4gMHgzRkZGIHx8IHJhbmdlLmUuciA+IDB4RkZGRkYpIHtcblx0XHRpZihvcHRzLldURikgdGhyb3cgbmV3IEVycm9yKFwiUmFuZ2UgXCIgKyByZWYgKyBcIiBleGNlZWRzIGZvcm1hdCBsaW1pdCBBMTpYRkQxMDQ4NTc2XCIpO1xuXHRcdHJhbmdlLmUuYyA9IE1hdGgubWluKHJhbmdlLmUuYywgMHgzRkZGKTtcblx0XHRyYW5nZS5lLnIgPSBNYXRoLm1pbihyYW5nZS5lLmMsIDB4RkZGRkYpO1xuXHRcdHJlZiA9IGVuY29kZV9yYW5nZShyYW5nZSk7XG5cdH1cblx0aWYoIXJlbHMpIHJlbHMgPSB7fTtcblx0d3NbJyFjb21tZW50cyddID0gW107XG5cdHZhciBfZHJhd2luZyA9IFtdO1xuXG5cdHdyaXRlX3dzX3htbF9zaGVldHByKHdzLCB3YiwgaWR4LCBvcHRzLCBvKTtcblxuXHRvW28ubGVuZ3RoXSA9ICh3cml0ZXh0YWcoJ2RpbWVuc2lvbicsIG51bGwsIHsncmVmJzogcmVmfSkpO1xuXG5cdG9bby5sZW5ndGhdID0gd3JpdGVfd3NfeG1sX3NoZWV0dmlld3Mod3MsIG9wdHMsIGlkeCwgd2IpO1xuXG5cdC8qIFRPRE86IHN0b3JlIGluIFdCLCBwcm9jZXNzIHN0eWxlcyAqL1xuXHRpZihvcHRzLnNoZWV0Rm9ybWF0KSBvW28ubGVuZ3RoXSA9ICh3cml0ZXh0YWcoJ3NoZWV0Rm9ybWF0UHInLCBudWxsLCB7XG5cdFx0ZGVmYXVsdFJvd0hlaWdodDpvcHRzLnNoZWV0Rm9ybWF0LmRlZmF1bHRSb3dIZWlnaHR8fCcxNicsXG5cdFx0YmFzZUNvbFdpZHRoOm9wdHMuc2hlZXRGb3JtYXQuYmFzZUNvbFdpZHRofHwnMTAnLFxuXHRcdG91dGxpbmVMZXZlbFJvdzpvcHRzLnNoZWV0Rm9ybWF0Lm91dGxpbmVMZXZlbFJvd3x8JzcnXG5cdH0pKTtcblxuXHRpZih3c1snIWNvbHMnXSAhPSBudWxsICYmIHdzWychY29scyddLmxlbmd0aCA+IDApIG9bby5sZW5ndGhdID0gKHdyaXRlX3dzX3htbF9jb2xzKHdzLCB3c1snIWNvbHMnXSkpO1xuXG5cdG9bc2lkeCA9IG8ubGVuZ3RoXSA9ICc8c2hlZXREYXRhLz4nO1xuXHR3c1snIWxpbmtzJ10gPSBbXTtcblx0aWYod3NbJyFyZWYnXSAhPSBudWxsKSB7XG5cdFx0cmRhdGEgPSB3cml0ZV93c194bWxfZGF0YSh3cywgb3B0cywgaWR4LCB3YiwgcmVscyk7XG5cdFx0aWYocmRhdGEubGVuZ3RoID4gMCkgb1tvLmxlbmd0aF0gPSAocmRhdGEpO1xuXHR9XG5cdGlmKG8ubGVuZ3RoPnNpZHgrMSkgeyBvW28ubGVuZ3RoXSA9ICgnPC9zaGVldERhdGE+Jyk7IG9bc2lkeF09b1tzaWR4XS5yZXBsYWNlKFwiLz5cIixcIj5cIik7IH1cblxuXHQvKiBzaGVldENhbGNQciAqL1xuXG5cdGlmKHdzWychcHJvdGVjdCddKSBvW28ubGVuZ3RoXSA9IHdyaXRlX3dzX3htbF9wcm90ZWN0aW9uKHdzWychcHJvdGVjdCddKTtcblxuXHQvKiBwcm90ZWN0ZWRSYW5nZXMgKi9cblx0Lyogc2NlbmFyaW9zICovXG5cblx0aWYod3NbJyFhdXRvZmlsdGVyJ10gIT0gbnVsbCkgb1tvLmxlbmd0aF0gPSB3cml0ZV93c194bWxfYXV0b2ZpbHRlcih3c1snIWF1dG9maWx0ZXInXSwgd3MsIHdiLCBpZHgpO1xuXG5cdC8qIHNvcnRTdGF0ZSAqL1xuXHQvKiBkYXRhQ29uc29saWRhdGUgKi9cblx0LyogY3VzdG9tU2hlZXRWaWV3cyAqL1xuXG5cdGlmKHdzWychbWVyZ2VzJ10gIT0gbnVsbCAmJiB3c1snIW1lcmdlcyddLmxlbmd0aCA+IDApIG9bby5sZW5ndGhdID0gKHdyaXRlX3dzX3htbF9tZXJnZXMod3NbJyFtZXJnZXMnXSkpO1xuXG5cdC8qIHBob25ldGljUHIgKi9cblx0LyogY29uZGl0aW9uYWxGb3JtYXR0aW5nICovXG5cdC8qIGRhdGFWYWxpZGF0aW9ucyAqL1xuXG5cdHZhciByZWxjID0gLTEsIHJlbCwgcklkID0gLTE7XG5cdGlmKHdzWychbGlua3MnXS5sZW5ndGggPiAwKSB7XG5cdFx0b1tvLmxlbmd0aF0gPSBcIjxoeXBlcmxpbmtzPlwiO1xud3NbJyFsaW5rcyddLmZvckVhY2goZnVuY3Rpb24obCkge1xuXHRcdFx0aWYoIWxbMV0uVGFyZ2V0KSByZXR1cm47XG5cdFx0XHRyZWwgPSAoe1wicmVmXCI6bFswXX0pO1xuXHRcdFx0aWYobFsxXS5UYXJnZXQuY2hhckF0KDApICE9IFwiI1wiKSB7XG5cdFx0XHRcdHJJZCA9IGFkZF9yZWxzKHJlbHMsIC0xLCBlc2NhcGV4bWwobFsxXS5UYXJnZXQpLnJlcGxhY2UoLyMuKiQvLCBcIlwiKSwgUkVMUy5ITElOSyk7XG5cdFx0XHRcdHJlbFtcInI6aWRcIl0gPSBcInJJZFwiK3JJZDtcblx0XHRcdH1cblx0XHRcdGlmKChyZWxjID0gbFsxXS5UYXJnZXQuaW5kZXhPZihcIiNcIikpID4gLTEpIHJlbC5sb2NhdGlvbiA9IGVzY2FwZXhtbChsWzFdLlRhcmdldC5zbGljZShyZWxjKzEpKTtcblx0XHRcdGlmKGxbMV0uVG9vbHRpcCkgcmVsLnRvb2x0aXAgPSBlc2NhcGV4bWwobFsxXS5Ub29sdGlwKTtcblx0XHRcdG9bby5sZW5ndGhdID0gd3JpdGV4dGFnKFwiaHlwZXJsaW5rXCIsbnVsbCxyZWwpO1xuXHRcdH0pO1xuXHRcdG9bby5sZW5ndGhdID0gXCI8L2h5cGVybGlua3M+XCI7XG5cdH1cblx0ZGVsZXRlIHdzWychbGlua3MnXTtcblxuXHQvKiBwcmludE9wdGlvbnMgKi9cblxuXHRpZih3c1snIW1hcmdpbnMnXSAhPSBudWxsKSBvW28ubGVuZ3RoXSA9ICB3cml0ZV93c194bWxfbWFyZ2lucyh3c1snIW1hcmdpbnMnXSk7XG5cblx0LyogcGFnZVNldHVwICovXG5cdC8qIGhlYWRlckZvb3RlciAqL1xuXHQvKiByb3dCcmVha3MgKi9cblx0LyogY29sQnJlYWtzICovXG5cdC8qIGN1c3RvbVByb3BlcnRpZXMgKi9cblx0LyogY2VsbFdhdGNoZXMgKi9cblxuXHRpZighb3B0cyB8fCBvcHRzLmlnbm9yZUVDIHx8IChvcHRzLmlnbm9yZUVDID09ICh2b2lkIDApKSkgb1tvLmxlbmd0aF0gPSB3cml0ZXRhZyhcImlnbm9yZWRFcnJvcnNcIiwgd3JpdGV4dGFnKFwiaWdub3JlZEVycm9yXCIsIG51bGwsIHtudW1iZXJTdG9yZWRBc1RleHQ6MSwgc3FyZWY6cmVmfSkpO1xuXG5cdC8qIHNtYXJ0VGFncyAqL1xuXG5cdGlmKF9kcmF3aW5nLmxlbmd0aCA+IDApIHtcblx0XHRySWQgPSBhZGRfcmVscyhyZWxzLCAtMSwgXCIuLi9kcmF3aW5ncy9kcmF3aW5nXCIgKyAoaWR4KzEpICsgXCIueG1sXCIsIFJFTFMuRFJBVyk7XG5cdFx0b1tvLmxlbmd0aF0gPSB3cml0ZXh0YWcoXCJkcmF3aW5nXCIsIG51bGwsIHtcInI6aWRcIjpcInJJZFwiICsgcklkfSk7XG5cdFx0d3NbJyFkcmF3aW5nJ10gPSBfZHJhd2luZztcblx0fVxuXG5cdGlmKHdzWychY29tbWVudHMnXS5sZW5ndGggPiAwKSB7XG5cdFx0cklkID0gYWRkX3JlbHMocmVscywgLTEsIFwiLi4vZHJhd2luZ3Mvdm1sRHJhd2luZ1wiICsgKGlkeCsxKSArIFwiLnZtbFwiLCBSRUxTLlZNTCk7XG5cdFx0b1tvLmxlbmd0aF0gPSB3cml0ZXh0YWcoXCJsZWdhY3lEcmF3aW5nXCIsIG51bGwsIHtcInI6aWRcIjpcInJJZFwiICsgcklkfSk7XG5cdFx0d3NbJyFsZWdhY3knXSA9IHJJZDtcblx0fVxuXG5cdC8qIGxlZ2FjeURyYXdpbmdIRiAqL1xuXHQvKiBwaWN0dXJlICovXG5cdC8qIG9sZU9iamVjdHMgKi9cblx0LyogY29udHJvbHMgKi9cblx0Lyogd2ViUHVibGlzaEl0ZW1zICovXG5cdC8qIHRhYmxlUGFydHMgKi9cblx0LyogZXh0THN0ICovXG5cblx0aWYoby5sZW5ndGg+MSkgeyBvW28ubGVuZ3RoXSA9ICgnPC93b3Jrc2hlZXQ+Jyk7IG9bMV09b1sxXS5yZXBsYWNlKFwiLz5cIixcIj5cIik7IH1cblx0cmV0dXJuIG8uam9pbihcIlwiKTtcbn1cblxuLyogW01TLVhMU0JdIDIuNC43MjYgQnJ0Um93SGRyICovXG5mdW5jdGlvbiBwYXJzZV9CcnRSb3dIZHIoZGF0YSwgbGVuZ3RoKSB7XG5cdHZhciB6ID0gKHt9KTtcblx0dmFyIHRndCA9IGRhdGEubCArIGxlbmd0aDtcblx0ei5yID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHRkYXRhLmwgKz0gNDsgLy8gVE9ETzogaXhmZVxuXHR2YXIgbWl5UncgPSBkYXRhLnJlYWRfc2hpZnQoMik7XG5cdGRhdGEubCArPSAxOyAvLyBUT0RPOiB0b3AvYm90IHBhZGRpbmdcblx0dmFyIGZsYWdzID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHRkYXRhLmwgPSB0Z3Q7XG5cdGlmKGZsYWdzICYgMHgwNykgei5sZXZlbCA9IGZsYWdzICYgMHgwNztcblx0aWYoZmxhZ3MgJiAweDEwKSB6LmhpZGRlbiA9IHRydWU7XG5cdGlmKGZsYWdzICYgMHgyMCkgei5ocHQgPSBtaXlSdyAvIDIwO1xuXHRyZXR1cm4gejtcbn1cbmZ1bmN0aW9uIHdyaXRlX0JydFJvd0hkcihSLCByYW5nZSwgd3MpIHtcblx0dmFyIG8gPSBuZXdfYnVmKDE3KzgqMTYpO1xuXHR2YXIgcm93ID0gKHdzWychcm93cyddfHxbXSlbUl18fHt9O1xuXHRvLndyaXRlX3NoaWZ0KDQsIFIpO1xuXG5cdG8ud3JpdGVfc2hpZnQoNCwgMCk7IC8qIFRPRE86IGl4ZmUgKi9cblxuXHR2YXIgbWl5UncgPSAweDAxNDA7XG5cdGlmKHJvdy5ocHgpIG1peVJ3ID0gcHgycHQocm93LmhweCkgKiAyMDtcblx0ZWxzZSBpZihyb3cuaHB0KSBtaXlSdyA9IHJvdy5ocHQgKiAyMDtcblx0by53cml0ZV9zaGlmdCgyLCBtaXlSdyk7XG5cblx0by53cml0ZV9zaGlmdCgxLCAwKTsgLyogdG9wL2JvdCBwYWRkaW5nICovXG5cblx0dmFyIGZsYWdzID0gMHgwO1xuXHRpZihyb3cubGV2ZWwpIGZsYWdzIHw9IHJvdy5sZXZlbDtcblx0aWYocm93LmhpZGRlbikgZmxhZ3MgfD0gMHgxMDtcblx0aWYocm93LmhweCB8fCByb3cuaHB0KSBmbGFncyB8PSAweDIwO1xuXHRvLndyaXRlX3NoaWZ0KDEsIGZsYWdzKTtcblxuXHRvLndyaXRlX3NoaWZ0KDEsIDApOyAvKiBwaG9uZXRpYyBndWlkZSAqL1xuXG5cdC8qIFtNUy1YTFNCXSAyLjUuOCBCcnRDb2xTcGFuIGV4cGxhaW5zIHRoZSBtZWNoYW5pc20gKi9cblx0dmFyIG5jb2xzcGFuID0gMCwgbGNzID0gby5sO1xuXHRvLmwgKz0gNDtcblxuXHR2YXIgY2FkZHIgPSB7cjpSLCBjOjB9O1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkge1xuXHRcdGlmKChyYW5nZS5zLmMgPiAoKGkrMSkgPDwgMTApKSB8fCAocmFuZ2UuZS5jIDwgKGkgPDwgMTApKSkgY29udGludWU7XG5cdFx0dmFyIGZpcnN0ID0gLTEsIGxhc3QgPSAtMTtcblx0XHRmb3IodmFyIGogPSAoaTw8MTApOyBqIDwgKChpKzEpPDwxMCk7ICsraikge1xuXHRcdFx0Y2FkZHIuYyA9IGo7XG5cdFx0XHR2YXIgY2VsbCA9IEFycmF5LmlzQXJyYXkod3MpID8gKHdzW2NhZGRyLnJdfHxbXSlbY2FkZHIuY10gOiB3c1tlbmNvZGVfY2VsbChjYWRkcildO1xuXHRcdFx0aWYoY2VsbCkgeyBpZihmaXJzdCA8IDApIGZpcnN0ID0gajsgbGFzdCA9IGo7IH1cblx0XHR9XG5cdFx0aWYoZmlyc3QgPCAwKSBjb250aW51ZTtcblx0XHQrK25jb2xzcGFuO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgZmlyc3QpO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgbGFzdCk7XG5cdH1cblxuXHR2YXIgbCA9IG8ubDtcblx0by5sID0gbGNzO1xuXHRvLndyaXRlX3NoaWZ0KDQsIG5jb2xzcGFuKTtcblx0by5sID0gbDtcblxuXHRyZXR1cm4gby5sZW5ndGggPiBvLmwgPyBvLnNsaWNlKDAsIG8ubCkgOiBvO1xufVxuZnVuY3Rpb24gd3JpdGVfcm93X2hlYWRlcihiYSwgd3MsIHJhbmdlLCBSKSB7XG5cdHZhciBvID0gd3JpdGVfQnJ0Um93SGRyKFIsIHJhbmdlLCB3cyk7XG5cdGlmKChvLmxlbmd0aCA+IDE3KSB8fCAod3NbJyFyb3dzJ118fFtdKVtSXSkgd3JpdGVfcmVjb3JkKGJhLCAnQnJ0Um93SGRyJywgbyk7XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuODIwIEJydFdzRGltICovXG52YXIgcGFyc2VfQnJ0V3NEaW0gPSBwYXJzZV9VbmNoZWNrZWRSZlg7XG52YXIgd3JpdGVfQnJ0V3NEaW0gPSB3cml0ZV9VbmNoZWNrZWRSZlg7XG5cbi8qIFtNUy1YTFNCXSAyLjQuODIxIEJydFdzRm10SW5mbyAqL1xuZnVuY3Rpb24gcGFyc2VfQnJ0V3NGbXRJbmZvKCkge1xufVxuLy9mdW5jdGlvbiB3cml0ZV9CcnRXc0ZtdEluZm8od3MsIG8pIHsgfVxuXG4vKiBbTVMtWExTQl0gMi40LjgyMyBCcnRXc1Byb3AgKi9cbmZ1bmN0aW9uIHBhcnNlX0JydFdzUHJvcChkYXRhLCBsZW5ndGgpIHtcblx0dmFyIHogPSB7fTtcblx0dmFyIGYgPSBkYXRhW2RhdGEubF07ICsrZGF0YS5sO1xuXHR6LmFib3ZlID0gIShmICYgMHg0MCk7XG5cdHoubGVmdCAgPSAhKGYgJiAweDgwKTtcblx0LyogVE9ETzogcHVsbCBmbGFncyAqL1xuXHRkYXRhLmwgKz0gMTg7XG5cdHoubmFtZSA9IHBhcnNlX1hMU0JDb2RlTmFtZShkYXRhLCBsZW5ndGggLSAxOSk7XG5cdHJldHVybiB6O1xufVxuZnVuY3Rpb24gd3JpdGVfQnJ0V3NQcm9wKHN0ciwgb3V0bCwgbykge1xuXHRpZihvID09IG51bGwpIG8gPSBuZXdfYnVmKDg0KzQqc3RyLmxlbmd0aCk7XG5cdHZhciBmID0gMHhDMDtcblx0aWYob3V0bCkge1xuXHRcdGlmKG91dGwuYWJvdmUpIGYgJj0gfjB4NDA7XG5cdFx0aWYob3V0bC5sZWZ0KSAgZiAmPSB+MHg4MDtcblx0fVxuXHRvLndyaXRlX3NoaWZ0KDEsIGYpO1xuXHRmb3IodmFyIGkgPSAxOyBpIDwgMzsgKytpKSBvLndyaXRlX3NoaWZ0KDEsMCk7XG5cdHdyaXRlX0JydENvbG9yKHthdXRvOjF9LCBvKTtcblx0by53cml0ZV9zaGlmdCgtNCwtMSk7XG5cdG8ud3JpdGVfc2hpZnQoLTQsLTEpO1xuXHR3cml0ZV9YTFNCQ29kZU5hbWUoc3RyLCBvKTtcblx0cmV0dXJuIG8uc2xpY2UoMCwgby5sKTtcbn1cblxuLyogW01TLVhMU0JdIDIuNC4zMDYgQnJ0Q2VsbEJsYW5rICovXG5mdW5jdGlvbiBwYXJzZV9CcnRDZWxsQmxhbmsoZGF0YSkge1xuXHR2YXIgY2VsbCA9IHBhcnNlX1hMU0JDZWxsKGRhdGEpO1xuXHRyZXR1cm4gW2NlbGxdO1xufVxuZnVuY3Rpb24gd3JpdGVfQnJ0Q2VsbEJsYW5rKGNlbGwsIG5jZWxsLCBvKSB7XG5cdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoOCk7XG5cdHJldHVybiB3cml0ZV9YTFNCQ2VsbChuY2VsbCwgbyk7XG59XG5mdW5jdGlvbiBwYXJzZV9CcnRTaG9ydEJsYW5rKGRhdGEpIHtcblx0dmFyIGNlbGwgPSBwYXJzZV9YTFNCU2hvcnRDZWxsKGRhdGEpO1xuXHRyZXR1cm4gW2NlbGxdO1xufVxuZnVuY3Rpb24gd3JpdGVfQnJ0U2hvcnRCbGFuayhjZWxsLCBuY2VsbCwgbykge1xuXHRpZihvID09IG51bGwpIG8gPSBuZXdfYnVmKDQpO1xuXHRyZXR1cm4gd3JpdGVfWExTQlNob3J0Q2VsbChuY2VsbCwgbyk7XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuMzA3IEJydENlbGxCb29sICovXG5mdW5jdGlvbiBwYXJzZV9CcnRDZWxsQm9vbChkYXRhKSB7XG5cdHZhciBjZWxsID0gcGFyc2VfWExTQkNlbGwoZGF0YSk7XG5cdHZhciBmQm9vbCA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblx0cmV0dXJuIFtjZWxsLCBmQm9vbCwgJ2InXTtcbn1cbmZ1bmN0aW9uIHdyaXRlX0JydENlbGxCb29sKGNlbGwsIG5jZWxsLCBvKSB7XG5cdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoOSk7XG5cdHdyaXRlX1hMU0JDZWxsKG5jZWxsLCBvKTtcblx0by53cml0ZV9zaGlmdCgxLCBjZWxsLnYgPyAxIDogMCk7XG5cdHJldHVybiBvO1xufVxuZnVuY3Rpb24gcGFyc2VfQnJ0U2hvcnRCb29sKGRhdGEpIHtcblx0dmFyIGNlbGwgPSBwYXJzZV9YTFNCU2hvcnRDZWxsKGRhdGEpO1xuXHR2YXIgZkJvb2wgPSBkYXRhLnJlYWRfc2hpZnQoMSk7XG5cdHJldHVybiBbY2VsbCwgZkJvb2wsICdiJ107XG59XG5mdW5jdGlvbiB3cml0ZV9CcnRTaG9ydEJvb2woY2VsbCwgbmNlbGwsIG8pIHtcblx0aWYobyA9PSBudWxsKSBvID0gbmV3X2J1Zig1KTtcblx0d3JpdGVfWExTQlNob3J0Q2VsbChuY2VsbCwgbyk7XG5cdG8ud3JpdGVfc2hpZnQoMSwgY2VsbC52ID8gMSA6IDApO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU0JdIDIuNC4zMDggQnJ0Q2VsbEVycm9yICovXG5mdW5jdGlvbiBwYXJzZV9CcnRDZWxsRXJyb3IoZGF0YSkge1xuXHR2YXIgY2VsbCA9IHBhcnNlX1hMU0JDZWxsKGRhdGEpO1xuXHR2YXIgYkVycm9yID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHRyZXR1cm4gW2NlbGwsIGJFcnJvciwgJ2UnXTtcbn1cbmZ1bmN0aW9uIHdyaXRlX0JydENlbGxFcnJvcihjZWxsLCBuY2VsbCwgbykge1xuXHRpZihvID09IG51bGwpIG8gPSBuZXdfYnVmKDkpO1xuXHR3cml0ZV9YTFNCQ2VsbChuY2VsbCwgbyk7XG5cdG8ud3JpdGVfc2hpZnQoMSwgY2VsbC52KTtcblx0cmV0dXJuIG87XG59XG5mdW5jdGlvbiBwYXJzZV9CcnRTaG9ydEVycm9yKGRhdGEpIHtcblx0dmFyIGNlbGwgPSBwYXJzZV9YTFNCU2hvcnRDZWxsKGRhdGEpO1xuXHR2YXIgYkVycm9yID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHRyZXR1cm4gW2NlbGwsIGJFcnJvciwgJ2UnXTtcbn1cbmZ1bmN0aW9uIHdyaXRlX0JydFNob3J0RXJyb3IoY2VsbCwgbmNlbGwsIG8pIHtcblx0aWYobyA9PSBudWxsKSBvID0gbmV3X2J1Zig4KTtcblx0d3JpdGVfWExTQlNob3J0Q2VsbChuY2VsbCwgbyk7XG5cdG8ud3JpdGVfc2hpZnQoMSwgY2VsbC52KTtcblx0by53cml0ZV9zaGlmdCgyLCAwKTtcblx0by53cml0ZV9zaGlmdCgxLCAwKTtcblx0cmV0dXJuIG87XG59XG5cblxuLyogW01TLVhMU0JdIDIuNC4zMTEgQnJ0Q2VsbElzc3QgKi9cbmZ1bmN0aW9uIHBhcnNlX0JydENlbGxJc3N0KGRhdGEpIHtcblx0dmFyIGNlbGwgPSBwYXJzZV9YTFNCQ2VsbChkYXRhKTtcblx0dmFyIGlzc3QgPSBkYXRhLnJlYWRfc2hpZnQoNCk7XG5cdHJldHVybiBbY2VsbCwgaXNzdCwgJ3MnXTtcbn1cbmZ1bmN0aW9uIHdyaXRlX0JydENlbGxJc3N0KGNlbGwsIG5jZWxsLCBvKSB7XG5cdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoMTIpO1xuXHR3cml0ZV9YTFNCQ2VsbChuY2VsbCwgbyk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgbmNlbGwudik7XG5cdHJldHVybiBvO1xufVxuZnVuY3Rpb24gcGFyc2VfQnJ0U2hvcnRJc3N0KGRhdGEpIHtcblx0dmFyIGNlbGwgPSBwYXJzZV9YTFNCU2hvcnRDZWxsKGRhdGEpO1xuXHR2YXIgaXNzdCA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0cmV0dXJuIFtjZWxsLCBpc3N0LCAncyddO1xufVxuZnVuY3Rpb24gd3JpdGVfQnJ0U2hvcnRJc3N0KGNlbGwsIG5jZWxsLCBvKSB7XG5cdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoOCk7XG5cdHdyaXRlX1hMU0JTaG9ydENlbGwobmNlbGwsIG8pO1xuXHRvLndyaXRlX3NoaWZ0KDQsIG5jZWxsLnYpO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU0JdIDIuNC4zMTMgQnJ0Q2VsbFJlYWwgKi9cbmZ1bmN0aW9uIHBhcnNlX0JydENlbGxSZWFsKGRhdGEpIHtcblx0dmFyIGNlbGwgPSBwYXJzZV9YTFNCQ2VsbChkYXRhKTtcblx0dmFyIHZhbHVlID0gcGFyc2VfWG51bShkYXRhKTtcblx0cmV0dXJuIFtjZWxsLCB2YWx1ZSwgJ24nXTtcbn1cbmZ1bmN0aW9uIHdyaXRlX0JydENlbGxSZWFsKGNlbGwsIG5jZWxsLCBvKSB7XG5cdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoMTYpO1xuXHR3cml0ZV9YTFNCQ2VsbChuY2VsbCwgbyk7XG5cdHdyaXRlX1hudW0oY2VsbC52LCBvKTtcblx0cmV0dXJuIG87XG59XG5mdW5jdGlvbiBwYXJzZV9CcnRTaG9ydFJlYWwoZGF0YSkge1xuXHR2YXIgY2VsbCA9IHBhcnNlX1hMU0JTaG9ydENlbGwoZGF0YSk7XG5cdHZhciB2YWx1ZSA9IHBhcnNlX1hudW0oZGF0YSk7XG5cdHJldHVybiBbY2VsbCwgdmFsdWUsICduJ107XG59XG5mdW5jdGlvbiB3cml0ZV9CcnRTaG9ydFJlYWwoY2VsbCwgbmNlbGwsIG8pIHtcblx0aWYobyA9PSBudWxsKSBvID0gbmV3X2J1ZigxMik7XG5cdHdyaXRlX1hMU0JTaG9ydENlbGwobmNlbGwsIG8pO1xuXHR3cml0ZV9YbnVtKGNlbGwudiwgbyk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTQl0gMi40LjMxNCBCcnRDZWxsUmsgKi9cbmZ1bmN0aW9uIHBhcnNlX0JydENlbGxSayhkYXRhKSB7XG5cdHZhciBjZWxsID0gcGFyc2VfWExTQkNlbGwoZGF0YSk7XG5cdHZhciB2YWx1ZSA9IHBhcnNlX1JrTnVtYmVyKGRhdGEpO1xuXHRyZXR1cm4gW2NlbGwsIHZhbHVlLCAnbiddO1xufVxuZnVuY3Rpb24gd3JpdGVfQnJ0Q2VsbFJrKGNlbGwsIG5jZWxsLCBvKSB7XG5cdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoMTIpO1xuXHR3cml0ZV9YTFNCQ2VsbChuY2VsbCwgbyk7XG5cdHdyaXRlX1JrTnVtYmVyKGNlbGwudiwgbyk7XG5cdHJldHVybiBvO1xufVxuZnVuY3Rpb24gcGFyc2VfQnJ0U2hvcnRSayhkYXRhKSB7XG5cdHZhciBjZWxsID0gcGFyc2VfWExTQlNob3J0Q2VsbChkYXRhKTtcblx0dmFyIHZhbHVlID0gcGFyc2VfUmtOdW1iZXIoZGF0YSk7XG5cdHJldHVybiBbY2VsbCwgdmFsdWUsICduJ107XG59XG5mdW5jdGlvbiB3cml0ZV9CcnRTaG9ydFJrKGNlbGwsIG5jZWxsLCBvKSB7XG5cdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoOCk7XG5cdHdyaXRlX1hMU0JTaG9ydENlbGwobmNlbGwsIG8pO1xuXHR3cml0ZV9Sa051bWJlcihjZWxsLnYsIG8pO1xuXHRyZXR1cm4gbztcbn1cblxuXG4vKiBbTVMtWExTQl0gMi40LjMxNyBCcnRDZWxsU3QgKi9cbmZ1bmN0aW9uIHBhcnNlX0JydENlbGxTdChkYXRhKSB7XG5cdHZhciBjZWxsID0gcGFyc2VfWExTQkNlbGwoZGF0YSk7XG5cdHZhciB2YWx1ZSA9IHBhcnNlX1hMV2lkZVN0cmluZyhkYXRhKTtcblx0cmV0dXJuIFtjZWxsLCB2YWx1ZSwgJ3N0ciddO1xufVxuZnVuY3Rpb24gd3JpdGVfQnJ0Q2VsbFN0KGNlbGwsIG5jZWxsLCBvKSB7XG5cdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoMTIgKyA0ICogY2VsbC52Lmxlbmd0aCk7XG5cdHdyaXRlX1hMU0JDZWxsKG5jZWxsLCBvKTtcblx0d3JpdGVfWExXaWRlU3RyaW5nKGNlbGwudiwgbyk7XG5cdHJldHVybiBvLmxlbmd0aCA+IG8ubCA/IG8uc2xpY2UoMCwgby5sKSA6IG87XG59XG5mdW5jdGlvbiBwYXJzZV9CcnRTaG9ydFN0KGRhdGEpIHtcblx0dmFyIGNlbGwgPSBwYXJzZV9YTFNCU2hvcnRDZWxsKGRhdGEpO1xuXHR2YXIgdmFsdWUgPSBwYXJzZV9YTFdpZGVTdHJpbmcoZGF0YSk7XG5cdHJldHVybiBbY2VsbCwgdmFsdWUsICdzdHInXTtcbn1cbmZ1bmN0aW9uIHdyaXRlX0JydFNob3J0U3QoY2VsbCwgbmNlbGwsIG8pIHtcblx0aWYobyA9PSBudWxsKSBvID0gbmV3X2J1Zig4ICsgNCAqIGNlbGwudi5sZW5ndGgpO1xuXHR3cml0ZV9YTFNCU2hvcnRDZWxsKG5jZWxsLCBvKTtcblx0d3JpdGVfWExXaWRlU3RyaW5nKGNlbGwudiwgbyk7XG5cdHJldHVybiBvLmxlbmd0aCA+IG8ubCA/IG8uc2xpY2UoMCwgby5sKSA6IG87XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuNjUzIEJydEZtbGFCb29sICovXG5mdW5jdGlvbiBwYXJzZV9CcnRGbWxhQm9vbChkYXRhLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIGVuZCA9IGRhdGEubCArIGxlbmd0aDtcblx0dmFyIGNlbGwgPSBwYXJzZV9YTFNCQ2VsbChkYXRhKTtcblx0Y2VsbC5yID0gb3B0c1snIXJvdyddO1xuXHR2YXIgdmFsdWUgPSBkYXRhLnJlYWRfc2hpZnQoMSk7XG5cdHZhciBvID0gW2NlbGwsIHZhbHVlLCAnYiddO1xuXHRpZihvcHRzLmNlbGxGb3JtdWxhKSB7XG5cdFx0ZGF0YS5sICs9IDI7XG5cdFx0dmFyIGZvcm11bGEgPSBwYXJzZV9YTFNCQ2VsbFBhcnNlZEZvcm11bGEoZGF0YSwgZW5kIC0gZGF0YS5sLCBvcHRzKTtcblx0XHRvWzNdID0gc3RyaW5naWZ5X2Zvcm11bGEoZm9ybXVsYSwgbnVsbC8qcmFuZ2UqLywgY2VsbCwgb3B0cy5zdXBib29rcywgb3B0cyk7LyogVE9ETyAqL1xuXHR9XG5cdGVsc2UgZGF0YS5sID0gZW5kO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU0JdIDIuNC42NTQgQnJ0Rm1sYUVycm9yICovXG5mdW5jdGlvbiBwYXJzZV9CcnRGbWxhRXJyb3IoZGF0YSwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciBlbmQgPSBkYXRhLmwgKyBsZW5ndGg7XG5cdHZhciBjZWxsID0gcGFyc2VfWExTQkNlbGwoZGF0YSk7XG5cdGNlbGwuciA9IG9wdHNbJyFyb3cnXTtcblx0dmFyIHZhbHVlID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHR2YXIgbyA9IFtjZWxsLCB2YWx1ZSwgJ2UnXTtcblx0aWYob3B0cy5jZWxsRm9ybXVsYSkge1xuXHRcdGRhdGEubCArPSAyO1xuXHRcdHZhciBmb3JtdWxhID0gcGFyc2VfWExTQkNlbGxQYXJzZWRGb3JtdWxhKGRhdGEsIGVuZCAtIGRhdGEubCwgb3B0cyk7XG5cdFx0b1szXSA9IHN0cmluZ2lmeV9mb3JtdWxhKGZvcm11bGEsIG51bGwvKnJhbmdlKi8sIGNlbGwsIG9wdHMuc3VwYm9va3MsIG9wdHMpOy8qIFRPRE8gKi9cblx0fVxuXHRlbHNlIGRhdGEubCA9IGVuZDtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuNjU1IEJydEZtbGFOdW0gKi9cbmZ1bmN0aW9uIHBhcnNlX0JydEZtbGFOdW0oZGF0YSwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciBlbmQgPSBkYXRhLmwgKyBsZW5ndGg7XG5cdHZhciBjZWxsID0gcGFyc2VfWExTQkNlbGwoZGF0YSk7XG5cdGNlbGwuciA9IG9wdHNbJyFyb3cnXTtcblx0dmFyIHZhbHVlID0gcGFyc2VfWG51bShkYXRhKTtcblx0dmFyIG8gPSBbY2VsbCwgdmFsdWUsICduJ107XG5cdGlmKG9wdHMuY2VsbEZvcm11bGEpIHtcblx0XHRkYXRhLmwgKz0gMjtcblx0XHR2YXIgZm9ybXVsYSA9IHBhcnNlX1hMU0JDZWxsUGFyc2VkRm9ybXVsYShkYXRhLCBlbmQgLSBkYXRhLmwsIG9wdHMpO1xuXHRcdG9bM10gPSBzdHJpbmdpZnlfZm9ybXVsYShmb3JtdWxhLCBudWxsLypyYW5nZSovLCBjZWxsLCBvcHRzLnN1cGJvb2tzLCBvcHRzKTsvKiBUT0RPICovXG5cdH1cblx0ZWxzZSBkYXRhLmwgPSBlbmQ7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTQl0gMi40LjY1NiBCcnRGbWxhU3RyaW5nICovXG5mdW5jdGlvbiBwYXJzZV9CcnRGbWxhU3RyaW5nKGRhdGEsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgZW5kID0gZGF0YS5sICsgbGVuZ3RoO1xuXHR2YXIgY2VsbCA9IHBhcnNlX1hMU0JDZWxsKGRhdGEpO1xuXHRjZWxsLnIgPSBvcHRzWychcm93J107XG5cdHZhciB2YWx1ZSA9IHBhcnNlX1hMV2lkZVN0cmluZyhkYXRhKTtcblx0dmFyIG8gPSBbY2VsbCwgdmFsdWUsICdzdHInXTtcblx0aWYob3B0cy5jZWxsRm9ybXVsYSkge1xuXHRcdGRhdGEubCArPSAyO1xuXHRcdHZhciBmb3JtdWxhID0gcGFyc2VfWExTQkNlbGxQYXJzZWRGb3JtdWxhKGRhdGEsIGVuZCAtIGRhdGEubCwgb3B0cyk7XG5cdFx0b1szXSA9IHN0cmluZ2lmeV9mb3JtdWxhKGZvcm11bGEsIG51bGwvKnJhbmdlKi8sIGNlbGwsIG9wdHMuc3VwYm9va3MsIG9wdHMpOy8qIFRPRE8gKi9cblx0fVxuXHRlbHNlIGRhdGEubCA9IGVuZDtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuNjgyIEJydE1lcmdlQ2VsbCAqL1xudmFyIHBhcnNlX0JydE1lcmdlQ2VsbCA9IHBhcnNlX1VuY2hlY2tlZFJmWDtcbnZhciB3cml0ZV9CcnRNZXJnZUNlbGwgPSB3cml0ZV9VbmNoZWNrZWRSZlg7XG4vKiBbTVMtWExTQl0gMi40LjEwNyBCcnRCZWdpbk1lcmdlQ2VsbHMgKi9cbmZ1bmN0aW9uIHdyaXRlX0JydEJlZ2luTWVyZ2VDZWxscyhjbnQsIG8pIHtcblx0aWYobyA9PSBudWxsKSBvID0gbmV3X2J1Zig0KTtcblx0by53cml0ZV9zaGlmdCg0LCBjbnQpO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU0JdIDIuNC42NjIgQnJ0SExpbmsgKi9cbmZ1bmN0aW9uIHBhcnNlX0JydEhMaW5rKGRhdGEsIGxlbmd0aCkge1xuXHR2YXIgZW5kID0gZGF0YS5sICsgbGVuZ3RoO1xuXHR2YXIgcmZ4ID0gcGFyc2VfVW5jaGVja2VkUmZYKGRhdGEsIDE2KTtcblx0dmFyIHJlbElkID0gcGFyc2VfWExOdWxsYWJsZVdpZGVTdHJpbmcoZGF0YSk7XG5cdHZhciBsb2MgPSBwYXJzZV9YTFdpZGVTdHJpbmcoZGF0YSk7XG5cdHZhciB0b29sdGlwID0gcGFyc2VfWExXaWRlU3RyaW5nKGRhdGEpO1xuXHR2YXIgZGlzcGxheSA9IHBhcnNlX1hMV2lkZVN0cmluZyhkYXRhKTtcblx0ZGF0YS5sID0gZW5kO1xuXHR2YXIgbyA9ICh7cmZ4OnJmeCwgcmVsSWQ6cmVsSWQsIGxvYzpsb2MsIGRpc3BsYXk6ZGlzcGxheX0pO1xuXHRpZih0b29sdGlwKSBvLlRvb2x0aXAgPSB0b29sdGlwO1xuXHRyZXR1cm4gbztcbn1cbmZ1bmN0aW9uIHdyaXRlX0JydEhMaW5rKGwsIHJJZCkge1xuXHR2YXIgbyA9IG5ld19idWYoNTArNCoobFsxXS5UYXJnZXQubGVuZ3RoICsgKGxbMV0uVG9vbHRpcCB8fCBcIlwiKS5sZW5ndGgpKTtcblx0d3JpdGVfVW5jaGVja2VkUmZYKHtzOmRlY29kZV9jZWxsKGxbMF0pLCBlOmRlY29kZV9jZWxsKGxbMF0pfSwgbyk7XG5cdHdyaXRlX1JlbElEKFwicklkXCIgKyBySWQsIG8pO1xuXHR2YXIgbG9jaWR4ID0gbFsxXS5UYXJnZXQuaW5kZXhPZihcIiNcIik7XG5cdHZhciBsb2MgPSBsb2NpZHggPT0gLTEgPyBcIlwiIDogbFsxXS5UYXJnZXQuc2xpY2UobG9jaWR4KzEpO1xuXHR3cml0ZV9YTFdpZGVTdHJpbmcobG9jIHx8IFwiXCIsIG8pO1xuXHR3cml0ZV9YTFdpZGVTdHJpbmcobFsxXS5Ub29sdGlwIHx8IFwiXCIsIG8pO1xuXHR3cml0ZV9YTFdpZGVTdHJpbmcoXCJcIiwgbyk7XG5cdHJldHVybiBvLnNsaWNlKDAsIG8ubCk7XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuNjkyIEJydFBhbmUgKi9cbmZ1bmN0aW9uIHBhcnNlX0JydFBhbmUoLypkYXRhLCBsZW5ndGgsIG9wdHMqLykge1xufVxuXG4vKiBbTVMtWExTQl0gMi40LjYgQnJ0QXJyRm1sYSAqL1xuZnVuY3Rpb24gcGFyc2VfQnJ0QXJyRm1sYShkYXRhLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIGVuZCA9IGRhdGEubCArIGxlbmd0aDtcblx0dmFyIHJmeCA9IHBhcnNlX1JmWChkYXRhLCAxNik7XG5cdHZhciBmQWx3YXlzQ2FsYyA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblx0dmFyIG8gPSBbcmZ4XTsgb1syXSA9IGZBbHdheXNDYWxjO1xuXHRpZihvcHRzLmNlbGxGb3JtdWxhKSB7XG5cdFx0dmFyIGZvcm11bGEgPSBwYXJzZV9YTFNCQXJyYXlQYXJzZWRGb3JtdWxhKGRhdGEsIGVuZCAtIGRhdGEubCwgb3B0cyk7XG5cdFx0b1sxXSA9IGZvcm11bGE7XG5cdH0gZWxzZSBkYXRhLmwgPSBlbmQ7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTQl0gMi40Ljc1MCBCcnRTaHJGbWxhICovXG5mdW5jdGlvbiBwYXJzZV9CcnRTaHJGbWxhKGRhdGEsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgZW5kID0gZGF0YS5sICsgbGVuZ3RoO1xuXHR2YXIgcmZ4ID0gcGFyc2VfVW5jaGVja2VkUmZYKGRhdGEsIDE2KTtcblx0dmFyIG8gPSBbcmZ4XTtcblx0aWYob3B0cy5jZWxsRm9ybXVsYSkge1xuXHRcdHZhciBmb3JtdWxhID0gcGFyc2VfWExTQlNoYXJlZFBhcnNlZEZvcm11bGEoZGF0YSwgZW5kIC0gZGF0YS5sLCBvcHRzKTtcblx0XHRvWzFdID0gZm9ybXVsYTtcblx0XHRkYXRhLmwgPSBlbmQ7XG5cdH0gZWxzZSBkYXRhLmwgPSBlbmQ7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTQl0gMi40LjMyMyBCcnRDb2xJbmZvICovXG4vKiBUT0RPOiBvbmNlIFhMUyBDb2xJbmZvIGlzIHNldCwgY29tYmluZSB0aGUgZnVuY3Rpb25zICovXG5mdW5jdGlvbiB3cml0ZV9CcnRDb2xJbmZvKEMsIGNvbCwgbykge1xuXHRpZihvID09IG51bGwpIG8gPSBuZXdfYnVmKDE4KTtcblx0dmFyIHAgPSBjb2xfb2JqX3coQywgY29sKTtcblx0by53cml0ZV9zaGlmdCgtNCwgQyk7XG5cdG8ud3JpdGVfc2hpZnQoLTQsIEMpO1xuXHRvLndyaXRlX3NoaWZ0KDQsIChwLndpZHRoIHx8IDEwKSAqIDI1Nik7XG5cdG8ud3JpdGVfc2hpZnQoNCwgMC8qaXhmZSovKTsgLy8gc3R5bGVcblx0dmFyIGZsYWdzID0gMDtcblx0aWYoY29sLmhpZGRlbikgZmxhZ3MgfD0gMHgwMTtcblx0aWYodHlwZW9mIHAud2lkdGggPT0gJ251bWJlcicpIGZsYWdzIHw9IDB4MDI7XG5cdGlmKGNvbC5sZXZlbCkgZmxhZ3MgfD0gKGNvbC5sZXZlbCA8PCA4KTtcblx0by53cml0ZV9zaGlmdCgyLCBmbGFncyk7IC8vIGJpdCBmbGFnXG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTQl0gMi40LjY3OCBCcnRNYXJnaW5zICovXG52YXIgQnJ0TWFyZ2luS2V5cyA9IFtcImxlZnRcIixcInJpZ2h0XCIsXCJ0b3BcIixcImJvdHRvbVwiLFwiaGVhZGVyXCIsXCJmb290ZXJcIl07XG5mdW5jdGlvbiBwYXJzZV9CcnRNYXJnaW5zKGRhdGEpIHtcblx0dmFyIG1hcmdpbnMgPSAoe30pO1xuXHRCcnRNYXJnaW5LZXlzLmZvckVhY2goZnVuY3Rpb24oaykgeyBtYXJnaW5zW2tdID0gcGFyc2VfWG51bShkYXRhLCA4KTsgfSk7XG5cdHJldHVybiBtYXJnaW5zO1xufVxuZnVuY3Rpb24gd3JpdGVfQnJ0TWFyZ2lucyhtYXJnaW5zLCBvKSB7XG5cdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoNio4KTtcblx0ZGVmYXVsdF9tYXJnaW5zKG1hcmdpbnMpO1xuXHRCcnRNYXJnaW5LZXlzLmZvckVhY2goZnVuY3Rpb24oaykgeyB3cml0ZV9YbnVtKChtYXJnaW5zKVtrXSwgbyk7IH0pO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU0JdIDIuNC4yOTkgQnJ0QmVnaW5Xc1ZpZXcgKi9cbmZ1bmN0aW9uIHBhcnNlX0JydEJlZ2luV3NWaWV3KGRhdGEpIHtcblx0dmFyIGYgPSBkYXRhLnJlYWRfc2hpZnQoMik7XG5cdGRhdGEubCArPSAyODtcblx0cmV0dXJuIHsgUlRMOiBmICYgMHgyMCB9O1xufVxuZnVuY3Rpb24gd3JpdGVfQnJ0QmVnaW5Xc1ZpZXcod3MsIFdvcmtib29rLCBvKSB7XG5cdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoMzApO1xuXHR2YXIgZiA9IDB4MzljO1xuXHRpZigoKChXb3JrYm9va3x8e30pLlZpZXdzfHxbXSlbMF18fHt9KS5SVEwpIGYgfD0gMHgyMDtcblx0by53cml0ZV9zaGlmdCgyLCBmKTsgLy8gYml0IGZsYWdcblx0by53cml0ZV9zaGlmdCg0LCAwKTtcblx0by53cml0ZV9zaGlmdCg0LCAwKTsgLy8gdmlldyBmaXJzdCByb3dcblx0by53cml0ZV9zaGlmdCg0LCAwKTsgLy8gdmlldyBmaXJzdCBjb2xcblx0by53cml0ZV9zaGlmdCgxLCAwKTsgLy8gZ3JpZGxpbmUgY29sb3IgSUNWXG5cdG8ud3JpdGVfc2hpZnQoMSwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMTAwKTsgLy8gem9vbSBzY2FsZVxuXHRvLndyaXRlX3NoaWZ0KDIsIDApO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDApO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDApO1xuXHRvLndyaXRlX3NoaWZ0KDQsIDApOyAvLyB3b3JrYm9vayB2aWV3IGlkXG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTQl0gMi40LjMwOSBCcnRDZWxsSWdub3JlRUMgKi9cbmZ1bmN0aW9uIHdyaXRlX0JydENlbGxJZ25vcmVFQyhyZWYpIHtcblx0dmFyIG8gPSBuZXdfYnVmKDI0KTtcblx0by53cml0ZV9zaGlmdCg0LCA0KTtcblx0by53cml0ZV9zaGlmdCg0LCAxKTtcblx0d3JpdGVfVW5jaGVja2VkUmZYKHJlZiwgbyk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTQl0gMi40Ljc0OCBCcnRTaGVldFByb3RlY3Rpb24gKi9cbmZ1bmN0aW9uIHdyaXRlX0JydFNoZWV0UHJvdGVjdGlvbihzcCwgbykge1xuXHRpZihvID09IG51bGwpIG8gPSBuZXdfYnVmKDE2KjQrMik7XG5cdG8ud3JpdGVfc2hpZnQoMiwgc3AucGFzc3dvcmQgPyBjcnlwdG9fQ3JlYXRlUGFzc3dvcmRWZXJpZmllcl9NZXRob2QxKHNwLnBhc3N3b3JkKSA6IDApO1xuXHRvLndyaXRlX3NoaWZ0KDQsIDEpOyAvLyB0aGlzIHJlY29yZCBzaG91bGQgbm90IGJlIHdyaXR0ZW4gaWYgbm8gcHJvdGVjdGlvblxuXHRbXG5cdFx0W1wib2JqZWN0c1wiLCAgICAgICAgICAgICBmYWxzZV0sIC8vIGZPYmplY3RzXG5cdFx0W1wic2NlbmFyaW9zXCIsICAgICAgICAgICBmYWxzZV0sIC8vIGZTY2VuYXJpb3Ncblx0XHRbXCJmb3JtYXRDZWxsc1wiLCAgICAgICAgICB0cnVlXSwgLy8gZkZvcm1hdENlbGxzXG5cdFx0W1wiZm9ybWF0Q29sdW1uc1wiLCAgICAgICAgdHJ1ZV0sIC8vIGZGb3JtYXRDb2x1bW5zXG5cdFx0W1wiZm9ybWF0Um93c1wiLCAgICAgICAgICAgdHJ1ZV0sIC8vIGZGb3JtYXRSb3dzXG5cdFx0W1wiaW5zZXJ0Q29sdW1uc1wiLCAgICAgICAgdHJ1ZV0sIC8vIGZJbnNlcnRDb2x1bW5zXG5cdFx0W1wiaW5zZXJ0Um93c1wiLCAgICAgICAgICAgdHJ1ZV0sIC8vIGZJbnNlcnRSb3dzXG5cdFx0W1wiaW5zZXJ0SHlwZXJsaW5rc1wiLCAgICAgdHJ1ZV0sIC8vIGZJbnNlcnRIeXBlcmxpbmtzXG5cdFx0W1wiZGVsZXRlQ29sdW1uc1wiLCAgICAgICAgdHJ1ZV0sIC8vIGZEZWxldGVDb2x1bW5zXG5cdFx0W1wiZGVsZXRlUm93c1wiLCAgICAgICAgICAgdHJ1ZV0sIC8vIGZEZWxldGVSb3dzXG5cdFx0W1wic2VsZWN0TG9ja2VkQ2VsbHNcIiwgICBmYWxzZV0sIC8vIGZTZWxMb2NrZWRDZWxsc1xuXHRcdFtcInNvcnRcIiwgICAgICAgICAgICAgICAgIHRydWVdLCAvLyBmU29ydFxuXHRcdFtcImF1dG9GaWx0ZXJcIiwgICAgICAgICAgIHRydWVdLCAvLyBmQXV0b0ZpbHRlclxuXHRcdFtcInBpdm90VGFibGVzXCIsICAgICAgICAgIHRydWVdLCAvLyBmUGl2b3RUYWJsZXNcblx0XHRbXCJzZWxlY3RVbmxvY2tlZENlbGxzXCIsIGZhbHNlXSAgLy8gZlNlbFVubG9ja2VkQ2VsbHNcblx0XS5mb3JFYWNoKGZ1bmN0aW9uKG4pIHtcbmlmKG5bMV0pIG8ud3JpdGVfc2hpZnQoNCwgc3BbblswXV0gIT0gbnVsbCAmJiAhc3BbblswXV0gPyAxIDogMCk7XG5cdFx0ZWxzZSAgICAgIG8ud3JpdGVfc2hpZnQoNCwgc3BbblswXV0gIT0gbnVsbCAmJiBzcFtuWzBdXSA/IDAgOiAxKTtcblx0fSk7XG5cdHJldHVybiBvO1xufVxuXG5mdW5jdGlvbiBwYXJzZV9CcnREVmFsKC8qZGF0YSwgbGVuZ3RoLCBvcHRzKi8pIHtcbn1cbmZ1bmN0aW9uIHBhcnNlX0JydERWYWwxNCgvKmRhdGEsIGxlbmd0aCwgb3B0cyovKSB7XG59XG4vKiBbTVMtWExTQl0gMi4xLjcuNjEgV29ya3NoZWV0ICovXG5mdW5jdGlvbiBwYXJzZV93c19iaW4oZGF0YSwgX29wdHMsIGlkeCwgcmVscywgd2IsIHRoZW1lcywgc3R5bGVzKSB7XG5cdGlmKCFkYXRhKSByZXR1cm4gZGF0YTtcblx0dmFyIG9wdHMgPSBfb3B0cyB8fCB7fTtcblx0aWYoIXJlbHMpIHJlbHMgPSB7JyFpZCc6e319O1xuXHRpZihERU5TRSAhPSBudWxsICYmIG9wdHMuZGVuc2UgPT0gbnVsbCkgb3B0cy5kZW5zZSA9IERFTlNFO1xuXHR2YXIgcyA9IChvcHRzLmRlbnNlID8gW10gOiB7fSk7XG5cblx0dmFyIHJlZjtcblx0dmFyIHJlZmd1ZXNzID0ge3M6IHtyOjIwMDAwMDAsIGM6MjAwMDAwMH0sIGU6IHtyOjAsIGM6MH0gfTtcblxuXHR2YXIgc3RhdGUgPSBbXTtcblx0dmFyIHBhc3MgPSBmYWxzZSwgZW5kID0gZmFsc2U7XG5cdHZhciByb3csIHAsIGNmLCBSLCBDLCBhZGRyLCBzc3RyLCByciwgY2VsbDtcblx0dmFyIG1lcmdlcyA9IFtdO1xuXHRvcHRzLmJpZmYgPSAxMjtcblx0b3B0c1snIXJvdyddID0gMDtcblxuXHR2YXIgYWkgPSAwLCBhZiA9IGZhbHNlO1xuXG5cdHZhciBhcnJheWYgPSBbXTtcblx0dmFyIHNoYXJlZGYgPSB7fTtcblx0dmFyIHN1cGJvb2tzID0gb3B0cy5zdXBib29rcyB8fCB3Yi5zdXBib29rcyB8fCAoW1tdXSk7XG5cdHN1cGJvb2tzLnNoYXJlZGYgPSBzaGFyZWRmO1xuXHRzdXBib29rcy5hcnJheWYgPSBhcnJheWY7XG5cdHN1cGJvb2tzLlNoZWV0TmFtZXMgPSB3Yi5TaGVldE5hbWVzIHx8IHdiLlNoZWV0cy5tYXAoZnVuY3Rpb24oeCkgeyByZXR1cm4geC5uYW1lOyB9KTtcblx0aWYoIW9wdHMuc3VwYm9va3MpIHtcblx0XHRvcHRzLnN1cGJvb2tzID0gc3VwYm9va3M7XG5cdFx0aWYod2IuTmFtZXMpIGZvcih2YXIgaSA9IDA7IGkgPCB3Yi5OYW1lcy5sZW5ndGg7ICsraSkgc3VwYm9va3NbMF1baSsxXSA9IHdiLk5hbWVzW2ldO1xuXHR9XG5cblx0dmFyIGNvbGluZm8gPSBbXSwgcm93aW5mbyA9IFtdO1xuXHR2YXIgc2VlbmNvbCA9IGZhbHNlO1xuXG5cdFhMU0JSZWNvcmRFbnVtWzB4MDAxMF0gPSB7IG46XCJCcnRTaG9ydFJlYWxcIiwgZjpwYXJzZV9CcnRTaG9ydFJlYWwgfTtcblxuXHRyZWNvcmRob3BwZXIoZGF0YSwgZnVuY3Rpb24gd3NfcGFyc2UodmFsLCBSX24sIFJUKSB7XG5cdFx0aWYoZW5kKSByZXR1cm47XG5cdFx0c3dpdGNoKFJUKSB7XG5cdFx0XHRjYXNlIDB4MDA5NDogLyogJ0JydFdzRGltJyAqL1xuXHRcdFx0XHRyZWYgPSB2YWw7IGJyZWFrO1xuXHRcdFx0Y2FzZSAweDAwMDA6IC8qICdCcnRSb3dIZHInICovXG5cdFx0XHRcdHJvdyA9IHZhbDtcblx0XHRcdFx0aWYob3B0cy5zaGVldFJvd3MgJiYgb3B0cy5zaGVldFJvd3MgPD0gcm93LnIpIGVuZD10cnVlO1xuXHRcdFx0XHRyciA9IGVuY29kZV9yb3coUiA9IHJvdy5yKTtcblx0XHRcdFx0b3B0c1snIXJvdyddID0gcm93LnI7XG5cdFx0XHRcdGlmKHZhbC5oaWRkZW4gfHwgdmFsLmhwdCB8fCB2YWwubGV2ZWwgIT0gbnVsbCkge1xuXHRcdFx0XHRcdGlmKHZhbC5ocHQpIHZhbC5ocHggPSBwdDJweCh2YWwuaHB0KTtcblx0XHRcdFx0XHRyb3dpbmZvW3ZhbC5yXSA9IHZhbDtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAweDAwMDI6IC8qICdCcnRDZWxsUmsnICovXG5cdFx0XHRjYXNlIDB4MDAwMzogLyogJ0JydENlbGxFcnJvcicgKi9cblx0XHRcdGNhc2UgMHgwMDA0OiAvKiAnQnJ0Q2VsbEJvb2wnICovXG5cdFx0XHRjYXNlIDB4MDAwNTogLyogJ0JydENlbGxSZWFsJyAqL1xuXHRcdFx0Y2FzZSAweDAwMDY6IC8qICdCcnRDZWxsU3QnICovXG5cdFx0XHRjYXNlIDB4MDAwNzogLyogJ0JydENlbGxJc3N0JyAqL1xuXHRcdFx0Y2FzZSAweDAwMDg6IC8qICdCcnRGbWxhU3RyaW5nJyAqL1xuXHRcdFx0Y2FzZSAweDAwMDk6IC8qICdCcnRGbWxhTnVtJyAqL1xuXHRcdFx0Y2FzZSAweDAwMEE6IC8qICdCcnRGbWxhQm9vbCcgKi9cblx0XHRcdGNhc2UgMHgwMDBCOiAvKiAnQnJ0Rm1sYUVycm9yJyAqL1xuXHRcdFx0Y2FzZSAweDAwMEQ6IC8qICdCcnRTaG9ydFJrJyAqL1xuXHRcdFx0Y2FzZSAweDAwMEU6IC8qICdCcnRTaG9ydEVycm9yJyAqL1xuXHRcdFx0Y2FzZSAweDAwMEY6IC8qICdCcnRTaG9ydEJvb2wnICovXG5cdFx0XHRjYXNlIDB4MDAxMDogLyogJ0JydFNob3J0UmVhbCcgKi9cblx0XHRcdGNhc2UgMHgwMDExOiAvKiAnQnJ0U2hvcnRTdCcgKi9cblx0XHRcdGNhc2UgMHgwMDEyOiAvKiAnQnJ0U2hvcnRJc3N0JyAqL1xuXHRcdFx0XHRwID0gKHt0OnZhbFsyXX0pO1xuXHRcdFx0XHRzd2l0Y2godmFsWzJdKSB7XG5cdFx0XHRcdFx0Y2FzZSAnbic6IHAudiA9IHZhbFsxXTsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncyc6IHNzdHIgPSBzdHJzW3ZhbFsxXV07IHAudiA9IHNzdHIudDsgcC5yID0gc3N0ci5yOyBicmVhaztcblx0XHRcdFx0XHRjYXNlICdiJzogcC52ID0gdmFsWzFdID8gdHJ1ZSA6IGZhbHNlOyBicmVhaztcblx0XHRcdFx0XHRjYXNlICdlJzogcC52ID0gdmFsWzFdOyBpZihvcHRzLmNlbGxUZXh0ICE9PSBmYWxzZSkgcC53ID0gQkVycltwLnZdOyBicmVhaztcblx0XHRcdFx0XHRjYXNlICdzdHInOiBwLnQgPSAncyc7IHAudiA9IHZhbFsxXTsgYnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoKGNmID0gc3R5bGVzLkNlbGxYZlt2YWxbMF0uaVN0eWxlUmVmXSkpIHNhZmVfZm9ybWF0KHAsY2YubnVtRm10SWQsbnVsbCxvcHRzLCB0aGVtZXMsIHN0eWxlcyk7XG5cdFx0XHRcdEMgPSB2YWxbMF0uYyA9PSAtMSA/IEMgKyAxIDogdmFsWzBdLmM7XG5cdFx0XHRcdGlmKG9wdHMuZGVuc2UpIHsgaWYoIXNbUl0pIHNbUl0gPSBbXTsgc1tSXVtDXSA9IHA7IH1cblx0XHRcdFx0ZWxzZSBzW2VuY29kZV9jb2woQykgKyBycl0gPSBwO1xuXHRcdFx0XHRpZihvcHRzLmNlbGxGb3JtdWxhKSB7XG5cdFx0XHRcdFx0YWYgPSBmYWxzZTtcblx0XHRcdFx0XHRmb3IoYWkgPSAwOyBhaSA8IGFycmF5Zi5sZW5ndGg7ICsrYWkpIHtcblx0XHRcdFx0XHRcdHZhciBhaWkgPSBhcnJheWZbYWldO1xuXHRcdFx0XHRcdFx0aWYocm93LnIgPj0gYWlpWzBdLnMuciAmJiByb3cuciA8PSBhaWlbMF0uZS5yKVxuXHRcdFx0XHRcdFx0XHRpZihDID49IGFpaVswXS5zLmMgJiYgQyA8PSBhaWlbMF0uZS5jKSB7XG5cdFx0XHRcdFx0XHRcdFx0cC5GID0gZW5jb2RlX3JhbmdlKGFpaVswXSk7IGFmID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZighYWYgJiYgdmFsLmxlbmd0aCA+IDMpIHAuZiA9IHZhbFszXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihyZWZndWVzcy5zLnIgPiByb3cucikgcmVmZ3Vlc3Mucy5yID0gcm93LnI7XG5cdFx0XHRcdGlmKHJlZmd1ZXNzLnMuYyA+IEMpIHJlZmd1ZXNzLnMuYyA9IEM7XG5cdFx0XHRcdGlmKHJlZmd1ZXNzLmUuciA8IHJvdy5yKSByZWZndWVzcy5lLnIgPSByb3cucjtcblx0XHRcdFx0aWYocmVmZ3Vlc3MuZS5jIDwgQykgcmVmZ3Vlc3MuZS5jID0gQztcblx0XHRcdFx0aWYob3B0cy5jZWxsRGF0ZXMgJiYgY2YgJiYgcC50ID09ICduJyAmJiBTU0YuaXNfZGF0ZShTU0YuX3RhYmxlW2NmLm51bUZtdElkXSkpIHtcblx0XHRcdFx0XHR2YXIgX2QgPSBTU0YucGFyc2VfZGF0ZV9jb2RlKHAudik7IGlmKF9kKSB7IHAudCA9ICdkJzsgcC52ID0gbmV3IERhdGUoX2QueSwgX2QubS0xLF9kLmQsX2QuSCxfZC5NLF9kLlMsX2QudSk7IH1cblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAweDAwMDE6IC8qICdCcnRDZWxsQmxhbmsnICovXG5cdFx0XHRjYXNlIDB4MDAwQzogLyogJ0JydFNob3J0QmxhbmsnICovXG5cdFx0XHRcdGlmKCFvcHRzLnNoZWV0U3R1YnMgfHwgcGFzcykgYnJlYWs7XG5cdFx0XHRcdHAgPSAoe3Q6J3onLHY6dW5kZWZpbmVkfSk7XG5cdFx0XHRcdEMgPSB2YWxbMF0uYyA9PSAtMSA/IEMgKyAxIDogdmFsWzBdLmM7XG5cdFx0XHRcdGlmKG9wdHMuZGVuc2UpIHsgaWYoIXNbUl0pIHNbUl0gPSBbXTsgc1tSXVtDXSA9IHA7IH1cblx0XHRcdFx0ZWxzZSBzW2VuY29kZV9jb2woQykgKyBycl0gPSBwO1xuXHRcdFx0XHRpZihyZWZndWVzcy5zLnIgPiByb3cucikgcmVmZ3Vlc3Mucy5yID0gcm93LnI7XG5cdFx0XHRcdGlmKHJlZmd1ZXNzLnMuYyA+IEMpIHJlZmd1ZXNzLnMuYyA9IEM7XG5cdFx0XHRcdGlmKHJlZmd1ZXNzLmUuciA8IHJvdy5yKSByZWZndWVzcy5lLnIgPSByb3cucjtcblx0XHRcdFx0aWYocmVmZ3Vlc3MuZS5jIDwgQykgcmVmZ3Vlc3MuZS5jID0gQztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMHgwMEIwOiAvKiAnQnJ0TWVyZ2VDZWxsJyAqL1xuXHRcdFx0XHRtZXJnZXMucHVzaCh2YWwpOyBicmVhaztcblxuXHRcdFx0Y2FzZSAweDAxRUU6IC8qICdCcnRITGluaycgKi9cblx0XHRcdFx0dmFyIHJlbCA9IHJlbHNbJyFpZCddW3ZhbC5yZWxJZF07XG5cdFx0XHRcdGlmKHJlbCkge1xuXHRcdFx0XHRcdHZhbC5UYXJnZXQgPSByZWwuVGFyZ2V0O1xuXHRcdFx0XHRcdGlmKHZhbC5sb2MpIHZhbC5UYXJnZXQgKz0gXCIjXCIrdmFsLmxvYztcblx0XHRcdFx0XHR2YWwuUmVsID0gcmVsO1xuXHRcdFx0XHR9IGVsc2UgaWYodmFsLnJlbElkID09ICcnKSB7XG5cdFx0XHRcdFx0dmFsLlRhcmdldCA9IFwiI1wiICsgdmFsLmxvYztcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IoUj12YWwucmZ4LnMucjtSPD12YWwucmZ4LmUucjsrK1IpIGZvcihDPXZhbC5yZngucy5jO0M8PXZhbC5yZnguZS5jOysrQykge1xuXHRcdFx0XHRcdGlmKG9wdHMuZGVuc2UpIHtcblx0XHRcdFx0XHRcdGlmKCFzW1JdKSBzW1JdID0gW107XG5cdFx0XHRcdFx0XHRpZighc1tSXVtDXSkgc1tSXVtDXSA9IHt0Oid6Jyx2OnVuZGVmaW5lZH07XG5cdFx0XHRcdFx0XHRzW1JdW0NdLmwgPSB2YWw7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGFkZHIgPSBlbmNvZGVfY2VsbCh7YzpDLHI6Un0pO1xuXHRcdFx0XHRcdFx0aWYoIXNbYWRkcl0pIHNbYWRkcl0gPSB7dDoneicsdjp1bmRlZmluZWR9O1xuXHRcdFx0XHRcdFx0c1thZGRyXS5sID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAweDAxQUE6IC8qICdCcnRBcnJGbWxhJyAqL1xuXHRcdFx0XHRpZighb3B0cy5jZWxsRm9ybXVsYSkgYnJlYWs7XG5cdFx0XHRcdGFycmF5Zi5wdXNoKHZhbCk7XG5cdFx0XHRcdGNlbGwgPSAoKG9wdHMuZGVuc2UgPyBzW1JdW0NdIDogc1tlbmNvZGVfY29sKEMpICsgcnJdKSk7XG5cdFx0XHRcdGNlbGwuZiA9IHN0cmluZ2lmeV9mb3JtdWxhKHZhbFsxXSwgcmVmZ3Vlc3MsIHtyOnJvdy5yLCBjOkN9LCBzdXBib29rcywgb3B0cyk7XG5cdFx0XHRcdGNlbGwuRiA9IGVuY29kZV9yYW5nZSh2YWxbMF0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMHgwMUFCOiAvKiAnQnJ0U2hyRm1sYScgKi9cblx0XHRcdFx0aWYoIW9wdHMuY2VsbEZvcm11bGEpIGJyZWFrO1xuXHRcdFx0XHRzaGFyZWRmW2VuY29kZV9jZWxsKHZhbFswXS5zKV0gPSB2YWxbMV07XG5cdFx0XHRcdGNlbGwgPSAob3B0cy5kZW5zZSA/IHNbUl1bQ10gOiBzW2VuY29kZV9jb2woQykgKyBycl0pO1xuXHRcdFx0XHRjZWxsLmYgPSBzdHJpbmdpZnlfZm9ybXVsYSh2YWxbMV0sIHJlZmd1ZXNzLCB7cjpyb3cuciwgYzpDfSwgc3VwYm9va3MsIG9wdHMpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0LyogaWRlbnRpY2FsIHRvICdDb2xJbmZvJyBpbiBYTFMgKi9cblx0XHRcdGNhc2UgMHgwMDNDOiAvKiAnQnJ0Q29sSW5mbycgKi9cblx0XHRcdFx0aWYoIW9wdHMuY2VsbFN0eWxlcykgYnJlYWs7XG5cdFx0XHRcdHdoaWxlKHZhbC5lID49IHZhbC5zKSB7XG5cdFx0XHRcdFx0Y29saW5mb1t2YWwuZS0tXSA9IHsgd2lkdGg6IHZhbC53LzI1NiwgaGlkZGVuOiAhISh2YWwuZmxhZ3MgJiAweDAxKSwgbGV2ZWw6IHZhbC5sZXZlbCB9O1xuXHRcdFx0XHRcdGlmKCFzZWVuY29sKSB7IHNlZW5jb2wgPSB0cnVlOyBmaW5kX21kd19jb2x3KHZhbC53LzI1Nik7IH1cblx0XHRcdFx0XHRwcm9jZXNzX2NvbChjb2xpbmZvW3ZhbC5lKzFdKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAweDAwQTE6IC8qICdCcnRCZWdpbkFGaWx0ZXInICovXG5cdFx0XHRcdHNbJyFhdXRvZmlsdGVyJ10gPSB7IHJlZjplbmNvZGVfcmFuZ2UodmFsKSB9O1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAweDAxREM6IC8qICdCcnRNYXJnaW5zJyAqL1xuXHRcdFx0XHRzWychbWFyZ2lucyddID0gdmFsO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAweDAwOTM6IC8qICdCcnRXc1Byb3AnICovXG5cdFx0XHRcdGlmKCF3Yi5TaGVldHNbaWR4XSkgd2IuU2hlZXRzW2lkeF0gPSB7fTtcblx0XHRcdFx0aWYodmFsLm5hbWUpIHdiLlNoZWV0c1tpZHhdLkNvZGVOYW1lID0gdmFsLm5hbWU7XG5cdFx0XHRcdGlmKHZhbC5hYm92ZSB8fCB2YWwubGVmdCkgc1snIW91dGxpbmUnXSA9IHsgYWJvdmU6IHZhbC5hYm92ZSwgbGVmdDogdmFsLmxlZnQgfTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMHgwMDg5OiAvKiAnQnJ0QmVnaW5Xc1ZpZXcnICovXG5cdFx0XHRcdGlmKCF3Yi5WaWV3cykgd2IuVmlld3MgPSBbe31dO1xuXHRcdFx0XHRpZighd2IuVmlld3NbMF0pIHdiLlZpZXdzWzBdID0ge307XG5cdFx0XHRcdGlmKHZhbC5SVEwpIHdiLlZpZXdzWzBdLlJUTCA9IHRydWU7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDB4MDFFNTogLyogJ0JydFdzRm10SW5mbycgKi9cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMHgwMDQwOiAvKiAnQnJ0RFZhbCcgKi9cblx0XHRcdGNhc2UgMHgwNDFEOiAvKiAnQnJ0RFZhbDE0JyAqL1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAweDAwOTc6IC8qICdCcnRQYW5lJyAqL1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMHgwMDk4OiAvKiAnQnJ0U2VsJyAqL1xuXHRcdFx0Y2FzZSAweDAwQUY6IC8qICdCcnRBRmlsdGVyRGF0ZUdyb3VwSXRlbScgKi9cblx0XHRcdGNhc2UgMHgwMjg0OiAvKiAnQnJ0QWN0aXZlWCcgKi9cblx0XHRcdGNhc2UgMHgwMjcxOiAvKiAnQnJ0QmlnTmFtZScgKi9cblx0XHRcdGNhc2UgMHgwMjMyOiAvKiAnQnJ0QmtIaW0nICovXG5cdFx0XHRjYXNlIDB4MDE4QzogLyogJ0JydEJyaycgKi9cblx0XHRcdGNhc2UgMHgwNDU4OiAvKiAnQnJ0Q0ZJY29uJyAqL1xuXHRcdFx0Y2FzZSAweDA0N0E6IC8qICdCcnRDRlJ1bGVFeHQnICovXG5cdFx0XHRjYXNlIDB4MDFENzogLyogJ0JydENGVk8nICovXG5cdFx0XHRjYXNlIDB4MDQxQTogLyogJ0JydENGVk8xNCcgKi9cblx0XHRcdGNhc2UgMHgwMjg5OiAvKiAnQnJ0Q2VsbElnbm9yZUVDJyAqL1xuXHRcdFx0Y2FzZSAweDA0NTE6IC8qICdCcnRDZWxsSWdub3JlRUMxNCcgKi9cblx0XHRcdGNhc2UgMHgwMDMxOiAvKiAnQnJ0Q2VsbE1ldGEnICovXG5cdFx0XHRjYXNlIDB4MDI0RDogLyogJ0JydENlbGxTbWFydFRhZ1Byb3BlcnR5JyAqL1xuXHRcdFx0Y2FzZSAweDAyNUY6IC8qICdCcnRDZWxsV2F0Y2gnICovXG5cdFx0XHRjYXNlIDB4MDIzNDogLyogJ0JydENvbG9yJyAqL1xuXHRcdFx0Y2FzZSAweDA0MUY6IC8qICdCcnRDb2xvcjE0JyAqL1xuXHRcdFx0Y2FzZSAweDAwQTg6IC8qICdCcnRDb2xvckZpbHRlcicgKi9cblx0XHRcdGNhc2UgMHgwMEFFOiAvKiAnQnJ0Q3VzdG9tRmlsdGVyJyAqL1xuXHRcdFx0Y2FzZSAweDA0OUM6IC8qICdCcnRDdXN0b21GaWx0ZXIxNCcgKi9cblx0XHRcdGNhc2UgMHgwMUYzOiAvKiAnQnJ0RFJlZicgKi9cblx0XHRcdGNhc2UgMHgwMUZCOiAvKiAnQnJ0RFhGJyAqL1xuXHRcdFx0Y2FzZSAweDAyMjY6IC8qICdCcnREcmF3aW5nJyAqL1xuXHRcdFx0Y2FzZSAweDAwQUI6IC8qICdCcnREeW5hbWljRmlsdGVyJyAqL1xuXHRcdFx0Y2FzZSAweDAwQTc6IC8qICdCcnRGaWx0ZXInICovXG5cdFx0XHRjYXNlIDB4MDQ5OTogLyogJ0JydEZpbHRlcjE0JyAqL1xuXHRcdFx0Y2FzZSAweDAwQTk6IC8qICdCcnRJY29uRmlsdGVyJyAqL1xuXHRcdFx0Y2FzZSAweDA0OUQ6IC8qICdCcnRJY29uRmlsdGVyMTQnICovXG5cdFx0XHRjYXNlIDB4MDIyNzogLyogJ0JydExlZ2FjeURyYXdpbmcnICovXG5cdFx0XHRjYXNlIDB4MDIyODogLyogJ0JydExlZ2FjeURyYXdpbmdIRicgKi9cblx0XHRcdGNhc2UgMHgwMjk1OiAvKiAnQnJ0TGlzdFBhcnQnICovXG5cdFx0XHRjYXNlIDB4MDI3RjogLyogJ0JydE9sZU9iamVjdCcgKi9cblx0XHRcdGNhc2UgMHgwMURFOiAvKiAnQnJ0UGFnZVNldHVwJyAqL1xuXHRcdFx0Y2FzZSAweDAyMTk6IC8qICdCcnRQaG9uZXRpY0luZm8nICovXG5cdFx0XHRjYXNlIDB4MDFERDogLyogJ0JydFByaW50T3B0aW9ucycgKi9cblx0XHRcdGNhc2UgMHgwMjE4OiAvKiAnQnJ0UmFuZ2VQcm90ZWN0aW9uJyAqL1xuXHRcdFx0Y2FzZSAweDA0NEY6IC8qICdCcnRSYW5nZVByb3RlY3Rpb24xNCcgKi9cblx0XHRcdGNhc2UgMHgwMkE4OiAvKiAnQnJ0UmFuZ2VQcm90ZWN0aW9uSXNvJyAqL1xuXHRcdFx0Y2FzZSAweDA0NTA6IC8qICdCcnRSYW5nZVByb3RlY3Rpb25Jc28xNCcgKi9cblx0XHRcdGNhc2UgMHgwNDAwOiAvKiAnQnJ0UndEZXNjZW50JyAqL1xuXHRcdFx0Y2FzZSAweDAyOTc6IC8qICdCcnRTaGVldENhbGNQcm9wJyAqL1xuXHRcdFx0Y2FzZSAweDAyMTc6IC8qICdCcnRTaGVldFByb3RlY3Rpb24nICovXG5cdFx0XHRjYXNlIDB4MDJBNjogLyogJ0JydFNoZWV0UHJvdGVjdGlvbklzbycgKi9cblx0XHRcdGNhc2UgMHgwMUY4OiAvKiAnQnJ0U2xjJyAqL1xuXHRcdFx0Y2FzZSAweDA0MTM6IC8qICdCcnRTcGFya2xpbmUnICovXG5cdFx0XHRjYXNlIDB4MDFBQzogLyogJ0JydFRhYmxlJyAqL1xuXHRcdFx0Y2FzZSAweDAwQUE6IC8qICdCcnRUb3AxMEZpbHRlcicgKi9cblx0XHRcdGNhc2UgMHgwQzAwOiAvKiAnQnJ0VWlkJyAqL1xuXHRcdFx0Y2FzZSAweDAwMzI6IC8qICdCcnRWYWx1ZU1ldGEnICovXG5cdFx0XHRjYXNlIDB4MDgxNjogLyogJ0JydFdlYkV4dGVuc2lvbicgKi9cblx0XHRcdGNhc2UgMHgwNDE1OiAvKiAnQnJ0V3NGbXRJbmZvRXgxNCcgKi9cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMHgwMDIzOiAvKiAnQnJ0RlJUQmVnaW4nICovXG5cdFx0XHRcdHBhc3MgPSB0cnVlOyBicmVhaztcblx0XHRcdGNhc2UgMHgwMDI0OiAvKiAnQnJ0RlJURW5kJyAqL1xuXHRcdFx0XHRwYXNzID0gZmFsc2U7IGJyZWFrO1xuXHRcdFx0Y2FzZSAweDAwMjU6IC8qICdCcnRBQ0JlZ2luJyAqL1xuXHRcdFx0XHRzdGF0ZS5wdXNoKFJfbik7IHBhc3MgPSB0cnVlOyBicmVhaztcblx0XHRcdGNhc2UgMHgwMDI2OiAvKiAnQnJ0QUNFbmQnICovXG5cdFx0XHRcdHN0YXRlLnBvcCgpOyBwYXNzID0gZmFsc2U7IGJyZWFrO1xuXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRpZigoUl9ufHxcIlwiKS5pbmRleE9mKFwiQmVnaW5cIikgPiAwKXsvKiBlbXB0eSAqL31cblx0XHRcdFx0ZWxzZSBpZigoUl9ufHxcIlwiKS5pbmRleE9mKFwiRW5kXCIpID4gMCl7LyogZW1wdHkgKi99XG5cdFx0XHRcdGVsc2UgaWYoIXBhc3MgfHwgb3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgcmVjb3JkIFwiICsgUlQgKyBcIiBcIiArIFJfbik7XG5cdFx0fVxuXHR9LCBvcHRzKTtcblxuXHRkZWxldGUgb3B0cy5zdXBib29rcztcblx0ZGVsZXRlIG9wdHNbJyFyb3cnXTtcblxuXHRpZighc1tcIiFyZWZcIl0gJiYgKHJlZmd1ZXNzLnMuciA8IDIwMDAwMDAgfHwgcmVmICYmIChyZWYuZS5yID4gMCB8fCByZWYuZS5jID4gMCB8fCByZWYucy5yID4gMCB8fCByZWYucy5jID4gMCkpKSBzW1wiIXJlZlwiXSA9IGVuY29kZV9yYW5nZShyZWYgfHwgcmVmZ3Vlc3MpO1xuXHRpZihvcHRzLnNoZWV0Um93cyAmJiBzW1wiIXJlZlwiXSkge1xuXHRcdHZhciB0bXByZWYgPSBzYWZlX2RlY29kZV9yYW5nZShzW1wiIXJlZlwiXSk7XG5cdFx0aWYob3B0cy5zaGVldFJvd3MgPD0gK3RtcHJlZi5lLnIpIHtcblx0XHRcdHRtcHJlZi5lLnIgPSBvcHRzLnNoZWV0Um93cyAtIDE7XG5cdFx0XHRpZih0bXByZWYuZS5yID4gcmVmZ3Vlc3MuZS5yKSB0bXByZWYuZS5yID0gcmVmZ3Vlc3MuZS5yO1xuXHRcdFx0aWYodG1wcmVmLmUuciA8IHRtcHJlZi5zLnIpIHRtcHJlZi5zLnIgPSB0bXByZWYuZS5yO1xuXHRcdFx0aWYodG1wcmVmLmUuYyA+IHJlZmd1ZXNzLmUuYykgdG1wcmVmLmUuYyA9IHJlZmd1ZXNzLmUuYztcblx0XHRcdGlmKHRtcHJlZi5lLmMgPCB0bXByZWYucy5jKSB0bXByZWYucy5jID0gdG1wcmVmLmUuYztcblx0XHRcdHNbXCIhZnVsbHJlZlwiXSA9IHNbXCIhcmVmXCJdO1xuXHRcdFx0c1tcIiFyZWZcIl0gPSBlbmNvZGVfcmFuZ2UodG1wcmVmKTtcblx0XHR9XG5cdH1cblx0aWYobWVyZ2VzLmxlbmd0aCA+IDApIHNbXCIhbWVyZ2VzXCJdID0gbWVyZ2VzO1xuXHRpZihjb2xpbmZvLmxlbmd0aCA+IDApIHNbXCIhY29sc1wiXSA9IGNvbGluZm87XG5cdGlmKHJvd2luZm8ubGVuZ3RoID4gMCkgc1tcIiFyb3dzXCJdID0gcm93aW5mbztcblx0cmV0dXJuIHM7XG59XG5cbi8qIFRPRE86IHNvbWV0aGluZyB1c2VmdWwgLS0gdGhpcyBpcyBhIHN0dWIgKi9cbmZ1bmN0aW9uIHdyaXRlX3dzX2Jpbl9jZWxsKGJhLCBjZWxsLCBSLCBDLCBvcHRzLCB3cywgbGFzdF9zZWVuKSB7XG5cdGlmKGNlbGwudiA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZmFsc2U7XG5cdHZhciB2diA9IFwiXCI7XG5cdHN3aXRjaChjZWxsLnQpIHtcblx0XHRjYXNlICdiJzogdnYgPSBjZWxsLnYgPyBcIjFcIiA6IFwiMFwiOyBicmVhaztcblx0XHRjYXNlICdkJzogLy8gbm8gQnJ0Q2VsbERhdGUgOihcblx0XHRcdGNlbGwgPSBkdXAoY2VsbCk7XG5cdFx0XHRjZWxsLnogPSBjZWxsLnogfHwgU1NGLl90YWJsZVsxNF07XG5cdFx0XHRjZWxsLnYgPSBkYXRlbnVtKHBhcnNlRGF0ZShjZWxsLnYpKTsgY2VsbC50ID0gJ24nO1xuXHRcdFx0YnJlYWs7XG5cdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdGNhc2UgJ24nOiBjYXNlICdlJzogdnYgPSAnJytjZWxsLnY7IGJyZWFrO1xuXHRcdGRlZmF1bHQ6IHZ2ID0gY2VsbC52OyBicmVhaztcblx0fVxuXHR2YXIgbyA9ICh7cjpSLCBjOkN9KTtcblx0LyogVE9ETzogY2VsbCBzdHlsZSAqL1xuXHRvLnMgPSBnZXRfY2VsbF9zdHlsZShvcHRzLmNlbGxYZnMsIGNlbGwsIG9wdHMpO1xuXHRpZihjZWxsLmwpIHdzWychbGlua3MnXS5wdXNoKFtlbmNvZGVfY2VsbChvKSwgY2VsbC5sXSk7XG5cdGlmKGNlbGwuYykgd3NbJyFjb21tZW50cyddLnB1c2goW2VuY29kZV9jZWxsKG8pLCBjZWxsLmNdKTtcblx0c3dpdGNoKGNlbGwudCkge1xuXHRcdGNhc2UgJ3MnOiBjYXNlICdzdHInOlxuXHRcdFx0aWYob3B0cy5ib29rU1NUKSB7XG5cdFx0XHRcdHZ2ID0gZ2V0X3NzdF9pZChvcHRzLlN0cmluZ3MsIChjZWxsLnYpLCBvcHRzLnJldlN0cmluZ3MpO1xuXHRcdFx0XHRvLnQgPSBcInNcIjsgby52ID0gdnY7XG5cdFx0XHRcdGlmKGxhc3Rfc2Vlbikgd3JpdGVfcmVjb3JkKGJhLCBcIkJydFNob3J0SXNzdFwiLCB3cml0ZV9CcnRTaG9ydElzc3QoY2VsbCwgbykpO1xuXHRcdFx0XHRlbHNlIHdyaXRlX3JlY29yZChiYSwgXCJCcnRDZWxsSXNzdFwiLCB3cml0ZV9CcnRDZWxsSXNzdChjZWxsLCBvKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvLnQgPSBcInN0clwiO1xuXHRcdFx0XHRpZihsYXN0X3NlZW4pIHdyaXRlX3JlY29yZChiYSwgXCJCcnRTaG9ydFN0XCIsIHdyaXRlX0JydFNob3J0U3QoY2VsbCwgbykpO1xuXHRcdFx0XHRlbHNlIHdyaXRlX3JlY29yZChiYSwgXCJCcnRDZWxsU3RcIiwgd3JpdGVfQnJ0Q2VsbFN0KGNlbGwsIG8pKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdGNhc2UgJ24nOlxuXHRcdFx0LyogVE9ETzogZGV0ZXJtaW5lIHRocmVzaG9sZCBmb3IgUmVhbCB2cyBSSyAqL1xuXHRcdFx0aWYoY2VsbC52ID09IChjZWxsLnYgfCAwKSAmJiBjZWxsLnYgPiAtMTAwMCAmJiBjZWxsLnYgPCAxMDAwKSB7XG5cdFx0XHRcdGlmKGxhc3Rfc2Vlbikgd3JpdGVfcmVjb3JkKGJhLCBcIkJydFNob3J0UmtcIiwgd3JpdGVfQnJ0U2hvcnRSayhjZWxsLCBvKSk7XG5cdFx0XHRcdGVsc2Ugd3JpdGVfcmVjb3JkKGJhLCBcIkJydENlbGxSa1wiLCB3cml0ZV9CcnRDZWxsUmsoY2VsbCwgbykpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYobGFzdF9zZWVuKSB3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0U2hvcnRSZWFsXCIsIHdyaXRlX0JydFNob3J0UmVhbChjZWxsLCBvKSk7XG5cdFx0XHRcdGVsc2Ugd3JpdGVfcmVjb3JkKGJhLCBcIkJydENlbGxSZWFsXCIsIHdyaXRlX0JydENlbGxSZWFsKGNlbGwsIG8pKTtcblx0XHRcdH0gcmV0dXJuIHRydWU7XG5cdFx0Y2FzZSAnYic6XG5cdFx0XHRvLnQgPSBcImJcIjtcblx0XHRcdGlmKGxhc3Rfc2Vlbikgd3JpdGVfcmVjb3JkKGJhLCBcIkJydFNob3J0Qm9vbFwiLCB3cml0ZV9CcnRTaG9ydEJvb2woY2VsbCwgbykpO1xuXHRcdFx0ZWxzZSB3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0Q2VsbEJvb2xcIiwgd3JpdGVfQnJ0Q2VsbEJvb2woY2VsbCwgbykpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0Y2FzZSAnZSc6XG5cdFx0XHRvLnQgPSBcImVcIjtcblx0XHRcdGlmKGxhc3Rfc2Vlbikgd3JpdGVfcmVjb3JkKGJhLCBcIkJydFNob3J0RXJyb3JcIiwgd3JpdGVfQnJ0U2hvcnRFcnJvcihjZWxsLCBvKSk7XG5cdFx0XHRlbHNlIHdyaXRlX3JlY29yZChiYSwgXCJCcnRDZWxsRXJyb3JcIiwgd3JpdGVfQnJ0Q2VsbEVycm9yKGNlbGwsIG8pKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdGlmKGxhc3Rfc2Vlbikgd3JpdGVfcmVjb3JkKGJhLCBcIkJydFNob3J0QmxhbmtcIiwgd3JpdGVfQnJ0U2hvcnRCbGFuayhjZWxsLCBvKSk7XG5cdGVsc2Ugd3JpdGVfcmVjb3JkKGJhLCBcIkJydENlbGxCbGFua1wiLCB3cml0ZV9CcnRDZWxsQmxhbmsoY2VsbCwgbykpO1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfQ0VMTFRBQkxFKGJhLCB3cywgaWR4LCBvcHRzKSB7XG5cdHZhciByYW5nZSA9IHNhZmVfZGVjb2RlX3JhbmdlKHdzWychcmVmJ10gfHwgXCJBMVwiKSwgcmVmLCByciA9IFwiXCIsIGNvbHMgPSBbXTtcblx0d3JpdGVfcmVjb3JkKGJhLCAnQnJ0QmVnaW5TaGVldERhdGEnKTtcblx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheSh3cyk7XG5cdHZhciBjYXAgPSByYW5nZS5lLnI7XG5cdGlmKHdzWychcm93cyddKSBjYXAgPSBNYXRoLm1heChyYW5nZS5lLnIsIHdzWychcm93cyddLmxlbmd0aCAtIDEpO1xuXHRmb3IodmFyIFIgPSByYW5nZS5zLnI7IFIgPD0gY2FwOyArK1IpIHtcblx0XHRyciA9IGVuY29kZV9yb3coUik7XG5cdFx0LyogW0FDQ0VMTFRBQkxFXSAqL1xuXHRcdC8qIEJydFJvd0hkciAqL1xuXHRcdHdyaXRlX3Jvd19oZWFkZXIoYmEsIHdzLCByYW5nZSwgUik7XG5cdFx0dmFyIGxhc3Rfc2VlbiA9IGZhbHNlO1xuXHRcdGlmKFIgPD0gcmFuZ2UuZS5yKSBmb3IodmFyIEMgPSByYW5nZS5zLmM7IEMgPD0gcmFuZ2UuZS5jOyArK0MpIHtcblx0XHRcdC8qICoxNjM4NENFTEwgKi9cblx0XHRcdGlmKFIgPT09IHJhbmdlLnMucikgY29sc1tDXSA9IGVuY29kZV9jb2woQyk7XG5cdFx0XHRyZWYgPSBjb2xzW0NdICsgcnI7XG5cdFx0XHR2YXIgY2VsbCA9IGRlbnNlID8gKHdzW1JdfHxbXSlbQ10gOiB3c1tyZWZdO1xuXHRcdFx0aWYoIWNlbGwpIHsgbGFzdF9zZWVuID0gZmFsc2U7IGNvbnRpbnVlOyB9XG5cdFx0XHQvKiB3cml0ZSBjZWxsICovXG5cdFx0XHRsYXN0X3NlZW4gPSB3cml0ZV93c19iaW5fY2VsbChiYSwgY2VsbCwgUiwgQywgb3B0cywgd3MsIGxhc3Rfc2Vlbik7XG5cdFx0fVxuXHR9XG5cdHdyaXRlX3JlY29yZChiYSwgJ0JydEVuZFNoZWV0RGF0YScpO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9NRVJHRUNFTExTKGJhLCB3cykge1xuXHRpZighd3MgfHwgIXdzWychbWVyZ2VzJ10pIHJldHVybjtcblx0d3JpdGVfcmVjb3JkKGJhLCAnQnJ0QmVnaW5NZXJnZUNlbGxzJywgd3JpdGVfQnJ0QmVnaW5NZXJnZUNlbGxzKHdzWychbWVyZ2VzJ10ubGVuZ3RoKSk7XG5cdHdzWychbWVyZ2VzJ10uZm9yRWFjaChmdW5jdGlvbihtKSB7IHdyaXRlX3JlY29yZChiYSwgJ0JydE1lcmdlQ2VsbCcsIHdyaXRlX0JydE1lcmdlQ2VsbChtKSk7IH0pO1xuXHR3cml0ZV9yZWNvcmQoYmEsICdCcnRFbmRNZXJnZUNlbGxzJyk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX0NPTElORk9TKGJhLCB3cykge1xuXHRpZighd3MgfHwgIXdzWychY29scyddKSByZXR1cm47XG5cdHdyaXRlX3JlY29yZChiYSwgJ0JydEJlZ2luQ29sSW5mb3MnKTtcblx0d3NbJyFjb2xzJ10uZm9yRWFjaChmdW5jdGlvbihtLCBpKSB7IGlmKG0pIHdyaXRlX3JlY29yZChiYSwgJ0JydENvbEluZm8nLCB3cml0ZV9CcnRDb2xJbmZvKGksIG0pKTsgfSk7XG5cdHdyaXRlX3JlY29yZChiYSwgJ0JydEVuZENvbEluZm9zJyk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX0lHTk9SRUVDUyhiYSwgd3MpIHtcblx0aWYoIXdzIHx8ICF3c1snIXJlZiddKSByZXR1cm47XG5cdHdyaXRlX3JlY29yZChiYSwgJ0JydEJlZ2luQ2VsbElnbm9yZUVDcycpO1xuXHR3cml0ZV9yZWNvcmQoYmEsICdCcnRDZWxsSWdub3JlRUMnLCB3cml0ZV9CcnRDZWxsSWdub3JlRUMoc2FmZV9kZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSkpKTtcblx0d3JpdGVfcmVjb3JkKGJhLCAnQnJ0RW5kQ2VsbElnbm9yZUVDcycpO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9ITElOS1MoYmEsIHdzLCByZWxzKSB7XG5cdC8qICpCcnRITGluayAqL1xuXHR3c1snIWxpbmtzJ10uZm9yRWFjaChmdW5jdGlvbihsKSB7XG5cdFx0aWYoIWxbMV0uVGFyZ2V0KSByZXR1cm47XG5cdFx0dmFyIHJJZCA9IGFkZF9yZWxzKHJlbHMsIC0xLCBsWzFdLlRhcmdldC5yZXBsYWNlKC8jLiokLywgXCJcIiksIFJFTFMuSExJTkspO1xuXHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRITGlua1wiLCB3cml0ZV9CcnRITGluayhsLCBySWQpKTtcblx0fSk7XG5cdGRlbGV0ZSB3c1snIWxpbmtzJ107XG59XG5mdW5jdGlvbiB3cml0ZV9MRUdBQ1lEUkFXSU5HKGJhLCB3cywgaWR4LCByZWxzKSB7XG5cdC8qIFtCcnRMZWdhY3lEcmF3aW5nXSAqL1xuXHRpZih3c1snIWNvbW1lbnRzJ10ubGVuZ3RoID4gMCkge1xuXHRcdHZhciBySWQgPSBhZGRfcmVscyhyZWxzLCAtMSwgXCIuLi9kcmF3aW5ncy92bWxEcmF3aW5nXCIgKyAoaWR4KzEpICsgXCIudm1sXCIsIFJFTFMuVk1MKTtcblx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0TGVnYWN5RHJhd2luZ1wiLCB3cml0ZV9SZWxJRChcInJJZFwiICsgcklkKSk7XG5cdFx0d3NbJyFsZWdhY3knXSA9IHJJZDtcblx0fVxufVxuXG5mdW5jdGlvbiB3cml0ZV9BVVRPRklMVEVSKGJhLCB3cywgd2IsIGlkeCkge1xuXHRpZighd3NbJyFhdXRvZmlsdGVyJ10pIHJldHVybjtcblx0dmFyIGRhdGEgPSB3c1snIWF1dG9maWx0ZXInXTtcblx0dmFyIHJlZiA9IHR5cGVvZiBkYXRhLnJlZiA9PT0gXCJzdHJpbmdcIiA/IGRhdGEucmVmIDogZW5jb2RlX3JhbmdlKGRhdGEucmVmKTtcblxuXHQvKiBVcGRhdGUgRmlsdGVyRGF0YWJhc2UgZGVmaW5lZCBuYW1lIGZvciB0aGUgd29ya3NoZWV0ICovXG5cdGlmKCF3Yi5Xb3JrYm9vaykgd2IuV29ya2Jvb2sgPSAoe1NoZWV0czpbXX0pO1xuXHRpZighd2IuV29ya2Jvb2suTmFtZXMpIHdiLldvcmtib29rLk5hbWVzID0gW107XG5cdHZhciBuYW1lcyA9IHdiLldvcmtib29rLk5hbWVzO1xuXHR2YXIgcmFuZ2UgPSBkZWNvZGVfcmFuZ2UocmVmKTtcblx0aWYocmFuZ2Uucy5yID09IHJhbmdlLmUucikgeyByYW5nZS5lLnIgPSBkZWNvZGVfcmFuZ2Uod3NbXCIhcmVmXCJdKS5lLnI7IHJlZiA9IGVuY29kZV9yYW5nZShyYW5nZSk7IH1cblx0Zm9yKHZhciBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgKytpKSB7XG5cdFx0dmFyIG5hbWUgPSBuYW1lc1tpXTtcblx0XHRpZihuYW1lLk5hbWUgIT0gJ194bG5tLl9GaWx0ZXJEYXRhYmFzZScpIGNvbnRpbnVlO1xuXHRcdGlmKG5hbWUuU2hlZXQgIT0gaWR4KSBjb250aW51ZTtcblx0XHRuYW1lLlJlZiA9IFwiJ1wiICsgd2IuU2hlZXROYW1lc1tpZHhdICsgXCInIVwiICsgcmVmOyBicmVhaztcblx0fVxuXHRpZihpID09IG5hbWVzLmxlbmd0aCkgbmFtZXMucHVzaCh7IE5hbWU6ICdfeGxubS5fRmlsdGVyRGF0YWJhc2UnLCBTaGVldDogaWR4LCBSZWY6IFwiJ1wiICsgd2IuU2hlZXROYW1lc1tpZHhdICsgXCInIVwiICsgcmVmICB9KTtcblxuXHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0QmVnaW5BRmlsdGVyXCIsIHdyaXRlX1VuY2hlY2tlZFJmWChzYWZlX2RlY29kZV9yYW5nZShyZWYpKSk7XG5cdC8qICpGSUxURVJDT0xVTU4gKi9cblx0LyogW1NPUlRTVEFURV0gKi9cblx0LyogQnJ0RW5kQUZpbHRlciAqL1xuXHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0RW5kQUZpbHRlclwiKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfV1NWSUVXUzIoYmEsIHdzLCBXb3JrYm9vaykge1xuXHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0QmVnaW5Xc1ZpZXdzXCIpO1xuXHR7IC8qIDEqV1NWSUVXMiAqL1xuXHRcdC8qIFtBQ1VJRF0gKi9cblx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0QmVnaW5Xc1ZpZXdcIiwgd3JpdGVfQnJ0QmVnaW5Xc1ZpZXcod3MsIFdvcmtib29rKSk7XG5cdFx0LyogW0JydFBhbmVdICovXG5cdFx0LyogKjRCcnRTZWwgKi9cblx0XHQvKiAqNFNYU0VMRUNUICovXG5cdFx0LyogKkZSVCAqL1xuXHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRFbmRXc1ZpZXdcIik7XG5cdH1cblx0LyogKkZSVCAqL1xuXHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0RW5kV3NWaWV3c1wiKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfV1NGTVRJTkZPKCkge1xuXHQvKiBbQUNXU0ZNVElORk9dICovXG5cdC8vd3JpdGVfcmVjb3JkKGJhLCBcIkJydFdzRm10SW5mb1wiLCB3cml0ZV9CcnRXc0ZtdEluZm8od3MpKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfU0hFRVRQUk9URUNUKGJhLCB3cykge1xuXHRpZighd3NbJyFwcm90ZWN0J10pIHJldHVybjtcblx0LyogW0JydFNoZWV0UHJvdGVjdGlvbklzb10gKi9cblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydFNoZWV0UHJvdGVjdGlvblwiLCB3cml0ZV9CcnRTaGVldFByb3RlY3Rpb24od3NbJyFwcm90ZWN0J10pKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfd3NfYmluKGlkeCwgb3B0cywgd2IsIHJlbHMpIHtcblx0dmFyIGJhID0gYnVmX2FycmF5KCk7XG5cdHZhciBzID0gd2IuU2hlZXROYW1lc1tpZHhdLCB3cyA9IHdiLlNoZWV0c1tzXSB8fCB7fTtcblx0dmFyIGMgPSBzOyB0cnkgeyBpZih3YiAmJiB3Yi5Xb3JrYm9vaykgYyA9IHdiLldvcmtib29rLlNoZWV0c1tpZHhdLkNvZGVOYW1lIHx8IGM7IH0gY2F0Y2goZSkge31cblx0dmFyIHIgPSBzYWZlX2RlY29kZV9yYW5nZSh3c1snIXJlZiddIHx8IFwiQTFcIik7XG5cdGlmKHIuZS5jID4gMHgzRkZGIHx8IHIuZS5yID4gMHhGRkZGRikge1xuXHRcdGlmKG9wdHMuV1RGKSB0aHJvdyBuZXcgRXJyb3IoXCJSYW5nZSBcIiArICh3c1snIXJlZiddIHx8IFwiQTFcIikgKyBcIiBleGNlZWRzIGZvcm1hdCBsaW1pdCBBMTpYRkQxMDQ4NTc2XCIpO1xuXHRcdHIuZS5jID0gTWF0aC5taW4oci5lLmMsIDB4M0ZGRik7XG5cdFx0ci5lLnIgPSBNYXRoLm1pbihyLmUuYywgMHhGRkZGRik7XG5cdH1cblx0d3NbJyFsaW5rcyddID0gW107XG5cdC8qIHBhc3NlZCBiYWNrIHRvIHdyaXRlX3ppcCBhbmQgcmVtb3ZlZCB0aGVyZSAqL1xuXHR3c1snIWNvbW1lbnRzJ10gPSBbXTtcblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEJlZ2luU2hlZXRcIik7XG5cdGlmKHdiLnZiYXJhdyB8fCB3c1snIW91dGxpbmUnXSkgd3JpdGVfcmVjb3JkKGJhLCBcIkJydFdzUHJvcFwiLCB3cml0ZV9CcnRXc1Byb3AoYywgd3NbJyFvdXRsaW5lJ10pKTtcblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydFdzRGltXCIsIHdyaXRlX0JydFdzRGltKHIpKTtcblx0d3JpdGVfV1NWSUVXUzIoYmEsIHdzLCB3Yi5Xb3JrYm9vayk7XG5cdHdyaXRlX1dTRk1USU5GTyhiYSwgd3MpO1xuXHR3cml0ZV9DT0xJTkZPUyhiYSwgd3MsIGlkeCwgb3B0cywgd2IpO1xuXHR3cml0ZV9DRUxMVEFCTEUoYmEsIHdzLCBpZHgsIG9wdHMsIHdiKTtcblx0LyogW0JydFNoZWV0Q2FsY1Byb3BdICovXG5cdHdyaXRlX1NIRUVUUFJPVEVDVChiYSwgd3MpO1xuXHQvKiAqKFtCcnRSYW5nZVByb3RlY3Rpb25Jc29dIEJydFJhbmdlUHJvdGVjdGlvbikgKi9cblx0LyogW1NDRU5NQU5dICovXG5cdHdyaXRlX0FVVE9GSUxURVIoYmEsIHdzLCB3YiwgaWR4KTtcblx0LyogW1NPUlRTVEFURV0gKi9cblx0LyogW0RDT05dICovXG5cdC8qIFtVU0VSU0hWSUVXU10gKi9cblx0d3JpdGVfTUVSR0VDRUxMUyhiYSwgd3MpO1xuXHQvKiBbQnJ0UGhvbmV0aWNJbmZvXSAqL1xuXHQvKiAqQ09ORElUSU9OQUxGT1JNQVRUSU5HICovXG5cdC8qIFtEVkFMU10gKi9cblx0d3JpdGVfSExJTktTKGJhLCB3cywgcmVscyk7XG5cdC8qIFtCcnRQcmludE9wdGlvbnNdICovXG5cdGlmKHdzWychbWFyZ2lucyddKSB3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0TWFyZ2luc1wiLCB3cml0ZV9CcnRNYXJnaW5zKHdzWychbWFyZ2lucyddKSk7XG5cdC8qIFtCcnRQYWdlU2V0dXBdICovXG5cdC8qIFtIRUFERVJGT09URVJdICovXG5cdC8qIFtSV0JSS10gKi9cblx0LyogW0NPTEJSS10gKi9cblx0LyogKkJydEJpZ05hbWUgKi9cblx0LyogW0NFTExXQVRDSEVTXSAqL1xuXHRpZighb3B0cyB8fCBvcHRzLmlnbm9yZUVDIHx8IChvcHRzLmlnbm9yZUVDID09ICh2b2lkIDApKSkgd3JpdGVfSUdOT1JFRUNTKGJhLCB3cyk7XG5cdC8qIFtTTUFSVFRBR1NdICovXG5cdC8qIFtCcnREcmF3aW5nXSAqL1xuXHR3cml0ZV9MRUdBQ1lEUkFXSU5HKGJhLCB3cywgaWR4LCByZWxzKTtcblx0LyogW0JydExlZ2FjeURyYXdpbmdIRl0gKi9cblx0LyogW0JydEJrSGltXSAqL1xuXHQvKiBbT0xFT0JKRUNUU10gKi9cblx0LyogW0FDVElWRVhDT05UUk9MU10gKi9cblx0LyogW1dFQlBVQklURU1TXSAqL1xuXHQvKiBbTElTVFBBUlRTXSAqL1xuXHQvKiBGUlRXT1JLU0hFRVQgKi9cblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEVuZFNoZWV0XCIpO1xuXHRyZXR1cm4gYmEuZW5kKCk7XG59XG5SRUxTLkNIQVJUID0gXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2NoYXJ0XCI7XG5SRUxTLkNIQVJURVggPSBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlLzIwMTQvcmVsYXRpb25zaGlwcy9jaGFydEV4XCI7XG5cbmZ1bmN0aW9uIHBhcnNlX0NhY2hlKGRhdGEpIHtcblx0dmFyIGNvbCA9IFtdO1xuXHR2YXIgbnVtID0gZGF0YS5tYXRjaCgvXjxjOm51bUNhY2hlPi8pO1xuXHR2YXIgZjtcblxuXHQvKiAyMS4yLjIuMTUwIHB0IENUX051bVZhbCAqL1xuXHQoZGF0YS5tYXRjaCgvPGM6cHQgaWR4PVwiKFxcZCopXCI+KC4qPyk8XFwvYzpwdD4vbWcpfHxbXSkuZm9yRWFjaChmdW5jdGlvbihwdCkge1xuXHRcdHZhciBxID0gcHQubWF0Y2goLzxjOnB0IGlkeD1cIihcXGQqPylcIj48Yzp2PiguKik8XFwvYzp2PjxcXC9jOnB0Pi8pO1xuXHRcdGlmKCFxKSByZXR1cm47XG5cdFx0Y29sWytxWzFdXSA9IG51bSA/ICtxWzJdIDogcVsyXTtcblx0fSk7XG5cblx0LyogMjEuMi4yLjcxIGZvcm1hdENvZGUgQ1RfWHN0cmluZyAqL1xuXHR2YXIgbmYgPSB1bmVzY2FwZXhtbCgoZGF0YS5tYXRjaCgvPGM6Zm9ybWF0Q29kZT4oW1xcc1xcU10qPyk8XFwvYzpmb3JtYXRDb2RlPi8pIHx8IFtcIlwiLFwiR2VuZXJhbFwiXSlbMV0pO1xuXG5cdChkYXRhLm1hdGNoKC88YzpmPiguKj8pPFxcL2M6Zj4vbWcpfHxbXSkuZm9yRWFjaChmdW5jdGlvbihGKSB7IGYgPSBGLnJlcGxhY2UoLzwuKj8+L2csXCJcIik7IH0pO1xuXG5cdHJldHVybiBbY29sLCBuZiwgZl07XG59XG5cbi8qIDIxLjIgRHJhd2luZ01MIC0gQ2hhcnRzICovXG5mdW5jdGlvbiBwYXJzZV9jaGFydChkYXRhLCBuYW1lLCBvcHRzLCByZWxzLCB3YiwgY3NoZWV0KSB7XG5cdHZhciBjcyA9ICgoY3NoZWV0IHx8IHtcIiF0eXBlXCI6XCJjaGFydFwifSkpO1xuXHRpZighZGF0YSkgcmV0dXJuIGNzaGVldDtcblx0LyogMjEuMi4yLjI3IGNoYXJ0IENUX0NoYXJ0ICovXG5cblx0dmFyIEMgPSAwLCBSID0gMCwgY29sID0gXCJBXCI7XG5cdHZhciByZWZndWVzcyA9IHtzOiB7cjoyMDAwMDAwLCBjOjIwMDAwMDB9LCBlOiB7cjowLCBjOjB9IH07XG5cblx0LyogMjEuMi4yLjEyMCBudW1DYWNoZSBDVF9OdW1EYXRhICovXG5cdChkYXRhLm1hdGNoKC88YzpudW1DYWNoZT5bXFxzXFxTXSo/PFxcL2M6bnVtQ2FjaGU+L2dtKXx8W10pLmZvckVhY2goZnVuY3Rpb24obmMpIHtcblx0XHR2YXIgY2FjaGUgPSBwYXJzZV9DYWNoZShuYyk7XG5cdFx0cmVmZ3Vlc3Mucy5yID0gcmVmZ3Vlc3Mucy5jID0gMDtcblx0XHRyZWZndWVzcy5lLmMgPSBDO1xuXHRcdGNvbCA9IGVuY29kZV9jb2woQyk7XG5cdFx0Y2FjaGVbMF0uZm9yRWFjaChmdW5jdGlvbihuLGkpIHtcblx0XHRcdGNzW2NvbCArIGVuY29kZV9yb3coaSldID0ge3Q6J24nLCB2Om4sIHo6Y2FjaGVbMV0gfTtcblx0XHRcdFIgPSBpO1xuXHRcdH0pO1xuXHRcdGlmKHJlZmd1ZXNzLmUuciA8IFIpIHJlZmd1ZXNzLmUuciA9IFI7XG5cdFx0KytDO1xuXHR9KTtcblx0aWYoQyA+IDApIGNzW1wiIXJlZlwiXSA9IGVuY29kZV9yYW5nZShyZWZndWVzcyk7XG5cdHJldHVybiBjcztcbn1cblJFTFMuQ1MgPSBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvY2hhcnRzaGVldFwiO1xuXG52YXIgQ1NfWE1MX1JPT1QgPSB3cml0ZXh0YWcoJ2NoYXJ0c2hlZXQnLCBudWxsLCB7XG5cdCd4bWxucyc6IFhNTE5TLm1haW5bMF0sXG5cdCd4bWxuczpyJzogWE1MTlMuclxufSk7XG5cbi8qIDE4LjMgV29ya3NoZWV0cyBhbHNvIGNvdmVycyBDaGFydHNoZWV0cyAqL1xuZnVuY3Rpb24gcGFyc2VfY3NfeG1sKGRhdGEsIG9wdHMsIGlkeCwgcmVscywgd2IpIHtcblx0aWYoIWRhdGEpIHJldHVybiBkYXRhO1xuXHQvKiAxOC4zLjEuMTIgY2hhcnRzaGVldCBDVF9DaGFydFNoZWV0ICovXG5cdGlmKCFyZWxzKSByZWxzID0geychaWQnOnt9fTtcblx0dmFyIHMgPSAoeychdHlwZSc6XCJjaGFydFwiLCAnIWRyYXdlbCc6bnVsbCwgJyFyZWwnOlwiXCJ9KTtcblx0dmFyIG07XG5cblx0LyogMTguMy4xLjgzIHNoZWV0UHIgQ1RfQ2hhcnRzaGVldFByICovXG5cdHZhciBzaGVldFByID0gZGF0YS5tYXRjaChzaGVldHBycmVnZXgpO1xuXHRpZihzaGVldFByKSBwYXJzZV93c194bWxfc2hlZXRwcihzaGVldFByWzBdLCBzLCB3YiwgaWR4KTtcblxuXHQvKiAxOC4zLjEuMzYgZHJhd2luZyBDVF9EcmF3aW5nICovXG5cdGlmKChtID0gZGF0YS5tYXRjaCgvZHJhd2luZyByOmlkPVwiKC4qPylcIi8pKSkgc1snIXJlbCddID0gbVsxXTtcblxuXHRpZihyZWxzWychaWQnXVtzWychcmVsJ11dKSBzWychZHJhd2VsJ10gPSByZWxzWychaWQnXVtzWychcmVsJ11dO1xuXHRyZXR1cm4gcztcbn1cbmZ1bmN0aW9uIHdyaXRlX2NzX3htbChpZHgsIG9wdHMsIHdiLCByZWxzKSB7XG5cdHZhciBvID0gW1hNTF9IRUFERVIsIENTX1hNTF9ST09UXTtcblx0b1tvLmxlbmd0aF0gPSB3cml0ZXh0YWcoXCJkcmF3aW5nXCIsIG51bGwsIHtcInI6aWRcIjogXCJySWQxXCJ9KTtcblx0YWRkX3JlbHMocmVscywgLTEsIFwiLi4vZHJhd2luZ3MvZHJhd2luZ1wiICsgKGlkeCsxKSArIFwiLnhtbFwiLCBSRUxTLkRSQVcpO1xuXHRpZihvLmxlbmd0aD4yKSB7IG9bby5sZW5ndGhdID0gKCc8L2NoYXJ0c2hlZXQ+Jyk7IG9bMV09b1sxXS5yZXBsYWNlKFwiLz5cIixcIj5cIik7IH1cblx0cmV0dXJuIG8uam9pbihcIlwiKTtcbn1cblxuLyogW01TLVhMU0JdIDIuNC4zMzEgQnJ0Q3NQcm9wICovXG5mdW5jdGlvbiBwYXJzZV9CcnRDc1Byb3AoZGF0YSwgbGVuZ3RoKSB7XG5cdGRhdGEubCArPSAxMDtcblx0dmFyIG5hbWUgPSBwYXJzZV9YTFdpZGVTdHJpbmcoZGF0YSwgbGVuZ3RoIC0gMTApO1xuXHRyZXR1cm4geyBuYW1lOiBuYW1lIH07XG59XG5cbi8qIFtNUy1YTFNCXSAyLjEuNy43IENoYXJ0IFNoZWV0ICovXG5mdW5jdGlvbiBwYXJzZV9jc19iaW4oZGF0YSwgb3B0cywgaWR4LCByZWxzLCB3Yikge1xuXHRpZighZGF0YSkgcmV0dXJuIGRhdGE7XG5cdGlmKCFyZWxzKSByZWxzID0geychaWQnOnt9fTtcblx0dmFyIHMgPSB7JyF0eXBlJzpcImNoYXJ0XCIsICchZHJhd2VsJzpudWxsLCAnIXJlbCc6XCJcIn07XG5cdHZhciBzdGF0ZSA9IFtdO1xuXHR2YXIgcGFzcyA9IGZhbHNlO1xuXHRyZWNvcmRob3BwZXIoZGF0YSwgZnVuY3Rpb24gY3NfcGFyc2UodmFsLCBSX24sIFJUKSB7XG5cdFx0c3dpdGNoKFJUKSB7XG5cblx0XHRcdGNhc2UgMHgwMjI2OiAvKiAnQnJ0RHJhd2luZycgKi9cblx0XHRcdFx0c1snIXJlbCddID0gdmFsOyBicmVhaztcblxuXHRcdFx0Y2FzZSAweDAyOEI6IC8qICdCcnRDc1Byb3AnICovXG5cdFx0XHRcdGlmKCF3Yi5TaGVldHNbaWR4XSkgd2IuU2hlZXRzW2lkeF0gPSB7fTtcblx0XHRcdFx0aWYodmFsLm5hbWUpIHdiLlNoZWV0c1tpZHhdLkNvZGVOYW1lID0gdmFsLm5hbWU7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDB4MDIzMjogLyogJ0JydEJrSGltJyAqL1xuXHRcdFx0Y2FzZSAweDAyOEM6IC8qICdCcnRDc1BhZ2VTZXR1cCcgKi9cblx0XHRcdGNhc2UgMHgwMjlEOiAvKiAnQnJ0Q3NQcm90ZWN0aW9uJyAqL1xuXHRcdFx0Y2FzZSAweDAyQTc6IC8qICdCcnRDc1Byb3RlY3Rpb25Jc28nICovXG5cdFx0XHRjYXNlIDB4MDIyNzogLyogJ0JydExlZ2FjeURyYXdpbmcnICovXG5cdFx0XHRjYXNlIDB4MDIyODogLyogJ0JydExlZ2FjeURyYXdpbmdIRicgKi9cblx0XHRcdGNhc2UgMHgwMURDOiAvKiAnQnJ0TWFyZ2lucycgKi9cblx0XHRcdGNhc2UgMHgwQzAwOiAvKiAnQnJ0VWlkJyAqL1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAweDAwMjM6IC8qICdCcnRGUlRCZWdpbicgKi9cblx0XHRcdFx0cGFzcyA9IHRydWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAweDAwMjQ6IC8qICdCcnRGUlRFbmQnICovXG5cdFx0XHRcdHBhc3MgPSBmYWxzZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAyNTogLyogJ0JydEFDQmVnaW4nICovXG5cdFx0XHRcdHN0YXRlLnB1c2goUl9uKTsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAyNjogLyogJ0JydEFDRW5kJyAqL1xuXHRcdFx0XHRzdGF0ZS5wb3AoKTsgYnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGlmKChSX258fFwiXCIpLmluZGV4T2YoXCJCZWdpblwiKSA+IDApIHN0YXRlLnB1c2goUl9uKTtcblx0XHRcdFx0ZWxzZSBpZigoUl9ufHxcIlwiKS5pbmRleE9mKFwiRW5kXCIpID4gMCkgc3RhdGUucG9wKCk7XG5cdFx0XHRcdGVsc2UgaWYoIXBhc3MgfHwgb3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgcmVjb3JkIFwiICsgUlQgKyBcIiBcIiArIFJfbik7XG5cdFx0fVxuXHR9LCBvcHRzKTtcblxuXHRpZihyZWxzWychaWQnXVtzWychcmVsJ11dKSBzWychZHJhd2VsJ10gPSByZWxzWychaWQnXVtzWychcmVsJ11dO1xuXHRyZXR1cm4gcztcbn1cbmZ1bmN0aW9uIHdyaXRlX2NzX2JpbigpIHtcblx0dmFyIGJhID0gYnVmX2FycmF5KCk7XG5cdHdyaXRlX3JlY29yZChiYSwgXCJCcnRCZWdpblNoZWV0XCIpO1xuXHQvKiBbQnJ0Q3NQcm9wXSAqL1xuXHQvKiBDU1ZJRVdTICovXG5cdC8qIFtbQnJ0Q3NQcm90ZWN0aW9uSXNvXSBCcnRDc1Byb3RlY3Rpb25dICovXG5cdC8qIFtVU0VSQ1NWSUVXU10gKi9cblx0LyogW0JydE1hcmdpbnNdICovXG5cdC8qIFtCcnRDc1BhZ2VTZXR1cF0gKi9cblx0LyogW0hFQURFUkZPT1RFUl0gKi9cblx0LyogQnJ0RHJhd2luZyAqL1xuXHQvKiBbQnJ0TGVnYWN5RHJhd2luZ10gKi9cblx0LyogW0JydExlZ2FjeURyYXdpbmdIRl0gKi9cblx0LyogW0JydEJrSGltXSAqL1xuXHQvKiBbV0VCUFVCSVRFTVNdICovXG5cdC8qIEZSVENIQVJUU0hFRVQgKi9cblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEVuZFNoZWV0XCIpO1xuXHRyZXR1cm4gYmEuZW5kKCk7XG59XG4vKiAxOC4yLjI4IChDVF9Xb3JrYm9va1Byb3RlY3Rpb24pIERlZmF1bHRzICovXG52YXIgV0JQcm9wc0RlZiA9IFtcblx0WydhbGxvd1JlZnJlc2hRdWVyeScsICAgICAgICAgICBmYWxzZSwgXCJib29sXCJdLFxuXHRbJ2F1dG9Db21wcmVzc1BpY3R1cmVzJywgICAgICAgIHRydWUsICBcImJvb2xcIl0sXG5cdFsnYmFja3VwRmlsZScsICAgICAgICAgICAgICAgICAgZmFsc2UsIFwiYm9vbFwiXSxcblx0WydjaGVja0NvbXBhdGliaWxpdHknLCAgICAgICAgICBmYWxzZSwgXCJib29sXCJdLFxuXHRbJ0NvZGVOYW1lJywgICAgICAgICAgICAgICAgICAgICcnXSxcblx0WydkYXRlMTkwNCcsICAgICAgICAgICAgICAgICAgICBmYWxzZSwgXCJib29sXCJdLFxuXHRbJ2RlZmF1bHRUaGVtZVZlcnNpb24nLCAgICAgICAgIDAsICAgICAgXCJpbnRcIl0sXG5cdFsnZmlsdGVyUHJpdmFjeScsICAgICAgICAgICAgICAgZmFsc2UsIFwiYm9vbFwiXSxcblx0WydoaWRlUGl2b3RGaWVsZExpc3QnLCAgICAgICAgICBmYWxzZSwgXCJib29sXCJdLFxuXHRbJ3Byb21wdGVkU29sdXRpb25zJywgICAgICAgICAgIGZhbHNlLCBcImJvb2xcIl0sXG5cdFsncHVibGlzaEl0ZW1zJywgICAgICAgICAgICAgICAgZmFsc2UsIFwiYm9vbFwiXSxcblx0WydyZWZyZXNoQWxsQ29ubmVjdGlvbnMnLCAgICAgICBmYWxzZSwgXCJib29sXCJdLFxuXHRbJ3NhdmVFeHRlcm5hbExpbmtWYWx1ZXMnLCAgICAgIHRydWUsICBcImJvb2xcIl0sXG5cdFsnc2hvd0JvcmRlclVuc2VsZWN0ZWRUYWJsZXMnLCAgdHJ1ZSwgIFwiYm9vbFwiXSxcblx0WydzaG93SW5rQW5ub3RhdGlvbicsICAgICAgICAgICB0cnVlLCAgXCJib29sXCJdLFxuXHRbJ3Nob3dPYmplY3RzJywgICAgICAgICAgICAgICAgICdhbGwnXSxcblx0WydzaG93UGl2b3RDaGFydEZpbHRlcicsICAgICAgICBmYWxzZSwgXCJib29sXCJdLFxuXHRbJ3VwZGF0ZUxpbmtzJywgJ3VzZXJTZXQnXVxuXTtcblxuLyogMTguMi4zMCAoQ1RfQm9va1ZpZXcpIERlZmF1bHRzICovXG52YXIgV0JWaWV3RGVmID0gW1xuXHRbJ2FjdGl2ZVRhYicsICAgICAgICAgICAgICAgICAgIDAsICAgICAgXCJpbnRcIl0sXG5cdFsnYXV0b0ZpbHRlckRhdGVHcm91cGluZycsICAgICAgdHJ1ZSwgIFwiYm9vbFwiXSxcblx0WydmaXJzdFNoZWV0JywgICAgICAgICAgICAgICAgICAwLCAgICAgIFwiaW50XCJdLFxuXHRbJ21pbmltaXplZCcsICAgICAgICAgICAgICAgICAgIGZhbHNlLCBcImJvb2xcIl0sXG5cdFsnc2hvd0hvcml6b250YWxTY3JvbGwnLCAgICAgICAgdHJ1ZSwgIFwiYm9vbFwiXSxcblx0WydzaG93U2hlZXRUYWJzJywgICAgICAgICAgICAgICB0cnVlLCAgXCJib29sXCJdLFxuXHRbJ3Nob3dWZXJ0aWNhbFNjcm9sbCcsICAgICAgICAgIHRydWUsICBcImJvb2xcIl0sXG5cdFsndGFiUmF0aW8nLCAgICAgICAgICAgICAgICAgICAgNjAwLCAgICBcImludFwiXSxcblx0Wyd2aXNpYmlsaXR5JywgICAgICAgICAgICAgICAgICAndmlzaWJsZSddXG5cdC8vd2luZG93e0hlaWdodCxXaWR0aH0sIHt4LHl9V2luZG93XG5dO1xuXG4vKiAxOC4yLjE5IChDVF9TaGVldCkgRGVmYXVsdHMgKi9cbnZhciBTaGVldERlZiA9IFtcblx0Ly9bJ3N0YXRlJywgJ3Zpc2libGUnXVxuXTtcblxuLyogMTguMi4yICAoQ1RfQ2FsY1ByKSBEZWZhdWx0cyAqL1xudmFyIENhbGNQckRlZiA9IFtcblx0WydjYWxjQ29tcGxldGVkJywgJ3RydWUnXSxcblx0WydjYWxjTW9kZScsICdhdXRvJ10sXG5cdFsnY2FsY09uU2F2ZScsICd0cnVlJ10sXG5cdFsnY29uY3VycmVudENhbGMnLCAndHJ1ZSddLFxuXHRbJ2Z1bGxDYWxjT25Mb2FkJywgJ2ZhbHNlJ10sXG5cdFsnZnVsbFByZWNpc2lvbicsICd0cnVlJ10sXG5cdFsnaXRlcmF0ZScsICdmYWxzZSddLFxuXHRbJ2l0ZXJhdGVDb3VudCcsICcxMDAnXSxcblx0WydpdGVyYXRlRGVsdGEnLCAnMC4wMDEnXSxcblx0WydyZWZNb2RlJywgJ0ExJ11cbl07XG5cbi8qIDE4LjIuMyAoQ1RfQ3VzdG9tV29ya2Jvb2tWaWV3KSBEZWZhdWx0cyAqL1xuLyp2YXIgQ3VzdG9tV0JWaWV3RGVmID0gW1xuXHRbJ2F1dG9VcGRhdGUnLCAnZmFsc2UnXSxcblx0WydjaGFuZ2VzU2F2ZWRXaW4nLCAnZmFsc2UnXSxcblx0WydpbmNsdWRlSGlkZGVuUm93Q29sJywgJ3RydWUnXSxcblx0WydpbmNsdWRlUHJpbnRTZXR0aW5ncycsICd0cnVlJ10sXG5cdFsnbWF4aW1pemVkJywgJ2ZhbHNlJ10sXG5cdFsnbWluaW1pemVkJywgJ2ZhbHNlJ10sXG5cdFsnb25seVN5bmMnLCAnZmFsc2UnXSxcblx0WydwZXJzb25hbFZpZXcnLCAnZmFsc2UnXSxcblx0WydzaG93Q29tbWVudHMnLCAnY29tbUluZGljYXRvciddLFxuXHRbJ3Nob3dGb3JtdWxhQmFyJywgJ3RydWUnXSxcblx0WydzaG93SG9yaXpvbnRhbFNjcm9sbCcsICd0cnVlJ10sXG5cdFsnc2hvd09iamVjdHMnLCAnYWxsJ10sXG5cdFsnc2hvd1NoZWV0VGFicycsICd0cnVlJ10sXG5cdFsnc2hvd1N0YXR1c2JhcicsICd0cnVlJ10sXG5cdFsnc2hvd1ZlcnRpY2FsU2Nyb2xsJywgJ3RydWUnXSxcblx0Wyd0YWJSYXRpbycsICc2MDAnXSxcblx0Wyd4V2luZG93JywgJzAnXSxcblx0Wyd5V2luZG93JywgJzAnXVxuXTsqL1xuXG5mdW5jdGlvbiBwdXNoX2RlZmF1bHRzX2FycmF5KHRhcmdldCwgZGVmYXVsdHMpIHtcblx0Zm9yKHZhciBqID0gMDsgaiAhPSB0YXJnZXQubGVuZ3RoOyArK2opIHsgdmFyIHcgPSB0YXJnZXRbal07XG5cdFx0Zm9yKHZhciBpPTA7IGkgIT0gZGVmYXVsdHMubGVuZ3RoOyArK2kpIHsgdmFyIHogPSBkZWZhdWx0c1tpXTtcblx0XHRcdGlmKHdbelswXV0gPT0gbnVsbCkgd1t6WzBdXSA9IHpbMV07XG5cdFx0XHRlbHNlIHN3aXRjaCh6WzJdKSB7XG5cdFx0XHRjYXNlIFwiYm9vbFwiOiBpZih0eXBlb2Ygd1t6WzBdXSA9PSBcInN0cmluZ1wiKSB3W3pbMF1dID0gcGFyc2V4bWxib29sKHdbelswXV0pOyBicmVhaztcblx0XHRcdGNhc2UgXCJpbnRcIjogaWYodHlwZW9mIHdbelswXV0gPT0gXCJzdHJpbmdcIikgd1t6WzBdXSA9IHBhcnNlSW50KHdbelswXV0sIDEwKTsgYnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5mdW5jdGlvbiBwdXNoX2RlZmF1bHRzKHRhcmdldCwgZGVmYXVsdHMpIHtcblx0Zm9yKHZhciBpID0gMDsgaSAhPSBkZWZhdWx0cy5sZW5ndGg7ICsraSkgeyB2YXIgeiA9IGRlZmF1bHRzW2ldO1xuXHRcdGlmKHRhcmdldFt6WzBdXSA9PSBudWxsKSB0YXJnZXRbelswXV0gPSB6WzFdO1xuXHRcdGVsc2Ugc3dpdGNoKHpbMl0pIHtcblx0XHRcdGNhc2UgXCJib29sXCI6IGlmKHR5cGVvZiB0YXJnZXRbelswXV0gPT0gXCJzdHJpbmdcIikgdGFyZ2V0W3pbMF1dID0gcGFyc2V4bWxib29sKHRhcmdldFt6WzBdXSk7IGJyZWFrO1xuXHRcdFx0Y2FzZSBcImludFwiOiBpZih0eXBlb2YgdGFyZ2V0W3pbMF1dID09IFwic3RyaW5nXCIpIHRhcmdldFt6WzBdXSA9IHBhcnNlSW50KHRhcmdldFt6WzBdXSwgMTApOyBicmVhaztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcGFyc2Vfd2JfZGVmYXVsdHMod2IpIHtcblx0cHVzaF9kZWZhdWx0cyh3Yi5XQlByb3BzLCBXQlByb3BzRGVmKTtcblx0cHVzaF9kZWZhdWx0cyh3Yi5DYWxjUHIsIENhbGNQckRlZik7XG5cblx0cHVzaF9kZWZhdWx0c19hcnJheSh3Yi5XQlZpZXcsIFdCVmlld0RlZik7XG5cdHB1c2hfZGVmYXVsdHNfYXJyYXkod2IuU2hlZXRzLCBTaGVldERlZik7XG5cblx0X3NzZm9wdHMuZGF0ZTE5MDQgPSBwYXJzZXhtbGJvb2wod2IuV0JQcm9wcy5kYXRlMTkwNCk7XG59XG5cbmZ1bmN0aW9uIHNhZmUxOTA0KHdiKSB7XG5cdC8qIFRPRE86IHN0b3JlIGRhdGUxOTA0IHNvbWV3aGVyZSBlbHNlICovXG5cdGlmKCF3Yi5Xb3JrYm9vaykgcmV0dXJuIFwiZmFsc2VcIjtcblx0aWYoIXdiLldvcmtib29rLldCUHJvcHMpIHJldHVybiBcImZhbHNlXCI7XG5cdHJldHVybiBwYXJzZXhtbGJvb2wod2IuV29ya2Jvb2suV0JQcm9wcy5kYXRlMTkwNCkgPyBcInRydWVcIiA6IFwiZmFsc2VcIjtcbn1cblxudmFyIGJhZGNoYXJzID0gXCJdWyo/XFwvXFxcXFwiLnNwbGl0KFwiXCIpO1xuZnVuY3Rpb24gY2hlY2tfd3NfbmFtZShuLCBzYWZlKSB7XG5cdGlmKG4ubGVuZ3RoID4gMzEpIHsgaWYoc2FmZSkgcmV0dXJuIGZhbHNlOyB0aHJvdyBuZXcgRXJyb3IoXCJTaGVldCBuYW1lcyBjYW5ub3QgZXhjZWVkIDMxIGNoYXJzXCIpOyB9XG5cdHZhciBfZ29vZCA9IHRydWU7XG5cdGJhZGNoYXJzLmZvckVhY2goZnVuY3Rpb24oYykge1xuXHRcdGlmKG4uaW5kZXhPZihjKSA9PSAtMSkgcmV0dXJuO1xuXHRcdGlmKCFzYWZlKSB0aHJvdyBuZXcgRXJyb3IoXCJTaGVldCBuYW1lIGNhbm5vdCBjb250YWluIDogXFxcXCAvID8gKiBbIF1cIik7XG5cdFx0X2dvb2QgPSBmYWxzZTtcblx0fSk7XG5cdHJldHVybiBfZ29vZDtcbn1cbmZ1bmN0aW9uIGNoZWNrX3diX25hbWVzKE4sIFMsIGNvZGVzKSB7XG5cdE4uZm9yRWFjaChmdW5jdGlvbihuLGkpIHtcblx0XHRjaGVja193c19uYW1lKG4pO1xuXHRcdGZvcih2YXIgaiA9IDA7IGogPCBpOyArK2opIGlmKG4gPT0gTltqXSkgdGhyb3cgbmV3IEVycm9yKFwiRHVwbGljYXRlIFNoZWV0IE5hbWU6IFwiICsgbik7XG5cdFx0aWYoY29kZXMpIHtcblx0XHRcdHZhciBjbiA9IChTICYmIFNbaV0gJiYgU1tpXS5Db2RlTmFtZSkgfHwgbjtcblx0XHRcdGlmKGNuLmNoYXJDb2RlQXQoMCkgPT0gOTUgJiYgY24ubGVuZ3RoID4gMjIpIHRocm93IG5ldyBFcnJvcihcIkJhZCBDb2RlIE5hbWU6IFdvcmtzaGVldFwiICsgY24pO1xuXHRcdH1cblx0fSk7XG59XG5mdW5jdGlvbiBjaGVja193Yih3Yikge1xuXHRpZighd2IgfHwgIXdiLlNoZWV0TmFtZXMgfHwgIXdiLlNoZWV0cykgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBXb3JrYm9va1wiKTtcblx0aWYoIXdiLlNoZWV0TmFtZXMubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoXCJXb3JrYm9vayBpcyBlbXB0eVwiKTtcblx0dmFyIFNoZWV0cyA9ICh3Yi5Xb3JrYm9vayAmJiB3Yi5Xb3JrYm9vay5TaGVldHMpIHx8IFtdO1xuXHRjaGVja193Yl9uYW1lcyh3Yi5TaGVldE5hbWVzLCBTaGVldHMsICEhd2IudmJhcmF3KTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IHdiLlNoZWV0TmFtZXMubGVuZ3RoOyArK2kpIGNoZWNrX3dzKHdiLlNoZWV0c1t3Yi5TaGVldE5hbWVzW2ldXSwgd2IuU2hlZXROYW1lc1tpXSwgaSk7XG5cdC8qIFRPRE86IHZhbGlkYXRlIHdvcmtib29rICovXG59XG4vKiAxOC4yIFdvcmtib29rICovXG52YXIgd2Juc3JlZ2V4ID0gLzxcXHcrOndvcmtib29rLztcbmZ1bmN0aW9uIHBhcnNlX3diX3htbChkYXRhLCBvcHRzKSB7XG5cdGlmKCFkYXRhKSB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBmaWxlXCIpO1xuXHR2YXIgd2IgPSB7IEFwcFZlcnNpb246e30sIFdCUHJvcHM6e30sIFdCVmlldzpbXSwgU2hlZXRzOltdLCBDYWxjUHI6e30sIE5hbWVzOltdLCB4bWxuczogXCJcIiB9O1xuXHR2YXIgcGFzcyA9IGZhbHNlLCB4bWxucyA9IFwieG1sbnNcIjtcblx0dmFyIGRuYW1lID0ge30sIGRuc3RhcnQgPSAwO1xuXHRkYXRhLnJlcGxhY2UodGFncmVnZXgsIGZ1bmN0aW9uIHhtbF93Yih4LCBpZHgpIHtcblx0XHR2YXIgeSA9IHBhcnNleG1sdGFnKHgpO1xuXHRcdHN3aXRjaChzdHJpcF9ucyh5WzBdKSkge1xuXHRcdFx0Y2FzZSAnPD94bWwnOiBicmVhaztcblxuXHRcdFx0LyogMTguMi4yNyB3b3JrYm9vayBDVF9Xb3JrYm9vayAxICovXG5cdFx0XHRjYXNlICc8d29ya2Jvb2snOlxuXHRcdFx0XHRpZih4Lm1hdGNoKHdibnNyZWdleCkpIHhtbG5zID0gXCJ4bWxuc1wiICsgeC5tYXRjaCgvPChcXHcrKTovKVsxXTtcblx0XHRcdFx0d2IueG1sbnMgPSB5W3htbG5zXTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICc8L3dvcmtib29rPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC4yLjEzIGZpbGVWZXJzaW9uIENUX0ZpbGVWZXJzaW9uID8gKi9cblx0XHRcdGNhc2UgJzxmaWxlVmVyc2lvbic6IGRlbGV0ZSB5WzBdOyB3Yi5BcHBWZXJzaW9uID0geTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8ZmlsZVZlcnNpb24vPic6IGNhc2UgJzwvZmlsZVZlcnNpb24+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjIuMTIgZmlsZVNoYXJpbmcgQ1RfRmlsZVNoYXJpbmcgPyAqL1xuXHRcdFx0Y2FzZSAnPGZpbGVTaGFyaW5nJzpcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICc8ZmlsZVNoYXJpbmcvPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC4yLjI4IHdvcmtib29rUHIgQ1RfV29ya2Jvb2tQciA/ICovXG5cdFx0XHRjYXNlICc8d29ya2Jvb2tQcic6XG5cdFx0XHRjYXNlICc8d29ya2Jvb2tQci8+Jzpcblx0XHRcdFx0V0JQcm9wc0RlZi5mb3JFYWNoKGZ1bmN0aW9uKHcpIHtcblx0XHRcdFx0XHRpZih5W3dbMF1dID09IG51bGwpIHJldHVybjtcblx0XHRcdFx0XHRzd2l0Y2god1syXSkge1xuXHRcdFx0XHRcdFx0Y2FzZSBcImJvb2xcIjogd2IuV0JQcm9wc1t3WzBdXSA9IHBhcnNleG1sYm9vbCh5W3dbMF1dKTsgYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIFwiaW50XCI6IHdiLldCUHJvcHNbd1swXV0gPSBwYXJzZUludCh5W3dbMF1dLCAxMCk7IGJyZWFrO1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDogd2IuV0JQcm9wc1t3WzBdXSA9IHlbd1swXV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0aWYoeS5jb2RlTmFtZSkgd2IuV0JQcm9wcy5Db2RlTmFtZSA9IHV0ZjhyZWFkKHkuY29kZU5hbWUpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJzwvd29ya2Jvb2tQcj4nOiBicmVhaztcblxuXHRcdFx0LyogMTguMi4yOSB3b3JrYm9va1Byb3RlY3Rpb24gQ1RfV29ya2Jvb2tQcm90ZWN0aW9uID8gKi9cblx0XHRcdGNhc2UgJzx3b3JrYm9va1Byb3RlY3Rpb24nOlxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJzx3b3JrYm9va1Byb3RlY3Rpb24vPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC4yLjEgIGJvb2tWaWV3cyBDVF9Cb29rVmlld3MgPyAqL1xuXHRcdFx0Y2FzZSAnPGJvb2tWaWV3cyc6IGNhc2UgJzxib29rVmlld3M+JzogY2FzZSAnPC9ib29rVmlld3M+JzogYnJlYWs7XG5cdFx0XHQvKiAxOC4yLjMwICAgd29ya2Jvb2tWaWV3IENUX0Jvb2tWaWV3ICsgKi9cblx0XHRcdGNhc2UgJzx3b3JrYm9va1ZpZXcnOiBjYXNlICc8d29ya2Jvb2tWaWV3Lz4nOiBkZWxldGUgeVswXTsgd2IuV0JWaWV3LnB1c2goeSk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC93b3JrYm9va1ZpZXc+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjIuMjAgc2hlZXRzIENUX1NoZWV0cyAxICovXG5cdFx0XHRjYXNlICc8c2hlZXRzJzogY2FzZSAnPHNoZWV0cz4nOiBjYXNlICc8L3NoZWV0cz4nOiBicmVhazsgLy8gYWdncmVnYXRlIHNoZWV0XG5cdFx0XHQvKiAxOC4yLjE5ICAgc2hlZXQgQ1RfU2hlZXQgKyAqL1xuXHRcdFx0Y2FzZSAnPHNoZWV0Jzpcblx0XHRcdFx0c3dpdGNoKHkuc3RhdGUpIHtcblx0XHRcdFx0XHRjYXNlIFwiaGlkZGVuXCI6IHkuSGlkZGVuID0gMTsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBcInZlcnlIaWRkZW5cIjogeS5IaWRkZW4gPSAyOyBicmVhaztcblx0XHRcdFx0XHRkZWZhdWx0OiB5LkhpZGRlbiA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGVsZXRlIHkuc3RhdGU7XG5cdFx0XHRcdHkubmFtZSA9IHVuZXNjYXBleG1sKHV0ZjhyZWFkKHkubmFtZSkpO1xuXHRcdFx0XHRkZWxldGUgeVswXTsgd2IuU2hlZXRzLnB1c2goeSk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9zaGVldD4nOiBicmVhaztcblxuXHRcdFx0LyogMTguMi4xNSBmdW5jdGlvbkdyb3VwcyBDVF9GdW5jdGlvbkdyb3VwcyA/ICovXG5cdFx0XHRjYXNlICc8ZnVuY3Rpb25Hcm91cHMnOiBjYXNlICc8ZnVuY3Rpb25Hcm91cHMvPic6IGJyZWFrO1xuXHRcdFx0LyogMTguMi4xNCAgIGZ1bmN0aW9uR3JvdXAgQ1RfRnVuY3Rpb25Hcm91cCArICovXG5cdFx0XHRjYXNlICc8ZnVuY3Rpb25Hcm91cCc6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC4yLjkgIGV4dGVybmFsUmVmZXJlbmNlcyBDVF9FeHRlcm5hbFJlZmVyZW5jZXMgPyAqL1xuXHRcdFx0Y2FzZSAnPGV4dGVybmFsUmVmZXJlbmNlcyc6IGNhc2UgJzwvZXh0ZXJuYWxSZWZlcmVuY2VzPic6IGNhc2UgJzxleHRlcm5hbFJlZmVyZW5jZXM+JzogYnJlYWs7XG5cdFx0XHQvKiAxOC4yLjggICAgZXh0ZXJuYWxSZWZlcmVuY2UgQ1RfRXh0ZXJuYWxSZWZlcmVuY2UgKyAqL1xuXHRcdFx0Y2FzZSAnPGV4dGVybmFsUmVmZXJlbmNlJzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjIuNiAgZGVmaW5lZE5hbWVzIENUX0RlZmluZWROYW1lcyA/ICovXG5cdFx0XHRjYXNlICc8ZGVmaW5lZE5hbWVzLz4nOiBicmVhaztcblx0XHRcdGNhc2UgJzxkZWZpbmVkTmFtZXM+JzogY2FzZSAnPGRlZmluZWROYW1lcyc6IHBhc3M9dHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8L2RlZmluZWROYW1lcz4nOiBwYXNzPWZhbHNlOyBicmVhaztcblx0XHRcdC8qIDE4LjIuNSAgICBkZWZpbmVkTmFtZSBDVF9EZWZpbmVkTmFtZSArICovXG5cdFx0XHRjYXNlICc8ZGVmaW5lZE5hbWUnOiB7XG5cdFx0XHRcdGRuYW1lID0ge307XG5cdFx0XHRcdGRuYW1lLk5hbWUgPSB1dGY4cmVhZCh5Lm5hbWUpO1xuXHRcdFx0XHRpZih5LmNvbW1lbnQpIGRuYW1lLkNvbW1lbnQgPSB5LmNvbW1lbnQ7XG5cdFx0XHRcdGlmKHkubG9jYWxTaGVldElkKSBkbmFtZS5TaGVldCA9ICt5LmxvY2FsU2hlZXRJZDtcblx0XHRcdFx0aWYocGFyc2V4bWxib29sKHkuaGlkZGVufHxcIjBcIikpIGRuYW1lLkhpZGRlbiA9IHRydWU7XG5cdFx0XHRcdGRuc3RhcnQgPSBpZHggKyB4Lmxlbmd0aDtcblx0XHRcdH1cdGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9kZWZpbmVkTmFtZT4nOiB7XG5cdFx0XHRcdGRuYW1lLlJlZiA9IHVuZXNjYXBleG1sKHV0ZjhyZWFkKGRhdGEuc2xpY2UoZG5zdGFydCwgaWR4KSkpO1xuXHRcdFx0XHR3Yi5OYW1lcy5wdXNoKGRuYW1lKTtcblx0XHRcdH0gYnJlYWs7XG5cdFx0XHRjYXNlICc8ZGVmaW5lZE5hbWUvPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC4yLjIgIGNhbGNQciBDVF9DYWxjUHIgPyAqL1xuXHRcdFx0Y2FzZSAnPGNhbGNQcic6IGRlbGV0ZSB5WzBdOyB3Yi5DYWxjUHIgPSB5OyBicmVhaztcblx0XHRcdGNhc2UgJzxjYWxjUHIvPic6IGRlbGV0ZSB5WzBdOyB3Yi5DYWxjUHIgPSB5OyBicmVhaztcblx0XHRcdGNhc2UgJzwvY2FsY1ByPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC4yLjE2IG9sZVNpemUgQ1RfT2xlU2l6ZSA/IChyZWYgcmVxdWlyZWQpICovXG5cdFx0XHRjYXNlICc8b2xlU2l6ZSc6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC4yLjQgIGN1c3RvbVdvcmtib29rVmlld3MgQ1RfQ3VzdG9tV29ya2Jvb2tWaWV3cyA/ICovXG5cdFx0XHRjYXNlICc8Y3VzdG9tV29ya2Jvb2tWaWV3cz4nOiBjYXNlICc8L2N1c3RvbVdvcmtib29rVmlld3M+JzogY2FzZSAnPGN1c3RvbVdvcmtib29rVmlld3MnOiBicmVhaztcblx0XHRcdC8qIDE4LjIuMyAgY3VzdG9tV29ya2Jvb2tWaWV3IENUX0N1c3RvbVdvcmtib29rVmlldyArICovXG5cdFx0XHRjYXNlICc8Y3VzdG9tV29ya2Jvb2tWaWV3JzogY2FzZSAnPC9jdXN0b21Xb3JrYm9va1ZpZXc+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjIuMTggcGl2b3RDYWNoZXMgQ1RfUGl2b3RDYWNoZXMgPyAqL1xuXHRcdFx0Y2FzZSAnPHBpdm90Q2FjaGVzPic6IGNhc2UgJzwvcGl2b3RDYWNoZXM+JzogY2FzZSAnPHBpdm90Q2FjaGVzJzogYnJlYWs7XG5cdFx0XHQvKiAxOC4yLjE3IHBpdm90Q2FjaGUgQ1RfUGl2b3RDYWNoZSA/ICovXG5cdFx0XHRjYXNlICc8cGl2b3RDYWNoZSc6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC4yLjIxIHNtYXJ0VGFnUHIgQ1RfU21hcnRUYWdQciA/ICovXG5cdFx0XHRjYXNlICc8c21hcnRUYWdQcic6IGNhc2UgJzxzbWFydFRhZ1ByLz4nOiBicmVhaztcblxuXHRcdFx0LyogMTguMi4yMyBzbWFydFRhZ1R5cGVzIENUX1NtYXJ0VGFnVHlwZXMgPyAqL1xuXHRcdFx0Y2FzZSAnPHNtYXJ0VGFnVHlwZXMnOiBjYXNlICc8c21hcnRUYWdUeXBlcz4nOiBjYXNlICc8L3NtYXJ0VGFnVHlwZXM+JzogYnJlYWs7XG5cdFx0XHQvKiAxOC4yLjIyIHNtYXJ0VGFnVHlwZSBDVF9TbWFydFRhZ1R5cGUgPyAqL1xuXHRcdFx0Y2FzZSAnPHNtYXJ0VGFnVHlwZSc6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC4yLjI0IHdlYlB1Ymxpc2hpbmcgQ1RfV2ViUHVibGlzaGluZyA/ICovXG5cdFx0XHRjYXNlICc8d2ViUHVibGlzaGluZyc6IGNhc2UgJzx3ZWJQdWJsaXNoaW5nLz4nOiBicmVhaztcblxuXHRcdFx0LyogMTguMi4xMSBmaWxlUmVjb3ZlcnlQciBDVF9GaWxlUmVjb3ZlcnlQciA/ICovXG5cdFx0XHRjYXNlICc8ZmlsZVJlY292ZXJ5UHInOiBjYXNlICc8ZmlsZVJlY292ZXJ5UHIvPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC4yLjI2IHdlYlB1Ymxpc2hPYmplY3RzIENUX1dlYlB1Ymxpc2hPYmplY3RzID8gKi9cblx0XHRcdGNhc2UgJzx3ZWJQdWJsaXNoT2JqZWN0cz4nOiBjYXNlICc8d2ViUHVibGlzaE9iamVjdHMnOiBjYXNlICc8L3dlYlB1Ymxpc2hPYmplY3RzPic6IGJyZWFrO1xuXHRcdFx0LyogMTguMi4yNSB3ZWJQdWJsaXNoT2JqZWN0IENUX1dlYlB1Ymxpc2hPYmplY3QgPyAqL1xuXHRcdFx0Y2FzZSAnPHdlYlB1Ymxpc2hPYmplY3QnOiBicmVhaztcblxuXHRcdFx0LyogMTguMi4xMCBleHRMc3QgQ1RfRXh0ZW5zaW9uTGlzdCA/ICovXG5cdFx0XHRjYXNlICc8ZXh0THN0JzogY2FzZSAnPGV4dExzdD4nOiBjYXNlICc8L2V4dExzdD4nOiBjYXNlICc8ZXh0THN0Lz4nOiBicmVhaztcblx0XHRcdC8qIDE4LjIuNyAgZXh0IENUX0V4dGVuc2lvbiArICovXG5cdFx0XHRjYXNlICc8ZXh0JzogcGFzcz10cnVlOyBicmVhazsgLy9UT0RPOiBjaGVjayB3aXRoIHZlcnNpb25zIG9mIGV4Y2VsXG5cdFx0XHRjYXNlICc8L2V4dD4nOiBwYXNzPWZhbHNlOyBicmVhaztcblxuXHRcdFx0LyogT3RoZXJzICovXG5cdFx0XHRjYXNlICc8QXJjaElEJzogYnJlYWs7XG5cdFx0XHRjYXNlICc8QWx0ZXJuYXRlQ29udGVudCc6XG5cdFx0XHRjYXNlICc8QWx0ZXJuYXRlQ29udGVudD4nOiBwYXNzPXRydWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9BbHRlcm5hdGVDb250ZW50Pic6IHBhc3M9ZmFsc2U7IGJyZWFrO1xuXG5cdFx0XHQvKiBUT0RPICovXG5cdFx0XHRjYXNlICc8cmV2aXNpb25QdHInOiBicmVhaztcblxuXHRcdFx0ZGVmYXVsdDogaWYoIXBhc3MgJiYgb3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcigndW5yZWNvZ25pemVkICcgKyB5WzBdICsgJyBpbiB3b3JrYm9vaycpO1xuXHRcdH1cblx0XHRyZXR1cm4geDtcblx0fSk7XG5cdGlmKFhNTE5TLm1haW4uaW5kZXhPZih3Yi54bWxucykgPT09IC0xKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIE5hbWVzcGFjZTogXCIgKyB3Yi54bWxucyk7XG5cblx0cGFyc2Vfd2JfZGVmYXVsdHMod2IpO1xuXG5cdHJldHVybiB3Yjtcbn1cblxudmFyIFdCX1hNTF9ST09UID0gd3JpdGV4dGFnKCd3b3JrYm9vaycsIG51bGwsIHtcblx0J3htbG5zJzogWE1MTlMubWFpblswXSxcblx0Ly8neG1sbnM6bXgnOiBYTUxOUy5teCxcblx0Ly8neG1sbnM6cyc6IFhNTE5TLm1haW5bMF0sXG5cdCd4bWxuczpyJzogWE1MTlMuclxufSk7XG5cbmZ1bmN0aW9uIHdyaXRlX3diX3htbCh3Yikge1xuXHR2YXIgbyA9IFtYTUxfSEVBREVSXTtcblx0b1tvLmxlbmd0aF0gPSBXQl9YTUxfUk9PVDtcblxuXHR2YXIgd3JpdGVfbmFtZXMgPSAod2IuV29ya2Jvb2sgJiYgKHdiLldvcmtib29rLk5hbWVzfHxbXSkubGVuZ3RoID4gMCk7XG5cblx0LyogZmlsZVZlcnNpb24gKi9cblx0LyogZmlsZVNoYXJpbmcgKi9cblxuXHR2YXIgd29ya2Jvb2tQciA9ICh7Y29kZU5hbWU6XCJUaGlzV29ya2Jvb2tcIn0pO1xuXHRpZih3Yi5Xb3JrYm9vayAmJiB3Yi5Xb3JrYm9vay5XQlByb3BzKSB7XG5cdFx0V0JQcm9wc0RlZi5mb3JFYWNoKGZ1bmN0aW9uKHgpIHtcbmlmKCh3Yi5Xb3JrYm9vay5XQlByb3BzW3hbMF1dKSA9PSBudWxsKSByZXR1cm47XG5cdFx0XHRpZigod2IuV29ya2Jvb2suV0JQcm9wc1t4WzBdXSkgPT0geFsxXSkgcmV0dXJuO1xuXHRcdFx0d29ya2Jvb2tQclt4WzBdXSA9ICh3Yi5Xb3JrYm9vay5XQlByb3BzW3hbMF1dKTtcblx0XHR9KTtcbmlmKHdiLldvcmtib29rLldCUHJvcHMuQ29kZU5hbWUpIHsgd29ya2Jvb2tQci5jb2RlTmFtZSA9IHdiLldvcmtib29rLldCUHJvcHMuQ29kZU5hbWU7IGRlbGV0ZSB3b3JrYm9va1ByLkNvZGVOYW1lOyB9XG5cdH1cblx0b1tvLmxlbmd0aF0gPSAod3JpdGV4dGFnKCd3b3JrYm9va1ByJywgbnVsbCwgd29ya2Jvb2tQcikpO1xuXG5cdC8qIHdvcmtib29rUHJvdGVjdGlvbiAqL1xuXG5cdHZhciBzaGVldHMgPSB3Yi5Xb3JrYm9vayAmJiB3Yi5Xb3JrYm9vay5TaGVldHMgfHwgW107XG5cdHZhciBpID0gMDtcblxuXHQvKiBib29rVmlld3Mgb25seSB3cml0dGVuIGlmIGZpcnN0IHdvcmtzaGVldCBpcyBoaWRkZW4gKi9cblx0aWYoc2hlZXRzICYmIHNoZWV0c1swXSAmJiAhIXNoZWV0c1swXS5IaWRkZW4pIHtcblx0XHRvW28ubGVuZ3RoXSA9IFwiPGJvb2tWaWV3cz5cIjtcblx0XHRmb3IoaSA9IDA7IGkgIT0gd2IuU2hlZXROYW1lcy5sZW5ndGg7ICsraSkge1xuXHRcdFx0aWYoIXNoZWV0c1tpXSkgYnJlYWs7XG5cdFx0XHRpZighc2hlZXRzW2ldLkhpZGRlbikgYnJlYWs7XG5cdFx0fVxuXHRcdGlmKGkgPT0gd2IuU2hlZXROYW1lcy5sZW5ndGgpIGkgPSAwO1xuXHRcdG9bby5sZW5ndGhdID0gJzx3b3JrYm9va1ZpZXcgZmlyc3RTaGVldD1cIicgKyBpICsgJ1wiIGFjdGl2ZVRhYj1cIicgKyBpICsgJ1wiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gXCI8L2Jvb2tWaWV3cz5cIjtcblx0fVxuXG5cdG9bby5sZW5ndGhdID0gXCI8c2hlZXRzPlwiO1xuXHRmb3IoaSA9IDA7IGkgIT0gd2IuU2hlZXROYW1lcy5sZW5ndGg7ICsraSkge1xuXHRcdHZhciBzaHQgPSAoe25hbWU6ZXNjYXBleG1sKHdiLlNoZWV0TmFtZXNbaV0uc2xpY2UoMCwzMSkpfSk7XG5cdFx0c2h0LnNoZWV0SWQgPSBcIlwiKyhpKzEpO1xuXHRcdHNodFtcInI6aWRcIl0gPSBcInJJZFwiKyhpKzEpO1xuXHRcdGlmKHNoZWV0c1tpXSkgc3dpdGNoKHNoZWV0c1tpXS5IaWRkZW4pIHtcblx0XHRcdGNhc2UgMTogc2h0LnN0YXRlID0gXCJoaWRkZW5cIjsgYnJlYWs7XG5cdFx0XHRjYXNlIDI6IHNodC5zdGF0ZSA9IFwidmVyeUhpZGRlblwiOyBicmVhaztcblx0XHR9XG5cdFx0b1tvLmxlbmd0aF0gPSAod3JpdGV4dGFnKCdzaGVldCcsbnVsbCxzaHQpKTtcblx0fVxuXHRvW28ubGVuZ3RoXSA9IFwiPC9zaGVldHM+XCI7XG5cblx0LyogZnVuY3Rpb25Hcm91cHMgKi9cblx0LyogZXh0ZXJuYWxSZWZlcmVuY2VzICovXG5cblx0aWYod3JpdGVfbmFtZXMpIHtcblx0XHRvW28ubGVuZ3RoXSA9IFwiPGRlZmluZWROYW1lcz5cIjtcblx0XHRpZih3Yi5Xb3JrYm9vayAmJiB3Yi5Xb3JrYm9vay5OYW1lcykgd2IuV29ya2Jvb2suTmFtZXMuZm9yRWFjaChmdW5jdGlvbihuKSB7XG5cdFx0XHR2YXIgZCA9IHtuYW1lOm4uTmFtZX07XG5cdFx0XHRpZihuLkNvbW1lbnQpIGQuY29tbWVudCA9IG4uQ29tbWVudDtcblx0XHRcdGlmKG4uU2hlZXQgIT0gbnVsbCkgZC5sb2NhbFNoZWV0SWQgPSBcIlwiK24uU2hlZXQ7XG5cdFx0XHRpZihuLkhpZGRlbikgZC5oaWRkZW4gPSBcIjFcIjtcblx0XHRcdGlmKCFuLlJlZikgcmV0dXJuO1xuXHRcdFx0b1tvLmxlbmd0aF0gPSB3cml0ZXh0YWcoJ2RlZmluZWROYW1lJywgZXNjYXBleG1sKG4uUmVmKSwgZCk7XG5cdFx0fSk7XG5cdFx0b1tvLmxlbmd0aF0gPSBcIjwvZGVmaW5lZE5hbWVzPlwiO1xuXHR9XG5cblx0LyogY2FsY1ByICovXG5cdC8qIG9sZVNpemUgKi9cblx0LyogY3VzdG9tV29ya2Jvb2tWaWV3cyAqL1xuXHQvKiBwaXZvdENhY2hlcyAqL1xuXHQvKiBzbWFydFRhZ1ByICovXG5cdC8qIHNtYXJ0VGFnVHlwZXMgKi9cblx0Lyogd2ViUHVibGlzaGluZyAqL1xuXHQvKiBmaWxlUmVjb3ZlcnlQciAqL1xuXHQvKiB3ZWJQdWJsaXNoT2JqZWN0cyAqL1xuXHQvKiBleHRMc3QgKi9cblxuXHRpZihvLmxlbmd0aD4yKXsgb1tvLmxlbmd0aF0gPSAnPC93b3JrYm9vaz4nOyBvWzFdPW9bMV0ucmVwbGFjZShcIi8+XCIsXCI+XCIpOyB9XG5cdHJldHVybiBvLmpvaW4oXCJcIik7XG59XG4vKiBbTVMtWExTQl0gMi40LjMwNCBCcnRCdW5kbGVTaCAqL1xuZnVuY3Rpb24gcGFyc2VfQnJ0QnVuZGxlU2goZGF0YSwgbGVuZ3RoKSB7XG5cdHZhciB6ID0ge307XG5cdHouSGlkZGVuID0gZGF0YS5yZWFkX3NoaWZ0KDQpOyAvL2hzU3RhdGUgU1RfU2hlZXRTdGF0ZVxuXHR6LmlUYWJJRCA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0ei5zdHJSZWxJRCA9IHBhcnNlX1JlbElEKGRhdGEsbGVuZ3RoLTgpO1xuXHR6Lm5hbWUgPSBwYXJzZV9YTFdpZGVTdHJpbmcoZGF0YSk7XG5cdHJldHVybiB6O1xufVxuZnVuY3Rpb24gd3JpdGVfQnJ0QnVuZGxlU2goZGF0YSwgbykge1xuXHRpZighbykgbyA9IG5ld19idWYoMTI3KTtcblx0by53cml0ZV9zaGlmdCg0LCBkYXRhLkhpZGRlbik7XG5cdG8ud3JpdGVfc2hpZnQoNCwgZGF0YS5pVGFiSUQpO1xuXHR3cml0ZV9SZWxJRChkYXRhLnN0clJlbElELCBvKTtcblx0d3JpdGVfWExXaWRlU3RyaW5nKGRhdGEubmFtZS5zbGljZSgwLDMxKSwgbyk7XG5cdHJldHVybiBvLmxlbmd0aCA+IG8ubCA/IG8uc2xpY2UoMCwgby5sKSA6IG87XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuODE1IEJydFdiUHJvcCAqL1xuZnVuY3Rpb24gcGFyc2VfQnJ0V2JQcm9wKGRhdGEsIGxlbmd0aCkge1xuXHR2YXIgbyA9ICh7fSk7XG5cdHZhciBmbGFncyA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0by5kZWZhdWx0VGhlbWVWZXJzaW9uID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgc3RyTmFtZSA9IChsZW5ndGggPiA4KSA/IHBhcnNlX1hMV2lkZVN0cmluZyhkYXRhKSA6IFwiXCI7XG5cdGlmKHN0ck5hbWUubGVuZ3RoID4gMCkgby5Db2RlTmFtZSA9IHN0ck5hbWU7XG5cdG8uYXV0b0NvbXByZXNzUGljdHVyZXMgPSAhIShmbGFncyAmIDB4MTAwMDApO1xuXHRvLmJhY2t1cEZpbGUgPSAhIShmbGFncyAmIDB4NDApO1xuXHRvLmNoZWNrQ29tcGF0aWJpbGl0eSA9ICEhKGZsYWdzICYgMHgxMDAwKTtcblx0by5kYXRlMTkwNCA9ICEhKGZsYWdzICYgMHgwMSk7XG5cdG8uZmlsdGVyUHJpdmFjeSA9ICEhKGZsYWdzICYgMHgwOCk7XG5cdG8uaGlkZVBpdm90RmllbGRMaXN0ID0gISEoZmxhZ3MgJiAweDQwMCk7XG5cdG8ucHJvbXB0ZWRTb2x1dGlvbnMgPSAhIShmbGFncyAmIDB4MTApO1xuXHRvLnB1Ymxpc2hJdGVtcyA9ICEhKGZsYWdzICYgMHg4MDApO1xuXHRvLnJlZnJlc2hBbGxDb25uZWN0aW9ucyA9ICEhKGZsYWdzICYgMHg0MDAwMCk7XG5cdG8uc2F2ZUV4dGVybmFsTGlua1ZhbHVlcyA9ICEhKGZsYWdzICYgMHg4MCk7XG5cdG8uc2hvd0JvcmRlclVuc2VsZWN0ZWRUYWJsZXMgPSAhIShmbGFncyAmIDB4MDQpO1xuXHRvLnNob3dJbmtBbm5vdGF0aW9uID0gISEoZmxhZ3MgJiAweDIwKTtcblx0by5zaG93T2JqZWN0cyA9IFtcImFsbFwiLCBcInBsYWNlaG9sZGVyc1wiLCBcIm5vbmVcIl1bKGZsYWdzID4+IDEzKSAmIDB4MDNdO1xuXHRvLnNob3dQaXZvdENoYXJ0RmlsdGVyID0gISEoZmxhZ3MgJiAweDgwMDApO1xuXHRvLnVwZGF0ZUxpbmtzID0gW1widXNlclNldFwiLCBcIm5ldmVyXCIsIFwiYWx3YXlzXCJdWyhmbGFncyA+PiA4KSAmIDB4MDNdO1xuXHRyZXR1cm4gbztcbn1cbmZ1bmN0aW9uIHdyaXRlX0JydFdiUHJvcChkYXRhLCBvKSB7XG5cdGlmKCFvKSBvID0gbmV3X2J1Zig3Mik7XG5cdHZhciBmbGFncyA9IDA7XG5cdGlmKGRhdGEpIHtcblx0XHQvKiBUT0RPOiBtaXJyb3IgcGFyc2VfQnJ0V2JQcm9wIGZpZWxkcyAqL1xuXHRcdGlmKGRhdGEuZmlsdGVyUHJpdmFjeSkgZmxhZ3MgfD0gMHgwODtcblx0fVxuXHRvLndyaXRlX3NoaWZ0KDQsIGZsYWdzKTtcblx0by53cml0ZV9zaGlmdCg0LCAwKTtcblx0d3JpdGVfWExTQkNvZGVOYW1lKGRhdGEgJiYgZGF0YS5Db2RlTmFtZSB8fCBcIlRoaXNXb3JrYm9va1wiLCBvKTtcblx0cmV0dXJuIG8uc2xpY2UoMCwgby5sKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VfQnJ0RlJUQXJjaElEJChkYXRhLCBsZW5ndGgpIHtcblx0dmFyIG8gPSB7fTtcblx0ZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHRvLkFyY2hJRCA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0ZGF0YS5sICs9IGxlbmd0aCAtIDg7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTQl0gMi40LjY4NyBCcnROYW1lICovXG5mdW5jdGlvbiBwYXJzZV9CcnROYW1lKGRhdGEsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgZW5kID0gZGF0YS5sICsgbGVuZ3RoO1xuXHRkYXRhLmwgKz0gNDsgLy92YXIgZmxhZ3MgPSBkYXRhLnJlYWRfc2hpZnQoNCk7XG5cdGRhdGEubCArPSAxOyAvL3ZhciBjaEtleSA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblx0dmFyIGl0YWIgPSBkYXRhLnJlYWRfc2hpZnQoNCk7XG5cdHZhciBuYW1lID0gcGFyc2VfWExOYW1lV2lkZVN0cmluZyhkYXRhKTtcblx0dmFyIGZvcm11bGEgPSBwYXJzZV9YTFNCTmFtZVBhcnNlZEZvcm11bGEoZGF0YSwgMCwgb3B0cyk7XG5cdHZhciBjb21tZW50ID0gcGFyc2VfWExOdWxsYWJsZVdpZGVTdHJpbmcoZGF0YSk7XG5cdC8vaWYoMCAvKiBmUHJvYyAqLykge1xuXHRcdC8vIHVudXNlZHN0cmluZzE6IFhMTnVsbGFibGVXaWRlU3RyaW5nXG5cdFx0Ly8gZGVzY3JpcHRpb246IFhMTnVsbGFibGVXaWRlU3RyaW5nXG5cdFx0Ly8gaGVscFRvcGljOiBYTE51bGxhYmxlV2lkZVN0cmluZ1xuXHRcdC8vIHVudXNlZHN0cmluZzI6IFhMTnVsbGFibGVXaWRlU3RyaW5nXG5cdC8vfVxuXHRkYXRhLmwgPSBlbmQ7XG5cdHZhciBvdXQgPSAoe05hbWU6bmFtZSwgUHRnOmZvcm11bGF9KTtcblx0aWYoaXRhYiA8IDB4RkZGRkZGRikgb3V0LlNoZWV0ID0gaXRhYjtcblx0aWYoY29tbWVudCkgb3V0LkNvbW1lbnQgPSBjb21tZW50O1xuXHRyZXR1cm4gb3V0O1xufVxuXG4vKiBbTVMtWExTQl0gMi4xLjcuNjEgV29ya2Jvb2sgKi9cbmZ1bmN0aW9uIHBhcnNlX3diX2JpbihkYXRhLCBvcHRzKSB7XG5cdHZhciB3YiA9IHsgQXBwVmVyc2lvbjp7fSwgV0JQcm9wczp7fSwgV0JWaWV3OltdLCBTaGVldHM6W10sIENhbGNQcjp7fSwgeG1sbnM6IFwiXCIgfTtcblx0dmFyIHN0YXRlID0gW107XG5cdHZhciBwYXNzID0gZmFsc2U7XG5cblx0aWYoIW9wdHMpIG9wdHMgPSB7fTtcblx0b3B0cy5iaWZmID0gMTI7XG5cblx0dmFyIE5hbWVzID0gW107XG5cdHZhciBzdXBib29rcyA9IChbW11dKTtcblx0c3VwYm9va3MuU2hlZXROYW1lcyA9IFtdO1xuXHRzdXBib29rcy5YVEkgPSBbXTtcblxuXHRYTFNCUmVjb3JkRW51bVsweDAwMTBdID0geyBuOlwiQnJ0RlJUQXJjaElEJFwiLCBmOnBhcnNlX0JydEZSVEFyY2hJRCQgfTtcblxuXHRyZWNvcmRob3BwZXIoZGF0YSwgZnVuY3Rpb24gaG9wcGVyX3diKHZhbCwgUl9uLCBSVCkge1xuXHRcdHN3aXRjaChSVCkge1xuXHRcdFx0Y2FzZSAweDAwOUM6IC8qICdCcnRCdW5kbGVTaCcgKi9cblx0XHRcdFx0c3VwYm9va3MuU2hlZXROYW1lcy5wdXNoKHZhbC5uYW1lKTtcblx0XHRcdFx0d2IuU2hlZXRzLnB1c2godmFsKTsgYnJlYWs7XG5cblx0XHRcdGNhc2UgMHgwMDk5OiAvKiAnQnJ0V2JQcm9wJyAqL1xuXHRcdFx0XHR3Yi5XQlByb3BzID0gdmFsOyBicmVhaztcblxuXHRcdFx0Y2FzZSAweDAwMjc6IC8qICdCcnROYW1lJyAqL1xuXHRcdFx0XHRpZih2YWwuU2hlZXQgIT0gbnVsbCkgb3B0cy5TSUQgPSB2YWwuU2hlZXQ7XG5cdFx0XHRcdHZhbC5SZWYgPSBzdHJpbmdpZnlfZm9ybXVsYSh2YWwuUHRnLCBudWxsLCBudWxsLCBzdXBib29rcywgb3B0cyk7XG5cdFx0XHRcdGRlbGV0ZSBvcHRzLlNJRDtcblx0XHRcdFx0ZGVsZXRlIHZhbC5QdGc7XG5cdFx0XHRcdE5hbWVzLnB1c2godmFsKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDB4MDQwQzogLyogJ0JydE5hbWVFeHQnICovIGJyZWFrO1xuXG5cdFx0XHRjYXNlIDB4MDE2NTogLyogJ0JydFN1cFNlbGYnICovXG5cdFx0XHRjYXNlIDB4MDE2NjogLyogJ0JydFN1cFNhbWUnICovXG5cdFx0XHRjYXNlIDB4MDE2MzogLyogJ0JydFN1cEJvb2tTcmMnICovXG5cdFx0XHRjYXNlIDB4MDI5QjogLyogJ0JydFN1cEFkZGluJyAqL1xuXHRcdFx0XHRpZighc3VwYm9va3NbMF0ubGVuZ3RoKSBzdXBib29rc1swXSA9IFtSVCwgdmFsXTtcblx0XHRcdFx0ZWxzZSBzdXBib29rcy5wdXNoKFtSVCwgdmFsXSk7XG5cdFx0XHRcdHN1cGJvb2tzW3N1cGJvb2tzLmxlbmd0aCAtIDFdLlhUSSA9IFtdO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMHgwMTZBOiAvKiAnQnJ0RXh0ZXJuU2hlZXQnICovXG5cdFx0XHRcdGlmKHN1cGJvb2tzLmxlbmd0aCA9PT0gMCkgeyBzdXBib29rc1swXSA9IFtdOyBzdXBib29rc1swXS5YVEkgPSBbXTsgfVxuXHRcdFx0XHRzdXBib29rc1tzdXBib29rcy5sZW5ndGggLSAxXS5YVEkgPSBzdXBib29rc1tzdXBib29rcy5sZW5ndGggLSAxXS5YVEkuY29uY2F0KHZhbCk7XG5cdFx0XHRcdHN1cGJvb2tzLlhUSSA9IHN1cGJvb2tzLlhUSS5jb25jYXQodmFsKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDB4MDE2OTogLyogJ0JydFBsYWNlaG9sZGVyTmFtZScgKi9cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMHgwODE3OiAvKiAnQnJ0QWJzUGF0aDE1JyAqL1xuXHRcdFx0Y2FzZSAweDAwOUU6IC8qICdCcnRCb29rVmlldycgKi9cblx0XHRcdGNhc2UgMHgwMDhGOiAvKiAnQnJ0QmVnaW5CdW5kbGVTaHMnICovXG5cdFx0XHRjYXNlIDB4MDI5ODogLyogJ0JydEJlZ2luRm5Hcm91cCcgKi9cblx0XHRcdGNhc2UgMHgwMTYxOiAvKiAnQnJ0QmVnaW5FeHRlcm5hbHMnICovXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHQvKiBjYXNlICdCcnRNb2RlbFRpbWVHcm91cGluZ0NhbGNDb2wnICovXG5cdFx0XHRjYXNlIDB4MEMwMDogLyogJ0JydFVpZCcgKi9cblx0XHRcdGNhc2UgMHgwQzAxOiAvKiAnQnJ0UmV2aXNpb25QdHInICovXG5cdFx0XHRjYXNlIDB4MDIxNjogLyogJ0JydEJvb2tQcm90ZWN0aW9uJyAqL1xuXHRcdFx0Y2FzZSAweDAyQTU6IC8qICdCcnRCb29rUHJvdGVjdGlvbklzbycgKi9cblx0XHRcdGNhc2UgMHgwMDlEOiAvKiAnQnJ0Q2FsY1Byb3AnICovXG5cdFx0XHRjYXNlIDB4MDI2MjogLyogJ0JydENyYXNoUmVjRXJyJyAqL1xuXHRcdFx0Y2FzZSAweDA4MDI6IC8qICdCcnREZWNvdXBsZWRQaXZvdENhY2hlSUQnICovXG5cdFx0XHRjYXNlIDB4MDA5QjogLyogJ0JydEZpbGVSZWNvdmVyJyAqL1xuXHRcdFx0Y2FzZSAweDAyMjQ6IC8qICdCcnRGaWxlU2hhcmluZycgKi9cblx0XHRcdGNhc2UgMHgwMkE0OiAvKiAnQnJ0RmlsZVNoYXJpbmdJc28nICovXG5cdFx0XHRjYXNlIDB4MDA4MDogLyogJ0JydEZpbGVWZXJzaW9uJyAqL1xuXHRcdFx0Y2FzZSAweDAyOTk6IC8qICdCcnRGbkdyb3VwJyAqL1xuXHRcdFx0Y2FzZSAweDA4NTA6IC8qICdCcnRNb2RlbFJlbGF0aW9uc2hpcCcgKi9cblx0XHRcdGNhc2UgMHgwODREOiAvKiAnQnJ0TW9kZWxUYWJsZScgKi9cblx0XHRcdGNhc2UgMHgwMjI1OiAvKiAnQnJ0T2xlU2l6ZScgKi9cblx0XHRcdGNhc2UgMHgwODA1OiAvKiAnQnJ0UGl2b3RUYWJsZVJlZicgKi9cblx0XHRcdGNhc2UgMHgwMjU0OiAvKiAnQnJ0U21hcnRUYWdUeXBlJyAqL1xuXHRcdFx0Y2FzZSAweDA4MUM6IC8qICdCcnRUYWJsZVNsaWNlckNhY2hlSUQnICovXG5cdFx0XHRjYXNlIDB4MDgxQjogLyogJ0JydFRhYmxlU2xpY2VyQ2FjaGVJRHMnICovXG5cdFx0XHRjYXNlIDB4MDgyMjogLyogJ0JydFRpbWVsaW5lQ2FjaGVQaXZvdENhY2hlSUQnICovXG5cdFx0XHRjYXNlIDB4MDE4RDogLyogJ0JydFVzZXJCb29rVmlldycgKi9cblx0XHRcdGNhc2UgMHgwMDlBOiAvKiAnQnJ0V2JGYWN0b2lkJyAqL1xuXHRcdFx0Y2FzZSAweDA0NUQ6IC8qICdCcnRXYlByb3AxNCcgKi9cblx0XHRcdGNhc2UgMHgwMjI5OiAvKiAnQnJ0V2ViT3B0JyAqL1xuXHRcdFx0Y2FzZSAweDA4MkI6IC8qICdCcnRXb3JrQm9va1ByMTUnICovXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDB4MDAyMzogLyogJ0JydEZSVEJlZ2luJyAqL1xuXHRcdFx0XHRzdGF0ZS5wdXNoKFJfbik7IHBhc3MgPSB0cnVlOyBicmVhaztcblx0XHRcdGNhc2UgMHgwMDI0OiAvKiAnQnJ0RlJURW5kJyAqL1xuXHRcdFx0XHRzdGF0ZS5wb3AoKTsgcGFzcyA9IGZhbHNlOyBicmVhaztcblx0XHRcdGNhc2UgMHgwMDI1OiAvKiAnQnJ0QUNCZWdpbicgKi9cblx0XHRcdFx0c3RhdGUucHVzaChSX24pOyBwYXNzID0gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAyNjogLyogJ0JydEFDRW5kJyAqL1xuXHRcdFx0XHRzdGF0ZS5wb3AoKTsgcGFzcyA9IGZhbHNlOyBicmVhaztcblxuXHRcdFx0Y2FzZSAweDAwMTA6IC8qICdCcnRGUlRBcmNoSUQkJyAqLyBicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0aWYoKFJfbnx8XCJcIikuaW5kZXhPZihcIkJlZ2luXCIpID4gMCl7LyogZW1wdHkgKi99XG5cdFx0XHRcdGVsc2UgaWYoKFJfbnx8XCJcIikuaW5kZXhPZihcIkVuZFwiKSA+IDApey8qIGVtcHR5ICovfVxuXHRcdFx0XHRlbHNlIGlmKCFwYXNzIHx8IChvcHRzLldURiAmJiBzdGF0ZVtzdGF0ZS5sZW5ndGgtMV0gIT0gXCJCcnRBQ0JlZ2luXCIgJiYgc3RhdGVbc3RhdGUubGVuZ3RoLTFdICE9IFwiQnJ0RlJUQmVnaW5cIikpIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgcmVjb3JkIFwiICsgUlQgKyBcIiBcIiArIFJfbik7XG5cdFx0fVxuXHR9LCBvcHRzKTtcblxuXHRwYXJzZV93Yl9kZWZhdWx0cyh3Yik7XG5cblx0Ly8gJEZsb3dJZ25vcmVcblx0d2IuTmFtZXMgPSBOYW1lcztcblxuXHQod2IpLnN1cGJvb2tzID0gc3VwYm9va3M7XG5cdHJldHVybiB3Yjtcbn1cblxuZnVuY3Rpb24gd3JpdGVfQlVORExFU0hTKGJhLCB3Yikge1xuXHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0QmVnaW5CdW5kbGVTaHNcIik7XG5cdGZvcih2YXIgaWR4ID0gMDsgaWR4ICE9IHdiLlNoZWV0TmFtZXMubGVuZ3RoOyArK2lkeCkge1xuXHRcdHZhciB2aXogPSB3Yi5Xb3JrYm9vayAmJiB3Yi5Xb3JrYm9vay5TaGVldHMgJiYgd2IuV29ya2Jvb2suU2hlZXRzW2lkeF0gJiYgd2IuV29ya2Jvb2suU2hlZXRzW2lkeF0uSGlkZGVuIHx8IDA7XG5cdFx0dmFyIGQgPSB7IEhpZGRlbjogdml6LCBpVGFiSUQ6IGlkeCsxLCBzdHJSZWxJRDogJ3JJZCcgKyAoaWR4KzEpLCBuYW1lOiB3Yi5TaGVldE5hbWVzW2lkeF0gfTtcblx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0QnVuZGxlU2hcIiwgd3JpdGVfQnJ0QnVuZGxlU2goZCkpO1xuXHR9XG5cdHdyaXRlX3JlY29yZChiYSwgXCJCcnRFbmRCdW5kbGVTaHNcIik7XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuNjQ5IEJydEZpbGVWZXJzaW9uICovXG5mdW5jdGlvbiB3cml0ZV9CcnRGaWxlVmVyc2lvbihkYXRhLCBvKSB7XG5cdGlmKCFvKSBvID0gbmV3X2J1ZigxMjcpO1xuXHRmb3IodmFyIGkgPSAwOyBpICE9IDQ7ICsraSkgby53cml0ZV9zaGlmdCg0LCAwKTtcblx0d3JpdGVfWExXaWRlU3RyaW5nKFwiU2hlZXRKU1wiLCBvKTtcblx0d3JpdGVfWExXaWRlU3RyaW5nKFhMU1gudmVyc2lvbiwgbyk7XG5cdHdyaXRlX1hMV2lkZVN0cmluZyhYTFNYLnZlcnNpb24sIG8pO1xuXHR3cml0ZV9YTFdpZGVTdHJpbmcoXCI3MjYyXCIsIG8pO1xuXHRyZXR1cm4gby5sZW5ndGggPiBvLmwgPyBvLnNsaWNlKDAsIG8ubCkgOiBvO1xufVxuXG4vKiBbTVMtWExTQl0gMi40LjMwMSBCcnRCb29rVmlldyAqL1xuZnVuY3Rpb24gd3JpdGVfQnJ0Qm9va1ZpZXcoaWR4LCBvKSB7XG5cdGlmKCFvKSBvID0gbmV3X2J1ZigyOSk7XG5cdG8ud3JpdGVfc2hpZnQoLTQsIDApO1xuXHRvLndyaXRlX3NoaWZ0KC00LCA0NjApO1xuXHRvLndyaXRlX3NoaWZ0KDQsICAyODgwMCk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgIDE3NjAwKTtcblx0by53cml0ZV9zaGlmdCg0LCAgNTAwKTtcblx0by53cml0ZV9zaGlmdCg0LCAgaWR4KTtcblx0by53cml0ZV9zaGlmdCg0LCAgaWR4KTtcblx0dmFyIGZsYWdzID0gMHg3ODtcblx0by53cml0ZV9zaGlmdCgxLCAgZmxhZ3MpO1xuXHRyZXR1cm4gby5sZW5ndGggPiBvLmwgPyBvLnNsaWNlKDAsIG8ubCkgOiBvO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9CT09LVklFV1MoYmEsIHdiKSB7XG5cdC8qIHJlcXVpcmVkIGlmIGhpZGRlbiB0YWIgYXBwZWFycyBiZWZvcmUgdmlzaWJsZSB0YWIgKi9cblx0aWYoIXdiLldvcmtib29rIHx8ICF3Yi5Xb3JrYm9vay5TaGVldHMpIHJldHVybjtcblx0dmFyIHNoZWV0cyA9IHdiLldvcmtib29rLlNoZWV0cztcblx0dmFyIGkgPSAwLCB2aXN0YWIgPSAtMSwgaGlkZGVuID0gLTE7XG5cdGZvcig7IGkgPCBzaGVldHMubGVuZ3RoOyArK2kpIHtcblx0XHRpZighc2hlZXRzW2ldIHx8ICFzaGVldHNbaV0uSGlkZGVuICYmIHZpc3RhYiA9PSAtMSkgdmlzdGFiID0gaTtcblx0XHRlbHNlIGlmKHNoZWV0c1tpXS5IaWRkZW4gPT0gMSAmJiBoaWRkZW4gPT0gLTEpIGhpZGRlbiA9IGk7XG5cdH1cblx0aWYoaGlkZGVuID4gdmlzdGFiKSByZXR1cm47XG5cdHdyaXRlX3JlY29yZChiYSwgXCJCcnRCZWdpbkJvb2tWaWV3c1wiKTtcblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEJvb2tWaWV3XCIsIHdyaXRlX0JydEJvb2tWaWV3KHZpc3RhYikpO1xuXHQvKiAxKihCcnRCb29rVmlldyAqRlJUKSAqL1xuXHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0RW5kQm9va1ZpZXdzXCIpO1xufVxuXG4vKiBbTVMtWExTQl0gMi40LjMwNSBCcnRDYWxjUHJvcCAqL1xuLypmdW5jdGlvbiB3cml0ZV9CcnRDYWxjUHJvcChkYXRhLCBvKSB7XG5cdGlmKCFvKSBvID0gbmV3X2J1ZigyNik7XG5cdG8ud3JpdGVfc2hpZnQoNCwwKTsgLy8gZm9yY2UgcmVjYWxjXG5cdG8ud3JpdGVfc2hpZnQoNCwxKTtcblx0by53cml0ZV9zaGlmdCg0LDApO1xuXHR3cml0ZV9YbnVtKDAsIG8pO1xuXHRvLndyaXRlX3NoaWZ0KC00LCAxMDIzKTtcblx0by53cml0ZV9zaGlmdCgxLCAweDMzKTtcblx0by53cml0ZV9zaGlmdCgxLCAweDAwKTtcblx0cmV0dXJuIG87XG59Ki9cblxuLyogW01TLVhMU0JdIDIuNC42NDYgQnJ0RmlsZVJlY292ZXIgKi9cbi8qZnVuY3Rpb24gd3JpdGVfQnJ0RmlsZVJlY292ZXIoZGF0YSwgbykge1xuXHRpZighbykgbyA9IG5ld19idWYoMSk7XG5cdG8ud3JpdGVfc2hpZnQoMSwwKTtcblx0cmV0dXJuIG87XG59Ki9cblxuLyogW01TLVhMU0JdIDIuMS43LjYxIFdvcmtib29rICovXG5mdW5jdGlvbiB3cml0ZV93Yl9iaW4od2IsIG9wdHMpIHtcblx0dmFyIGJhID0gYnVmX2FycmF5KCk7XG5cdHdyaXRlX3JlY29yZChiYSwgXCJCcnRCZWdpbkJvb2tcIik7XG5cdHdyaXRlX3JlY29yZChiYSwgXCJCcnRGaWxlVmVyc2lvblwiLCB3cml0ZV9CcnRGaWxlVmVyc2lvbigpKTtcblx0LyogW1tCcnRGaWxlU2hhcmluZ0lzb10gQnJ0RmlsZVNoYXJpbmddICovXG5cdHdyaXRlX3JlY29yZChiYSwgXCJCcnRXYlByb3BcIiwgd3JpdGVfQnJ0V2JQcm9wKHdiLldvcmtib29rICYmIHdiLldvcmtib29rLldCUHJvcHMgfHwgbnVsbCkpO1xuXHQvKiBbQUNBQlNQQVRIXSAqL1xuXHQvKiBbW0JydEJvb2tQcm90ZWN0aW9uSXNvXSBCcnRCb29rUHJvdGVjdGlvbl0gKi9cblx0d3JpdGVfQk9PS1ZJRVdTKGJhLCB3Yiwgb3B0cyk7XG5cdHdyaXRlX0JVTkRMRVNIUyhiYSwgd2IsIG9wdHMpO1xuXHQvKiBbRk5HUk9VUF0gKi9cblx0LyogW0VYVEVSTkFMU10gKi9cblx0LyogKkJydE5hbWUgKi9cblx0Lyogd3JpdGVfcmVjb3JkKGJhLCBcIkJydENhbGNQcm9wXCIsIHdyaXRlX0JydENhbGNQcm9wKCkpOyAqL1xuXHQvKiBbQnJ0T2xlU2l6ZV0gKi9cblx0LyogKihCcnRVc2VyQm9va1ZpZXcgKkZSVCkgKi9cblx0LyogW1BJVk9UQ0FDSEVJRFNdICovXG5cdC8qIFtCcnRXYkZhY3RvaWRdICovXG5cdC8qIFtTTUFSVFRBR1RZUEVTXSAqL1xuXHQvKiBbQnJ0V2ViT3B0XSAqL1xuXHQvKiB3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0RmlsZVJlY292ZXJcIiwgd3JpdGVfQnJ0RmlsZVJlY292ZXIoKSk7ICovXG5cdC8qIFtXRUJQVUJJVEVNU10gKi9cblx0LyogW0NSRVJSU10gKi9cblx0LyogRlJUV09SS0JPT0sgKi9cblx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEVuZEJvb2tcIik7XG5cblx0cmV0dXJuIGJhLmVuZCgpO1xufVxuZnVuY3Rpb24gcGFyc2Vfd2IoZGF0YSwgbmFtZSwgb3B0cykge1xuXHRpZihuYW1lLnNsaWNlKC00KT09PVwiLmJpblwiKSByZXR1cm4gcGFyc2Vfd2JfYmluKChkYXRhKSwgb3B0cyk7XG5cdHJldHVybiBwYXJzZV93Yl94bWwoKGRhdGEpLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gcGFyc2Vfd3MoZGF0YSwgbmFtZSwgaWR4LCBvcHRzLCByZWxzLCB3YiwgdGhlbWVzLCBzdHlsZXMpIHtcblx0aWYobmFtZS5zbGljZSgtNCk9PT1cIi5iaW5cIikgcmV0dXJuIHBhcnNlX3dzX2JpbigoZGF0YSksIG9wdHMsIGlkeCwgcmVscywgd2IsIHRoZW1lcywgc3R5bGVzKTtcblx0cmV0dXJuIHBhcnNlX3dzX3htbCgoZGF0YSksIG9wdHMsIGlkeCwgcmVscywgd2IsIHRoZW1lcywgc3R5bGVzKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VfY3MoZGF0YSwgbmFtZSwgaWR4LCBvcHRzLCByZWxzLCB3YiwgdGhlbWVzLCBzdHlsZXMpIHtcblx0aWYobmFtZS5zbGljZSgtNCk9PT1cIi5iaW5cIikgcmV0dXJuIHBhcnNlX2NzX2JpbigoZGF0YSksIG9wdHMsIGlkeCwgcmVscywgd2IsIHRoZW1lcywgc3R5bGVzKTtcblx0cmV0dXJuIHBhcnNlX2NzX3htbCgoZGF0YSksIG9wdHMsIGlkeCwgcmVscywgd2IsIHRoZW1lcywgc3R5bGVzKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VfbXMoZGF0YSwgbmFtZSwgaWR4LCBvcHRzLCByZWxzLCB3YiwgdGhlbWVzLCBzdHlsZXMpIHtcblx0aWYobmFtZS5zbGljZSgtNCk9PT1cIi5iaW5cIikgcmV0dXJuIHBhcnNlX21zX2JpbigoZGF0YSksIG9wdHMsIGlkeCwgcmVscywgd2IsIHRoZW1lcywgc3R5bGVzKTtcblx0cmV0dXJuIHBhcnNlX21zX3htbCgoZGF0YSksIG9wdHMsIGlkeCwgcmVscywgd2IsIHRoZW1lcywgc3R5bGVzKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VfZHMoZGF0YSwgbmFtZSwgaWR4LCBvcHRzLCByZWxzLCB3YiwgdGhlbWVzLCBzdHlsZXMpIHtcblx0aWYobmFtZS5zbGljZSgtNCk9PT1cIi5iaW5cIikgcmV0dXJuIHBhcnNlX2RzX2JpbigoZGF0YSksIG9wdHMsIGlkeCwgcmVscywgd2IsIHRoZW1lcywgc3R5bGVzKTtcblx0cmV0dXJuIHBhcnNlX2RzX3htbCgoZGF0YSksIG9wdHMsIGlkeCwgcmVscywgd2IsIHRoZW1lcywgc3R5bGVzKTtcbn1cblxuZnVuY3Rpb24gcGFyc2Vfc3R5KGRhdGEsIG5hbWUsIHRoZW1lcywgb3B0cykge1xuXHRpZihuYW1lLnNsaWNlKC00KT09PVwiLmJpblwiKSByZXR1cm4gcGFyc2Vfc3R5X2JpbigoZGF0YSksIHRoZW1lcywgb3B0cyk7XG5cdHJldHVybiBwYXJzZV9zdHlfeG1sKChkYXRhKSwgdGhlbWVzLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VfdGhlbWUoZGF0YSwgbmFtZSwgb3B0cykge1xuXHRyZXR1cm4gcGFyc2VfdGhlbWVfeG1sKGRhdGEsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBwYXJzZV9zc3QoZGF0YSwgbmFtZSwgb3B0cykge1xuXHRpZihuYW1lLnNsaWNlKC00KT09PVwiLmJpblwiKSByZXR1cm4gcGFyc2Vfc3N0X2JpbigoZGF0YSksIG9wdHMpO1xuXHRyZXR1cm4gcGFyc2Vfc3N0X3htbCgoZGF0YSksIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBwYXJzZV9jbW50KGRhdGEsIG5hbWUsIG9wdHMpIHtcblx0aWYobmFtZS5zbGljZSgtNCk9PT1cIi5iaW5cIikgcmV0dXJuIHBhcnNlX2NvbW1lbnRzX2JpbigoZGF0YSksIG9wdHMpO1xuXHRyZXR1cm4gcGFyc2VfY29tbWVudHNfeG1sKChkYXRhKSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlX2NjKGRhdGEsIG5hbWUsIG9wdHMpIHtcblx0aWYobmFtZS5zbGljZSgtNCk9PT1cIi5iaW5cIikgcmV0dXJuIHBhcnNlX2NjX2JpbigoZGF0YSksIG5hbWUsIG9wdHMpO1xuXHRyZXR1cm4gcGFyc2VfY2NfeG1sKChkYXRhKSwgbmFtZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlX3hsaW5rKGRhdGEsIHJlbCwgbmFtZSwgb3B0cykge1xuXHRpZihuYW1lLnNsaWNlKC00KT09PVwiLmJpblwiKSByZXR1cm4gcGFyc2VfeGxpbmtfYmluKChkYXRhKSwgcmVsLCBuYW1lLCBvcHRzKTtcblx0cmV0dXJuIHBhcnNlX3hsaW5rX3htbCgoZGF0YSksIHJlbCwgbmFtZSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX3diKHdiLCBuYW1lLCBvcHRzKSB7XG5cdHJldHVybiAobmFtZS5zbGljZSgtNCk9PT1cIi5iaW5cIiA/IHdyaXRlX3diX2JpbiA6IHdyaXRlX3diX3htbCkod2IsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiB3cml0ZV93cyhkYXRhLCBuYW1lLCBvcHRzLCB3YiwgcmVscykge1xuXHRyZXR1cm4gKG5hbWUuc2xpY2UoLTQpPT09XCIuYmluXCIgPyB3cml0ZV93c19iaW4gOiB3cml0ZV93c194bWwpKGRhdGEsIG9wdHMsIHdiLCByZWxzKTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5mdW5jdGlvbiB3cml0ZV9jcyhkYXRhLCBuYW1lLCBvcHRzLCB3YiwgcmVscykge1xuXHRyZXR1cm4gKG5hbWUuc2xpY2UoLTQpPT09XCIuYmluXCIgPyB3cml0ZV9jc19iaW4gOiB3cml0ZV9jc194bWwpKGRhdGEsIG9wdHMsIHdiLCByZWxzKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfc3R5KGRhdGEsIG5hbWUsIG9wdHMpIHtcblx0cmV0dXJuIChuYW1lLnNsaWNlKC00KT09PVwiLmJpblwiID8gd3JpdGVfc3R5X2JpbiA6IHdyaXRlX3N0eV94bWwpKGRhdGEsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9zc3QoZGF0YSwgbmFtZSwgb3B0cykge1xuXHRyZXR1cm4gKG5hbWUuc2xpY2UoLTQpPT09XCIuYmluXCIgPyB3cml0ZV9zc3RfYmluIDogd3JpdGVfc3N0X3htbCkoZGF0YSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX2NtbnQoZGF0YSwgbmFtZSwgb3B0cykge1xuXHRyZXR1cm4gKG5hbWUuc2xpY2UoLTQpPT09XCIuYmluXCIgPyB3cml0ZV9jb21tZW50c19iaW4gOiB3cml0ZV9jb21tZW50c194bWwpKGRhdGEsIG9wdHMpO1xufVxuLypcbmZ1bmN0aW9uIHdyaXRlX2NjKGRhdGEsIG5hbWU6c3RyaW5nLCBvcHRzKSB7XG5cdHJldHVybiAobmFtZS5zbGljZSgtNCk9PT1cIi5iaW5cIiA/IHdyaXRlX2NjX2JpbiA6IHdyaXRlX2NjX3htbCkoZGF0YSwgb3B0cyk7XG59XG4qL1xudmFyIGF0dHJlZ2V4ZzI9LyhbXFx3Ol0rKT0oKD86XCIpKFteXCJdKikoPzpcIil8KD86JykoW14nXSopKD86JykpL2c7XG52YXIgYXR0cmVnZXgyPS8oW1xcdzpdKyk9KCg/OlwiKSg/OlteXCJdKikoPzpcIil8KD86JykoPzpbXiddKikoPzonKSkvO1xuZnVuY3Rpb24geGxtbF9wYXJzZXhtbHRhZyh0YWcsIHNraXBfcm9vdCkge1xuXHR2YXIgd29yZHMgPSB0YWcuc3BsaXQoL1xccysvKTtcblx0dmFyIHogPSAoW10pOyBpZighc2tpcF9yb290KSB6WzBdID0gd29yZHNbMF07XG5cdGlmKHdvcmRzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIHo7XG5cdHZhciBtID0gdGFnLm1hdGNoKGF0dHJlZ2V4ZzIpLCB5LCBqLCB3LCBpO1xuXHRpZihtKSBmb3IoaSA9IDA7IGkgIT0gbS5sZW5ndGg7ICsraSkge1xuXHRcdHkgPSBtW2ldLm1hdGNoKGF0dHJlZ2V4Mik7XG5pZigoaj15WzFdLmluZGV4T2YoXCI6XCIpKSA9PT0gLTEpIHpbeVsxXV0gPSB5WzJdLnNsaWNlKDEseVsyXS5sZW5ndGgtMSk7XG5cdFx0ZWxzZSB7XG5cdFx0XHRpZih5WzFdLnNsaWNlKDAsNikgPT09IFwieG1sbnM6XCIpIHcgPSBcInhtbG5zXCIreVsxXS5zbGljZSg2KTtcblx0XHRcdGVsc2UgdyA9IHlbMV0uc2xpY2UoaisxKTtcblx0XHRcdHpbd10gPSB5WzJdLnNsaWNlKDEseVsyXS5sZW5ndGgtMSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiB6O1xufVxuZnVuY3Rpb24geGxtbF9wYXJzZXhtbHRhZ29iaih0YWcpIHtcblx0dmFyIHdvcmRzID0gdGFnLnNwbGl0KC9cXHMrLyk7XG5cdHZhciB6ID0ge307XG5cdGlmKHdvcmRzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIHo7XG5cdHZhciBtID0gdGFnLm1hdGNoKGF0dHJlZ2V4ZzIpLCB5LCBqLCB3LCBpO1xuXHRpZihtKSBmb3IoaSA9IDA7IGkgIT0gbS5sZW5ndGg7ICsraSkge1xuXHRcdHkgPSBtW2ldLm1hdGNoKGF0dHJlZ2V4Mik7XG5pZigoaj15WzFdLmluZGV4T2YoXCI6XCIpKSA9PT0gLTEpIHpbeVsxXV0gPSB5WzJdLnNsaWNlKDEseVsyXS5sZW5ndGgtMSk7XG5cdFx0ZWxzZSB7XG5cdFx0XHRpZih5WzFdLnNsaWNlKDAsNikgPT09IFwieG1sbnM6XCIpIHcgPSBcInhtbG5zXCIreVsxXS5zbGljZSg2KTtcblx0XHRcdGVsc2UgdyA9IHlbMV0uc2xpY2UoaisxKTtcblx0XHRcdHpbd10gPSB5WzJdLnNsaWNlKDEseVsyXS5sZW5ndGgtMSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiB6O1xufVxuXG4vLyAtLS0tXG5cbmZ1bmN0aW9uIHhsbWxfZm9ybWF0KGZvcm1hdCwgdmFsdWUpIHtcblx0dmFyIGZtdCA9IFhMTUxGb3JtYXRNYXBbZm9ybWF0XSB8fCB1bmVzY2FwZXhtbChmb3JtYXQpO1xuXHRpZihmbXQgPT09IFwiR2VuZXJhbFwiKSByZXR1cm4gU1NGLl9nZW5lcmFsKHZhbHVlKTtcblx0cmV0dXJuIFNTRi5mb3JtYXQoZm10LCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHhsbWxfc2V0X2N1c3Rwcm9wKEN1c3Rwcm9wcywga2V5LCBjcCwgdmFsKSB7XG5cdHZhciBvdmFsID0gdmFsO1xuXHRzd2l0Y2goKGNwWzBdLm1hdGNoKC9kdDpkdD1cIihbXFx3Ll0rKVwiLyl8fFtcIlwiLFwiXCJdKVsxXSkge1xuXHRcdGNhc2UgXCJib29sZWFuXCI6IG92YWwgPSBwYXJzZXhtbGJvb2wodmFsKTsgYnJlYWs7XG5cdFx0Y2FzZSBcImkyXCI6IGNhc2UgXCJpbnRcIjogb3ZhbCA9IHBhcnNlSW50KHZhbCwgMTApOyBicmVhaztcblx0XHRjYXNlIFwicjRcIjogY2FzZSBcImZsb2F0XCI6IG92YWwgPSBwYXJzZUZsb2F0KHZhbCk7IGJyZWFrO1xuXHRcdGNhc2UgXCJkYXRlXCI6IGNhc2UgXCJkYXRlVGltZS50elwiOiBvdmFsID0gcGFyc2VEYXRlKHZhbCk7IGJyZWFrO1xuXHRcdGNhc2UgXCJpOFwiOiBjYXNlIFwic3RyaW5nXCI6IGNhc2UgXCJmaXhlZFwiOiBjYXNlIFwidXVpZFwiOiBjYXNlIFwiYmluLmJhc2U2NFwiOiBicmVhaztcblx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJiYWQgY3VzdHByb3A6XCIgKyBjcFswXSk7XG5cdH1cblx0Q3VzdHByb3BzW3VuZXNjYXBleG1sKGtleSldID0gb3ZhbDtcbn1cblxuZnVuY3Rpb24gc2FmZV9mb3JtYXRfeGxtbChjZWxsLCBuZiwgbykge1xuXHRpZihjZWxsLnQgPT09ICd6JykgcmV0dXJuO1xuXHRpZighbyB8fCBvLmNlbGxUZXh0ICE9PSBmYWxzZSkgdHJ5IHtcblx0XHRpZihjZWxsLnQgPT09ICdlJykgeyBjZWxsLncgPSBjZWxsLncgfHwgQkVycltjZWxsLnZdOyB9XG5cdFx0ZWxzZSBpZihuZiA9PT0gXCJHZW5lcmFsXCIpIHtcblx0XHRcdGlmKGNlbGwudCA9PT0gJ24nKSB7XG5cdFx0XHRcdGlmKChjZWxsLnZ8MCkgPT09IGNlbGwudikgY2VsbC53ID0gU1NGLl9nZW5lcmFsX2ludChjZWxsLnYpO1xuXHRcdFx0XHRlbHNlIGNlbGwudyA9IFNTRi5fZ2VuZXJhbF9udW0oY2VsbC52KTtcblx0XHRcdH1cblx0XHRcdGVsc2UgY2VsbC53ID0gU1NGLl9nZW5lcmFsKGNlbGwudik7XG5cdFx0fVxuXHRcdGVsc2UgY2VsbC53ID0geGxtbF9mb3JtYXQobmZ8fFwiR2VuZXJhbFwiLCBjZWxsLnYpO1xuXHR9IGNhdGNoKGUpIHsgaWYoby5XVEYpIHRocm93IGU7IH1cblx0dHJ5IHtcblx0XHR2YXIgeiA9IFhMTUxGb3JtYXRNYXBbbmZdfHxuZnx8XCJHZW5lcmFsXCI7XG5cdFx0aWYoby5jZWxsTkYpIGNlbGwueiA9IHo7XG5cdFx0aWYoby5jZWxsRGF0ZXMgJiYgY2VsbC50ID09ICduJyAmJiBTU0YuaXNfZGF0ZSh6KSkge1xuXHRcdFx0dmFyIF9kID0gU1NGLnBhcnNlX2RhdGVfY29kZShjZWxsLnYpOyBpZihfZCkgeyBjZWxsLnQgPSAnZCc7IGNlbGwudiA9IG5ldyBEYXRlKF9kLnksIF9kLm0tMSxfZC5kLF9kLkgsX2QuTSxfZC5TLF9kLnUpOyB9XG5cdFx0fVxuXHR9IGNhdGNoKGUpIHsgaWYoby5XVEYpIHRocm93IGU7IH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc19zdHlsZV94bG1sKHN0eWxlcywgc3RhZywgb3B0cykge1xuXHRpZihvcHRzLmNlbGxTdHlsZXMpIHtcblx0XHRpZihzdGFnLkludGVyaW9yKSB7XG5cdFx0XHR2YXIgSSA9IHN0YWcuSW50ZXJpb3I7XG5cdFx0XHRpZihJLlBhdHRlcm4pIEkucGF0dGVyblR5cGUgPSBYTE1MUGF0dGVyblR5cGVNYXBbSS5QYXR0ZXJuXSB8fCBJLlBhdHRlcm47XG5cdFx0fVxuXHR9XG5cdHN0eWxlc1tzdGFnLklEXSA9IHN0YWc7XG59XG5cbi8qIFRPRE86IHRoZXJlIG11c3QgZXhpc3Qgc29tZSBmb3JtIG9mIE9TUC1ibGVzc2VkIHNwZWMgKi9cbmZ1bmN0aW9uIHBhcnNlX3hsbWxfZGF0YSh4bWwsIHNzLCBkYXRhLCBjZWxsLCBiYXNlLCBzdHlsZXMsIGNzdHksIHJvdywgYXJyYXlmLCBvKSB7XG5cdHZhciBuZiA9IFwiR2VuZXJhbFwiLCBzaWQgPSBjZWxsLlN0eWxlSUQsIFMgPSB7fTsgbyA9IG8gfHwge307XG5cdHZhciBpbnRlcmlvcnMgPSBbXTtcblx0dmFyIGkgPSAwO1xuXHRpZihzaWQgPT09IHVuZGVmaW5lZCAmJiByb3cpIHNpZCA9IHJvdy5TdHlsZUlEO1xuXHRpZihzaWQgPT09IHVuZGVmaW5lZCAmJiBjc3R5KSBzaWQgPSBjc3R5LlN0eWxlSUQ7XG5cdHdoaWxlKHN0eWxlc1tzaWRdICE9PSB1bmRlZmluZWQpIHtcblx0XHRpZihzdHlsZXNbc2lkXS5uZikgbmYgPSBzdHlsZXNbc2lkXS5uZjtcblx0XHRpZihzdHlsZXNbc2lkXS5JbnRlcmlvcikgaW50ZXJpb3JzLnB1c2goc3R5bGVzW3NpZF0uSW50ZXJpb3IpO1xuXHRcdGlmKCFzdHlsZXNbc2lkXS5QYXJlbnQpIGJyZWFrO1xuXHRcdHNpZCA9IHN0eWxlc1tzaWRdLlBhcmVudDtcblx0fVxuXHRzd2l0Y2goZGF0YS5UeXBlKSB7XG5cdFx0Y2FzZSAnQm9vbGVhbic6XG5cdFx0XHRjZWxsLnQgPSAnYic7XG5cdFx0XHRjZWxsLnYgPSBwYXJzZXhtbGJvb2woeG1sKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ1N0cmluZyc6XG5cdFx0XHRjZWxsLnQgPSAncyc7IGNlbGwuciA9IHhsbWxfZml4c3RyKHVuZXNjYXBleG1sKHhtbCkpO1xuXHRcdFx0Y2VsbC52ID0gKHhtbC5pbmRleE9mKFwiPFwiKSA+IC0xID8gdW5lc2NhcGV4bWwoc3N8fHhtbCkucmVwbGFjZSgvPC4qPz4vZywgXCJcIikgOiBjZWxsLnIpOyAvLyB0b2RvOiBCUiBldGNcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ0RhdGVUaW1lJzpcblx0XHRcdGlmKHhtbC5zbGljZSgtMSkgIT0gXCJaXCIpIHhtbCArPSBcIlpcIjtcblx0XHRcdGNlbGwudiA9IChwYXJzZURhdGUoeG1sKSAtIG5ldyBEYXRlKERhdGUuVVRDKDE4OTksIDExLCAzMCkpKSAvICgyNCAqIDYwICogNjAgKiAxMDAwKTtcblx0XHRcdGlmKGNlbGwudiAhPT0gY2VsbC52KSBjZWxsLnYgPSB1bmVzY2FwZXhtbCh4bWwpO1xuXHRcdFx0ZWxzZSBpZihjZWxsLnY8NjApIGNlbGwudiA9IGNlbGwudiAtMTtcblx0XHRcdGlmKCFuZiB8fCBuZiA9PSBcIkdlbmVyYWxcIikgbmYgPSBcInl5eXktbW0tZGRcIjtcblx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRjYXNlICdOdW1iZXInOlxuXHRcdFx0aWYoY2VsbC52ID09PSB1bmRlZmluZWQpIGNlbGwudj0reG1sO1xuXHRcdFx0aWYoIWNlbGwudCkgY2VsbC50ID0gJ24nO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnRXJyb3InOiBjZWxsLnQgPSAnZSc7IGNlbGwudiA9IFJCRXJyW3htbF07IGlmKG8uY2VsbFRleHQgIT09IGZhbHNlKSBjZWxsLncgPSB4bWw7IGJyZWFrO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRpZih4bWwgPT0gXCJcIiAmJiBzcyA9PSBcIlwiKSB7IGNlbGwudCA9ICd6JzsgfVxuXHRcdFx0ZWxzZSB7IGNlbGwudCA9ICdzJzsgY2VsbC52ID0geGxtbF9maXhzdHIoc3N8fHhtbCk7IH1cblx0XHRcdGJyZWFrO1xuXHR9XG5cdHNhZmVfZm9ybWF0X3hsbWwoY2VsbCwgbmYsIG8pO1xuXHRpZihvLmNlbGxGb3JtdWxhICE9PSBmYWxzZSkge1xuXHRcdGlmKGNlbGwuRm9ybXVsYSkge1xuXHRcdFx0dmFyIGZzdHIgPSB1bmVzY2FwZXhtbChjZWxsLkZvcm11bGEpO1xuXHRcdFx0Lyogc3RyaWN0bHkgc3BlYWtpbmcsIHRoZSBsZWFkaW5nID0gaXMgcmVxdWlyZWQgYnV0IHNvbWUgd3JpdGVycyBvbWl0ICovXG5cdFx0XHRpZihmc3RyLmNoYXJDb2RlQXQoMCkgPT0gNjEgLyogPSAqLykgZnN0ciA9IGZzdHIuc2xpY2UoMSk7XG5cdFx0XHRjZWxsLmYgPSByY190b19hMShmc3RyLCBiYXNlKTtcblx0XHRcdGRlbGV0ZSBjZWxsLkZvcm11bGE7XG5cdFx0XHRpZihjZWxsLkFycmF5UmFuZ2UgPT0gXCJSQ1wiKSBjZWxsLkYgPSByY190b19hMShcIlJDOlJDXCIsIGJhc2UpO1xuXHRcdFx0ZWxzZSBpZihjZWxsLkFycmF5UmFuZ2UpIHtcblx0XHRcdFx0Y2VsbC5GID0gcmNfdG9fYTEoY2VsbC5BcnJheVJhbmdlLCBiYXNlKTtcblx0XHRcdFx0YXJyYXlmLnB1c2goW3NhZmVfZGVjb2RlX3JhbmdlKGNlbGwuRiksIGNlbGwuRl0pO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IoaSA9IDA7IGkgPCBhcnJheWYubGVuZ3RoOyArK2kpXG5cdFx0XHRcdGlmKGJhc2UuciA+PSBhcnJheWZbaV1bMF0ucy5yICYmIGJhc2UuciA8PSBhcnJheWZbaV1bMF0uZS5yKVxuXHRcdFx0XHRcdGlmKGJhc2UuYyA+PSBhcnJheWZbaV1bMF0ucy5jICYmIGJhc2UuYyA8PSBhcnJheWZbaV1bMF0uZS5jKVxuXHRcdFx0XHRcdFx0Y2VsbC5GID0gYXJyYXlmW2ldWzFdO1xuXHRcdH1cblx0fVxuXHRpZihvLmNlbGxTdHlsZXMpIHtcblx0XHRpbnRlcmlvcnMuZm9yRWFjaChmdW5jdGlvbih4KSB7XG5cdFx0XHRpZighUy5wYXR0ZXJuVHlwZSAmJiB4LnBhdHRlcm5UeXBlKSBTLnBhdHRlcm5UeXBlID0geC5wYXR0ZXJuVHlwZTtcblx0XHR9KTtcblx0XHRjZWxsLnMgPSBTO1xuXHR9XG5cdGlmKGNlbGwuU3R5bGVJRCAhPT0gdW5kZWZpbmVkKSBjZWxsLml4ZmUgPSBjZWxsLlN0eWxlSUQ7XG59XG5cbmZ1bmN0aW9uIHhsbWxfY2xlYW5fY29tbWVudChjb21tZW50KSB7XG5cdGNvbW1lbnQudCA9IGNvbW1lbnQudiB8fCBcIlwiO1xuXHRjb21tZW50LnQgPSBjb21tZW50LnQucmVwbGFjZSgvXFxyXFxuL2csXCJcXG5cIikucmVwbGFjZSgvXFxyL2csXCJcXG5cIik7XG5cdGNvbW1lbnQudiA9IGNvbW1lbnQudyA9IGNvbW1lbnQuaXhmZSA9IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24geGxtbF9ub3JtYWxpemUoZCkge1xuXHRpZihoYXNfYnVmICYmIEJ1ZmZlci5pc0J1ZmZlcihkKSkgcmV0dXJuIGQudG9TdHJpbmcoJ3V0ZjgnKTtcblx0aWYodHlwZW9mIGQgPT09ICdzdHJpbmcnKSByZXR1cm4gZDtcblx0LyogZHVrdGFwZSAqL1xuXHRpZih0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgZCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHJldHVybiB1dGY4cmVhZChhMnMoYWIyYShkKSkpO1xuXHR0aHJvdyBuZXcgRXJyb3IoXCJCYWQgaW5wdXQgZm9ybWF0OiBleHBlY3RlZCBCdWZmZXIgb3Igc3RyaW5nXCIpO1xufVxuXG4vKiBUT0RPOiBFdmVyeXRoaW5nICovXG4vKiBVT1MgdXNlcyBDSksgaW4gdGFncyAqL1xudmFyIHhsbWxyZWdleCA9IC88KFxcLz8pKFteXFxzPz48IVxcLzpdKjp8KShbXlxccz88PjpcXC9dKykoPzpbXFxzPzpcXC9dW14+XSopPz4vbWc7XG4vL3ZhciB4bG1scmVnZXggPSAvPChcXC8/KShbYS16MC05XSo6fCkoXFx3KylbXj5dKj4vbWc7XG5mdW5jdGlvbiBwYXJzZV94bG1sX3htbChkLCBfb3B0cykge1xuXHR2YXIgb3B0cyA9IF9vcHRzIHx8IHt9O1xuXHRtYWtlX3NzZihTU0YpO1xuXHR2YXIgc3RyID0gZGVib20oeGxtbF9ub3JtYWxpemUoZCkpO1xuXHRpZihvcHRzLnR5cGUgPT0gJ2JpbmFyeScgfHwgb3B0cy50eXBlID09ICdhcnJheScgfHwgb3B0cy50eXBlID09ICdiYXNlNjQnKSB7XG5cdFx0aWYodHlwZW9mIGNwdGFibGUgIT09ICd1bmRlZmluZWQnKSBzdHIgPSBjcHRhYmxlLnV0aWxzLmRlY29kZSg2NTAwMSwgY2hhcl9jb2RlcyhzdHIpKTtcblx0XHRlbHNlIHN0ciA9IHV0ZjhyZWFkKHN0cik7XG5cdH1cblx0dmFyIG9wZW5pbmcgPSBzdHIuc2xpY2UoMCwgMTAyNCkudG9Mb3dlckNhc2UoKSwgaXNodG1sID0gZmFsc2U7XG5cdGlmKChvcGVuaW5nLmluZGV4T2YoXCI+XCIpICYgMTAyMykgPiBNYXRoLm1pbigob3BlbmluZy5pbmRleE9mKFwiLFwiKSAmIDEwMjMpLCAob3BlbmluZy5pbmRleE9mKFwiO1wiKSYxMDIzKSkpIHsgdmFyIF9vID0gZHVwKG9wdHMpOyBfby50eXBlID0gXCJzdHJpbmdcIjsgcmV0dXJuIFBSTi50b193b3JrYm9vayhzdHIsIF9vKTsgfVxuXHRpZihvcGVuaW5nLmluZGV4T2YoXCI8P3htbFwiKSA9PSAtMSkgW1wiaHRtbFwiLCBcInRhYmxlXCIsIFwiaGVhZFwiLCBcIm1ldGFcIiwgXCJzY3JpcHRcIiwgXCJzdHlsZVwiLCBcImRpdlwiXS5mb3JFYWNoKGZ1bmN0aW9uKHRhZykgeyBpZihvcGVuaW5nLmluZGV4T2YoXCI8XCIgKyB0YWcpID49IDApIGlzaHRtbCA9IHRydWU7IH0pO1xuXHRpZihpc2h0bWwpIHJldHVybiBIVE1MXy50b193b3JrYm9vayhzdHIsIG9wdHMpO1xuXHR2YXIgUm47XG5cdHZhciBzdGF0ZSA9IFtdLCB0bXA7XG5cdGlmKERFTlNFICE9IG51bGwgJiYgb3B0cy5kZW5zZSA9PSBudWxsKSBvcHRzLmRlbnNlID0gREVOU0U7XG5cdHZhciBzaGVldHMgPSB7fSwgc2hlZXRuYW1lcyA9IFtdLCBjdXJzaGVldCA9IChvcHRzLmRlbnNlID8gW10gOiB7fSksIHNoZWV0bmFtZSA9IFwiXCI7XG5cdHZhciB0YWJsZSA9IHt9LCBjZWxsID0gKHt9KSwgcm93ID0ge307Ly8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXHR2YXIgZHRhZyA9IHhsbWxfcGFyc2V4bWx0YWcoJzxEYXRhIHNzOlR5cGU9XCJTdHJpbmdcIj4nKSwgZGlkeCA9IDA7XG5cdHZhciBjID0gMCwgciA9IDA7XG5cdHZhciByZWZndWVzcyA9IHtzOiB7cjoyMDAwMDAwLCBjOjIwMDAwMDB9LCBlOiB7cjowLCBjOjB9IH07XG5cdHZhciBzdHlsZXMgPSB7fSwgc3RhZyA9IHt9O1xuXHR2YXIgc3MgPSBcIlwiLCBmaWR4ID0gMDtcblx0dmFyIG1lcmdlcyA9IFtdO1xuXHR2YXIgUHJvcHMgPSB7fSwgQ3VzdHByb3BzID0ge30sIHBpZHggPSAwLCBjcCA9IFtdO1xuXHR2YXIgY29tbWVudHMgPSBbXSwgY29tbWVudCA9ICh7fSk7XG5cdHZhciBjc3R5cyA9IFtdLCBjc3R5LCBzZWVuY29sID0gZmFsc2U7XG5cdHZhciBhcnJheWYgPSBbXTtcblx0dmFyIHJvd2luZm8gPSBbXSwgcm93b2JqID0ge30sIGNjID0gMCwgcnIgPSAwO1xuXHR2YXIgV29ya2Jvb2sgPSAoeyBTaGVldHM6W10sIFdCUHJvcHM6e2RhdGUxOTA0OmZhbHNlfSB9KSwgd3Nwcm9wcyA9IHt9O1xuXHR4bG1scmVnZXgubGFzdEluZGV4ID0gMDtcblx0c3RyID0gc3RyLnJlcGxhY2UoLzwhLS0oW1xcc1xcU10qPyktLT4vbWcsXCJcIik7XG5cdHZhciByYXdfUm4zID0gXCJcIjtcblx0d2hpbGUoKFJuID0geGxtbHJlZ2V4LmV4ZWMoc3RyKSkpIHN3aXRjaCgoUm5bM10gPSAocmF3X1JuMyA9IFJuWzNdKS50b0xvd2VyQ2FzZSgpKSkge1xuXHRcdGNhc2UgJ2RhdGEnIC8qY2FzZSAnRGF0YScqLzpcblx0XHRcdGlmKHJhd19SbjMgPT0gXCJkYXRhXCIpIHtcblx0XHRcdFx0aWYoUm5bMV09PT0nLycpe2lmKCh0bXA9c3RhdGUucG9wKCkpWzBdIT09Um5bM10pIHRocm93IG5ldyBFcnJvcihcIkJhZCBzdGF0ZTogXCIrdG1wLmpvaW4oXCJ8XCIpKTt9XG5cdFx0XHRcdGVsc2UgaWYoUm5bMF0uY2hhckF0KFJuWzBdLmxlbmd0aC0yKSAhPT0gJy8nKSBzdGF0ZS5wdXNoKFtSblszXSwgdHJ1ZV0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmKHN0YXRlW3N0YXRlLmxlbmd0aC0xXVsxXSkgYnJlYWs7XG5cdFx0XHRpZihSblsxXT09PScvJykgcGFyc2VfeGxtbF9kYXRhKHN0ci5zbGljZShkaWR4LCBSbi5pbmRleCksIHNzLCBkdGFnLCBzdGF0ZVtzdGF0ZS5sZW5ndGgtMV1bMF09PS8qXCJDb21tZW50XCIqL1wiY29tbWVudFwiP2NvbW1lbnQ6Y2VsbCwge2M6YyxyOnJ9LCBzdHlsZXMsIGNzdHlzW2NdLCByb3csIGFycmF5Ziwgb3B0cyk7XG5cdFx0XHRlbHNlIHsgc3MgPSBcIlwiOyBkdGFnID0geGxtbF9wYXJzZXhtbHRhZyhSblswXSk7IGRpZHggPSBSbi5pbmRleCArIFJuWzBdLmxlbmd0aDsgfVxuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnY2VsbCcgLypjYXNlICdDZWxsJyovOlxuXHRcdFx0aWYoUm5bMV09PT0nLycpe1xuXHRcdFx0XHRpZihjb21tZW50cy5sZW5ndGggPiAwKSBjZWxsLmMgPSBjb21tZW50cztcblx0XHRcdFx0aWYoKCFvcHRzLnNoZWV0Um93cyB8fCBvcHRzLnNoZWV0Um93cyA+IHIpICYmIGNlbGwudiAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0aWYob3B0cy5kZW5zZSkge1xuXHRcdFx0XHRcdFx0aWYoIWN1cnNoZWV0W3JdKSBjdXJzaGVldFtyXSA9IFtdO1xuXHRcdFx0XHRcdFx0Y3Vyc2hlZXRbcl1bY10gPSBjZWxsO1xuXHRcdFx0XHRcdH0gZWxzZSBjdXJzaGVldFtlbmNvZGVfY29sKGMpICsgZW5jb2RlX3JvdyhyKV0gPSBjZWxsO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKGNlbGwuSFJlZikge1xuXHRcdFx0XHRcdGNlbGwubCA9ICh7VGFyZ2V0OnVuZXNjYXBleG1sKGNlbGwuSFJlZil9KTtcblx0XHRcdFx0XHRpZihjZWxsLkhSZWZTY3JlZW5UaXApIGNlbGwubC5Ub29sdGlwID0gY2VsbC5IUmVmU2NyZWVuVGlwO1xuXHRcdFx0XHRcdGRlbGV0ZSBjZWxsLkhSZWY7IGRlbGV0ZSBjZWxsLkhSZWZTY3JlZW5UaXA7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoY2VsbC5NZXJnZUFjcm9zcyB8fCBjZWxsLk1lcmdlRG93bikge1xuXHRcdFx0XHRcdGNjID0gYyArIChwYXJzZUludChjZWxsLk1lcmdlQWNyb3NzLDEwKXwwKTtcblx0XHRcdFx0XHRyciA9IHIgKyAocGFyc2VJbnQoY2VsbC5NZXJnZURvd24sMTApfDApO1xuXHRcdFx0XHRcdG1lcmdlcy5wdXNoKHtzOntjOmMscjpyfSxlOntjOmNjLHI6cnJ9fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoIW9wdHMuc2hlZXRTdHVicykgeyBpZihjZWxsLk1lcmdlQWNyb3NzKSBjID0gY2MgKyAxOyBlbHNlICsrYzsgfVxuXHRcdFx0XHRlbHNlIGlmKGNlbGwuTWVyZ2VBY3Jvc3MgfHwgY2VsbC5NZXJnZURvd24pIHtcbmZvcih2YXIgY21hID0gYzsgY21hIDw9IGNjOyArK2NtYSkge1xuXHRcdFx0XHRcdFx0Zm9yKHZhciBjbWQgPSByOyBjbWQgPD0gcnI7ICsrY21kKSB7XG5cdFx0XHRcdFx0XHRcdGlmKGNtYSA+IGMgfHwgY21kID4gcikge1xuXHRcdFx0XHRcdFx0XHRcdGlmKG9wdHMuZGVuc2UpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmKCFjdXJzaGVldFtjbWRdKSBjdXJzaGVldFtjbWRdID0gW107XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJzaGVldFtjbWRdW2NtYV0gPSB7dDoneid9O1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBjdXJzaGVldFtlbmNvZGVfY29sKGNtYSkgKyBlbmNvZGVfcm93KGNtZCldID0ge3Q6J3onfTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjID0gY2MgKyAxO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgKytjO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2VsbCA9IHhsbWxfcGFyc2V4bWx0YWdvYmooUm5bMF0pO1xuXHRcdFx0XHRpZihjZWxsLkluZGV4KSBjID0gK2NlbGwuSW5kZXggLSAxO1xuXHRcdFx0XHRpZihjIDwgcmVmZ3Vlc3Mucy5jKSByZWZndWVzcy5zLmMgPSBjO1xuXHRcdFx0XHRpZihjID4gcmVmZ3Vlc3MuZS5jKSByZWZndWVzcy5lLmMgPSBjO1xuXHRcdFx0XHRpZihSblswXS5zbGljZSgtMikgPT09IFwiLz5cIikgKytjO1xuXHRcdFx0XHRjb21tZW50cyA9IFtdO1xuXHRcdFx0fVxuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAncm93JyAvKmNhc2UgJ1JvdycqLzpcblx0XHRcdGlmKFJuWzFdPT09Jy8nIHx8IFJuWzBdLnNsaWNlKC0yKSA9PT0gXCIvPlwiKSB7XG5cdFx0XHRcdGlmKHIgPCByZWZndWVzcy5zLnIpIHJlZmd1ZXNzLnMuciA9IHI7XG5cdFx0XHRcdGlmKHIgPiByZWZndWVzcy5lLnIpIHJlZmd1ZXNzLmUuciA9IHI7XG5cdFx0XHRcdGlmKFJuWzBdLnNsaWNlKC0yKSA9PT0gXCIvPlwiKSB7XG5cdFx0XHRcdFx0cm93ID0geGxtbF9wYXJzZXhtbHRhZyhSblswXSk7XG5cdFx0XHRcdFx0aWYocm93LkluZGV4KSByID0gK3Jvdy5JbmRleCAtIDE7XG5cdFx0XHRcdH1cblx0XHRcdFx0YyA9IDA7ICsrcjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJvdyA9IHhsbWxfcGFyc2V4bWx0YWcoUm5bMF0pO1xuXHRcdFx0XHRpZihyb3cuSW5kZXgpIHIgPSArcm93LkluZGV4IC0gMTtcblx0XHRcdFx0cm93b2JqID0ge307XG5cdFx0XHRcdGlmKHJvdy5BdXRvRml0SGVpZ2h0ID09IFwiMFwiIHx8IHJvdy5IZWlnaHQpIHtcblx0XHRcdFx0XHRyb3dvYmouaHB4ID0gcGFyc2VJbnQocm93LkhlaWdodCwgMTApOyByb3dvYmouaHB0ID0gcHgycHQocm93b2JqLmhweCk7XG5cdFx0XHRcdFx0cm93aW5mb1tyXSA9IHJvd29iajtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihyb3cuSGlkZGVuID09IFwiMVwiKSB7IHJvd29iai5oaWRkZW4gPSB0cnVlOyByb3dpbmZvW3JdID0gcm93b2JqOyB9XG5cdFx0XHR9XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICd3b3Jrc2hlZXQnIC8qY2FzZSAnV29ya3NoZWV0JyovOiAvKiBUT0RPOiByZWFkIHJhbmdlIGZyb20gRnVsbFJvd3MvRnVsbENvbHVtbnMgKi9cblx0XHRcdGlmKFJuWzFdPT09Jy8nKXtcblx0XHRcdFx0aWYoKHRtcD1zdGF0ZS5wb3AoKSlbMF0hPT1SblszXSkgdGhyb3cgbmV3IEVycm9yKFwiQmFkIHN0YXRlOiBcIit0bXAuam9pbihcInxcIikpO1xuXHRcdFx0XHRzaGVldG5hbWVzLnB1c2goc2hlZXRuYW1lKTtcblx0XHRcdFx0aWYocmVmZ3Vlc3Mucy5yIDw9IHJlZmd1ZXNzLmUuciAmJiByZWZndWVzcy5zLmMgPD0gcmVmZ3Vlc3MuZS5jKSB7XG5cdFx0XHRcdFx0Y3Vyc2hlZXRbXCIhcmVmXCJdID0gZW5jb2RlX3JhbmdlKHJlZmd1ZXNzKTtcblx0XHRcdFx0XHRpZihvcHRzLnNoZWV0Um93cyAmJiBvcHRzLnNoZWV0Um93cyA8PSByZWZndWVzcy5lLnIpIHtcblx0XHRcdFx0XHRcdGN1cnNoZWV0W1wiIWZ1bGxyZWZcIl0gPSBjdXJzaGVldFtcIiFyZWZcIl07XG5cdFx0XHRcdFx0XHRyZWZndWVzcy5lLnIgPSBvcHRzLnNoZWV0Um93cyAtIDE7XG5cdFx0XHRcdFx0XHRjdXJzaGVldFtcIiFyZWZcIl0gPSBlbmNvZGVfcmFuZ2UocmVmZ3Vlc3MpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZihtZXJnZXMubGVuZ3RoKSBjdXJzaGVldFtcIiFtZXJnZXNcIl0gPSBtZXJnZXM7XG5cdFx0XHRcdGlmKGNzdHlzLmxlbmd0aCA+IDApIGN1cnNoZWV0W1wiIWNvbHNcIl0gPSBjc3R5cztcblx0XHRcdFx0aWYocm93aW5mby5sZW5ndGggPiAwKSBjdXJzaGVldFtcIiFyb3dzXCJdID0gcm93aW5mbztcblx0XHRcdFx0c2hlZXRzW3NoZWV0bmFtZV0gPSBjdXJzaGVldDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlZmd1ZXNzID0ge3M6IHtyOjIwMDAwMDAsIGM6MjAwMDAwMH0sIGU6IHtyOjAsIGM6MH0gfTtcblx0XHRcdFx0ciA9IGMgPSAwO1xuXHRcdFx0XHRzdGF0ZS5wdXNoKFtSblszXSwgZmFsc2VdKTtcblx0XHRcdFx0dG1wID0geGxtbF9wYXJzZXhtbHRhZyhSblswXSk7XG5cdFx0XHRcdHNoZWV0bmFtZSA9IHVuZXNjYXBleG1sKHRtcC5OYW1lKTtcblx0XHRcdFx0Y3Vyc2hlZXQgPSAob3B0cy5kZW5zZSA/IFtdIDoge30pO1xuXHRcdFx0XHRtZXJnZXMgPSBbXTtcblx0XHRcdFx0YXJyYXlmID0gW107XG5cdFx0XHRcdHJvd2luZm8gPSBbXTtcblx0XHRcdFx0d3Nwcm9wcyA9IHtuYW1lOnNoZWV0bmFtZSwgSGlkZGVuOjB9O1xuXHRcdFx0XHRXb3JrYm9vay5TaGVldHMucHVzaCh3c3Byb3BzKTtcblx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ3RhYmxlJyAvKmNhc2UgJ1RhYmxlJyovOlxuXHRcdFx0aWYoUm5bMV09PT0nLycpe2lmKCh0bXA9c3RhdGUucG9wKCkpWzBdIT09Um5bM10pIHRocm93IG5ldyBFcnJvcihcIkJhZCBzdGF0ZTogXCIrdG1wLmpvaW4oXCJ8XCIpKTt9XG5cdFx0XHRlbHNlIGlmKFJuWzBdLnNsaWNlKC0yKSA9PSBcIi8+XCIpIGJyZWFrO1xuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHRhYmxlID0geGxtbF9wYXJzZXhtbHRhZyhSblswXSk7XG5cdFx0XHRcdHN0YXRlLnB1c2goW1JuWzNdLCBmYWxzZV0pO1xuXHRcdFx0XHRjc3R5cyA9IFtdOyBzZWVuY29sID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ3N0eWxlJyAvKmNhc2UgJ1N0eWxlJyovOlxuXHRcdFx0aWYoUm5bMV09PT0nLycpIHByb2Nlc3Nfc3R5bGVfeGxtbChzdHlsZXMsIHN0YWcsIG9wdHMpO1xuXHRcdFx0ZWxzZSBzdGFnID0geGxtbF9wYXJzZXhtbHRhZyhSblswXSk7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ251bWJlcmZvcm1hdCcgLypjYXNlICdOdW1iZXJGb3JtYXQnKi86XG5cdFx0XHRzdGFnLm5mID0gdW5lc2NhcGV4bWwoeGxtbF9wYXJzZXhtbHRhZyhSblswXSkuRm9ybWF0IHx8IFwiR2VuZXJhbFwiKTtcblx0XHRcdGlmKFhMTUxGb3JtYXRNYXBbc3RhZy5uZl0pIHN0YWcubmYgPSBYTE1MRm9ybWF0TWFwW3N0YWcubmZdO1xuXHRcdFx0Zm9yKHZhciBzc2ZpZHggPSAwOyBzc2ZpZHggIT0gMHgxODg7ICsrc3NmaWR4KSBpZihTU0YuX3RhYmxlW3NzZmlkeF0gPT0gc3RhZy5uZikgYnJlYWs7XG5cdFx0XHRpZihzc2ZpZHggPT0gMHgxODgpIGZvcihzc2ZpZHggPSAweDM5OyBzc2ZpZHggIT0gMHgxODg7ICsrc3NmaWR4KSBpZihTU0YuX3RhYmxlW3NzZmlkeF0gPT0gbnVsbCkgeyBTU0YubG9hZChzdGFnLm5mLCBzc2ZpZHgpOyBicmVhazsgfVxuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICdjb2x1bW4nIC8qY2FzZSAnQ29sdW1uJyovOlxuXHRcdFx0aWYoc3RhdGVbc3RhdGUubGVuZ3RoLTFdWzBdICE9PSAvKidUYWJsZScqLyd0YWJsZScpIGJyZWFrO1xuXHRcdFx0Y3N0eSA9IHhsbWxfcGFyc2V4bWx0YWcoUm5bMF0pO1xuXHRcdFx0aWYoY3N0eS5IaWRkZW4pIHsgY3N0eS5oaWRkZW4gPSB0cnVlOyBkZWxldGUgY3N0eS5IaWRkZW47IH1cblx0XHRcdGlmKGNzdHkuV2lkdGgpIGNzdHkud3B4ID0gcGFyc2VJbnQoY3N0eS5XaWR0aCwgMTApO1xuXHRcdFx0aWYoIXNlZW5jb2wgJiYgY3N0eS53cHggPiAxMCkge1xuXHRcdFx0XHRzZWVuY29sID0gdHJ1ZTsgTURXID0gREVGX01EVzsgLy9maW5kX21kd193cHgoY3N0eS53cHgpO1xuXHRcdFx0XHRmb3IodmFyIF9jb2wgPSAwOyBfY29sIDwgY3N0eXMubGVuZ3RoOyArK19jb2wpIGlmKGNzdHlzW19jb2xdKSBwcm9jZXNzX2NvbChjc3R5c1tfY29sXSk7XG5cdFx0XHR9XG5cdFx0XHRpZihzZWVuY29sKSBwcm9jZXNzX2NvbChjc3R5KTtcblx0XHRcdGNzdHlzWyhjc3R5LkluZGV4LTF8fGNzdHlzLmxlbmd0aCldID0gY3N0eTtcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCArY3N0eS5TcGFuOyArK2kpIGNzdHlzW2NzdHlzLmxlbmd0aF0gPSBkdXAoY3N0eSk7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ25hbWVkcmFuZ2UnIC8qY2FzZSAnTmFtZWRSYW5nZScqLzpcblx0XHRcdGlmKFJuWzFdPT09Jy8nKSBicmVhaztcblx0XHRcdGlmKCFXb3JrYm9vay5OYW1lcykgV29ya2Jvb2suTmFtZXMgPSBbXTtcblx0XHRcdHZhciBfTmFtZWRSYW5nZSA9IHBhcnNleG1sdGFnKFJuWzBdKTtcblx0XHRcdHZhciBfRGVmaW5lZE5hbWUgPSAoe1xuXHRcdFx0XHROYW1lOiBfTmFtZWRSYW5nZS5OYW1lLFxuXHRcdFx0XHRSZWY6IHJjX3RvX2ExKF9OYW1lZFJhbmdlLlJlZmVyc1RvLnNsaWNlKDEpLCB7cjowLCBjOjB9KVxuXHRcdFx0fSk7XG5cdFx0XHRpZihXb3JrYm9vay5TaGVldHMubGVuZ3RoPjApIF9EZWZpbmVkTmFtZS5TaGVldD1Xb3JrYm9vay5TaGVldHMubGVuZ3RoLTE7XG5Xb3JrYm9vay5OYW1lcy5wdXNoKF9EZWZpbmVkTmFtZSk7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ25hbWVkY2VsbCcgLypjYXNlICdOYW1lZENlbGwnKi86IGJyZWFrO1xuXHRcdGNhc2UgJ2InIC8qY2FzZSAnQicqLzogYnJlYWs7XG5cdFx0Y2FzZSAnaScgLypjYXNlICdJJyovOiBicmVhaztcblx0XHRjYXNlICd1JyAvKmNhc2UgJ1UnKi86IGJyZWFrO1xuXHRcdGNhc2UgJ3MnIC8qY2FzZSAnUycqLzogYnJlYWs7XG5cdFx0Y2FzZSAnZW0nIC8qY2FzZSAnRU0nKi86IGJyZWFrO1xuXHRcdGNhc2UgJ2gyJyAvKmNhc2UgJ0gyJyovOiBicmVhaztcblx0XHRjYXNlICdoMycgLypjYXNlICdIMycqLzogYnJlYWs7XG5cdFx0Y2FzZSAnc3ViJyAvKmNhc2UgJ1N1YicqLzogYnJlYWs7XG5cdFx0Y2FzZSAnc3VwJyAvKmNhc2UgJ1N1cCcqLzogYnJlYWs7XG5cdFx0Y2FzZSAnc3BhbicgLypjYXNlICdTcGFuJyovOiBicmVhaztcblx0XHRjYXNlICdhbGlnbm1lbnQnIC8qY2FzZSAnQWxpZ25tZW50JyovOlxuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnYm9yZGVycycgLypjYXNlICdCb3JkZXJzJyovOiBicmVhaztcblx0XHRjYXNlICdib3JkZXInIC8qY2FzZSAnQm9yZGVyJyovOiBicmVhaztcblx0XHRjYXNlICdmb250JyAvKmNhc2UgJ0ZvbnQnKi86XG5cdFx0XHRpZihSblswXS5zbGljZSgtMikgPT09IFwiLz5cIikgYnJlYWs7XG5cdFx0XHRlbHNlIGlmKFJuWzFdPT09XCIvXCIpIHNzICs9IHN0ci5zbGljZShmaWR4LCBSbi5pbmRleCk7XG5cdFx0XHRlbHNlIGZpZHggPSBSbi5pbmRleCArIFJuWzBdLmxlbmd0aDtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ2ludGVyaW9yJyAvKmNhc2UgJ0ludGVyaW9yJyovOlxuXHRcdFx0aWYoIW9wdHMuY2VsbFN0eWxlcykgYnJlYWs7XG5cdFx0XHRzdGFnLkludGVyaW9yID0geGxtbF9wYXJzZXhtbHRhZyhSblswXSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdwcm90ZWN0aW9uJyAvKmNhc2UgJ1Byb3RlY3Rpb24nKi86IGJyZWFrO1xuXG5cdFx0Y2FzZSAnYXV0aG9yJyAvKmNhc2UgJ0F1dGhvcicqLzpcblx0XHRjYXNlICd0aXRsZScgLypjYXNlICdUaXRsZScqLzpcblx0XHRjYXNlICdkZXNjcmlwdGlvbicgLypjYXNlICdEZXNjcmlwdGlvbicqLzpcblx0XHRjYXNlICdjcmVhdGVkJyAvKmNhc2UgJ0NyZWF0ZWQnKi86XG5cdFx0Y2FzZSAna2V5d29yZHMnIC8qY2FzZSAnS2V5d29yZHMnKi86XG5cdFx0Y2FzZSAnc3ViamVjdCcgLypjYXNlICdTdWJqZWN0JyovOlxuXHRcdGNhc2UgJ2NhdGVnb3J5JyAvKmNhc2UgJ0NhdGVnb3J5JyovOlxuXHRcdGNhc2UgJ2NvbXBhbnknIC8qY2FzZSAnQ29tcGFueScqLzpcblx0XHRjYXNlICdsYXN0YXV0aG9yJyAvKmNhc2UgJ0xhc3RBdXRob3InKi86XG5cdFx0Y2FzZSAnbGFzdHNhdmVkJyAvKmNhc2UgJ0xhc3RTYXZlZCcqLzpcblx0XHRjYXNlICdsYXN0cHJpbnRlZCcgLypjYXNlICdMYXN0UHJpbnRlZCcqLzpcblx0XHRjYXNlICd2ZXJzaW9uJyAvKmNhc2UgJ1ZlcnNpb24nKi86XG5cdFx0Y2FzZSAncmV2aXNpb24nIC8qY2FzZSAnUmV2aXNpb24nKi86XG5cdFx0Y2FzZSAndG90YWx0aW1lJyAvKmNhc2UgJ1RvdGFsVGltZScqLzpcblx0XHRjYXNlICdoeXBlcmxpbmtiYXNlJyAvKmNhc2UgJ0h5cGVybGlua0Jhc2UnKi86XG5cdFx0Y2FzZSAnbWFuYWdlcicgLypjYXNlICdNYW5hZ2VyJyovOlxuXHRcdGNhc2UgJ2NvbnRlbnRzdGF0dXMnIC8qY2FzZSAnQ29udGVudFN0YXR1cycqLzpcblx0XHRjYXNlICdpZGVudGlmaWVyJyAvKmNhc2UgJ0lkZW50aWZpZXInKi86XG5cdFx0Y2FzZSAnbGFuZ3VhZ2UnIC8qY2FzZSAnTGFuZ3VhZ2UnKi86XG5cdFx0Y2FzZSAnYXBwbmFtZScgLypjYXNlICdBcHBOYW1lJyovOlxuXHRcdFx0aWYoUm5bMF0uc2xpY2UoLTIpID09PSBcIi8+XCIpIGJyZWFrO1xuXHRcdFx0ZWxzZSBpZihSblsxXT09PVwiL1wiKSB4bG1sX3NldF9wcm9wKFByb3BzLCByYXdfUm4zLCBzdHIuc2xpY2UocGlkeCwgUm4uaW5kZXgpKTtcblx0XHRcdGVsc2UgcGlkeCA9IFJuLmluZGV4ICsgUm5bMF0ubGVuZ3RoO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAncGFyYWdyYXBocycgLypjYXNlICdQYXJhZ3JhcGhzJyovOiBicmVhaztcblxuXHRcdGNhc2UgJ3N0eWxlcycgLypjYXNlICdTdHlsZXMnKi86XG5cdFx0Y2FzZSAnd29ya2Jvb2snIC8qY2FzZSAnV29ya2Jvb2snKi86XG5cdFx0XHRpZihSblsxXT09PScvJyl7aWYoKHRtcD1zdGF0ZS5wb3AoKSlbMF0hPT1SblszXSkgdGhyb3cgbmV3IEVycm9yKFwiQmFkIHN0YXRlOiBcIit0bXAuam9pbihcInxcIikpO31cblx0XHRcdGVsc2Ugc3RhdGUucHVzaChbUm5bM10sIGZhbHNlXSk7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ2NvbW1lbnQnIC8qY2FzZSAnQ29tbWVudCcqLzpcblx0XHRcdGlmKFJuWzFdPT09Jy8nKXtcblx0XHRcdFx0aWYoKHRtcD1zdGF0ZS5wb3AoKSlbMF0hPT1SblszXSkgdGhyb3cgbmV3IEVycm9yKFwiQmFkIHN0YXRlOiBcIit0bXAuam9pbihcInxcIikpO1xuXHRcdFx0XHR4bG1sX2NsZWFuX2NvbW1lbnQoY29tbWVudCk7XG5cdFx0XHRcdGNvbW1lbnRzLnB1c2goY29tbWVudCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzdGF0ZS5wdXNoKFtSblszXSwgZmFsc2VdKTtcblx0XHRcdFx0dG1wID0geGxtbF9wYXJzZXhtbHRhZyhSblswXSk7XG5cdFx0XHRcdGNvbW1lbnQgPSAoe2E6dG1wLkF1dGhvcn0pO1xuXHRcdFx0fVxuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICdhdXRvZmlsdGVyJyAvKmNhc2UgJ0F1dG9GaWx0ZXInKi86XG5cdFx0XHRpZihSblsxXT09PScvJyl7aWYoKHRtcD1zdGF0ZS5wb3AoKSlbMF0hPT1SblszXSkgdGhyb3cgbmV3IEVycm9yKFwiQmFkIHN0YXRlOiBcIit0bXAuam9pbihcInxcIikpO31cblx0XHRcdGVsc2UgaWYoUm5bMF0uY2hhckF0KFJuWzBdLmxlbmd0aC0yKSAhPT0gJy8nKSB7XG5cdFx0XHRcdHZhciBBdXRvRmlsdGVyID0geGxtbF9wYXJzZXhtbHRhZyhSblswXSk7XG5cdFx0XHRcdGN1cnNoZWV0WychYXV0b2ZpbHRlciddID0geyByZWY6cmNfdG9fYTEoQXV0b0ZpbHRlci5SYW5nZSkucmVwbGFjZSgvXFwkL2csXCJcIikgfTtcblx0XHRcdFx0c3RhdGUucHVzaChbUm5bM10sIHRydWVdKTtcblx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAnbmFtZScgLypjYXNlICdOYW1lJyovOiBicmVhaztcblxuXHRcdGNhc2UgJ2RhdGF2YWxpZGF0aW9uJyAvKmNhc2UgJ0RhdGFWYWxpZGF0aW9uJyovOlxuXHRcdFx0aWYoUm5bMV09PT0nLycpe1xuXHRcdFx0XHRpZigodG1wPXN0YXRlLnBvcCgpKVswXSE9PVJuWzNdKSB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgc3RhdGU6IFwiK3RtcC5qb2luKFwifFwiKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZihSblswXS5jaGFyQXQoUm5bMF0ubGVuZ3RoLTIpICE9PSAnLycpIHN0YXRlLnB1c2goW1JuWzNdLCB0cnVlXSk7XG5cdFx0XHR9XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ3BpeGVsc3BlcmluY2gnIC8qY2FzZSAnUGl4ZWxzUGVySW5jaCcqLzpcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ2NvbXBvbmVudG9wdGlvbnMnIC8qY2FzZSAnQ29tcG9uZW50T3B0aW9ucycqLzpcblx0XHRjYXNlICdkb2N1bWVudHByb3BlcnRpZXMnIC8qY2FzZSAnRG9jdW1lbnRQcm9wZXJ0aWVzJyovOlxuXHRcdGNhc2UgJ2N1c3RvbWRvY3VtZW50cHJvcGVydGllcycgLypjYXNlICdDdXN0b21Eb2N1bWVudFByb3BlcnRpZXMnKi86XG5cdFx0Y2FzZSAnb2ZmaWNlZG9jdW1lbnRzZXR0aW5ncycgLypjYXNlICdPZmZpY2VEb2N1bWVudFNldHRpbmdzJyovOlxuXHRcdGNhc2UgJ3Bpdm90dGFibGUnIC8qY2FzZSAnUGl2b3RUYWJsZScqLzpcblx0XHRjYXNlICdwaXZvdGNhY2hlJyAvKmNhc2UgJ1Bpdm90Q2FjaGUnKi86XG5cdFx0Y2FzZSAnbmFtZXMnIC8qY2FzZSAnTmFtZXMnKi86XG5cdFx0Y2FzZSAnbWFwaW5mbycgLypjYXNlICdNYXBJbmZvJyovOlxuXHRcdGNhc2UgJ3BhZ2VicmVha3MnIC8qY2FzZSAnUGFnZUJyZWFrcycqLzpcblx0XHRjYXNlICdxdWVyeXRhYmxlJyAvKmNhc2UgJ1F1ZXJ5VGFibGUnKi86XG5cdFx0Y2FzZSAnc29ydGluZycgLypjYXNlICdTb3J0aW5nJyovOlxuXHRcdGNhc2UgJ3NjaGVtYScgLypjYXNlICdTY2hlbWEnKi86IC8vY2FzZSAnZGF0YScgLypjYXNlICdkYXRhJyovOlxuXHRcdGNhc2UgJ2NvbmRpdGlvbmFsZm9ybWF0dGluZycgLypjYXNlICdDb25kaXRpb25hbEZvcm1hdHRpbmcnKi86XG5cdFx0Y2FzZSAnc21hcnR0YWd0eXBlJyAvKmNhc2UgJ1NtYXJ0VGFnVHlwZScqLzpcblx0XHRjYXNlICdzbWFydHRhZ3MnIC8qY2FzZSAnU21hcnRUYWdzJyovOlxuXHRcdGNhc2UgJ2V4Y2Vsd29ya2Jvb2snIC8qY2FzZSAnRXhjZWxXb3JrYm9vaycqLzpcblx0XHRjYXNlICd3b3JrYm9va29wdGlvbnMnIC8qY2FzZSAnV29ya2Jvb2tPcHRpb25zJyovOlxuXHRcdGNhc2UgJ3dvcmtzaGVldG9wdGlvbnMnIC8qY2FzZSAnV29ya3NoZWV0T3B0aW9ucycqLzpcblx0XHRcdGlmKFJuWzFdPT09Jy8nKXtpZigodG1wPXN0YXRlLnBvcCgpKVswXSE9PVJuWzNdKSB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgc3RhdGU6IFwiK3RtcC5qb2luKFwifFwiKSk7fVxuXHRcdFx0ZWxzZSBpZihSblswXS5jaGFyQXQoUm5bMF0ubGVuZ3RoLTIpICE9PSAnLycpIHN0YXRlLnB1c2goW1JuWzNdLCB0cnVlXSk7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ251bGwnIC8qY2FzZSAnTnVsbCcqLzogYnJlYWs7XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0LyogRk9EUyBmaWxlIHJvb3QgaXMgPG9mZmljZTpkb2N1bWVudD4gKi9cblx0XHRcdGlmKHN0YXRlLmxlbmd0aCA9PSAwICYmIFJuWzNdID09IFwiZG9jdW1lbnRcIikgcmV0dXJuIHBhcnNlX2ZvZHMoc3RyLCBvcHRzKTtcblx0XHRcdC8qIFVPUyBmaWxlIHJvb3QgaXMgPHVvZjpVT0Y+ICovXG5cdFx0XHRpZihzdGF0ZS5sZW5ndGggPT0gMCAmJiBSblszXSA9PSBcInVvZlwiLypcIlVPRlwiKi8pIHJldHVybiBwYXJzZV9mb2RzKHN0ciwgb3B0cyk7XG5cblx0XHRcdHZhciBzZWVuID0gdHJ1ZTtcblx0XHRcdHN3aXRjaChzdGF0ZVtzdGF0ZS5sZW5ndGgtMV1bMF0pIHtcblx0XHRcdFx0LyogT2ZmaWNlRG9jdW1lbnRTZXR0aW5ncyAqL1xuXHRcdFx0XHRjYXNlICdvZmZpY2Vkb2N1bWVudHNldHRpbmdzJyAvKmNhc2UgJ09mZmljZURvY3VtZW50U2V0dGluZ3MnKi86IHN3aXRjaChSblszXSkge1xuXHRcdFx0XHRcdGNhc2UgJ2FsbG93cG5nJyAvKmNhc2UgJ0FsbG93UE5HJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdyZW1vdmVwZXJzb25hbGluZm9ybWF0aW9uJyAvKmNhc2UgJ1JlbW92ZVBlcnNvbmFsSW5mb3JtYXRpb24nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Rvd25sb2FkY29tcG9uZW50cycgLypjYXNlICdEb3dubG9hZENvbXBvbmVudHMnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2xvY2F0aW9ub2Zjb21wb25lbnRzJyAvKmNhc2UgJ0xvY2F0aW9uT2ZDb21wb25lbnRzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdjb2xvcnMnIC8qY2FzZSAnQ29sb3JzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdjb2xvcicgLypjYXNlICdDb2xvcicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnaW5kZXgnIC8qY2FzZSAnSW5kZXgnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3JnYicgLypjYXNlICdSR0InKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3RhcmdldHNjcmVlbnNpemUnIC8qY2FzZSAnVGFyZ2V0U2NyZWVuU2l6ZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncmVhZG9ubHlyZWNvbW1lbmRlZCcgLypjYXNlICdSZWFkT25seVJlY29tbWVuZGVkJyovOiBicmVhaztcblx0XHRcdFx0XHRkZWZhdWx0OiBzZWVuID0gZmFsc2U7XG5cdFx0XHRcdH0gYnJlYWs7XG5cblx0XHRcdFx0LyogQ29tcG9uZW50T3B0aW9ucyAqL1xuXHRcdFx0XHRjYXNlICdjb21wb25lbnRvcHRpb25zJyAvKmNhc2UgJ0NvbXBvbmVudE9wdGlvbnMnKi86IHN3aXRjaChSblszXSkge1xuXHRcdFx0XHRcdGNhc2UgJ3Rvb2xiYXInIC8qY2FzZSAnVG9vbGJhcicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnaGlkZW9mZmljZWxvZ28nIC8qY2FzZSAnSGlkZU9mZmljZUxvZ28nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3NwcmVhZHNoZWV0YXV0b2ZpdCcgLypjYXNlICdTcHJlYWRzaGVldEF1dG9GaXQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2xhYmVsJyAvKmNhc2UgJ0xhYmVsJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdjYXB0aW9uJyAvKmNhc2UgJ0NhcHRpb24nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21heGhlaWdodCcgLypjYXNlICdNYXhIZWlnaHQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21heHdpZHRoJyAvKmNhc2UgJ01heFdpZHRoJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICduZXh0c2hlZXRudW1iZXInIC8qY2FzZSAnTmV4dFNoZWV0TnVtYmVyJyovOiBicmVhaztcblx0XHRcdFx0XHRkZWZhdWx0OiBzZWVuID0gZmFsc2U7XG5cdFx0XHRcdH0gYnJlYWs7XG5cblx0XHRcdFx0LyogRXhjZWxXb3JrYm9vayAqL1xuXHRcdFx0XHRjYXNlICdleGNlbHdvcmtib29rJyAvKmNhc2UgJ0V4Y2VsV29ya2Jvb2snKi86IHN3aXRjaChSblszXSkge1xuXHRcdFx0XHRcdGNhc2UgJ2RhdGUxOTA0JyAvKmNhc2UgJ0RhdGUxOTA0JyovOlxuV29ya2Jvb2suV0JQcm9wcy5kYXRlMTkwNCA9IHRydWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICd3aW5kb3doZWlnaHQnIC8qY2FzZSAnV2luZG93SGVpZ2h0JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICd3aW5kb3d3aWR0aCcgLypjYXNlICdXaW5kb3dXaWR0aCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnd2luZG93dG9weCcgLypjYXNlICdXaW5kb3dUb3BYJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICd3aW5kb3d0b3B5JyAvKmNhc2UgJ1dpbmRvd1RvcFknKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3RhYnJhdGlvJyAvKmNhc2UgJ1RhYlJhdGlvJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdwcm90ZWN0c3RydWN0dXJlJyAvKmNhc2UgJ1Byb3RlY3RTdHJ1Y3R1cmUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3Byb3RlY3R3aW5kb3cnIC8qY2FzZSAnUHJvdGVjdFdpbmRvdycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncHJvdGVjdHdpbmRvd3MnIC8qY2FzZSAnUHJvdGVjdFdpbmRvd3MnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2FjdGl2ZXNoZWV0JyAvKmNhc2UgJ0FjdGl2ZVNoZWV0JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdkaXNwbGF5aW5rbm90ZXMnIC8qY2FzZSAnRGlzcGxheUlua05vdGVzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdmaXJzdHZpc2libGVzaGVldCcgLypjYXNlICdGaXJzdFZpc2libGVTaGVldCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnc3VwYm9vaycgLypjYXNlICdTdXBCb29rJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdzaGVldG5hbWUnIC8qY2FzZSAnU2hlZXROYW1lJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdzaGVldGluZGV4JyAvKmNhc2UgJ1NoZWV0SW5kZXgnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3NoZWV0aW5kZXhmaXJzdCcgLypjYXNlICdTaGVldEluZGV4Rmlyc3QnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3NoZWV0aW5kZXhsYXN0JyAvKmNhc2UgJ1NoZWV0SW5kZXhMYXN0JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdkbGwnIC8qY2FzZSAnRGxsJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdhY2NlcHRsYWJlbHNpbmZvcm11bGFzJyAvKmNhc2UgJ0FjY2VwdExhYmVsc0luRm9ybXVsYXMnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Rvbm90c2F2ZWxpbmt2YWx1ZXMnIC8qY2FzZSAnRG9Ob3RTYXZlTGlua1ZhbHVlcycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnaXRlcmF0aW9uJyAvKmNhc2UgJ0l0ZXJhdGlvbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWF4aXRlcmF0aW9ucycgLypjYXNlICdNYXhJdGVyYXRpb25zJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXhjaGFuZ2UnIC8qY2FzZSAnTWF4Q2hhbmdlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdwYXRoJyAvKmNhc2UgJ1BhdGgnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3hjdCcgLypjYXNlICdYY3QnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2NvdW50JyAvKmNhc2UgJ0NvdW50JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdzZWxlY3RlZHNoZWV0cycgLypjYXNlICdTZWxlY3RlZFNoZWV0cycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY2FsY3VsYXRpb24nIC8qY2FzZSAnQ2FsY3VsYXRpb24nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3VuY2FsY2VkJyAvKmNhc2UgJ1VuY2FsY2VkJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdzdGFydHVwcHJvbXB0JyAvKmNhc2UgJ1N0YXJ0dXBQcm9tcHQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2NybicgLypjYXNlICdDcm4nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2V4dGVybm5hbWUnIC8qY2FzZSAnRXh0ZXJuTmFtZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZm9ybXVsYScgLypjYXNlICdGb3JtdWxhJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdjb2xmaXJzdCcgLypjYXNlICdDb2xGaXJzdCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY29sbGFzdCcgLypjYXNlICdDb2xMYXN0JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICd3YW50YWR2aXNlJyAvKmNhc2UgJ1dhbnRBZHZpc2UnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Jvb2xlYW4nIC8qY2FzZSAnQm9vbGVhbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZXJyb3InIC8qY2FzZSAnRXJyb3InKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3RleHQnIC8qY2FzZSAnVGV4dCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnb2xlJyAvKmNhc2UgJ09MRScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbm9hdXRvcmVjb3ZlcicgLypjYXNlICdOb0F1dG9SZWNvdmVyJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdwdWJsaXNob2JqZWN0cycgLypjYXNlICdQdWJsaXNoT2JqZWN0cycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZG9ub3RjYWxjdWxhdGViZWZvcmVzYXZlJyAvKmNhc2UgJ0RvTm90Q2FsY3VsYXRlQmVmb3JlU2F2ZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbnVtYmVyJyAvKmNhc2UgJ051bWJlcicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncmVmbW9kZXIxYzEnIC8qY2FzZSAnUmVmTW9kZVIxQzEnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2VtYmVkc2F2ZXNtYXJ0dGFncycgLypjYXNlICdFbWJlZFNhdmVTbWFydFRhZ3MnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6IHNlZW4gPSBmYWxzZTtcblx0XHRcdFx0fSBicmVhaztcblxuXHRcdFx0XHQvKiBXb3JrYm9va09wdGlvbnMgKi9cblx0XHRcdFx0Y2FzZSAnd29ya2Jvb2tvcHRpb25zJyAvKmNhc2UgJ1dvcmtib29rT3B0aW9ucycqLzogc3dpdGNoKFJuWzNdKSB7XG5cdFx0XHRcdFx0Y2FzZSAnb3djdmVyc2lvbicgLypjYXNlICdPV0NWZXJzaW9uJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdoZWlnaHQnIC8qY2FzZSAnSGVpZ2h0JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICd3aWR0aCcgLypjYXNlICdXaWR0aCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDogc2VlbiA9IGZhbHNlO1xuXHRcdFx0XHR9IGJyZWFrO1xuXG5cdFx0XHRcdC8qIFdvcmtzaGVldE9wdGlvbnMgKi9cblx0XHRcdFx0Y2FzZSAnd29ya3NoZWV0b3B0aW9ucycgLypjYXNlICdXb3Jrc2hlZXRPcHRpb25zJyovOiBzd2l0Y2goUm5bM10pIHtcblx0XHRcdFx0XHRjYXNlICd2aXNpYmxlJyAvKmNhc2UgJ1Zpc2libGUnKi86XG5cdFx0XHRcdFx0XHRpZihSblswXS5zbGljZSgtMikgPT09IFwiLz5cIil7LyogZW1wdHkgKi99XG5cdFx0XHRcdFx0XHRlbHNlIGlmKFJuWzFdPT09XCIvXCIpIHN3aXRjaChzdHIuc2xpY2UocGlkeCwgUm4uaW5kZXgpKSB7XG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJTaGVldEhpZGRlblwiOiB3c3Byb3BzLkhpZGRlbiA9IDE7IGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRjYXNlIFwiU2hlZXRWZXJ5SGlkZGVuXCI6IHdzcHJvcHMuSGlkZGVuID0gMjsgYnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRlbHNlIHBpZHggPSBSbi5pbmRleCArIFJuWzBdLmxlbmd0aDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2hlYWRlcicgLypjYXNlICdIZWFkZXInKi86XG5cdFx0XHRcdFx0XHRpZighY3Vyc2hlZXRbJyFtYXJnaW5zJ10pIGRlZmF1bHRfbWFyZ2lucyhjdXJzaGVldFsnIW1hcmdpbnMnXT17fSwgJ3hsbWwnKTtcblx0XHRcdFx0XHRcdGN1cnNoZWV0WychbWFyZ2lucyddLmhlYWRlciA9IHBhcnNleG1sdGFnKFJuWzBdKS5NYXJnaW47XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdmb290ZXInIC8qY2FzZSAnRm9vdGVyJyovOlxuXHRcdFx0XHRcdFx0aWYoIWN1cnNoZWV0WychbWFyZ2lucyddKSBkZWZhdWx0X21hcmdpbnMoY3Vyc2hlZXRbJyFtYXJnaW5zJ109e30sICd4bG1sJyk7XG5cdFx0XHRcdFx0XHRjdXJzaGVldFsnIW1hcmdpbnMnXS5mb290ZXIgPSBwYXJzZXhtbHRhZyhSblswXSkuTWFyZ2luO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncGFnZW1hcmdpbnMnIC8qY2FzZSAnUGFnZU1hcmdpbnMnKi86XG5cdFx0XHRcdFx0XHR2YXIgcGFnZW1hcmdpbnMgPSBwYXJzZXhtbHRhZyhSblswXSk7XG5cdFx0XHRcdFx0XHRpZighY3Vyc2hlZXRbJyFtYXJnaW5zJ10pIGRlZmF1bHRfbWFyZ2lucyhjdXJzaGVldFsnIW1hcmdpbnMnXT17fSwneGxtbCcpO1xuXHRcdFx0XHRcdFx0aWYocGFnZW1hcmdpbnMuVG9wKSBjdXJzaGVldFsnIW1hcmdpbnMnXS50b3AgPSBwYWdlbWFyZ2lucy5Ub3A7XG5cdFx0XHRcdFx0XHRpZihwYWdlbWFyZ2lucy5MZWZ0KSBjdXJzaGVldFsnIW1hcmdpbnMnXS5sZWZ0ID0gcGFnZW1hcmdpbnMuTGVmdDtcblx0XHRcdFx0XHRcdGlmKHBhZ2VtYXJnaW5zLlJpZ2h0KSBjdXJzaGVldFsnIW1hcmdpbnMnXS5yaWdodCA9IHBhZ2VtYXJnaW5zLlJpZ2h0O1xuXHRcdFx0XHRcdFx0aWYocGFnZW1hcmdpbnMuQm90dG9tKSBjdXJzaGVldFsnIW1hcmdpbnMnXS5ib3R0b20gPSBwYWdlbWFyZ2lucy5Cb3R0b207XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdkaXNwbGF5cmlnaHR0b2xlZnQnIC8qY2FzZSAnRGlzcGxheVJpZ2h0VG9MZWZ0JyovOlxuXHRcdFx0XHRcdFx0aWYoIVdvcmtib29rLlZpZXdzKSBXb3JrYm9vay5WaWV3cyA9IFtdO1xuXHRcdFx0XHRcdFx0aWYoIVdvcmtib29rLlZpZXdzWzBdKSBXb3JrYm9vay5WaWV3c1swXSA9IHt9O1xuXHRcdFx0XHRcdFx0V29ya2Jvb2suVmlld3NbMF0uUlRMID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnZnJlZXplcGFuZXMnIC8qY2FzZSAnRnJlZXplUGFuZXMnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Zyb3plbm5vc3BsaXQnIC8qY2FzZSAnRnJvemVuTm9TcGxpdCcqLzogYnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdzcGxpdGhvcml6b250YWwnIC8qY2FzZSAnU3BsaXRIb3Jpem9udGFsJyovOlxuXHRcdFx0XHRcdGNhc2UgJ3NwbGl0dmVydGljYWwnIC8qY2FzZSAnU3BsaXRWZXJ0aWNhbCcqLzpcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnZG9ub3RkaXNwbGF5Z3JpZGxpbmVzJyAvKmNhc2UgJ0RvTm90RGlzcGxheUdyaWRsaW5lcycqLzpcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnYWN0aXZlcm93JyAvKmNhc2UgJ0FjdGl2ZVJvdycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnYWN0aXZlY29sJyAvKmNhc2UgJ0FjdGl2ZUNvbCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndG9wcm93Ym90dG9tcGFuZScgLypjYXNlICdUb3BSb3dCb3R0b21QYW5lJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdsZWZ0Y29sdW1ucmlnaHRwYW5lJyAvKmNhc2UgJ0xlZnRDb2x1bW5SaWdodFBhbmUnKi86IGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAndW5zeW5jZWQnIC8qY2FzZSAnVW5zeW5jZWQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3ByaW50JyAvKmNhc2UgJ1ByaW50JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdwcmludGVycm9ycycgLypjYXNlICdQcmludEVycm9ycycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncGFuZXMnIC8qY2FzZSAnUGFuZXMnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3NjYWxlJyAvKmNhc2UgJ1NjYWxlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdwYW5lJyAvKmNhc2UgJ1BhbmUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ251bWJlcicgLypjYXNlICdOdW1iZXInKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2xheW91dCcgLypjYXNlICdMYXlvdXQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3BhZ2VzZXR1cCcgLypjYXNlICdQYWdlU2V0dXAnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3NlbGVjdGVkJyAvKmNhc2UgJ1NlbGVjdGVkJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdwcm90ZWN0b2JqZWN0cycgLypjYXNlICdQcm90ZWN0T2JqZWN0cycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZW5hYmxlc2VsZWN0aW9uJyAvKmNhc2UgJ0VuYWJsZVNlbGVjdGlvbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncHJvdGVjdHNjZW5hcmlvcycgLypjYXNlICdQcm90ZWN0U2NlbmFyaW9zJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICd2YWxpZHByaW50ZXJpbmZvJyAvKmNhc2UgJ1ZhbGlkUHJpbnRlckluZm8nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2hvcml6b250YWxyZXNvbHV0aW9uJyAvKmNhc2UgJ0hvcml6b250YWxSZXNvbHV0aW9uJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICd2ZXJ0aWNhbHJlc29sdXRpb24nIC8qY2FzZSAnVmVydGljYWxSZXNvbHV0aW9uJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdudW1iZXJvZmNvcGllcycgLypjYXNlICdOdW1iZXJvZkNvcGllcycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnYWN0aXZlcGFuZScgLypjYXNlICdBY3RpdmVQYW5lJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICd0b3Byb3d2aXNpYmxlJyAvKmNhc2UgJ1RvcFJvd1Zpc2libGUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2xlZnRjb2x1bW52aXNpYmxlJyAvKmNhc2UgJ0xlZnRDb2x1bW5WaXNpYmxlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdmaXR0b3BhZ2UnIC8qY2FzZSAnRml0VG9QYWdlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdyYW5nZXNlbGVjdGlvbicgLypjYXNlICdSYW5nZVNlbGVjdGlvbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncGFwZXJzaXplaW5kZXgnIC8qY2FzZSAnUGFwZXJTaXplSW5kZXgnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3BhZ2VsYXlvdXR6b29tJyAvKmNhc2UgJ1BhZ2VMYXlvdXRab29tJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdwYWdlYnJlYWt6b29tJyAvKmNhc2UgJ1BhZ2VCcmVha1pvb20nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2ZpbHRlcm9uJyAvKmNhc2UgJ0ZpbHRlck9uJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdmaXR3aWR0aCcgLypjYXNlICdGaXRXaWR0aCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZml0aGVpZ2h0JyAvKmNhc2UgJ0ZpdEhlaWdodCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY29tbWVudHNsYXlvdXQnIC8qY2FzZSAnQ29tbWVudHNMYXlvdXQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3pvb20nIC8qY2FzZSAnWm9vbScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbGVmdHRvcmlnaHQnIC8qY2FzZSAnTGVmdFRvUmlnaHQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2dyaWRsaW5lcycgLypjYXNlICdHcmlkbGluZXMnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2FsbG93c29ydCcgLypjYXNlICdBbGxvd1NvcnQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2FsbG93ZmlsdGVyJyAvKmNhc2UgJ0FsbG93RmlsdGVyJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdhbGxvd2luc2VydHJvd3MnIC8qY2FzZSAnQWxsb3dJbnNlcnRSb3dzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdhbGxvd2RlbGV0ZXJvd3MnIC8qY2FzZSAnQWxsb3dEZWxldGVSb3dzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdhbGxvd2luc2VydGNvbHMnIC8qY2FzZSAnQWxsb3dJbnNlcnRDb2xzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdhbGxvd2RlbGV0ZWNvbHMnIC8qY2FzZSAnQWxsb3dEZWxldGVDb2xzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdhbGxvd2luc2VydGh5cGVybGlua3MnIC8qY2FzZSAnQWxsb3dJbnNlcnRIeXBlcmxpbmtzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdhbGxvd2Zvcm1hdGNlbGxzJyAvKmNhc2UgJ0FsbG93Rm9ybWF0Q2VsbHMnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2FsbG93c2l6ZWNvbHMnIC8qY2FzZSAnQWxsb3dTaXplQ29scycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnYWxsb3dzaXplcm93cycgLypjYXNlICdBbGxvd1NpemVSb3dzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdub3N1bW1hcnlyb3dzYmVsb3dkZXRhaWwnIC8qY2FzZSAnTm9TdW1tYXJ5Um93c0JlbG93RGV0YWlsJyovOlxuXHRcdFx0XHRcdFx0aWYoIWN1cnNoZWV0W1wiIW91dGxpbmVcIl0pIGN1cnNoZWV0W1wiIW91dGxpbmVcIl0gPSB7fTtcblx0XHRcdFx0XHRcdGN1cnNoZWV0W1wiIW91dGxpbmVcIl0uYWJvdmUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndGFiY29sb3JpbmRleCcgLypjYXNlICdUYWJDb2xvckluZGV4JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdkb25vdGRpc3BsYXloZWFkaW5ncycgLypjYXNlICdEb05vdERpc3BsYXlIZWFkaW5ncycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnc2hvd3BhZ2VsYXlvdXR6b29tJyAvKmNhc2UgJ1Nob3dQYWdlTGF5b3V0Wm9vbScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbm9zdW1tYXJ5Y29sdW1uc3JpZ2h0ZGV0YWlsJyAvKmNhc2UgJ05vU3VtbWFyeUNvbHVtbnNSaWdodERldGFpbCcqLzpcblx0XHRcdFx0XHRcdGlmKCFjdXJzaGVldFtcIiFvdXRsaW5lXCJdKSBjdXJzaGVldFtcIiFvdXRsaW5lXCJdID0ge307XG5cdFx0XHRcdFx0XHRjdXJzaGVldFtcIiFvdXRsaW5lXCJdLmxlZnQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnYmxhY2thbmR3aGl0ZScgLypjYXNlICdCbGFja0FuZFdoaXRlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdkb25vdGRpc3BsYXl6ZXJvcycgLypjYXNlICdEb05vdERpc3BsYXlaZXJvcycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZGlzcGxheXBhZ2VicmVhaycgLypjYXNlICdEaXNwbGF5UGFnZUJyZWFrJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdyb3djb2xoZWFkaW5ncycgLypjYXNlICdSb3dDb2xIZWFkaW5ncycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZG9ub3RkaXNwbGF5b3V0bGluZScgLypjYXNlICdEb05vdERpc3BsYXlPdXRsaW5lJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdub29yaWVudGF0aW9uJyAvKmNhc2UgJ05vT3JpZW50YXRpb24nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2FsbG93dXNlcGl2b3R0YWJsZXMnIC8qY2FzZSAnQWxsb3dVc2VQaXZvdFRhYmxlcycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnemVyb2hlaWdodCcgLypjYXNlICdaZXJvSGVpZ2h0JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICd2aWV3YWJsZXJhbmdlJyAvKmNhc2UgJ1ZpZXdhYmxlUmFuZ2UnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3NlbGVjdGlvbicgLypjYXNlICdTZWxlY3Rpb24nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3Byb3RlY3Rjb250ZW50cycgLypjYXNlICdQcm90ZWN0Q29udGVudHMnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6IHNlZW4gPSBmYWxzZTtcblx0XHRcdFx0fSBicmVhaztcblxuXHRcdFx0XHQvKiBQaXZvdFRhYmxlICovXG5cdFx0XHRcdGNhc2UgJ3Bpdm90dGFibGUnIC8qY2FzZSAnUGl2b3RUYWJsZScqLzogY2FzZSAncGl2b3RjYWNoZScgLypjYXNlICdQaXZvdENhY2hlJyovOiBzd2l0Y2goUm5bM10pIHtcblx0XHRcdFx0XHRjYXNlICdpbW1lZGlhdGVpdGVtc29uZHJvcCcgLypjYXNlICdJbW1lZGlhdGVJdGVtc09uRHJvcCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnc2hvd3BhZ2VtdWx0aXBsZWl0ZW1sYWJlbCcgLypjYXNlICdTaG93UGFnZU11bHRpcGxlSXRlbUxhYmVsJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdjb21wYWN0cm93aW5kZW50JyAvKmNhc2UgJ0NvbXBhY3RSb3dJbmRlbnQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2xvY2F0aW9uJyAvKmNhc2UgJ0xvY2F0aW9uJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdwaXZvdGZpZWxkJyAvKmNhc2UgJ1Bpdm90RmllbGQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ29yaWVudGF0aW9uJyAvKmNhc2UgJ09yaWVudGF0aW9uJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdsYXlvdXRmb3JtJyAvKmNhc2UgJ0xheW91dEZvcm0nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2xheW91dHN1YnRvdGFsbG9jYXRpb24nIC8qY2FzZSAnTGF5b3V0U3VidG90YWxMb2NhdGlvbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbGF5b3V0Y29tcGFjdHJvdycgLypjYXNlICdMYXlvdXRDb21wYWN0Um93JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdwb3NpdGlvbicgLypjYXNlICdQb3NpdGlvbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncGl2b3RpdGVtJyAvKmNhc2UgJ1Bpdm90SXRlbScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZGF0YXR5cGUnIC8qY2FzZSAnRGF0YVR5cGUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2RhdGFmaWVsZCcgLypjYXNlICdEYXRhRmllbGQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3NvdXJjZW5hbWUnIC8qY2FzZSAnU291cmNlTmFtZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncGFyZW50ZmllbGQnIC8qY2FzZSAnUGFyZW50RmllbGQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3B0bGluZWl0ZW1zJyAvKmNhc2UgJ1BUTGluZUl0ZW1zJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdwdGxpbmVpdGVtJyAvKmNhc2UgJ1BUTGluZUl0ZW0nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2NvdW50b2ZzYW1laXRlbXMnIC8qY2FzZSAnQ291bnRPZlNhbWVJdGVtcycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnaXRlbScgLypjYXNlICdJdGVtJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdpdGVtdHlwZScgLypjYXNlICdJdGVtVHlwZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncHRzb3VyY2UnIC8qY2FzZSAnUFRTb3VyY2UnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2NhY2hlaW5kZXgnIC8qY2FzZSAnQ2FjaGVJbmRleCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY29uc29saWRhdGlvbnJlZmVyZW5jZScgLypjYXNlICdDb25zb2xpZGF0aW9uUmVmZXJlbmNlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdmaWxlbmFtZScgLypjYXNlICdGaWxlTmFtZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncmVmZXJlbmNlJyAvKmNhc2UgJ1JlZmVyZW5jZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbm9jb2x1bW5ncmFuZCcgLypjYXNlICdOb0NvbHVtbkdyYW5kJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdub3Jvd2dyYW5kJyAvKmNhc2UgJ05vUm93R3JhbmQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2JsYW5rbGluZWFmdGVyaXRlbXMnIC8qY2FzZSAnQmxhbmtMaW5lQWZ0ZXJJdGVtcycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnaGlkZGVuJyAvKmNhc2UgJ0hpZGRlbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnc3VidG90YWwnIC8qY2FzZSAnU3VidG90YWwnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Jhc2VmaWVsZCcgLypjYXNlICdCYXNlRmllbGQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcGNoaWxkaXRlbXMnIC8qY2FzZSAnTWFwQ2hpbGRJdGVtcycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZnVuY3Rpb24nIC8qY2FzZSAnRnVuY3Rpb24nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3JlZnJlc2hvbmZpbGVvcGVuJyAvKmNhc2UgJ1JlZnJlc2hPbkZpbGVPcGVuJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdwcmludHNldHRpdGxlcycgLypjYXNlICdQcmludFNldFRpdGxlcycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWVyZ2VsYWJlbHMnIC8qY2FzZSAnTWVyZ2VMYWJlbHMnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2RlZmF1bHR2ZXJzaW9uJyAvKmNhc2UgJ0RlZmF1bHRWZXJzaW9uJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdyZWZyZXNobmFtZScgLypjYXNlICdSZWZyZXNoTmFtZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncmVmcmVzaGRhdGUnIC8qY2FzZSAnUmVmcmVzaERhdGUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3JlZnJlc2hkYXRlY29weScgLypjYXNlICdSZWZyZXNoRGF0ZUNvcHknKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3ZlcnNpb25sYXN0cmVmcmVzaCcgLypjYXNlICdWZXJzaW9uTGFzdFJlZnJlc2gnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3ZlcnNpb25sYXN0dXBkYXRlJyAvKmNhc2UgJ1ZlcnNpb25MYXN0VXBkYXRlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICd2ZXJzaW9udXBkYXRlYWJsZW1pbicgLypjYXNlICdWZXJzaW9uVXBkYXRlYWJsZU1pbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndmVyc2lvbnJlZnJlc2hhYmxlbWluJyAvKmNhc2UgJ1ZlcnNpb25SZWZyZXNoYWJsZU1pbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY2FsY3VsYXRpb24nIC8qY2FzZSAnQ2FsY3VsYXRpb24nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6IHNlZW4gPSBmYWxzZTtcblx0XHRcdFx0fSBicmVhaztcblxuXHRcdFx0XHQvKiBQYWdlQnJlYWtzICovXG5cdFx0XHRcdGNhc2UgJ3BhZ2VicmVha3MnIC8qY2FzZSAnUGFnZUJyZWFrcycqLzogc3dpdGNoKFJuWzNdKSB7XG5cdFx0XHRcdFx0Y2FzZSAnY29sYnJlYWtzJyAvKmNhc2UgJ0NvbEJyZWFrcycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY29sYnJlYWsnIC8qY2FzZSAnQ29sQnJlYWsnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3Jvd2JyZWFrcycgLypjYXNlICdSb3dCcmVha3MnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3Jvd2JyZWFrJyAvKmNhc2UgJ1Jvd0JyZWFrJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdjb2xzdGFydCcgLypjYXNlICdDb2xTdGFydCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY29sZW5kJyAvKmNhc2UgJ0NvbEVuZCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncm93ZW5kJyAvKmNhc2UgJ1Jvd0VuZCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDogc2VlbiA9IGZhbHNlO1xuXHRcdFx0XHR9IGJyZWFrO1xuXG5cdFx0XHRcdC8qIEF1dG9GaWx0ZXIgKi9cblx0XHRcdFx0Y2FzZSAnYXV0b2ZpbHRlcicgLypjYXNlICdBdXRvRmlsdGVyJyovOiBzd2l0Y2goUm5bM10pIHtcblx0XHRcdFx0XHRjYXNlICdhdXRvZmlsdGVyY29sdW1uJyAvKmNhc2UgJ0F1dG9GaWx0ZXJDb2x1bW4nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2F1dG9maWx0ZXJjb25kaXRpb24nIC8qY2FzZSAnQXV0b0ZpbHRlckNvbmRpdGlvbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnYXV0b2ZpbHRlcmFuZCcgLypjYXNlICdBdXRvRmlsdGVyQW5kJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdhdXRvZmlsdGVyb3InIC8qY2FzZSAnQXV0b0ZpbHRlck9yJyovOiBicmVhaztcblx0XHRcdFx0XHRkZWZhdWx0OiBzZWVuID0gZmFsc2U7XG5cdFx0XHRcdH0gYnJlYWs7XG5cblx0XHRcdFx0LyogUXVlcnlUYWJsZSAqL1xuXHRcdFx0XHRjYXNlICdxdWVyeXRhYmxlJyAvKmNhc2UgJ1F1ZXJ5VGFibGUnKi86IHN3aXRjaChSblszXSkge1xuXHRcdFx0XHRcdGNhc2UgJ2lkJyAvKmNhc2UgJ0lkJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdhdXRvZm9ybWF0Zm9udCcgLypjYXNlICdBdXRvRm9ybWF0Rm9udCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnYXV0b2Zvcm1hdHBhdHRlcm4nIC8qY2FzZSAnQXV0b0Zvcm1hdFBhdHRlcm4nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3F1ZXJ5c291cmNlJyAvKmNhc2UgJ1F1ZXJ5U291cmNlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdxdWVyeXR5cGUnIC8qY2FzZSAnUXVlcnlUeXBlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdlbmFibGVyZWRpcmVjdGlvbnMnIC8qY2FzZSAnRW5hYmxlUmVkaXJlY3Rpb25zJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdyZWZyZXNoZWRpbnhsOScgLypjYXNlICdSZWZyZXNoZWRJblhsOScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndXJsc3RyaW5nJyAvKmNhc2UgJ1VSTFN0cmluZycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnaHRtbHRhYmxlcycgLypjYXNlICdIVE1MVGFibGVzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdjb25uZWN0aW9uJyAvKmNhc2UgJ0Nvbm5lY3Rpb24nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2NvbW1hbmR0ZXh0JyAvKmNhc2UgJ0NvbW1hbmRUZXh0JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdyZWZyZXNoaW5mbycgLypjYXNlICdSZWZyZXNoSW5mbycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbm90aXRsZXMnIC8qY2FzZSAnTm9UaXRsZXMnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ25leHRpZCcgLypjYXNlICdOZXh0SWQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2NvbHVtbmluZm8nIC8qY2FzZSAnQ29sdW1uSW5mbycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnb3ZlcndyaXRlY2VsbHMnIC8qY2FzZSAnT3ZlcndyaXRlQ2VsbHMnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Rvbm90cHJvbXB0Zm9yZmlsZScgLypjYXNlICdEb05vdFByb21wdEZvckZpbGUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3RleHR3aXphcmRzZXR0aW5ncycgLypjYXNlICdUZXh0V2l6YXJkU2V0dGluZ3MnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3NvdXJjZScgLypjYXNlICdTb3VyY2UnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ251bWJlcicgLypjYXNlICdOdW1iZXInKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2RlY2ltYWwnIC8qY2FzZSAnRGVjaW1hbCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndGhvdXNhbmRzZXBhcmF0b3InIC8qY2FzZSAnVGhvdXNhbmRTZXBhcmF0b3InKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3RyYWlsaW5nbWludXNudW1iZXJzJyAvKmNhc2UgJ1RyYWlsaW5nTWludXNOdW1iZXJzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdmb3JtYXRzZXR0aW5ncycgLypjYXNlICdGb3JtYXRTZXR0aW5ncycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZmllbGR0eXBlJyAvKmNhc2UgJ0ZpZWxkVHlwZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZGVsaW1pdGVycycgLypjYXNlICdEZWxpbWl0ZXJzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICd0YWInIC8qY2FzZSAnVGFiJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdjb21tYScgLypjYXNlICdDb21tYScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnYXV0b2Zvcm1hdG5hbWUnIC8qY2FzZSAnQXV0b0Zvcm1hdE5hbWUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3ZlcnNpb25sYXN0ZWRpdCcgLypjYXNlICdWZXJzaW9uTGFzdEVkaXQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3ZlcnNpb25sYXN0cmVmcmVzaCcgLypjYXNlICdWZXJzaW9uTGFzdFJlZnJlc2gnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6IHNlZW4gPSBmYWxzZTtcblx0XHRcdFx0fSBicmVhaztcblxuXHRcdFx0XHRjYXNlICdkYXRhdmFsaWRhdGlvbicgLypjYXNlICdEYXRhVmFsaWRhdGlvbicqLzpcblx0XHRcdFx0c3dpdGNoKFJuWzNdKSB7XG5cdFx0XHRcdFx0Y2FzZSAncmFuZ2UnIC8qY2FzZSAnUmFuZ2UnKi86IGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAndHlwZScgLypjYXNlICdUeXBlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdtaW4nIC8qY2FzZSAnTWluJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXgnIC8qY2FzZSAnTWF4JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdzb3J0JyAvKmNhc2UgJ1NvcnQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Rlc2NlbmRpbmcnIC8qY2FzZSAnRGVzY2VuZGluZycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnb3JkZXInIC8qY2FzZSAnT3JkZXInKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Nhc2VzZW5zaXRpdmUnIC8qY2FzZSAnQ2FzZVNlbnNpdGl2ZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndmFsdWUnIC8qY2FzZSAnVmFsdWUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Vycm9yc3R5bGUnIC8qY2FzZSAnRXJyb3JTdHlsZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZXJyb3JtZXNzYWdlJyAvKmNhc2UgJ0Vycm9yTWVzc2FnZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZXJyb3J0aXRsZScgLypjYXNlICdFcnJvclRpdGxlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdpbnB1dG1lc3NhZ2UnIC8qY2FzZSAnSW5wdXRNZXNzYWdlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdpbnB1dHRpdGxlJyAvKmNhc2UgJ0lucHV0VGl0bGUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2NvbWJvaGlkZScgLypjYXNlICdDb21ib0hpZGUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2lucHV0aGlkZScgLypjYXNlICdJbnB1dEhpZGUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2NvbmRpdGlvbicgLypjYXNlICdDb25kaXRpb24nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3F1YWxpZmllcicgLypjYXNlICdRdWFsaWZpZXInKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3VzZWJsYW5rJyAvKmNhc2UgJ1VzZUJsYW5rJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICd2YWx1ZTEnIC8qY2FzZSAnVmFsdWUxJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICd2YWx1ZTInIC8qY2FzZSAnVmFsdWUyJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdmb3JtYXQnIC8qY2FzZSAnRm9ybWF0JyovOiBicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ2NlbGxyYW5nZWxpc3QnIC8qY2FzZSAnQ2VsbFJhbmdlTGlzdCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDogc2VlbiA9IGZhbHNlO1xuXHRcdFx0XHR9IGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ3NvcnRpbmcnIC8qY2FzZSAnU29ydGluZycqLzpcblx0XHRcdFx0Y2FzZSAnY29uZGl0aW9uYWxmb3JtYXR0aW5nJyAvKmNhc2UgJ0NvbmRpdGlvbmFsRm9ybWF0dGluZycqLzpcblx0XHRcdFx0c3dpdGNoKFJuWzNdKSB7XG5cdFx0XHRcdFx0Y2FzZSAncmFuZ2UnIC8qY2FzZSAnUmFuZ2UnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3R5cGUnIC8qY2FzZSAnVHlwZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWluJyAvKmNhc2UgJ01pbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWF4JyAvKmNhc2UgJ01heCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnc29ydCcgLypjYXNlICdTb3J0JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdkZXNjZW5kaW5nJyAvKmNhc2UgJ0Rlc2NlbmRpbmcnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ29yZGVyJyAvKmNhc2UgJ09yZGVyJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdjYXNlc2Vuc2l0aXZlJyAvKmNhc2UgJ0Nhc2VTZW5zaXRpdmUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3ZhbHVlJyAvKmNhc2UgJ1ZhbHVlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdlcnJvcnN0eWxlJyAvKmNhc2UgJ0Vycm9yU3R5bGUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Vycm9ybWVzc2FnZScgLypjYXNlICdFcnJvck1lc3NhZ2UnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Vycm9ydGl0bGUnIC8qY2FzZSAnRXJyb3JUaXRsZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY2VsbHJhbmdlbGlzdCcgLypjYXNlICdDZWxsUmFuZ2VMaXN0JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdpbnB1dG1lc3NhZ2UnIC8qY2FzZSAnSW5wdXRNZXNzYWdlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdpbnB1dHRpdGxlJyAvKmNhc2UgJ0lucHV0VGl0bGUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2NvbWJvaGlkZScgLypjYXNlICdDb21ib0hpZGUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2lucHV0aGlkZScgLypjYXNlICdJbnB1dEhpZGUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2NvbmRpdGlvbicgLypjYXNlICdDb25kaXRpb24nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3F1YWxpZmllcicgLypjYXNlICdRdWFsaWZpZXInKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3VzZWJsYW5rJyAvKmNhc2UgJ1VzZUJsYW5rJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICd2YWx1ZTEnIC8qY2FzZSAnVmFsdWUxJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICd2YWx1ZTInIC8qY2FzZSAnVmFsdWUyJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdmb3JtYXQnIC8qY2FzZSAnRm9ybWF0JyovOiBicmVhaztcblx0XHRcdFx0XHRkZWZhdWx0OiBzZWVuID0gZmFsc2U7XG5cdFx0XHRcdH0gYnJlYWs7XG5cblx0XHRcdFx0LyogTWFwSW5mbyAoc2NoZW1hKSAqL1xuXHRcdFx0XHRjYXNlICdtYXBpbmZvJyAvKmNhc2UgJ01hcEluZm8nKi86IGNhc2UgJ3NjaGVtYScgLypjYXNlICdTY2hlbWEnKi86IGNhc2UgJ2RhdGEnIC8qY2FzZSAnZGF0YScqLzogc3dpdGNoKFJuWzNdKSB7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwJyAvKmNhc2UgJ01hcCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZW50cnknIC8qY2FzZSAnRW50cnknKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3JhbmdlJyAvKmNhc2UgJ1JhbmdlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICd4cGF0aCcgLypjYXNlICdYUGF0aCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZmllbGQnIC8qY2FzZSAnRmllbGQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3hzZHR5cGUnIC8qY2FzZSAnWFNEVHlwZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZmlsdGVyb24nIC8qY2FzZSAnRmlsdGVyT24nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2FnZ3JlZ2F0ZScgLypjYXNlICdBZ2dyZWdhdGUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2VsZW1lbnR0eXBlJyAvKmNhc2UgJ0VsZW1lbnRUeXBlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdhdHRyaWJ1dGV0eXBlJyAvKmNhc2UgJ0F0dHJpYnV0ZVR5cGUnKi86IGJyZWFrO1xuXHRcdFx0XHQvKiBUaGVzZSBhcmUgZnJvbSB4c2QgKFhNTCBTY2hlbWEgRGVmaW5pdGlvbikgKi9cblx0XHRcdFx0XHRjYXNlICdzY2hlbWEnIC8qY2FzZSAnc2NoZW1hJyovOlxuXHRcdFx0XHRcdGNhc2UgJ2VsZW1lbnQnIC8qY2FzZSAnZWxlbWVudCcqLzpcblx0XHRcdFx0XHRjYXNlICdjb21wbGV4dHlwZScgLypjYXNlICdjb21wbGV4VHlwZScqLzpcblx0XHRcdFx0XHRjYXNlICdkYXRhdHlwZScgLypjYXNlICdkYXRhdHlwZScqLzpcblx0XHRcdFx0XHRjYXNlICdhbGwnIC8qY2FzZSAnYWxsJyovOlxuXHRcdFx0XHRcdGNhc2UgJ2F0dHJpYnV0ZScgLypjYXNlICdhdHRyaWJ1dGUnKi86XG5cdFx0XHRcdFx0Y2FzZSAnZXh0ZW5kcycgLypjYXNlICdleHRlbmRzJyovOiBicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ3JvdycgLypjYXNlICdyb3cnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6IHNlZW4gPSBmYWxzZTtcblx0XHRcdFx0fSBicmVhaztcblxuXHRcdFx0XHQvKiBTbWFydFRhZ3MgKGNhbiBiZSBhbnl0aGluZykgKi9cblx0XHRcdFx0Y2FzZSAnc21hcnR0YWdzJyAvKmNhc2UgJ1NtYXJ0VGFncycqLzogYnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDogc2VlbiA9IGZhbHNlOyBicmVhaztcblx0XHRcdH1cblx0XHRcdGlmKHNlZW4pIGJyZWFrO1xuXHRcdFx0LyogQ3VzdG9tRG9jdW1lbnRQcm9wZXJ0aWVzICovXG5cdFx0XHRpZihSblszXS5tYXRjaCgvIVxcW0NEQVRBLykpIGJyZWFrO1xuXHRcdFx0aWYoIXN0YXRlW3N0YXRlLmxlbmd0aC0xXVsxXSkgdGhyb3cgJ1VucmVjb2duaXplZCB0YWc6ICcgKyBSblszXSArIFwifFwiICsgc3RhdGUuam9pbihcInxcIik7XG5cdFx0XHRpZihzdGF0ZVtzdGF0ZS5sZW5ndGgtMV1bMF09PT0vKidDdXN0b21Eb2N1bWVudFByb3BlcnRpZXMnKi8nY3VzdG9tZG9jdW1lbnRwcm9wZXJ0aWVzJykge1xuXHRcdFx0XHRpZihSblswXS5zbGljZSgtMikgPT09IFwiLz5cIikgYnJlYWs7XG5cdFx0XHRcdGVsc2UgaWYoUm5bMV09PT1cIi9cIikgeGxtbF9zZXRfY3VzdHByb3AoQ3VzdHByb3BzLCByYXdfUm4zLCBjcCwgc3RyLnNsaWNlKHBpZHgsIFJuLmluZGV4KSk7XG5cdFx0XHRcdGVsc2UgeyBjcCA9IFJuOyBwaWR4ID0gUm4uaW5kZXggKyBSblswXS5sZW5ndGg7IH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZihvcHRzLldURikgdGhyb3cgJ1VucmVjb2duaXplZCB0YWc6ICcgKyBSblszXSArIFwifFwiICsgc3RhdGUuam9pbihcInxcIik7XG5cdH1cblx0dmFyIG91dCA9ICh7fSk7XG5cdGlmKCFvcHRzLmJvb2tTaGVldHMgJiYgIW9wdHMuYm9va1Byb3BzKSBvdXQuU2hlZXRzID0gc2hlZXRzO1xuXHRvdXQuU2hlZXROYW1lcyA9IHNoZWV0bmFtZXM7XG5cdG91dC5Xb3JrYm9vayA9IFdvcmtib29rO1xuXHRvdXQuU1NGID0gU1NGLmdldF90YWJsZSgpO1xuXHRvdXQuUHJvcHMgPSBQcm9wcztcblx0b3V0LkN1c3Rwcm9wcyA9IEN1c3Rwcm9wcztcblx0cmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gcGFyc2VfeGxtbChkYXRhLCBvcHRzKSB7XG5cdGZpeF9yZWFkX29wdHMob3B0cz1vcHRzfHx7fSk7XG5cdHN3aXRjaChvcHRzLnR5cGV8fFwiYmFzZTY0XCIpIHtcblx0XHRjYXNlIFwiYmFzZTY0XCI6IHJldHVybiBwYXJzZV94bG1sX3htbChCYXNlNjQuZGVjb2RlKGRhdGEpLCBvcHRzKTtcblx0XHRjYXNlIFwiYmluYXJ5XCI6IGNhc2UgXCJidWZmZXJcIjogY2FzZSBcImZpbGVcIjogcmV0dXJuIHBhcnNlX3hsbWxfeG1sKGRhdGEsIG9wdHMpO1xuXHRcdGNhc2UgXCJhcnJheVwiOiByZXR1cm4gcGFyc2VfeGxtbF94bWwoYTJzKGRhdGEpLCBvcHRzKTtcblx0fVxufVxuXG4vKiBUT0RPICovXG5mdW5jdGlvbiB3cml0ZV9wcm9wc194bG1sKHdiLCBvcHRzKSB7XG5cdHZhciBvID0gW107XG5cdC8qIERvY3VtZW50UHJvcGVydGllcyAqL1xuXHRpZih3Yi5Qcm9wcykgby5wdXNoKHhsbWxfd3JpdGVfZG9jcHJvcHMod2IuUHJvcHMsIG9wdHMpKTtcblx0LyogQ3VzdG9tRG9jdW1lbnRQcm9wZXJ0aWVzICovXG5cdGlmKHdiLkN1c3Rwcm9wcykgby5wdXNoKHhsbWxfd3JpdGVfY3VzdHByb3BzKHdiLlByb3BzLCB3Yi5DdXN0cHJvcHMsIG9wdHMpKTtcblx0cmV0dXJuIG8uam9pbihcIlwiKTtcbn1cbi8qIFRPRE8gKi9cbmZ1bmN0aW9uIHdyaXRlX3diX3hsbWwoKSB7XG5cdC8qIE9mZmljZURvY3VtZW50U2V0dGluZ3MgKi9cblx0LyogRXhjZWxXb3JrYm9vayAqL1xuXHRyZXR1cm4gXCJcIjtcbn1cbi8qIFRPRE8gKi9cbmZ1bmN0aW9uIHdyaXRlX3N0eV94bG1sKHdiLCBvcHRzKSB7XG5cdC8qIFN0eWxlcyAqL1xuXHR2YXIgc3R5bGVzID0gWyc8U3R5bGUgc3M6SUQ9XCJEZWZhdWx0XCIgc3M6TmFtZT1cIk5vcm1hbFwiPjxOdW1iZXJGb3JtYXQvPjwvU3R5bGU+J107XG5cdG9wdHMuY2VsbFhmcy5mb3JFYWNoKGZ1bmN0aW9uKHhmLCBpZCkge1xuXHRcdHZhciBwYXlsb2FkID0gW107XG5cdFx0cGF5bG9hZC5wdXNoKHdyaXRleHRhZygnTnVtYmVyRm9ybWF0JywgbnVsbCwge1wic3M6Rm9ybWF0XCI6IGVzY2FwZXhtbChTU0YuX3RhYmxlW3hmLm51bUZtdElkXSl9KSk7XG5cblx0XHR2YXIgbyA9IHtcInNzOklEXCI6IFwic1wiICsgKDIxK2lkKX07XG5cdFx0c3R5bGVzLnB1c2god3JpdGV4dGFnKCdTdHlsZScsIHBheWxvYWQuam9pbihcIlwiKSwgbykpO1xuXHR9KTtcblx0cmV0dXJuIHdyaXRleHRhZyhcIlN0eWxlc1wiLCBzdHlsZXMuam9pbihcIlwiKSk7XG59XG5mdW5jdGlvbiB3cml0ZV9uYW1lX3hsbWwobikgeyByZXR1cm4gd3JpdGV4dGFnKFwiTmFtZWRSYW5nZVwiLCBudWxsLCB7XCJzczpOYW1lXCI6IG4uTmFtZSwgXCJzczpSZWZlcnNUb1wiOlwiPVwiICsgYTFfdG9fcmMobi5SZWYsIHtyOjAsYzowfSl9KTsgfVxuZnVuY3Rpb24gd3JpdGVfbmFtZXNfeGxtbCh3Yikge1xuXHRpZighKCh3Ynx8e30pLldvcmtib29rfHx7fSkuTmFtZXMpIHJldHVybiBcIlwiO1xudmFyIG5hbWVzID0gd2IuV29ya2Jvb2suTmFtZXM7XG5cdHZhciBvdXQgPSBbXTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgKytpKSB7XG5cdFx0dmFyIG4gPSBuYW1lc1tpXTtcblx0XHRpZihuLlNoZWV0ICE9IG51bGwpIGNvbnRpbnVlO1xuXHRcdGlmKG4uTmFtZS5tYXRjaCgvXl94bGZuXFwuLykpIGNvbnRpbnVlO1xuXHRcdG91dC5wdXNoKHdyaXRlX25hbWVfeGxtbChuKSk7XG5cdH1cblx0cmV0dXJuIHdyaXRleHRhZyhcIk5hbWVzXCIsIG91dC5qb2luKFwiXCIpKTtcbn1cbmZ1bmN0aW9uIHdyaXRlX3dzX3hsbWxfbmFtZXMod3MsIG9wdHMsIGlkeCwgd2IpIHtcblx0aWYoIXdzKSByZXR1cm4gXCJcIjtcblx0aWYoISgod2J8fHt9KS5Xb3JrYm9va3x8e30pLk5hbWVzKSByZXR1cm4gXCJcIjtcbnZhciBuYW1lcyA9IHdiLldvcmtib29rLk5hbWVzO1xuXHR2YXIgb3V0ID0gW107XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7ICsraSkge1xuXHRcdHZhciBuID0gbmFtZXNbaV07XG5cdFx0aWYobi5TaGVldCAhPSBpZHgpIGNvbnRpbnVlO1xuXHRcdC8qc3dpdGNoKG4uTmFtZSkge1xuXHRcdFx0Y2FzZSBcIl9cIjogY29udGludWU7XG5cdFx0fSovXG5cdFx0aWYobi5OYW1lLm1hdGNoKC9eX3hsZm5cXC4vKSkgY29udGludWU7XG5cdFx0b3V0LnB1c2god3JpdGVfbmFtZV94bG1sKG4pKTtcblx0fVxuXHRyZXR1cm4gb3V0LmpvaW4oXCJcIik7XG59XG4vKiBXb3Jrc2hlZXRPcHRpb25zICovXG5mdW5jdGlvbiB3cml0ZV93c194bG1sX3dzb3B0cyh3cywgb3B0cywgaWR4LCB3Yikge1xuXHRpZighd3MpIHJldHVybiBcIlwiO1xuXHR2YXIgbyA9IFtdO1xuXHQvKiBOT1RFOiBzcGVjIHRlY2huaWNhbGx5IGFsbG93cyBhbnkgb3JkZXIsIGJ1dCBzdGljayB3aXRoIGltcGxpZWQgb3JkZXIgKi9cblxuXHQvKiBGaXRUb1BhZ2UgKi9cblx0LyogRG9Ob3REaXNwbGF5Q29sSGVhZGVycyAqL1xuXHQvKiBEb05vdERpc3BsYXlSb3dIZWFkZXJzICovXG5cdC8qIFZpZXdhYmxlUmFuZ2UgKi9cblx0LyogU2VsZWN0aW9uICovXG5cdC8qIEdyaWRsaW5lQ29sb3IgKi9cblx0LyogTmFtZSAqL1xuXHQvKiBFeGNlbFdvcmtzaGVldFR5cGUgKi9cblx0LyogSW50bE1hY3JvICovXG5cdC8qIFVuc3luY2VkICovXG5cdC8qIFNlbGVjdGVkICovXG5cdC8qIENvZGVOYW1lICovXG5cblx0aWYod3NbJyFtYXJnaW5zJ10pIHtcblx0XHRvLnB1c2goXCI8UGFnZVNldHVwPlwiKTtcblx0XHRpZih3c1snIW1hcmdpbnMnXS5oZWFkZXIpIG8ucHVzaCh3cml0ZXh0YWcoXCJIZWFkZXJcIiwgbnVsbCwgeyd4Ok1hcmdpbic6d3NbJyFtYXJnaW5zJ10uaGVhZGVyfSkpO1xuXHRcdGlmKHdzWychbWFyZ2lucyddLmZvb3Rlcikgby5wdXNoKHdyaXRleHRhZyhcIkZvb3RlclwiLCBudWxsLCB7J3g6TWFyZ2luJzp3c1snIW1hcmdpbnMnXS5mb290ZXJ9KSk7XG5cdFx0by5wdXNoKHdyaXRleHRhZyhcIlBhZ2VNYXJnaW5zXCIsIG51bGwsIHtcblx0XHRcdCd4OkJvdHRvbSc6IHdzWychbWFyZ2lucyddLmJvdHRvbSB8fCBcIjAuNzVcIixcblx0XHRcdCd4OkxlZnQnOiB3c1snIW1hcmdpbnMnXS5sZWZ0IHx8IFwiMC43XCIsXG5cdFx0XHQneDpSaWdodCc6IHdzWychbWFyZ2lucyddLnJpZ2h0IHx8IFwiMC43XCIsXG5cdFx0XHQneDpUb3AnOiB3c1snIW1hcmdpbnMnXS50b3AgfHwgXCIwLjc1XCJcblx0XHR9KSk7XG5cdFx0by5wdXNoKFwiPC9QYWdlU2V0dXA+XCIpO1xuXHR9XG5cblx0LyogUGFnZVNldHVwICovXG5cdC8qIERpc3BsYXlQYWdlQnJlYWsgKi9cblx0LyogVHJhbnNpdGlvbkV4cHJlc3Npb25FdmFsdWF0aW9uICovXG5cdC8qIFRyYW5zaXRpb25Gb3JtdWxhRW50cnkgKi9cblx0LyogUHJpbnQgKi9cblx0LyogWm9vbSAqL1xuXHQvKiBQYWdlTGF5b3V0Wm9vbSAqL1xuXHQvKiBQYWdlQnJlYWtab29tICovXG5cdC8qIFNob3dQYWdlQnJlYWtab29tICovXG5cdC8qIERlZmF1bHRSb3dIZWlnaHQgKi9cblx0LyogRGVmYXVsdENvbHVtbldpZHRoICovXG5cdC8qIFN0YW5kYXJkV2lkdGggKi9cblxuXHRpZih3YiAmJiB3Yi5Xb3JrYm9vayAmJiB3Yi5Xb3JrYm9vay5TaGVldHMgJiYgd2IuV29ya2Jvb2suU2hlZXRzW2lkeF0pIHtcblx0XHQvKiBWaXNpYmxlICovXG5cdFx0aWYod2IuV29ya2Jvb2suU2hlZXRzW2lkeF0uSGlkZGVuKSBvLnB1c2god3JpdGV4dGFnKFwiVmlzaWJsZVwiLCAod2IuV29ya2Jvb2suU2hlZXRzW2lkeF0uSGlkZGVuID09IDEgPyBcIlNoZWV0SGlkZGVuXCIgOiBcIlNoZWV0VmVyeUhpZGRlblwiKSwge30pKTtcblx0XHRlbHNlIHtcblx0XHRcdC8qIFNlbGVjdGVkICovXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgaWR4OyArK2kpIGlmKHdiLldvcmtib29rLlNoZWV0c1tpXSAmJiAhd2IuV29ya2Jvb2suU2hlZXRzW2ldLkhpZGRlbikgYnJlYWs7XG5cdFx0XHRpZihpID09IGlkeCkgby5wdXNoKFwiPFNlbGVjdGVkLz5cIik7XG5cdFx0fVxuXHR9XG5cblx0LyogTGVmdENvbHVtblZpc2libGUgKi9cblxuXHRpZigoKCgod2J8fHt9KS5Xb3JrYm9va3x8e30pLlZpZXdzfHxbXSlbMF18fHt9KS5SVEwpIG8ucHVzaChcIjxEaXNwbGF5UmlnaHRUb0xlZnQvPlwiKTtcblxuXHQvKiBHcmlkbGluZUNvbG9ySW5kZXggKi9cblx0LyogRGlzcGxheUZvcm11bGFzICovXG5cdC8qIERvTm90RGlzcGxheUdyaWRsaW5lcyAqL1xuXHQvKiBEb05vdERpc3BsYXlIZWFkaW5ncyAqL1xuXHQvKiBEb05vdERpc3BsYXlPdXRsaW5lICovXG5cdC8qIEFwcGx5QXV0b21hdGljT3V0bGluZVN0eWxlcyAqL1xuXHQvKiBOb1N1bW1hcnlSb3dzQmVsb3dEZXRhaWwgKi9cblx0LyogTm9TdW1tYXJ5Q29sdW1uc1JpZ2h0RGV0YWlsICovXG5cdC8qIERvTm90RGlzcGxheVplcm9zICovXG5cdC8qIEFjdGl2ZVJvdyAqL1xuXHQvKiBBY3RpdmVDb2x1bW4gKi9cblx0LyogRmlsdGVyT24gKi9cblx0LyogUmFuZ2VTZWxlY3Rpb24gKi9cblx0LyogVG9wUm93VmlzaWJsZSAqL1xuXHQvKiBUb3BSb3dCb3R0b21QYW5lICovXG5cdC8qIExlZnRDb2x1bW5SaWdodFBhbmUgKi9cblx0LyogQWN0aXZlUGFuZSAqL1xuXHQvKiBTcGxpdEhvcml6b250YWwgKi9cblx0LyogU3BsaXRWZXJ0aWNhbCAqL1xuXHQvKiBGcmVlemVQYW5lcyAqL1xuXHQvKiBGcm96ZW5Ob1NwbGl0ICovXG5cdC8qIFRhYkNvbG9ySW5kZXggKi9cblx0LyogUGFuZXMgKi9cblxuXHQvKiBOT1RFOiBQYXNzd29yZCBub3Qgc3VwcG9ydGVkIGluIFhMTUwgRm9ybWF0ICovXG5cdGlmKHdzWychcHJvdGVjdCddKSB7XG5cdFx0by5wdXNoKHdyaXRldGFnKFwiUHJvdGVjdENvbnRlbnRzXCIsIFwiVHJ1ZVwiKSk7XG5cdFx0aWYod3NbJyFwcm90ZWN0J10ub2JqZWN0cykgby5wdXNoKHdyaXRldGFnKFwiUHJvdGVjdE9iamVjdHNcIiwgXCJUcnVlXCIpKTtcblx0XHRpZih3c1snIXByb3RlY3QnXS5zY2VuYXJpb3MpIG8ucHVzaCh3cml0ZXRhZyhcIlByb3RlY3RTY2VuYXJpb3NcIiwgXCJUcnVlXCIpKTtcblx0XHRpZih3c1snIXByb3RlY3QnXS5zZWxlY3RMb2NrZWRDZWxscyAhPSBudWxsICYmICF3c1snIXByb3RlY3QnXS5zZWxlY3RMb2NrZWRDZWxscykgby5wdXNoKHdyaXRldGFnKFwiRW5hYmxlU2VsZWN0aW9uXCIsIFwiTm9TZWxlY3Rpb25cIikpO1xuXHRcdGVsc2UgaWYod3NbJyFwcm90ZWN0J10uc2VsZWN0VW5sb2NrZWRDZWxscyAhPSBudWxsICYmICF3c1snIXByb3RlY3QnXS5zZWxlY3RVbmxvY2tlZENlbGxzKSBvLnB1c2god3JpdGV0YWcoXCJFbmFibGVTZWxlY3Rpb25cIiwgXCJVbmxvY2tlZENlbGxzXCIpKTtcblx0W1xuXHRcdFsgXCJmb3JtYXRDZWxsc1wiLCBcIkFsbG93Rm9ybWF0Q2VsbHNcIiBdLFxuXHRcdFsgXCJmb3JtYXRDb2x1bW5zXCIsIFwiQWxsb3dTaXplQ29sc1wiIF0sXG5cdFx0WyBcImZvcm1hdFJvd3NcIiwgXCJBbGxvd1NpemVSb3dzXCIgXSxcblx0XHRbIFwiaW5zZXJ0Q29sdW1uc1wiLCBcIkFsbG93SW5zZXJ0Q29sc1wiIF0sXG5cdFx0WyBcImluc2VydFJvd3NcIiwgXCJBbGxvd0luc2VydFJvd3NcIiBdLFxuXHRcdFsgXCJpbnNlcnRIeXBlcmxpbmtzXCIsIFwiQWxsb3dJbnNlcnRIeXBlcmxpbmtzXCIgXSxcblx0XHRbIFwiZGVsZXRlQ29sdW1uc1wiLCBcIkFsbG93RGVsZXRlQ29sc1wiIF0sXG5cdFx0WyBcImRlbGV0ZVJvd3NcIiwgXCJBbGxvd0RlbGV0ZVJvd3NcIiBdLFxuXHRcdFsgXCJzb3J0XCIsIFwiQWxsb3dTb3J0XCIgXSxcblx0XHRbIFwiYXV0b0ZpbHRlclwiLCBcIkFsbG93RmlsdGVyXCIgXSxcblx0XHRbIFwicGl2b3RUYWJsZXNcIiwgXCJBbGxvd1VzZVBpdm90VGFibGVzXCIgXVxuXHRdLmZvckVhY2goZnVuY3Rpb24oeCkgeyBpZih3c1snIXByb3RlY3QnXVt4WzBdXSkgby5wdXNoKFwiPFwiK3hbMV0rXCIvPlwiKTsgfSk7XG5cdH1cblxuXHRpZihvLmxlbmd0aCA9PSAwKSByZXR1cm4gXCJcIjtcblx0cmV0dXJuIHdyaXRleHRhZyhcIldvcmtzaGVldE9wdGlvbnNcIiwgby5qb2luKFwiXCIpLCB7eG1sbnM6WExNTE5TLnh9KTtcbn1cbmZ1bmN0aW9uIHdyaXRlX3dzX3hsbWxfY29tbWVudChjb21tZW50cykge1xuXHRyZXR1cm4gY29tbWVudHMubWFwKGZ1bmN0aW9uKGMpIHtcblx0XHQvLyBUT0RPOiBmb3JtYXR0ZWQgdGV4dFxuXHRcdHZhciB0ID0geGxtbF91bmZpeHN0cihjLnR8fFwiXCIpO1xuXHRcdHZhciBkID13cml0ZXh0YWcoXCJzczpEYXRhXCIsIHQsIHtcInhtbG5zXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMtaHRtbDQwXCJ9KTtcblx0XHRyZXR1cm4gd3JpdGV4dGFnKFwiQ29tbWVudFwiLCBkLCB7XCJzczpBdXRob3JcIjpjLmF9KTtcblx0fSkuam9pbihcIlwiKTtcbn1cbmZ1bmN0aW9uIHdyaXRlX3dzX3hsbWxfY2VsbChjZWxsLCByZWYsIHdzLCBvcHRzLCBpZHgsIHdiLCBhZGRyKXtcblx0aWYoIWNlbGwgfHwgKGNlbGwudiA9PSB1bmRlZmluZWQgJiYgY2VsbC5mID09IHVuZGVmaW5lZCkpIHJldHVybiBcIlwiO1xuXG5cdHZhciBhdHRyID0ge307XG5cdGlmKGNlbGwuZikgYXR0cltcInNzOkZvcm11bGFcIl0gPSBcIj1cIiArIGVzY2FwZXhtbChhMV90b19yYyhjZWxsLmYsIGFkZHIpKTtcblx0aWYoY2VsbC5GICYmIGNlbGwuRi5zbGljZSgwLCByZWYubGVuZ3RoKSA9PSByZWYpIHtcblx0XHR2YXIgZW5kID0gZGVjb2RlX2NlbGwoY2VsbC5GLnNsaWNlKHJlZi5sZW5ndGggKyAxKSk7XG5cdFx0YXR0cltcInNzOkFycmF5UmFuZ2VcIl0gPSBcIlJDOlJcIiArIChlbmQuciA9PSBhZGRyLnIgPyBcIlwiIDogXCJbXCIgKyAoZW5kLnIgLSBhZGRyLnIpICsgXCJdXCIpICsgXCJDXCIgKyAoZW5kLmMgPT0gYWRkci5jID8gXCJcIiA6IFwiW1wiICsgKGVuZC5jIC0gYWRkci5jKSArIFwiXVwiKTtcblx0fVxuXG5cdGlmKGNlbGwubCAmJiBjZWxsLmwuVGFyZ2V0KSB7XG5cdFx0YXR0cltcInNzOkhSZWZcIl0gPSBlc2NhcGV4bWwoY2VsbC5sLlRhcmdldCk7XG5cdFx0aWYoY2VsbC5sLlRvb2x0aXApIGF0dHJbXCJ4OkhSZWZTY3JlZW5UaXBcIl0gPSBlc2NhcGV4bWwoY2VsbC5sLlRvb2x0aXApO1xuXHR9XG5cblx0aWYod3NbJyFtZXJnZXMnXSkge1xuXHRcdHZhciBtYXJyID0gd3NbJyFtZXJnZXMnXTtcblx0XHRmb3IodmFyIG1pID0gMDsgbWkgIT0gbWFyci5sZW5ndGg7ICsrbWkpIHtcblx0XHRcdGlmKG1hcnJbbWldLnMuYyAhPSBhZGRyLmMgfHwgbWFyclttaV0ucy5yICE9IGFkZHIucikgY29udGludWU7XG5cdFx0XHRpZihtYXJyW21pXS5lLmMgPiBtYXJyW21pXS5zLmMpIGF0dHJbJ3NzOk1lcmdlQWNyb3NzJ10gPSBtYXJyW21pXS5lLmMgLSBtYXJyW21pXS5zLmM7XG5cdFx0XHRpZihtYXJyW21pXS5lLnIgPiBtYXJyW21pXS5zLnIpIGF0dHJbJ3NzOk1lcmdlRG93biddID0gbWFyclttaV0uZS5yIC0gbWFyclttaV0ucy5yO1xuXHRcdH1cblx0fVxuXG5cdHZhciB0ID0gXCJcIiwgcCA9IFwiXCI7XG5cdHN3aXRjaChjZWxsLnQpIHtcblx0XHRjYXNlICd6JzogaWYoIW9wdHMuc2hlZXRTdHVicykgcmV0dXJuIFwiXCI7IGJyZWFrO1xuXHRcdGNhc2UgJ24nOiB0ID0gJ051bWJlcic7IHAgPSBTdHJpbmcoY2VsbC52KTsgYnJlYWs7XG5cdFx0Y2FzZSAnYic6IHQgPSAnQm9vbGVhbic7IHAgPSAoY2VsbC52ID8gXCIxXCIgOiBcIjBcIik7IGJyZWFrO1xuXHRcdGNhc2UgJ2UnOiB0ID0gJ0Vycm9yJzsgcCA9IEJFcnJbY2VsbC52XTsgYnJlYWs7XG5cdFx0Y2FzZSAnZCc6IHQgPSAnRGF0ZVRpbWUnOyBwID0gbmV3IERhdGUoY2VsbC52KS50b0lTT1N0cmluZygpOyBpZihjZWxsLnogPT0gbnVsbCkgY2VsbC56ID0gY2VsbC56IHx8IFNTRi5fdGFibGVbMTRdOyBicmVhaztcblx0XHRjYXNlICdzJzogdCA9ICdTdHJpbmcnOyBwID0gZXNjYXBleGxtbChjZWxsLnZ8fFwiXCIpOyBicmVhaztcblx0fVxuXHQvKiBUT0RPOiBjZWxsIHN0eWxlICovXG5cdHZhciBvcyA9IGdldF9jZWxsX3N0eWxlKG9wdHMuY2VsbFhmcywgY2VsbCwgb3B0cyk7XG5cdGF0dHJbXCJzczpTdHlsZUlEXCJdID0gXCJzXCIgKyAoMjErb3MpO1xuXHRhdHRyW1wic3M6SW5kZXhcIl0gPSBhZGRyLmMgKyAxO1xuXHR2YXIgX3YgPSAoY2VsbC52ICE9IG51bGwgPyBwIDogXCJcIik7XG5cdHZhciBtID0gY2VsbC50ID09ICd6JyA/IFwiXCIgOiAoJzxEYXRhIHNzOlR5cGU9XCInICsgdCArICdcIj4nICsgX3YgKyAnPC9EYXRhPicpO1xuXG5cdGlmKChjZWxsLmN8fFtdKS5sZW5ndGggPiAwKSBtICs9IHdyaXRlX3dzX3hsbWxfY29tbWVudChjZWxsLmMpO1xuXG5cdHJldHVybiB3cml0ZXh0YWcoXCJDZWxsXCIsIG0sIGF0dHIpO1xufVxuZnVuY3Rpb24gd3JpdGVfd3NfeGxtbF9yb3coUiwgcm93KSB7XG5cdHZhciBvID0gJzxSb3cgc3M6SW5kZXg9XCInICsgKFIrMSkgKyAnXCInO1xuXHRpZihyb3cpIHtcblx0XHRpZihyb3cuaHB0ICYmICFyb3cuaHB4KSByb3cuaHB4ID0gcHQycHgocm93LmhwdCk7XG5cdFx0aWYocm93LmhweCkgbyArPSAnIHNzOkF1dG9GaXRIZWlnaHQ9XCIwXCIgc3M6SGVpZ2h0PVwiJyArIHJvdy5ocHggKyAnXCInO1xuXHRcdGlmKHJvdy5oaWRkZW4pIG8gKz0gJyBzczpIaWRkZW49XCIxXCInO1xuXHR9XG5cdHJldHVybiBvICsgJz4nO1xufVxuLyogVE9ETyAqL1xuZnVuY3Rpb24gd3JpdGVfd3NfeGxtbF90YWJsZSh3cywgb3B0cywgaWR4LCB3Yikge1xuXHRpZighd3NbJyFyZWYnXSkgcmV0dXJuIFwiXCI7XG5cdHZhciByYW5nZSA9IHNhZmVfZGVjb2RlX3JhbmdlKHdzWychcmVmJ10pO1xuXHR2YXIgbWFyciA9IHdzWychbWVyZ2VzJ10gfHwgW10sIG1pID0gMDtcblx0dmFyIG8gPSBbXTtcblx0aWYod3NbJyFjb2xzJ10pIHdzWychY29scyddLmZvckVhY2goZnVuY3Rpb24obiwgaSkge1xuXHRcdHByb2Nlc3NfY29sKG4pO1xuXHRcdHZhciB3ID0gISFuLndpZHRoO1xuXHRcdHZhciBwID0gY29sX29ial93KGksIG4pO1xuXHRcdHZhciBrID0ge1wic3M6SW5kZXhcIjppKzF9O1xuXHRcdGlmKHcpIGtbJ3NzOldpZHRoJ10gPSB3aWR0aDJweChwLndpZHRoKTtcblx0XHRpZihuLmhpZGRlbikga1snc3M6SGlkZGVuJ109XCIxXCI7XG5cdFx0by5wdXNoKHdyaXRleHRhZyhcIkNvbHVtblwiLG51bGwsaykpO1xuXHR9KTtcblx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheSh3cyk7XG5cdGZvcih2YXIgUiA9IHJhbmdlLnMucjsgUiA8PSByYW5nZS5lLnI7ICsrUikge1xuXHRcdHZhciByb3cgPSBbd3JpdGVfd3NfeGxtbF9yb3coUiwgKHdzWychcm93cyddfHxbXSlbUl0pXTtcblx0XHRmb3IodmFyIEMgPSByYW5nZS5zLmM7IEMgPD0gcmFuZ2UuZS5jOyArK0MpIHtcblx0XHRcdHZhciBza2lwID0gZmFsc2U7XG5cdFx0XHRmb3IobWkgPSAwOyBtaSAhPSBtYXJyLmxlbmd0aDsgKyttaSkge1xuXHRcdFx0XHRpZihtYXJyW21pXS5zLmMgPiBDKSBjb250aW51ZTtcblx0XHRcdFx0aWYobWFyclttaV0ucy5yID4gUikgY29udGludWU7XG5cdFx0XHRcdGlmKG1hcnJbbWldLmUuYyA8IEMpIGNvbnRpbnVlO1xuXHRcdFx0XHRpZihtYXJyW21pXS5lLnIgPCBSKSBjb250aW51ZTtcblx0XHRcdFx0aWYobWFyclttaV0ucy5jICE9IEMgfHwgbWFyclttaV0ucy5yICE9IFIpIHNraXAgPSB0cnVlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmKHNraXApIGNvbnRpbnVlO1xuXHRcdFx0dmFyIGFkZHIgPSB7cjpSLGM6Q307XG5cdFx0XHR2YXIgcmVmID0gZW5jb2RlX2NlbGwoYWRkciksIGNlbGwgPSBkZW5zZSA/ICh3c1tSXXx8W10pW0NdIDogd3NbcmVmXTtcblx0XHRcdHJvdy5wdXNoKHdyaXRlX3dzX3hsbWxfY2VsbChjZWxsLCByZWYsIHdzLCBvcHRzLCBpZHgsIHdiLCBhZGRyKSk7XG5cdFx0fVxuXHRcdHJvdy5wdXNoKFwiPC9Sb3c+XCIpO1xuXHRcdGlmKHJvdy5sZW5ndGggPiAyKSBvLnB1c2gocm93LmpvaW4oXCJcIikpO1xuXHR9XG5cdHJldHVybiBvLmpvaW4oXCJcIik7XG59XG5mdW5jdGlvbiB3cml0ZV93c194bG1sKGlkeCwgb3B0cywgd2IpIHtcblx0dmFyIG8gPSBbXTtcblx0dmFyIHMgPSB3Yi5TaGVldE5hbWVzW2lkeF07XG5cdHZhciB3cyA9IHdiLlNoZWV0c1tzXTtcblxuXHR2YXIgdCA9IHdzID8gd3JpdGVfd3NfeGxtbF9uYW1lcyh3cywgb3B0cywgaWR4LCB3YikgOiBcIlwiO1xuXHRpZih0Lmxlbmd0aCA+IDApIG8ucHVzaChcIjxOYW1lcz5cIiArIHQgKyBcIjwvTmFtZXM+XCIpO1xuXG5cdC8qIFRhYmxlICovXG5cdHQgPSB3cyA/IHdyaXRlX3dzX3hsbWxfdGFibGUod3MsIG9wdHMsIGlkeCwgd2IpIDogXCJcIjtcblx0aWYodC5sZW5ndGggPiAwKSBvLnB1c2goXCI8VGFibGU+XCIgKyB0ICsgXCI8L1RhYmxlPlwiKTtcblxuXHQvKiBXb3Jrc2hlZXRPcHRpb25zICovXG5cdG8ucHVzaCh3cml0ZV93c194bG1sX3dzb3B0cyh3cywgb3B0cywgaWR4LCB3YikpO1xuXG5cdHJldHVybiBvLmpvaW4oXCJcIik7XG59XG5mdW5jdGlvbiB3cml0ZV94bG1sKHdiLCBvcHRzKSB7XG5cdGlmKCFvcHRzKSBvcHRzID0ge307XG5cdGlmKCF3Yi5TU0YpIHdiLlNTRiA9IFNTRi5nZXRfdGFibGUoKTtcblx0aWYod2IuU1NGKSB7XG5cdFx0bWFrZV9zc2YoU1NGKTsgU1NGLmxvYWRfdGFibGUod2IuU1NGKTtcblx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdG9wdHMucmV2c3NmID0gZXZlcnRfbnVtKHdiLlNTRik7IG9wdHMucmV2c3NmW3diLlNTRls2NTUzNV1dID0gMDtcblx0XHRvcHRzLnNzZiA9IHdiLlNTRjtcblx0XHRvcHRzLmNlbGxYZnMgPSBbXTtcblx0XHRnZXRfY2VsbF9zdHlsZShvcHRzLmNlbGxYZnMsIHt9LCB7cmV2c3NmOntcIkdlbmVyYWxcIjowfX0pO1xuXHR9XG5cdHZhciBkID0gW107XG5cdGQucHVzaCh3cml0ZV9wcm9wc194bG1sKHdiLCBvcHRzKSk7XG5cdGQucHVzaCh3cml0ZV93Yl94bG1sKHdiLCBvcHRzKSk7XG5cdGQucHVzaChcIlwiKTtcblx0ZC5wdXNoKFwiXCIpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgd2IuU2hlZXROYW1lcy5sZW5ndGg7ICsraSlcblx0XHRkLnB1c2god3JpdGV4dGFnKFwiV29ya3NoZWV0XCIsIHdyaXRlX3dzX3hsbWwoaSwgb3B0cywgd2IpLCB7XCJzczpOYW1lXCI6ZXNjYXBleG1sKHdiLlNoZWV0TmFtZXNbaV0pfSkpO1xuXHRkWzJdID0gd3JpdGVfc3R5X3hsbWwod2IsIG9wdHMpO1xuXHRkWzNdID0gd3JpdGVfbmFtZXNfeGxtbCh3Yiwgb3B0cyk7XG5cdHJldHVybiBYTUxfSEVBREVSICsgd3JpdGV4dGFnKFwiV29ya2Jvb2tcIiwgZC5qb2luKFwiXCIpLCB7XG5cdFx0J3htbG5zJzogICAgICBYTE1MTlMuc3MsXG5cdFx0J3htbG5zOm8nOiAgICBYTE1MTlMubyxcblx0XHQneG1sbnM6eCc6ICAgIFhMTUxOUy54LFxuXHRcdCd4bWxuczpzcyc6ICAgWExNTE5TLnNzLFxuXHRcdCd4bWxuczpkdCc6ICAgWExNTE5TLmR0LFxuXHRcdCd4bWxuczpodG1sJzogWExNTE5TLmh0bWxcblx0fSk7XG59XG4vKiBbTVMtT0xFRFNdIDIuMy44IENvbXBPYmpTdHJlYW0gKi9cbmZ1bmN0aW9uIHBhcnNlX2NvbXBvYmoob2JqKSB7XG5cdHZhciB2ID0ge307XG5cdHZhciBvID0gb2JqLmNvbnRlbnQ7XG4vKiBbTVMtT0xFRFNdIDIuMy43IENvbXBPYmpIZWFkZXIgLS0gQWxsIGZpZWxkcyBNVVNUIGJlIGlnbm9yZWQgKi9cblx0by5sID0gMjg7XG5cblx0di5BbnNpVXNlclR5cGUgPSBvLnJlYWRfc2hpZnQoMCwgXCJscHN0ci1hbnNpXCIpO1xuXHR2LkFuc2lDbGlwYm9hcmRGb3JtYXQgPSBwYXJzZV9DbGlwYm9hcmRGb3JtYXRPckFuc2lTdHJpbmcobyk7XG5cblx0aWYoby5sZW5ndGggLSBvLmwgPD0gNCkgcmV0dXJuIHY7XG5cblx0dmFyIG0gPSBvLnJlYWRfc2hpZnQoNCk7XG5cdGlmKG0gPT0gMCB8fCBtID4gNDApIHJldHVybiB2O1xuXHRvLmwtPTQ7IHYuUmVzZXJ2ZWQxID0gby5yZWFkX3NoaWZ0KDAsIFwibHBzdHItYW5zaVwiKTtcblxuXHRpZihvLmxlbmd0aCAtIG8ubCA8PSA0KSByZXR1cm4gdjtcblx0bSA9IG8ucmVhZF9zaGlmdCg0KTtcblx0aWYobSAhPT0gMHg3MWIyMzlmNCkgcmV0dXJuIHY7XG5cdHYuVW5pY29kZUNsaXBib2FyZEZvcm1hdCA9IHBhcnNlX0NsaXBib2FyZEZvcm1hdE9yVW5pY29kZVN0cmluZyhvKTtcblxuXHRtID0gby5yZWFkX3NoaWZ0KDQpO1xuXHRpZihtID09IDAgfHwgbSA+IDQwKSByZXR1cm4gdjtcblx0by5sLT00OyB2LlJlc2VydmVkMiA9IG8ucmVhZF9zaGlmdCgwLCBcImxwd3N0clwiKTtcbn1cblxuLypcblx0Q29udGludWUgbG9naWMgZm9yOlxuXHQtIDIuNC41OCBDb250aW51ZVxuXHQtIDIuNC41OSBDb250aW51ZUJpZ05hbWVcblx0LSAyLjQuNjAgQ29udGludWVGcnRcblx0LSAyLjQuNjEgQ29udGludWVGcnQxMVxuXHQtIDIuNC42MiBDb250aW51ZUZydDEyXG4qL1xuZnVuY3Rpb24gc2x1cnAoUiwgYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciBsID0gbGVuZ3RoO1xuXHR2YXIgYnVmcyA9IFtdO1xuXHR2YXIgZCA9IGJsb2Iuc2xpY2UoYmxvYi5sLGJsb2IubCtsKTtcblx0aWYob3B0cyAmJiBvcHRzLmVuYyAmJiBvcHRzLmVuYy5pbnNpdHUgJiYgZC5sZW5ndGggPiAwKSBzd2l0Y2goUi5uKSB7XG5cdGNhc2UgJ0JPRic6IGNhc2UgJ0ZpbGVQYXNzJzogY2FzZSAnRmlsZUxvY2snOiBjYXNlICdJbnRlcmZhY2VIZHInOiBjYXNlICdSUkRJbmZvJzogY2FzZSAnUlJESGVhZCc6IGNhc2UgJ1VzckV4Y2wnOiBjYXNlICdFT0YnOlxuXHRcdGJyZWFrO1xuXHRjYXNlICdCb3VuZFNoZWV0OCc6XG5cdFx0YnJlYWs7XG5cdGRlZmF1bHQ6XG5cdFx0b3B0cy5lbmMuaW5zaXR1KGQpO1xuXHR9XG5cdGJ1ZnMucHVzaChkKTtcblx0YmxvYi5sICs9IGw7XG5cdHZhciBuZXh0ID0gKFhMU1JlY29yZEVudW1bX19yZWFkVUludDE2TEUoYmxvYixibG9iLmwpXSk7XG5cdHZhciBzdGFydCA9IDA7XG5cdHdoaWxlKG5leHQgIT0gbnVsbCAmJiBuZXh0Lm4uc2xpY2UoMCw4KSA9PT0gJ0NvbnRpbnVlJykge1xuXHRcdGwgPSBfX3JlYWRVSW50MTZMRShibG9iLGJsb2IubCsyKTtcblx0XHRzdGFydCA9IGJsb2IubCArIDQ7XG5cdFx0aWYobmV4dC5uID09ICdDb250aW51ZUZydCcpIHN0YXJ0ICs9IDQ7XG5cdFx0ZWxzZSBpZihuZXh0Lm4uc2xpY2UoMCwxMSkgPT0gJ0NvbnRpbnVlRnJ0Jykge1xuXHRcdFx0c3RhcnQgKz0gMTI7XG5cdFx0fVxuXHRcdGQgPSBibG9iLnNsaWNlKHN0YXJ0LGJsb2IubCs0K2wpO1xuXHRcdGJ1ZnMucHVzaChkKTtcblx0XHRibG9iLmwgKz0gNCtsO1xuXHRcdG5leHQgPSAoWExTUmVjb3JkRW51bVtfX3JlYWRVSW50MTZMRShibG9iLCBibG9iLmwpXSk7XG5cdH1cblx0dmFyIGIgPSAoYmNvbmNhdChidWZzKSk7XG5cdHByZXBfYmxvYihiLCAwKTtcblx0dmFyIGxsID0gMDsgYi5sZW5zID0gW107XG5cdGZvcih2YXIgaiA9IDA7IGogPCBidWZzLmxlbmd0aDsgKytqKSB7IGIubGVucy5wdXNoKGxsKTsgbGwgKz0gYnVmc1tqXS5sZW5ndGg7IH1cblx0aWYoYi5sZW5ndGggPCBsZW5ndGgpIHRocm93IFwiWExTIFJlY29yZCBcIiArIChSICYmIFIubiB8fCBcIj8/XCIpICsgXCIgVHJ1bmNhdGVkOiBcIiArIGIubGVuZ3RoICsgXCIgPCBcIiArIGxlbmd0aDtcblx0cmV0dXJuIFIuZihiLCBiLmxlbmd0aCwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIHNhZmVfZm9ybWF0X3hmKHAsIG9wdHMsIGRhdGUxOTA0KSB7XG5cdGlmKHAudCA9PT0gJ3onKSByZXR1cm47XG5cdGlmKCFwLlhGKSByZXR1cm47XG5cdHZhciBmbXRpZCA9IDA7XG5cdHRyeSB7XG5cdFx0Zm10aWQgPSBwLnogfHwgcC5YRi5udW1GbXRJZCB8fCAwO1xuXHRcdGlmKG9wdHMuY2VsbE5GKSBwLnogPSBTU0YuX3RhYmxlW2ZtdGlkXTtcblx0fSBjYXRjaChlKSB7IGlmKG9wdHMuV1RGKSB0aHJvdyBlOyB9XG5cdGlmKCFvcHRzIHx8IG9wdHMuY2VsbFRleHQgIT09IGZhbHNlKSB0cnkge1xuXHRcdGlmKHAudCA9PT0gJ2UnKSB7IHAudyA9IHAudyB8fCBCRXJyW3Audl07IH1cblx0XHRlbHNlIGlmKGZtdGlkID09PSAwIHx8IGZtdGlkID09IFwiR2VuZXJhbFwiKSB7XG5cdFx0XHRpZihwLnQgPT09ICduJykge1xuXHRcdFx0XHRpZigocC52fDApID09PSBwLnYpIHAudyA9IFNTRi5fZ2VuZXJhbF9pbnQocC52KTtcblx0XHRcdFx0ZWxzZSBwLncgPSBTU0YuX2dlbmVyYWxfbnVtKHAudik7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHAudyA9IFNTRi5fZ2VuZXJhbChwLnYpO1xuXHRcdH1cblx0XHRlbHNlIHAudyA9IFNTRi5mb3JtYXQoZm10aWQscC52LCB7ZGF0ZTE5MDQ6ISFkYXRlMTkwNCwgZGF0ZU5GOiBvcHRzICYmIG9wdHMuZGF0ZU5GfSk7XG5cdH0gY2F0Y2goZSkgeyBpZihvcHRzLldURikgdGhyb3cgZTsgfVxuXHRpZihvcHRzLmNlbGxEYXRlcyAmJiBmbXRpZCAmJiBwLnQgPT0gJ24nICYmIFNTRi5pc19kYXRlKFNTRi5fdGFibGVbZm10aWRdIHx8IFN0cmluZyhmbXRpZCkpKSB7XG5cdFx0dmFyIF9kID0gU1NGLnBhcnNlX2RhdGVfY29kZShwLnYpOyBpZihfZCkgeyBwLnQgPSAnZCc7IHAudiA9IG5ldyBEYXRlKF9kLnksIF9kLm0tMSxfZC5kLF9kLkgsX2QuTSxfZC5TLF9kLnUpOyB9XG5cdH1cbn1cblxuZnVuY3Rpb24gbWFrZV9jZWxsKHZhbCwgaXhmZSwgdCkge1xuXHRyZXR1cm4gKHt2OnZhbCwgaXhmZTppeGZlLCB0OnR9KTtcbn1cblxuLy8gMi4zLjJcbmZ1bmN0aW9uIHBhcnNlX3dvcmtib29rKGJsb2IsIG9wdGlvbnMpIHtcblx0dmFyIHdiID0gKHtvcHRzOnt9fSk7XG5cdHZhciBTaGVldHMgPSB7fTtcblx0aWYoREVOU0UgIT0gbnVsbCAmJiBvcHRpb25zLmRlbnNlID09IG51bGwpIG9wdGlvbnMuZGVuc2UgPSBERU5TRTtcblx0dmFyIG91dCA9ICgob3B0aW9ucy5kZW5zZSA/IFtdIDoge30pKTtcblx0dmFyIERpcmVjdG9yeSA9IHt9O1xuXHR2YXIgcmFuZ2UgPSAoe30pO1xuXHR2YXIgbGFzdF9mb3JtdWxhID0gbnVsbDtcblx0dmFyIHNzdCA9IChbXSk7XG5cdHZhciBjdXJfc2hlZXQgPSBcIlwiO1xuXHR2YXIgUHJlYW1ibGUgPSB7fTtcblx0dmFyIGxhc3RjZWxsLCBsYXN0X2NlbGwgPSBcIlwiLCBjYywgY21udCwgcm5nQywgcm5nUjtcblx0dmFyIHNoYXJlZGYgPSB7fTtcblx0dmFyIGFycmF5ZiA9IFtdO1xuXHR2YXIgdGVtcF92YWw7XG5cdHZhciBjb3VudHJ5O1xuXHR2YXIgWEZzID0gW107IC8qIFhGIHJlY29yZHMgKi9cblx0dmFyIHBhbGV0dGUgPSBbXTtcblx0dmFyIFdvcmtib29rID0gKHsgU2hlZXRzOltdLCBXQlByb3BzOntkYXRlMTkwNDpmYWxzZX0sIFZpZXdzOlt7fV0gfSksIHdzcHJvcHMgPSB7fTtcblx0dmFyIGdldF9yZ2IgPSBmdW5jdGlvbiBnZXRyZ2IoaWN2KSB7XG5cdFx0aWYoaWN2IDwgOCkgcmV0dXJuIFhMU0ljdltpY3ZdO1xuXHRcdGlmKGljdiA8IDY0KSByZXR1cm4gcGFsZXR0ZVtpY3YtOF0gfHwgWExTSWN2W2ljdl07XG5cdFx0cmV0dXJuIFhMU0ljdltpY3ZdO1xuXHR9O1xuXHR2YXIgcHJvY2Vzc19jZWxsX3N0eWxlID0gZnVuY3Rpb24gcGNzKGNlbGwsIGxpbmUsIG9wdGlvbnMpIHtcblx0XHR2YXIgeGZkID0gbGluZS5YRi5kYXRhO1xuXHRcdGlmKCF4ZmQgfHwgIXhmZC5wYXR0ZXJuVHlwZSB8fCAhb3B0aW9ucyB8fCAhb3B0aW9ucy5jZWxsU3R5bGVzKSByZXR1cm47XG5cdFx0bGluZS5zID0gKHt9KTtcblx0XHRsaW5lLnMucGF0dGVyblR5cGUgPSB4ZmQucGF0dGVyblR5cGU7XG5cdFx0dmFyIHQ7XG5cdFx0aWYoKHQgPSByZ2IySGV4KGdldF9yZ2IoeGZkLmljdkZvcmUpKSkpIHsgbGluZS5zLmZnQ29sb3IgPSB7cmdiOnR9OyB9XG5cdFx0aWYoKHQgPSByZ2IySGV4KGdldF9yZ2IoeGZkLmljdkJhY2spKSkpIHsgbGluZS5zLmJnQ29sb3IgPSB7cmdiOnR9OyB9XG5cdH07XG5cdHZhciBhZGRjZWxsID0gZnVuY3Rpb24gYWRkY2VsbChjZWxsLCBsaW5lLCBvcHRpb25zKSB7XG5cdFx0aWYoZmlsZV9kZXB0aCA+IDEpIHJldHVybjtcblx0XHRpZihvcHRpb25zLnNoZWV0Um93cyAmJiBjZWxsLnIgPj0gb3B0aW9ucy5zaGVldFJvd3MpIHJldHVybjtcblx0XHRpZihvcHRpb25zLmNlbGxTdHlsZXMgJiYgbGluZS5YRiAmJiBsaW5lLlhGLmRhdGEpIHByb2Nlc3NfY2VsbF9zdHlsZShjZWxsLCBsaW5lLCBvcHRpb25zKTtcblx0XHRkZWxldGUgbGluZS5peGZlOyBkZWxldGUgbGluZS5YRjtcblx0XHRsYXN0Y2VsbCA9IGNlbGw7XG5cdFx0bGFzdF9jZWxsID0gZW5jb2RlX2NlbGwoY2VsbCk7XG5cdFx0aWYoIXJhbmdlIHx8ICFyYW5nZS5zIHx8ICFyYW5nZS5lKSByYW5nZSA9IHtzOntyOjAsYzowfSxlOntyOjAsYzowfX07XG5cdFx0aWYoY2VsbC5yIDwgcmFuZ2Uucy5yKSByYW5nZS5zLnIgPSBjZWxsLnI7XG5cdFx0aWYoY2VsbC5jIDwgcmFuZ2Uucy5jKSByYW5nZS5zLmMgPSBjZWxsLmM7XG5cdFx0aWYoY2VsbC5yICsgMSA+IHJhbmdlLmUucikgcmFuZ2UuZS5yID0gY2VsbC5yICsgMTtcblx0XHRpZihjZWxsLmMgKyAxID4gcmFuZ2UuZS5jKSByYW5nZS5lLmMgPSBjZWxsLmMgKyAxO1xuXHRcdGlmKG9wdGlvbnMuY2VsbEZvcm11bGEgJiYgbGluZS5mKSB7XG5cdFx0XHRmb3IodmFyIGFmaSA9IDA7IGFmaSA8IGFycmF5Zi5sZW5ndGg7ICsrYWZpKSB7XG5cdFx0XHRcdGlmKGFycmF5ZlthZmldWzBdLnMuYyA+IGNlbGwuYyB8fCBhcnJheWZbYWZpXVswXS5zLnIgPiBjZWxsLnIpIGNvbnRpbnVlO1xuXHRcdFx0XHRpZihhcnJheWZbYWZpXVswXS5lLmMgPCBjZWxsLmMgfHwgYXJyYXlmW2FmaV1bMF0uZS5yIDwgY2VsbC5yKSBjb250aW51ZTtcblx0XHRcdFx0bGluZS5GID0gZW5jb2RlX3JhbmdlKGFycmF5ZlthZmldWzBdKTtcblx0XHRcdFx0aWYoYXJyYXlmW2FmaV1bMF0ucy5jICE9IGNlbGwuYyB8fCBhcnJheWZbYWZpXVswXS5zLnIgIT0gY2VsbC5yKSBkZWxldGUgbGluZS5mO1xuXHRcdFx0XHRpZihsaW5lLmYpIGxpbmUuZiA9IFwiXCIgKyBzdHJpbmdpZnlfZm9ybXVsYShhcnJheWZbYWZpXVsxXSwgcmFuZ2UsIGNlbGwsIHN1cGJvb2tzLCBvcHRzKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHtcblx0XHRcdGlmKG9wdGlvbnMuZGVuc2UpIHtcblx0XHRcdFx0aWYoIW91dFtjZWxsLnJdKSBvdXRbY2VsbC5yXSA9IFtdO1xuXHRcdFx0XHRvdXRbY2VsbC5yXVtjZWxsLmNdID0gbGluZTtcblx0XHRcdH0gZWxzZSBvdXRbbGFzdF9jZWxsXSA9IGxpbmU7XG5cdFx0fVxuXHR9O1xuXHR2YXIgb3B0cyA9ICh7XG5cdFx0ZW5jOiBmYWxzZSwgLy8gZW5jcnlwdGVkXG5cdFx0c2JjY2g6IDAsIC8vIGNjaCBpbiB0aGUgcHJlY2VkaW5nIFN1cEJvb2tcblx0XHRzbmFtZXM6IFtdLCAvLyBzaGVldG5hbWVzXG5cdFx0c2hhcmVkZjogc2hhcmVkZiwgLy8gc2hhcmVkIGZvcm11bGFlIGJ5IGFkZHJlc3Ncblx0XHRhcnJheWY6IGFycmF5ZiwgLy8gYXJyYXkgZm9ybXVsYWUgYXJyYXlcblx0XHRycnRhYmlkOiBbXSwgLy8gUlJUYWJJZFxuXHRcdGxhc3R1c2VyOiBcIlwiLCAvLyBMYXN0IFVzZXIgZnJvbSBXcml0ZUFjY2Vzc1xuXHRcdGJpZmY6IDgsIC8vIEJJRkYgdmVyc2lvblxuXHRcdGNvZGVwYWdlOiAwLCAvLyBDUCBmcm9tIENvZGVQYWdlIHJlY29yZFxuXHRcdHdpbmxvY2tlZDogMCwgLy8gZkxvY2tXbiBmcm9tIFdpblByb3RlY3Rcblx0XHRjZWxsU3R5bGVzOiAhIW9wdGlvbnMgJiYgISFvcHRpb25zLmNlbGxTdHlsZXMsXG5cdFx0V1RGOiAhIW9wdGlvbnMgJiYgISFvcHRpb25zLnd0ZlxuXHR9KTtcblx0aWYob3B0aW9ucy5wYXNzd29yZCkgb3B0cy5wYXNzd29yZCA9IG9wdGlvbnMucGFzc3dvcmQ7XG5cdHZhciB0aGVtZXM7XG5cdHZhciBtZXJnZXMgPSBbXTtcblx0dmFyIG9iamVjdHMgPSBbXTtcblx0dmFyIGNvbGluZm8gPSBbXSwgcm93aW5mbyA9IFtdO1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcblx0dmFyIGRlZndpZHRoID0gMCwgZGVmaGVpZ2h0ID0gMDsgLy8gdHdpcHMgLyBNRFcgcmVzcGVjdGl2ZWx5XG5cdHZhciBzZWVuY29sID0gZmFsc2U7XG5cdHZhciBzdXBib29rcyA9IChbXSk7IC8vIDEtaW5kZXhlZCwgd2lsbCBob2xkIGV4dGVybiBuYW1lc1xuXHRzdXBib29rcy5TaGVldE5hbWVzID0gb3B0cy5zbmFtZXM7XG5cdHN1cGJvb2tzLnNoYXJlZGYgPSBvcHRzLnNoYXJlZGY7XG5cdHN1cGJvb2tzLmFycmF5ZiA9IG9wdHMuYXJyYXlmO1xuXHRzdXBib29rcy5uYW1lcyA9IFtdO1xuXHRzdXBib29rcy5YVEkgPSBbXTtcblx0dmFyIGxhc3RfUm4gPSAnJztcblx0dmFyIGZpbGVfZGVwdGggPSAwOyAvKiBUT0RPOiBtYWtlIGEgcmVhbCBzdGFjayAqL1xuXHR2YXIgQklGRjJGbXQgPSAwLCBCSUZGMkZtdFRhYmxlID0gW107XG5cdHZhciBGaWx0ZXJEYXRhYmFzZXMgPSBbXTsgLyogVE9ETzogc29ydCBvdXQgc3VwYm9va3MgYW5kIHByb2Nlc3MgZWxzZXdoZXJlICovXG5cdHZhciBsYXN0X2xibDtcblxuXHQvKiBleHBsaWNpdCBvdmVycmlkZSBmb3Igc29tZSBicm9rZW4gd3JpdGVycyAqL1xuXHRvcHRzLmNvZGVwYWdlID0gMTIwMDtcblx0c2V0X2NwKDEyMDApO1xuXHR2YXIgc2Vlbl9jb2RlcGFnZSA9IGZhbHNlO1xuXHR3aGlsZShibG9iLmwgPCBibG9iLmxlbmd0aCAtIDEpIHtcblx0XHR2YXIgcyA9IGJsb2IubDtcblx0XHR2YXIgUmVjb3JkVHlwZSA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRpZihSZWNvcmRUeXBlID09PSAwICYmIGxhc3RfUm4gPT09ICdFT0YnKSBicmVhaztcblx0XHR2YXIgbGVuZ3RoID0gKGJsb2IubCA9PT0gYmxvYi5sZW5ndGggPyAwIDogYmxvYi5yZWFkX3NoaWZ0KDIpKTtcblx0XHR2YXIgUiA9IFhMU1JlY29yZEVudW1bUmVjb3JkVHlwZV07XG5cdFx0Ly9jb25zb2xlLmxvZyhSZWNvcmRUeXBlLnRvU3RyaW5nKDE2KSwgUmVjb3JkVHlwZSwgUiwgYmxvYi5sLCBsZW5ndGgsIGJsb2IubGVuZ3RoKTtcblx0XHQvL2lmKCFSKSBjb25zb2xlLmxvZyhibG9iLnNsaWNlKGJsb2IubCwgYmxvYi5sICsgbGVuZ3RoKSk7XG5cdFx0aWYoUiAmJiBSLmYpIHtcblx0XHRcdGlmKG9wdGlvbnMuYm9va1NoZWV0cykge1xuXHRcdFx0XHRpZihsYXN0X1JuID09PSAnQm91bmRTaGVldDgnICYmIFIubiAhPT0gJ0JvdW5kU2hlZXQ4JykgYnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRsYXN0X1JuID0gUi5uO1xuXHRcdFx0aWYoUi5yID09PSAyIHx8IFIuciA9PSAxMikge1xuXHRcdFx0XHR2YXIgcnQgPSBibG9iLnJlYWRfc2hpZnQoMik7IGxlbmd0aCAtPSAyO1xuXHRcdFx0XHRpZighb3B0cy5lbmMgJiYgcnQgIT09IFJlY29yZFR5cGUgJiYgKCgocnQmMHhGRik8PDgpfChydD4+OCkpICE9PSBSZWNvcmRUeXBlKSB0aHJvdyBuZXcgRXJyb3IoXCJydCBtaXNtYXRjaDogXCIgKyBydCArIFwiIT1cIiArIFJlY29yZFR5cGUpO1xuXHRcdFx0XHRpZihSLnIgPT0gMTIpe1xuXHRcdFx0XHRcdGJsb2IubCArPSAxMDsgbGVuZ3RoIC09IDEwO1xuXHRcdFx0XHR9IC8vIHNraXAgRlJUXG5cdFx0XHR9XG5cdFx0XHQvL2NvbnNvbGUuZXJyb3IoUixibG9iLmwsbGVuZ3RoLGJsb2IubGVuZ3RoKTtcblx0XHRcdHZhciB2YWwgPSAoe30pO1xuXHRcdFx0aWYoUi5uID09PSAnRU9GJykgdmFsID0gUi5mKGJsb2IsIGxlbmd0aCwgb3B0cyk7XG5cdFx0XHRlbHNlIHZhbCA9IHNsdXJwKFIsIGJsb2IsIGxlbmd0aCwgb3B0cyk7XG5cdFx0XHR2YXIgUm4gPSBSLm47XG5pZihmaWxlX2RlcHRoID09IDAgJiYgUm4gIT0gJ0JPRicpIGNvbnRpbnVlO1xuXHRcdFx0LyogbmVzdGVkIHN3aXRjaCBzdGF0ZW1lbnRzIHRvIHdvcmthcm91bmQgVjggMTI4IGxpbWl0ICovXG5cdFx0XHRzd2l0Y2goUm4pIHtcblx0XHRcdFx0LyogV29ya2Jvb2sgT3B0aW9ucyAqL1xuXHRcdFx0XHRjYXNlICdEYXRlMTkwNCc6XG53Yi5vcHRzLkRhdGUxOTA0ID0gV29ya2Jvb2suV0JQcm9wcy5kYXRlMTkwNCA9IHZhbDsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1dyaXRlUHJvdGVjdCc6IHdiLm9wdHMuV3JpdGVQcm90ZWN0ID0gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0ZpbGVQYXNzJzpcblx0XHRcdFx0XHRpZighb3B0cy5lbmMpIGJsb2IubCA9IDA7XG5cdFx0XHRcdFx0b3B0cy5lbmMgPSB2YWw7XG5cdFx0XHRcdFx0aWYoIW9wdGlvbnMucGFzc3dvcmQpIHRocm93IG5ldyBFcnJvcihcIkZpbGUgaXMgcGFzc3dvcmQtcHJvdGVjdGVkXCIpO1xuXHRcdFx0XHRcdGlmKHZhbC52YWxpZCA9PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoXCJFbmNyeXB0aW9uIHNjaGVtZSB1bnN1cHBvcnRlZFwiKTtcblx0XHRcdFx0XHRpZighdmFsLnZhbGlkKSB0aHJvdyBuZXcgRXJyb3IoXCJQYXNzd29yZCBpcyBpbmNvcnJlY3RcIik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1dyaXRlQWNjZXNzJzogb3B0cy5sYXN0dXNlciA9IHZhbDsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0ZpbGVTaGFyaW5nJzogYnJlYWs7IC8vVE9ET1xuXHRcdFx0XHRjYXNlICdDb2RlUGFnZSc6XG5cdFx0XHRcdFx0dmFyIGNwdmFsID0gTnVtYmVyKHZhbCk7XG5cdFx0XHRcdFx0Lyogb3ZlcnJpZGVzIGJhc2VkIG9uIHRlc3QgY2FzZXMgKi9cblx0XHRcdFx0XHRzd2l0Y2goY3B2YWwpIHtcblx0XHRcdFx0XHRcdGNhc2UgMHg1MjEyOiBjcHZhbCA9ICAxMjAwOyBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgMHg4MDAwOiBjcHZhbCA9IDEwMDAwOyBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgMHg4MDAxOiBjcHZhbCA9ICAxMjUyOyBicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c2V0X2NwKG9wdHMuY29kZXBhZ2UgPSBjcHZhbCk7XG5cdFx0XHRcdFx0c2Vlbl9jb2RlcGFnZSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1JSVGFiSWQnOiBvcHRzLnJydGFiaWQgPSB2YWw7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdXaW5Qcm90ZWN0Jzogb3B0cy53aW5sb2NrZWQgPSB2YWw7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdUZW1wbGF0ZSc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdGNhc2UgJ0Jvb2tCb29sJzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0Y2FzZSAnVXNlc0VMRnMnOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnTVRSU2V0dGluZ3MnOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnUmVmcmVzaEFsbCc6XG5cdFx0XHRcdGNhc2UgJ0NhbGNDb3VudCc6XG5cdFx0XHRcdGNhc2UgJ0NhbGNEZWx0YSc6XG5cdFx0XHRcdGNhc2UgJ0NhbGNJdGVyJzpcblx0XHRcdFx0Y2FzZSAnQ2FsY01vZGUnOlxuXHRcdFx0XHRjYXNlICdDYWxjUHJlY2lzaW9uJzpcblx0XHRcdFx0Y2FzZSAnQ2FsY1NhdmVSZWNhbGMnOlxuXHRcdFx0XHRcdHdiLm9wdHNbUm5dID0gdmFsOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnQ2FsY1JlZk1vZGUnOiBvcHRzLkNhbGNSZWZNb2RlID0gdmFsOyBicmVhazsgLy8gVE9ETzogaW1wbGVtZW50IFIxQzFcblx0XHRcdFx0Y2FzZSAnVW5jYWxjZWQnOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnRm9yY2VGdWxsQ2FsY3VsYXRpb24nOiB3Yi5vcHRzLkZ1bGxDYWxjID0gdmFsOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnV3NCb29sJzpcblx0XHRcdFx0XHRpZih2YWwuZkRpYWxvZykgb3V0W1wiIXR5cGVcIl0gPSBcImRpYWxvZ1wiO1xuXHRcdFx0XHRcdGlmKCF2YWwuZkJlbG93KSAob3V0W1wiIW91dGxpbmVcIl0gfHwgKG91dFtcIiFvdXRsaW5lXCJdID0ge30pKS5hYm92ZSA9IHRydWU7XG5cdFx0XHRcdFx0aWYoIXZhbC5mUmlnaHQpIChvdXRbXCIhb3V0bGluZVwiXSB8fCAob3V0W1wiIW91dGxpbmVcIl0gPSB7fSkpLmxlZnQgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdGNhc2UgJ1hGJzpcblx0XHRcdFx0XHRYRnMucHVzaCh2YWwpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnRXh0U1NUJzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0Y2FzZSAnQm9va0V4dCc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdGNhc2UgJ1JpY2hUZXh0U3RyZWFtJzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0JrSGltJzogYnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnU3VwQm9vayc6XG5cdFx0XHRcdFx0c3VwYm9va3MucHVzaChbdmFsXSk7XG5cdFx0XHRcdFx0c3VwYm9va3Nbc3VwYm9va3MubGVuZ3RoLTFdLlhUSSA9IFtdO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdFeHRlcm5OYW1lJzpcblx0XHRcdFx0XHRzdXBib29rc1tzdXBib29rcy5sZW5ndGgtMV0ucHVzaCh2YWwpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdJbmRleCc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdGNhc2UgJ0xibCc6XG5cdFx0XHRcdFx0bGFzdF9sYmwgPSAoe1xuXHRcdFx0XHRcdFx0TmFtZTogdmFsLk5hbWUsXG5cdFx0XHRcdFx0XHRSZWY6IHN0cmluZ2lmeV9mb3JtdWxhKHZhbC5yZ2NlLHJhbmdlLG51bGwsc3VwYm9va3Msb3B0cylcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRpZih2YWwuaXRhYiA+IDApIGxhc3RfbGJsLlNoZWV0ID0gdmFsLml0YWIgLSAxO1xuXHRcdFx0XHRcdHN1cGJvb2tzLm5hbWVzLnB1c2gobGFzdF9sYmwpO1xuXHRcdFx0XHRcdGlmKCFzdXBib29rc1swXSkgeyBzdXBib29rc1swXSA9IFtdOyBzdXBib29rc1swXS5YVEkgPSBbXTsgfVxuXHRcdFx0XHRcdHN1cGJvb2tzW3N1cGJvb2tzLmxlbmd0aC0xXS5wdXNoKHZhbCk7XG5cdFx0XHRcdFx0aWYodmFsLk5hbWUgPT0gXCJfeGxubS5fRmlsdGVyRGF0YWJhc2VcIiAmJiB2YWwuaXRhYiA+IDApXG5cdFx0XHRcdFx0XHRpZih2YWwucmdjZSAmJiB2YWwucmdjZVswXSAmJiB2YWwucmdjZVswXVswXSAmJiB2YWwucmdjZVswXVswXVswXSA9PSAnUHRnQXJlYTNkJylcblx0XHRcdFx0XHRcdFx0RmlsdGVyRGF0YWJhc2VzW3ZhbC5pdGFiIC0gMV0gPSB7IHJlZjogZW5jb2RlX3JhbmdlKHZhbC5yZ2NlWzBdWzBdWzFdWzJdKSB9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdFeHRlcm5Db3VudCc6IG9wdHMuRXh0ZXJuQ291bnQgPSB2YWw7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdFeHRlcm5TaGVldCc6XG5cdFx0XHRcdFx0aWYoc3VwYm9va3MubGVuZ3RoID09IDApIHsgc3VwYm9va3NbMF0gPSBbXTsgc3VwYm9va3NbMF0uWFRJID0gW107IH1cblx0XHRcdFx0XHRzdXBib29rc1tzdXBib29rcy5sZW5ndGggLSAxXS5YVEkgPSBzdXBib29rc1tzdXBib29rcy5sZW5ndGggLSAxXS5YVEkuY29uY2F0KHZhbCk7IHN1cGJvb2tzLlhUSSA9IHN1cGJvb2tzLlhUSS5jb25jYXQodmFsKTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ05hbWVDbXQnOlxuXHRcdFx0XHRcdC8qIFRPRE86IHNlYXJjaCBmb3IgY29ycmVjdCBuYW1lICovXG5cdFx0XHRcdFx0aWYob3B0cy5iaWZmIDwgOCkgYnJlYWs7XG5cdFx0XHRcdFx0aWYobGFzdF9sYmwgIT0gbnVsbCkgbGFzdF9sYmwuQ29tbWVudCA9IHZhbFsxXTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdQcm90ZWN0Jzogb3V0W1wiIXByb3RlY3RcIl0gPSB2YWw7IGJyZWFrOyAvKiBmb3Igc2hlZXQgb3IgYm9vayAqL1xuXHRcdFx0XHRjYXNlICdQYXNzd29yZCc6IGlmKHZhbCAhPT0gMCAmJiBvcHRzLldURikgY29uc29sZS5lcnJvcihcIlBhc3N3b3JkIHZlcmlmaWVyOiBcIiArIHZhbCk7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdQcm90NFJldic6IGNhc2UgJ1Byb3Q0UmV2UGFzcyc6IGJyZWFrOyAvKlRPRE86IFJldmlzaW9uIENvbnRyb2wqL1xuXG5cdFx0XHRcdGNhc2UgJ0JvdW5kU2hlZXQ4Jzoge1xuXHRcdFx0XHRcdERpcmVjdG9yeVt2YWwucG9zXSA9IHZhbDtcblx0XHRcdFx0XHRvcHRzLnNuYW1lcy5wdXNoKHZhbC5uYW1lKTtcblx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAnRU9GJzoge1xuXHRcdFx0XHRcdGlmKC0tZmlsZV9kZXB0aCkgYnJlYWs7XG5cdFx0XHRcdFx0aWYocmFuZ2UuZSkge1xuXHRcdFx0XHRcdFx0aWYocmFuZ2UuZS5yID4gMCAmJiByYW5nZS5lLmMgPiAwKSB7XG5cdFx0XHRcdFx0XHRcdHJhbmdlLmUuci0tOyByYW5nZS5lLmMtLTtcblx0XHRcdFx0XHRcdFx0b3V0W1wiIXJlZlwiXSA9IGVuY29kZV9yYW5nZShyYW5nZSk7XG5cdFx0XHRcdFx0XHRcdGlmKG9wdGlvbnMuc2hlZXRSb3dzICYmIG9wdGlvbnMuc2hlZXRSb3dzIDw9IHJhbmdlLmUucikge1xuXHRcdFx0XHRcdFx0XHRcdHZhciB0bXByaSA9IHJhbmdlLmUucjtcblx0XHRcdFx0XHRcdFx0XHRyYW5nZS5lLnIgPSBvcHRpb25zLnNoZWV0Um93cyAtIDE7XG5cdFx0XHRcdFx0XHRcdFx0b3V0W1wiIWZ1bGxyZWZcIl0gPSBvdXRbXCIhcmVmXCJdO1xuXHRcdFx0XHRcdFx0XHRcdG91dFtcIiFyZWZcIl0gPSBlbmNvZGVfcmFuZ2UocmFuZ2UpO1xuXHRcdFx0XHRcdFx0XHRcdHJhbmdlLmUuciA9IHRtcHJpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJhbmdlLmUucisrOyByYW5nZS5lLmMrKztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmKG1lcmdlcy5sZW5ndGggPiAwKSBvdXRbXCIhbWVyZ2VzXCJdID0gbWVyZ2VzO1xuXHRcdFx0XHRcdFx0aWYob2JqZWN0cy5sZW5ndGggPiAwKSBvdXRbXCIhb2JqZWN0c1wiXSA9IG9iamVjdHM7XG5cdFx0XHRcdFx0XHRpZihjb2xpbmZvLmxlbmd0aCA+IDApIG91dFtcIiFjb2xzXCJdID0gY29saW5mbztcblx0XHRcdFx0XHRcdGlmKHJvd2luZm8ubGVuZ3RoID4gMCkgb3V0W1wiIXJvd3NcIl0gPSByb3dpbmZvO1xuXHRcdFx0XHRcdFx0V29ya2Jvb2suU2hlZXRzLnB1c2god3Nwcm9wcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKGN1cl9zaGVldCA9PT0gXCJcIikgUHJlYW1ibGUgPSBvdXQ7IGVsc2UgU2hlZXRzW2N1cl9zaGVldF0gPSBvdXQ7XG5cdFx0XHRcdFx0b3V0ID0gKChvcHRpb25zLmRlbnNlID8gW10gOiB7fSkpO1xuXHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdCT0YnOiB7XG5cdFx0XHRcdFx0aWYob3B0cy5iaWZmID09PSA4KSBvcHRzLmJpZmYgPSB7XG4weDAwMDk6MixcbjB4MDIwOTozLFxuMHgwNDA5OjRcblx0XHRcdFx0XHR9W1JlY29yZFR5cGVdIHx8IHtcbjB4MDIwMDoyLFxuMHgwMzAwOjMsXG4weDA0MDA6NCxcbjB4MDUwMDo1LFxuMHgwNjAwOjgsXG4weDAwMDI6MixcbjB4MDAwNzoyXG5cdFx0XHRcdFx0fVt2YWwuQklGRlZlcl0gfHwgODtcblx0XHRcdFx0XHRvcHRzLmJpZmZndWVzcyA9IHZhbC5CSUZGVmVyID09IDA7XG5cdFx0XHRcdFx0aWYodmFsLkJJRkZWZXIgPT0gMCAmJiB2YWwuZHQgPT0gMHgxMDAwKSB7IG9wdHMuYmlmZiA9IDU7IHNlZW5fY29kZXBhZ2UgPSB0cnVlOyBzZXRfY3Aob3B0cy5jb2RlcGFnZSA9IDI4NTkxKTsgfVxuXHRcdFx0XHRcdGlmKG9wdHMuYmlmZiA9PSA4ICYmIHZhbC5CSUZGVmVyID09IDAgJiYgdmFsLmR0ID09IDE2KSBvcHRzLmJpZmYgPSAyO1xuXHRcdFx0XHRcdGlmKGZpbGVfZGVwdGgrKykgYnJlYWs7XG5cdFx0XHRcdFx0b3V0ID0gKChvcHRpb25zLmRlbnNlID8gW10gOiB7fSkpO1xuXG5cdFx0XHRcdFx0aWYob3B0cy5iaWZmIDwgOCAmJiAhc2Vlbl9jb2RlcGFnZSkgeyBzZWVuX2NvZGVwYWdlID0gdHJ1ZTsgc2V0X2NwKG9wdHMuY29kZXBhZ2UgPSBvcHRpb25zLmNvZGVwYWdlIHx8IDEyNTIpOyB9XG5cblx0XHRcdFx0XHRpZihvcHRzLmJpZmYgPCA1IHx8IHZhbC5CSUZGVmVyID09IDAgJiYgdmFsLmR0ID09IDB4MTAwMCkge1xuXHRcdFx0XHRcdFx0aWYoY3VyX3NoZWV0ID09PSBcIlwiKSBjdXJfc2hlZXQgPSBcIlNoZWV0MVwiO1xuXHRcdFx0XHRcdFx0cmFuZ2UgPSB7czp7cjowLGM6MH0sZTp7cjowLGM6MH19O1xuXHRcdFx0XHRcdFx0LyogZmFrZSBCb3VuZFNoZWV0OCAqL1xuXHRcdFx0XHRcdFx0dmFyIGZha2ViczggPSB7cG9zOiBibG9iLmwgLSBsZW5ndGgsIG5hbWU6Y3VyX3NoZWV0fTtcblx0XHRcdFx0XHRcdERpcmVjdG9yeVtmYWtlYnM4LnBvc10gPSBmYWtlYnM4O1xuXHRcdFx0XHRcdFx0b3B0cy5zbmFtZXMucHVzaChjdXJfc2hlZXQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIGN1cl9zaGVldCA9IChEaXJlY3Rvcnlbc10gfHwge25hbWU6XCJcIn0pLm5hbWU7XG5cdFx0XHRcdFx0aWYodmFsLmR0ID09IDB4MjApIG91dFtcIiF0eXBlXCJdID0gXCJjaGFydFwiO1xuXHRcdFx0XHRcdGlmKHZhbC5kdCA9PSAweDQwKSBvdXRbXCIhdHlwZVwiXSA9IFwibWFjcm9cIjtcblx0XHRcdFx0XHRtZXJnZXMgPSBbXTtcblx0XHRcdFx0XHRvYmplY3RzID0gW107XG5cdFx0XHRcdFx0b3B0cy5hcnJheWYgPSBhcnJheWYgPSBbXTtcblx0XHRcdFx0XHRjb2xpbmZvID0gW107IHJvd2luZm8gPSBbXTtcblx0XHRcdFx0XHRkZWZ3aWR0aCA9IGRlZmhlaWdodCA9IDA7XG5cdFx0XHRcdFx0c2VlbmNvbCA9IGZhbHNlO1xuXHRcdFx0XHRcdHdzcHJvcHMgPSB7SGlkZGVuOihEaXJlY3Rvcnlbc118fHtoczowfSkuaHMsIG5hbWU6Y3VyX3NoZWV0IH07XG5cdFx0XHRcdH0gYnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnTnVtYmVyJzogY2FzZSAnQklGRjJOVU0nOiBjYXNlICdCSUZGMklOVCc6IHtcblx0XHRcdFx0XHRpZihvdXRbXCIhdHlwZVwiXSA9PSBcImNoYXJ0XCIpIGlmKG9wdGlvbnMuZGVuc2UgPyAob3V0W3ZhbC5yXXx8W10pW3ZhbC5jXTogb3V0W2VuY29kZV9jZWxsKHtjOnZhbC5jLCByOnZhbC5yfSldKSArK3ZhbC5jO1xuXHRcdFx0XHRcdHRlbXBfdmFsID0gKHtpeGZlOiB2YWwuaXhmZSwgWEY6IFhGc1t2YWwuaXhmZV18fHt9LCB2OnZhbC52YWwsIHQ6J24nfSk7XG5cdFx0XHRcdFx0aWYoQklGRjJGbXQgPiAwKSB0ZW1wX3ZhbC56ID0gQklGRjJGbXRUYWJsZVsodGVtcF92YWwuaXhmZT4+OCkgJiAweDNGXTtcblx0XHRcdFx0XHRzYWZlX2Zvcm1hdF94Zih0ZW1wX3ZhbCwgb3B0aW9ucywgd2Iub3B0cy5EYXRlMTkwNCk7XG5cdFx0XHRcdFx0YWRkY2VsbCh7Yzp2YWwuYywgcjp2YWwucn0sIHRlbXBfdmFsLCBvcHRpb25zKTtcblx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAnQm9vbEVycic6IHtcblx0XHRcdFx0XHR0ZW1wX3ZhbCA9ICh7aXhmZTogdmFsLml4ZmUsIFhGOiBYRnNbdmFsLml4ZmVdLCB2OnZhbC52YWwsIHQ6dmFsLnR9KTtcblx0XHRcdFx0XHRpZihCSUZGMkZtdCA+IDApIHRlbXBfdmFsLnogPSBCSUZGMkZtdFRhYmxlWyh0ZW1wX3ZhbC5peGZlPj44KSAmIDB4M0ZdO1xuXHRcdFx0XHRcdHNhZmVfZm9ybWF0X3hmKHRlbXBfdmFsLCBvcHRpb25zLCB3Yi5vcHRzLkRhdGUxOTA0KTtcblx0XHRcdFx0XHRhZGRjZWxsKHtjOnZhbC5jLCByOnZhbC5yfSwgdGVtcF92YWwsIG9wdGlvbnMpO1xuXHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdSSyc6IHtcblx0XHRcdFx0XHR0ZW1wX3ZhbCA9ICh7aXhmZTogdmFsLml4ZmUsIFhGOiBYRnNbdmFsLml4ZmVdLCB2OnZhbC5ya251bSwgdDonbid9KTtcblx0XHRcdFx0XHRpZihCSUZGMkZtdCA+IDApIHRlbXBfdmFsLnogPSBCSUZGMkZtdFRhYmxlWyh0ZW1wX3ZhbC5peGZlPj44KSAmIDB4M0ZdO1xuXHRcdFx0XHRcdHNhZmVfZm9ybWF0X3hmKHRlbXBfdmFsLCBvcHRpb25zLCB3Yi5vcHRzLkRhdGUxOTA0KTtcblx0XHRcdFx0XHRhZGRjZWxsKHtjOnZhbC5jLCByOnZhbC5yfSwgdGVtcF92YWwsIG9wdGlvbnMpO1xuXHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdNdWxSayc6IHtcblx0XHRcdFx0XHRmb3IodmFyIGogPSB2YWwuYzsgaiA8PSB2YWwuQzsgKytqKSB7XG5cdFx0XHRcdFx0XHR2YXIgaXhmZSA9IHZhbC5ya3JlY1tqLXZhbC5jXVswXTtcblx0XHRcdFx0XHRcdHRlbXBfdmFsPSAoe2l4ZmU6aXhmZSwgWEY6WEZzW2l4ZmVdLCB2OnZhbC5ya3JlY1tqLXZhbC5jXVsxXSwgdDonbid9KTtcblx0XHRcdFx0XHRcdGlmKEJJRkYyRm10ID4gMCkgdGVtcF92YWwueiA9IEJJRkYyRm10VGFibGVbKHRlbXBfdmFsLml4ZmU+PjgpICYgMHgzRl07XG5cdFx0XHRcdFx0XHRzYWZlX2Zvcm1hdF94Zih0ZW1wX3ZhbCwgb3B0aW9ucywgd2Iub3B0cy5EYXRlMTkwNCk7XG5cdFx0XHRcdFx0XHRhZGRjZWxsKHtjOmosIHI6dmFsLnJ9LCB0ZW1wX3ZhbCwgb3B0aW9ucyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdGb3JtdWxhJzoge1xuXHRcdFx0XHRcdGlmKHZhbC52YWwgPT0gJ1N0cmluZycpIHsgbGFzdF9mb3JtdWxhID0gdmFsOyBicmVhazsgfVxuXHRcdFx0XHRcdHRlbXBfdmFsID0gbWFrZV9jZWxsKHZhbC52YWwsIHZhbC5jZWxsLml4ZmUsIHZhbC50dCk7XG5cdFx0XHRcdFx0dGVtcF92YWwuWEYgPSBYRnNbdGVtcF92YWwuaXhmZV07XG5cdFx0XHRcdFx0aWYob3B0aW9ucy5jZWxsRm9ybXVsYSkge1xuXHRcdFx0XHRcdFx0dmFyIF9mID0gdmFsLmZvcm11bGE7XG5cdFx0XHRcdFx0XHRpZihfZiAmJiBfZlswXSAmJiBfZlswXVswXSAmJiBfZlswXVswXVswXSA9PSAnUHRnRXhwJykge1xuXHRcdFx0XHRcdFx0XHR2YXIgX2ZyID0gX2ZbMF1bMF1bMV1bMF0sIF9mYyA9IF9mWzBdWzBdWzFdWzFdO1xuXHRcdFx0XHRcdFx0XHR2YXIgX2ZlID0gZW5jb2RlX2NlbGwoe3I6X2ZyLCBjOl9mY30pO1xuXHRcdFx0XHRcdFx0XHRpZihzaGFyZWRmW19mZV0pIHRlbXBfdmFsLmYgPSBcIlwiK3N0cmluZ2lmeV9mb3JtdWxhKHZhbC5mb3JtdWxhLHJhbmdlLHZhbC5jZWxsLHN1cGJvb2tzLCBvcHRzKTtcblx0XHRcdFx0XHRcdFx0ZWxzZSB0ZW1wX3ZhbC5GID0gKChvcHRpb25zLmRlbnNlID8gKG91dFtfZnJdfHxbXSlbX2ZjXTogb3V0W19mZV0pIHx8IHt9KS5GO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHRlbXBfdmFsLmYgPSBcIlwiK3N0cmluZ2lmeV9mb3JtdWxhKHZhbC5mb3JtdWxhLHJhbmdlLHZhbC5jZWxsLHN1cGJvb2tzLCBvcHRzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoQklGRjJGbXQgPiAwKSB0ZW1wX3ZhbC56ID0gQklGRjJGbXRUYWJsZVsodGVtcF92YWwuaXhmZT4+OCkgJiAweDNGXTtcblx0XHRcdFx0XHRzYWZlX2Zvcm1hdF94Zih0ZW1wX3ZhbCwgb3B0aW9ucywgd2Iub3B0cy5EYXRlMTkwNCk7XG5cdFx0XHRcdFx0YWRkY2VsbCh2YWwuY2VsbCwgdGVtcF92YWwsIG9wdGlvbnMpO1xuXHRcdFx0XHRcdGxhc3RfZm9ybXVsYSA9IHZhbDtcblx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAnU3RyaW5nJzoge1xuXHRcdFx0XHRcdGlmKGxhc3RfZm9ybXVsYSkgeyAvKiB0ZWNobmljYWxseSBhbHdheXMgdHJ1ZSAqL1xuXHRcdFx0XHRcdFx0bGFzdF9mb3JtdWxhLnZhbCA9IHZhbDtcblx0XHRcdFx0XHRcdHRlbXBfdmFsID0gbWFrZV9jZWxsKHZhbCwgbGFzdF9mb3JtdWxhLmNlbGwuaXhmZSwgJ3MnKTtcblx0XHRcdFx0XHRcdHRlbXBfdmFsLlhGID0gWEZzW3RlbXBfdmFsLml4ZmVdO1xuXHRcdFx0XHRcdFx0aWYob3B0aW9ucy5jZWxsRm9ybXVsYSkge1xuXHRcdFx0XHRcdFx0XHR0ZW1wX3ZhbC5mID0gXCJcIitzdHJpbmdpZnlfZm9ybXVsYShsYXN0X2Zvcm11bGEuZm9ybXVsYSwgcmFuZ2UsIGxhc3RfZm9ybXVsYS5jZWxsLCBzdXBib29rcywgb3B0cyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZihCSUZGMkZtdCA+IDApIHRlbXBfdmFsLnogPSBCSUZGMkZtdFRhYmxlWyh0ZW1wX3ZhbC5peGZlPj44KSAmIDB4M0ZdO1xuXHRcdFx0XHRcdFx0c2FmZV9mb3JtYXRfeGYodGVtcF92YWwsIG9wdGlvbnMsIHdiLm9wdHMuRGF0ZTE5MDQpO1xuXHRcdFx0XHRcdFx0YWRkY2VsbChsYXN0X2Zvcm11bGEuY2VsbCwgdGVtcF92YWwsIG9wdGlvbnMpO1xuXHRcdFx0XHRcdFx0bGFzdF9mb3JtdWxhID0gbnVsbDtcblx0XHRcdFx0XHR9IGVsc2UgdGhyb3cgbmV3IEVycm9yKFwiU3RyaW5nIHJlY29yZCBleHBlY3RzIEZvcm11bGFcIik7XG5cdFx0XHRcdH0gYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0FycmF5Jzoge1xuXHRcdFx0XHRcdGFycmF5Zi5wdXNoKHZhbCk7XG5cdFx0XHRcdFx0dmFyIF9hcnJheXN0YXJ0ID0gZW5jb2RlX2NlbGwodmFsWzBdLnMpO1xuXHRcdFx0XHRcdGNjID0gb3B0aW9ucy5kZW5zZSA/IChvdXRbdmFsWzBdLnMucl18fFtdKVt2YWxbMF0ucy5jXSA6IG91dFtfYXJyYXlzdGFydF07XG5cdFx0XHRcdFx0aWYob3B0aW9ucy5jZWxsRm9ybXVsYSAmJiBjYykge1xuXHRcdFx0XHRcdFx0aWYoIWxhc3RfZm9ybXVsYSkgYnJlYWs7IC8qIHRlY2huaWNhbGx5IHVucmVhY2hhYmxlICovXG5cdFx0XHRcdFx0XHRpZighX2FycmF5c3RhcnQgfHwgIWNjKSBicmVhaztcblx0XHRcdFx0XHRcdGNjLmYgPSBcIlwiK3N0cmluZ2lmeV9mb3JtdWxhKHZhbFsxXSwgcmFuZ2UsIHZhbFswXSwgc3VwYm9va3MsIG9wdHMpO1xuXHRcdFx0XHRcdFx0Y2MuRiA9IGVuY29kZV9yYW5nZSh2YWxbMF0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAnU2hyRm1sYSc6IHtcblx0XHRcdFx0XHRpZighb3B0aW9ucy5jZWxsRm9ybXVsYSkgYnJlYWs7XG5cdFx0XHRcdFx0aWYobGFzdF9jZWxsKSB7XG5cdFx0XHRcdFx0XHQvKiBUT0RPOiBjYXB0dXJlIHJhbmdlICovXG5cdFx0XHRcdFx0XHRpZighbGFzdF9mb3JtdWxhKSBicmVhazsgLyogdGVjaG5pY2FsbHkgdW5yZWFjaGFibGUgKi9cblx0XHRcdFx0XHRcdHNoYXJlZGZbZW5jb2RlX2NlbGwobGFzdF9mb3JtdWxhLmNlbGwpXT0gdmFsWzBdO1xuXHRcdFx0XHRcdFx0Y2MgPSBvcHRpb25zLmRlbnNlID8gKG91dFtsYXN0X2Zvcm11bGEuY2VsbC5yXXx8W10pW2xhc3RfZm9ybXVsYS5jZWxsLmNdIDogb3V0W2VuY29kZV9jZWxsKGxhc3RfZm9ybXVsYS5jZWxsKV07XG5cdFx0XHRcdFx0XHQoY2N8fHt9KS5mID0gXCJcIitzdHJpbmdpZnlfZm9ybXVsYSh2YWxbMF0sIHJhbmdlLCBsYXN0Y2VsbCwgc3VwYm9va3MsIG9wdHMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAnTGFiZWxTc3QnOlxuXHRcdFx0XHRcdHRlbXBfdmFsPW1ha2VfY2VsbChzc3RbdmFsLmlzc3RdLnQsIHZhbC5peGZlLCAncycpO1xuXHRcdFx0XHRcdGlmKHNzdFt2YWwuaXNzdF0uaCkgdGVtcF92YWwuaCA9IHNzdFt2YWwuaXNzdF0uaDtcblx0XHRcdFx0XHR0ZW1wX3ZhbC5YRiA9IFhGc1t0ZW1wX3ZhbC5peGZlXTtcblx0XHRcdFx0XHRpZihCSUZGMkZtdCA+IDApIHRlbXBfdmFsLnogPSBCSUZGMkZtdFRhYmxlWyh0ZW1wX3ZhbC5peGZlPj44KSAmIDB4M0ZdO1xuXHRcdFx0XHRcdHNhZmVfZm9ybWF0X3hmKHRlbXBfdmFsLCBvcHRpb25zLCB3Yi5vcHRzLkRhdGUxOTA0KTtcblx0XHRcdFx0XHRhZGRjZWxsKHtjOnZhbC5jLCByOnZhbC5yfSwgdGVtcF92YWwsIG9wdGlvbnMpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdCbGFuayc6IGlmKG9wdGlvbnMuc2hlZXRTdHVicykge1xuXHRcdFx0XHRcdHRlbXBfdmFsID0gKHtpeGZlOiB2YWwuaXhmZSwgWEY6IFhGc1t2YWwuaXhmZV0sIHQ6J3onfSk7XG5cdFx0XHRcdFx0aWYoQklGRjJGbXQgPiAwKSB0ZW1wX3ZhbC56ID0gQklGRjJGbXRUYWJsZVsodGVtcF92YWwuaXhmZT4+OCkgJiAweDNGXTtcblx0XHRcdFx0XHRzYWZlX2Zvcm1hdF94Zih0ZW1wX3ZhbCwgb3B0aW9ucywgd2Iub3B0cy5EYXRlMTkwNCk7XG5cdFx0XHRcdFx0YWRkY2VsbCh7Yzp2YWwuYywgcjp2YWwucn0sIHRlbXBfdmFsLCBvcHRpb25zKTtcblx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAnTXVsQmxhbmsnOiBpZihvcHRpb25zLnNoZWV0U3R1YnMpIHtcblx0XHRcdFx0XHRmb3IodmFyIF9qID0gdmFsLmM7IF9qIDw9IHZhbC5DOyArK19qKSB7XG5cdFx0XHRcdFx0XHR2YXIgX2l4ZmUgPSB2YWwuaXhmZVtfai12YWwuY107XG5cdFx0XHRcdFx0XHR0ZW1wX3ZhbD0gKHtpeGZlOl9peGZlLCBYRjpYRnNbX2l4ZmVdLCB0Oid6J30pO1xuXHRcdFx0XHRcdFx0aWYoQklGRjJGbXQgPiAwKSB0ZW1wX3ZhbC56ID0gQklGRjJGbXRUYWJsZVsodGVtcF92YWwuaXhmZT4+OCkgJiAweDNGXTtcblx0XHRcdFx0XHRcdHNhZmVfZm9ybWF0X3hmKHRlbXBfdmFsLCBvcHRpb25zLCB3Yi5vcHRzLkRhdGUxOTA0KTtcblx0XHRcdFx0XHRcdGFkZGNlbGwoe2M6X2osIHI6dmFsLnJ9LCB0ZW1wX3ZhbCwgb3B0aW9ucyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdSU3RyaW5nJzpcblx0XHRcdFx0Y2FzZSAnTGFiZWwnOiBjYXNlICdCSUZGMlNUUic6XG5cdFx0XHRcdFx0dGVtcF92YWw9bWFrZV9jZWxsKHZhbC52YWwsIHZhbC5peGZlLCAncycpO1xuXHRcdFx0XHRcdHRlbXBfdmFsLlhGID0gWEZzW3RlbXBfdmFsLml4ZmVdO1xuXHRcdFx0XHRcdGlmKEJJRkYyRm10ID4gMCkgdGVtcF92YWwueiA9IEJJRkYyRm10VGFibGVbKHRlbXBfdmFsLml4ZmU+PjgpICYgMHgzRl07XG5cdFx0XHRcdFx0c2FmZV9mb3JtYXRfeGYodGVtcF92YWwsIG9wdGlvbnMsIHdiLm9wdHMuRGF0ZTE5MDQpO1xuXHRcdFx0XHRcdGFkZGNlbGwoe2M6dmFsLmMsIHI6dmFsLnJ9LCB0ZW1wX3ZhbCwgb3B0aW9ucyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnRGltZW5zaW9ucyc6IHtcblx0XHRcdFx0XHRpZihmaWxlX2RlcHRoID09PSAxKSByYW5nZSA9IHZhbDsgLyogVE9ETzogc3RhY2sgKi9cblx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAnU1NUJzoge1xuXHRcdFx0XHRcdHNzdCA9IHZhbDtcblx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAnRm9ybWF0JzogeyAvKiB2YWwgPSBbaWQsIGZtdF0gKi9cblx0XHRcdFx0XHRpZihvcHRzLmJpZmYgPT0gNCkge1xuXHRcdFx0XHRcdFx0QklGRjJGbXRUYWJsZVtCSUZGMkZtdCsrXSA9IHZhbFsxXTtcblx0XHRcdFx0XHRcdGZvcih2YXIgYjRpZHggPSAwOyBiNGlkeCA8IEJJRkYyRm10ICsgMTYzOyArK2I0aWR4KSBpZihTU0YuX3RhYmxlW2I0aWR4XSA9PSB2YWxbMV0pIGJyZWFrO1xuXHRcdFx0XHRcdFx0aWYoYjRpZHggPj0gMTYzKSBTU0YubG9hZCh2YWxbMV0sIEJJRkYyRm10ICsgMTYzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSBTU0YubG9hZCh2YWxbMV0sIHZhbFswXSk7XG5cdFx0XHRcdH0gYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0JJRkYyRk9STUFUJzoge1xuXHRcdFx0XHRcdEJJRkYyRm10VGFibGVbQklGRjJGbXQrK10gPSB2YWw7XG5cdFx0XHRcdFx0Zm9yKHZhciBiMmlkeCA9IDA7IGIyaWR4IDwgQklGRjJGbXQgKyAxNjM7ICsrYjJpZHgpIGlmKFNTRi5fdGFibGVbYjJpZHhdID09IHZhbCkgYnJlYWs7XG5cdFx0XHRcdFx0aWYoYjJpZHggPj0gMTYzKSBTU0YubG9hZCh2YWwsIEJJRkYyRm10ICsgMTYzKTtcblx0XHRcdFx0fSBicmVhaztcblxuXHRcdFx0XHRjYXNlICdNZXJnZUNlbGxzJzogbWVyZ2VzID0gbWVyZ2VzLmNvbmNhdCh2YWwpOyBicmVhaztcblxuXHRcdFx0XHRjYXNlICdPYmonOiBvYmplY3RzW3ZhbC5jbW9bMF1dID0gb3B0cy5sYXN0b2JqID0gdmFsOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnVHhPJzogb3B0cy5sYXN0b2JqLlR4TyA9IHZhbDsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0ltRGF0YSc6IG9wdHMubGFzdG9iai5JbURhdGEgPSB2YWw7IGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ0hMaW5rJzoge1xuXHRcdFx0XHRcdGZvcihybmdSID0gdmFsWzBdLnMucjsgcm5nUiA8PSB2YWxbMF0uZS5yOyArK3JuZ1IpXG5cdFx0XHRcdFx0XHRmb3Iocm5nQyA9IHZhbFswXS5zLmM7IHJuZ0MgPD0gdmFsWzBdLmUuYzsgKytybmdDKSB7XG5cdFx0XHRcdFx0XHRcdGNjID0gb3B0aW9ucy5kZW5zZSA/IChvdXRbcm5nUl18fFtdKVtybmdDXSA6IG91dFtlbmNvZGVfY2VsbCh7YzpybmdDLHI6cm5nUn0pXTtcblx0XHRcdFx0XHRcdFx0aWYoY2MpIGNjLmwgPSB2YWxbMV07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0hMaW5rVG9vbHRpcCc6IHtcblx0XHRcdFx0XHRmb3Iocm5nUiA9IHZhbFswXS5zLnI7IHJuZ1IgPD0gdmFsWzBdLmUucjsgKytybmdSKVxuXHRcdFx0XHRcdFx0Zm9yKHJuZ0MgPSB2YWxbMF0ucy5jOyBybmdDIDw9IHZhbFswXS5lLmM7ICsrcm5nQykge1xuXHRcdFx0XHRcdFx0XHRjYyA9IG9wdGlvbnMuZGVuc2UgPyAob3V0W3JuZ1JdfHxbXSlbcm5nQ10gOiBvdXRbZW5jb2RlX2NlbGwoe2M6cm5nQyxyOnJuZ1J9KV07XG5cdFx0XHRcdFx0XHRcdGlmKGNjICYmIGNjLmwpIGNjLmwuVG9vbHRpcCA9IHZhbFsxXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGJyZWFrO1xuXG5cdFx0XHRcdC8qIENvbW1lbnRzICovXG5cdFx0XHRcdGNhc2UgJ05vdGUnOiB7XG5cdFx0XHRcdFx0aWYob3B0cy5iaWZmIDw9IDUgJiYgb3B0cy5iaWZmID49IDIpIGJyZWFrOyAvKiBUT0RPOiBCSUZGNSAqL1xuXHRcdFx0XHRcdGNjID0gb3B0aW9ucy5kZW5zZSA/IChvdXRbdmFsWzBdLnJdfHxbXSlbdmFsWzBdLmNdIDogb3V0W2VuY29kZV9jZWxsKHZhbFswXSldO1xuXHRcdFx0XHRcdHZhciBub3Rlb2JqID0gb2JqZWN0c1t2YWxbMl1dO1xuXHRcdFx0XHRcdGlmKCFjYykge1xuXHRcdFx0XHRcdFx0aWYob3B0aW9ucy5kZW5zZSkge1xuXHRcdFx0XHRcdFx0XHRpZighb3V0W3ZhbFswXS5yXSkgb3V0W3ZhbFswXS5yXSA9IFtdO1xuXHRcdFx0XHRcdFx0XHRjYyA9IG91dFt2YWxbMF0ucl1bdmFsWzBdLmNdID0gKHt0OlwielwifSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjYyA9IG91dFtlbmNvZGVfY2VsbCh2YWxbMF0pXSA9ICh7dDpcInpcIn0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmFuZ2UuZS5yID0gTWF0aC5tYXgocmFuZ2UuZS5yLCB2YWxbMF0ucik7XG5cdFx0XHRcdFx0XHRyYW5nZS5zLnIgPSBNYXRoLm1pbihyYW5nZS5zLnIsIHZhbFswXS5yKTtcblx0XHRcdFx0XHRcdHJhbmdlLmUuYyA9IE1hdGgubWF4KHJhbmdlLmUuYywgdmFsWzBdLmMpO1xuXHRcdFx0XHRcdFx0cmFuZ2Uucy5jID0gTWF0aC5taW4ocmFuZ2Uucy5jLCB2YWxbMF0uYyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKCFjYy5jKSBjYy5jID0gW107XG5cdFx0XHRcdFx0Y21udCA9IHthOnZhbFsxXSx0Om5vdGVvYmouVHhPLnR9O1xuXHRcdFx0XHRcdGNjLmMucHVzaChjbW50KTtcblx0XHRcdFx0fSBicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OiBzd2l0Y2goUi5uKSB7IC8qIG5lc3RlZCAqL1xuXHRcdFx0XHRjYXNlICdDbHJ0Q2xpZW50JzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1hGRXh0JzogdXBkYXRlX3hmZXh0KFhGc1t2YWwuaXhmZV0sIHZhbC5leHQpOyBicmVhaztcblxuXHRcdFx0XHRjYXNlICdEZWZDb2xXaWR0aCc6IGRlZndpZHRoID0gdmFsOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnRGVmYXVsdFJvd0hlaWdodCc6IGRlZmhlaWdodCA9IHZhbFsxXTsgYnJlYWs7IC8vIFRPRE86IGZsYWdzXG5cblx0XHRcdFx0Y2FzZSAnQ29sSW5mbyc6IHtcblx0XHRcdFx0XHRpZighb3B0cy5jZWxsU3R5bGVzKSBicmVhaztcblx0XHRcdFx0XHR3aGlsZSh2YWwuZSA+PSB2YWwucykge1xuXHRcdFx0XHRcdFx0Y29saW5mb1t2YWwuZS0tXSA9IHsgd2lkdGg6IHZhbC53LzI1NiwgbGV2ZWw6ICh2YWwubGV2ZWwgfHwgMCksIGhpZGRlbjogISEodmFsLmZsYWdzICYgMSkgfTtcblx0XHRcdFx0XHRcdGlmKCFzZWVuY29sKSB7IHNlZW5jb2wgPSB0cnVlOyBmaW5kX21kd19jb2x3KHZhbC53LzI1Nik7IH1cblx0XHRcdFx0XHRcdHByb2Nlc3NfY29sKGNvbGluZm9bdmFsLmUrMV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAnUm93Jzoge1xuXHRcdFx0XHRcdHZhciByb3dvYmogPSB7fTtcblx0XHRcdFx0XHRpZih2YWwubGV2ZWwgIT0gbnVsbCkgeyByb3dpbmZvW3ZhbC5yXSA9IHJvd29iajsgcm93b2JqLmxldmVsID0gdmFsLmxldmVsOyB9XG5cdFx0XHRcdFx0aWYodmFsLmhpZGRlbikgeyByb3dpbmZvW3ZhbC5yXSA9IHJvd29iajsgcm93b2JqLmhpZGRlbiA9IHRydWU7IH1cblx0XHRcdFx0XHRpZih2YWwuaHB0KSB7XG5cdFx0XHRcdFx0XHRyb3dpbmZvW3ZhbC5yXSA9IHJvd29iajtcblx0XHRcdFx0XHRcdHJvd29iai5ocHQgPSB2YWwuaHB0OyByb3dvYmouaHB4ID0gcHQycHgodmFsLmhwdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ0xlZnRNYXJnaW4nOlxuXHRcdFx0XHRjYXNlICdSaWdodE1hcmdpbic6XG5cdFx0XHRcdGNhc2UgJ1RvcE1hcmdpbic6XG5cdFx0XHRcdGNhc2UgJ0JvdHRvbU1hcmdpbic6XG5cdFx0XHRcdFx0aWYoIW91dFsnIW1hcmdpbnMnXSkgZGVmYXVsdF9tYXJnaW5zKG91dFsnIW1hcmdpbnMnXSA9IHt9KTtcblx0XHRcdFx0XHRvdXRbJyFtYXJnaW5zJ11bUm4uc2xpY2UoMCwtNikudG9Mb3dlckNhc2UoKV0gPSB2YWw7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnU2VsZWN0aW9uJzogYnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnU2V0dXAnOiAvLyBUT0RPXG5cdFx0XHRcdFx0aWYoIW91dFsnIW1hcmdpbnMnXSkgZGVmYXVsdF9tYXJnaW5zKG91dFsnIW1hcmdpbnMnXSA9IHt9KTtcblx0XHRcdFx0XHRvdXRbJyFtYXJnaW5zJ10uaGVhZGVyID0gdmFsLmhlYWRlcjtcblx0XHRcdFx0XHRvdXRbJyFtYXJnaW5zJ10uZm9vdGVyID0gdmFsLmZvb3Rlcjtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdXaW5kb3cyJzogLy8gVE9ET1xuXHRcdFx0XHRcdC8vICRGbG93SWdub3JlXG5cdFx0XHRcdFx0aWYodmFsLlJUTCkgV29ya2Jvb2suVmlld3NbMF0uUlRMID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdIZWFkZXInOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRjYXNlICdGb290ZXInOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRjYXNlICdIQ2VudGVyJzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0Y2FzZSAnVkNlbnRlcic6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdGNhc2UgJ1Bscyc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdGNhc2UgJ0dDVyc6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdMSFJlY29yZCc6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdEQkNlbGwnOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRjYXNlICdFbnRFeFUyJzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0Y2FzZSAnU3hWaWV3JzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0Y2FzZSAnU3h2ZCc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdGNhc2UgJ1NYVkknOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRjYXNlICdTWFZERXgnOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRjYXNlICdTeEl2ZCc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdGNhc2UgJ1NYU3RyaW5nJzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0Y2FzZSAnU3luYyc6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdBZGRpbic6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdTWERJJzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0Y2FzZSAnU1hMSSc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdGNhc2UgJ1NYRXgnOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRjYXNlICdRc2lTWFRhZyc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdGNhc2UgJ0ZlYXQnOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnRmVhdEhkcic6IGNhc2UgJ0ZlYXRIZHIxMSc6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdGZWF0dXJlMTEnOiBjYXNlICdGZWF0dXJlMTInOiBjYXNlICdMaXN0MTInOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnQ291bnRyeSc6IGNvdW50cnkgPSB2YWw7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdSZWNhbGNJZCc6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdEeEdDb2wnOiBicmVhazsgLy8gVE9ETzogaHRtbGlmeVxuXHRcdFx0XHRjYXNlICdGYmknOiBjYXNlICdGYmkyJzogY2FzZSAnR2VsRnJhbWUnOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnRm9udCc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdGNhc2UgJ1hGQ1JDJzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0Y2FzZSAnU3R5bGUnOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRjYXNlICdTdHlsZUV4dCc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdGNhc2UgJ1BhbGV0dGUnOiBwYWxldHRlID0gdmFsOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnVGhlbWUnOiB0aGVtZXMgPSB2YWw7IGJyZWFrO1xuXHRcdFx0XHQvKiBQcm90ZWN0aW9uICovXG5cdFx0XHRcdGNhc2UgJ1NjZW5hcmlvUHJvdGVjdCc6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdPYmpQcm90ZWN0JzogYnJlYWs7XG5cblx0XHRcdFx0LyogQ29uZGl0aW9uYWwgRm9ybWF0dGluZyAqL1xuXHRcdFx0XHRjYXNlICdDb25kRm10MTInOiBicmVhaztcblxuXHRcdFx0XHQvKiBUYWJsZSAqL1xuXHRcdFx0XHRjYXNlICdUYWJsZSc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdGNhc2UgJ1RhYmxlU3R5bGVzJzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0Y2FzZSAnVGFibGVTdHlsZSc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdGNhc2UgJ1RhYmxlU3R5bGVFbGVtZW50JzogYnJlYWs7IC8vIFRPRE9cblxuXHRcdFx0XHQvKiBQaXZvdFRhYmxlICovXG5cdFx0XHRcdGNhc2UgJ1NYU3RyZWFtSUQnOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRjYXNlICdTWFZTJzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0Y2FzZSAnRENvblJlZic6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdGNhc2UgJ1NYQWRkbCc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdGNhc2UgJ0RDb25CaW4nOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRjYXNlICdEQ29uTmFtZSc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdGNhc2UgJ1NYUEknOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRjYXNlICdTeEZvcm1hdCc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdGNhc2UgJ1N4U2VsZWN0JzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0Y2FzZSAnU3hSdWxlJzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0Y2FzZSAnU3hGaWx0JzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0Y2FzZSAnU3hJdG0nOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRjYXNlICdTeERYRic6IGJyZWFrOyAvLyBUT0RPXG5cblx0XHRcdFx0LyogU2NlbmFyaW8gTWFuYWdlciAqL1xuXHRcdFx0XHRjYXNlICdTY2VuTWFuJzogYnJlYWs7XG5cblx0XHRcdFx0LyogRGF0YSBDb25zb2xpZGF0aW9uICovXG5cdFx0XHRcdGNhc2UgJ0RDb24nOiBicmVhaztcblxuXHRcdFx0XHQvKiBXYXRjaGVkIENlbGwgKi9cblx0XHRcdFx0Y2FzZSAnQ2VsbFdhdGNoJzogYnJlYWs7XG5cblx0XHRcdFx0LyogUHJpbnQgU2V0dGluZ3MgKi9cblx0XHRcdFx0Y2FzZSAnUHJpbnRSb3dDb2wnOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnUHJpbnRHcmlkJzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1ByaW50U2l6ZSc6IGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ1hDVCc6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdDUk4nOiBicmVhaztcblxuXHRcdFx0XHRjYXNlICdTY2wnOiB7XG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcIlpvb20gTGV2ZWw6XCIsIHZhbFswXS92YWxbMV0sdmFsKTtcblx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAnU2hlZXRFeHQnOiB7XG5cdFx0XHRcdFx0LyogZW1wdHkgKi9cblx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAnU2hlZXRFeHRPcHRpb25hbCc6IHtcblx0XHRcdFx0XHQvKiBlbXB0eSAqL1xuXHRcdFx0XHR9IGJyZWFrO1xuXG5cdFx0XHRcdC8qIFZCQSAqL1xuXHRcdFx0XHRjYXNlICdPYk5vTWFjcm9zJzoge1xuXHRcdFx0XHRcdC8qIGVtcHR5ICovXG5cdFx0XHRcdH0gYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ09iUHJvaic6IHtcblx0XHRcdFx0XHQvKiBlbXB0eSAqL1xuXHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdDb2RlTmFtZSc6IHtcbmlmKCFjdXJfc2hlZXQpIFdvcmtib29rLldCUHJvcHMuQ29kZU5hbWUgPSB2YWwgfHwgXCJUaGlzV29ya2Jvb2tcIjtcblx0XHRcdFx0XHRlbHNlIHdzcHJvcHMuQ29kZU5hbWUgPSB2YWwgfHwgd3Nwcm9wcy5uYW1lO1xuXHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdHVUlEVHlwZUxpYic6IHtcblx0XHRcdFx0XHQvKiBlbXB0eSAqL1xuXHRcdFx0XHR9IGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ1dPcHQnOiBicmVhazsgLy8gVE9ETzogV1RGP1xuXHRcdFx0XHRjYXNlICdQaG9uZXRpY0luZm8nOiBicmVhaztcblxuXHRcdFx0XHRjYXNlICdPbGVPYmplY3RTaXplJzogYnJlYWs7XG5cblx0XHRcdFx0LyogRGlmZmVyZW50aWFsIEZvcm1hdHRpbmcgKi9cblx0XHRcdFx0Y2FzZSAnRFhGJzogY2FzZSAnRFhGTic6IGNhc2UgJ0RYRk4xMic6IGNhc2UgJ0RYRk4xMkxpc3QnOiBjYXNlICdEWEZOMTJOb0NCJzogYnJlYWs7XG5cblx0XHRcdFx0LyogRGF0YSBWYWxpZGF0aW9uICovXG5cdFx0XHRcdGNhc2UgJ0R2JzogY2FzZSAnRFZhbCc6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIERhdGEgU2VyaWVzICovXG5cdFx0XHRcdGNhc2UgJ0JSQUknOiBjYXNlICdTZXJpZXMnOiBjYXNlICdTZXJpZXNUZXh0JzogYnJlYWs7XG5cblx0XHRcdFx0LyogRGF0YSBDb25uZWN0aW9uICovXG5cdFx0XHRcdGNhc2UgJ0RDb25uJzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0RiT3JQYXJhbVFyeSc6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdEQlF1ZXJ5RXh0JzogYnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnT2xlRGJDb25uJzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0V4dFN0cmluZyc6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIEZvcm1hdHRpbmcgKi9cblx0XHRcdFx0Y2FzZSAnSUZtdFJlY29yZCc6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdDb25kRm10JzogY2FzZSAnQ0YnOiBjYXNlICdDRjEyJzogY2FzZSAnQ0ZFeCc6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIEV4cGxpY2l0bHkgSWdub3JlZCAqL1xuXHRcdFx0XHRjYXNlICdFeGNlbDlGaWxlJzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1VuaXRzJzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0ludGVyZmFjZUhkcic6IGNhc2UgJ01tcyc6IGNhc2UgJ0ludGVyZmFjZUVuZCc6IGNhc2UgJ0RTRic6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdCdWlsdEluRm5Hcm91cENvdW50JzogLyogMi40LjMwIDB4MEUgb3IgMHgxMCBidXQgZXhjZWwgMjAxMSBnZW5lcmF0ZXMgMHgxMT8gKi8gYnJlYWs7XG5cdFx0XHRcdC8qIFZpZXcgU3R1ZmYgKi9cblx0XHRcdFx0Y2FzZSAnV2luZG93MSc6IGNhc2UgJ0hpZGVPYmonOiBjYXNlICdHcmlkU2V0JzogY2FzZSAnR3V0cyc6XG5cdFx0XHRcdGNhc2UgJ1VzZXJCVmlldyc6IGNhc2UgJ1VzZXJTVmlld0JlZ2luJzogY2FzZSAnVXNlclNWaWV3RW5kJzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1BhbmUnOiBicmVhaztcblx0XHRcdFx0ZGVmYXVsdDogc3dpdGNoKFIubikgeyAvKiBuZXN0ZWQgKi9cblx0XHRcdFx0LyogQ2hhcnQgKi9cblx0XHRcdFx0Y2FzZSAnRGF0Jzpcblx0XHRcdFx0Y2FzZSAnQmVnaW4nOiBjYXNlICdFbmQnOlxuXHRcdFx0XHRjYXNlICdTdGFydEJsb2NrJzogY2FzZSAnRW5kQmxvY2snOlxuXHRcdFx0XHRjYXNlICdGcmFtZSc6IGNhc2UgJ0FyZWEnOlxuXHRcdFx0XHRjYXNlICdBeGlzJzogY2FzZSAnQXhpc0xpbmUnOiBjYXNlICdUaWNrJzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0F4ZXNVc2VkJzpcblx0XHRcdFx0Y2FzZSAnQ3J0TGF5b3V0MTInOiBjYXNlICdDcnRMYXlvdXQxMkEnOiBjYXNlICdDcnRMaW5rJzogY2FzZSAnQ3J0TGluZSc6IGNhc2UgJ0NydE1sRnJ0JzogY2FzZSAnQ3J0TWxGcnRDb250aW51ZSc6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdMaW5lRm9ybWF0JzogY2FzZSAnQXJlYUZvcm1hdCc6XG5cdFx0XHRcdGNhc2UgJ0NoYXJ0JzogY2FzZSAnQ2hhcnQzZCc6IGNhc2UgJ0NoYXJ0M0RCYXJTaGFwZSc6IGNhc2UgJ0NoYXJ0Rm9ybWF0JzogY2FzZSAnQ2hhcnRGcnRJbmZvJzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1Bsb3RBcmVhJzogY2FzZSAnUGxvdEdyb3d0aCc6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdTZXJpZXNMaXN0JzogY2FzZSAnU2VyUGFyZW50JzogY2FzZSAnU2VyQXV4VHJlbmQnOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnRGF0YUZvcm1hdCc6IGNhc2UgJ1NlclRvQ3J0JzogY2FzZSAnRm9udFgnOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnQ2F0U2VyUmFuZ2UnOiBjYXNlICdBeGNFeHQnOiBjYXNlICdTZXJGbXQnOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnU2h0UHJvcHMnOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnRGVmYXVsdFRleHQnOiBjYXNlICdUZXh0JzogY2FzZSAnQ2F0TGFiJzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0RhdGFMYWJFeHRDb250ZW50cyc6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdMZWdlbmQnOiBjYXNlICdMZWdlbmRFeGNlcHRpb24nOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnUGllJzogY2FzZSAnU2NhdHRlcic6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdQaWVGb3JtYXQnOiBjYXNlICdNYXJrZXJGb3JtYXQnOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnU3RhcnRPYmplY3QnOiBjYXNlICdFbmRPYmplY3QnOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnQWxSdW5zJzogY2FzZSAnT2JqZWN0TGluayc6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdTSUluZGV4JzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0F0dGFjaGVkTGFiZWwnOiBjYXNlICdZTXVsdCc6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIENoYXJ0IEdyb3VwICovXG5cdFx0XHRcdGNhc2UgJ0xpbmUnOiBjYXNlICdCYXInOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnU3VyZic6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIEF4aXMgR3JvdXAgKi9cblx0XHRcdFx0Y2FzZSAnQXhpc1BhcmVudCc6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdQb3MnOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnVmFsdWVSYW5nZSc6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIFBpdm90IENoYXJ0ICovXG5cdFx0XHRcdGNhc2UgJ1NYVmlld0V4OSc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdGNhc2UgJ1NYVmlld0xpbmsnOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnUGl2b3RDaGFydEJpdHMnOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnU0Jhc2VSZWYnOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnVGV4dFByb3BzU3RyZWFtJzogYnJlYWs7XG5cblx0XHRcdFx0LyogQ2hhcnQgTWlzYyAqL1xuXHRcdFx0XHRjYXNlICdMbkV4dCc6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdNa3JFeHQnOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnQ3J0Q29vcHQnOiBicmVhaztcblxuXHRcdFx0XHQvKiBRdWVyeSBUYWJsZSAqL1xuXHRcdFx0XHRjYXNlICdRc2knOiBjYXNlICdRc2lmJzogY2FzZSAnUXNpcic6IGNhc2UgJ1FzaVNYVGFnJzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1R4dFFyeSc6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIEZpbHRlciAqL1xuXHRcdFx0XHRjYXNlICdGaWx0ZXJNb2RlJzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0F1dG9GaWx0ZXInOiBjYXNlICdBdXRvRmlsdGVySW5mbyc6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdBdXRvRmlsdGVyMTInOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnRHJvcERvd25PYmpJZHMnOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnU29ydCc6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdTb3J0RGF0YSc6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIERyYXdpbmcgKi9cblx0XHRcdFx0Y2FzZSAnU2hhcGVQcm9wc1N0cmVhbSc6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdNc29EcmF3aW5nJzogY2FzZSAnTXNvRHJhd2luZ0dyb3VwJzogY2FzZSAnTXNvRHJhd2luZ1NlbGVjdGlvbic6IGJyZWFrO1xuXHRcdFx0XHQvKiBQdWIgU3R1ZmYgKi9cblx0XHRcdFx0Y2FzZSAnV2ViUHViJzogY2FzZSAnQXV0b1dlYlB1Yic6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIFByaW50IFN0dWZmICovXG5cdFx0XHRcdGNhc2UgJ0hlYWRlckZvb3Rlcic6IGNhc2UgJ0hGUGljdHVyZSc6IGNhc2UgJ1BMVic6XG5cdFx0XHRcdGNhc2UgJ0hvcml6b250YWxQYWdlQnJlYWtzJzogY2FzZSAnVmVydGljYWxQYWdlQnJlYWtzJzogYnJlYWs7XG5cdFx0XHRcdC8qIEJlaGF2aW9yYWwgKi9cblx0XHRcdFx0Y2FzZSAnQmFja3VwJzogY2FzZSAnQ29tcHJlc3NQaWN0dXJlcyc6IGNhc2UgJ0NvbXBhdDEyJzogYnJlYWs7XG5cblx0XHRcdFx0LyogU2hvdWxkIG5vdCBIYXBwZW4gKi9cblx0XHRcdFx0Y2FzZSAnQ29udGludWUnOiBjYXNlICdDb250aW51ZUZydDEyJzogYnJlYWs7XG5cblx0XHRcdFx0LyogRnV0dXJlIFJlY29yZHMgKi9cblx0XHRcdFx0Y2FzZSAnRnJ0Rm9udExpc3QnOiBjYXNlICdGcnRXcmFwcGVyJzogYnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDogc3dpdGNoKFIubikgeyAvKiBuZXN0ZWQgKi9cblx0XHRcdFx0LyogQklGRjUgcmVjb3JkcyAqL1xuXHRcdFx0XHRjYXNlICdUYWJJZENvbmYnOiBjYXNlICdSYWRhcic6IGNhc2UgJ1JhZGFyQXJlYSc6IGNhc2UgJ0Ryb3BCYXInOiBjYXNlICdJbnRsJzogY2FzZSAnQ29vcmRMaXN0JzogY2FzZSAnU2VyQXV4RXJyQmFyJzogYnJlYWs7XG5cblx0XHRcdFx0LyogQklGRjItNCByZWNvcmRzICovXG5cdFx0XHRcdGNhc2UgJ0JJRkYyRk9OVENMUic6IGNhc2UgJ0JJRkYyRk1UQ05UJzogY2FzZSAnQklGRjJGT05UWFRSQSc6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdCSUZGMlhGJzogY2FzZSAnQklGRjNYRic6IGNhc2UgJ0JJRkY0WEYnOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnQklGRjJYRklOREVYJzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0JJRkY0Rk1UQ05UJzogY2FzZSAnQklGRjJST1cnOiBjYXNlICdCSUZGMldJTkRPVzInOiBicmVhaztcblxuXHRcdFx0XHQvKiBNaXNjZWxsYW5lb3VzICovXG5cdFx0XHRcdGNhc2UgJ1NDRU5BUklPJzogY2FzZSAnRENvbkJpbic6IGNhc2UgJ1BpY0YnOiBjYXNlICdEYXRhTGFiRXh0Jzpcblx0XHRcdFx0Y2FzZSAnTGVsJzogY2FzZSAnQm9wUG9wJzogY2FzZSAnQm9wUG9wQ3VzdG9tJzogY2FzZSAnUmVhbFRpbWVEYXRhJzpcblx0XHRcdFx0Y2FzZSAnTmFtZSc6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdMSE5HcmFwaCc6IGNhc2UgJ0ZuR3JvdXBOYW1lJzogY2FzZSAnQWRkTWVudSc6IGNhc2UgJ0xQcic6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdMaXN0T2JqJzogY2FzZSAnTGlzdEZpZWxkJzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1JSU29ydCc6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdCaWdOYW1lJzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1Rvb2xiYXJIZHInOiBjYXNlICdUb29sYmFyRW5kJzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0RERU9iak5hbWUnOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnRlJUQXJjaElkJCc6IGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OiBpZihvcHRpb25zLldURikgdGhyb3cgJ1VucmVjb2duaXplZCBSZWNvcmQgJyArIFIubjtcblx0XHRcdH19fX1cblx0XHR9IGVsc2UgYmxvYi5sICs9IGxlbmd0aDtcblx0fVxuXHR3Yi5TaGVldE5hbWVzPWtleXMoRGlyZWN0b3J5KS5zb3J0KGZ1bmN0aW9uKGEsYikgeyByZXR1cm4gTnVtYmVyKGEpIC0gTnVtYmVyKGIpOyB9KS5tYXAoZnVuY3Rpb24oeCl7cmV0dXJuIERpcmVjdG9yeVt4XS5uYW1lO30pO1xuXHRpZighb3B0aW9ucy5ib29rU2hlZXRzKSB3Yi5TaGVldHM9U2hlZXRzO1xuXHRpZighd2IuU2hlZXROYW1lcy5sZW5ndGggJiYgUHJlYW1ibGVbXCIhcmVmXCJdKSB7XG5cdFx0d2IuU2hlZXROYW1lcy5wdXNoKFwiU2hlZXQxXCIpO1xuXHRcdGlmKHdiLlNoZWV0cykgd2IuU2hlZXRzW1wiU2hlZXQxXCJdID0gUHJlYW1ibGU7XG5cdH0gZWxzZSB3Yi5QcmVhbWJsZT1QcmVhbWJsZTtcblx0aWYod2IuU2hlZXRzKSBGaWx0ZXJEYXRhYmFzZXMuZm9yRWFjaChmdW5jdGlvbihyLGkpIHsgd2IuU2hlZXRzW3diLlNoZWV0TmFtZXNbaV1dWychYXV0b2ZpbHRlciddID0gcjsgfSk7XG5cdHdiLlN0cmluZ3MgPSBzc3Q7XG5cdHdiLlNTRiA9IFNTRi5nZXRfdGFibGUoKTtcblx0aWYob3B0cy5lbmMpIHdiLkVuY3J5cHRpb24gPSBvcHRzLmVuYztcblx0aWYodGhlbWVzKSB3Yi5UaGVtZXMgPSB0aGVtZXM7XG5cdHdiLk1ldGFkYXRhID0ge307XG5cdGlmKGNvdW50cnkgIT09IHVuZGVmaW5lZCkgd2IuTWV0YWRhdGEuQ291bnRyeSA9IGNvdW50cnk7XG5cdGlmKHN1cGJvb2tzLm5hbWVzLmxlbmd0aCA+IDApIFdvcmtib29rLk5hbWVzID0gc3VwYm9va3MubmFtZXM7XG5cdHdiLldvcmtib29rID0gV29ya2Jvb2s7XG5cdHJldHVybiB3Yjtcbn1cblxuLyogVE9ETzogc3BsaXQgcHJvcHMqL1xudmFyIFBTQ0xTSUQgPSB7XG5cdFNJOiBcImUwODU5ZmYyZjk0ZjY4MTBhYjkxMDgwMDJiMjdiM2Q5XCIsXG5cdERTSTogXCIwMmQ1Y2RkNTljMmUxYjEwOTM5NzA4MDAyYjJjZjlhZVwiLFxuXHRVREk6IFwiMDVkNWNkZDU5YzJlMWIxMDkzOTcwODAwMmIyY2Y5YWVcIlxufTtcbmZ1bmN0aW9uIHBhcnNlX3hsc19wcm9wcyhjZmIsIHByb3BzLCBvKSB7XG5cdC8qIFtNUy1PU0hBUkVEXSAyLjMuMy4yLjIgRG9jdW1lbnQgU3VtbWFyeSBJbmZvcm1hdGlvbiBQcm9wZXJ0eSBTZXQgKi9cblx0dmFyIERTSSA9IENGQi5maW5kKGNmYiwgJyFEb2N1bWVudFN1bW1hcnlJbmZvcm1hdGlvbicpO1xuXHRpZihEU0kgJiYgRFNJLnNpemUgPiAwKSB0cnkge1xuXHRcdHZhciBEb2NTdW1tYXJ5ID0gcGFyc2VfUHJvcGVydHlTZXRTdHJlYW0oRFNJLCBEb2NTdW1tYXJ5UElERFNJLCBQU0NMU0lELkRTSSk7XG5cdFx0Zm9yKHZhciBkIGluIERvY1N1bW1hcnkpIHByb3BzW2RdID0gRG9jU3VtbWFyeVtkXTtcblx0fSBjYXRjaChlKSB7aWYoby5XVEYpIHRocm93IGU7LyogZW1wdHkgKi99XG5cblx0LyogW01TLU9TSEFSRURdIDIuMy4zLjIuMSBTdW1tYXJ5IEluZm9ybWF0aW9uIFByb3BlcnR5IFNldCovXG5cdHZhciBTSSA9IENGQi5maW5kKGNmYiwgJyFTdW1tYXJ5SW5mb3JtYXRpb24nKTtcblx0aWYoU0kgJiYgU0kuc2l6ZSA+IDApIHRyeSB7XG5cdFx0dmFyIFN1bW1hcnkgPSBwYXJzZV9Qcm9wZXJ0eVNldFN0cmVhbShTSSwgU3VtbWFyeVBJRFNJLCBQU0NMU0lELlNJKTtcblx0XHRmb3IodmFyIHMgaW4gU3VtbWFyeSkgaWYocHJvcHNbc10gPT0gbnVsbCkgcHJvcHNbc10gPSBTdW1tYXJ5W3NdO1xuXHR9IGNhdGNoKGUpIHtpZihvLldURikgdGhyb3cgZTsvKiBlbXB0eSAqL31cblxuXHRpZihwcm9wcy5IZWFkaW5nUGFpcnMgJiYgcHJvcHMuVGl0bGVzT2ZQYXJ0cykge1xuXHRcdGxvYWRfcHJvcHNfcGFpcnMocHJvcHMuSGVhZGluZ1BhaXJzLCBwcm9wcy5UaXRsZXNPZlBhcnRzLCBwcm9wcywgbyk7XG5cdFx0ZGVsZXRlIHByb3BzLkhlYWRpbmdQYWlyczsgZGVsZXRlIHByb3BzLlRpdGxlc09mUGFydHM7XG5cdH1cbn1cbmZ1bmN0aW9uIHdyaXRlX3hsc19wcm9wcyh3YiwgY2ZiKSB7XG5cdHZhciBEU0VudHJpZXMgPSBbXSwgU0VudHJpZXMgPSBbXSwgQ0VudHJpZXMgPSBbXTtcblx0dmFyIGkgPSAwLCBLZXlzO1xuXHRpZih3Yi5Qcm9wcykge1xuXHRcdEtleXMgPSBrZXlzKHdiLlByb3BzKTtcblx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdGZvcihpID0gMDsgaSA8IEtleXMubGVuZ3RoOyArK2kpIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoRG9jU3VtbWFyeVJFLCBLZXlzW2ldKSA/IERTRW50cmllcyA6IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChTdW1tYXJ5UkUsIEtleXNbaV0pID8gU0VudHJpZXMgOiBDRW50cmllcykucHVzaChbS2V5c1tpXSwgd2IuUHJvcHNbS2V5c1tpXV1dKTtcblx0fVxuXHRpZih3Yi5DdXN0cHJvcHMpIHtcblx0XHRLZXlzID0ga2V5cyh3Yi5DdXN0cHJvcHMpO1xuXHRcdC8vICRGbG93SWdub3JlXG5cdFx0Zm9yKGkgPSAwOyBpIDwgS2V5cy5sZW5ndGg7ICsraSkgaWYoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCgod2IuUHJvcHN8fHt9KSwgS2V5c1tpXSkpIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoRG9jU3VtbWFyeVJFLCBLZXlzW2ldKSA/IERTRW50cmllcyA6IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChTdW1tYXJ5UkUsIEtleXNbaV0pID8gU0VudHJpZXMgOiBDRW50cmllcykucHVzaChbS2V5c1tpXSwgd2IuQ3VzdHByb3BzW0tleXNbaV1dXSk7XG5cdH1cblx0dmFyIENFbnRyaWVzMiA9IFtdO1xuXHRmb3IoaSA9IDA7IGkgPCBDRW50cmllcy5sZW5ndGg7ICsraSkge1xuXHRcdGlmKFhMU1BTU2tpcC5pbmRleE9mKENFbnRyaWVzW2ldWzBdKSA+IC0xKSBjb250aW51ZTtcblx0XHRpZihDRW50cmllc1tpXVsxXSA9PSBudWxsKSBjb250aW51ZTtcblx0XHRDRW50cmllczIucHVzaChDRW50cmllc1tpXSk7XG5cdH1cblx0aWYoU0VudHJpZXMubGVuZ3RoKSBDRkIudXRpbHMuY2ZiX2FkZChjZmIsIFwiL1xcdTAwMDVTdW1tYXJ5SW5mb3JtYXRpb25cIiwgd3JpdGVfUHJvcGVydHlTZXRTdHJlYW0oU0VudHJpZXMsIFBTQ0xTSUQuU0ksIFN1bW1hcnlSRSwgU3VtbWFyeVBJRFNJKSk7XG5cdGlmKERTRW50cmllcy5sZW5ndGggfHwgQ0VudHJpZXMyLmxlbmd0aCkgQ0ZCLnV0aWxzLmNmYl9hZGQoY2ZiLCBcIi9cXHUwMDA1RG9jdW1lbnRTdW1tYXJ5SW5mb3JtYXRpb25cIiwgd3JpdGVfUHJvcGVydHlTZXRTdHJlYW0oRFNFbnRyaWVzLCBQU0NMU0lELkRTSSwgRG9jU3VtbWFyeVJFLCBEb2NTdW1tYXJ5UElERFNJLCBDRW50cmllczIubGVuZ3RoID8gQ0VudHJpZXMyIDogbnVsbCwgUFNDTFNJRC5VREkpKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VfeGxzY2ZiKGNmYiwgb3B0aW9ucykge1xuaWYoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcbmZpeF9yZWFkX29wdHMob3B0aW9ucyk7XG5yZXNldF9jcCgpO1xuaWYob3B0aW9ucy5jb2RlcGFnZSkgc2V0X2Fuc2kob3B0aW9ucy5jb2RlcGFnZSk7XG52YXIgQ29tcE9iaiwgV0I7XG5pZihjZmIuRnVsbFBhdGhzKSB7XG5cdGlmKENGQi5maW5kKGNmYiwgJy9lbmNyeXB0aW9uJykpIHRocm93IG5ldyBFcnJvcihcIkZpbGUgaXMgcGFzc3dvcmQtcHJvdGVjdGVkXCIpO1xuXHRDb21wT2JqID0gQ0ZCLmZpbmQoY2ZiLCAnIUNvbXBPYmonKTtcblx0V0IgPSBDRkIuZmluZChjZmIsICcvV29ya2Jvb2snKSB8fCBDRkIuZmluZChjZmIsICcvQm9vaycpO1xufSBlbHNlIHtcblx0c3dpdGNoKG9wdGlvbnMudHlwZSkge1xuXHRcdGNhc2UgJ2Jhc2U2NCc6IGNmYiA9IHMyYShCYXNlNjQuZGVjb2RlKGNmYikpOyBicmVhaztcblx0XHRjYXNlICdiaW5hcnknOiBjZmIgPSBzMmEoY2ZiKTsgYnJlYWs7XG5cdFx0Y2FzZSAnYnVmZmVyJzogYnJlYWs7XG5cdFx0Y2FzZSAnYXJyYXknOiBpZighQXJyYXkuaXNBcnJheShjZmIpKSBjZmIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChjZmIpOyBicmVhaztcblx0fVxuXHRwcmVwX2Jsb2IoY2ZiLCAwKTtcblx0V0IgPSAoe2NvbnRlbnQ6IGNmYn0pO1xufVxudmFyIFdvcmtib29rUDtcblxudmFyIF9kYXRhO1xuaWYoQ29tcE9iaikgcGFyc2VfY29tcG9iaihDb21wT2JqKTtcbmlmKG9wdGlvbnMuYm9va1Byb3BzICYmICFvcHRpb25zLmJvb2tTaGVldHMpIFdvcmtib29rUCA9ICh7fSk7XG5lbHNlIHtcblx0dmFyIFQgPSBoYXNfYnVmID8gJ2J1ZmZlcicgOiAnYXJyYXknO1xuXHRpZihXQiAmJiBXQi5jb250ZW50KSBXb3JrYm9va1AgPSBwYXJzZV93b3JrYm9vayhXQi5jb250ZW50LCBvcHRpb25zKTtcblx0LyogUXVhdHRybyBQcm8gNy04ICovXG5cdGVsc2UgaWYoKF9kYXRhPUNGQi5maW5kKGNmYiwgJ1BlcmZlY3RPZmZpY2VfTUFJTicpKSAmJiBfZGF0YS5jb250ZW50KSBXb3JrYm9va1AgPSBXS18udG9fd29ya2Jvb2soX2RhdGEuY29udGVudCwgKG9wdGlvbnMudHlwZSA9IFQsIG9wdGlvbnMpKTtcblx0LyogUXVhdHRybyBQcm8gOSAqL1xuXHRlbHNlIGlmKChfZGF0YT1DRkIuZmluZChjZmIsICdOYXRpdmVDb250ZW50X01BSU4nKSkgJiYgX2RhdGEuY29udGVudCkgV29ya2Jvb2tQID0gV0tfLnRvX3dvcmtib29rKF9kYXRhLmNvbnRlbnQsIChvcHRpb25zLnR5cGUgPSBULCBvcHRpb25zKSk7XG5cdGVsc2UgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgV29ya2Jvb2sgc3RyZWFtXCIpO1xuXHRpZihvcHRpb25zLmJvb2tWQkEgJiYgY2ZiLkZ1bGxQYXRocyAmJiBDRkIuZmluZChjZmIsICcvX1ZCQV9QUk9KRUNUX0NVUi9WQkEvZGlyJykpIFdvcmtib29rUC52YmFyYXcgPSBtYWtlX3ZiYV94bHMoY2ZiKTtcbn1cblxudmFyIHByb3BzID0ge307XG5pZihjZmIuRnVsbFBhdGhzKSBwYXJzZV94bHNfcHJvcHMoY2ZiLCBwcm9wcywgb3B0aW9ucyk7XG5cbldvcmtib29rUC5Qcm9wcyA9IFdvcmtib29rUC5DdXN0cHJvcHMgPSBwcm9wczsgLyogVE9ETzogc3BsaXQgdXAgcHJvcGVydGllcyAqL1xuaWYob3B0aW9ucy5ib29rRmlsZXMpIFdvcmtib29rUC5jZmIgPSBjZmI7XG4vKldvcmtib29rUC5Db21wT2JqUCA9IENvbXBPYmpQOyAvLyBUT0RPOiBzdG9yYWdlPyAqL1xucmV0dXJuIFdvcmtib29rUDtcbn1cblxuXG5mdW5jdGlvbiB3cml0ZV94bHNjZmIod2IsIG9wdHMpIHtcblx0dmFyIG8gPSBvcHRzIHx8IHt9O1xuXHR2YXIgY2ZiID0gQ0ZCLnV0aWxzLmNmYl9uZXcoe3Jvb3Q6XCJSXCJ9KTtcblx0dmFyIHdicGF0aCA9IFwiL1dvcmtib29rXCI7XG5cdHN3aXRjaChvLmJvb2tUeXBlIHx8IFwieGxzXCIpIHtcblx0XHRjYXNlIFwieGxzXCI6IG8uYm9va1R5cGUgPSBcImJpZmY4XCI7XG5cdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdGNhc2UgXCJ4bGFcIjogaWYoIW8uYm9va1R5cGUpIG8uYm9va1R5cGUgPSBcInhsYVwiO1xuXHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRjYXNlIFwiYmlmZjhcIjogd2JwYXRoID0gXCIvV29ya2Jvb2tcIjsgby5iaWZmID0gODsgYnJlYWs7XG5cdFx0Y2FzZSBcImJpZmY1XCI6IHdicGF0aCA9IFwiL0Jvb2tcIjsgby5iaWZmID0gNTsgYnJlYWs7XG5cdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCB0eXBlIFwiICsgby5ib29rVHlwZSArIFwiIGZvciBYTFMgQ0ZCXCIpO1xuXHR9XG5cdENGQi51dGlscy5jZmJfYWRkKGNmYiwgd2JwYXRoLCB3cml0ZV9iaWZmX2J1Zih3YiwgbykpO1xuXHRpZihvLmJpZmYgPT0gOCAmJiAod2IuUHJvcHMgfHwgd2IuQ3VzdHByb3BzKSkgd3JpdGVfeGxzX3Byb3BzKHdiLCBjZmIpO1xuXHQvLyBUT0RPOiBTSSwgRFNJLCBDT1xuXHRpZihvLmJpZmYgPT0gOCAmJiB3Yi52YmFyYXcpIGZpbGxfdmJhX3hscyhjZmIsIENGQi5yZWFkKHdiLnZiYXJhdywge3R5cGU6IHR5cGVvZiB3Yi52YmFyYXcgPT0gXCJzdHJpbmdcIiA/IFwiYmluYXJ5XCIgOiBcImJ1ZmZlclwifSkpO1xuXHRyZXR1cm4gY2ZiO1xufVxuLyogW01TLVhMU0JdIDIuMyBSZWNvcmQgRW51bWVyYXRpb24gKi9cbnZhciBYTFNCUmVjb3JkRW51bSA9IHtcbjB4MDAwMDogeyBuOlwiQnJ0Um93SGRyXCIsIGY6cGFyc2VfQnJ0Um93SGRyIH0sXG4weDAwMDE6IHsgbjpcIkJydENlbGxCbGFua1wiLCBmOnBhcnNlX0JydENlbGxCbGFuayB9LFxuMHgwMDAyOiB7IG46XCJCcnRDZWxsUmtcIiwgZjpwYXJzZV9CcnRDZWxsUmsgfSxcbjB4MDAwMzogeyBuOlwiQnJ0Q2VsbEVycm9yXCIsIGY6cGFyc2VfQnJ0Q2VsbEVycm9yIH0sXG4weDAwMDQ6IHsgbjpcIkJydENlbGxCb29sXCIsIGY6cGFyc2VfQnJ0Q2VsbEJvb2wgfSxcbjB4MDAwNTogeyBuOlwiQnJ0Q2VsbFJlYWxcIiwgZjpwYXJzZV9CcnRDZWxsUmVhbCB9LFxuMHgwMDA2OiB7IG46XCJCcnRDZWxsU3RcIiwgZjpwYXJzZV9CcnRDZWxsU3QgfSxcbjB4MDAwNzogeyBuOlwiQnJ0Q2VsbElzc3RcIiwgZjpwYXJzZV9CcnRDZWxsSXNzdCB9LFxuMHgwMDA4OiB7IG46XCJCcnRGbWxhU3RyaW5nXCIsIGY6cGFyc2VfQnJ0Rm1sYVN0cmluZyB9LFxuMHgwMDA5OiB7IG46XCJCcnRGbWxhTnVtXCIsIGY6cGFyc2VfQnJ0Rm1sYU51bSB9LFxuMHgwMDBBOiB7IG46XCJCcnRGbWxhQm9vbFwiLCBmOnBhcnNlX0JydEZtbGFCb29sIH0sXG4weDAwMEI6IHsgbjpcIkJydEZtbGFFcnJvclwiLCBmOnBhcnNlX0JydEZtbGFFcnJvciB9LFxuMHgwMDBDOiB7IG46XCJCcnRTaG9ydEJsYW5rXCIsIGY6cGFyc2VfQnJ0U2hvcnRCbGFuayB9LFxuMHgwMDBEOiB7IG46XCJCcnRTaG9ydFJrXCIsIGY6cGFyc2VfQnJ0U2hvcnRSayB9LFxuMHgwMDBFOiB7IG46XCJCcnRTaG9ydEVycm9yXCIsIGY6cGFyc2VfQnJ0U2hvcnRFcnJvciB9LFxuMHgwMDBGOiB7IG46XCJCcnRTaG9ydEJvb2xcIiwgZjpwYXJzZV9CcnRTaG9ydEJvb2wgfSxcbjB4MDAxMDogeyBuOlwiQnJ0U2hvcnRSZWFsXCIsIGY6cGFyc2VfQnJ0U2hvcnRSZWFsIH0sXG4weDAwMTE6IHsgbjpcIkJydFNob3J0U3RcIiwgZjpwYXJzZV9CcnRTaG9ydFN0IH0sXG4weDAwMTI6IHsgbjpcIkJydFNob3J0SXNzdFwiLCBmOnBhcnNlX0JydFNob3J0SXNzdCB9LFxuMHgwMDEzOiB7IG46XCJCcnRTU1RJdGVtXCIsIGY6cGFyc2VfUmljaFN0ciB9LFxuMHgwMDE0OiB7IG46XCJCcnRQQ0RJTWlzc2luZ1wiIH0sXG4weDAwMTU6IHsgbjpcIkJydFBDRElOdW1iZXJcIiB9LFxuMHgwMDE2OiB7IG46XCJCcnRQQ0RJQm9vbGVhblwiIH0sXG4weDAwMTc6IHsgbjpcIkJydFBDRElFcnJvclwiIH0sXG4weDAwMTg6IHsgbjpcIkJydFBDRElTdHJpbmdcIiB9LFxuMHgwMDE5OiB7IG46XCJCcnRQQ0RJRGF0ZXRpbWVcIiB9LFxuMHgwMDFBOiB7IG46XCJCcnRQQ0RJSW5kZXhcIiB9LFxuMHgwMDFCOiB7IG46XCJCcnRQQ0RJQU1pc3NpbmdcIiB9LFxuMHgwMDFDOiB7IG46XCJCcnRQQ0RJQU51bWJlclwiIH0sXG4weDAwMUQ6IHsgbjpcIkJydFBDRElBQm9vbGVhblwiIH0sXG4weDAwMUU6IHsgbjpcIkJydFBDRElBRXJyb3JcIiB9LFxuMHgwMDFGOiB7IG46XCJCcnRQQ0RJQVN0cmluZ1wiIH0sXG4weDAwMjA6IHsgbjpcIkJydFBDRElBRGF0ZXRpbWVcIiB9LFxuMHgwMDIxOiB7IG46XCJCcnRQQ1JSZWNvcmRcIiB9LFxuMHgwMDIyOiB7IG46XCJCcnRQQ1JSZWNvcmREdFwiIH0sXG4weDAwMjM6IHsgbjpcIkJydEZSVEJlZ2luXCIgfSxcbjB4MDAyNDogeyBuOlwiQnJ0RlJURW5kXCIgfSxcbjB4MDAyNTogeyBuOlwiQnJ0QUNCZWdpblwiIH0sXG4weDAwMjY6IHsgbjpcIkJydEFDRW5kXCIgfSxcbjB4MDAyNzogeyBuOlwiQnJ0TmFtZVwiLCBmOnBhcnNlX0JydE5hbWUgfSxcbjB4MDAyODogeyBuOlwiQnJ0SW5kZXhSb3dCbG9ja1wiIH0sXG4weDAwMkE6IHsgbjpcIkJydEluZGV4QmxvY2tcIiB9LFxuMHgwMDJCOiB7IG46XCJCcnRGb250XCIsIGY6cGFyc2VfQnJ0Rm9udCB9LFxuMHgwMDJDOiB7IG46XCJCcnRGbXRcIiwgZjpwYXJzZV9CcnRGbXQgfSxcbjB4MDAyRDogeyBuOlwiQnJ0RmlsbFwiLCBmOnBhcnNlX0JydEZpbGwgfSxcbjB4MDAyRTogeyBuOlwiQnJ0Qm9yZGVyXCIsIGY6cGFyc2VfQnJ0Qm9yZGVyIH0sXG4weDAwMkY6IHsgbjpcIkJydFhGXCIsIGY6cGFyc2VfQnJ0WEYgfSxcbjB4MDAzMDogeyBuOlwiQnJ0U3R5bGVcIiB9LFxuMHgwMDMxOiB7IG46XCJCcnRDZWxsTWV0YVwiIH0sXG4weDAwMzI6IHsgbjpcIkJydFZhbHVlTWV0YVwiIH0sXG4weDAwMzM6IHsgbjpcIkJydE1kYlwiIH0sXG4weDAwMzQ6IHsgbjpcIkJydEJlZ2luRm1kXCIgfSxcbjB4MDAzNTogeyBuOlwiQnJ0RW5kRm1kXCIgfSxcbjB4MDAzNjogeyBuOlwiQnJ0QmVnaW5NZHhcIiB9LFxuMHgwMDM3OiB7IG46XCJCcnRFbmRNZHhcIiB9LFxuMHgwMDM4OiB7IG46XCJCcnRCZWdpbk1keFR1cGxlXCIgfSxcbjB4MDAzOTogeyBuOlwiQnJ0RW5kTWR4VHVwbGVcIiB9LFxuMHgwMDNBOiB7IG46XCJCcnRNZHhNYnJJc3RyXCIgfSxcbjB4MDAzQjogeyBuOlwiQnJ0U3RyXCIgfSxcbjB4MDAzQzogeyBuOlwiQnJ0Q29sSW5mb1wiLCBmOnBhcnNlX0NvbEluZm8gfSxcbjB4MDAzRTogeyBuOlwiQnJ0Q2VsbFJTdHJpbmdcIiB9LFxuMHgwMDNGOiB7IG46XCJCcnRDYWxjQ2hhaW5JdGVtJFwiLCBmOnBhcnNlX0JydENhbGNDaGFpbkl0ZW0kIH0sXG4weDAwNDA6IHsgbjpcIkJydERWYWxcIiwgZjpwYXJzZV9CcnREVmFsIH0sXG4weDAwNDE6IHsgbjpcIkJydFN4dmNlbGxOdW1cIiB9LFxuMHgwMDQyOiB7IG46XCJCcnRTeHZjZWxsU3RyXCIgfSxcbjB4MDA0MzogeyBuOlwiQnJ0U3h2Y2VsbEJvb2xcIiB9LFxuMHgwMDQ0OiB7IG46XCJCcnRTeHZjZWxsRXJyXCIgfSxcbjB4MDA0NTogeyBuOlwiQnJ0U3h2Y2VsbERhdGVcIiB9LFxuMHgwMDQ2OiB7IG46XCJCcnRTeHZjZWxsTmlsXCIgfSxcbjB4MDA4MDogeyBuOlwiQnJ0RmlsZVZlcnNpb25cIiB9LFxuMHgwMDgxOiB7IG46XCJCcnRCZWdpblNoZWV0XCIgfSxcbjB4MDA4MjogeyBuOlwiQnJ0RW5kU2hlZXRcIiB9LFxuMHgwMDgzOiB7IG46XCJCcnRCZWdpbkJvb2tcIiwgZjpwYXJzZW5vb3AsIHA6MCB9LFxuMHgwMDg0OiB7IG46XCJCcnRFbmRCb29rXCIgfSxcbjB4MDA4NTogeyBuOlwiQnJ0QmVnaW5Xc1ZpZXdzXCIgfSxcbjB4MDA4NjogeyBuOlwiQnJ0RW5kV3NWaWV3c1wiIH0sXG4weDAwODc6IHsgbjpcIkJydEJlZ2luQm9va1ZpZXdzXCIgfSxcbjB4MDA4ODogeyBuOlwiQnJ0RW5kQm9va1ZpZXdzXCIgfSxcbjB4MDA4OTogeyBuOlwiQnJ0QmVnaW5Xc1ZpZXdcIiwgZjpwYXJzZV9CcnRCZWdpbldzVmlldyB9LFxuMHgwMDhBOiB7IG46XCJCcnRFbmRXc1ZpZXdcIiB9LFxuMHgwMDhCOiB7IG46XCJCcnRCZWdpbkNzVmlld3NcIiB9LFxuMHgwMDhDOiB7IG46XCJCcnRFbmRDc1ZpZXdzXCIgfSxcbjB4MDA4RDogeyBuOlwiQnJ0QmVnaW5Dc1ZpZXdcIiB9LFxuMHgwMDhFOiB7IG46XCJCcnRFbmRDc1ZpZXdcIiB9LFxuMHgwMDhGOiB7IG46XCJCcnRCZWdpbkJ1bmRsZVNoc1wiIH0sXG4weDAwOTA6IHsgbjpcIkJydEVuZEJ1bmRsZVNoc1wiIH0sXG4weDAwOTE6IHsgbjpcIkJydEJlZ2luU2hlZXREYXRhXCIgfSxcbjB4MDA5MjogeyBuOlwiQnJ0RW5kU2hlZXREYXRhXCIgfSxcbjB4MDA5MzogeyBuOlwiQnJ0V3NQcm9wXCIsIGY6cGFyc2VfQnJ0V3NQcm9wIH0sXG4weDAwOTQ6IHsgbjpcIkJydFdzRGltXCIsIGY6cGFyc2VfQnJ0V3NEaW0sIHA6MTYgfSxcbjB4MDA5NzogeyBuOlwiQnJ0UGFuZVwiLCBmOnBhcnNlX0JydFBhbmUgfSxcbjB4MDA5ODogeyBuOlwiQnJ0U2VsXCIgfSxcbjB4MDA5OTogeyBuOlwiQnJ0V2JQcm9wXCIsIGY6cGFyc2VfQnJ0V2JQcm9wIH0sXG4weDAwOUE6IHsgbjpcIkJydFdiRmFjdG9pZFwiIH0sXG4weDAwOUI6IHsgbjpcIkJydEZpbGVSZWNvdmVyXCIgfSxcbjB4MDA5QzogeyBuOlwiQnJ0QnVuZGxlU2hcIiwgZjpwYXJzZV9CcnRCdW5kbGVTaCB9LFxuMHgwMDlEOiB7IG46XCJCcnRDYWxjUHJvcFwiIH0sXG4weDAwOUU6IHsgbjpcIkJydEJvb2tWaWV3XCIgfSxcbjB4MDA5RjogeyBuOlwiQnJ0QmVnaW5Tc3RcIiwgZjpwYXJzZV9CcnRCZWdpblNzdCB9LFxuMHgwMEEwOiB7IG46XCJCcnRFbmRTc3RcIiB9LFxuMHgwMEExOiB7IG46XCJCcnRCZWdpbkFGaWx0ZXJcIiwgZjpwYXJzZV9VbmNoZWNrZWRSZlggfSxcbjB4MDBBMjogeyBuOlwiQnJ0RW5kQUZpbHRlclwiIH0sXG4weDAwQTM6IHsgbjpcIkJydEJlZ2luRmlsdGVyQ29sdW1uXCIgfSxcbjB4MDBBNDogeyBuOlwiQnJ0RW5kRmlsdGVyQ29sdW1uXCIgfSxcbjB4MDBBNTogeyBuOlwiQnJ0QmVnaW5GaWx0ZXJzXCIgfSxcbjB4MDBBNjogeyBuOlwiQnJ0RW5kRmlsdGVyc1wiIH0sXG4weDAwQTc6IHsgbjpcIkJydEZpbHRlclwiIH0sXG4weDAwQTg6IHsgbjpcIkJydENvbG9yRmlsdGVyXCIgfSxcbjB4MDBBOTogeyBuOlwiQnJ0SWNvbkZpbHRlclwiIH0sXG4weDAwQUE6IHsgbjpcIkJydFRvcDEwRmlsdGVyXCIgfSxcbjB4MDBBQjogeyBuOlwiQnJ0RHluYW1pY0ZpbHRlclwiIH0sXG4weDAwQUM6IHsgbjpcIkJydEJlZ2luQ3VzdG9tRmlsdGVyc1wiIH0sXG4weDAwQUQ6IHsgbjpcIkJydEVuZEN1c3RvbUZpbHRlcnNcIiB9LFxuMHgwMEFFOiB7IG46XCJCcnRDdXN0b21GaWx0ZXJcIiB9LFxuMHgwMEFGOiB7IG46XCJCcnRBRmlsdGVyRGF0ZUdyb3VwSXRlbVwiIH0sXG4weDAwQjA6IHsgbjpcIkJydE1lcmdlQ2VsbFwiLCBmOnBhcnNlX0JydE1lcmdlQ2VsbCB9LFxuMHgwMEIxOiB7IG46XCJCcnRCZWdpbk1lcmdlQ2VsbHNcIiB9LFxuMHgwMEIyOiB7IG46XCJCcnRFbmRNZXJnZUNlbGxzXCIgfSxcbjB4MDBCMzogeyBuOlwiQnJ0QmVnaW5QaXZvdENhY2hlRGVmXCIgfSxcbjB4MDBCNDogeyBuOlwiQnJ0RW5kUGl2b3RDYWNoZURlZlwiIH0sXG4weDAwQjU6IHsgbjpcIkJydEJlZ2luUENERmllbGRzXCIgfSxcbjB4MDBCNjogeyBuOlwiQnJ0RW5kUENERmllbGRzXCIgfSxcbjB4MDBCNzogeyBuOlwiQnJ0QmVnaW5QQ0RGaWVsZFwiIH0sXG4weDAwQjg6IHsgbjpcIkJydEVuZFBDREZpZWxkXCIgfSxcbjB4MDBCOTogeyBuOlwiQnJ0QmVnaW5QQ0RTb3VyY2VcIiB9LFxuMHgwMEJBOiB7IG46XCJCcnRFbmRQQ0RTb3VyY2VcIiB9LFxuMHgwMEJCOiB7IG46XCJCcnRCZWdpblBDRFNSYW5nZVwiIH0sXG4weDAwQkM6IHsgbjpcIkJydEVuZFBDRFNSYW5nZVwiIH0sXG4weDAwQkQ6IHsgbjpcIkJydEJlZ2luUENERkF0YmxcIiB9LFxuMHgwMEJFOiB7IG46XCJCcnRFbmRQQ0RGQXRibFwiIH0sXG4weDAwQkY6IHsgbjpcIkJydEJlZ2luUENESVJ1blwiIH0sXG4weDAwQzA6IHsgbjpcIkJydEVuZFBDRElSdW5cIiB9LFxuMHgwMEMxOiB7IG46XCJCcnRCZWdpblBpdm90Q2FjaGVSZWNvcmRzXCIgfSxcbjB4MDBDMjogeyBuOlwiQnJ0RW5kUGl2b3RDYWNoZVJlY29yZHNcIiB9LFxuMHgwMEMzOiB7IG46XCJCcnRCZWdpblBDREhpZXJhcmNoaWVzXCIgfSxcbjB4MDBDNDogeyBuOlwiQnJ0RW5kUENESGllcmFyY2hpZXNcIiB9LFxuMHgwMEM1OiB7IG46XCJCcnRCZWdpblBDREhpZXJhcmNoeVwiIH0sXG4weDAwQzY6IHsgbjpcIkJydEVuZFBDREhpZXJhcmNoeVwiIH0sXG4weDAwQzc6IHsgbjpcIkJydEJlZ2luUENESEZpZWxkc1VzYWdlXCIgfSxcbjB4MDBDODogeyBuOlwiQnJ0RW5kUENESEZpZWxkc1VzYWdlXCIgfSxcbjB4MDBDOTogeyBuOlwiQnJ0QmVnaW5FeHRDb25uZWN0aW9uXCIgfSxcbjB4MDBDQTogeyBuOlwiQnJ0RW5kRXh0Q29ubmVjdGlvblwiIH0sXG4weDAwQ0I6IHsgbjpcIkJydEJlZ2luRUNEYlByb3BzXCIgfSxcbjB4MDBDQzogeyBuOlwiQnJ0RW5kRUNEYlByb3BzXCIgfSxcbjB4MDBDRDogeyBuOlwiQnJ0QmVnaW5FQ09sYXBQcm9wc1wiIH0sXG4weDAwQ0U6IHsgbjpcIkJydEVuZEVDT2xhcFByb3BzXCIgfSxcbjB4MDBDRjogeyBuOlwiQnJ0QmVnaW5QQ0RTQ29uc29sXCIgfSxcbjB4MDBEMDogeyBuOlwiQnJ0RW5kUENEU0NvbnNvbFwiIH0sXG4weDAwRDE6IHsgbjpcIkJydEJlZ2luUENEU0NQYWdlc1wiIH0sXG4weDAwRDI6IHsgbjpcIkJydEVuZFBDRFNDUGFnZXNcIiB9LFxuMHgwMEQzOiB7IG46XCJCcnRCZWdpblBDRFNDUGFnZVwiIH0sXG4weDAwRDQ6IHsgbjpcIkJydEVuZFBDRFNDUGFnZVwiIH0sXG4weDAwRDU6IHsgbjpcIkJydEJlZ2luUENEU0NQSXRlbVwiIH0sXG4weDAwRDY6IHsgbjpcIkJydEVuZFBDRFNDUEl0ZW1cIiB9LFxuMHgwMEQ3OiB7IG46XCJCcnRCZWdpblBDRFNDU2V0c1wiIH0sXG4weDAwRDg6IHsgbjpcIkJydEVuZFBDRFNDU2V0c1wiIH0sXG4weDAwRDk6IHsgbjpcIkJydEJlZ2luUENEU0NTZXRcIiB9LFxuMHgwMERBOiB7IG46XCJCcnRFbmRQQ0RTQ1NldFwiIH0sXG4weDAwREI6IHsgbjpcIkJydEJlZ2luUENERkdyb3VwXCIgfSxcbjB4MDBEQzogeyBuOlwiQnJ0RW5kUENERkdyb3VwXCIgfSxcbjB4MDBERDogeyBuOlwiQnJ0QmVnaW5QQ0RGR0l0ZW1zXCIgfSxcbjB4MDBERTogeyBuOlwiQnJ0RW5kUENERkdJdGVtc1wiIH0sXG4weDAwREY6IHsgbjpcIkJydEJlZ2luUENERkdSYW5nZVwiIH0sXG4weDAwRTA6IHsgbjpcIkJydEVuZFBDREZHUmFuZ2VcIiB9LFxuMHgwMEUxOiB7IG46XCJCcnRCZWdpblBDREZHRGlzY3JldGVcIiB9LFxuMHgwMEUyOiB7IG46XCJCcnRFbmRQQ0RGR0Rpc2NyZXRlXCIgfSxcbjB4MDBFMzogeyBuOlwiQnJ0QmVnaW5QQ0RTRFR1cGxlQ2FjaGVcIiB9LFxuMHgwMEU0OiB7IG46XCJCcnRFbmRQQ0RTRFR1cGxlQ2FjaGVcIiB9LFxuMHgwMEU1OiB7IG46XCJCcnRCZWdpblBDRFNEVENFbnRyaWVzXCIgfSxcbjB4MDBFNjogeyBuOlwiQnJ0RW5kUENEU0RUQ0VudHJpZXNcIiB9LFxuMHgwMEU3OiB7IG46XCJCcnRCZWdpblBDRFNEVENFTWVtYmVyc1wiIH0sXG4weDAwRTg6IHsgbjpcIkJydEVuZFBDRFNEVENFTWVtYmVyc1wiIH0sXG4weDAwRTk6IHsgbjpcIkJydEJlZ2luUENEU0RUQ0VNZW1iZXJcIiB9LFxuMHgwMEVBOiB7IG46XCJCcnRFbmRQQ0RTRFRDRU1lbWJlclwiIH0sXG4weDAwRUI6IHsgbjpcIkJydEJlZ2luUENEU0RUQ1F1ZXJpZXNcIiB9LFxuMHgwMEVDOiB7IG46XCJCcnRFbmRQQ0RTRFRDUXVlcmllc1wiIH0sXG4weDAwRUQ6IHsgbjpcIkJydEJlZ2luUENEU0RUQ1F1ZXJ5XCIgfSxcbjB4MDBFRTogeyBuOlwiQnJ0RW5kUENEU0RUQ1F1ZXJ5XCIgfSxcbjB4MDBFRjogeyBuOlwiQnJ0QmVnaW5QQ0RTRFRDU2V0c1wiIH0sXG4weDAwRjA6IHsgbjpcIkJydEVuZFBDRFNEVENTZXRzXCIgfSxcbjB4MDBGMTogeyBuOlwiQnJ0QmVnaW5QQ0RTRFRDU2V0XCIgfSxcbjB4MDBGMjogeyBuOlwiQnJ0RW5kUENEU0RUQ1NldFwiIH0sXG4weDAwRjM6IHsgbjpcIkJydEJlZ2luUENEQ2FsY0l0ZW1zXCIgfSxcbjB4MDBGNDogeyBuOlwiQnJ0RW5kUENEQ2FsY0l0ZW1zXCIgfSxcbjB4MDBGNTogeyBuOlwiQnJ0QmVnaW5QQ0RDYWxjSXRlbVwiIH0sXG4weDAwRjY6IHsgbjpcIkJydEVuZFBDRENhbGNJdGVtXCIgfSxcbjB4MDBGNzogeyBuOlwiQnJ0QmVnaW5QUnVsZVwiIH0sXG4weDAwRjg6IHsgbjpcIkJydEVuZFBSdWxlXCIgfSxcbjB4MDBGOTogeyBuOlwiQnJ0QmVnaW5QUkZpbHRlcnNcIiB9LFxuMHgwMEZBOiB7IG46XCJCcnRFbmRQUkZpbHRlcnNcIiB9LFxuMHgwMEZCOiB7IG46XCJCcnRCZWdpblBSRmlsdGVyXCIgfSxcbjB4MDBGQzogeyBuOlwiQnJ0RW5kUFJGaWx0ZXJcIiB9LFxuMHgwMEZEOiB7IG46XCJCcnRCZWdpblBOYW1lc1wiIH0sXG4weDAwRkU6IHsgbjpcIkJydEVuZFBOYW1lc1wiIH0sXG4weDAwRkY6IHsgbjpcIkJydEJlZ2luUE5hbWVcIiB9LFxuMHgwMTAwOiB7IG46XCJCcnRFbmRQTmFtZVwiIH0sXG4weDAxMDE6IHsgbjpcIkJydEJlZ2luUE5QYWlyc1wiIH0sXG4weDAxMDI6IHsgbjpcIkJydEVuZFBOUGFpcnNcIiB9LFxuMHgwMTAzOiB7IG46XCJCcnRCZWdpblBOUGFpclwiIH0sXG4weDAxMDQ6IHsgbjpcIkJydEVuZFBOUGFpclwiIH0sXG4weDAxMDU6IHsgbjpcIkJydEJlZ2luRUNXZWJQcm9wc1wiIH0sXG4weDAxMDY6IHsgbjpcIkJydEVuZEVDV2ViUHJvcHNcIiB9LFxuMHgwMTA3OiB7IG46XCJCcnRCZWdpbkVjV3BUYWJsZXNcIiB9LFxuMHgwMTA4OiB7IG46XCJCcnRFbmRFQ1dQVGFibGVzXCIgfSxcbjB4MDEwOTogeyBuOlwiQnJ0QmVnaW5FQ1BhcmFtc1wiIH0sXG4weDAxMEE6IHsgbjpcIkJydEVuZEVDUGFyYW1zXCIgfSxcbjB4MDEwQjogeyBuOlwiQnJ0QmVnaW5FQ1BhcmFtXCIgfSxcbjB4MDEwQzogeyBuOlwiQnJ0RW5kRUNQYXJhbVwiIH0sXG4weDAxMEQ6IHsgbjpcIkJydEJlZ2luUENES1BJc1wiIH0sXG4weDAxMEU6IHsgbjpcIkJydEVuZFBDREtQSXNcIiB9LFxuMHgwMTBGOiB7IG46XCJCcnRCZWdpblBDREtQSVwiIH0sXG4weDAxMTA6IHsgbjpcIkJydEVuZFBDREtQSVwiIH0sXG4weDAxMTE6IHsgbjpcIkJydEJlZ2luRGltc1wiIH0sXG4weDAxMTI6IHsgbjpcIkJydEVuZERpbXNcIiB9LFxuMHgwMTEzOiB7IG46XCJCcnRCZWdpbkRpbVwiIH0sXG4weDAxMTQ6IHsgbjpcIkJydEVuZERpbVwiIH0sXG4weDAxMTU6IHsgbjpcIkJydEluZGV4UGFydEVuZFwiIH0sXG4weDAxMTY6IHsgbjpcIkJydEJlZ2luU3R5bGVTaGVldFwiIH0sXG4weDAxMTc6IHsgbjpcIkJydEVuZFN0eWxlU2hlZXRcIiB9LFxuMHgwMTE4OiB7IG46XCJCcnRCZWdpblNYVmlld1wiIH0sXG4weDAxMTk6IHsgbjpcIkJydEVuZFNYVklcIiB9LFxuMHgwMTFBOiB7IG46XCJCcnRCZWdpblNYVklcIiB9LFxuMHgwMTFCOiB7IG46XCJCcnRCZWdpblNYVklzXCIgfSxcbjB4MDExQzogeyBuOlwiQnJ0RW5kU1hWSXNcIiB9LFxuMHgwMTFEOiB7IG46XCJCcnRCZWdpblNYVkRcIiB9LFxuMHgwMTFFOiB7IG46XCJCcnRFbmRTWFZEXCIgfSxcbjB4MDExRjogeyBuOlwiQnJ0QmVnaW5TWFZEc1wiIH0sXG4weDAxMjA6IHsgbjpcIkJydEVuZFNYVkRzXCIgfSxcbjB4MDEyMTogeyBuOlwiQnJ0QmVnaW5TWFBJXCIgfSxcbjB4MDEyMjogeyBuOlwiQnJ0RW5kU1hQSVwiIH0sXG4weDAxMjM6IHsgbjpcIkJydEJlZ2luU1hQSXNcIiB9LFxuMHgwMTI0OiB7IG46XCJCcnRFbmRTWFBJc1wiIH0sXG4weDAxMjU6IHsgbjpcIkJydEJlZ2luU1hESVwiIH0sXG4weDAxMjY6IHsgbjpcIkJydEVuZFNYRElcIiB9LFxuMHgwMTI3OiB7IG46XCJCcnRCZWdpblNYRElzXCIgfSxcbjB4MDEyODogeyBuOlwiQnJ0RW5kU1hESXNcIiB9LFxuMHgwMTI5OiB7IG46XCJCcnRCZWdpblNYTElcIiB9LFxuMHgwMTJBOiB7IG46XCJCcnRFbmRTWExJXCIgfSxcbjB4MDEyQjogeyBuOlwiQnJ0QmVnaW5TWExJUndzXCIgfSxcbjB4MDEyQzogeyBuOlwiQnJ0RW5kU1hMSVJ3c1wiIH0sXG4weDAxMkQ6IHsgbjpcIkJydEJlZ2luU1hMSUNvbHNcIiB9LFxuMHgwMTJFOiB7IG46XCJCcnRFbmRTWExJQ29sc1wiIH0sXG4weDAxMkY6IHsgbjpcIkJydEJlZ2luU1hGb3JtYXRcIiB9LFxuMHgwMTMwOiB7IG46XCJCcnRFbmRTWEZvcm1hdFwiIH0sXG4weDAxMzE6IHsgbjpcIkJydEJlZ2luU1hGb3JtYXRzXCIgfSxcbjB4MDEzMjogeyBuOlwiQnJ0RW5kU3hGb3JtYXRzXCIgfSxcbjB4MDEzMzogeyBuOlwiQnJ0QmVnaW5TeFNlbGVjdFwiIH0sXG4weDAxMzQ6IHsgbjpcIkJydEVuZFN4U2VsZWN0XCIgfSxcbjB4MDEzNTogeyBuOlwiQnJ0QmVnaW5JU1hWRFJ3c1wiIH0sXG4weDAxMzY6IHsgbjpcIkJydEVuZElTWFZEUndzXCIgfSxcbjB4MDEzNzogeyBuOlwiQnJ0QmVnaW5JU1hWRENvbHNcIiB9LFxuMHgwMTM4OiB7IG46XCJCcnRFbmRJU1hWRENvbHNcIiB9LFxuMHgwMTM5OiB7IG46XCJCcnRFbmRTWExvY2F0aW9uXCIgfSxcbjB4MDEzQTogeyBuOlwiQnJ0QmVnaW5TWExvY2F0aW9uXCIgfSxcbjB4MDEzQjogeyBuOlwiQnJ0RW5kU1hWaWV3XCIgfSxcbjB4MDEzQzogeyBuOlwiQnJ0QmVnaW5TWFRIc1wiIH0sXG4weDAxM0Q6IHsgbjpcIkJydEVuZFNYVEhzXCIgfSxcbjB4MDEzRTogeyBuOlwiQnJ0QmVnaW5TWFRIXCIgfSxcbjB4MDEzRjogeyBuOlwiQnJ0RW5kU1hUSFwiIH0sXG4weDAxNDA6IHsgbjpcIkJydEJlZ2luSVNYVEhSd3NcIiB9LFxuMHgwMTQxOiB7IG46XCJCcnRFbmRJU1hUSFJ3c1wiIH0sXG4weDAxNDI6IHsgbjpcIkJydEJlZ2luSVNYVEhDb2xzXCIgfSxcbjB4MDE0MzogeyBuOlwiQnJ0RW5kSVNYVEhDb2xzXCIgfSxcbjB4MDE0NDogeyBuOlwiQnJ0QmVnaW5TWFRETVBTXCIgfSxcbjB4MDE0NTogeyBuOlwiQnJ0RW5kU1hURE1Qc1wiIH0sXG4weDAxNDY6IHsgbjpcIkJydEJlZ2luU1hURE1QXCIgfSxcbjB4MDE0NzogeyBuOlwiQnJ0RW5kU1hURE1QXCIgfSxcbjB4MDE0ODogeyBuOlwiQnJ0QmVnaW5TWFRISXRlbXNcIiB9LFxuMHgwMTQ5OiB7IG46XCJCcnRFbmRTWFRISXRlbXNcIiB9LFxuMHgwMTRBOiB7IG46XCJCcnRCZWdpblNYVEhJdGVtXCIgfSxcbjB4MDE0QjogeyBuOlwiQnJ0RW5kU1hUSEl0ZW1cIiB9LFxuMHgwMTRDOiB7IG46XCJCcnRCZWdpbk1ldGFkYXRhXCIgfSxcbjB4MDE0RDogeyBuOlwiQnJ0RW5kTWV0YWRhdGFcIiB9LFxuMHgwMTRFOiB7IG46XCJCcnRCZWdpbkVzbWR0aW5mb1wiIH0sXG4weDAxNEY6IHsgbjpcIkJydE1kdGluZm9cIiB9LFxuMHgwMTUwOiB7IG46XCJCcnRFbmRFc21kdGluZm9cIiB9LFxuMHgwMTUxOiB7IG46XCJCcnRCZWdpbkVzbWRiXCIgfSxcbjB4MDE1MjogeyBuOlwiQnJ0RW5kRXNtZGJcIiB9LFxuMHgwMTUzOiB7IG46XCJCcnRCZWdpbkVzZm1kXCIgfSxcbjB4MDE1NDogeyBuOlwiQnJ0RW5kRXNmbWRcIiB9LFxuMHgwMTU1OiB7IG46XCJCcnRCZWdpblNpbmdsZUNlbGxzXCIgfSxcbjB4MDE1NjogeyBuOlwiQnJ0RW5kU2luZ2xlQ2VsbHNcIiB9LFxuMHgwMTU3OiB7IG46XCJCcnRCZWdpbkxpc3RcIiB9LFxuMHgwMTU4OiB7IG46XCJCcnRFbmRMaXN0XCIgfSxcbjB4MDE1OTogeyBuOlwiQnJ0QmVnaW5MaXN0Q29sc1wiIH0sXG4weDAxNUE6IHsgbjpcIkJydEVuZExpc3RDb2xzXCIgfSxcbjB4MDE1QjogeyBuOlwiQnJ0QmVnaW5MaXN0Q29sXCIgfSxcbjB4MDE1QzogeyBuOlwiQnJ0RW5kTGlzdENvbFwiIH0sXG4weDAxNUQ6IHsgbjpcIkJydEJlZ2luTGlzdFhtbENQclwiIH0sXG4weDAxNUU6IHsgbjpcIkJydEVuZExpc3RYbWxDUHJcIiB9LFxuMHgwMTVGOiB7IG46XCJCcnRMaXN0Q0NGbWxhXCIgfSxcbjB4MDE2MDogeyBuOlwiQnJ0TGlzdFRyRm1sYVwiIH0sXG4weDAxNjE6IHsgbjpcIkJydEJlZ2luRXh0ZXJuYWxzXCIgfSxcbjB4MDE2MjogeyBuOlwiQnJ0RW5kRXh0ZXJuYWxzXCIgfSxcbjB4MDE2MzogeyBuOlwiQnJ0U3VwQm9va1NyY1wiLCBmOnBhcnNlX1JlbElEfSxcbjB4MDE2NTogeyBuOlwiQnJ0U3VwU2VsZlwiIH0sXG4weDAxNjY6IHsgbjpcIkJydFN1cFNhbWVcIiB9LFxuMHgwMTY3OiB7IG46XCJCcnRTdXBUYWJzXCIgfSxcbjB4MDE2ODogeyBuOlwiQnJ0QmVnaW5TdXBCb29rXCIgfSxcbjB4MDE2OTogeyBuOlwiQnJ0UGxhY2Vob2xkZXJOYW1lXCIgfSxcbjB4MDE2QTogeyBuOlwiQnJ0RXh0ZXJuU2hlZXRcIiwgZjpwYXJzZV9FeHRlcm5TaGVldCB9LFxuMHgwMTZCOiB7IG46XCJCcnRFeHRlcm5UYWJsZVN0YXJ0XCIgfSxcbjB4MDE2QzogeyBuOlwiQnJ0RXh0ZXJuVGFibGVFbmRcIiB9LFxuMHgwMTZFOiB7IG46XCJCcnRFeHRlcm5Sb3dIZHJcIiB9LFxuMHgwMTZGOiB7IG46XCJCcnRFeHRlcm5DZWxsQmxhbmtcIiB9LFxuMHgwMTcwOiB7IG46XCJCcnRFeHRlcm5DZWxsUmVhbFwiIH0sXG4weDAxNzE6IHsgbjpcIkJydEV4dGVybkNlbGxCb29sXCIgfSxcbjB4MDE3MjogeyBuOlwiQnJ0RXh0ZXJuQ2VsbEVycm9yXCIgfSxcbjB4MDE3MzogeyBuOlwiQnJ0RXh0ZXJuQ2VsbFN0cmluZ1wiIH0sXG4weDAxNzQ6IHsgbjpcIkJydEJlZ2luRXNtZHhcIiB9LFxuMHgwMTc1OiB7IG46XCJCcnRFbmRFc21keFwiIH0sXG4weDAxNzY6IHsgbjpcIkJydEJlZ2luTWR4U2V0XCIgfSxcbjB4MDE3NzogeyBuOlwiQnJ0RW5kTWR4U2V0XCIgfSxcbjB4MDE3ODogeyBuOlwiQnJ0QmVnaW5NZHhNYnJQcm9wXCIgfSxcbjB4MDE3OTogeyBuOlwiQnJ0RW5kTWR4TWJyUHJvcFwiIH0sXG4weDAxN0E6IHsgbjpcIkJydEJlZ2luTWR4S1BJXCIgfSxcbjB4MDE3QjogeyBuOlwiQnJ0RW5kTWR4S1BJXCIgfSxcbjB4MDE3QzogeyBuOlwiQnJ0QmVnaW5Fc3N0clwiIH0sXG4weDAxN0Q6IHsgbjpcIkJydEVuZEVzc3RyXCIgfSxcbjB4MDE3RTogeyBuOlwiQnJ0QmVnaW5QUkZJdGVtXCIgfSxcbjB4MDE3RjogeyBuOlwiQnJ0RW5kUFJGSXRlbVwiIH0sXG4weDAxODA6IHsgbjpcIkJydEJlZ2luUGl2b3RDYWNoZUlEc1wiIH0sXG4weDAxODE6IHsgbjpcIkJydEVuZFBpdm90Q2FjaGVJRHNcIiB9LFxuMHgwMTgyOiB7IG46XCJCcnRCZWdpblBpdm90Q2FjaGVJRFwiIH0sXG4weDAxODM6IHsgbjpcIkJydEVuZFBpdm90Q2FjaGVJRFwiIH0sXG4weDAxODQ6IHsgbjpcIkJydEJlZ2luSVNYVklzXCIgfSxcbjB4MDE4NTogeyBuOlwiQnJ0RW5kSVNYVklzXCIgfSxcbjB4MDE4NjogeyBuOlwiQnJ0QmVnaW5Db2xJbmZvc1wiIH0sXG4weDAxODc6IHsgbjpcIkJydEVuZENvbEluZm9zXCIgfSxcbjB4MDE4ODogeyBuOlwiQnJ0QmVnaW5Sd0Jya1wiIH0sXG4weDAxODk6IHsgbjpcIkJydEVuZFJ3QnJrXCIgfSxcbjB4MDE4QTogeyBuOlwiQnJ0QmVnaW5Db2xCcmtcIiB9LFxuMHgwMThCOiB7IG46XCJCcnRFbmRDb2xCcmtcIiB9LFxuMHgwMThDOiB7IG46XCJCcnRCcmtcIiB9LFxuMHgwMThEOiB7IG46XCJCcnRVc2VyQm9va1ZpZXdcIiB9LFxuMHgwMThFOiB7IG46XCJCcnRJbmZvXCIgfSxcbjB4MDE4RjogeyBuOlwiQnJ0Q1VzclwiIH0sXG4weDAxOTA6IHsgbjpcIkJydFVzclwiIH0sXG4weDAxOTE6IHsgbjpcIkJydEJlZ2luVXNlcnNcIiB9LFxuMHgwMTkzOiB7IG46XCJCcnRFT0ZcIiB9LFxuMHgwMTk0OiB7IG46XCJCcnRVQ1JcIiB9LFxuMHgwMTk1OiB7IG46XCJCcnRSUkluc0RlbFwiIH0sXG4weDAxOTY6IHsgbjpcIkJydFJSRW5kSW5zRGVsXCIgfSxcbjB4MDE5NzogeyBuOlwiQnJ0UlJNb3ZlXCIgfSxcbjB4MDE5ODogeyBuOlwiQnJ0UlJFbmRNb3ZlXCIgfSxcbjB4MDE5OTogeyBuOlwiQnJ0UlJDaGdDZWxsXCIgfSxcbjB4MDE5QTogeyBuOlwiQnJ0UlJFbmRDaGdDZWxsXCIgfSxcbjB4MDE5QjogeyBuOlwiQnJ0UlJIZWFkZXJcIiB9LFxuMHgwMTlDOiB7IG46XCJCcnRSUlVzZXJWaWV3XCIgfSxcbjB4MDE5RDogeyBuOlwiQnJ0UlJSZW5TaGVldFwiIH0sXG4weDAxOUU6IHsgbjpcIkJydFJSSW5zZXJ0U2hcIiB9LFxuMHgwMTlGOiB7IG46XCJCcnRSUkRlZk5hbWVcIiB9LFxuMHgwMUEwOiB7IG46XCJCcnRSUk5vdGVcIiB9LFxuMHgwMUExOiB7IG46XCJCcnRSUkNvbmZsaWN0XCIgfSxcbjB4MDFBMjogeyBuOlwiQnJ0UlJUUVNJRlwiIH0sXG4weDAxQTM6IHsgbjpcIkJydFJSRm9ybWF0XCIgfSxcbjB4MDFBNDogeyBuOlwiQnJ0UlJFbmRGb3JtYXRcIiB9LFxuMHgwMUE1OiB7IG46XCJCcnRSUkF1dG9GbXRcIiB9LFxuMHgwMUE2OiB7IG46XCJCcnRCZWdpblVzZXJTaFZpZXdzXCIgfSxcbjB4MDFBNzogeyBuOlwiQnJ0QmVnaW5Vc2VyU2hWaWV3XCIgfSxcbjB4MDFBODogeyBuOlwiQnJ0RW5kVXNlclNoVmlld1wiIH0sXG4weDAxQTk6IHsgbjpcIkJydEVuZFVzZXJTaFZpZXdzXCIgfSxcbjB4MDFBQTogeyBuOlwiQnJ0QXJyRm1sYVwiLCBmOnBhcnNlX0JydEFyckZtbGEgfSxcbjB4MDFBQjogeyBuOlwiQnJ0U2hyRm1sYVwiLCBmOnBhcnNlX0JydFNockZtbGEgfSxcbjB4MDFBQzogeyBuOlwiQnJ0VGFibGVcIiB9LFxuMHgwMUFEOiB7IG46XCJCcnRCZWdpbkV4dENvbm5lY3Rpb25zXCIgfSxcbjB4MDFBRTogeyBuOlwiQnJ0RW5kRXh0Q29ubmVjdGlvbnNcIiB9LFxuMHgwMUFGOiB7IG46XCJCcnRCZWdpblBDRENhbGNNZW1zXCIgfSxcbjB4MDFCMDogeyBuOlwiQnJ0RW5kUENEQ2FsY01lbXNcIiB9LFxuMHgwMUIxOiB7IG46XCJCcnRCZWdpblBDRENhbGNNZW1cIiB9LFxuMHgwMUIyOiB7IG46XCJCcnRFbmRQQ0RDYWxjTWVtXCIgfSxcbjB4MDFCMzogeyBuOlwiQnJ0QmVnaW5QQ0RIR0xldmVsc1wiIH0sXG4weDAxQjQ6IHsgbjpcIkJydEVuZFBDREhHTGV2ZWxzXCIgfSxcbjB4MDFCNTogeyBuOlwiQnJ0QmVnaW5QQ0RIR0xldmVsXCIgfSxcbjB4MDFCNjogeyBuOlwiQnJ0RW5kUENESEdMZXZlbFwiIH0sXG4weDAxQjc6IHsgbjpcIkJydEJlZ2luUENESEdMR3JvdXBzXCIgfSxcbjB4MDFCODogeyBuOlwiQnJ0RW5kUENESEdMR3JvdXBzXCIgfSxcbjB4MDFCOTogeyBuOlwiQnJ0QmVnaW5QQ0RIR0xHcm91cFwiIH0sXG4weDAxQkE6IHsgbjpcIkJydEVuZFBDREhHTEdyb3VwXCIgfSxcbjB4MDFCQjogeyBuOlwiQnJ0QmVnaW5QQ0RIR0xHTWVtYmVyc1wiIH0sXG4weDAxQkM6IHsgbjpcIkJydEVuZFBDREhHTEdNZW1iZXJzXCIgfSxcbjB4MDFCRDogeyBuOlwiQnJ0QmVnaW5QQ0RIR0xHTWVtYmVyXCIgfSxcbjB4MDFCRTogeyBuOlwiQnJ0RW5kUENESEdMR01lbWJlclwiIH0sXG4weDAxQkY6IHsgbjpcIkJydEJlZ2luUVNJXCIgfSxcbjB4MDFDMDogeyBuOlwiQnJ0RW5kUVNJXCIgfSxcbjB4MDFDMTogeyBuOlwiQnJ0QmVnaW5RU0lSXCIgfSxcbjB4MDFDMjogeyBuOlwiQnJ0RW5kUVNJUlwiIH0sXG4weDAxQzM6IHsgbjpcIkJydEJlZ2luRGVsZXRlZE5hbWVzXCIgfSxcbjB4MDFDNDogeyBuOlwiQnJ0RW5kRGVsZXRlZE5hbWVzXCIgfSxcbjB4MDFDNTogeyBuOlwiQnJ0QmVnaW5EZWxldGVkTmFtZVwiIH0sXG4weDAxQzY6IHsgbjpcIkJydEVuZERlbGV0ZWROYW1lXCIgfSxcbjB4MDFDNzogeyBuOlwiQnJ0QmVnaW5RU0lGc1wiIH0sXG4weDAxQzg6IHsgbjpcIkJydEVuZFFTSUZzXCIgfSxcbjB4MDFDOTogeyBuOlwiQnJ0QmVnaW5RU0lGXCIgfSxcbjB4MDFDQTogeyBuOlwiQnJ0RW5kUVNJRlwiIH0sXG4weDAxQ0I6IHsgbjpcIkJydEJlZ2luQXV0b1NvcnRTY29wZVwiIH0sXG4weDAxQ0M6IHsgbjpcIkJydEVuZEF1dG9Tb3J0U2NvcGVcIiB9LFxuMHgwMUNEOiB7IG46XCJCcnRCZWdpbkNvbmRpdGlvbmFsRm9ybWF0dGluZ1wiIH0sXG4weDAxQ0U6IHsgbjpcIkJydEVuZENvbmRpdGlvbmFsRm9ybWF0dGluZ1wiIH0sXG4weDAxQ0Y6IHsgbjpcIkJydEJlZ2luQ0ZSdWxlXCIgfSxcbjB4MDFEMDogeyBuOlwiQnJ0RW5kQ0ZSdWxlXCIgfSxcbjB4MDFEMTogeyBuOlwiQnJ0QmVnaW5JY29uU2V0XCIgfSxcbjB4MDFEMjogeyBuOlwiQnJ0RW5kSWNvblNldFwiIH0sXG4weDAxRDM6IHsgbjpcIkJydEJlZ2luRGF0YWJhclwiIH0sXG4weDAxRDQ6IHsgbjpcIkJydEVuZERhdGFiYXJcIiB9LFxuMHgwMUQ1OiB7IG46XCJCcnRCZWdpbkNvbG9yU2NhbGVcIiB9LFxuMHgwMUQ2OiB7IG46XCJCcnRFbmRDb2xvclNjYWxlXCIgfSxcbjB4MDFENzogeyBuOlwiQnJ0Q0ZWT1wiIH0sXG4weDAxRDg6IHsgbjpcIkJydEV4dGVyblZhbHVlTWV0YVwiIH0sXG4weDAxRDk6IHsgbjpcIkJydEJlZ2luQ29sb3JQYWxldHRlXCIgfSxcbjB4MDFEQTogeyBuOlwiQnJ0RW5kQ29sb3JQYWxldHRlXCIgfSxcbjB4MDFEQjogeyBuOlwiQnJ0SW5kZXhlZENvbG9yXCIgfSxcbjB4MDFEQzogeyBuOlwiQnJ0TWFyZ2luc1wiLCBmOnBhcnNlX0JydE1hcmdpbnMgfSxcbjB4MDFERDogeyBuOlwiQnJ0UHJpbnRPcHRpb25zXCIgfSxcbjB4MDFERTogeyBuOlwiQnJ0UGFnZVNldHVwXCIgfSxcbjB4MDFERjogeyBuOlwiQnJ0QmVnaW5IZWFkZXJGb290ZXJcIiB9LFxuMHgwMUUwOiB7IG46XCJCcnRFbmRIZWFkZXJGb290ZXJcIiB9LFxuMHgwMUUxOiB7IG46XCJCcnRCZWdpblNYQ3J0Rm9ybWF0XCIgfSxcbjB4MDFFMjogeyBuOlwiQnJ0RW5kU1hDcnRGb3JtYXRcIiB9LFxuMHgwMUUzOiB7IG46XCJCcnRCZWdpblNYQ3J0Rm9ybWF0c1wiIH0sXG4weDAxRTQ6IHsgbjpcIkJydEVuZFNYQ3J0Rm9ybWF0c1wiIH0sXG4weDAxRTU6IHsgbjpcIkJydFdzRm10SW5mb1wiLCBmOnBhcnNlX0JydFdzRm10SW5mbyB9LFxuMHgwMUU2OiB7IG46XCJCcnRCZWdpbk1nc1wiIH0sXG4weDAxRTc6IHsgbjpcIkJydEVuZE1Hc1wiIH0sXG4weDAxRTg6IHsgbjpcIkJydEJlZ2luTUdNYXBzXCIgfSxcbjB4MDFFOTogeyBuOlwiQnJ0RW5kTUdNYXBzXCIgfSxcbjB4MDFFQTogeyBuOlwiQnJ0QmVnaW5NR1wiIH0sXG4weDAxRUI6IHsgbjpcIkJydEVuZE1HXCIgfSxcbjB4MDFFQzogeyBuOlwiQnJ0QmVnaW5NYXBcIiB9LFxuMHgwMUVEOiB7IG46XCJCcnRFbmRNYXBcIiB9LFxuMHgwMUVFOiB7IG46XCJCcnRITGlua1wiLCBmOnBhcnNlX0JydEhMaW5rIH0sXG4weDAxRUY6IHsgbjpcIkJydEJlZ2luRENvblwiIH0sXG4weDAxRjA6IHsgbjpcIkJydEVuZERDb25cIiB9LFxuMHgwMUYxOiB7IG46XCJCcnRCZWdpbkRSZWZzXCIgfSxcbjB4MDFGMjogeyBuOlwiQnJ0RW5kRFJlZnNcIiB9LFxuMHgwMUYzOiB7IG46XCJCcnREUmVmXCIgfSxcbjB4MDFGNDogeyBuOlwiQnJ0QmVnaW5TY2VuTWFuXCIgfSxcbjB4MDFGNTogeyBuOlwiQnJ0RW5kU2Nlbk1hblwiIH0sXG4weDAxRjY6IHsgbjpcIkJydEJlZ2luU2N0XCIgfSxcbjB4MDFGNzogeyBuOlwiQnJ0RW5kU2N0XCIgfSxcbjB4MDFGODogeyBuOlwiQnJ0U2xjXCIgfSxcbjB4MDFGOTogeyBuOlwiQnJ0QmVnaW5EWEZzXCIgfSxcbjB4MDFGQTogeyBuOlwiQnJ0RW5kRFhGc1wiIH0sXG4weDAxRkI6IHsgbjpcIkJydERYRlwiIH0sXG4weDAxRkM6IHsgbjpcIkJydEJlZ2luVGFibGVTdHlsZXNcIiB9LFxuMHgwMUZEOiB7IG46XCJCcnRFbmRUYWJsZVN0eWxlc1wiIH0sXG4weDAxRkU6IHsgbjpcIkJydEJlZ2luVGFibGVTdHlsZVwiIH0sXG4weDAxRkY6IHsgbjpcIkJydEVuZFRhYmxlU3R5bGVcIiB9LFxuMHgwMjAwOiB7IG46XCJCcnRUYWJsZVN0eWxlRWxlbWVudFwiIH0sXG4weDAyMDE6IHsgbjpcIkJydFRhYmxlU3R5bGVDbGllbnRcIiB9LFxuMHgwMjAyOiB7IG46XCJCcnRCZWdpblZvbERlcHNcIiB9LFxuMHgwMjAzOiB7IG46XCJCcnRFbmRWb2xEZXBzXCIgfSxcbjB4MDIwNDogeyBuOlwiQnJ0QmVnaW5Wb2xUeXBlXCIgfSxcbjB4MDIwNTogeyBuOlwiQnJ0RW5kVm9sVHlwZVwiIH0sXG4weDAyMDY6IHsgbjpcIkJydEJlZ2luVm9sTWFpblwiIH0sXG4weDAyMDc6IHsgbjpcIkJydEVuZFZvbE1haW5cIiB9LFxuMHgwMjA4OiB7IG46XCJCcnRCZWdpblZvbFRvcGljXCIgfSxcbjB4MDIwOTogeyBuOlwiQnJ0RW5kVm9sVG9waWNcIiB9LFxuMHgwMjBBOiB7IG46XCJCcnRWb2xTdWJ0b3BpY1wiIH0sXG4weDAyMEI6IHsgbjpcIkJydFZvbFJlZlwiIH0sXG4weDAyMEM6IHsgbjpcIkJydFZvbE51bVwiIH0sXG4weDAyMEQ6IHsgbjpcIkJydFZvbEVyclwiIH0sXG4weDAyMEU6IHsgbjpcIkJydFZvbFN0clwiIH0sXG4weDAyMEY6IHsgbjpcIkJydFZvbEJvb2xcIiB9LFxuMHgwMjEwOiB7IG46XCJCcnRCZWdpbkNhbGNDaGFpbiRcIiB9LFxuMHgwMjExOiB7IG46XCJCcnRFbmRDYWxjQ2hhaW4kXCIgfSxcbjB4MDIxMjogeyBuOlwiQnJ0QmVnaW5Tb3J0U3RhdGVcIiB9LFxuMHgwMjEzOiB7IG46XCJCcnRFbmRTb3J0U3RhdGVcIiB9LFxuMHgwMjE0OiB7IG46XCJCcnRCZWdpblNvcnRDb25kXCIgfSxcbjB4MDIxNTogeyBuOlwiQnJ0RW5kU29ydENvbmRcIiB9LFxuMHgwMjE2OiB7IG46XCJCcnRCb29rUHJvdGVjdGlvblwiIH0sXG4weDAyMTc6IHsgbjpcIkJydFNoZWV0UHJvdGVjdGlvblwiIH0sXG4weDAyMTg6IHsgbjpcIkJydFJhbmdlUHJvdGVjdGlvblwiIH0sXG4weDAyMTk6IHsgbjpcIkJydFBob25ldGljSW5mb1wiIH0sXG4weDAyMUE6IHsgbjpcIkJydEJlZ2luRUNUeHRXaXpcIiB9LFxuMHgwMjFCOiB7IG46XCJCcnRFbmRFQ1R4dFdpelwiIH0sXG4weDAyMUM6IHsgbjpcIkJydEJlZ2luRUNUV0ZsZEluZm9Mc3RcIiB9LFxuMHgwMjFEOiB7IG46XCJCcnRFbmRFQ1RXRmxkSW5mb0xzdFwiIH0sXG4weDAyMUU6IHsgbjpcIkJydEJlZ2luRUNUd0ZsZEluZm9cIiB9LFxuMHgwMjI0OiB7IG46XCJCcnRGaWxlU2hhcmluZ1wiIH0sXG4weDAyMjU6IHsgbjpcIkJydE9sZVNpemVcIiB9LFxuMHgwMjI2OiB7IG46XCJCcnREcmF3aW5nXCIsIGY6cGFyc2VfUmVsSUQgfSxcbjB4MDIyNzogeyBuOlwiQnJ0TGVnYWN5RHJhd2luZ1wiIH0sXG4weDAyMjg6IHsgbjpcIkJydExlZ2FjeURyYXdpbmdIRlwiIH0sXG4weDAyMjk6IHsgbjpcIkJydFdlYk9wdFwiIH0sXG4weDAyMkE6IHsgbjpcIkJydEJlZ2luV2ViUHViSXRlbXNcIiB9LFxuMHgwMjJCOiB7IG46XCJCcnRFbmRXZWJQdWJJdGVtc1wiIH0sXG4weDAyMkM6IHsgbjpcIkJydEJlZ2luV2ViUHViSXRlbVwiIH0sXG4weDAyMkQ6IHsgbjpcIkJydEVuZFdlYlB1Ykl0ZW1cIiB9LFxuMHgwMjJFOiB7IG46XCJCcnRCZWdpblNYQ29uZEZtdFwiIH0sXG4weDAyMkY6IHsgbjpcIkJydEVuZFNYQ29uZEZtdFwiIH0sXG4weDAyMzA6IHsgbjpcIkJydEJlZ2luU1hDb25kRm10c1wiIH0sXG4weDAyMzE6IHsgbjpcIkJydEVuZFNYQ29uZEZtdHNcIiB9LFxuMHgwMjMyOiB7IG46XCJCcnRCa0hpbVwiIH0sXG4weDAyMzQ6IHsgbjpcIkJydENvbG9yXCIgfSxcbjB4MDIzNTogeyBuOlwiQnJ0QmVnaW5JbmRleGVkQ29sb3JzXCIgfSxcbjB4MDIzNjogeyBuOlwiQnJ0RW5kSW5kZXhlZENvbG9yc1wiIH0sXG4weDAyMzk6IHsgbjpcIkJydEJlZ2luTVJVQ29sb3JzXCIgfSxcbjB4MDIzQTogeyBuOlwiQnJ0RW5kTVJVQ29sb3JzXCIgfSxcbjB4MDIzQzogeyBuOlwiQnJ0TVJVQ29sb3JcIiB9LFxuMHgwMjNEOiB7IG46XCJCcnRCZWdpbkRWYWxzXCIgfSxcbjB4MDIzRTogeyBuOlwiQnJ0RW5kRFZhbHNcIiB9LFxuMHgwMjQxOiB7IG46XCJCcnRTdXBOYW1lU3RhcnRcIiB9LFxuMHgwMjQyOiB7IG46XCJCcnRTdXBOYW1lVmFsdWVTdGFydFwiIH0sXG4weDAyNDM6IHsgbjpcIkJydFN1cE5hbWVWYWx1ZUVuZFwiIH0sXG4weDAyNDQ6IHsgbjpcIkJydFN1cE5hbWVOdW1cIiB9LFxuMHgwMjQ1OiB7IG46XCJCcnRTdXBOYW1lRXJyXCIgfSxcbjB4MDI0NjogeyBuOlwiQnJ0U3VwTmFtZVN0XCIgfSxcbjB4MDI0NzogeyBuOlwiQnJ0U3VwTmFtZU5pbFwiIH0sXG4weDAyNDg6IHsgbjpcIkJydFN1cE5hbWVCb29sXCIgfSxcbjB4MDI0OTogeyBuOlwiQnJ0U3VwTmFtZUZtbGFcIiB9LFxuMHgwMjRBOiB7IG46XCJCcnRTdXBOYW1lQml0c1wiIH0sXG4weDAyNEI6IHsgbjpcIkJydFN1cE5hbWVFbmRcIiB9LFxuMHgwMjRDOiB7IG46XCJCcnRFbmRTdXBCb29rXCIgfSxcbjB4MDI0RDogeyBuOlwiQnJ0Q2VsbFNtYXJ0VGFnUHJvcGVydHlcIiB9LFxuMHgwMjRFOiB7IG46XCJCcnRCZWdpbkNlbGxTbWFydFRhZ1wiIH0sXG4weDAyNEY6IHsgbjpcIkJydEVuZENlbGxTbWFydFRhZ1wiIH0sXG4weDAyNTA6IHsgbjpcIkJydEJlZ2luQ2VsbFNtYXJ0VGFnc1wiIH0sXG4weDAyNTE6IHsgbjpcIkJydEVuZENlbGxTbWFydFRhZ3NcIiB9LFxuMHgwMjUyOiB7IG46XCJCcnRCZWdpblNtYXJ0VGFnc1wiIH0sXG4weDAyNTM6IHsgbjpcIkJydEVuZFNtYXJ0VGFnc1wiIH0sXG4weDAyNTQ6IHsgbjpcIkJydFNtYXJ0VGFnVHlwZVwiIH0sXG4weDAyNTU6IHsgbjpcIkJydEJlZ2luU21hcnRUYWdUeXBlc1wiIH0sXG4weDAyNTY6IHsgbjpcIkJydEVuZFNtYXJ0VGFnVHlwZXNcIiB9LFxuMHgwMjU3OiB7IG46XCJCcnRCZWdpblNYRmlsdGVyc1wiIH0sXG4weDAyNTg6IHsgbjpcIkJydEVuZFNYRmlsdGVyc1wiIH0sXG4weDAyNTk6IHsgbjpcIkJydEJlZ2luU1hGSUxURVJcIiB9LFxuMHgwMjVBOiB7IG46XCJCcnRFbmRTWEZpbHRlclwiIH0sXG4weDAyNUI6IHsgbjpcIkJydEJlZ2luRmlsbHNcIiB9LFxuMHgwMjVDOiB7IG46XCJCcnRFbmRGaWxsc1wiIH0sXG4weDAyNUQ6IHsgbjpcIkJydEJlZ2luQ2VsbFdhdGNoZXNcIiB9LFxuMHgwMjVFOiB7IG46XCJCcnRFbmRDZWxsV2F0Y2hlc1wiIH0sXG4weDAyNUY6IHsgbjpcIkJydENlbGxXYXRjaFwiIH0sXG4weDAyNjA6IHsgbjpcIkJydEJlZ2luQ1JFcnJzXCIgfSxcbjB4MDI2MTogeyBuOlwiQnJ0RW5kQ1JFcnJzXCIgfSxcbjB4MDI2MjogeyBuOlwiQnJ0Q3Jhc2hSZWNFcnJcIiB9LFxuMHgwMjYzOiB7IG46XCJCcnRCZWdpbkZvbnRzXCIgfSxcbjB4MDI2NDogeyBuOlwiQnJ0RW5kRm9udHNcIiB9LFxuMHgwMjY1OiB7IG46XCJCcnRCZWdpbkJvcmRlcnNcIiB9LFxuMHgwMjY2OiB7IG46XCJCcnRFbmRCb3JkZXJzXCIgfSxcbjB4MDI2NzogeyBuOlwiQnJ0QmVnaW5GbXRzXCIgfSxcbjB4MDI2ODogeyBuOlwiQnJ0RW5kRm10c1wiIH0sXG4weDAyNjk6IHsgbjpcIkJydEJlZ2luQ2VsbFhGc1wiIH0sXG4weDAyNkE6IHsgbjpcIkJydEVuZENlbGxYRnNcIiB9LFxuMHgwMjZCOiB7IG46XCJCcnRCZWdpblN0eWxlc1wiIH0sXG4weDAyNkM6IHsgbjpcIkJydEVuZFN0eWxlc1wiIH0sXG4weDAyNzE6IHsgbjpcIkJydEJpZ05hbWVcIiB9LFxuMHgwMjcyOiB7IG46XCJCcnRCZWdpbkNlbGxTdHlsZVhGc1wiIH0sXG4weDAyNzM6IHsgbjpcIkJydEVuZENlbGxTdHlsZVhGc1wiIH0sXG4weDAyNzQ6IHsgbjpcIkJydEJlZ2luQ29tbWVudHNcIiB9LFxuMHgwMjc1OiB7IG46XCJCcnRFbmRDb21tZW50c1wiIH0sXG4weDAyNzY6IHsgbjpcIkJydEJlZ2luQ29tbWVudEF1dGhvcnNcIiB9LFxuMHgwMjc3OiB7IG46XCJCcnRFbmRDb21tZW50QXV0aG9yc1wiIH0sXG4weDAyNzg6IHsgbjpcIkJydENvbW1lbnRBdXRob3JcIiwgZjpwYXJzZV9CcnRDb21tZW50QXV0aG9yIH0sXG4weDAyNzk6IHsgbjpcIkJydEJlZ2luQ29tbWVudExpc3RcIiB9LFxuMHgwMjdBOiB7IG46XCJCcnRFbmRDb21tZW50TGlzdFwiIH0sXG4weDAyN0I6IHsgbjpcIkJydEJlZ2luQ29tbWVudFwiLCBmOnBhcnNlX0JydEJlZ2luQ29tbWVudH0sXG4weDAyN0M6IHsgbjpcIkJydEVuZENvbW1lbnRcIiB9LFxuMHgwMjdEOiB7IG46XCJCcnRDb21tZW50VGV4dFwiLCBmOnBhcnNlX0JydENvbW1lbnRUZXh0IH0sXG4weDAyN0U6IHsgbjpcIkJydEJlZ2luT2xlT2JqZWN0c1wiIH0sXG4weDAyN0Y6IHsgbjpcIkJydE9sZU9iamVjdFwiIH0sXG4weDAyODA6IHsgbjpcIkJydEVuZE9sZU9iamVjdHNcIiB9LFxuMHgwMjgxOiB7IG46XCJCcnRCZWdpblN4cnVsZXNcIiB9LFxuMHgwMjgyOiB7IG46XCJCcnRFbmRTeFJ1bGVzXCIgfSxcbjB4MDI4MzogeyBuOlwiQnJ0QmVnaW5BY3RpdmVYQ29udHJvbHNcIiB9LFxuMHgwMjg0OiB7IG46XCJCcnRBY3RpdmVYXCIgfSxcbjB4MDI4NTogeyBuOlwiQnJ0RW5kQWN0aXZlWENvbnRyb2xzXCIgfSxcbjB4MDI4NjogeyBuOlwiQnJ0QmVnaW5QQ0RTRFRDRU1lbWJlcnNTb3J0QnlcIiB9LFxuMHgwMjg4OiB7IG46XCJCcnRCZWdpbkNlbGxJZ25vcmVFQ3NcIiB9LFxuMHgwMjg5OiB7IG46XCJCcnRDZWxsSWdub3JlRUNcIiB9LFxuMHgwMjhBOiB7IG46XCJCcnRFbmRDZWxsSWdub3JlRUNzXCIgfSxcbjB4MDI4QjogeyBuOlwiQnJ0Q3NQcm9wXCIsIGY6cGFyc2VfQnJ0Q3NQcm9wIH0sXG4weDAyOEM6IHsgbjpcIkJydENzUGFnZVNldHVwXCIgfSxcbjB4MDI4RDogeyBuOlwiQnJ0QmVnaW5Vc2VyQ3NWaWV3c1wiIH0sXG4weDAyOEU6IHsgbjpcIkJydEVuZFVzZXJDc1ZpZXdzXCIgfSxcbjB4MDI4RjogeyBuOlwiQnJ0QmVnaW5Vc2VyQ3NWaWV3XCIgfSxcbjB4MDI5MDogeyBuOlwiQnJ0RW5kVXNlckNzVmlld1wiIH0sXG4weDAyOTE6IHsgbjpcIkJydEJlZ2luUGNkU0ZDSUVudHJpZXNcIiB9LFxuMHgwMjkyOiB7IG46XCJCcnRFbmRQQ0RTRkNJRW50cmllc1wiIH0sXG4weDAyOTM6IHsgbjpcIkJydFBDRFNGQ0lFbnRyeVwiIH0sXG4weDAyOTQ6IHsgbjpcIkJydEJlZ2luTGlzdFBhcnRzXCIgfSxcbjB4MDI5NTogeyBuOlwiQnJ0TGlzdFBhcnRcIiB9LFxuMHgwMjk2OiB7IG46XCJCcnRFbmRMaXN0UGFydHNcIiB9LFxuMHgwMjk3OiB7IG46XCJCcnRTaGVldENhbGNQcm9wXCIgfSxcbjB4MDI5ODogeyBuOlwiQnJ0QmVnaW5Gbkdyb3VwXCIgfSxcbjB4MDI5OTogeyBuOlwiQnJ0Rm5Hcm91cFwiIH0sXG4weDAyOUE6IHsgbjpcIkJydEVuZEZuR3JvdXBcIiB9LFxuMHgwMjlCOiB7IG46XCJCcnRTdXBBZGRpblwiIH0sXG4weDAyOUM6IHsgbjpcIkJydFNYVERNUE9yZGVyXCIgfSxcbjB4MDI5RDogeyBuOlwiQnJ0Q3NQcm90ZWN0aW9uXCIgfSxcbjB4MDI5RjogeyBuOlwiQnJ0QmVnaW5Xc1NvcnRNYXBcIiB9LFxuMHgwMkEwOiB7IG46XCJCcnRFbmRXc1NvcnRNYXBcIiB9LFxuMHgwMkExOiB7IG46XCJCcnRCZWdpblJSU29ydFwiIH0sXG4weDAyQTI6IHsgbjpcIkJydEVuZFJSU29ydFwiIH0sXG4weDAyQTM6IHsgbjpcIkJydFJSU29ydEl0ZW1cIiB9LFxuMHgwMkE0OiB7IG46XCJCcnRGaWxlU2hhcmluZ0lzb1wiIH0sXG4weDAyQTU6IHsgbjpcIkJydEJvb2tQcm90ZWN0aW9uSXNvXCIgfSxcbjB4MDJBNjogeyBuOlwiQnJ0U2hlZXRQcm90ZWN0aW9uSXNvXCIgfSxcbjB4MDJBNzogeyBuOlwiQnJ0Q3NQcm90ZWN0aW9uSXNvXCIgfSxcbjB4MDJBODogeyBuOlwiQnJ0UmFuZ2VQcm90ZWN0aW9uSXNvXCIgfSxcbjB4MDJBOTogeyBuOlwiQnJ0RFZhbExpc3RcIiB9LFxuMHgwNDAwOiB7IG46XCJCcnRSd0Rlc2NlbnRcIiB9LFxuMHgwNDAxOiB7IG46XCJCcnRLbm93bkZvbnRzXCIgfSxcbjB4MDQwMjogeyBuOlwiQnJ0QmVnaW5TWFR1cGxlU2V0XCIgfSxcbjB4MDQwMzogeyBuOlwiQnJ0RW5kU1hUdXBsZVNldFwiIH0sXG4weDA0MDQ6IHsgbjpcIkJydEJlZ2luU1hUdXBsZVNldEhlYWRlclwiIH0sXG4weDA0MDU6IHsgbjpcIkJydEVuZFNYVHVwbGVTZXRIZWFkZXJcIiB9LFxuMHgwNDA2OiB7IG46XCJCcnRTWFR1cGxlU2V0SGVhZGVySXRlbVwiIH0sXG4weDA0MDc6IHsgbjpcIkJydEJlZ2luU1hUdXBsZVNldERhdGFcIiB9LFxuMHgwNDA4OiB7IG46XCJCcnRFbmRTWFR1cGxlU2V0RGF0YVwiIH0sXG4weDA0MDk6IHsgbjpcIkJydEJlZ2luU1hUdXBsZVNldFJvd1wiIH0sXG4weDA0MEE6IHsgbjpcIkJydEVuZFNYVHVwbGVTZXRSb3dcIiB9LFxuMHgwNDBCOiB7IG46XCJCcnRTWFR1cGxlU2V0Um93SXRlbVwiIH0sXG4weDA0MEM6IHsgbjpcIkJydE5hbWVFeHRcIiB9LFxuMHgwNDBEOiB7IG46XCJCcnRQQ0RIMTRcIiB9LFxuMHgwNDBFOiB7IG46XCJCcnRCZWdpblBDRENhbGNNZW0xNFwiIH0sXG4weDA0MEY6IHsgbjpcIkJydEVuZFBDRENhbGNNZW0xNFwiIH0sXG4weDA0MTA6IHsgbjpcIkJydFNYVEgxNFwiIH0sXG4weDA0MTE6IHsgbjpcIkJydEJlZ2luU3BhcmtsaW5lR3JvdXBcIiB9LFxuMHgwNDEyOiB7IG46XCJCcnRFbmRTcGFya2xpbmVHcm91cFwiIH0sXG4weDA0MTM6IHsgbjpcIkJydFNwYXJrbGluZVwiIH0sXG4weDA0MTQ6IHsgbjpcIkJydFNYREkxNFwiIH0sXG4weDA0MTU6IHsgbjpcIkJydFdzRm10SW5mb0V4MTRcIiB9LFxuMHgwNDE2OiB7IG46XCJCcnRCZWdpbkNvbmRpdGlvbmFsRm9ybWF0dGluZzE0XCIgfSxcbjB4MDQxNzogeyBuOlwiQnJ0RW5kQ29uZGl0aW9uYWxGb3JtYXR0aW5nMTRcIiB9LFxuMHgwNDE4OiB7IG46XCJCcnRCZWdpbkNGUnVsZTE0XCIgfSxcbjB4MDQxOTogeyBuOlwiQnJ0RW5kQ0ZSdWxlMTRcIiB9LFxuMHgwNDFBOiB7IG46XCJCcnRDRlZPMTRcIiB9LFxuMHgwNDFCOiB7IG46XCJCcnRCZWdpbkRhdGFiYXIxNFwiIH0sXG4weDA0MUM6IHsgbjpcIkJydEJlZ2luSWNvblNldDE0XCIgfSxcbjB4MDQxRDogeyBuOlwiQnJ0RFZhbDE0XCIsIGY6IHBhcnNlX0JydERWYWwxNCB9LFxuMHgwNDFFOiB7IG46XCJCcnRCZWdpbkRWYWxzMTRcIiB9LFxuMHgwNDFGOiB7IG46XCJCcnRDb2xvcjE0XCIgfSxcbjB4MDQyMDogeyBuOlwiQnJ0QmVnaW5TcGFya2xpbmVzXCIgfSxcbjB4MDQyMTogeyBuOlwiQnJ0RW5kU3BhcmtsaW5lc1wiIH0sXG4weDA0MjI6IHsgbjpcIkJydEJlZ2luU3BhcmtsaW5lR3JvdXBzXCIgfSxcbjB4MDQyMzogeyBuOlwiQnJ0RW5kU3BhcmtsaW5lR3JvdXBzXCIgfSxcbjB4MDQyNTogeyBuOlwiQnJ0U1hWRDE0XCIgfSxcbjB4MDQyNjogeyBuOlwiQnJ0QmVnaW5TWFZpZXcxNFwiIH0sXG4weDA0Mjc6IHsgbjpcIkJydEVuZFNYVmlldzE0XCIgfSxcbjB4MDQyODogeyBuOlwiQnJ0QmVnaW5TWFZpZXcxNlwiIH0sXG4weDA0Mjk6IHsgbjpcIkJydEVuZFNYVmlldzE2XCIgfSxcbjB4MDQyQTogeyBuOlwiQnJ0QmVnaW5QQ0QxNFwiIH0sXG4weDA0MkI6IHsgbjpcIkJydEVuZFBDRDE0XCIgfSxcbjB4MDQyQzogeyBuOlwiQnJ0QmVnaW5FeHRDb25uMTRcIiB9LFxuMHgwNDJEOiB7IG46XCJCcnRFbmRFeHRDb25uMTRcIiB9LFxuMHgwNDJFOiB7IG46XCJCcnRCZWdpblNsaWNlckNhY2hlSURzXCIgfSxcbjB4MDQyRjogeyBuOlwiQnJ0RW5kU2xpY2VyQ2FjaGVJRHNcIiB9LFxuMHgwNDMwOiB7IG46XCJCcnRCZWdpblNsaWNlckNhY2hlSURcIiB9LFxuMHgwNDMxOiB7IG46XCJCcnRFbmRTbGljZXJDYWNoZUlEXCIgfSxcbjB4MDQzMzogeyBuOlwiQnJ0QmVnaW5TbGljZXJDYWNoZVwiIH0sXG4weDA0MzQ6IHsgbjpcIkJydEVuZFNsaWNlckNhY2hlXCIgfSxcbjB4MDQzNTogeyBuOlwiQnJ0QmVnaW5TbGljZXJDYWNoZURlZlwiIH0sXG4weDA0MzY6IHsgbjpcIkJydEVuZFNsaWNlckNhY2hlRGVmXCIgfSxcbjB4MDQzNzogeyBuOlwiQnJ0QmVnaW5TbGljZXJzRXhcIiB9LFxuMHgwNDM4OiB7IG46XCJCcnRFbmRTbGljZXJzRXhcIiB9LFxuMHgwNDM5OiB7IG46XCJCcnRCZWdpblNsaWNlckV4XCIgfSxcbjB4MDQzQTogeyBuOlwiQnJ0RW5kU2xpY2VyRXhcIiB9LFxuMHgwNDNCOiB7IG46XCJCcnRCZWdpblNsaWNlclwiIH0sXG4weDA0M0M6IHsgbjpcIkJydEVuZFNsaWNlclwiIH0sXG4weDA0M0Q6IHsgbjpcIkJydFNsaWNlckNhY2hlUGl2b3RUYWJsZXNcIiB9LFxuMHgwNDNFOiB7IG46XCJCcnRCZWdpblNsaWNlckNhY2hlT2xhcEltcGxcIiB9LFxuMHgwNDNGOiB7IG46XCJCcnRFbmRTbGljZXJDYWNoZU9sYXBJbXBsXCIgfSxcbjB4MDQ0MDogeyBuOlwiQnJ0QmVnaW5TbGljZXJDYWNoZUxldmVsc0RhdGFcIiB9LFxuMHgwNDQxOiB7IG46XCJCcnRFbmRTbGljZXJDYWNoZUxldmVsc0RhdGFcIiB9LFxuMHgwNDQyOiB7IG46XCJCcnRCZWdpblNsaWNlckNhY2hlTGV2ZWxEYXRhXCIgfSxcbjB4MDQ0MzogeyBuOlwiQnJ0RW5kU2xpY2VyQ2FjaGVMZXZlbERhdGFcIiB9LFxuMHgwNDQ0OiB7IG46XCJCcnRCZWdpblNsaWNlckNhY2hlU2lSYW5nZXNcIiB9LFxuMHgwNDQ1OiB7IG46XCJCcnRFbmRTbGljZXJDYWNoZVNpUmFuZ2VzXCIgfSxcbjB4MDQ0NjogeyBuOlwiQnJ0QmVnaW5TbGljZXJDYWNoZVNpUmFuZ2VcIiB9LFxuMHgwNDQ3OiB7IG46XCJCcnRFbmRTbGljZXJDYWNoZVNpUmFuZ2VcIiB9LFxuMHgwNDQ4OiB7IG46XCJCcnRTbGljZXJDYWNoZU9sYXBJdGVtXCIgfSxcbjB4MDQ0OTogeyBuOlwiQnJ0QmVnaW5TbGljZXJDYWNoZVNlbGVjdGlvbnNcIiB9LFxuMHgwNDRBOiB7IG46XCJCcnRTbGljZXJDYWNoZVNlbGVjdGlvblwiIH0sXG4weDA0NEI6IHsgbjpcIkJydEVuZFNsaWNlckNhY2hlU2VsZWN0aW9uc1wiIH0sXG4weDA0NEM6IHsgbjpcIkJydEJlZ2luU2xpY2VyQ2FjaGVOYXRpdmVcIiB9LFxuMHgwNDREOiB7IG46XCJCcnRFbmRTbGljZXJDYWNoZU5hdGl2ZVwiIH0sXG4weDA0NEU6IHsgbjpcIkJydFNsaWNlckNhY2hlTmF0aXZlSXRlbVwiIH0sXG4weDA0NEY6IHsgbjpcIkJydFJhbmdlUHJvdGVjdGlvbjE0XCIgfSxcbjB4MDQ1MDogeyBuOlwiQnJ0UmFuZ2VQcm90ZWN0aW9uSXNvMTRcIiB9LFxuMHgwNDUxOiB7IG46XCJCcnRDZWxsSWdub3JlRUMxNFwiIH0sXG4weDA0NTc6IHsgbjpcIkJydExpc3QxNFwiIH0sXG4weDA0NTg6IHsgbjpcIkJydENGSWNvblwiIH0sXG4weDA0NTk6IHsgbjpcIkJydEJlZ2luU2xpY2VyQ2FjaGVzUGl2b3RDYWNoZUlEc1wiIH0sXG4weDA0NUE6IHsgbjpcIkJydEVuZFNsaWNlckNhY2hlc1Bpdm90Q2FjaGVJRHNcIiB9LFxuMHgwNDVCOiB7IG46XCJCcnRCZWdpblNsaWNlcnNcIiB9LFxuMHgwNDVDOiB7IG46XCJCcnRFbmRTbGljZXJzXCIgfSxcbjB4MDQ1RDogeyBuOlwiQnJ0V2JQcm9wMTRcIiB9LFxuMHgwNDVFOiB7IG46XCJCcnRCZWdpblNYRWRpdFwiIH0sXG4weDA0NUY6IHsgbjpcIkJydEVuZFNYRWRpdFwiIH0sXG4weDA0NjA6IHsgbjpcIkJydEJlZ2luU1hFZGl0c1wiIH0sXG4weDA0NjE6IHsgbjpcIkJydEVuZFNYRWRpdHNcIiB9LFxuMHgwNDYyOiB7IG46XCJCcnRCZWdpblNYQ2hhbmdlXCIgfSxcbjB4MDQ2MzogeyBuOlwiQnJ0RW5kU1hDaGFuZ2VcIiB9LFxuMHgwNDY0OiB7IG46XCJCcnRCZWdpblNYQ2hhbmdlc1wiIH0sXG4weDA0NjU6IHsgbjpcIkJydEVuZFNYQ2hhbmdlc1wiIH0sXG4weDA0NjY6IHsgbjpcIkJydFNYVHVwbGVJdGVtc1wiIH0sXG4weDA0Njg6IHsgbjpcIkJydEJlZ2luU2xpY2VyU3R5bGVcIiB9LFxuMHgwNDY5OiB7IG46XCJCcnRFbmRTbGljZXJTdHlsZVwiIH0sXG4weDA0NkE6IHsgbjpcIkJydFNsaWNlclN0eWxlRWxlbWVudFwiIH0sXG4weDA0NkI6IHsgbjpcIkJydEJlZ2luU3R5bGVTaGVldEV4dDE0XCIgfSxcbjB4MDQ2QzogeyBuOlwiQnJ0RW5kU3R5bGVTaGVldEV4dDE0XCIgfSxcbjB4MDQ2RDogeyBuOlwiQnJ0QmVnaW5TbGljZXJDYWNoZXNQaXZvdENhY2hlSURcIiB9LFxuMHgwNDZFOiB7IG46XCJCcnRFbmRTbGljZXJDYWNoZXNQaXZvdENhY2hlSURcIiB9LFxuMHgwNDZGOiB7IG46XCJCcnRCZWdpbkNvbmRpdGlvbmFsRm9ybWF0dGluZ3NcIiB9LFxuMHgwNDcwOiB7IG46XCJCcnRFbmRDb25kaXRpb25hbEZvcm1hdHRpbmdzXCIgfSxcbjB4MDQ3MTogeyBuOlwiQnJ0QmVnaW5QQ0RDYWxjTWVtRXh0XCIgfSxcbjB4MDQ3MjogeyBuOlwiQnJ0RW5kUENEQ2FsY01lbUV4dFwiIH0sXG4weDA0NzM6IHsgbjpcIkJydEJlZ2luUENEQ2FsY01lbXNFeHRcIiB9LFxuMHgwNDc0OiB7IG46XCJCcnRFbmRQQ0RDYWxjTWVtc0V4dFwiIH0sXG4weDA0NzU6IHsgbjpcIkJydFBDREZpZWxkMTRcIiB9LFxuMHgwNDc2OiB7IG46XCJCcnRCZWdpblNsaWNlclN0eWxlc1wiIH0sXG4weDA0Nzc6IHsgbjpcIkJydEVuZFNsaWNlclN0eWxlc1wiIH0sXG4weDA0Nzg6IHsgbjpcIkJydEJlZ2luU2xpY2VyU3R5bGVFbGVtZW50c1wiIH0sXG4weDA0Nzk6IHsgbjpcIkJydEVuZFNsaWNlclN0eWxlRWxlbWVudHNcIiB9LFxuMHgwNDdBOiB7IG46XCJCcnRDRlJ1bGVFeHRcIiB9LFxuMHgwNDdCOiB7IG46XCJCcnRCZWdpblNYQ29uZEZtdDE0XCIgfSxcbjB4MDQ3QzogeyBuOlwiQnJ0RW5kU1hDb25kRm10MTRcIiB9LFxuMHgwNDdEOiB7IG46XCJCcnRCZWdpblNYQ29uZEZtdHMxNFwiIH0sXG4weDA0N0U6IHsgbjpcIkJydEVuZFNYQ29uZEZtdHMxNFwiIH0sXG4weDA0ODA6IHsgbjpcIkJydEJlZ2luU29ydENvbmQxNFwiIH0sXG4weDA0ODE6IHsgbjpcIkJydEVuZFNvcnRDb25kMTRcIiB9LFxuMHgwNDgyOiB7IG46XCJCcnRFbmREVmFsczE0XCIgfSxcbjB4MDQ4MzogeyBuOlwiQnJ0RW5kSWNvblNldDE0XCIgfSxcbjB4MDQ4NDogeyBuOlwiQnJ0RW5kRGF0YWJhcjE0XCIgfSxcbjB4MDQ4NTogeyBuOlwiQnJ0QmVnaW5Db2xvclNjYWxlMTRcIiB9LFxuMHgwNDg2OiB7IG46XCJCcnRFbmRDb2xvclNjYWxlMTRcIiB9LFxuMHgwNDg3OiB7IG46XCJCcnRCZWdpblN4cnVsZXMxNFwiIH0sXG4weDA0ODg6IHsgbjpcIkJydEVuZFN4cnVsZXMxNFwiIH0sXG4weDA0ODk6IHsgbjpcIkJydEJlZ2luUFJ1bGUxNFwiIH0sXG4weDA0OEE6IHsgbjpcIkJydEVuZFBSdWxlMTRcIiB9LFxuMHgwNDhCOiB7IG46XCJCcnRCZWdpblBSRmlsdGVyczE0XCIgfSxcbjB4MDQ4QzogeyBuOlwiQnJ0RW5kUFJGaWx0ZXJzMTRcIiB9LFxuMHgwNDhEOiB7IG46XCJCcnRCZWdpblBSRmlsdGVyMTRcIiB9LFxuMHgwNDhFOiB7IG46XCJCcnRFbmRQUkZpbHRlcjE0XCIgfSxcbjB4MDQ4RjogeyBuOlwiQnJ0QmVnaW5QUkZJdGVtMTRcIiB9LFxuMHgwNDkwOiB7IG46XCJCcnRFbmRQUkZJdGVtMTRcIiB9LFxuMHgwNDkxOiB7IG46XCJCcnRCZWdpbkNlbGxJZ25vcmVFQ3MxNFwiIH0sXG4weDA0OTI6IHsgbjpcIkJydEVuZENlbGxJZ25vcmVFQ3MxNFwiIH0sXG4weDA0OTM6IHsgbjpcIkJydER4ZjE0XCIgfSxcbjB4MDQ5NDogeyBuOlwiQnJ0QmVnaW5EeEYxNHNcIiB9LFxuMHgwNDk1OiB7IG46XCJCcnRFbmREeGYxNHNcIiB9LFxuMHgwNDk5OiB7IG46XCJCcnRGaWx0ZXIxNFwiIH0sXG4weDA0OUE6IHsgbjpcIkJydEJlZ2luQ3VzdG9tRmlsdGVyczE0XCIgfSxcbjB4MDQ5QzogeyBuOlwiQnJ0Q3VzdG9tRmlsdGVyMTRcIiB9LFxuMHgwNDlEOiB7IG46XCJCcnRJY29uRmlsdGVyMTRcIiB9LFxuMHgwNDlFOiB7IG46XCJCcnRQaXZvdENhY2hlQ29ubmVjdGlvbk5hbWVcIiB9LFxuMHgwODAwOiB7IG46XCJCcnRCZWdpbkRlY291cGxlZFBpdm90Q2FjaGVJRHNcIiB9LFxuMHgwODAxOiB7IG46XCJCcnRFbmREZWNvdXBsZWRQaXZvdENhY2hlSURzXCIgfSxcbjB4MDgwMjogeyBuOlwiQnJ0RGVjb3VwbGVkUGl2b3RDYWNoZUlEXCIgfSxcbjB4MDgwMzogeyBuOlwiQnJ0QmVnaW5QaXZvdFRhYmxlUmVmc1wiIH0sXG4weDA4MDQ6IHsgbjpcIkJydEVuZFBpdm90VGFibGVSZWZzXCIgfSxcbjB4MDgwNTogeyBuOlwiQnJ0UGl2b3RUYWJsZVJlZlwiIH0sXG4weDA4MDY6IHsgbjpcIkJydFNsaWNlckNhY2hlQm9va1Bpdm90VGFibGVzXCIgfSxcbjB4MDgwNzogeyBuOlwiQnJ0QmVnaW5TeHZjZWxsc1wiIH0sXG4weDA4MDg6IHsgbjpcIkJydEVuZFN4dmNlbGxzXCIgfSxcbjB4MDgwOTogeyBuOlwiQnJ0QmVnaW5TeFJvd1wiIH0sXG4weDA4MEE6IHsgbjpcIkJydEVuZFN4Um93XCIgfSxcbjB4MDgwQzogeyBuOlwiQnJ0UGNkQ2FsY01lbTE1XCIgfSxcbjB4MDgxMzogeyBuOlwiQnJ0UXNpMTVcIiB9LFxuMHgwODE0OiB7IG46XCJCcnRCZWdpbldlYkV4dGVuc2lvbnNcIiB9LFxuMHgwODE1OiB7IG46XCJCcnRFbmRXZWJFeHRlbnNpb25zXCIgfSxcbjB4MDgxNjogeyBuOlwiQnJ0V2ViRXh0ZW5zaW9uXCIgfSxcbjB4MDgxNzogeyBuOlwiQnJ0QWJzUGF0aDE1XCIgfSxcbjB4MDgxODogeyBuOlwiQnJ0QmVnaW5QaXZvdFRhYmxlVUlTZXR0aW5nc1wiIH0sXG4weDA4MTk6IHsgbjpcIkJydEVuZFBpdm90VGFibGVVSVNldHRpbmdzXCIgfSxcbjB4MDgxQjogeyBuOlwiQnJ0VGFibGVTbGljZXJDYWNoZUlEc1wiIH0sXG4weDA4MUM6IHsgbjpcIkJydFRhYmxlU2xpY2VyQ2FjaGVJRFwiIH0sXG4weDA4MUQ6IHsgbjpcIkJydEJlZ2luVGFibGVTbGljZXJDYWNoZVwiIH0sXG4weDA4MUU6IHsgbjpcIkJydEVuZFRhYmxlU2xpY2VyQ2FjaGVcIiB9LFxuMHgwODFGOiB7IG46XCJCcnRTeEZpbHRlcjE1XCIgfSxcbjB4MDgyMDogeyBuOlwiQnJ0QmVnaW5UaW1lbGluZUNhY2hlUGl2b3RDYWNoZUlEc1wiIH0sXG4weDA4MjE6IHsgbjpcIkJydEVuZFRpbWVsaW5lQ2FjaGVQaXZvdENhY2hlSURzXCIgfSxcbjB4MDgyMjogeyBuOlwiQnJ0VGltZWxpbmVDYWNoZVBpdm90Q2FjaGVJRFwiIH0sXG4weDA4MjM6IHsgbjpcIkJydEJlZ2luVGltZWxpbmVDYWNoZUlEc1wiIH0sXG4weDA4MjQ6IHsgbjpcIkJydEVuZFRpbWVsaW5lQ2FjaGVJRHNcIiB9LFxuMHgwODI1OiB7IG46XCJCcnRCZWdpblRpbWVsaW5lQ2FjaGVJRFwiIH0sXG4weDA4MjY6IHsgbjpcIkJydEVuZFRpbWVsaW5lQ2FjaGVJRFwiIH0sXG4weDA4Mjc6IHsgbjpcIkJydEJlZ2luVGltZWxpbmVzRXhcIiB9LFxuMHgwODI4OiB7IG46XCJCcnRFbmRUaW1lbGluZXNFeFwiIH0sXG4weDA4Mjk6IHsgbjpcIkJydEJlZ2luVGltZWxpbmVFeFwiIH0sXG4weDA4MkE6IHsgbjpcIkJydEVuZFRpbWVsaW5lRXhcIiB9LFxuMHgwODJCOiB7IG46XCJCcnRXb3JrQm9va1ByMTVcIiB9LFxuMHgwODJDOiB7IG46XCJCcnRQQ0RIMTVcIiB9LFxuMHgwODJEOiB7IG46XCJCcnRCZWdpblRpbWVsaW5lU3R5bGVcIiB9LFxuMHgwODJFOiB7IG46XCJCcnRFbmRUaW1lbGluZVN0eWxlXCIgfSxcbjB4MDgyRjogeyBuOlwiQnJ0VGltZWxpbmVTdHlsZUVsZW1lbnRcIiB9LFxuMHgwODMwOiB7IG46XCJCcnRCZWdpblRpbWVsaW5lU3R5bGVzaGVldEV4dDE1XCIgfSxcbjB4MDgzMTogeyBuOlwiQnJ0RW5kVGltZWxpbmVTdHlsZXNoZWV0RXh0MTVcIiB9LFxuMHgwODMyOiB7IG46XCJCcnRCZWdpblRpbWVsaW5lU3R5bGVzXCIgfSxcbjB4MDgzMzogeyBuOlwiQnJ0RW5kVGltZWxpbmVTdHlsZXNcIiB9LFxuMHgwODM0OiB7IG46XCJCcnRCZWdpblRpbWVsaW5lU3R5bGVFbGVtZW50c1wiIH0sXG4weDA4MzU6IHsgbjpcIkJydEVuZFRpbWVsaW5lU3R5bGVFbGVtZW50c1wiIH0sXG4weDA4MzY6IHsgbjpcIkJydER4ZjE1XCIgfSxcbjB4MDgzNzogeyBuOlwiQnJ0QmVnaW5EeGZzMTVcIiB9LFxuMHgwODM4OiB7IG46XCJicnRFbmREeGZzMTVcIiB9LFxuMHgwODM5OiB7IG46XCJCcnRTbGljZXJDYWNoZUhpZGVJdGVtc1dpdGhOb0RhdGFcIiB9LFxuMHgwODNBOiB7IG46XCJCcnRCZWdpbkl0ZW1VbmlxdWVOYW1lc1wiIH0sXG4weDA4M0I6IHsgbjpcIkJydEVuZEl0ZW1VbmlxdWVOYW1lc1wiIH0sXG4weDA4M0M6IHsgbjpcIkJydEl0ZW1VbmlxdWVOYW1lXCIgfSxcbjB4MDgzRDogeyBuOlwiQnJ0QmVnaW5FeHRDb25uMTVcIiB9LFxuMHgwODNFOiB7IG46XCJCcnRFbmRFeHRDb25uMTVcIiB9LFxuMHgwODNGOiB7IG46XCJCcnRCZWdpbk9sZWRiUHIxNVwiIH0sXG4weDA4NDA6IHsgbjpcIkJydEVuZE9sZWRiUHIxNVwiIH0sXG4weDA4NDE6IHsgbjpcIkJydEJlZ2luRGF0YUZlZWRQcjE1XCIgfSxcbjB4MDg0MjogeyBuOlwiQnJ0RW5kRGF0YUZlZWRQcjE1XCIgfSxcbjB4MDg0MzogeyBuOlwiQnJ0VGV4dFByMTVcIiB9LFxuMHgwODQ0OiB7IG46XCJCcnRSYW5nZVByMTVcIiB9LFxuMHgwODQ1OiB7IG46XCJCcnREYkNvbW1hbmQxNVwiIH0sXG4weDA4NDY6IHsgbjpcIkJydEJlZ2luRGJUYWJsZXMxNVwiIH0sXG4weDA4NDc6IHsgbjpcIkJydEVuZERiVGFibGVzMTVcIiB9LFxuMHgwODQ4OiB7IG46XCJCcnREYlRhYmxlMTVcIiB9LFxuMHgwODQ5OiB7IG46XCJCcnRCZWdpbkRhdGFNb2RlbFwiIH0sXG4weDA4NEE6IHsgbjpcIkJydEVuZERhdGFNb2RlbFwiIH0sXG4weDA4NEI6IHsgbjpcIkJydEJlZ2luTW9kZWxUYWJsZXNcIiB9LFxuMHgwODRDOiB7IG46XCJCcnRFbmRNb2RlbFRhYmxlc1wiIH0sXG4weDA4NEQ6IHsgbjpcIkJydE1vZGVsVGFibGVcIiB9LFxuMHgwODRFOiB7IG46XCJCcnRCZWdpbk1vZGVsUmVsYXRpb25zaGlwc1wiIH0sXG4weDA4NEY6IHsgbjpcIkJydEVuZE1vZGVsUmVsYXRpb25zaGlwc1wiIH0sXG4weDA4NTA6IHsgbjpcIkJydE1vZGVsUmVsYXRpb25zaGlwXCIgfSxcbjB4MDg1MTogeyBuOlwiQnJ0QmVnaW5FQ1R4dFdpejE1XCIgfSxcbjB4MDg1MjogeyBuOlwiQnJ0RW5kRUNUeHRXaXoxNVwiIH0sXG4weDA4NTM6IHsgbjpcIkJydEJlZ2luRUNUV0ZsZEluZm9Mc3QxNVwiIH0sXG4weDA4NTQ6IHsgbjpcIkJydEVuZEVDVFdGbGRJbmZvTHN0MTVcIiB9LFxuMHgwODU1OiB7IG46XCJCcnRCZWdpbkVDVFdGbGRJbmZvMTVcIiB9LFxuMHgwODU2OiB7IG46XCJCcnRGaWVsZExpc3RBY3RpdmVJdGVtXCIgfSxcbjB4MDg1NzogeyBuOlwiQnJ0UGl2b3RDYWNoZUlkVmVyc2lvblwiIH0sXG4weDA4NTg6IHsgbjpcIkJydFNYREkxNVwiIH0sXG4weDA4NTk6IHsgbjpcIkJydEJlZ2luTW9kZWxUaW1lR3JvdXBpbmdzXCIgfSxcbjB4MDg1QTogeyBuOlwiQnJ0RW5kTW9kZWxUaW1lR3JvdXBpbmdzXCIgfSxcbjB4MDg1QjogeyBuOlwiQnJ0QmVnaW5Nb2RlbFRpbWVHcm91cGluZ1wiIH0sXG4weDA4NUM6IHsgbjpcIkJydEVuZE1vZGVsVGltZUdyb3VwaW5nXCIgfSxcbjB4MDg1RDogeyBuOlwiQnJ0TW9kZWxUaW1lR3JvdXBpbmdDYWxjQ29sXCIgfSxcbjB4MEMwMDogeyBuOlwiQnJ0VWlkXCIgfSxcbjB4MEMwMTogeyBuOlwiQnJ0UmV2aXNpb25QdHJcIiB9LFxuMHgxM2U3OiB7IG46XCJCcnRCZWdpbkNhbGNGZWF0dXJlc1wiIH0sXG4weDEzZTg6IHsgbjpcIkJydEVuZENhbGNGZWF0dXJlc1wiIH0sXG4weDEzZTk6IHsgbjpcIkJydENhbGNGZWF0dXJlXCIgfSxcbjB4RkZGRjogeyBuOlwiXCIgfVxufTtcblxudmFyIFhMU0JSRSA9IGV2ZXJ0X2tleShYTFNCUmVjb3JkRW51bSwgJ24nKTtcblhMU0JSRVtcIkJydEZSVEFyY2hJRCRcIl0gPSAweDAwMTA7XG5cbi8qIFtNUy1YTFNdIDIuMyBSZWNvcmQgRW51bWVyYXRpb24gKGFuZCBvdGhlciBzb3VyY2VzKSAqL1xudmFyIFhMU1JlY29yZEVudW0gPSB7XG5cdC8qIFtNUy1YTFNdIDIuMyBSZWNvcmQgRW51bWVyYXRpb24gMjAyMS0wOC0xNyAqL1xuMHgwMDA2OiB7IG46XCJGb3JtdWxhXCIsIGY6cGFyc2VfRm9ybXVsYSB9LFxuMHgwMDBhOiB7IG46J0VPRicsIGY6cGFyc2Vub29wMiB9LFxuMHgwMDBjOiB7IG46XCJDYWxjQ291bnRcIiwgZjpwYXJzZXVpbnQxNiB9LFxuMHgwMDBkOiB7IG46XCJDYWxjTW9kZVwiLCBmOnBhcnNldWludDE2IH0sXG4weDAwMGU6IHsgbjpcIkNhbGNQcmVjaXNpb25cIiwgZjpwYXJzZWJvb2wgfSxcbjB4MDAwZjogeyBuOlwiQ2FsY1JlZk1vZGVcIiwgZjpwYXJzZWJvb2wgfSxcbjB4MDAxMDogeyBuOlwiQ2FsY0RlbHRhXCIsIGY6cGFyc2VfWG51bSB9LFxuMHgwMDExOiB7IG46XCJDYWxjSXRlclwiLCBmOnBhcnNlYm9vbCB9LFxuMHgwMDEyOiB7IG46XCJQcm90ZWN0XCIsIGY6cGFyc2Vib29sIH0sXG4weDAwMTM6IHsgbjpcIlBhc3N3b3JkXCIsIGY6cGFyc2V1aW50MTYgfSxcbjB4MDAxNDogeyBuOlwiSGVhZGVyXCIsIGY6cGFyc2VfWExIZWFkZXJGb290ZXIgfSxcbjB4MDAxNTogeyBuOlwiRm9vdGVyXCIsIGY6cGFyc2VfWExIZWFkZXJGb290ZXIgfSxcbjB4MDAxNzogeyBuOlwiRXh0ZXJuU2hlZXRcIiwgZjpwYXJzZV9FeHRlcm5TaGVldCB9LFxuMHgwMDE4OiB7IG46XCJMYmxcIiwgZjpwYXJzZV9MYmwgfSxcbjB4MDAxOTogeyBuOlwiV2luUHJvdGVjdFwiLCBmOnBhcnNlYm9vbCB9LFxuMHgwMDFhOiB7IG46XCJWZXJ0aWNhbFBhZ2VCcmVha3NcIiB9LFxuMHgwMDFiOiB7IG46XCJIb3Jpem9udGFsUGFnZUJyZWFrc1wiIH0sXG4weDAwMWM6IHsgbjpcIk5vdGVcIiwgZjpwYXJzZV9Ob3RlIH0sXG4weDAwMWQ6IHsgbjpcIlNlbGVjdGlvblwiIH0sXG4weDAwMjI6IHsgbjpcIkRhdGUxOTA0XCIsIGY6cGFyc2Vib29sIH0sXG4weDAwMjM6IHsgbjpcIkV4dGVybk5hbWVcIiwgZjpwYXJzZV9FeHRlcm5OYW1lIH0sXG4weDAwMjY6IHsgbjpcIkxlZnRNYXJnaW5cIiwgZjpwYXJzZV9YbnVtIH0sXG4weDAwMjc6IHsgbjpcIlJpZ2h0TWFyZ2luXCIsIGY6cGFyc2VfWG51bSB9LFxuMHgwMDI4OiB7IG46XCJUb3BNYXJnaW5cIiwgZjpwYXJzZV9YbnVtIH0sXG4weDAwMjk6IHsgbjpcIkJvdHRvbU1hcmdpblwiLCBmOnBhcnNlX1hudW0gfSxcbjB4MDAyYTogeyBuOlwiUHJpbnRSb3dDb2xcIiwgZjpwYXJzZWJvb2wgfSxcbjB4MDAyYjogeyBuOlwiUHJpbnRHcmlkXCIsIGY6cGFyc2Vib29sIH0sXG4weDAwMmY6IHsgbjpcIkZpbGVQYXNzXCIsIGY6cGFyc2VfRmlsZVBhc3MgfSxcbjB4MDAzMTogeyBuOlwiRm9udFwiLCBmOnBhcnNlX0ZvbnQgfSxcbjB4MDAzMzogeyBuOlwiUHJpbnRTaXplXCIsIGY6cGFyc2V1aW50MTYgfSxcbjB4MDAzYzogeyBuOlwiQ29udGludWVcIiB9LFxuMHgwMDNkOiB7IG46XCJXaW5kb3cxXCIsIGY6cGFyc2VfV2luZG93MSB9LFxuMHgwMDQwOiB7IG46XCJCYWNrdXBcIiwgZjpwYXJzZWJvb2wgfSxcbjB4MDA0MTogeyBuOlwiUGFuZVwiLCBmOnBhcnNlX1BhbmUgfSxcbjB4MDA0MjogeyBuOidDb2RlUGFnZScsIGY6cGFyc2V1aW50MTYgfSxcbjB4MDA0ZDogeyBuOlwiUGxzXCIgfSxcbjB4MDA1MDogeyBuOlwiRENvblwiIH0sXG4weDAwNTE6IHsgbjpcIkRDb25SZWZcIiB9LFxuMHgwMDUyOiB7IG46XCJEQ29uTmFtZVwiIH0sXG4weDAwNTU6IHsgbjpcIkRlZkNvbFdpZHRoXCIsIGY6cGFyc2V1aW50MTYgfSxcbjB4MDA1OTogeyBuOlwiWENUXCIgfSxcbjB4MDA1YTogeyBuOlwiQ1JOXCIgfSxcbjB4MDA1YjogeyBuOlwiRmlsZVNoYXJpbmdcIiB9LFxuMHgwMDVjOiB7IG46J1dyaXRlQWNjZXNzJywgZjpwYXJzZV9Xcml0ZUFjY2VzcyB9LFxuMHgwMDVkOiB7IG46XCJPYmpcIiwgZjpwYXJzZV9PYmogfSxcbjB4MDA1ZTogeyBuOlwiVW5jYWxjZWRcIiB9LFxuMHgwMDVmOiB7IG46XCJDYWxjU2F2ZVJlY2FsY1wiLCBmOnBhcnNlYm9vbCB9LFxuMHgwMDYwOiB7IG46XCJUZW1wbGF0ZVwiIH0sXG4weDAwNjE6IHsgbjpcIkludGxcIiB9LFxuMHgwMDYzOiB7IG46XCJPYmpQcm90ZWN0XCIsIGY6cGFyc2Vib29sIH0sXG4weDAwN2Q6IHsgbjpcIkNvbEluZm9cIiwgZjpwYXJzZV9Db2xJbmZvIH0sXG4weDAwODA6IHsgbjpcIkd1dHNcIiwgZjpwYXJzZV9HdXRzIH0sXG4weDAwODE6IHsgbjpcIldzQm9vbFwiLCBmOnBhcnNlX1dzQm9vbCB9LFxuMHgwMDgyOiB7IG46XCJHcmlkU2V0XCIsIGY6cGFyc2V1aW50MTYgfSxcbjB4MDA4MzogeyBuOlwiSENlbnRlclwiLCBmOnBhcnNlYm9vbCB9LFxuMHgwMDg0OiB7IG46XCJWQ2VudGVyXCIsIGY6cGFyc2Vib29sIH0sXG4weDAwODU6IHsgbjonQm91bmRTaGVldDgnLCBmOnBhcnNlX0JvdW5kU2hlZXQ4IH0sXG4weDAwODY6IHsgbjpcIldyaXRlUHJvdGVjdFwiIH0sXG4weDAwOGM6IHsgbjpcIkNvdW50cnlcIiwgZjpwYXJzZV9Db3VudHJ5IH0sXG4weDAwOGQ6IHsgbjpcIkhpZGVPYmpcIiwgZjpwYXJzZXVpbnQxNiB9LFxuMHgwMDkwOiB7IG46XCJTb3J0XCIgfSxcbjB4MDA5MjogeyBuOlwiUGFsZXR0ZVwiLCBmOnBhcnNlX1BhbGV0dGUgfSxcbjB4MDA5NzogeyBuOlwiU3luY1wiIH0sXG4weDAwOTg6IHsgbjpcIkxQclwiIH0sXG4weDAwOTk6IHsgbjpcIkR4R0NvbFwiIH0sXG4weDAwOWE6IHsgbjpcIkZuR3JvdXBOYW1lXCIgfSxcbjB4MDA5YjogeyBuOlwiRmlsdGVyTW9kZVwiIH0sXG4weDAwOWM6IHsgbjpcIkJ1aWx0SW5Gbkdyb3VwQ291bnRcIiwgZjpwYXJzZXVpbnQxNiB9LFxuMHgwMDlkOiB7IG46XCJBdXRvRmlsdGVySW5mb1wiIH0sXG4weDAwOWU6IHsgbjpcIkF1dG9GaWx0ZXJcIiB9LFxuMHgwMGEwOiB7IG46XCJTY2xcIiwgZjpwYXJzZV9TY2wgfSxcbjB4MDBhMTogeyBuOlwiU2V0dXBcIiwgZjpwYXJzZV9TZXR1cCB9LFxuMHgwMGFlOiB7IG46XCJTY2VuTWFuXCIgfSxcbjB4MDBhZjogeyBuOlwiU0NFTkFSSU9cIiB9LFxuMHgwMGIwOiB7IG46XCJTeFZpZXdcIiB9LFxuMHgwMGIxOiB7IG46XCJTeHZkXCIgfSxcbjB4MDBiMjogeyBuOlwiU1hWSVwiIH0sXG4weDAwYjQ6IHsgbjpcIlN4SXZkXCIgfSxcbjB4MDBiNTogeyBuOlwiU1hMSVwiIH0sXG4weDAwYjY6IHsgbjpcIlNYUElcIiB9LFxuMHgwMGI4OiB7IG46XCJEb2NSb3V0ZVwiIH0sXG4weDAwYjk6IHsgbjpcIlJlY2lwTmFtZVwiIH0sXG4weDAwYmQ6IHsgbjpcIk11bFJrXCIsIGY6cGFyc2VfTXVsUmsgfSxcbjB4MDBiZTogeyBuOlwiTXVsQmxhbmtcIiwgZjpwYXJzZV9NdWxCbGFuayB9LFxuMHgwMGMxOiB7IG46J01tcycsIGY6cGFyc2Vub29wMiB9LFxuMHgwMGM1OiB7IG46XCJTWERJXCIgfSxcbjB4MDBjNjogeyBuOlwiU1hEQlwiIH0sXG4weDAwYzc6IHsgbjpcIlNYRkRCXCIgfSxcbjB4MDBjODogeyBuOlwiU1hEQkJcIiB9LFxuMHgwMGM5OiB7IG46XCJTWE51bVwiIH0sXG4weDAwY2E6IHsgbjpcIlN4Qm9vbFwiLCBmOnBhcnNlYm9vbCB9LFxuMHgwMGNiOiB7IG46XCJTeEVyclwiIH0sXG4weDAwY2M6IHsgbjpcIlNYSW50XCIgfSxcbjB4MDBjZDogeyBuOlwiU1hTdHJpbmdcIiB9LFxuMHgwMGNlOiB7IG46XCJTWER0clwiIH0sXG4weDAwY2Y6IHsgbjpcIlN4TmlsXCIgfSxcbjB4MDBkMDogeyBuOlwiU1hUYmxcIiB9LFxuMHgwMGQxOiB7IG46XCJTWFRCUkdJSVRNXCIgfSxcbjB4MDBkMjogeyBuOlwiU3hUYnBnXCIgfSxcbjB4MDBkMzogeyBuOlwiT2JQcm9qXCIgfSxcbjB4MDBkNTogeyBuOlwiU1hTdHJlYW1JRFwiIH0sXG4weDAwZDc6IHsgbjpcIkRCQ2VsbFwiIH0sXG4weDAwZDg6IHsgbjpcIlNYUm5nXCIgfSxcbjB4MDBkOTogeyBuOlwiU3hJc3hvcGVyXCIgfSxcbjB4MDBkYTogeyBuOlwiQm9va0Jvb2xcIiwgZjpwYXJzZXVpbnQxNiB9LFxuMHgwMGRjOiB7IG46XCJEYk9yUGFyYW1RcnlcIiB9LFxuMHgwMGRkOiB7IG46XCJTY2VuYXJpb1Byb3RlY3RcIiwgZjpwYXJzZWJvb2wgfSxcbjB4MDBkZTogeyBuOlwiT2xlT2JqZWN0U2l6ZVwiIH0sXG4weDAwZTA6IHsgbjpcIlhGXCIsIGY6cGFyc2VfWEYgfSxcbjB4MDBlMTogeyBuOidJbnRlcmZhY2VIZHInLCBmOnBhcnNlX0ludGVyZmFjZUhkciB9LFxuMHgwMGUyOiB7IG46J0ludGVyZmFjZUVuZCcsIGY6cGFyc2Vub29wMiB9LFxuMHgwMGUzOiB7IG46XCJTWFZTXCIgfSxcbjB4MDBlNTogeyBuOlwiTWVyZ2VDZWxsc1wiLCBmOnBhcnNlX01lcmdlQ2VsbHMgfSxcbjB4MDBlOTogeyBuOlwiQmtIaW1cIiB9LFxuMHgwMGViOiB7IG46XCJNc29EcmF3aW5nR3JvdXBcIiB9LFxuMHgwMGVjOiB7IG46XCJNc29EcmF3aW5nXCIgfSxcbjB4MDBlZDogeyBuOlwiTXNvRHJhd2luZ1NlbGVjdGlvblwiIH0sXG4weDAwZWY6IHsgbjpcIlBob25ldGljSW5mb1wiIH0sXG4weDAwZjA6IHsgbjpcIlN4UnVsZVwiIH0sXG4weDAwZjE6IHsgbjpcIlNYRXhcIiB9LFxuMHgwMGYyOiB7IG46XCJTeEZpbHRcIiB9LFxuMHgwMGY0OiB7IG46XCJTeERYRlwiIH0sXG4weDAwZjU6IHsgbjpcIlN4SXRtXCIgfSxcbjB4MDBmNjogeyBuOlwiU3hOYW1lXCIgfSxcbjB4MDBmNzogeyBuOlwiU3hTZWxlY3RcIiB9LFxuMHgwMGY4OiB7IG46XCJTWFBhaXJcIiB9LFxuMHgwMGY5OiB7IG46XCJTeEZtbGFcIiB9LFxuMHgwMGZiOiB7IG46XCJTeEZvcm1hdFwiIH0sXG4weDAwZmM6IHsgbjpcIlNTVFwiLCBmOnBhcnNlX1NTVCB9LFxuMHgwMGZkOiB7IG46XCJMYWJlbFNzdFwiLCBmOnBhcnNlX0xhYmVsU3N0IH0sXG4weDAwZmY6IHsgbjpcIkV4dFNTVFwiLCBmOnBhcnNlX0V4dFNTVCB9LFxuMHgwMTAwOiB7IG46XCJTWFZERXhcIiB9LFxuMHgwMTAzOiB7IG46XCJTWEZvcm11bGFcIiB9LFxuMHgwMTIyOiB7IG46XCJTWERCRXhcIiB9LFxuMHgwMTM3OiB7IG46XCJSUkRJbnNEZWxcIiB9LFxuMHgwMTM4OiB7IG46XCJSUkRIZWFkXCIgfSxcbjB4MDEzYjogeyBuOlwiUlJEQ2hnQ2VsbFwiIH0sXG4weDAxM2Q6IHsgbjpcIlJSVGFiSWRcIiwgZjpwYXJzZXVpbnQxNmEgfSxcbjB4MDEzZTogeyBuOlwiUlJEUmVuU2hlZXRcIiB9LFxuMHgwMTNmOiB7IG46XCJSUlNvcnRcIiB9LFxuMHgwMTQwOiB7IG46XCJSUkRNb3ZlXCIgfSxcbjB4MDE0YTogeyBuOlwiUlJGb3JtYXRcIiB9LFxuMHgwMTRiOiB7IG46XCJSUkF1dG9GbXRcIiB9LFxuMHgwMTRkOiB7IG46XCJSUkluc2VydFNoXCIgfSxcbjB4MDE0ZTogeyBuOlwiUlJETW92ZUJlZ2luXCIgfSxcbjB4MDE0ZjogeyBuOlwiUlJETW92ZUVuZFwiIH0sXG4weDAxNTA6IHsgbjpcIlJSREluc0RlbEJlZ2luXCIgfSxcbjB4MDE1MTogeyBuOlwiUlJESW5zRGVsRW5kXCIgfSxcbjB4MDE1MjogeyBuOlwiUlJEQ29uZmxpY3RcIiB9LFxuMHgwMTUzOiB7IG46XCJSUkREZWZOYW1lXCIgfSxcbjB4MDE1NDogeyBuOlwiUlJEUnN0RXR4cFwiIH0sXG4weDAxNWY6IHsgbjpcIkxSbmdcIiB9LFxuMHgwMTYwOiB7IG46XCJVc2VzRUxGc1wiLCBmOnBhcnNlYm9vbCB9LFxuMHgwMTYxOiB7IG46XCJEU0ZcIiwgZjpwYXJzZW5vb3AyIH0sXG4weDAxOTE6IHsgbjpcIkNVc3JcIiB9LFxuMHgwMTkyOiB7IG46XCJDYlVzclwiIH0sXG4weDAxOTM6IHsgbjpcIlVzckluZm9cIiB9LFxuMHgwMTk0OiB7IG46XCJVc3JFeGNsXCIgfSxcbjB4MDE5NTogeyBuOlwiRmlsZUxvY2tcIiB9LFxuMHgwMTk2OiB7IG46XCJSUkRJbmZvXCIgfSxcbjB4MDE5NzogeyBuOlwiQkNVc3JzXCIgfSxcbjB4MDE5ODogeyBuOlwiVXNyQ2hrXCIgfSxcbjB4MDFhOTogeyBuOlwiVXNlckJWaWV3XCIgfSxcbjB4MDFhYTogeyBuOlwiVXNlclNWaWV3QmVnaW5cIiB9LFxuMHgwMWFiOiB7IG46XCJVc2VyU1ZpZXdFbmRcIiB9LFxuMHgwMWFjOiB7IG46XCJSUkRVc2VyVmlld1wiIH0sXG4weDAxYWQ6IHsgbjpcIlFzaVwiIH0sXG4weDAxYWU6IHsgbjpcIlN1cEJvb2tcIiwgZjpwYXJzZV9TdXBCb29rIH0sXG4weDAxYWY6IHsgbjpcIlByb3Q0UmV2XCIsIGY6cGFyc2Vib29sIH0sXG4weDAxYjA6IHsgbjpcIkNvbmRGbXRcIiB9LFxuMHgwMWIxOiB7IG46XCJDRlwiIH0sXG4weDAxYjI6IHsgbjpcIkRWYWxcIiB9LFxuMHgwMWI1OiB7IG46XCJEQ29uQmluXCIgfSxcbjB4MDFiNjogeyBuOlwiVHhPXCIsIGY6cGFyc2VfVHhPIH0sXG4weDAxYjc6IHsgbjpcIlJlZnJlc2hBbGxcIiwgZjpwYXJzZWJvb2wgfSxcbjB4MDFiODogeyBuOlwiSExpbmtcIiwgZjpwYXJzZV9ITGluayB9LFxuMHgwMWI5OiB7IG46XCJMZWxcIiB9LFxuMHgwMWJhOiB7IG46XCJDb2RlTmFtZVwiLCBmOnBhcnNlX1hMVW5pY29kZVN0cmluZyB9LFxuMHgwMWJiOiB7IG46XCJTWEZEQlR5cGVcIiB9LFxuMHgwMWJjOiB7IG46XCJQcm90NFJldlBhc3NcIiwgZjpwYXJzZXVpbnQxNiB9LFxuMHgwMWJkOiB7IG46XCJPYk5vTWFjcm9zXCIgfSxcbjB4MDFiZTogeyBuOlwiRHZcIiB9LFxuMHgwMWMwOiB7IG46XCJFeGNlbDlGaWxlXCIsIGY6cGFyc2Vub29wMiB9LFxuMHgwMWMxOiB7IG46XCJSZWNhbGNJZFwiLCBmOnBhcnNlX1JlY2FsY0lkLCByOjJ9LFxuMHgwMWMyOiB7IG46XCJFbnRFeFUyXCIsIGY6cGFyc2Vub29wMiB9LFxuMHgwMjAwOiB7IG46XCJEaW1lbnNpb25zXCIsIGY6cGFyc2VfRGltZW5zaW9ucyB9LFxuMHgwMjAxOiB7IG46XCJCbGFua1wiLCBmOnBhcnNlX0JsYW5rIH0sXG4weDAyMDM6IHsgbjpcIk51bWJlclwiLCBmOnBhcnNlX051bWJlciB9LFxuMHgwMjA0OiB7IG46XCJMYWJlbFwiLCBmOnBhcnNlX0xhYmVsIH0sXG4weDAyMDU6IHsgbjpcIkJvb2xFcnJcIiwgZjpwYXJzZV9Cb29sRXJyIH0sXG4weDAyMDc6IHsgbjpcIlN0cmluZ1wiLCBmOnBhcnNlX1N0cmluZyB9LFxuMHgwMjA4OiB7IG46J1JvdycsIGY6cGFyc2VfUm93IH0sXG4weDAyMGI6IHsgbjpcIkluZGV4XCIgfSxcbjB4MDIyMTogeyBuOlwiQXJyYXlcIiwgZjpwYXJzZV9BcnJheSB9LFxuMHgwMjI1OiB7IG46XCJEZWZhdWx0Um93SGVpZ2h0XCIsIGY6cGFyc2VfRGVmYXVsdFJvd0hlaWdodCB9LFxuMHgwMjM2OiB7IG46XCJUYWJsZVwiIH0sXG4weDAyM2U6IHsgbjpcIldpbmRvdzJcIiwgZjpwYXJzZV9XaW5kb3cyIH0sXG4weDAyN2U6IHsgbjpcIlJLXCIsIGY6cGFyc2VfUksgfSxcbjB4MDI5MzogeyBuOlwiU3R5bGVcIiB9LFxuMHgwNDE4OiB7IG46XCJCaWdOYW1lXCIgfSxcbjB4MDQxZTogeyBuOlwiRm9ybWF0XCIsIGY6cGFyc2VfRm9ybWF0IH0sXG4weDA0M2M6IHsgbjpcIkNvbnRpbnVlQmlnTmFtZVwiIH0sXG4weDA0YmM6IHsgbjpcIlNockZtbGFcIiwgZjpwYXJzZV9TaHJGbWxhIH0sXG4weDA4MDA6IHsgbjpcIkhMaW5rVG9vbHRpcFwiLCBmOnBhcnNlX0hMaW5rVG9vbHRpcCB9LFxuMHgwODAxOiB7IG46XCJXZWJQdWJcIiB9LFxuMHgwODAyOiB7IG46XCJRc2lTWFRhZ1wiIH0sXG4weDA4MDM6IHsgbjpcIkRCUXVlcnlFeHRcIiB9LFxuMHgwODA0OiB7IG46XCJFeHRTdHJpbmdcIiB9LFxuMHgwODA1OiB7IG46XCJUeHRRcnlcIiB9LFxuMHgwODA2OiB7IG46XCJRc2lyXCIgfSxcbjB4MDgwNzogeyBuOlwiUXNpZlwiIH0sXG4weDA4MDg6IHsgbjpcIlJSRFRRU0lGXCIgfSxcbjB4MDgwOTogeyBuOidCT0YnLCBmOnBhcnNlX0JPRiB9LFxuMHgwODBhOiB7IG46XCJPbGVEYkNvbm5cIiB9LFxuMHgwODBiOiB7IG46XCJXT3B0XCIgfSxcbjB4MDgwYzogeyBuOlwiU1hWaWV3RXhcIiB9LFxuMHgwODBkOiB7IG46XCJTWFRIXCIgfSxcbjB4MDgwZTogeyBuOlwiU1hQSUV4XCIgfSxcbjB4MDgwZjogeyBuOlwiU1hWRFRFeFwiIH0sXG4weDA4MTA6IHsgbjpcIlNYVmlld0V4OVwiIH0sXG4weDA4MTI6IHsgbjpcIkNvbnRpbnVlRnJ0XCIgfSxcbjB4MDgxMzogeyBuOlwiUmVhbFRpbWVEYXRhXCIgfSxcbjB4MDg1MDogeyBuOlwiQ2hhcnRGcnRJbmZvXCIgfSxcbjB4MDg1MTogeyBuOlwiRnJ0V3JhcHBlclwiIH0sXG4weDA4NTI6IHsgbjpcIlN0YXJ0QmxvY2tcIiB9LFxuMHgwODUzOiB7IG46XCJFbmRCbG9ja1wiIH0sXG4weDA4NTQ6IHsgbjpcIlN0YXJ0T2JqZWN0XCIgfSxcbjB4MDg1NTogeyBuOlwiRW5kT2JqZWN0XCIgfSxcbjB4MDg1NjogeyBuOlwiQ2F0TGFiXCIgfSxcbjB4MDg1NzogeyBuOlwiWU11bHRcIiB9LFxuMHgwODU4OiB7IG46XCJTWFZpZXdMaW5rXCIgfSxcbjB4MDg1OTogeyBuOlwiUGl2b3RDaGFydEJpdHNcIiB9LFxuMHgwODVhOiB7IG46XCJGcnRGb250TGlzdFwiIH0sXG4weDA4NjI6IHsgbjpcIlNoZWV0RXh0XCIgfSxcbjB4MDg2MzogeyBuOlwiQm9va0V4dFwiLCByOjEyfSxcbjB4MDg2NDogeyBuOlwiU1hBZGRsXCIgfSxcbjB4MDg2NTogeyBuOlwiQ3JFcnJcIiB9LFxuMHgwODY2OiB7IG46XCJIRlBpY3R1cmVcIiB9LFxuMHgwODY3OiB7IG46J0ZlYXRIZHInLCBmOnBhcnNlbm9vcDIgfSxcbjB4MDg2ODogeyBuOlwiRmVhdFwiIH0sXG4weDA4NmE6IHsgbjpcIkRhdGFMYWJFeHRcIiB9LFxuMHgwODZiOiB7IG46XCJEYXRhTGFiRXh0Q29udGVudHNcIiB9LFxuMHgwODZjOiB7IG46XCJDZWxsV2F0Y2hcIiB9LFxuMHgwODcxOiB7IG46XCJGZWF0SGRyMTFcIiB9LFxuMHgwODcyOiB7IG46XCJGZWF0dXJlMTFcIiB9LFxuMHgwODc0OiB7IG46XCJEcm9wRG93bk9iaklkc1wiIH0sXG4weDA4NzU6IHsgbjpcIkNvbnRpbnVlRnJ0MTFcIiB9LFxuMHgwODc2OiB7IG46XCJEQ29ublwiIH0sXG4weDA4Nzc6IHsgbjpcIkxpc3QxMlwiIH0sXG4weDA4Nzg6IHsgbjpcIkZlYXR1cmUxMlwiIH0sXG4weDA4Nzk6IHsgbjpcIkNvbmRGbXQxMlwiIH0sXG4weDA4N2E6IHsgbjpcIkNGMTJcIiB9LFxuMHgwODdiOiB7IG46XCJDRkV4XCIgfSxcbjB4MDg3YzogeyBuOlwiWEZDUkNcIiwgZjpwYXJzZV9YRkNSQywgcjoxMiB9LFxuMHgwODdkOiB7IG46XCJYRkV4dFwiLCBmOnBhcnNlX1hGRXh0LCByOjEyIH0sXG4weDA4N2U6IHsgbjpcIkF1dG9GaWx0ZXIxMlwiIH0sXG4weDA4N2Y6IHsgbjpcIkNvbnRpbnVlRnJ0MTJcIiB9LFxuMHgwODg0OiB7IG46XCJNRFRJbmZvXCIgfSxcbjB4MDg4NTogeyBuOlwiTURYU3RyXCIgfSxcbjB4MDg4NjogeyBuOlwiTURYVHVwbGVcIiB9LFxuMHgwODg3OiB7IG46XCJNRFhTZXRcIiB9LFxuMHgwODg4OiB7IG46XCJNRFhQcm9wXCIgfSxcbjB4MDg4OTogeyBuOlwiTURYS1BJXCIgfSxcbjB4MDg4YTogeyBuOlwiTURCXCIgfSxcbjB4MDg4YjogeyBuOlwiUExWXCIgfSxcbjB4MDg4YzogeyBuOlwiQ29tcGF0MTJcIiwgZjpwYXJzZWJvb2wsIHI6MTIgfSxcbjB4MDg4ZDogeyBuOlwiRFhGXCIgfSxcbjB4MDg4ZTogeyBuOlwiVGFibGVTdHlsZXNcIiwgcjoxMiB9LFxuMHgwODhmOiB7IG46XCJUYWJsZVN0eWxlXCIgfSxcbjB4MDg5MDogeyBuOlwiVGFibGVTdHlsZUVsZW1lbnRcIiB9LFxuMHgwODkyOiB7IG46XCJTdHlsZUV4dFwiIH0sXG4weDA4OTM6IHsgbjpcIk5hbWVQdWJsaXNoXCIgfSxcbjB4MDg5NDogeyBuOlwiTmFtZUNtdFwiLCBmOnBhcnNlX05hbWVDbXQsIHI6MTIgfSxcbjB4MDg5NTogeyBuOlwiU29ydERhdGFcIiB9LFxuMHgwODk2OiB7IG46XCJUaGVtZVwiLCBmOnBhcnNlX1RoZW1lLCByOjEyIH0sXG4weDA4OTc6IHsgbjpcIkdVSURUeXBlTGliXCIgfSxcbjB4MDg5ODogeyBuOlwiRm5HcnAxMlwiIH0sXG4weDA4OTk6IHsgbjpcIk5hbWVGbkdycDEyXCIgfSxcbjB4MDg5YTogeyBuOlwiTVRSU2V0dGluZ3NcIiwgZjpwYXJzZV9NVFJTZXR0aW5ncywgcjoxMiB9LFxuMHgwODliOiB7IG46XCJDb21wcmVzc1BpY3R1cmVzXCIsIGY6cGFyc2Vub29wMiB9LFxuMHgwODljOiB7IG46XCJIZWFkZXJGb290ZXJcIiB9LFxuMHgwODlkOiB7IG46XCJDcnRMYXlvdXQxMlwiIH0sXG4weDA4OWU6IHsgbjpcIkNydE1sRnJ0XCIgfSxcbjB4MDg5ZjogeyBuOlwiQ3J0TWxGcnRDb250aW51ZVwiIH0sXG4weDA4YTM6IHsgbjpcIkZvcmNlRnVsbENhbGN1bGF0aW9uXCIsIGY6cGFyc2VfRm9yY2VGdWxsQ2FsY3VsYXRpb24gfSxcbjB4MDhhNDogeyBuOlwiU2hhcGVQcm9wc1N0cmVhbVwiIH0sXG4weDA4YTU6IHsgbjpcIlRleHRQcm9wc1N0cmVhbVwiIH0sXG4weDA4YTY6IHsgbjpcIlJpY2hUZXh0U3RyZWFtXCIgfSxcbjB4MDhhNzogeyBuOlwiQ3J0TGF5b3V0MTJBXCIgfSxcbjB4MTAwMTogeyBuOlwiVW5pdHNcIiB9LFxuMHgxMDAyOiB7IG46XCJDaGFydFwiIH0sXG4weDEwMDM6IHsgbjpcIlNlcmllc1wiIH0sXG4weDEwMDY6IHsgbjpcIkRhdGFGb3JtYXRcIiB9LFxuMHgxMDA3OiB7IG46XCJMaW5lRm9ybWF0XCIgfSxcbjB4MTAwOTogeyBuOlwiTWFya2VyRm9ybWF0XCIgfSxcbjB4MTAwYTogeyBuOlwiQXJlYUZvcm1hdFwiIH0sXG4weDEwMGI6IHsgbjpcIlBpZUZvcm1hdFwiIH0sXG4weDEwMGM6IHsgbjpcIkF0dGFjaGVkTGFiZWxcIiB9LFxuMHgxMDBkOiB7IG46XCJTZXJpZXNUZXh0XCIgfSxcbjB4MTAxNDogeyBuOlwiQ2hhcnRGb3JtYXRcIiB9LFxuMHgxMDE1OiB7IG46XCJMZWdlbmRcIiB9LFxuMHgxMDE2OiB7IG46XCJTZXJpZXNMaXN0XCIgfSxcbjB4MTAxNzogeyBuOlwiQmFyXCIgfSxcbjB4MTAxODogeyBuOlwiTGluZVwiIH0sXG4weDEwMTk6IHsgbjpcIlBpZVwiIH0sXG4weDEwMWE6IHsgbjpcIkFyZWFcIiB9LFxuMHgxMDFiOiB7IG46XCJTY2F0dGVyXCIgfSxcbjB4MTAxYzogeyBuOlwiQ3J0TGluZVwiIH0sXG4weDEwMWQ6IHsgbjpcIkF4aXNcIiB9LFxuMHgxMDFlOiB7IG46XCJUaWNrXCIgfSxcbjB4MTAxZjogeyBuOlwiVmFsdWVSYW5nZVwiIH0sXG4weDEwMjA6IHsgbjpcIkNhdFNlclJhbmdlXCIgfSxcbjB4MTAyMTogeyBuOlwiQXhpc0xpbmVcIiB9LFxuMHgxMDIyOiB7IG46XCJDcnRMaW5rXCIgfSxcbjB4MTAyNDogeyBuOlwiRGVmYXVsdFRleHRcIiB9LFxuMHgxMDI1OiB7IG46XCJUZXh0XCIgfSxcbjB4MTAyNjogeyBuOlwiRm9udFhcIiwgZjpwYXJzZXVpbnQxNiB9LFxuMHgxMDI3OiB7IG46XCJPYmplY3RMaW5rXCIgfSxcbjB4MTAzMjogeyBuOlwiRnJhbWVcIiB9LFxuMHgxMDMzOiB7IG46XCJCZWdpblwiIH0sXG4weDEwMzQ6IHsgbjpcIkVuZFwiIH0sXG4weDEwMzU6IHsgbjpcIlBsb3RBcmVhXCIgfSxcbjB4MTAzYTogeyBuOlwiQ2hhcnQzZFwiIH0sXG4weDEwM2M6IHsgbjpcIlBpY0ZcIiB9LFxuMHgxMDNkOiB7IG46XCJEcm9wQmFyXCIgfSxcbjB4MTAzZTogeyBuOlwiUmFkYXJcIiB9LFxuMHgxMDNmOiB7IG46XCJTdXJmXCIgfSxcbjB4MTA0MDogeyBuOlwiUmFkYXJBcmVhXCIgfSxcbjB4MTA0MTogeyBuOlwiQXhpc1BhcmVudFwiIH0sXG4weDEwNDM6IHsgbjpcIkxlZ2VuZEV4Y2VwdGlvblwiIH0sXG4weDEwNDQ6IHsgbjpcIlNodFByb3BzXCIsIGY6cGFyc2VfU2h0UHJvcHMgfSxcbjB4MTA0NTogeyBuOlwiU2VyVG9DcnRcIiB9LFxuMHgxMDQ2OiB7IG46XCJBeGVzVXNlZFwiIH0sXG4weDEwNDg6IHsgbjpcIlNCYXNlUmVmXCIgfSxcbjB4MTA0YTogeyBuOlwiU2VyUGFyZW50XCIgfSxcbjB4MTA0YjogeyBuOlwiU2VyQXV4VHJlbmRcIiB9LFxuMHgxMDRlOiB7IG46XCJJRm10UmVjb3JkXCIgfSxcbjB4MTA0ZjogeyBuOlwiUG9zXCIgfSxcbjB4MTA1MDogeyBuOlwiQWxSdW5zXCIgfSxcbjB4MTA1MTogeyBuOlwiQlJBSVwiIH0sXG4weDEwNWI6IHsgbjpcIlNlckF1eEVyckJhclwiIH0sXG4weDEwNWM6IHsgbjpcIkNscnRDbGllbnRcIiwgZjpwYXJzZV9DbHJ0Q2xpZW50IH0sXG4weDEwNWQ6IHsgbjpcIlNlckZtdFwiIH0sXG4weDEwNWY6IHsgbjpcIkNoYXJ0M0RCYXJTaGFwZVwiIH0sXG4weDEwNjA6IHsgbjpcIkZiaVwiIH0sXG4weDEwNjE6IHsgbjpcIkJvcFBvcFwiIH0sXG4weDEwNjI6IHsgbjpcIkF4Y0V4dFwiIH0sXG4weDEwNjM6IHsgbjpcIkRhdFwiIH0sXG4weDEwNjQ6IHsgbjpcIlBsb3RHcm93dGhcIiB9LFxuMHgxMDY1OiB7IG46XCJTSUluZGV4XCIgfSxcbjB4MTA2NjogeyBuOlwiR2VsRnJhbWVcIiB9LFxuMHgxMDY3OiB7IG46XCJCb3BQb3BDdXN0b21cIiB9LFxuMHgxMDY4OiB7IG46XCJGYmkyXCIgfSxcblxuMHgwMDAwOiB7IG46XCJEaW1lbnNpb25zXCIsIGY6cGFyc2VfRGltZW5zaW9ucyB9LFxuMHgwMDAxOiB7IG46XCJCSUZGMkJMQU5LXCIgfSxcbjB4MDAwMjogeyBuOlwiQklGRjJJTlRcIiwgZjpwYXJzZV9CSUZGMklOVCB9LFxuMHgwMDAzOiB7IG46XCJCSUZGMk5VTVwiLCBmOnBhcnNlX0JJRkYyTlVNIH0sXG4weDAwMDQ6IHsgbjpcIkJJRkYyU1RSXCIsIGY6cGFyc2VfQklGRjJTVFIgfSxcbjB4MDAwNTogeyBuOlwiQm9vbEVyclwiLCBmOnBhcnNlX0Jvb2xFcnIgfSxcbjB4MDAwNzogeyBuOlwiU3RyaW5nXCIsIGY6cGFyc2VfQklGRjJTVFJJTkcgfSxcbjB4MDAwODogeyBuOlwiQklGRjJST1dcIiB9LFxuMHgwMDA5OiB7IG46J0JPRicsIGY6cGFyc2VfQk9GIH0sXG4weDAwMGI6IHsgbjpcIkluZGV4XCIgfSxcbjB4MDAxNjogeyBuOlwiRXh0ZXJuQ291bnRcIiwgZjpwYXJzZXVpbnQxNiB9LFxuMHgwMDFlOiB7IG46XCJCSUZGMkZPUk1BVFwiLCBmOnBhcnNlX0JJRkYyRm9ybWF0IH0sXG4weDAwMWY6IHsgbjpcIkJJRkYyRk1UQ05UXCIgfSwgLyogMTYtYml0IGNudCBvZiBCSUZGMkZPUk1BVCByZWNvcmRzICovXG4weDAwMjA6IHsgbjpcIkJJRkYyQ09MSU5GT1wiIH0sXG4weDAwMjE6IHsgbjpcIkFycmF5XCIsIGY6cGFyc2VfQXJyYXkgfSxcbjB4MDAyNDogeyBuOlwiQ09MV0lEVEhcIiB9LFxuMHgwMDI1OiB7IG46XCJEZWZhdWx0Um93SGVpZ2h0XCIsIGY6cGFyc2VfRGVmYXVsdFJvd0hlaWdodCB9LFxuXHQvLyAweDJjID8/XG5cdC8vIDB4MmQgPz9cblx0Ly8gMHgyZSA/P1xuXHQvLyAweDMwIEZPTlRDT1VOVDogbnVtYmVyIG9mIGZvbnRzXG4weDAwMzI6IHsgbjpcIkJJRkYyRk9OVFhUUkFcIiwgZjpwYXJzZV9CSUZGMkZPTlRYVFJBIH0sXG5cdC8vIDB4MzU6IElORk9PUFRTXG5cdC8vIDB4MzY6IFRBQkxFIChCSUZGMiBvbmx5KVxuXHQvLyAweDM3OiBUQUJMRTIgKEJJRkYyIG9ubHkpXG5cdC8vIDB4Mzg6IFdOREVTS1xuXHQvLyAweDM5ID8/XG5cdC8vIDB4M2E6IEJFR0lOUFJFRlxuXHQvLyAweDNiOiBFTkRQUkVGXG4weDAwM2U6IHsgbjpcIkJJRkYyV0lORE9XMlwiIH0sXG5cdC8vIDB4M2YgPz9cblx0Ly8gMHg0NjogU0hPV1NDUk9MTFxuXHQvLyAweDQ3OiBTSE9XRk9STVVMQVxuXHQvLyAweDQ4OiBTVEFUVVNCQVJcblx0Ly8gMHg0OTogU0hPUlRNRU5VU1xuXHQvLyAweDRBOlxuXHQvLyAweDRCOlxuXHQvLyAweDRDOlxuXHQvLyAweDRFOlxuXHQvLyAweDRGOlxuXHQvLyAweDU4OiBUT09MQkFSIChCSUZGMylcblxuXHQvKiAtIC0gLSAqL1xuMHgwMDM0OiB7IG46XCJEREVPYmpOYW1lXCIgfSxcbjB4MDA0MzogeyBuOlwiQklGRjJYRlwiIH0sXG4weDAwNDQ6IHsgbjpcIkJJRkYyWEZJTkRFWFwiLCBmOnBhcnNldWludDE2IH0sXG4weDAwNDU6IHsgbjpcIkJJRkYyRk9OVENMUlwiIH0sXG4weDAwNTY6IHsgbjpcIkJJRkY0Rk1UQ05UXCIgfSwgLyogMTYtYml0IGNudCwgc2ltaWxhciB0byBCSUZGMiAqL1xuMHgwMDdlOiB7IG46XCJSS1wiIH0sIC8qIE5vdCBuZWNlc3NhcmlseSBzYW1lIGFzIDB4MDI3ZSAqL1xuMHgwMDdmOiB7IG46XCJJbURhdGFcIiwgZjpwYXJzZV9JbURhdGEgfSxcbjB4MDA4NzogeyBuOlwiQWRkaW5cIiB9LFxuMHgwMDg4OiB7IG46XCJFZGdcIiB9LFxuMHgwMDg5OiB7IG46XCJQdWJcIiB9LFxuXHQvLyAweDhBXG5cdC8vIDB4OEIgTEg6IGFsdGVybmF0ZSBtZW51IGtleSBmbGFnIChCSUZGMy80KVxuXHQvLyAweDhFXG5cdC8vIDB4OEZcbjB4MDA5MTogeyBuOlwiU3ViXCIgfSxcblx0Ly8gMHg5MyBTVFlMRVxuMHgwMDk0OiB7IG46XCJMSFJlY29yZFwiIH0sXG4weDAwOTU6IHsgbjpcIkxITkdyYXBoXCIgfSxcbjB4MDA5NjogeyBuOlwiU291bmRcIiB9LFxuXHQvLyAweEEyIEZOUFJPVE86IGZ1bmN0aW9uIHByb3RvdHlwZXMgKEJJRkY0KVxuXHQvLyAweEEzXG5cdC8vIDB4QThcbjB4MDBhOTogeyBuOlwiQ29vcmRMaXN0XCIgfSxcbjB4MDBhYjogeyBuOlwiR0NXXCIgfSxcbjB4MDBiYzogeyBuOlwiU2hyRm1sYVwiIH0sIC8qIE5vdCBuZWNlc3NhcmlseSBzYW1lIGFzIDB4MDRiYyAqL1xuMHgwMGJmOiB7IG46XCJUb29sYmFySGRyXCIgfSxcbjB4MDBjMDogeyBuOlwiVG9vbGJhckVuZFwiIH0sXG4weDAwYzI6IHsgbjpcIkFkZE1lbnVcIiB9LFxuMHgwMGMzOiB7IG46XCJEZWxNZW51XCIgfSxcbjB4MDBkNjogeyBuOlwiUlN0cmluZ1wiLCBmOnBhcnNlX1JTdHJpbmcgfSxcbjB4MDBkZjogeyBuOlwiVUREZXNjXCIgfSxcbjB4MDBlYTogeyBuOlwiVGFiSWRDb25mXCIgfSxcbjB4MDE2MjogeyBuOlwiWEw1TW9kaWZ5XCIgfSxcbjB4MDFhNTogeyBuOlwiRmlsZVNoYXJpbmcyXCIgfSxcbjB4MDIwNjogeyBuOlwiRm9ybXVsYVwiLCBmOnBhcnNlX0Zvcm11bGEgfSxcbjB4MDIwOTogeyBuOidCT0YnLCBmOnBhcnNlX0JPRiB9LFxuMHgwMjE4OiB7IG46XCJMYmxcIiwgZjpwYXJzZV9MYmwgfSxcbjB4MDIyMzogeyBuOlwiRXh0ZXJuTmFtZVwiLCBmOnBhcnNlX0V4dGVybk5hbWUgfSxcbjB4MDIzMTogeyBuOlwiRm9udFwiIH0sXG4weDAyNDM6IHsgbjpcIkJJRkYzWEZcIiB9LFxuMHgwNDA2OiB7IG46XCJGb3JtdWxhXCIsIGY6cGFyc2VfRm9ybXVsYSB9LFxuMHgwNDA5OiB7IG46J0JPRicsIGY6cGFyc2VfQk9GIH0sXG4weDA0NDM6IHsgbjpcIkJJRkY0WEZcIiB9LFxuMHgwODZkOiB7IG46XCJGZWF0SW5mb1wiIH0sXG4weDA4NzM6IHsgbjpcIkZlYXRJbmZvMTFcIiB9LFxuMHgwODgxOiB7IG46XCJTWEFkZGwxMlwiIH0sXG4weDA4YzA6IHsgbjpcIkF1dG9XZWJQdWJcIiB9LFxuMHgwOGMxOiB7IG46XCJMaXN0T2JqXCIgfSxcbjB4MDhjMjogeyBuOlwiTGlzdEZpZWxkXCIgfSxcbjB4MDhjMzogeyBuOlwiTGlzdERWXCIgfSxcbjB4MDhjNDogeyBuOlwiTGlzdENvbmRGbXRcIiB9LFxuMHgwOGM1OiB7IG46XCJMaXN0Q0ZcIiB9LFxuMHgwOGM2OiB7IG46XCJGTVFyeVwiIH0sXG4weDA4Yzc6IHsgbjpcIkZNU1FyeVwiIH0sXG4weDA4Yzg6IHsgbjpcIlBMVlwiIH0sXG4weDA4Yzk6IHsgbjpcIkxuRXh0XCIgfSxcbjB4MDhjYTogeyBuOlwiTWtyRXh0XCIgfSxcbjB4MDhjYjogeyBuOlwiQ3J0Q29vcHRcIiB9LFxuMHgwOGQ2OiB7IG46XCJGUlRBcmNoSWQkXCIsIHI6MTIgfSxcblxuMHg3MjYyOiB7fVxufTtcblxudmFyIFhMU1JFID0gZXZlcnRfa2V5KFhMU1JlY29yZEVudW0sICduJyk7XG5mdW5jdGlvbiB3cml0ZV9iaWZmX3JlYyhiYSwgdHlwZSwgcGF5bG9hZCwgbGVuZ3RoKSB7XG5cdHZhciB0ID0gdHlwZW9mIHR5cGUgPT0gXCJudW1iZXJcIiA/IHR5cGUgOiAoK3R5cGUgfHwgK1hMU1JFW3R5cGVdKTtcblx0aWYoaXNOYU4odCkpIHJldHVybjtcblx0dmFyIGxlbiA9IGxlbmd0aCB8fCAocGF5bG9hZHx8W10pLmxlbmd0aCB8fCAwO1xuXHR2YXIgbyA9IGJhLm5leHQoNCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgdCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgbGVuKTtcblx0aWYobGVuID4gMCAmJiBpc19idWYocGF5bG9hZCkpIGJhLnB1c2gocGF5bG9hZCk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX2JpZmZfY29udGludWUoYmEsIHR5cGUsIHBheWxvYWQsIGxlbmd0aCkge1xuXHR2YXIgbGVuID0gbGVuZ3RoIHx8IChwYXlsb2FkfHxbXSkubGVuZ3RoIHx8IDA7XG5cdGlmKGxlbiA8PSA4MjI0KSByZXR1cm4gd3JpdGVfYmlmZl9yZWMoYmEsIHR5cGUsIHBheWxvYWQsIGxlbik7XG5cdHZhciB0ID0gK3R5cGUgfHwgK1hMU1JFW3R5cGVdO1xuXHRpZihpc05hTih0KSkgcmV0dXJuO1xuXHR2YXIgcGFydHMgPSBwYXlsb2FkLnBhcnRzIHx8IFtdLCBzaWR4ID0gMDtcblx0dmFyIGkgPSAwLCB3ID0gMDtcblx0d2hpbGUodyArIChwYXJ0c1tzaWR4XSB8fCA4MjI0KSA8PSA4MjI0KSB7IHcrPSAocGFydHNbc2lkeF0gfHwgODIyNCk7IHNpZHgrKzsgfVxuXHR2YXIgbyA9IGJhLm5leHQoNCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgdCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgdyk7XG5cdGJhLnB1c2gocGF5bG9hZC5zbGljZShpLCBpICsgdykpO1xuXHRpICs9IHc7XG5cdHdoaWxlKGkgPCBsZW4pIHtcblx0XHRvID0gYmEubmV4dCg0KTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIDB4M2MpOyAvLyBUT0RPOiBmaWd1cmUgb3V0IGNvcnJlY3QgY29udGludWUgdHlwZVxuXHRcdHcgPSAwO1xuXHRcdHdoaWxlKHcgKyAocGFydHNbc2lkeF0gfHwgODIyNCkgPD0gODIyNCkgeyB3Kz0gKHBhcnRzW3NpZHhdIHx8IDgyMjQpOyBzaWR4Kys7IH1cblx0XHRvLndyaXRlX3NoaWZ0KDIsIHcpO1xuXHRcdGJhLnB1c2gocGF5bG9hZC5zbGljZShpLCBpK3cpKTsgaSs9IHc7XG5cdH1cbn1cblxuZnVuY3Rpb24gd3JpdGVfQklGRjJDZWxsKG91dCwgciwgYykge1xuXHRpZighb3V0KSBvdXQgPSBuZXdfYnVmKDcpO1xuXHRvdXQud3JpdGVfc2hpZnQoMiwgcik7XG5cdG91dC53cml0ZV9zaGlmdCgyLCBjKTtcblx0b3V0LndyaXRlX3NoaWZ0KDIsIDApO1xuXHRvdXQud3JpdGVfc2hpZnQoMSwgMCk7XG5cdHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX0JJRkYyQkVSUihyLCBjLCB2YWwsIHQpIHtcblx0dmFyIG91dCA9IG5ld19idWYoOSk7XG5cdHdyaXRlX0JJRkYyQ2VsbChvdXQsIHIsIGMpO1xuXHR3cml0ZV9CZXModmFsLCB0IHx8ICdiJywgb3V0KTtcblx0cmV0dXJuIG91dDtcbn1cblxuLyogVE9ETzogY29kZXBhZ2UsIGxhcmdlIHN0cmluZ3MgKi9cbmZ1bmN0aW9uIHdyaXRlX0JJRkYyTEFCRUwociwgYywgdmFsKSB7XG5cdHZhciBvdXQgPSBuZXdfYnVmKDggKyAyKnZhbC5sZW5ndGgpO1xuXHR3cml0ZV9CSUZGMkNlbGwob3V0LCByLCBjKTtcblx0b3V0LndyaXRlX3NoaWZ0KDEsIHZhbC5sZW5ndGgpO1xuXHRvdXQud3JpdGVfc2hpZnQodmFsLmxlbmd0aCwgdmFsLCAnc2JjcycpO1xuXHRyZXR1cm4gb3V0LmwgPCBvdXQubGVuZ3RoID8gb3V0LnNsaWNlKDAsIG91dC5sKSA6IG91dDtcbn1cblxuZnVuY3Rpb24gd3JpdGVfd3NfYmlmZjJfY2VsbChiYSwgY2VsbCwgUiwgQykge1xuXHRpZihjZWxsLnYgIT0gbnVsbCkgc3dpdGNoKGNlbGwudCkge1xuXHRcdGNhc2UgJ2QnOiBjYXNlICduJzpcblx0XHRcdHZhciB2ID0gY2VsbC50ID09ICdkJyA/IGRhdGVudW0ocGFyc2VEYXRlKGNlbGwudikpIDogY2VsbC52O1xuXHRcdFx0aWYoKHYgPT0gKHZ8MCkpICYmICh2ID49IDApICYmICh2IDwgNjU1MzYpKVxuXHRcdFx0XHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgwMDAyLCB3cml0ZV9CSUZGMklOVChSLCBDLCB2KSk7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHdyaXRlX2JpZmZfcmVjKGJhLCAweDAwMDMsIHdyaXRlX0JJRkYyTlVNKFIsQywgdikpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdGNhc2UgJ2InOiBjYXNlICdlJzogd3JpdGVfYmlmZl9yZWMoYmEsIDB4MDAwNSwgd3JpdGVfQklGRjJCRVJSKFIsIEMsIGNlbGwudiwgY2VsbC50KSk7IHJldHVybjtcblx0XHQvKiBUT0RPOiBjb2RlcGFnZSwgc3N0ICovXG5cdFx0Y2FzZSAncyc6IGNhc2UgJ3N0cic6XG5cdFx0XHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgwMDA0LCB3cml0ZV9CSUZGMkxBQkVMKFIsIEMsIChjZWxsLnZ8fFwiXCIpLnNsaWNlKDAsMjU1KSkpO1xuXHRcdFx0cmV0dXJuO1xuXHR9XG5cdHdyaXRlX2JpZmZfcmVjKGJhLCAweDAwMDEsIHdyaXRlX0JJRkYyQ2VsbChudWxsLCBSLCBDKSk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX3dzX2JpZmYyKGJhLCB3cywgaWR4LCBvcHRzKSB7XG5cdHZhciBkZW5zZSA9IEFycmF5LmlzQXJyYXkod3MpO1xuXHR2YXIgcmFuZ2UgPSBzYWZlX2RlY29kZV9yYW5nZSh3c1snIXJlZiddIHx8IFwiQTFcIiksIHJlZiwgcnIgPSBcIlwiLCBjb2xzID0gW107XG5cdGlmKHJhbmdlLmUuYyA+IDB4RkYgfHwgcmFuZ2UuZS5yID4gMHgzRkZGKSB7XG5cdFx0aWYob3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihcIlJhbmdlIFwiICsgKHdzWychcmVmJ10gfHwgXCJBMVwiKSArIFwiIGV4Y2VlZHMgZm9ybWF0IGxpbWl0IEExOklWMTYzODRcIik7XG5cdFx0cmFuZ2UuZS5jID0gTWF0aC5taW4ocmFuZ2UuZS5jLCAweEZGKTtcblx0XHRyYW5nZS5lLnIgPSBNYXRoLm1pbihyYW5nZS5lLmMsIDB4M0ZGRik7XG5cdFx0cmVmID0gZW5jb2RlX3JhbmdlKHJhbmdlKTtcblx0fVxuXHRmb3IodmFyIFIgPSByYW5nZS5zLnI7IFIgPD0gcmFuZ2UuZS5yOyArK1IpIHtcblx0XHRyciA9IGVuY29kZV9yb3coUik7XG5cdFx0Zm9yKHZhciBDID0gcmFuZ2Uucy5jOyBDIDw9IHJhbmdlLmUuYzsgKytDKSB7XG5cdFx0XHRpZihSID09PSByYW5nZS5zLnIpIGNvbHNbQ10gPSBlbmNvZGVfY29sKEMpO1xuXHRcdFx0cmVmID0gY29sc1tDXSArIHJyO1xuXHRcdFx0dmFyIGNlbGwgPSBkZW5zZSA/ICh3c1tSXXx8W10pW0NdIDogd3NbcmVmXTtcblx0XHRcdGlmKCFjZWxsKSBjb250aW51ZTtcblx0XHRcdC8qIHdyaXRlIGNlbGwgKi9cblx0XHRcdHdyaXRlX3dzX2JpZmYyX2NlbGwoYmEsIGNlbGwsIFIsIEMsIG9wdHMpO1xuXHRcdH1cblx0fVxufVxuXG4vKiBCYXNlZCBvbiB0ZXN0IGZpbGVzICovXG5mdW5jdGlvbiB3cml0ZV9iaWZmMl9idWYod2IsIG9wdHMpIHtcblx0dmFyIG8gPSBvcHRzIHx8IHt9O1xuXHRpZihERU5TRSAhPSBudWxsICYmIG8uZGVuc2UgPT0gbnVsbCkgby5kZW5zZSA9IERFTlNFO1xuXHR2YXIgYmEgPSBidWZfYXJyYXkoKTtcblx0dmFyIGlkeCA9IDA7XG5cdGZvcih2YXIgaT0wO2k8d2IuU2hlZXROYW1lcy5sZW5ndGg7KytpKSBpZih3Yi5TaGVldE5hbWVzW2ldID09IG8uc2hlZXQpIGlkeD1pO1xuXHRpZihpZHggPT0gMCAmJiAhIW8uc2hlZXQgJiYgd2IuU2hlZXROYW1lc1swXSAhPSBvLnNoZWV0KSB0aHJvdyBuZXcgRXJyb3IoXCJTaGVldCBub3QgZm91bmQ6IFwiICsgby5zaGVldCk7XG5cdHdyaXRlX2JpZmZfcmVjKGJhLCAoby5iaWZmID09IDQgPyAweDA0MDkgOiAoby5iaWZmID09IDMgPyAweDAyMDkgOiAweDAwMDkpKSwgd3JpdGVfQk9GKHdiLCAweDEwLCBvKSk7XG5cdC8qIC4uLiAqL1xuXHR3cml0ZV93c19iaWZmMihiYSwgd2IuU2hlZXRzW3diLlNoZWV0TmFtZXNbaWR4XV0sIGlkeCwgbywgd2IpO1xuXHQvKiAuLi4gKi9cblx0d3JpdGVfYmlmZl9yZWMoYmEsIDB4MDAwQSk7XG5cdHJldHVybiBiYS5lbmQoKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfRk9OVFNfYmlmZjgoYmEsIGRhdGEsIG9wdHMpIHtcblx0d3JpdGVfYmlmZl9yZWMoYmEsIFwiRm9udFwiLCB3cml0ZV9Gb250KHtcblx0XHRzejoxMixcblx0XHRjb2xvcjoge3RoZW1lOjF9LFxuXHRcdG5hbWU6IFwiQXJpYWxcIixcblx0XHRmYW1pbHk6IDIsXG5cdFx0c2NoZW1lOiBcIm1pbm9yXCJcblx0fSwgb3B0cykpO1xufVxuXG5cbmZ1bmN0aW9uIHdyaXRlX0ZNVFNfYmlmZjgoYmEsIE5GLCBvcHRzKSB7XG5cdGlmKCFORikgcmV0dXJuO1xuXHRbWzUsOF0sWzIzLDI2XSxbNDEsNDRdLFsvKjYzKi81MCwvKjY2XSxbMTY0LCovMzkyXV0uZm9yRWFjaChmdW5jdGlvbihyKSB7XG5mb3IodmFyIGkgPSByWzBdOyBpIDw9IHJbMV07ICsraSkgaWYoTkZbaV0gIT0gbnVsbCkgd3JpdGVfYmlmZl9yZWMoYmEsIFwiRm9ybWF0XCIsIHdyaXRlX0Zvcm1hdChpLCBORltpXSwgb3B0cykpO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfRkVBVChiYSwgd3MpIHtcblx0LyogW01TLVhMU10gMi40LjExMiAqL1xuXHR2YXIgbyA9IG5ld19idWYoMTkpO1xuXHRvLndyaXRlX3NoaWZ0KDQsIDB4ODY3KTsgby53cml0ZV9zaGlmdCg0LCAwKTsgby53cml0ZV9zaGlmdCg0LCAwKTtcblx0by53cml0ZV9zaGlmdCgyLCAzKTsgby53cml0ZV9zaGlmdCgxLCAxKTsgby53cml0ZV9zaGlmdCg0LCAwKTtcblx0d3JpdGVfYmlmZl9yZWMoYmEsIFwiRmVhdEhkclwiLCBvKTtcblx0LyogW01TLVhMU10gMi40LjExMSAqL1xuXHRvID0gbmV3X2J1ZigzOSk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgMHg4NjgpOyBvLndyaXRlX3NoaWZ0KDQsIDApOyBvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDMpOyBvLndyaXRlX3NoaWZ0KDEsIDApOyBvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDEpOyBvLndyaXRlX3NoaWZ0KDQsIDQpOyBvLndyaXRlX3NoaWZ0KDIsIDApO1xuXHR3cml0ZV9SZWY4VShzYWZlX2RlY29kZV9yYW5nZSh3c1snIXJlZiddfHxcIkExXCIpLCBvKTtcblx0by53cml0ZV9zaGlmdCg0LCA0KTtcblx0d3JpdGVfYmlmZl9yZWMoYmEsIFwiRmVhdFwiLCBvKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfQ0VMTFhGU19iaWZmOChiYSwgb3B0cykge1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgd3JpdGVfYmlmZl9yZWMoYmEsIFwiWEZcIiwgd3JpdGVfWEYoe251bUZtdElkOjAsIHN0eWxlOnRydWV9LCAwLCBvcHRzKSk7XG5cdG9wdHMuY2VsbFhmcy5mb3JFYWNoKGZ1bmN0aW9uKGMpIHtcblx0XHR3cml0ZV9iaWZmX3JlYyhiYSwgXCJYRlwiLCB3cml0ZV9YRihjLCAwLCBvcHRzKSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiB3cml0ZV93c19iaWZmOF9obGlua3MoYmEsIHdzKSB7XG5cdGZvcih2YXIgUj0wOyBSPHdzWychbGlua3MnXS5sZW5ndGg7ICsrUikge1xuXHRcdHZhciBITCA9IHdzWychbGlua3MnXVtSXTtcblx0XHR3cml0ZV9iaWZmX3JlYyhiYSwgXCJITGlua1wiLCB3cml0ZV9ITGluayhITCkpO1xuXHRcdGlmKEhMWzFdLlRvb2x0aXApIHdyaXRlX2JpZmZfcmVjKGJhLCBcIkhMaW5rVG9vbHRpcFwiLCB3cml0ZV9ITGlua1Rvb2x0aXAoSEwpKTtcblx0fVxuXHRkZWxldGUgd3NbJyFsaW5rcyddO1xufVxuXG5mdW5jdGlvbiB3cml0ZV93c19jb2xzX2JpZmY4KGJhLCBjb2xzLCB3cykge1xuXHRpZighY29scykgcmV0dXJuO1xuXHR2YXIgY250ID0gMDtcblx0Y29scy5mb3JFYWNoKGZ1bmN0aW9uKGNvbCwgaWR4KSB7XG5cdFx0aWYoKytjbnQgPD0gMjU2ICYmIGNvbCkge1xuXHRcdFx0d3JpdGVfYmlmZl9yZWMoYmEsIFwiQ29sSW5mb1wiLCB3cml0ZV9Db2xJbmZvKGNvbF9vYmpfdyhpZHgsIGNvbCksIGlkeCkpO1xuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX3dzX2JpZmY4X2NlbGwoYmEsIGNlbGwsIFIsIEMsIG9wdHMpIHtcblx0dmFyIG9zID0gMTYgKyBnZXRfY2VsbF9zdHlsZShvcHRzLmNlbGxYZnMsIGNlbGwsIG9wdHMpO1xuXHRpZihjZWxsLnYgPT0gbnVsbCAmJiAhY2VsbC5iZikge1xuXHRcdHdyaXRlX2JpZmZfcmVjKGJhLCBcIkJsYW5rXCIsIHdyaXRlX1hMU0NlbGwoUiwgQywgb3MpKTtcblx0XHRyZXR1cm47XG5cdH1cblx0aWYoY2VsbC5iZikgd3JpdGVfYmlmZl9yZWMoYmEsIFwiRm9ybXVsYVwiLCB3cml0ZV9Gb3JtdWxhKGNlbGwsIFIsIEMsIG9wdHMsIG9zKSk7XG5cdGVsc2Ugc3dpdGNoKGNlbGwudCkge1xuXHRcdGNhc2UgJ2QnOiBjYXNlICduJzpcblx0XHRcdHZhciB2ID0gY2VsbC50ID09ICdkJyA/IGRhdGVudW0ocGFyc2VEYXRlKGNlbGwudikpIDogY2VsbC52O1xuXHRcdFx0LyogVE9ETzogZW1pdCBSSyBhcyBhcHByb3ByaWF0ZSAqL1xuXHRcdFx0d3JpdGVfYmlmZl9yZWMoYmEsIFwiTnVtYmVyXCIsIHdyaXRlX051bWJlcihSLCBDLCB2LCBvcywgb3B0cykpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnYic6IGNhc2UgJ2UnOlxuXHRcdFx0d3JpdGVfYmlmZl9yZWMoYmEsIDB4MDIwNSwgd3JpdGVfQm9vbEVycihSLCBDLCBjZWxsLnYsIG9zLCBvcHRzLCBjZWxsLnQpKTtcblx0XHRcdGJyZWFrO1xuXHRcdC8qIFRPRE86IGNvZGVwYWdlLCBzc3QgKi9cblx0XHRjYXNlICdzJzogY2FzZSAnc3RyJzpcblx0XHRcdGlmKG9wdHMuYm9va1NTVCkge1xuXHRcdFx0XHR2YXIgaXNzdCA9IGdldF9zc3RfaWQob3B0cy5TdHJpbmdzLCBjZWxsLnYsIG9wdHMucmV2U3RyaW5ncyk7XG5cdFx0XHRcdHdyaXRlX2JpZmZfcmVjKGJhLCBcIkxhYmVsU3N0XCIsIHdyaXRlX0xhYmVsU3N0KFIsIEMsIGlzc3QsIG9zLCBvcHRzKSk7XG5cdFx0XHR9IGVsc2Ugd3JpdGVfYmlmZl9yZWMoYmEsIFwiTGFiZWxcIiwgd3JpdGVfTGFiZWwoUiwgQywgKGNlbGwudnx8XCJcIikuc2xpY2UoMCwyNTUpLCBvcywgb3B0cykpO1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHdyaXRlX2JpZmZfcmVjKGJhLCBcIkJsYW5rXCIsIHdyaXRlX1hMU0NlbGwoUiwgQywgb3MpKTtcblx0fVxufVxuXG4vKiBbTVMtWExTXSAyLjEuNy4yMC41ICovXG5mdW5jdGlvbiB3cml0ZV93c19iaWZmOChpZHgsIG9wdHMsIHdiKSB7XG5cdHZhciBiYSA9IGJ1Zl9hcnJheSgpO1xuXHR2YXIgcyA9IHdiLlNoZWV0TmFtZXNbaWR4XSwgd3MgPSB3Yi5TaGVldHNbc10gfHwge307XG5cdHZhciBfV0IgPSAoKHdifHx7fSkuV29ya2Jvb2t8fHt9KTtcblx0dmFyIF9zaGVldCA9ICgoX1dCLlNoZWV0c3x8W10pW2lkeF18fHt9KTtcblx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheSh3cyk7XG5cdHZhciBiOCA9IG9wdHMuYmlmZiA9PSA4O1xuXHR2YXIgcmVmLCByciA9IFwiXCIsIGNvbHMgPSBbXTtcblx0dmFyIHJhbmdlID0gc2FmZV9kZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSB8fCBcIkExXCIpO1xuXHR2YXIgTUFYX1JPV1MgPSBiOCA/IDY1NTM2IDogMTYzODQ7XG5cdGlmKHJhbmdlLmUuYyA+IDB4RkYgfHwgcmFuZ2UuZS5yID49IE1BWF9ST1dTKSB7XG5cdFx0aWYob3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihcIlJhbmdlIFwiICsgKHdzWychcmVmJ10gfHwgXCJBMVwiKSArIFwiIGV4Y2VlZHMgZm9ybWF0IGxpbWl0IEExOklWMTYzODRcIik7XG5cdFx0cmFuZ2UuZS5jID0gTWF0aC5taW4ocmFuZ2UuZS5jLCAweEZGKTtcblx0XHRyYW5nZS5lLnIgPSBNYXRoLm1pbihyYW5nZS5lLmMsIE1BWF9ST1dTLTEpO1xuXHR9XG5cblx0d3JpdGVfYmlmZl9yZWMoYmEsIDB4MDgwOSwgd3JpdGVfQk9GKHdiLCAweDEwLCBvcHRzKSk7XG5cdC8qIFtVbmNhbGNlZF0gSW5kZXggKi9cblx0d3JpdGVfYmlmZl9yZWMoYmEsIFwiQ2FsY01vZGVcIiwgd3JpdGV1aW50MTYoMSkpO1xuXHR3cml0ZV9iaWZmX3JlYyhiYSwgXCJDYWxjQ291bnRcIiwgd3JpdGV1aW50MTYoMTAwKSk7XG5cdHdyaXRlX2JpZmZfcmVjKGJhLCBcIkNhbGNSZWZNb2RlXCIsIHdyaXRlYm9vbCh0cnVlKSk7XG5cdHdyaXRlX2JpZmZfcmVjKGJhLCBcIkNhbGNJdGVyXCIsIHdyaXRlYm9vbChmYWxzZSkpO1xuXHR3cml0ZV9iaWZmX3JlYyhiYSwgXCJDYWxjRGVsdGFcIiwgd3JpdGVfWG51bSgwLjAwMSkpO1xuXHR3cml0ZV9iaWZmX3JlYyhiYSwgXCJDYWxjU2F2ZVJlY2FsY1wiLCB3cml0ZWJvb2wodHJ1ZSkpO1xuXHR3cml0ZV9iaWZmX3JlYyhiYSwgXCJQcmludFJvd0NvbFwiLCB3cml0ZWJvb2woZmFsc2UpKTtcblx0d3JpdGVfYmlmZl9yZWMoYmEsIFwiUHJpbnRHcmlkXCIsIHdyaXRlYm9vbChmYWxzZSkpO1xuXHR3cml0ZV9iaWZmX3JlYyhiYSwgXCJHcmlkU2V0XCIsIHdyaXRldWludDE2KDEpKTtcblx0d3JpdGVfYmlmZl9yZWMoYmEsIFwiR3V0c1wiLCB3cml0ZV9HdXRzKFswLDBdKSk7XG5cdC8qIERlZmF1bHRSb3dIZWlnaHQgV3NCb29sIFtTeW5jXSBbTFByXSBbSG9yaXpvbnRhbFBhZ2VCcmVha3NdIFtWZXJ0aWNhbFBhZ2VCcmVha3NdICovXG5cdC8qIEhlYWRlciAoc3RyaW5nKSAqL1xuXHQvKiBGb290ZXIgKHN0cmluZykgKi9cblx0d3JpdGVfYmlmZl9yZWMoYmEsIFwiSENlbnRlclwiLCB3cml0ZWJvb2woZmFsc2UpKTtcblx0d3JpdGVfYmlmZl9yZWMoYmEsIFwiVkNlbnRlclwiLCB3cml0ZWJvb2woZmFsc2UpKTtcblx0LyogLi4uICovXG5cdGlmKGI4KSB3cml0ZV93c19jb2xzX2JpZmY4KGJhLCB3c1tcIiFjb2xzXCJdLCB3cyk7XG5cdC8qIC4uLiAqL1xuXHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgyMDAsIHdyaXRlX0RpbWVuc2lvbnMocmFuZ2UsIG9wdHMpKTtcblx0LyogLi4uICovXG5cblx0aWYoYjgpIHdzWychbGlua3MnXSA9IFtdO1xuXHRmb3IodmFyIFIgPSByYW5nZS5zLnI7IFIgPD0gcmFuZ2UuZS5yOyArK1IpIHtcblx0XHRyciA9IGVuY29kZV9yb3coUik7XG5cdFx0Zm9yKHZhciBDID0gcmFuZ2Uucy5jOyBDIDw9IHJhbmdlLmUuYzsgKytDKSB7XG5cdFx0XHRpZihSID09PSByYW5nZS5zLnIpIGNvbHNbQ10gPSBlbmNvZGVfY29sKEMpO1xuXHRcdFx0cmVmID0gY29sc1tDXSArIHJyO1xuXHRcdFx0dmFyIGNlbGwgPSBkZW5zZSA/ICh3c1tSXXx8W10pW0NdIDogd3NbcmVmXTtcblx0XHRcdGlmKCFjZWxsKSBjb250aW51ZTtcblx0XHRcdC8qIHdyaXRlIGNlbGwgKi9cblx0XHRcdHdyaXRlX3dzX2JpZmY4X2NlbGwoYmEsIGNlbGwsIFIsIEMsIG9wdHMpO1xuXHRcdFx0aWYoYjggJiYgY2VsbC5sKSB3c1snIWxpbmtzJ10ucHVzaChbcmVmLCBjZWxsLmxdKTtcblx0XHR9XG5cdH1cblx0dmFyIGNuYW1lID0gX3NoZWV0LkNvZGVOYW1lIHx8IF9zaGVldC5uYW1lIHx8IHM7XG5cdC8qIC4uLiAqL1xuXHRpZihiOCkgd3JpdGVfYmlmZl9yZWMoYmEsIFwiV2luZG93MlwiLCB3cml0ZV9XaW5kb3cyKChfV0IuVmlld3N8fFtdKVswXSkpO1xuXHQvKiAuLi4gKi9cblx0aWYoYjggJiYgKHdzWychbWVyZ2VzJ118fFtdKS5sZW5ndGgpIHdyaXRlX2JpZmZfcmVjKGJhLCBcIk1lcmdlQ2VsbHNcIiwgd3JpdGVfTWVyZ2VDZWxscyh3c1snIW1lcmdlcyddKSk7XG5cdC8qIFtMUm5nXSAqUVVFUllUQUJMRSBbUEhPTkVUSUNJTkZPXSBDT05ERk1UUyAqL1xuXHRpZihiOCkgd3JpdGVfd3NfYmlmZjhfaGxpbmtzKGJhLCB3cyk7XG5cdC8qIFtEVkFMXSAqL1xuXHR3cml0ZV9iaWZmX3JlYyhiYSwgXCJDb2RlTmFtZVwiLCB3cml0ZV9YTFVuaWNvZGVTdHJpbmcoY25hbWUsIG9wdHMpKTtcblx0LyogKldlYlB1YiAqQ2VsbFdhdGNoIFtTaGVldEV4dF0gKi9cblx0aWYoYjgpIHdyaXRlX0ZFQVQoYmEsIHdzKTtcblx0LyogKkZFQVQxMSAqUkVDT1JEMTIgKi9cblx0d3JpdGVfYmlmZl9yZWMoYmEsIFwiRU9GXCIpO1xuXHRyZXR1cm4gYmEuZW5kKCk7XG59XG5cbi8qIFtNUy1YTFNdIDIuMS43LjIwLjMgKi9cbmZ1bmN0aW9uIHdyaXRlX2JpZmY4X2dsb2JhbCh3YiwgYnVmcywgb3B0cykge1xuXHR2YXIgQSA9IGJ1Zl9hcnJheSgpO1xuXHR2YXIgX1dCID0gKCh3Ynx8e30pLldvcmtib29rfHx7fSk7XG5cdHZhciBfc2hlZXRzID0gKF9XQi5TaGVldHN8fFtdKTtcblx0dmFyIF93YiA9IF9XQi5XQlByb3BzfHx7fTtcblx0dmFyIGI4ID0gb3B0cy5iaWZmID09IDgsIGI1ID0gb3B0cy5iaWZmID09IDU7XG5cdHdyaXRlX2JpZmZfcmVjKEEsIDB4MDgwOSwgd3JpdGVfQk9GKHdiLCAweDA1LCBvcHRzKSk7XG5cdGlmKG9wdHMuYm9va1R5cGUgPT0gXCJ4bGFcIikgd3JpdGVfYmlmZl9yZWMoQSwgXCJBZGRpblwiKTtcblx0d3JpdGVfYmlmZl9yZWMoQSwgXCJJbnRlcmZhY2VIZHJcIiwgYjggPyB3cml0ZXVpbnQxNigweDA0YjApIDogbnVsbCk7XG5cdHdyaXRlX2JpZmZfcmVjKEEsIFwiTW1zXCIsIHdyaXRlemVyb2VzKDIpKTtcblx0aWYoYjUpIHdyaXRlX2JpZmZfcmVjKEEsIFwiVG9vbGJhckhkclwiKTtcblx0aWYoYjUpIHdyaXRlX2JpZmZfcmVjKEEsIFwiVG9vbGJhckVuZFwiKTtcblx0d3JpdGVfYmlmZl9yZWMoQSwgXCJJbnRlcmZhY2VFbmRcIik7XG5cdHdyaXRlX2JpZmZfcmVjKEEsIFwiV3JpdGVBY2Nlc3NcIiwgd3JpdGVfV3JpdGVBY2Nlc3MoXCJTaGVldEpTXCIsIG9wdHMpKTtcblx0LyogW0ZpbGVTaGFyaW5nXSAqL1xuXHR3cml0ZV9iaWZmX3JlYyhBLCBcIkNvZGVQYWdlXCIsIHdyaXRldWludDE2KGI4ID8gMHgwNGIwIDogMHgwNEU0KSk7XG5cdC8qICoyMDQ3IExlbCAqL1xuXHRpZihiOCkgd3JpdGVfYmlmZl9yZWMoQSwgXCJEU0ZcIiwgd3JpdGV1aW50MTYoMCkpO1xuXHRpZihiOCkgd3JpdGVfYmlmZl9yZWMoQSwgXCJFeGNlbDlGaWxlXCIpO1xuXHR3cml0ZV9iaWZmX3JlYyhBLCBcIlJSVGFiSWRcIiwgd3JpdGVfUlJUYWJJZCh3Yi5TaGVldE5hbWVzLmxlbmd0aCkpO1xuXHRpZihiOCAmJiB3Yi52YmFyYXcpIHdyaXRlX2JpZmZfcmVjKEEsIFwiT2JQcm9qXCIpO1xuXHQvKiBbT2JOb01hY3Jvc10gKi9cblx0aWYoYjggJiYgd2IudmJhcmF3KSB7XG5cdFx0dmFyIGNuYW1lID0gX3diLkNvZGVOYW1lIHx8IFwiVGhpc1dvcmtib29rXCI7XG5cdFx0d3JpdGVfYmlmZl9yZWMoQSwgXCJDb2RlTmFtZVwiLCB3cml0ZV9YTFVuaWNvZGVTdHJpbmcoY25hbWUsIG9wdHMpKTtcblx0fVxuXHR3cml0ZV9iaWZmX3JlYyhBLCBcIkJ1aWx0SW5Gbkdyb3VwQ291bnRcIiwgd3JpdGV1aW50MTYoMHgxMSkpO1xuXHQvKiAqRm5Hcm91cE5hbWUgKkZuR3JwMTIgKi9cblx0LyogKkxibCAqL1xuXHQvKiBbT2xlT2JqZWN0U2l6ZV0gKi9cblx0d3JpdGVfYmlmZl9yZWMoQSwgXCJXaW5Qcm90ZWN0XCIsIHdyaXRlYm9vbChmYWxzZSkpO1xuXHR3cml0ZV9iaWZmX3JlYyhBLCBcIlByb3RlY3RcIiwgd3JpdGVib29sKGZhbHNlKSk7XG5cdHdyaXRlX2JpZmZfcmVjKEEsIFwiUGFzc3dvcmRcIiwgd3JpdGV1aW50MTYoMCkpO1xuXHRpZihiOCkgd3JpdGVfYmlmZl9yZWMoQSwgXCJQcm90NFJldlwiLCB3cml0ZWJvb2woZmFsc2UpKTtcblx0aWYoYjgpIHdyaXRlX2JpZmZfcmVjKEEsIFwiUHJvdDRSZXZQYXNzXCIsIHdyaXRldWludDE2KDApKTtcblx0d3JpdGVfYmlmZl9yZWMoQSwgXCJXaW5kb3cxXCIsIHdyaXRlX1dpbmRvdzEob3B0cykpO1xuXHR3cml0ZV9iaWZmX3JlYyhBLCBcIkJhY2t1cFwiLCB3cml0ZWJvb2woZmFsc2UpKTtcblx0d3JpdGVfYmlmZl9yZWMoQSwgXCJIaWRlT2JqXCIsIHdyaXRldWludDE2KDApKTtcblx0d3JpdGVfYmlmZl9yZWMoQSwgXCJEYXRlMTkwNFwiLCB3cml0ZWJvb2woc2FmZTE5MDQod2IpPT1cInRydWVcIikpO1xuXHR3cml0ZV9iaWZmX3JlYyhBLCBcIkNhbGNQcmVjaXNpb25cIiwgd3JpdGVib29sKHRydWUpKTtcblx0aWYoYjgpIHdyaXRlX2JpZmZfcmVjKEEsIFwiUmVmcmVzaEFsbFwiLCB3cml0ZWJvb2woZmFsc2UpKTtcblx0d3JpdGVfYmlmZl9yZWMoQSwgXCJCb29rQm9vbFwiLCB3cml0ZXVpbnQxNigwKSk7XG5cdC8qIC4uLiAqL1xuXHR3cml0ZV9GT05UU19iaWZmOChBLCB3Yiwgb3B0cyk7XG5cdHdyaXRlX0ZNVFNfYmlmZjgoQSwgd2IuU1NGLCBvcHRzKTtcblx0d3JpdGVfQ0VMTFhGU19iaWZmOChBLCBvcHRzKTtcblx0LyogLi4uICovXG5cdGlmKGI4KSB3cml0ZV9iaWZmX3JlYyhBLCBcIlVzZXNFTEZzXCIsIHdyaXRlYm9vbChmYWxzZSkpO1xuXHR2YXIgYSA9IEEuZW5kKCk7XG5cblx0dmFyIEMgPSBidWZfYXJyYXkoKTtcblx0LyogTUVUQURBVEEgW01UUlNldHRpbmdzXSBbRm9yY2VGdWxsQ2FsY3VsYXRpb25dICovXG5cdGlmKGI4KSB3cml0ZV9iaWZmX3JlYyhDLCBcIkNvdW50cnlcIiwgd3JpdGVfQ291bnRyeSgpKTtcblx0LyogKlNVUEJPT0sgKkxCTCAqUlREIFtSZWNhbGNJZF0gKkhGUGljdHVyZSAqTVNPRFJBV0lOR0dST1VQICovXG5cblx0LyogQklGRjg6IFtTU1QgKkNvbnRpbnVlXSBFeHRTU1QgKi9cblx0aWYoYjggJiYgb3B0cy5TdHJpbmdzKSB3cml0ZV9iaWZmX2NvbnRpbnVlKEMsIFwiU1NUXCIsIHdyaXRlX1NTVChvcHRzLlN0cmluZ3MsIG9wdHMpKTtcblxuXHQvKiAqV2ViUHViIFtXT3B0XSBbQ3JFcnJdIFtCb29rRXh0XSAqRmVhdEhkciAqRENvbm4gW1RIRU1FXSBbQ29tcHJlc3NQaWN0dXJlc10gW0NvbXBhdDEyXSBbR1VJRFR5cGVMaWJdICovXG5cdHdyaXRlX2JpZmZfcmVjKEMsIFwiRU9GXCIpO1xuXHR2YXIgYyA9IEMuZW5kKCk7XG5cblx0dmFyIEIgPSBidWZfYXJyYXkoKTtcblx0dmFyIGJsZW4gPSAwLCBqID0gMDtcblx0Zm9yKGogPSAwOyBqIDwgd2IuU2hlZXROYW1lcy5sZW5ndGg7ICsraikgYmxlbiArPSAoYjggPyAxMiA6IDExKSArIChiOCA/IDIgOiAxKSAqIHdiLlNoZWV0TmFtZXNbal0ubGVuZ3RoO1xuXHR2YXIgc3RhcnQgPSBhLmxlbmd0aCArIGJsZW4gKyBjLmxlbmd0aDtcblx0Zm9yKGogPSAwOyBqIDwgd2IuU2hlZXROYW1lcy5sZW5ndGg7ICsraikge1xuXHRcdHZhciBfc2hlZXQgPSBfc2hlZXRzW2pdIHx8ICh7fSk7XG5cdFx0d3JpdGVfYmlmZl9yZWMoQiwgXCJCb3VuZFNoZWV0OFwiLCB3cml0ZV9Cb3VuZFNoZWV0OCh7cG9zOnN0YXJ0LCBoczpfc2hlZXQuSGlkZGVufHwwLCBkdDowLCBuYW1lOndiLlNoZWV0TmFtZXNbal19LCBvcHRzKSk7XG5cdFx0c3RhcnQgKz0gYnVmc1tqXS5sZW5ndGg7XG5cdH1cblx0LyogMSpCb3VuZFNoZWV0OCAqL1xuXHR2YXIgYiA9IEIuZW5kKCk7XG5cdGlmKGJsZW4gIT0gYi5sZW5ndGgpIHRocm93IG5ldyBFcnJvcihcIkJTOCBcIiArIGJsZW4gKyBcIiAhPSBcIiArIGIubGVuZ3RoKTtcblxuXHR2YXIgb3V0ID0gW107XG5cdGlmKGEubGVuZ3RoKSBvdXQucHVzaChhKTtcblx0aWYoYi5sZW5ndGgpIG91dC5wdXNoKGIpO1xuXHRpZihjLmxlbmd0aCkgb3V0LnB1c2goYyk7XG5cdHJldHVybiBfX3RvQnVmZmVyKFtvdXRdKTtcbn1cblxuLyogW01TLVhMU10gMi4xLjcuMjAgV29ya2Jvb2sgU3RyZWFtICovXG5mdW5jdGlvbiB3cml0ZV9iaWZmOF9idWYod2IsIG9wdHMpIHtcblx0dmFyIG8gPSBvcHRzIHx8IHt9O1xuXHR2YXIgYnVmcyA9IFtdO1xuXG5cdGlmKHdiICYmICF3Yi5TU0YpIHtcblx0XHR3Yi5TU0YgPSBTU0YuZ2V0X3RhYmxlKCk7XG5cdH1cblx0aWYod2IgJiYgd2IuU1NGKSB7XG5cdFx0bWFrZV9zc2YoU1NGKTsgU1NGLmxvYWRfdGFibGUod2IuU1NGKTtcblx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdG8ucmV2c3NmID0gZXZlcnRfbnVtKHdiLlNTRik7IG8ucmV2c3NmW3diLlNTRls2NTUzNV1dID0gMDtcblx0XHRvLnNzZiA9IHdiLlNTRjtcblx0fVxuXG5cdG8uU3RyaW5ncyA9IFtdOyBvLlN0cmluZ3MuQ291bnQgPSAwOyBvLlN0cmluZ3MuVW5pcXVlID0gMDtcblx0Zml4X3dyaXRlX29wdHMobyk7XG5cblx0by5jZWxsWGZzID0gW107XG5cdGdldF9jZWxsX3N0eWxlKG8uY2VsbFhmcywge30sIHtyZXZzc2Y6e1wiR2VuZXJhbFwiOjB9fSk7XG5cblx0aWYoIXdiLlByb3BzKSB3Yi5Qcm9wcyA9IHt9O1xuXG5cdGZvcih2YXIgaSA9IDA7IGkgPCB3Yi5TaGVldE5hbWVzLmxlbmd0aDsgKytpKSBidWZzW2J1ZnMubGVuZ3RoXSA9IHdyaXRlX3dzX2JpZmY4KGksIG8sIHdiKTtcblx0YnVmcy51bnNoaWZ0KHdyaXRlX2JpZmY4X2dsb2JhbCh3YiwgYnVmcywgbykpO1xuXHRyZXR1cm4gX190b0J1ZmZlcihbYnVmc10pO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9iaWZmX2J1Zih3Yiwgb3B0cykge1xuXHR2YXIgbyA9IG9wdHMgfHwge307XG5cdHN3aXRjaChvLmJpZmYgfHwgMikge1xuXHRcdGNhc2UgODogY2FzZSA1OiByZXR1cm4gd3JpdGVfYmlmZjhfYnVmKHdiLCBvcHRzKTtcblx0XHRjYXNlIDQ6IGNhc2UgMzogY2FzZSAyOiByZXR1cm4gd3JpdGVfYmlmZjJfYnVmKHdiLCBvcHRzKTtcblx0fVxuXHR0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHR5cGUgXCIgKyBvLmJvb2tUeXBlICsgXCIgZm9yIEJJRkZcIik7XG59XG4vKiBub3RlOiBicm93c2VyIERPTSBlbGVtZW50IGNhbm5vdCBzZWUgbXNvLSBzdHlsZSBhdHRycywgbXVzdCBwYXJzZSAqL1xudmFyIEhUTUxfID0gKGZ1bmN0aW9uKCkge1xuXHRmdW5jdGlvbiBodG1sX3RvX3NoZWV0KHN0ciwgX29wdHMpIHtcblx0XHR2YXIgb3B0cyA9IF9vcHRzIHx8IHt9O1xuXHRcdGlmKERFTlNFICE9IG51bGwgJiYgb3B0cy5kZW5zZSA9PSBudWxsKSBvcHRzLmRlbnNlID0gREVOU0U7XG5cdFx0dmFyIHdzID0gb3B0cy5kZW5zZSA/IChbXSkgOiAoe30pO1xuXHRcdHN0ciA9IHN0ci5yZXBsYWNlKC88IS0tLio/LS0+L2csIFwiXCIpO1xuXHRcdHZhciBtdGNoID0gc3RyLm1hdGNoKC88dGFibGUvaSk7XG5cdFx0aWYoIW10Y2gpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgSFRNTDogY291bGQgbm90IGZpbmQgPHRhYmxlPlwiKTtcblx0XHR2YXIgbXRjaDIgPSBzdHIubWF0Y2goLzxcXC90YWJsZS9pKTtcblx0XHR2YXIgaSA9IG10Y2guaW5kZXgsIGogPSBtdGNoMiAmJiBtdGNoMi5pbmRleCB8fCBzdHIubGVuZ3RoO1xuXHRcdHZhciByb3dzID0gc3BsaXRfcmVnZXgoc3RyLnNsaWNlKGksIGopLCAvKDo/PHRyW14+XSo+KS9pLCBcIjx0cj5cIik7XG5cdFx0dmFyIFIgPSAtMSwgQyA9IDAsIFJTID0gMCwgQ1MgPSAwO1xuXHRcdHZhciByYW5nZSA9IHtzOntyOjEwMDAwMDAwLCBjOjEwMDAwMDAwfSxlOntyOjAsYzowfX07XG5cdFx0dmFyIG1lcmdlcyA9IFtdO1xuXHRcdGZvcihpID0gMDsgaSA8IHJvd3MubGVuZ3RoOyArK2kpIHtcblx0XHRcdHZhciByb3cgPSByb3dzW2ldLnRyaW0oKTtcblx0XHRcdHZhciBoZCA9IHJvdy5zbGljZSgwLDMpLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRpZihoZCA9PSBcIjx0clwiKSB7ICsrUjsgaWYob3B0cy5zaGVldFJvd3MgJiYgb3B0cy5zaGVldFJvd3MgPD0gUikgeyAtLVI7IGJyZWFrOyB9IEMgPSAwOyBjb250aW51ZTsgfVxuXHRcdFx0aWYoaGQgIT0gXCI8dGRcIiAmJiBoZCAhPSBcIjx0aFwiKSBjb250aW51ZTtcblx0XHRcdHZhciBjZWxscyA9IHJvdy5zcGxpdCgvPFxcL3RbZGhdPi9pKTtcblx0XHRcdGZvcihqID0gMDsgaiA8IGNlbGxzLmxlbmd0aDsgKytqKSB7XG5cdFx0XHRcdHZhciBjZWxsID0gY2VsbHNbal0udHJpbSgpO1xuXHRcdFx0XHRpZighY2VsbC5tYXRjaCgvPHRbZGhdL2kpKSBjb250aW51ZTtcblx0XHRcdFx0dmFyIG0gPSBjZWxsLCBjYyA9IDA7XG5cdFx0XHRcdC8qIFRPRE86IHBhcnNlIHN0eWxlcyBldGMgKi9cblx0XHRcdFx0d2hpbGUobS5jaGFyQXQoMCkgPT0gXCI8XCIgJiYgKGNjID0gbS5pbmRleE9mKFwiPlwiKSkgPiAtMSkgbSA9IG0uc2xpY2UoY2MrMSk7XG5cdFx0XHRcdGZvcih2YXIgbWlkeCA9IDA7IG1pZHggPCBtZXJnZXMubGVuZ3RoOyArK21pZHgpIHtcblx0XHRcdFx0XHR2YXIgX21lcmdlID0gbWVyZ2VzW21pZHhdO1xuXHRcdFx0XHRcdGlmKF9tZXJnZS5zLmMgPT0gQyAmJiBfbWVyZ2Uucy5yIDwgUiAmJiBSIDw9IF9tZXJnZS5lLnIpIHsgQyA9IF9tZXJnZS5lLmMgKyAxOyBtaWR4ID0gLTE7IH1cblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgdGFnID0gcGFyc2V4bWx0YWcoY2VsbC5zbGljZSgwLCBjZWxsLmluZGV4T2YoXCI+XCIpKSk7XG5cdFx0XHRcdENTID0gdGFnLmNvbHNwYW4gPyArdGFnLmNvbHNwYW4gOiAxO1xuXHRcdFx0XHRpZigoUlMgPSArdGFnLnJvd3NwYW4pPjEgfHwgQ1M+MSkgbWVyZ2VzLnB1c2goe3M6e3I6UixjOkN9LGU6e3I6UiArIChSU3x8MSkgLSAxLCBjOkMgKyBDUyAtIDF9fSk7XG5cdFx0XHRcdHZhciBfdCA9IHRhZy50IHx8IHRhZ1tcImRhdGEtdFwiXSB8fCBcIlwiO1xuXHRcdFx0XHQvKiBUT0RPOiBnZW5lcmF0ZSBzdHViIGNlbGxzICovXG5cdFx0XHRcdGlmKCFtLmxlbmd0aCkgeyBDICs9IENTOyBjb250aW51ZTsgfVxuXHRcdFx0XHRtID0gaHRtbGRlY29kZShtKTtcblx0XHRcdFx0aWYocmFuZ2Uucy5yID4gUikgcmFuZ2Uucy5yID0gUjsgaWYocmFuZ2UuZS5yIDwgUikgcmFuZ2UuZS5yID0gUjtcblx0XHRcdFx0aWYocmFuZ2Uucy5jID4gQykgcmFuZ2Uucy5jID0gQzsgaWYocmFuZ2UuZS5jIDwgQykgcmFuZ2UuZS5jID0gQztcblx0XHRcdFx0aWYoIW0ubGVuZ3RoKSBjb250aW51ZTtcblx0XHRcdFx0dmFyIG8gPSB7dDoncycsIHY6bX07XG5cdFx0XHRcdGlmKG9wdHMucmF3IHx8ICFtLnRyaW0oKS5sZW5ndGggfHwgX3QgPT0gJ3MnKXt9XG5cdFx0XHRcdGVsc2UgaWYobSA9PT0gJ1RSVUUnKSBvID0ge3Q6J2InLCB2OnRydWV9O1xuXHRcdFx0XHRlbHNlIGlmKG0gPT09ICdGQUxTRScpIG8gPSB7dDonYicsIHY6ZmFsc2V9O1xuXHRcdFx0XHRlbHNlIGlmKCFpc05hTihmdXp6eW51bShtKSkpIG8gPSB7dDonbicsIHY6ZnV6enludW0obSl9O1xuXHRcdFx0XHRlbHNlIGlmKCFpc05hTihmdXp6eWRhdGUobSkuZ2V0RGF0ZSgpKSkge1xuXHRcdFx0XHRcdG8gPSAoe3Q6J2QnLCB2OnBhcnNlRGF0ZShtKX0pO1xuXHRcdFx0XHRcdGlmKCFvcHRzLmNlbGxEYXRlcykgbyA9ICh7dDonbicsIHY6ZGF0ZW51bShvLnYpfSk7XG5cdFx0XHRcdFx0by56ID0gb3B0cy5kYXRlTkYgfHwgU1NGLl90YWJsZVsxNF07XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYob3B0cy5kZW5zZSkgeyBpZighd3NbUl0pIHdzW1JdID0gW107IHdzW1JdW0NdID0gbzsgfVxuXHRcdFx0XHRlbHNlIHdzW2VuY29kZV9jZWxsKHtyOlIsIGM6Q30pXSA9IG87XG5cdFx0XHRcdEMgKz0gQ1M7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdzWychcmVmJ10gPSBlbmNvZGVfcmFuZ2UocmFuZ2UpO1xuXHRcdGlmKG1lcmdlcy5sZW5ndGgpIHdzW1wiIW1lcmdlc1wiXSA9IG1lcmdlcztcblx0XHRyZXR1cm4gd3M7XG5cdH1cblx0ZnVuY3Rpb24gaHRtbF90b19ib29rKHN0ciwgb3B0cykge1xuXHRcdHZhciBtdGNoID0gc3RyLm1hdGNoKC88dGFibGUuKj8+W1xcc1xcU10qPzxcXC90YWJsZT4vZ2kpO1xuXHRcdGlmKCFtdGNoIHx8IG10Y2gubGVuZ3RoID09IDApIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgSFRNTDogY291bGQgbm90IGZpbmQgPHRhYmxlPlwiKTtcblx0XHRpZihtdGNoLmxlbmd0aCA9PSAxKSByZXR1cm4gc2hlZXRfdG9fd29ya2Jvb2soaHRtbF90b19zaGVldChtdGNoWzBdLCBvcHRzKSwgb3B0cyk7XG5cdFx0dmFyIHdiID0gdXRpbHMuYm9va19uZXcoKTtcblx0XHRtdGNoLmZvckVhY2goZnVuY3Rpb24ocywgaWR4KSB7IHV0aWxzLmJvb2tfYXBwZW5kX3NoZWV0KHdiLCBodG1sX3RvX3NoZWV0KHMsIG9wdHMpLCBcIlNoZWV0XCIgKyAoaWR4KzEpKTsgfSk7XG5cdFx0cmV0dXJuIHdiO1xuXHR9XG5cdGZ1bmN0aW9uIG1ha2VfaHRtbF9yb3cod3MsIHIsIFIsIG8pIHtcblx0XHR2YXIgTSA9ICh3c1snIW1lcmdlcyddIHx8W10pO1xuXHRcdHZhciBvbyA9IFtdO1xuXHRcdGZvcih2YXIgQyA9IHIucy5jOyBDIDw9IHIuZS5jOyArK0MpIHtcblx0XHRcdHZhciBSUyA9IDAsIENTID0gMDtcblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBNLmxlbmd0aDsgKytqKSB7XG5cdFx0XHRcdGlmKE1bal0ucy5yID4gUiB8fCBNW2pdLnMuYyA+IEMpIGNvbnRpbnVlO1xuXHRcdFx0XHRpZihNW2pdLmUuciA8IFIgfHwgTVtqXS5lLmMgPCBDKSBjb250aW51ZTtcblx0XHRcdFx0aWYoTVtqXS5zLnIgPCBSIHx8IE1bal0ucy5jIDwgQykgeyBSUyA9IC0xOyBicmVhazsgfVxuXHRcdFx0XHRSUyA9IE1bal0uZS5yIC0gTVtqXS5zLnIgKyAxOyBDUyA9IE1bal0uZS5jIC0gTVtqXS5zLmMgKyAxOyBicmVhaztcblx0XHRcdH1cblx0XHRcdGlmKFJTIDwgMCkgY29udGludWU7XG5cdFx0XHR2YXIgY29vcmQgPSBlbmNvZGVfY2VsbCh7cjpSLGM6Q30pO1xuXHRcdFx0dmFyIGNlbGwgPSBvLmRlbnNlID8gKHdzW1JdfHxbXSlbQ10gOiB3c1tjb29yZF07XG5cdFx0XHQvKiBUT0RPOiBodG1sIGVudGl0aWVzICovXG5cdFx0XHR2YXIgdyA9IChjZWxsICYmIGNlbGwudiAhPSBudWxsKSAmJiAoY2VsbC5oIHx8IGVzY2FwZWh0bWwoY2VsbC53IHx8IChmb3JtYXRfY2VsbChjZWxsKSwgY2VsbC53KSB8fCBcIlwiKSkgfHwgXCJcIjtcblx0XHRcdHZhciBzcCA9ICh7fSk7XG5cdFx0XHRpZihSUyA+IDEpIHNwLnJvd3NwYW4gPSBSUztcblx0XHRcdGlmKENTID4gMSkgc3AuY29sc3BhbiA9IENTO1xuXHRcdFx0aWYoby5lZGl0YWJsZSkgdyA9ICc8c3BhbiBjb250ZW50ZWRpdGFibGU9XCJ0cnVlXCI+JyArIHcgKyAnPC9zcGFuPic7XG5cdFx0XHRlbHNlIGlmKGNlbGwpIHtcblx0XHRcdFx0c3BbXCJkYXRhLXRcIl0gPSBjZWxsICYmIGNlbGwudCB8fCAneic7XG5cdFx0XHRcdGlmKGNlbGwudiAhPSBudWxsKSBzcFtcImRhdGEtdlwiXSA9IGNlbGwudjtcblx0XHRcdFx0aWYoY2VsbC56ICE9IG51bGwpIHNwW1wiZGF0YS16XCJdID0gY2VsbC56O1xuXHRcdFx0XHRpZihjZWxsLmwgJiYgKGNlbGwubC5UYXJnZXQgfHwgXCIjXCIpLmNoYXJBdCgwKSAhPSBcIiNcIikgdyA9ICc8YSBocmVmPVwiJyArIGNlbGwubC5UYXJnZXQgKydcIj4nICsgdyArICc8L2E+Jztcblx0XHRcdH1cblx0XHRcdHNwLmlkID0gKG8uaWQgfHwgXCJzanNcIikgKyBcIi1cIiArIGNvb3JkO1xuXHRcdFx0b28ucHVzaCh3cml0ZXh0YWcoJ3RkJywgdywgc3ApKTtcblx0XHR9XG5cdFx0dmFyIHByZWFtYmxlID0gXCI8dHI+XCI7XG5cdFx0cmV0dXJuIHByZWFtYmxlICsgb28uam9pbihcIlwiKSArIFwiPC90cj5cIjtcblx0fVxuXHRmdW5jdGlvbiBtYWtlX2h0bWxfcHJlYW1ibGUod3MsIFIsIG8pIHtcblx0XHR2YXIgb3V0ID0gW107XG5cdFx0cmV0dXJuIG91dC5qb2luKFwiXCIpICsgJzx0YWJsZScgKyAobyAmJiBvLmlkID8gJyBpZD1cIicgKyBvLmlkICsgJ1wiJyA6IFwiXCIpICsgJz4nO1xuXHR9XG5cdHZhciBfQkVHSU4gPSAnPGh0bWw+PGhlYWQ+PG1ldGEgY2hhcnNldD1cInV0Zi04XCIvPjx0aXRsZT5TaGVldEpTIFRhYmxlIEV4cG9ydDwvdGl0bGU+PC9oZWFkPjxib2R5Pic7XG5cdHZhciBfRU5EID0gJzwvYm9keT48L2h0bWw+Jztcblx0ZnVuY3Rpb24gc2hlZXRfdG9faHRtbCh3cywgb3B0cy8qLCB3Yjo/V29ya2Jvb2sqLykge1xuXHRcdHZhciBvID0gb3B0cyB8fCB7fTtcblx0XHR2YXIgaGVhZGVyID0gby5oZWFkZXIgIT0gbnVsbCA/IG8uaGVhZGVyIDogX0JFR0lOO1xuXHRcdHZhciBmb290ZXIgPSBvLmZvb3RlciAhPSBudWxsID8gby5mb290ZXIgOiBfRU5EO1xuXHRcdHZhciBvdXQgPSBbaGVhZGVyXTtcblx0XHR2YXIgciA9IGRlY29kZV9yYW5nZSh3c1snIXJlZiddKTtcblx0XHRvLmRlbnNlID0gQXJyYXkuaXNBcnJheSh3cyk7XG5cdFx0b3V0LnB1c2gobWFrZV9odG1sX3ByZWFtYmxlKHdzLCByLCBvKSk7XG5cdFx0Zm9yKHZhciBSID0gci5zLnI7IFIgPD0gci5lLnI7ICsrUikgb3V0LnB1c2gobWFrZV9odG1sX3Jvdyh3cywgciwgUiwgbykpO1xuXHRcdG91dC5wdXNoKFwiPC90YWJsZT5cIiArIGZvb3Rlcik7XG5cdFx0cmV0dXJuIG91dC5qb2luKFwiXCIpO1xuXG5cdH1cblx0cmV0dXJuIHtcblx0XHR0b193b3JrYm9vazogaHRtbF90b19ib29rLFxuXHRcdHRvX3NoZWV0OiBodG1sX3RvX3NoZWV0LFxuXHRcdF9yb3c6IG1ha2VfaHRtbF9yb3csXG5cdFx0QkVHSU46IF9CRUdJTixcblx0XHRFTkQ6IF9FTkQsXG5cdFx0X3ByZWFtYmxlOiBtYWtlX2h0bWxfcHJlYW1ibGUsXG5cdFx0ZnJvbV9zaGVldDogc2hlZXRfdG9faHRtbFxuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gc2hlZXRfYWRkX2RvbSh3cywgdGFibGUsIF9vcHRzKSB7XG5cdHZhciBvcHRzID0gX29wdHMgfHwge307XG5cdGlmKERFTlNFICE9IG51bGwpIG9wdHMuZGVuc2UgPSBERU5TRTtcblx0dmFyIG9yX1IgPSAwLCBvcl9DID0gMDtcblx0aWYob3B0cy5vcmlnaW4gIT0gbnVsbCkge1xuXHRcdGlmKHR5cGVvZiBvcHRzLm9yaWdpbiA9PSAnbnVtYmVyJykgb3JfUiA9IG9wdHMub3JpZ2luO1xuXHRcdGVsc2Uge1xuXHRcdFx0dmFyIF9vcmlnaW4gPSB0eXBlb2Ygb3B0cy5vcmlnaW4gPT0gXCJzdHJpbmdcIiA/IGRlY29kZV9jZWxsKG9wdHMub3JpZ2luKSA6IG9wdHMub3JpZ2luO1xuXHRcdFx0b3JfUiA9IF9vcmlnaW4ucjsgb3JfQyA9IF9vcmlnaW4uYztcblx0XHR9XG5cdH1cblx0dmFyIHJvd3MgPSB0YWJsZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgndHInKTtcblx0dmFyIHNoZWV0Um93cyA9IE1hdGgubWluKG9wdHMuc2hlZXRSb3dzfHwxMDAwMDAwMCwgcm93cy5sZW5ndGgpO1xuXHR2YXIgcmFuZ2UgPSB7czp7cjowLGM6MH0sZTp7cjpvcl9SLGM6b3JfQ319O1xuXHRpZih3c1tcIiFyZWZcIl0pIHtcblx0XHR2YXIgX3JhbmdlID0gZGVjb2RlX3JhbmdlKHdzW1wiIXJlZlwiXSk7XG5cdFx0cmFuZ2Uucy5yID0gTWF0aC5taW4ocmFuZ2Uucy5yLCBfcmFuZ2Uucy5yKTtcblx0XHRyYW5nZS5zLmMgPSBNYXRoLm1pbihyYW5nZS5zLmMsIF9yYW5nZS5zLmMpO1xuXHRcdHJhbmdlLmUuciA9IE1hdGgubWF4KHJhbmdlLmUuciwgX3JhbmdlLmUucik7XG5cdFx0cmFuZ2UuZS5jID0gTWF0aC5tYXgocmFuZ2UuZS5jLCBfcmFuZ2UuZS5jKTtcblx0XHRpZihvcl9SID09IC0xKSByYW5nZS5lLnIgPSBvcl9SID0gX3JhbmdlLmUuciArIDE7XG5cdH1cblx0dmFyIG1lcmdlcyA9IFtdLCBtaWR4ID0gMDtcblx0dmFyIHJvd2luZm8gPSB3c1tcIiFyb3dzXCJdIHx8ICh3c1tcIiFyb3dzXCJdID0gW10pO1xuXHR2YXIgX1IgPSAwLCBSID0gMCwgX0MgPSAwLCBDID0gMCwgUlMgPSAwLCBDUyA9IDA7XG5cdGlmKCF3c1tcIiFjb2xzXCJdKSB3c1snIWNvbHMnXSA9IFtdO1xuXHRmb3IoOyBfUiA8IHJvd3MubGVuZ3RoICYmIFIgPCBzaGVldFJvd3M7ICsrX1IpIHtcblx0XHR2YXIgcm93ID0gcm93c1tfUl07XG5cdFx0aWYgKGlzX2RvbV9lbGVtZW50X2hpZGRlbihyb3cpKSB7XG5cdFx0XHRpZiAob3B0cy5kaXNwbGF5KSBjb250aW51ZTtcblx0XHRcdHJvd2luZm9bUl0gPSB7aGlkZGVuOiB0cnVlfTtcblx0XHR9XG5cdFx0dmFyIGVsdHMgPSAocm93LmNoaWxkcmVuKTtcblx0XHRmb3IoX0MgPSBDID0gMDsgX0MgPCBlbHRzLmxlbmd0aDsgKytfQykge1xuXHRcdFx0dmFyIGVsdCA9IGVsdHNbX0NdO1xuXHRcdFx0aWYgKG9wdHMuZGlzcGxheSAmJiBpc19kb21fZWxlbWVudF9oaWRkZW4oZWx0KSkgY29udGludWU7XG5cdFx0XHR2YXIgdiA9IGVsdC5oYXNBdHRyaWJ1dGUoJ2RhdGEtdicpID8gZWx0LmdldEF0dHJpYnV0ZSgnZGF0YS12JykgOiBlbHQuaGFzQXR0cmlidXRlKCd2JykgPyBlbHQuZ2V0QXR0cmlidXRlKCd2JykgOiBodG1sZGVjb2RlKGVsdC5pbm5lckhUTUwpO1xuXHRcdFx0dmFyIHogPSBlbHQuZ2V0QXR0cmlidXRlKCdkYXRhLXonKSB8fCBlbHQuZ2V0QXR0cmlidXRlKCd6Jyk7XG5cdFx0XHRmb3IobWlkeCA9IDA7IG1pZHggPCBtZXJnZXMubGVuZ3RoOyArK21pZHgpIHtcblx0XHRcdFx0dmFyIG0gPSBtZXJnZXNbbWlkeF07XG5cdFx0XHRcdGlmKG0ucy5jID09IEMgKyBvcl9DICYmIG0ucy5yIDwgUiArIG9yX1IgJiYgUiArIG9yX1IgPD0gbS5lLnIpIHsgQyA9IG0uZS5jKzEgLSBvcl9DOyBtaWR4ID0gLTE7IH1cblx0XHRcdH1cblx0XHRcdC8qIFRPRE86IGZpZ3VyZSBvdXQgaG93IHRvIGV4dHJhY3Qgbm9uc3RhbmRhcmQgbXNvLSBzdHlsZSAqL1xuXHRcdFx0Q1MgPSArZWx0LmdldEF0dHJpYnV0ZShcImNvbHNwYW5cIikgfHwgMTtcblx0XHRcdGlmKCAoKFJTID0gKCtlbHQuZ2V0QXR0cmlidXRlKFwicm93c3BhblwiKSB8fCAxKSkpPjEgfHwgQ1M+MSkgbWVyZ2VzLnB1c2goe3M6e3I6UiArIG9yX1IsYzpDICsgb3JfQ30sZTp7cjpSICsgb3JfUiArIChSU3x8MSkgLSAxLCBjOkMgKyBvcl9DICsgKENTfHwxKSAtIDF9fSk7XG5cdFx0XHR2YXIgbyA9IHt0OidzJywgdjp2fTtcblx0XHRcdHZhciBfdCA9IGVsdC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRcIikgfHwgZWx0LmdldEF0dHJpYnV0ZShcInRcIikgfHwgXCJcIjtcblx0XHRcdGlmKHYgIT0gbnVsbCkge1xuXHRcdFx0XHRpZih2Lmxlbmd0aCA9PSAwKSBvLnQgPSBfdCB8fCAneic7XG5cdFx0XHRcdGVsc2UgaWYob3B0cy5yYXcgfHwgdi50cmltKCkubGVuZ3RoID09IDAgfHwgX3QgPT0gXCJzXCIpe31cblx0XHRcdFx0ZWxzZSBpZih2ID09PSAnVFJVRScpIG8gPSB7dDonYicsIHY6dHJ1ZX07XG5cdFx0XHRcdGVsc2UgaWYodiA9PT0gJ0ZBTFNFJykgbyA9IHt0OidiJywgdjpmYWxzZX07XG5cdFx0XHRcdGVsc2UgaWYoIWlzTmFOKGZ1enp5bnVtKHYpKSkgbyA9IHt0OiduJywgdjpmdXp6eW51bSh2KX07XG5cdFx0XHRcdGVsc2UgaWYoIWlzTmFOKGZ1enp5ZGF0ZSh2KS5nZXREYXRlKCkpKSB7XG5cdFx0XHRcdFx0byA9ICh7dDonZCcsIHY6cGFyc2VEYXRlKHYpfSk7XG5cdFx0XHRcdFx0aWYoIW9wdHMuY2VsbERhdGVzKSBvID0gKHt0OiduJywgdjpkYXRlbnVtKG8udil9KTtcblx0XHRcdFx0XHRvLnogPSBvcHRzLmRhdGVORiB8fCBTU0YuX3RhYmxlWzE0XTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYoby56ID09PSB1bmRlZmluZWQgJiYgeiAhPSBudWxsKSBvLnogPSB6O1xuXHRcdFx0LyogVGhlIGZpcnN0IGxpbmsgaXMgdXNlZC4gIExpbmtzIGFyZSBhc3N1bWVkIHRvIGJlIGZ1bGx5IHNwZWNpZmllZC5cblx0XHRcdCAqIFRPRE86IFRoZSByaWdodCB3YXkgdG8gcHJvY2VzcyByZWxhdGl2ZSBsaW5rcyBpcyB0byBtYWtlIGEgbmV3IDxhPiAqL1xuXHRcdFx0dmFyIGwgPSBcIlwiLCBBZWx0cyA9IGVsdC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIkFcIik7XG5cdFx0XHRpZihBZWx0cyAmJiBBZWx0cy5sZW5ndGgpIGZvcih2YXIgQWVsdGkgPSAwOyBBZWx0aSA8IEFlbHRzLmxlbmd0aDsgKytBZWx0aSlcdGlmKEFlbHRzW0FlbHRpXS5oYXNBdHRyaWJ1dGUoXCJocmVmXCIpKSB7XG5cdFx0XHRcdGwgPSBBZWx0c1tBZWx0aV0uZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTsgaWYobC5jaGFyQXQoMCkgIT0gXCIjXCIpIGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYobCAmJiBsLmNoYXJBdCgwKSAhPSBcIiNcIikgby5sID0gKHsgVGFyZ2V0OiBsIH0pO1xuXHRcdFx0aWYob3B0cy5kZW5zZSkgeyBpZighd3NbUiArIG9yX1JdKSB3c1tSICsgb3JfUl0gPSBbXTsgd3NbUiArIG9yX1JdW0MgKyBvcl9DXSA9IG87IH1cblx0XHRcdGVsc2Ugd3NbZW5jb2RlX2NlbGwoe2M6QyArIG9yX0MsIHI6UiArIG9yX1J9KV0gPSBvO1xuXHRcdFx0aWYocmFuZ2UuZS5jIDwgQyArIG9yX0MpIHJhbmdlLmUuYyA9IEMgKyBvcl9DO1xuXHRcdFx0QyArPSBDUztcblx0XHR9XG5cdFx0KytSO1xuXHR9XG5cdGlmKG1lcmdlcy5sZW5ndGgpIHdzWychbWVyZ2VzJ10gPSAod3NbXCIhbWVyZ2VzXCJdIHx8IFtdKS5jb25jYXQobWVyZ2VzKTtcblx0cmFuZ2UuZS5yID0gTWF0aC5tYXgocmFuZ2UuZS5yLCBSIC0gMSArIG9yX1IpO1xuXHR3c1snIXJlZiddID0gZW5jb2RlX3JhbmdlKHJhbmdlKTtcblx0aWYoUiA+PSBzaGVldFJvd3MpIHdzWychZnVsbHJlZiddID0gZW5jb2RlX3JhbmdlKChyYW5nZS5lLnIgPSByb3dzLmxlbmd0aC1fUitSLTEgKyBvcl9SLHJhbmdlKSk7IC8vIFdlIGNhbiBjb3VudCB0aGUgcmVhbCBudW1iZXIgb2Ygcm93cyB0byBwYXJzZSBidXQgd2UgZG9uJ3QgdG8gaW1wcm92ZSB0aGUgcGVyZm9ybWFuY2Vcblx0cmV0dXJuIHdzO1xufVxuXG5mdW5jdGlvbiBwYXJzZV9kb21fdGFibGUodGFibGUsIF9vcHRzKSB7XG5cdHZhciBvcHRzID0gX29wdHMgfHwge307XG5cdHZhciB3cyA9IG9wdHMuZGVuc2UgPyAoW10pIDogKHt9KTtcblx0cmV0dXJuIHNoZWV0X2FkZF9kb20od3MsIHRhYmxlLCBfb3B0cyk7XG59XG5cbmZ1bmN0aW9uIHRhYmxlX3RvX2Jvb2sodGFibGUsIG9wdHMpIHtcblx0cmV0dXJuIHNoZWV0X3RvX3dvcmtib29rKHBhcnNlX2RvbV90YWJsZSh0YWJsZSwgb3B0cyksIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBpc19kb21fZWxlbWVudF9oaWRkZW4oZWxlbWVudCkge1xuXHR2YXIgZGlzcGxheSA9ICcnO1xuXHR2YXIgZ2V0X2NvbXB1dGVkX3N0eWxlID0gZ2V0X2dldF9jb21wdXRlZF9zdHlsZV9mdW5jdGlvbihlbGVtZW50KTtcblx0aWYoZ2V0X2NvbXB1dGVkX3N0eWxlKSBkaXNwbGF5ID0gZ2V0X2NvbXB1dGVkX3N0eWxlKGVsZW1lbnQpLmdldFByb3BlcnR5VmFsdWUoJ2Rpc3BsYXknKTtcblx0aWYoIWRpc3BsYXkpIGRpc3BsYXkgPSBlbGVtZW50LnN0eWxlLmRpc3BsYXk7IC8vIEZhbGxiYWNrIGZvciBjYXNlcyB3aGVuIGdldENvbXB1dGVkU3R5bGUgaXMgbm90IGF2YWlsYWJsZSAoZS5nLiBhbiBvbGQgYnJvd3NlciBvciBzb21lIE5vZGUuanMgZW52aXJvbm1lbnRzKSBvciBkb2Vzbid0IHdvcmsgKGUuZy4gaWYgdGhlIGVsZW1lbnQgaXMgbm90IGluc2VydGVkIHRvIGEgZG9jdW1lbnQpXG5cdHJldHVybiBkaXNwbGF5ID09PSAnbm9uZSc7XG59XG5cbi8qIGdsb2JhbCBnZXRDb21wdXRlZFN0eWxlICovXG5mdW5jdGlvbiBnZXRfZ2V0X2NvbXB1dGVkX3N0eWxlX2Z1bmN0aW9uKGVsZW1lbnQpIHtcblx0Ly8gVGhlIHByb3BlciBnZXRDb21wdXRlZFN0eWxlIGltcGxlbWVudGF0aW9uIGlzIHRoZSBvbmUgZGVmaW5lZCBpbiB0aGUgZWxlbWVudCB3aW5kb3dcblx0aWYoZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3ICYmIHR5cGVvZiBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlO1xuXHQvLyBJZiBpdCBpcyBub3QgYXZhaWxhYmxlLCB0cnkgdG8gZ2V0IG9uZSBmcm9tIHRoZSBnbG9iYWwgbmFtZXNwYWNlXG5cdGlmKHR5cGVvZiBnZXRDb21wdXRlZFN0eWxlID09PSAnZnVuY3Rpb24nKSByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZTtcblx0cmV0dXJuIG51bGw7XG59XG4vKiBPcGVuRG9jdW1lbnQgKi9cbnZhciBwYXJzZV9jb250ZW50X3htbCA9IChmdW5jdGlvbigpIHtcblxuXHR2YXIgcGFyc2VfdGV4dF9wID0gZnVuY3Rpb24odGV4dCkge1xuXHRcdC8qIDYuMS4yIFdoaXRlIFNwYWNlIENoYXJhY3RlcnMgKi9cblx0XHR2YXIgZml4ZWQgPSB0ZXh0XG5cdFx0XHQucmVwbGFjZSgvW1xcdFxcclxcbl0vZywgXCIgXCIpLnRyaW0oKS5yZXBsYWNlKC8gKy9nLCBcIiBcIilcblx0XHRcdC5yZXBsYWNlKC88dGV4dDpzXFwvPi9nLFwiIFwiKVxuXHRcdFx0LnJlcGxhY2UoLzx0ZXh0OnMgdGV4dDpjPVwiKFxcZCspXCJcXC8+L2csIGZ1bmN0aW9uKCQkLCQxKSB7IHJldHVybiBBcnJheShwYXJzZUludCgkMSwxMCkrMSkuam9pbihcIiBcIik7IH0pXG5cdFx0XHQucmVwbGFjZSgvPHRleHQ6dGFiW14+XSpcXC8+L2csXCJcXHRcIilcblx0XHRcdC5yZXBsYWNlKC88dGV4dDpsaW5lLWJyZWFrXFwvPi9nLFwiXFxuXCIpO1xuXHRcdHZhciB2ID0gdW5lc2NhcGV4bWwoZml4ZWQucmVwbGFjZSgvPFtePl0qPi9nLFwiXCIpKTtcblxuXHRcdHJldHVybiBbdl07XG5cdH07XG5cblx0dmFyIG51bWJlcl9mb3JtYXRzID0ge1xuXHRcdC8qIG9kcyBuYW1lOiBbc2hvcnQgc3NmIGZtdCwgbG9uZyBzc2YgZm10XSAqL1xuXHRcdGRheTogICAgICAgICAgIFtcImRcIiwgICBcImRkXCJdLFxuXHRcdG1vbnRoOiAgICAgICAgIFtcIm1cIiwgICBcIm1tXCJdLFxuXHRcdHllYXI6ICAgICAgICAgIFtcInlcIiwgICBcInl5XCJdLFxuXHRcdGhvdXJzOiAgICAgICAgIFtcImhcIiwgICBcImhoXCJdLFxuXHRcdG1pbnV0ZXM6ICAgICAgIFtcIm1cIiwgICBcIm1tXCJdLFxuXHRcdHNlY29uZHM6ICAgICAgIFtcInNcIiwgICBcInNzXCJdLFxuXHRcdFwiYW0tcG1cIjogICAgICAgW1wiQS9QXCIsIFwiQU0vUE1cIl0sXG5cdFx0XCJkYXktb2Ytd2Vla1wiOiBbXCJkZGRcIiwgXCJkZGRkXCJdLFxuXHRcdGVyYTogICAgICAgICAgIFtcImVcIiwgICBcImVlXCJdLFxuXHRcdC8qIHRoZXJlIGlzIG5vIG5hdGl2ZSByZXByZXNlbnRhdGlvbiBvZiBMTyBcIlFcIiBmb3JtYXQgKi9cblx0XHRxdWFydGVyOiAgICAgICBbXCJcXFxcUW1cIiwgXCJtXFxcXFxcXCJ0aCBxdWFydGVyXFxcIlwiXVxuXHR9O1xuXG5cdHJldHVybiBmdW5jdGlvbiBwY3goZCwgX29wdHMpIHtcblx0XHR2YXIgb3B0cyA9IF9vcHRzIHx8IHt9O1xuXHRcdGlmKERFTlNFICE9IG51bGwgJiYgb3B0cy5kZW5zZSA9PSBudWxsKSBvcHRzLmRlbnNlID0gREVOU0U7XG5cdFx0dmFyIHN0ciA9IHhsbWxfbm9ybWFsaXplKGQpO1xuXHRcdHZhciBzdGF0ZSA9IFtdLCB0bXA7XG5cdFx0dmFyIHRhZztcblx0XHR2YXIgTkZ0YWcgPSB7bmFtZTpcIlwifSwgTkYgPSBcIlwiLCBwaWR4ID0gMDtcblx0XHR2YXIgc2hlZXRhZztcblx0XHR2YXIgcm93dGFnO1xuXHRcdHZhciBTaGVldHMgPSB7fSwgU2hlZXROYW1lcyA9IFtdO1xuXHRcdHZhciB3cyA9IG9wdHMuZGVuc2UgPyAoW10pIDogKHt9KTtcblx0XHR2YXIgUm4sIHE7XG5cdFx0dmFyIGN0YWcgPSAoe3ZhbHVlOlwiXCJ9KTtcblx0XHR2YXIgdGV4dHAgPSBcIlwiLCB0ZXh0cGlkeCA9IDAsIHRleHRwdGFnO1xuXHRcdHZhciB0ZXh0UiA9IFtdO1xuXHRcdHZhciBSID0gLTEsIEMgPSAtMSwgcmFuZ2UgPSB7czoge3I6MTAwMDAwMCxjOjEwMDAwMDAwfSwgZToge3I6MCwgYzowfX07XG5cdFx0dmFyIHJvd19vbCA9IDA7XG5cdFx0dmFyIG51bWJlcl9mb3JtYXRfbWFwID0ge307XG5cdFx0dmFyIG1lcmdlcyA9IFtdLCBtcmFuZ2UgPSB7fSwgbVIgPSAwLCBtQyA9IDA7XG5cdFx0dmFyIHJvd2luZm8gPSBbXSwgcm93cGVhdCA9IDEsIGNvbHBlYXQgPSAxO1xuXHRcdHZhciBhcnJheWYgPSBbXTtcblx0XHR2YXIgV0IgPSB7TmFtZXM6W119O1xuXHRcdHZhciBhdGFnID0gKHt9KTtcblx0XHR2YXIgX1JlZiA9IFtcIlwiLCBcIlwiXTtcblx0XHR2YXIgY29tbWVudHMgPSBbXSwgY29tbWVudCA9ICh7fSk7XG5cdFx0dmFyIGNyZWF0b3IgPSBcIlwiLCBjcmVhdG9yaWR4ID0gMDtcblx0XHR2YXIgaXNzdHViID0gZmFsc2UsIGludGFibGUgPSBmYWxzZTtcblx0XHR2YXIgaSA9IDA7XG5cdFx0eGxtbHJlZ2V4Lmxhc3RJbmRleCA9IDA7XG5cdFx0c3RyID0gc3RyLnJlcGxhY2UoLzwhLS0oW1xcc1xcU10qPyktLT4vbWcsXCJcIikucmVwbGFjZSgvPCFET0NUWVBFW15cXFtdKlxcW1teXFxdXSpcXF0+L2dtLFwiXCIpO1xuXHRcdHdoaWxlKChSbiA9IHhsbWxyZWdleC5leGVjKHN0cikpKSBzd2l0Y2goKFJuWzNdPVJuWzNdLnJlcGxhY2UoL18uKiQvLFwiXCIpKSkge1xuXG5cdFx0XHRjYXNlICd0YWJsZSc6IGNhc2UgJ+W3peS9nOihqCc6IC8vIDkuMS4yIDx0YWJsZTp0YWJsZT5cblx0XHRcdFx0aWYoUm5bMV09PT0nLycpIHtcblx0XHRcdFx0XHRpZihyYW5nZS5lLmMgPj0gcmFuZ2Uucy5jICYmIHJhbmdlLmUuciA+PSByYW5nZS5zLnIpIHdzWychcmVmJ10gPSBlbmNvZGVfcmFuZ2UocmFuZ2UpO1xuXHRcdFx0XHRcdGVsc2Ugd3NbJyFyZWYnXSA9IFwiQTE6QTFcIjtcblx0XHRcdFx0XHRpZihvcHRzLnNoZWV0Um93cyA+IDAgJiYgb3B0cy5zaGVldFJvd3MgPD0gcmFuZ2UuZS5yKSB7XG5cdFx0XHRcdFx0XHR3c1snIWZ1bGxyZWYnXSA9IHdzWychcmVmJ107XG5cdFx0XHRcdFx0XHRyYW5nZS5lLnIgPSBvcHRzLnNoZWV0Um93cyAtIDE7XG5cdFx0XHRcdFx0XHR3c1snIXJlZiddID0gZW5jb2RlX3JhbmdlKHJhbmdlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYobWVyZ2VzLmxlbmd0aCkgd3NbJyFtZXJnZXMnXSA9IG1lcmdlcztcblx0XHRcdFx0XHRpZihyb3dpbmZvLmxlbmd0aCkgd3NbXCIhcm93c1wiXSA9IHJvd2luZm87XG5cdFx0XHRcdFx0c2hlZXRhZy5uYW1lID0gc2hlZXRhZ1sn5ZCN56ewJ10gfHwgc2hlZXRhZy5uYW1lO1xuXHRcdFx0XHRcdGlmKHR5cGVvZiBKU09OICE9PSAndW5kZWZpbmVkJykgSlNPTi5zdHJpbmdpZnkoc2hlZXRhZyk7XG5cdFx0XHRcdFx0U2hlZXROYW1lcy5wdXNoKHNoZWV0YWcubmFtZSk7XG5cdFx0XHRcdFx0U2hlZXRzW3NoZWV0YWcubmFtZV0gPSB3cztcblx0XHRcdFx0XHRpbnRhYmxlID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZihSblswXS5jaGFyQXQoUm5bMF0ubGVuZ3RoLTIpICE9PSAnLycpIHtcblx0XHRcdFx0XHRzaGVldGFnID0gcGFyc2V4bWx0YWcoUm5bMF0sIGZhbHNlKTtcblx0XHRcdFx0XHRSID0gQyA9IC0xO1xuXHRcdFx0XHRcdHJhbmdlLnMuciA9IHJhbmdlLnMuYyA9IDEwMDAwMDAwOyByYW5nZS5lLnIgPSByYW5nZS5lLmMgPSAwO1xuXHRcdFx0XHRcdHdzID0gb3B0cy5kZW5zZSA/IChbXSkgOiAoe30pOyBtZXJnZXMgPSBbXTtcblx0XHRcdFx0XHRyb3dpbmZvID0gW107XG5cdFx0XHRcdFx0aW50YWJsZSA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ3RhYmxlLXJvdy1ncm91cCc6IC8vIDkuMS45IDx0YWJsZTp0YWJsZS1yb3ctZ3JvdXA+XG5cdFx0XHRcdGlmKFJuWzFdID09PSBcIi9cIikgLS1yb3dfb2w7IGVsc2UgKytyb3dfb2w7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAndGFibGUtcm93JzogY2FzZSAn6KGMJzogLy8gOS4xLjMgPHRhYmxlOnRhYmxlLXJvdz5cblx0XHRcdFx0aWYoUm5bMV0gPT09ICcvJykgeyBSKz1yb3dwZWF0OyByb3dwZWF0ID0gMTsgYnJlYWs7IH1cblx0XHRcdFx0cm93dGFnID0gcGFyc2V4bWx0YWcoUm5bMF0sIGZhbHNlKTtcblx0XHRcdFx0aWYocm93dGFnWyfooYzlj7cnXSkgUiA9IHJvd3RhZ1sn6KGM5Y+3J10gLSAxOyBlbHNlIGlmKFIgPT0gLTEpIFIgPSAwO1xuXHRcdFx0XHRyb3dwZWF0ID0gK3Jvd3RhZ1snbnVtYmVyLXJvd3MtcmVwZWF0ZWQnXSB8fCAxO1xuXHRcdFx0XHQvKiBUT0RPOiByZW1vdmUgbWFnaWMgKi9cblx0XHRcdFx0aWYocm93cGVhdCA8IDEwKSBmb3IoaSA9IDA7IGkgPCByb3dwZWF0OyArK2kpIGlmKHJvd19vbCA+IDApIHJvd2luZm9bUiArIGldID0ge2xldmVsOiByb3dfb2x9O1xuXHRcdFx0XHRDID0gLTE7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnY292ZXJlZC10YWJsZS1jZWxsJzogLy8gOS4xLjUgPHRhYmxlOmNvdmVyZWQtdGFibGUtY2VsbD5cblx0XHRcdFx0aWYoUm5bMV0gIT09ICcvJykgKytDO1xuXHRcdFx0XHRpZihvcHRzLnNoZWV0U3R1YnMpIHtcblx0XHRcdFx0XHRpZihvcHRzLmRlbnNlKSB7IGlmKCF3c1tSXSkgd3NbUl0gPSBbXTsgd3NbUl1bQ10gPSB7dDoneid9OyB9XG5cdFx0XHRcdFx0ZWxzZSB3c1tlbmNvZGVfY2VsbCh7cjpSLGM6Q30pXSA9IHt0Oid6J307XG5cdFx0XHRcdH1cblx0XHRcdFx0dGV4dHAgPSBcIlwiOyB0ZXh0UiA9IFtdO1xuXHRcdFx0XHRicmVhazsgLyogc3R1YiAqL1xuXHRcdFx0Y2FzZSAndGFibGUtY2VsbCc6IGNhc2UgJ+aVsOaNric6XG5cdFx0XHRcdGlmKFJuWzBdLmNoYXJBdChSblswXS5sZW5ndGgtMikgPT09ICcvJykge1xuXHRcdFx0XHRcdCsrQztcblx0XHRcdFx0XHRjdGFnID0gcGFyc2V4bWx0YWcoUm5bMF0sIGZhbHNlKTtcblx0XHRcdFx0XHRjb2xwZWF0ID0gcGFyc2VJbnQoY3RhZ1snbnVtYmVyLWNvbHVtbnMtcmVwZWF0ZWQnXXx8XCIxXCIsIDEwKTtcblx0XHRcdFx0XHRxID0gKHt0Oid6JywgdjpudWxsfSk7XG5cdFx0XHRcdFx0aWYoY3RhZy5mb3JtdWxhICYmIG9wdHMuY2VsbEZvcm11bGEgIT0gZmFsc2UpIHEuZiA9IG9kc190b19jc2ZfZm9ybXVsYSh1bmVzY2FwZXhtbChjdGFnLmZvcm11bGEpKTtcblx0XHRcdFx0XHRpZigoY3RhZ1sn5pWw5o2u57G75Z6LJ10gfHwgY3RhZ1sndmFsdWUtdHlwZSddKSA9PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdFx0XHRxLnQgPSBcInNcIjsgcS52ID0gdW5lc2NhcGV4bWwoY3RhZ1snc3RyaW5nLXZhbHVlJ10gfHwgXCJcIik7XG5cdFx0XHRcdFx0XHRpZihvcHRzLmRlbnNlKSB7XG5cdFx0XHRcdFx0XHRcdGlmKCF3c1tSXSkgd3NbUl0gPSBbXTtcblx0XHRcdFx0XHRcdFx0d3NbUl1bQ10gPSBxO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0d3NbZW5jb2RlX2NlbGwoe3I6UixjOkN9KV0gPSBxO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRDKz0gY29scGVhdC0xO1xuXHRcdFx0XHR9IGVsc2UgaWYoUm5bMV0hPT0nLycpIHtcblx0XHRcdFx0XHQrK0M7XG5cdFx0XHRcdFx0dGV4dHAgPSBcIlwiOyB0ZXh0cGlkeCA9IDA7IHRleHRSID0gW107XG5cdFx0XHRcdFx0Y29scGVhdCA9IDE7XG5cdFx0XHRcdFx0dmFyIHJwdFIgPSByb3dwZWF0ID8gUiArIHJvd3BlYXQgLSAxIDogUjtcblx0XHRcdFx0XHRpZihDID4gcmFuZ2UuZS5jKSByYW5nZS5lLmMgPSBDO1xuXHRcdFx0XHRcdGlmKEMgPCByYW5nZS5zLmMpIHJhbmdlLnMuYyA9IEM7XG5cdFx0XHRcdFx0aWYoUiA8IHJhbmdlLnMucikgcmFuZ2Uucy5yID0gUjtcblx0XHRcdFx0XHRpZihycHRSID4gcmFuZ2UuZS5yKSByYW5nZS5lLnIgPSBycHRSO1xuXHRcdFx0XHRcdGN0YWcgPSBwYXJzZXhtbHRhZyhSblswXSwgZmFsc2UpO1xuXHRcdFx0XHRcdGNvbW1lbnRzID0gW107IGNvbW1lbnQgPSAoe30pO1xuXHRcdFx0XHRcdHEgPSAoe3Q6Y3RhZ1sn5pWw5o2u57G75Z6LJ10gfHwgY3RhZ1sndmFsdWUtdHlwZSddLCB2Om51bGx9KTtcblx0XHRcdFx0XHRpZihvcHRzLmNlbGxGb3JtdWxhKSB7XG5cdFx0XHRcdFx0XHRpZihjdGFnLmZvcm11bGEpIGN0YWcuZm9ybXVsYSA9IHVuZXNjYXBleG1sKGN0YWcuZm9ybXVsYSk7XG5cdFx0XHRcdFx0XHRpZihjdGFnWydudW1iZXItbWF0cml4LWNvbHVtbnMtc3Bhbm5lZCddICYmIGN0YWdbJ251bWJlci1tYXRyaXgtcm93cy1zcGFubmVkJ10pIHtcblx0XHRcdFx0XHRcdFx0bVIgPSBwYXJzZUludChjdGFnWydudW1iZXItbWF0cml4LXJvd3Mtc3Bhbm5lZCddLDEwKSB8fCAwO1xuXHRcdFx0XHRcdFx0XHRtQyA9IHBhcnNlSW50KGN0YWdbJ251bWJlci1tYXRyaXgtY29sdW1ucy1zcGFubmVkJ10sMTApIHx8IDA7XG5cdFx0XHRcdFx0XHRcdG1yYW5nZSA9IHtzOiB7cjpSLGM6Q30sIGU6e3I6UiArIG1SLTEsYzpDICsgbUMtMX19O1xuXHRcdFx0XHRcdFx0XHRxLkYgPSBlbmNvZGVfcmFuZ2UobXJhbmdlKTtcblx0XHRcdFx0XHRcdFx0YXJyYXlmLnB1c2goW21yYW5nZSwgcS5GXSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZihjdGFnLmZvcm11bGEpIHEuZiA9IG9kc190b19jc2ZfZm9ybXVsYShjdGFnLmZvcm11bGEpO1xuXHRcdFx0XHRcdFx0ZWxzZSBmb3IoaSA9IDA7IGkgPCBhcnJheWYubGVuZ3RoOyArK2kpXG5cdFx0XHRcdFx0XHRcdGlmKFIgPj0gYXJyYXlmW2ldWzBdLnMuciAmJiBSIDw9IGFycmF5ZltpXVswXS5lLnIpXG5cdFx0XHRcdFx0XHRcdFx0aWYoQyA+PSBhcnJheWZbaV1bMF0ucy5jICYmIEMgPD0gYXJyYXlmW2ldWzBdLmUuYylcblx0XHRcdFx0XHRcdFx0XHRcdHEuRiA9IGFycmF5ZltpXVsxXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoY3RhZ1snbnVtYmVyLWNvbHVtbnMtc3Bhbm5lZCddIHx8IGN0YWdbJ251bWJlci1yb3dzLXNwYW5uZWQnXSkge1xuXHRcdFx0XHRcdFx0bVIgPSBwYXJzZUludChjdGFnWydudW1iZXItcm93cy1zcGFubmVkJ10sMTApIHx8IDA7XG5cdFx0XHRcdFx0XHRtQyA9IHBhcnNlSW50KGN0YWdbJ251bWJlci1jb2x1bW5zLXNwYW5uZWQnXSwxMCkgfHwgMDtcblx0XHRcdFx0XHRcdG1yYW5nZSA9IHtzOiB7cjpSLGM6Q30sIGU6e3I6UiArIG1SLTEsYzpDICsgbUMtMX19O1xuXHRcdFx0XHRcdFx0bWVyZ2VzLnB1c2gobXJhbmdlKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiAxOS42NzUuMiB0YWJsZTpudW1iZXItY29sdW1ucy1yZXBlYXRlZCAqL1xuXHRcdFx0XHRcdGlmKGN0YWdbJ251bWJlci1jb2x1bW5zLXJlcGVhdGVkJ10pIGNvbHBlYXQgPSBwYXJzZUludChjdGFnWydudW1iZXItY29sdW1ucy1yZXBlYXRlZCddLCAxMCk7XG5cblx0XHRcdFx0XHQvKiAxOS4zODUgb2ZmaWNlOnZhbHVlLXR5cGUgKi9cblx0XHRcdFx0XHRzd2l0Y2gocS50KSB7XG5cdFx0XHRcdFx0XHRjYXNlICdib29sZWFuJzogcS50ID0gJ2InOyBxLnYgPSBwYXJzZXhtbGJvb2woY3RhZ1snYm9vbGVhbi12YWx1ZSddKTsgYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdmbG9hdCc6IHEudCA9ICduJzsgcS52ID0gcGFyc2VGbG9hdChjdGFnLnZhbHVlKTsgYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdwZXJjZW50YWdlJzogcS50ID0gJ24nOyBxLnYgPSBwYXJzZUZsb2F0KGN0YWcudmFsdWUpOyBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ2N1cnJlbmN5JzogcS50ID0gJ24nOyBxLnYgPSBwYXJzZUZsb2F0KGN0YWcudmFsdWUpOyBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ2RhdGUnOiBxLnQgPSAnZCc7IHEudiA9IHBhcnNlRGF0ZShjdGFnWydkYXRlLXZhbHVlJ10pO1xuXHRcdFx0XHRcdFx0XHRpZighb3B0cy5jZWxsRGF0ZXMpIHsgcS50ID0gJ24nOyBxLnYgPSBkYXRlbnVtKHEudik7IH1cblx0XHRcdFx0XHRcdFx0cS56ID0gJ20vZC95eSc7IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAndGltZSc6IHEudCA9ICduJzsgcS52ID0gcGFyc2VfaXNvZHVyKGN0YWdbJ3RpbWUtdmFsdWUnXSkvODY0MDA7XG5cdFx0XHRcdFx0XHRcdGlmKG9wdHMuY2VsbERhdGVzKSB7IHEudCA9ICdkJzsgcS52ID0gbnVtZGF0ZShxLnYpOyB9XG5cdFx0XHRcdFx0XHRcdHEueiA9ICdISDpNTTpTUyc7IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnbnVtYmVyJzogcS50ID0gJ24nOyBxLnYgPSBwYXJzZUZsb2F0KGN0YWdbJ+aVsOaNruaVsOWAvCddKTsgYnJlYWs7XG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRpZihxLnQgPT09ICdzdHJpbmcnIHx8IHEudCA9PT0gJ3RleHQnIHx8ICFxLnQpIHtcblx0XHRcdFx0XHRcdFx0XHRxLnQgPSAncyc7XG5cdFx0XHRcdFx0XHRcdFx0aWYoY3RhZ1snc3RyaW5nLXZhbHVlJ10gIT0gbnVsbCkgeyB0ZXh0cCA9IHVuZXNjYXBleG1sKGN0YWdbJ3N0cmluZy12YWx1ZSddKTsgdGV4dFIgPSBbXTsgfVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCB2YWx1ZSB0eXBlICcgKyBxLnQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpc3N0dWIgPSBmYWxzZTtcblx0XHRcdFx0XHRpZihxLnQgPT09ICdzJykge1xuXHRcdFx0XHRcdFx0cS52ID0gdGV4dHAgfHwgJyc7XG5cdFx0XHRcdFx0XHRpZih0ZXh0Ui5sZW5ndGgpIHEuUiA9IHRleHRSO1xuXHRcdFx0XHRcdFx0aXNzdHViID0gdGV4dHBpZHggPT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoYXRhZy5UYXJnZXQpIHEubCA9IGF0YWc7XG5cdFx0XHRcdFx0aWYoY29tbWVudHMubGVuZ3RoID4gMCkgeyBxLmMgPSBjb21tZW50czsgY29tbWVudHMgPSBbXTsgfVxuXHRcdFx0XHRcdGlmKHRleHRwICYmIG9wdHMuY2VsbFRleHQgIT09IGZhbHNlKSBxLncgPSB0ZXh0cDtcblx0XHRcdFx0XHRpZihpc3N0dWIpIHsgcS50ID0gXCJ6XCI7IGRlbGV0ZSBxLnY7IH1cblx0XHRcdFx0XHRpZighaXNzdHViIHx8IG9wdHMuc2hlZXRTdHVicykge1xuXHRcdFx0XHRcdFx0aWYoIShvcHRzLnNoZWV0Um93cyAmJiBvcHRzLnNoZWV0Um93cyA8PSBSKSkge1xuXHRcdFx0XHRcdFx0XHRmb3IodmFyIHJwdCA9IDA7IHJwdCA8IHJvd3BlYXQ7ICsrcnB0KSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29scGVhdCA9IHBhcnNlSW50KGN0YWdbJ251bWJlci1jb2x1bW5zLXJlcGVhdGVkJ118fFwiMVwiLCAxMCk7XG5cdFx0XHRcdFx0XHRcdFx0aWYob3B0cy5kZW5zZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYoIXdzW1IgKyBycHRdKSB3c1tSICsgcnB0XSA9IFtdO1xuXHRcdFx0XHRcdFx0XHRcdFx0d3NbUiArIHJwdF1bQ10gPSBycHQgPT0gMCA/IHEgOiBkdXAocSk7XG5cdFx0XHRcdFx0XHRcdFx0XHR3aGlsZSgtLWNvbHBlYXQgPiAwKSB3c1tSICsgcnB0XVtDICsgY29scGVhdF0gPSBkdXAocSk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdHdzW2VuY29kZV9jZWxsKHtyOlIgKyBycHQsYzpDfSldID0gcTtcblx0XHRcdFx0XHRcdFx0XHRcdHdoaWxlKC0tY29scGVhdCA+IDApIHdzW2VuY29kZV9jZWxsKHtyOlIgKyBycHQsYzpDICsgY29scGVhdH0pXSA9IGR1cChxKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0aWYocmFuZ2UuZS5jIDw9IEMpIHJhbmdlLmUuYyA9IEM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29scGVhdCA9IHBhcnNlSW50KGN0YWdbJ251bWJlci1jb2x1bW5zLXJlcGVhdGVkJ118fFwiMVwiLCAxMCk7XG5cdFx0XHRcdFx0QyArPSBjb2xwZWF0LTE7IGNvbHBlYXQgPSAwO1xuXHRcdFx0XHRcdHEgPSB7fTtcblx0XHRcdFx0XHR0ZXh0cCA9IFwiXCI7IHRleHRSID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0YXRhZyA9ICh7fSk7XG5cdFx0XHRcdGJyZWFrOyAvLyA5LjEuNCA8dGFibGU6dGFibGUtY2VsbD5cblxuXHRcdFx0LyogcHVyZSBzdGF0ZSAqL1xuXHRcdFx0Y2FzZSAnZG9jdW1lbnQnOiAvLyBUT0RPOiA8b2ZmaWNlOmRvY3VtZW50PiBpcyB0aGUgcm9vdCBmb3IgRk9EU1xuXHRcdFx0Y2FzZSAnZG9jdW1lbnQtY29udGVudCc6IGNhc2UgJ+eUteWtkOihqOagvOaWh+ahoyc6IC8vIDMuMS4zLjIgPG9mZmljZTpkb2N1bWVudC1jb250ZW50PlxuXHRcdFx0Y2FzZSAnc3ByZWFkc2hlZXQnOiBjYXNlICfkuLvkvZMnOiAvLyAzLjcgPG9mZmljZTpzcHJlYWRzaGVldD5cblx0XHRcdGNhc2UgJ3NjcmlwdHMnOiAvLyAzLjEyIDxvZmZpY2U6c2NyaXB0cz5cblx0XHRcdGNhc2UgJ3N0eWxlcyc6IC8vIFRPRE8gPG9mZmljZTpzdHlsZXM+XG5cdFx0XHRjYXNlICdmb250LWZhY2UtZGVjbHMnOiAvLyAzLjE0IDxvZmZpY2U6Zm9udC1mYWNlLWRlY2xzPlxuXHRcdFx0Y2FzZSAnbWFzdGVyLXN0eWxlcyc6IC8vIDMuMTUuNCA8b2ZmaWNlOm1hc3Rlci1zdHlsZXM+IC0tIHJlbGV2YW50IGZvciBGT0RTXG5cdFx0XHRcdGlmKFJuWzFdPT09Jy8nKXtpZigodG1wPXN0YXRlLnBvcCgpKVswXSE9PVJuWzNdKSB0aHJvdyBcIkJhZCBzdGF0ZTogXCIrdG1wO31cblx0XHRcdFx0ZWxzZSBpZihSblswXS5jaGFyQXQoUm5bMF0ubGVuZ3RoLTIpICE9PSAnLycpIHN0YXRlLnB1c2goW1JuWzNdLCB0cnVlXSk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdhbm5vdGF0aW9uJzogLy8gMTQuMSA8b2ZmaWNlOmFubm90YXRpb24+XG5cdFx0XHRcdGlmKFJuWzFdPT09Jy8nKXtcblx0XHRcdFx0XHRpZigodG1wPXN0YXRlLnBvcCgpKVswXSE9PVJuWzNdKSB0aHJvdyBcIkJhZCBzdGF0ZTogXCIrdG1wO1xuXHRcdFx0XHRcdGNvbW1lbnQudCA9IHRleHRwO1xuXHRcdFx0XHRcdGlmKHRleHRSLmxlbmd0aCkgY29tbWVudC5SID0gdGV4dFI7XG5cdFx0XHRcdFx0Y29tbWVudC5hID0gY3JlYXRvcjtcblx0XHRcdFx0XHRjb21tZW50cy5wdXNoKGNvbW1lbnQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgaWYoUm5bMF0uY2hhckF0KFJuWzBdLmxlbmd0aC0yKSAhPT0gJy8nKSB7c3RhdGUucHVzaChbUm5bM10sIGZhbHNlXSk7fVxuXHRcdFx0XHRjcmVhdG9yID0gXCJcIjsgY3JlYXRvcmlkeCA9IDA7XG5cdFx0XHRcdHRleHRwID0gXCJcIjsgdGV4dHBpZHggPSAwOyB0ZXh0UiA9IFtdO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnY3JlYXRvcic6IC8vIDQuMy4yLjcgPGRjOmNyZWF0b3I+XG5cdFx0XHRcdGlmKFJuWzFdPT09Jy8nKSB7IGNyZWF0b3IgPSBzdHIuc2xpY2UoY3JlYXRvcmlkeCxSbi5pbmRleCk7IH1cblx0XHRcdFx0ZWxzZSBjcmVhdG9yaWR4ID0gUm4uaW5kZXggKyBSblswXS5sZW5ndGg7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHQvKiBpZ25vcmUgc3RhdGUgKi9cblx0XHRcdGNhc2UgJ21ldGEnOiBjYXNlICflhYPmlbDmja4nOiAvLyBUT0RPOiA8b2ZmaWNlOm1ldGE+IDx1b2Y65YWD5pWw5o2uPiBGT0RTL1VPRlxuXHRcdFx0Y2FzZSAnc2V0dGluZ3MnOiAvLyBUT0RPOiA8b2ZmaWNlOnNldHRpbmdzPlxuXHRcdFx0Y2FzZSAnY29uZmlnLWl0ZW0tc2V0JzogLy8gVE9ETzogPG9mZmljZTpjb25maWctaXRlbS1zZXQ+XG5cdFx0XHRjYXNlICdjb25maWctaXRlbS1tYXAtaW5kZXhlZCc6IC8vIFRPRE86IDxvZmZpY2U6Y29uZmlnLWl0ZW0tbWFwLWluZGV4ZWQ+XG5cdFx0XHRjYXNlICdjb25maWctaXRlbS1tYXAtZW50cnknOiAvLyBUT0RPOiA8b2ZmaWNlOmNvbmZpZy1pdGVtLW1hcC1lbnRyeT5cblx0XHRcdGNhc2UgJ2NvbmZpZy1pdGVtLW1hcC1uYW1lZCc6IC8vIFRPRE86IDxvZmZpY2U6Y29uZmlnLWl0ZW0tbWFwLWVudHJ5PlxuXHRcdFx0Y2FzZSAnc2hhcGVzJzogLy8gOS4yLjggPHRhYmxlOnNoYXBlcz5cblx0XHRcdGNhc2UgJ2ZyYW1lJzogLy8gMTAuNC4yIDxkcmF3OmZyYW1lPlxuXHRcdFx0Y2FzZSAndGV4dC1ib3gnOiAvLyAxMC40LjMgPGRyYXc6dGV4dC1ib3g+XG5cdFx0XHRjYXNlICdpbWFnZSc6IC8vIDEwLjQuNCA8ZHJhdzppbWFnZT5cblx0XHRcdGNhc2UgJ2RhdGEtcGlsb3QtdGFibGVzJzogLy8gOS42LjIgPHRhYmxlOmRhdGEtcGlsb3QtdGFibGVzPlxuXHRcdFx0Y2FzZSAnbGlzdC1zdHlsZSc6IC8vIDE2LjMwIDx0ZXh0Omxpc3Qtc3R5bGU+XG5cdFx0XHRjYXNlICdmb3JtJzogLy8gMTMuMTMgPGZvcm06Zm9ybT5cblx0XHRcdGNhc2UgJ2RkZS1saW5rcyc6IC8vIDkuOCA8dGFibGU6ZGRlLWxpbmtzPlxuXHRcdFx0Y2FzZSAnZXZlbnQtbGlzdGVuZXJzJzogLy8gVE9ET1xuXHRcdFx0Y2FzZSAnY2hhcnQnOiAvLyBUT0RPXG5cdFx0XHRcdGlmKFJuWzFdPT09Jy8nKXtpZigodG1wPXN0YXRlLnBvcCgpKVswXSE9PVJuWzNdKSB0aHJvdyBcIkJhZCBzdGF0ZTogXCIrdG1wO31cblx0XHRcdFx0ZWxzZSBpZihSblswXS5jaGFyQXQoUm5bMF0ubGVuZ3RoLTIpICE9PSAnLycpIHN0YXRlLnB1c2goW1JuWzNdLCBmYWxzZV0pO1xuXHRcdFx0XHR0ZXh0cCA9IFwiXCI7IHRleHRwaWR4ID0gMDsgdGV4dFIgPSBbXTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ3NjaWVudGlmaWMtbnVtYmVyJzogLy8gVE9ETzogPG51bWJlcjpzY2llbnRpZmljLW51bWJlcj5cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdjdXJyZW5jeS1zeW1ib2wnOiAvLyBUT0RPOiA8bnVtYmVyOmN1cnJlbmN5LXN5bWJvbD5cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdjdXJyZW5jeS1zdHlsZSc6IC8vIFRPRE86IDxudW1iZXI6Y3VycmVuY3ktc3R5bGU+XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnbnVtYmVyLXN0eWxlJzogLy8gMTYuMjcuMiA8bnVtYmVyOm51bWJlci1zdHlsZT5cblx0XHRcdGNhc2UgJ3BlcmNlbnRhZ2Utc3R5bGUnOiAvLyAxNi4yNy45IDxudW1iZXI6cGVyY2VudGFnZS1zdHlsZT5cblx0XHRcdGNhc2UgJ2RhdGUtc3R5bGUnOiAvLyAxNi4yNy4xMCA8bnVtYmVyOmRhdGUtc3R5bGU+XG5cdFx0XHRjYXNlICd0aW1lLXN0eWxlJzogLy8gMTYuMjcuMTggPG51bWJlcjp0aW1lLXN0eWxlPlxuXHRcdFx0XHRpZihSblsxXT09PScvJyl7XG5cdFx0XHRcdFx0bnVtYmVyX2Zvcm1hdF9tYXBbTkZ0YWcubmFtZV0gPSBORjtcblx0XHRcdFx0XHRpZigodG1wPXN0YXRlLnBvcCgpKVswXSE9PVJuWzNdKSB0aHJvdyBcIkJhZCBzdGF0ZTogXCIrdG1wO1xuXHRcdFx0XHR9IGVsc2UgaWYoUm5bMF0uY2hhckF0KFJuWzBdLmxlbmd0aC0yKSAhPT0gJy8nKSB7XG5cdFx0XHRcdFx0TkYgPSBcIlwiO1xuXHRcdFx0XHRcdE5GdGFnID0gcGFyc2V4bWx0YWcoUm5bMF0sIGZhbHNlKTtcblx0XHRcdFx0XHRzdGF0ZS5wdXNoKFtSblszXSwgdHJ1ZV0pO1xuXHRcdFx0XHR9IGJyZWFrO1xuXG5cdFx0XHRjYXNlICdzY3JpcHQnOiBicmVhazsgLy8gMy4xMyA8b2ZmaWNlOnNjcmlwdD5cblx0XHRcdGNhc2UgJ2xpYnJhcmllcyc6IGJyZWFrOyAvLyBUT0RPOiA8b29vOmxpYnJhcmllcz5cblx0XHRcdGNhc2UgJ2F1dG9tYXRpYy1zdHlsZXMnOiBicmVhazsgLy8gMy4xNS4zIDxvZmZpY2U6YXV0b21hdGljLXN0eWxlcz5cblxuXHRcdFx0Y2FzZSAnZGVmYXVsdC1zdHlsZSc6IC8vIFRPRE86IDxzdHlsZTpkZWZhdWx0LXN0eWxlPlxuXHRcdFx0Y2FzZSAncGFnZS1sYXlvdXQnOiBicmVhazsgLy8gVE9ETzogPHN0eWxlOnBhZ2UtbGF5b3V0PlxuXHRcdFx0Y2FzZSAnc3R5bGUnOiAvLyAxNi4yIDxzdHlsZTpzdHlsZT5cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdtYXAnOiBicmVhazsgLy8gMTYuMyA8c3R5bGU6bWFwPlxuXHRcdFx0Y2FzZSAnZm9udC1mYWNlJzogYnJlYWs7IC8vIDE2LjIxIDxzdHlsZTpmb250LWZhY2U+XG5cblx0XHRcdGNhc2UgJ3BhcmFncmFwaC1wcm9wZXJ0aWVzJzogYnJlYWs7IC8vIDE3LjYgPHN0eWxlOnBhcmFncmFwaC1wcm9wZXJ0aWVzPlxuXHRcdFx0Y2FzZSAndGFibGUtcHJvcGVydGllcyc6IGJyZWFrOyAvLyAxNy4xNSA8c3R5bGU6dGFibGUtcHJvcGVydGllcz5cblx0XHRcdGNhc2UgJ3RhYmxlLWNvbHVtbi1wcm9wZXJ0aWVzJzogYnJlYWs7IC8vIDE3LjE2IDxzdHlsZTp0YWJsZS1jb2x1bW4tcHJvcGVydGllcz5cblx0XHRcdGNhc2UgJ3RhYmxlLXJvdy1wcm9wZXJ0aWVzJzogYnJlYWs7IC8vIDE3LjE3IDxzdHlsZTp0YWJsZS1yb3ctcHJvcGVydGllcz5cblx0XHRcdGNhc2UgJ3RhYmxlLWNlbGwtcHJvcGVydGllcyc6IGJyZWFrOyAvLyAxNy4xOCA8c3R5bGU6dGFibGUtY2VsbC1wcm9wZXJ0aWVzPlxuXG5cdFx0XHRjYXNlICdudW1iZXInOiAvLyAxNi4yNy4zIDxudW1iZXI6bnVtYmVyPlxuXHRcdFx0XHRzd2l0Y2goc3RhdGVbc3RhdGUubGVuZ3RoLTFdWzBdKSB7XG5cdFx0XHRcdFx0Y2FzZSAndGltZS1zdHlsZSc6XG5cdFx0XHRcdFx0Y2FzZSAnZGF0ZS1zdHlsZSc6XG5cdFx0XHRcdFx0XHR0YWcgPSBwYXJzZXhtbHRhZyhSblswXSwgZmFsc2UpO1xuXHRcdFx0XHRcdFx0TkYgKz0gbnVtYmVyX2Zvcm1hdHNbUm5bM11dW3RhZy5zdHlsZT09PSdsb25nJz8xOjBdOyBicmVhaztcblx0XHRcdFx0fSBicmVhaztcblxuXHRcdFx0Y2FzZSAnZnJhY3Rpb24nOiBicmVhazsgLy8gVE9ETyAxNi4yNy42IDxudW1iZXI6ZnJhY3Rpb24+XG5cblx0XHRcdGNhc2UgJ2RheSc6IC8vIDE2LjI3LjExIDxudW1iZXI6ZGF5PlxuXHRcdFx0Y2FzZSAnbW9udGgnOiAvLyAxNi4yNy4xMiA8bnVtYmVyOm1vbnRoPlxuXHRcdFx0Y2FzZSAneWVhcic6IC8vIDE2LjI3LjEzIDxudW1iZXI6eWVhcj5cblx0XHRcdGNhc2UgJ2VyYSc6IC8vIDE2LjI3LjE0IDxudW1iZXI6ZXJhPlxuXHRcdFx0Y2FzZSAnZGF5LW9mLXdlZWsnOiAvLyAxNi4yNy4xNSA8bnVtYmVyOmRheS1vZi13ZWVrPlxuXHRcdFx0Y2FzZSAnd2Vlay1vZi15ZWFyJzogLy8gMTYuMjcuMTYgPG51bWJlcjp3ZWVrLW9mLXllYXI+XG5cdFx0XHRjYXNlICdxdWFydGVyJzogLy8gMTYuMjcuMTcgPG51bWJlcjpxdWFydGVyPlxuXHRcdFx0Y2FzZSAnaG91cnMnOiAvLyAxNi4yNy4xOSA8bnVtYmVyOmhvdXJzPlxuXHRcdFx0Y2FzZSAnbWludXRlcyc6IC8vIDE2LjI3LjIwIDxudW1iZXI6bWludXRlcz5cblx0XHRcdGNhc2UgJ3NlY29uZHMnOiAvLyAxNi4yNy4yMSA8bnVtYmVyOnNlY29uZHM+XG5cdFx0XHRjYXNlICdhbS1wbSc6IC8vIDE2LjI3LjIyIDxudW1iZXI6YW0tcG0+XG5cdFx0XHRcdHN3aXRjaChzdGF0ZVtzdGF0ZS5sZW5ndGgtMV1bMF0pIHtcblx0XHRcdFx0XHRjYXNlICd0aW1lLXN0eWxlJzpcblx0XHRcdFx0XHRjYXNlICdkYXRlLXN0eWxlJzpcblx0XHRcdFx0XHRcdHRhZyA9IHBhcnNleG1sdGFnKFJuWzBdLCBmYWxzZSk7XG5cdFx0XHRcdFx0XHRORiArPSBudW1iZXJfZm9ybWF0c1tSblszXV1bdGFnLnN0eWxlPT09J2xvbmcnPzE6MF07IGJyZWFrO1xuXHRcdFx0XHR9IGJyZWFrO1xuXG5cdFx0XHRjYXNlICdib29sZWFuLXN0eWxlJzogYnJlYWs7IC8vIDE2LjI3LjIzIDxudW1iZXI6Ym9vbGVhbi1zdHlsZT5cblx0XHRcdGNhc2UgJ2Jvb2xlYW4nOiBicmVhazsgLy8gMTYuMjcuMjQgPG51bWJlcjpib29sZWFuPlxuXHRcdFx0Y2FzZSAndGV4dC1zdHlsZSc6IGJyZWFrOyAvLyAxNi4yNy4yNSA8bnVtYmVyOnRleHQtc3R5bGU+XG5cdFx0XHRjYXNlICd0ZXh0JzogLy8gMTYuMjcuMjYgPG51bWJlcjp0ZXh0PlxuXHRcdFx0XHRpZihSblswXS5zbGljZSgtMikgPT09IFwiLz5cIikgYnJlYWs7XG5cdFx0XHRcdGVsc2UgaWYoUm5bMV09PT1cIi9cIikgc3dpdGNoKHN0YXRlW3N0YXRlLmxlbmd0aC0xXVswXSkge1xuXHRcdFx0XHRcdGNhc2UgJ251bWJlci1zdHlsZSc6XG5cdFx0XHRcdFx0Y2FzZSAnZGF0ZS1zdHlsZSc6XG5cdFx0XHRcdFx0Y2FzZSAndGltZS1zdHlsZSc6XG5cdFx0XHRcdFx0XHRORiArPSBzdHIuc2xpY2UocGlkeCwgUm4uaW5kZXgpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBwaWR4ID0gUm4uaW5kZXggKyBSblswXS5sZW5ndGg7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICduYW1lZC1yYW5nZSc6IC8vIDkuNC4xMiA8dGFibGU6bmFtZWQtcmFuZ2U+XG5cdFx0XHRcdHRhZyA9IHBhcnNleG1sdGFnKFJuWzBdLCBmYWxzZSk7XG5cdFx0XHRcdF9SZWYgPSBvZHNfdG9fY3NmXzNEKHRhZ1snY2VsbC1yYW5nZS1hZGRyZXNzJ10pO1xuXHRcdFx0XHR2YXIgbnJhbmdlID0gKHtOYW1lOnRhZy5uYW1lLCBSZWY6X1JlZlswXSArICchJyArIF9SZWZbMV19KTtcblx0XHRcdFx0aWYoaW50YWJsZSkgbnJhbmdlLlNoZWV0ID0gU2hlZXROYW1lcy5sZW5ndGg7XG5cdFx0XHRcdFdCLk5hbWVzLnB1c2gobnJhbmdlKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ3RleHQtY29udGVudCc6IGJyZWFrOyAvLyAxNi4yNy4yNyA8bnVtYmVyOnRleHQtY29udGVudD5cblx0XHRcdGNhc2UgJ3RleHQtcHJvcGVydGllcyc6IGJyZWFrOyAvLyAxNi4yNy4yNyA8c3R5bGU6dGV4dC1wcm9wZXJ0aWVzPlxuXHRcdFx0Y2FzZSAnZW1iZWRkZWQtdGV4dCc6IGJyZWFrOyAvLyAxNi4yNy40IDxudW1iZXI6ZW1iZWRkZWQtdGV4dD5cblxuXHRcdFx0Y2FzZSAnYm9keSc6IGNhc2UgJ+eUteWtkOihqOagvCc6IGJyZWFrOyAvLyAzLjMgMTYuOS42IDE5LjcyNi4zXG5cblx0XHRcdGNhc2UgJ2Zvcm1zJzogYnJlYWs7IC8vIDEyLjI1LjIgMTMuMlxuXHRcdFx0Y2FzZSAndGFibGUtY29sdW1uJzogYnJlYWs7IC8vIDkuMS42IDx0YWJsZTp0YWJsZS1jb2x1bW4+XG5cdFx0XHRjYXNlICd0YWJsZS1oZWFkZXItcm93cyc6IGJyZWFrOyAvLyA5LjEuNyA8dGFibGU6dGFibGUtaGVhZGVyLXJvd3M+XG5cdFx0XHRjYXNlICd0YWJsZS1yb3dzJzogYnJlYWs7IC8vIDkuMS4xMiA8dGFibGU6dGFibGUtcm93cz5cblx0XHRcdC8qIFRPRE86IG91dGxpbmUgbGV2ZWxzICovXG5cdFx0XHRjYXNlICd0YWJsZS1jb2x1bW4tZ3JvdXAnOiBicmVhazsgLy8gOS4xLjEwIDx0YWJsZTp0YWJsZS1jb2x1bW4tZ3JvdXA+XG5cdFx0XHRjYXNlICd0YWJsZS1oZWFkZXItY29sdW1ucyc6IGJyZWFrOyAvLyA5LjEuMTEgPHRhYmxlOnRhYmxlLWhlYWRlci1jb2x1bW5zPlxuXHRcdFx0Y2FzZSAndGFibGUtY29sdW1ucyc6IGJyZWFrOyAvLyA5LjEuMTIgPHRhYmxlOnRhYmxlLWNvbHVtbnM+XG5cblx0XHRcdGNhc2UgJ251bGwtZGF0ZSc6IGJyZWFrOyAvLyA5LjQuMiA8dGFibGU6bnVsbC1kYXRlPiBUT0RPOiBkYXRlMTkwNFxuXG5cdFx0XHRjYXNlICdncmFwaGljLXByb3BlcnRpZXMnOiBicmVhazsgLy8gMTcuMjEgPHN0eWxlOmdyYXBoaWMtcHJvcGVydGllcz5cblx0XHRcdGNhc2UgJ2NhbGN1bGF0aW9uLXNldHRpbmdzJzogYnJlYWs7IC8vIDkuNC4xIDx0YWJsZTpjYWxjdWxhdGlvbi1zZXR0aW5ncz5cblx0XHRcdGNhc2UgJ25hbWVkLWV4cHJlc3Npb25zJzogYnJlYWs7IC8vIDkuNC4xMSA8dGFibGU6bmFtZWQtZXhwcmVzc2lvbnM+XG5cdFx0XHRjYXNlICdsYWJlbC1yYW5nZSc6IGJyZWFrOyAvLyA5LjQuOSA8dGFibGU6bGFiZWwtcmFuZ2U+XG5cdFx0XHRjYXNlICdsYWJlbC1yYW5nZXMnOiBicmVhazsgLy8gOS40LjEwIDx0YWJsZTpsYWJlbC1yYW5nZXM+XG5cdFx0XHRjYXNlICduYW1lZC1leHByZXNzaW9uJzogYnJlYWs7IC8vIDkuNC4xMyA8dGFibGU6bmFtZWQtZXhwcmVzc2lvbj5cblx0XHRcdGNhc2UgJ3NvcnQnOiBicmVhazsgLy8gOS40LjE5IDx0YWJsZTpzb3J0PlxuXHRcdFx0Y2FzZSAnc29ydC1ieSc6IGJyZWFrOyAvLyA5LjQuMjAgPHRhYmxlOnNvcnQtYnk+XG5cdFx0XHRjYXNlICdzb3J0LWdyb3Vwcyc6IGJyZWFrOyAvLyA5LjQuMjIgPHRhYmxlOnNvcnQtZ3JvdXBzPlxuXG5cdFx0XHRjYXNlICd0YWInOiBicmVhazsgLy8gNi4xLjQgPHRleHQ6dGFiPlxuXHRcdFx0Y2FzZSAnbGluZS1icmVhayc6IGJyZWFrOyAvLyA2LjEuNSA8dGV4dDpsaW5lLWJyZWFrPlxuXHRcdFx0Y2FzZSAnc3Bhbic6IGJyZWFrOyAvLyA2LjEuNyA8dGV4dDpzcGFuPlxuXHRcdFx0Y2FzZSAncCc6IGNhc2UgJ+aWh+acrOS4sic6IC8vIDUuMS4zIDx0ZXh0OnA+XG5cdFx0XHRcdGlmKFsnbWFzdGVyLXN0eWxlcyddLmluZGV4T2Yoc3RhdGVbc3RhdGUubGVuZ3RoLTFdWzBdKSA+IC0xKSBicmVhaztcblx0XHRcdFx0aWYoUm5bMV09PT0nLycgJiYgKCFjdGFnIHx8ICFjdGFnWydzdHJpbmctdmFsdWUnXSkpIHtcblx0XHRcdFx0XHR2YXIgcHRwID0gcGFyc2VfdGV4dF9wKHN0ci5zbGljZSh0ZXh0cGlkeCxSbi5pbmRleCksIHRleHRwdGFnKTtcblx0XHRcdFx0XHR0ZXh0cCA9ICh0ZXh0cC5sZW5ndGggPiAwID8gdGV4dHAgKyBcIlxcblwiIDogXCJcIikgKyBwdHBbMF07XG5cdFx0XHRcdH0gZWxzZSB7IHRleHRwdGFnID0gcGFyc2V4bWx0YWcoUm5bMF0sIGZhbHNlKTsgdGV4dHBpZHggPSBSbi5pbmRleCArIFJuWzBdLmxlbmd0aDsgfVxuXHRcdFx0XHRicmVhazsgLy8gPHRleHQ6cD5cblx0XHRcdGNhc2UgJ3MnOiBicmVhazsgLy8gPHRleHQ6cz5cblxuXHRcdFx0Y2FzZSAnZGF0YWJhc2UtcmFuZ2UnOiAvLyA5LjQuMTUgPHRhYmxlOmRhdGFiYXNlLXJhbmdlPlxuXHRcdFx0XHRpZihSblsxXT09PScvJykgYnJlYWs7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0X1JlZiA9IG9kc190b19jc2ZfM0QocGFyc2V4bWx0YWcoUm5bMF0pWyd0YXJnZXQtcmFuZ2UtYWRkcmVzcyddKTtcblx0XHRcdFx0XHRTaGVldHNbX1JlZlswXV1bJyFhdXRvZmlsdGVyJ10gPSB7IHJlZjpfUmVmWzFdIH07XG5cdFx0XHRcdH0gY2F0Y2goZSkgey8qIGVtcHR5ICovfVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnZGF0ZSc6IGJyZWFrOyAvLyA8KjpkYXRlPlxuXG5cdFx0XHRjYXNlICdvYmplY3QnOiBicmVhazsgLy8gMTAuNC42LjIgPGRyYXc6b2JqZWN0PlxuXHRcdFx0Y2FzZSAndGl0bGUnOiBjYXNlICfmoIfpopgnOiBicmVhazsgLy8gPCo6dGl0bGU+IE9SIDx1b2Y65qCH6aKYPlxuXHRcdFx0Y2FzZSAnZGVzYyc6IGJyZWFrOyAvLyA8KjpkZXNjPlxuXHRcdFx0Y2FzZSAnYmluYXJ5LWRhdGEnOiBicmVhazsgLy8gMTAuNC41IFRPRE86IGI2NCBibG9iXG5cblx0XHRcdC8qIDkuMiBBZHZhbmNlZCBUYWJsZXMgKi9cblx0XHRcdGNhc2UgJ3RhYmxlLXNvdXJjZSc6IGJyZWFrOyAvLyA5LjIuNlxuXHRcdFx0Y2FzZSAnc2NlbmFyaW8nOiBicmVhazsgLy8gOS4yLjZcblxuXHRcdFx0Y2FzZSAnaXRlcmF0aW9uJzogYnJlYWs7IC8vIDkuNC4zIDx0YWJsZTppdGVyYXRpb24+XG5cdFx0XHRjYXNlICdjb250ZW50LXZhbGlkYXRpb25zJzogYnJlYWs7IC8vIDkuNC40IDx0YWJsZTpcblx0XHRcdGNhc2UgJ2NvbnRlbnQtdmFsaWRhdGlvbic6IGJyZWFrOyAvLyA5LjQuNSA8dGFibGU6XG5cdFx0XHRjYXNlICdoZWxwLW1lc3NhZ2UnOiBicmVhazsgLy8gOS40LjYgPHRhYmxlOlxuXHRcdFx0Y2FzZSAnZXJyb3ItbWVzc2FnZSc6IGJyZWFrOyAvLyA5LjQuNyA8dGFibGU6XG5cdFx0XHRjYXNlICdkYXRhYmFzZS1yYW5nZXMnOiBicmVhazsgLy8gOS40LjE0IDx0YWJsZTpkYXRhYmFzZS1yYW5nZXM+XG5cdFx0XHRjYXNlICdmaWx0ZXInOiBicmVhazsgLy8gOS41LjIgPHRhYmxlOmZpbHRlcj5cblx0XHRcdGNhc2UgJ2ZpbHRlci1hbmQnOiBicmVhazsgLy8gOS41LjMgPHRhYmxlOmZpbHRlci1hbmQ+XG5cdFx0XHRjYXNlICdmaWx0ZXItb3InOiBicmVhazsgLy8gOS41LjQgPHRhYmxlOmZpbHRlci1vcj5cblx0XHRcdGNhc2UgJ2ZpbHRlci1jb25kaXRpb24nOiBicmVhazsgLy8gOS41LjUgPHRhYmxlOmZpbHRlci1jb25kaXRpb24+XG5cblx0XHRcdGNhc2UgJ2xpc3QtbGV2ZWwtc3R5bGUtYnVsbGV0JzogYnJlYWs7IC8vIDE2LjMxIDx0ZXh0OlxuXHRcdFx0Y2FzZSAnbGlzdC1sZXZlbC1zdHlsZS1udW1iZXInOiBicmVhazsgLy8gMTYuMzIgPHRleHQ6XG5cdFx0XHRjYXNlICdsaXN0LWxldmVsLXByb3BlcnRpZXMnOiBicmVhazsgLy8gMTcuMTkgPHN0eWxlOlxuXG5cdFx0XHQvKiA3LjMgRG9jdW1lbnQgRmllbGRzICovXG5cdFx0XHRjYXNlICdzZW5kZXItZmlyc3RuYW1lJzogLy8gNy4zLjYuMlxuXHRcdFx0Y2FzZSAnc2VuZGVyLWxhc3RuYW1lJzogLy8gNy4zLjYuM1xuXHRcdFx0Y2FzZSAnc2VuZGVyLWluaXRpYWxzJzogLy8gNy4zLjYuNFxuXHRcdFx0Y2FzZSAnc2VuZGVyLXRpdGxlJzogLy8gNy4zLjYuNVxuXHRcdFx0Y2FzZSAnc2VuZGVyLXBvc2l0aW9uJzogLy8gNy4zLjYuNlxuXHRcdFx0Y2FzZSAnc2VuZGVyLWVtYWlsJzogLy8gNy4zLjYuN1xuXHRcdFx0Y2FzZSAnc2VuZGVyLXBob25lLXByaXZhdGUnOiAvLyA3LjMuNi44XG5cdFx0XHRjYXNlICdzZW5kZXItZmF4JzogLy8gNy4zLjYuOVxuXHRcdFx0Y2FzZSAnc2VuZGVyLWNvbXBhbnknOiAvLyA3LjMuNi4xMFxuXHRcdFx0Y2FzZSAnc2VuZGVyLXBob25lLXdvcmsnOiAvLyA3LjMuNi4xMVxuXHRcdFx0Y2FzZSAnc2VuZGVyLXN0cmVldCc6IC8vIDcuMy42LjEyXG5cdFx0XHRjYXNlICdzZW5kZXItY2l0eSc6IC8vIDcuMy42LjEzXG5cdFx0XHRjYXNlICdzZW5kZXItcG9zdGFsLWNvZGUnOiAvLyA3LjMuNi4xNFxuXHRcdFx0Y2FzZSAnc2VuZGVyLWNvdW50cnknOiAvLyA3LjMuNi4xNVxuXHRcdFx0Y2FzZSAnc2VuZGVyLXN0YXRlLW9yLXByb3ZpbmNlJzogLy8gNy4zLjYuMTZcblx0XHRcdGNhc2UgJ2F1dGhvci1uYW1lJzogLy8gNy4zLjcuMVxuXHRcdFx0Y2FzZSAnYXV0aG9yLWluaXRpYWxzJzogLy8gNy4zLjcuMlxuXHRcdFx0Y2FzZSAnY2hhcHRlcic6IC8vIDcuMy44XG5cdFx0XHRjYXNlICdmaWxlLW5hbWUnOiAvLyA3LjMuOVxuXHRcdFx0Y2FzZSAndGVtcGxhdGUtbmFtZSc6IC8vIDcuMy45XG5cdFx0XHRjYXNlICdzaGVldC1uYW1lJzogLy8gNy4zLjlcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ2V2ZW50LWxpc3RlbmVyJzpcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHQvKiBUT0RPOiBGT0RTIFByb3BlcnRpZXMgKi9cblx0XHRcdGNhc2UgJ2luaXRpYWwtY3JlYXRvcic6XG5cdFx0XHRjYXNlICdjcmVhdGlvbi1kYXRlJzpcblx0XHRcdGNhc2UgJ3ByaW50LWRhdGUnOlxuXHRcdFx0Y2FzZSAnZ2VuZXJhdG9yJzpcblx0XHRcdGNhc2UgJ2RvY3VtZW50LXN0YXRpc3RpYyc6XG5cdFx0XHRjYXNlICd1c2VyLWRlZmluZWQnOlxuXHRcdFx0Y2FzZSAnZWRpdGluZy1kdXJhdGlvbic6XG5cdFx0XHRjYXNlICdlZGl0aW5nLWN5Y2xlcyc6XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHQvKiBUT0RPOiBGT0RTIENvbmZpZyAqL1xuXHRcdFx0Y2FzZSAnY29uZmlnLWl0ZW0nOlxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0LyogVE9ETzogc3R5bGUgdG9rZW5zICovXG5cdFx0XHRjYXNlICdwYWdlLW51bWJlcic6IGJyZWFrOyAvLyBUT0RPIDx0ZXh0OnBhZ2UtbnVtYmVyPlxuXHRcdFx0Y2FzZSAncGFnZS1jb3VudCc6IGJyZWFrOyAvLyBUT0RPIDx0ZXh0OnBhZ2UtY291bnQ+XG5cdFx0XHRjYXNlICd0aW1lJzogYnJlYWs7IC8vIFRPRE8gPHRleHQ6dGltZT5cblxuXHRcdFx0LyogOS4zIEFkdmFuY2VkIFRhYmxlIENlbGxzICovXG5cdFx0XHRjYXNlICdjZWxsLXJhbmdlLXNvdXJjZSc6IGJyZWFrOyAvLyA5LjMuMSA8dGFibGU6XG5cdFx0XHRjYXNlICdkZXRlY3RpdmUnOiBicmVhazsgLy8gOS4zLjIgPHRhYmxlOlxuXHRcdFx0Y2FzZSAnb3BlcmF0aW9uJzogYnJlYWs7IC8vIDkuMy4zIDx0YWJsZTpcblx0XHRcdGNhc2UgJ2hpZ2hsaWdodGVkLXJhbmdlJzogYnJlYWs7IC8vIDkuMy40IDx0YWJsZTpcblxuXHRcdFx0LyogOS42IERhdGEgUGlsb3QgVGFibGVzIDx0YWJsZTogKi9cblx0XHRcdGNhc2UgJ2RhdGEtcGlsb3QtdGFibGUnOiAvLyA5LjYuM1xuXHRcdFx0Y2FzZSAnc291cmNlLWNlbGwtcmFuZ2UnOiAvLyA5LjYuNVxuXHRcdFx0Y2FzZSAnc291cmNlLXNlcnZpY2UnOiAvLyA5LjYuNlxuXHRcdFx0Y2FzZSAnZGF0YS1waWxvdC1maWVsZCc6IC8vIDkuNi43XG5cdFx0XHRjYXNlICdkYXRhLXBpbG90LWxldmVsJzogLy8gOS42Ljhcblx0XHRcdGNhc2UgJ2RhdGEtcGlsb3Qtc3VidG90YWxzJzogLy8gOS42Ljlcblx0XHRcdGNhc2UgJ2RhdGEtcGlsb3Qtc3VidG90YWwnOiAvLyA5LjYuMTBcblx0XHRcdGNhc2UgJ2RhdGEtcGlsb3QtbWVtYmVycyc6IC8vIDkuNi4xMVxuXHRcdFx0Y2FzZSAnZGF0YS1waWxvdC1tZW1iZXInOiAvLyA5LjYuMTJcblx0XHRcdGNhc2UgJ2RhdGEtcGlsb3QtZGlzcGxheS1pbmZvJzogLy8gOS42LjEzXG5cdFx0XHRjYXNlICdkYXRhLXBpbG90LXNvcnQtaW5mbyc6IC8vIDkuNi4xNFxuXHRcdFx0Y2FzZSAnZGF0YS1waWxvdC1sYXlvdXQtaW5mbyc6IC8vIDkuNi4xNVxuXHRcdFx0Y2FzZSAnZGF0YS1waWxvdC1maWVsZC1yZWZlcmVuY2UnOiAvLyA5LjYuMTZcblx0XHRcdGNhc2UgJ2RhdGEtcGlsb3QtZ3JvdXBzJzogLy8gOS42LjE3XG5cdFx0XHRjYXNlICdkYXRhLXBpbG90LWdyb3VwJzogLy8gOS42LjE4XG5cdFx0XHRjYXNlICdkYXRhLXBpbG90LWdyb3VwLW1lbWJlcic6IC8vIDkuNi4xOVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0LyogMTAuMyBEcmF3aW5nIFNoYXBlcyAqL1xuXHRcdFx0Y2FzZSAncmVjdCc6IC8vIDEwLjMuMlxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0LyogMTQuNiBEREUgQ29ubmVjdGlvbnMgKi9cblx0XHRcdGNhc2UgJ2RkZS1jb25uZWN0aW9uLWRlY2xzJzogLy8gMTQuNi4yIDx0ZXh0OlxuXHRcdFx0Y2FzZSAnZGRlLWNvbm5lY3Rpb24tZGVjbCc6IC8vIDE0LjYuMyA8dGV4dDpcblx0XHRcdGNhc2UgJ2RkZS1saW5rJzogLy8gMTQuNi40IDx0YWJsZTpcblx0XHRcdGNhc2UgJ2RkZS1zb3VyY2UnOiAvLyAxNC42LjUgPG9mZmljZTpcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ3Byb3BlcnRpZXMnOiBicmVhazsgLy8gMTMuNyA8Zm9ybTpwcm9wZXJ0aWVzPlxuXHRcdFx0Y2FzZSAncHJvcGVydHknOiBicmVhazsgLy8gMTMuOCA8Zm9ybTpwcm9wZXJ0eT5cblxuXHRcdFx0Y2FzZSAnYSc6IC8vIDYuMS44IGh5cGVybGlua1xuXHRcdFx0XHRpZihSblsxXSE9PSAnLycpIHtcblx0XHRcdFx0XHRhdGFnID0gcGFyc2V4bWx0YWcoUm5bMF0sIGZhbHNlKTtcblx0XHRcdFx0XHRpZighYXRhZy5ocmVmKSBicmVhaztcblx0XHRcdFx0XHRhdGFnLlRhcmdldCA9IHVuZXNjYXBleG1sKGF0YWcuaHJlZik7IGRlbGV0ZSBhdGFnLmhyZWY7XG5cdFx0XHRcdFx0aWYoYXRhZy5UYXJnZXQuY2hhckF0KDApID09IFwiI1wiICYmIGF0YWcuVGFyZ2V0LmluZGV4T2YoXCIuXCIpID4gLTEpIHtcblx0XHRcdFx0XHRcdF9SZWYgPSBvZHNfdG9fY3NmXzNEKGF0YWcuVGFyZ2V0LnNsaWNlKDEpKTtcblx0XHRcdFx0XHRcdGF0YWcuVGFyZ2V0ID0gXCIjXCIgKyBfUmVmWzBdICsgXCIhXCIgKyBfUmVmWzFdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZihhdGFnLlRhcmdldC5tYXRjaCgvXlxcLlxcLltcXFxcXFwvXS8pKSBhdGFnLlRhcmdldCA9IGF0YWcuVGFyZ2V0LnNsaWNlKDMpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHQvKiBub24tc3RhbmRhcmQgKi9cblx0XHRcdGNhc2UgJ3RhYmxlLXByb3RlY3Rpb24nOiBicmVhaztcblx0XHRcdGNhc2UgJ2RhdGEtcGlsb3QtZ3JhbmQtdG90YWwnOiBicmVhazsgLy8gPHRhYmxlOlxuXHRcdFx0Y2FzZSAnb2ZmaWNlLWRvY3VtZW50LWNvbW1vbi1hdHRycyc6IGJyZWFrOyAvLyBiYXJlXG5cdFx0XHRkZWZhdWx0OiBzd2l0Y2goUm5bMl0pIHtcblx0XHRcdFx0Y2FzZSAnZGM6JzogICAgICAgLy8gVE9ETzogcHJvcGVydGllc1xuXHRcdFx0XHRjYXNlICdjYWxjZXh0Oic6ICAvLyBpZ25vcmUgdW5kb2N1bWVudGVkIGV4dGVuc2lvbnNcblx0XHRcdFx0Y2FzZSAnbG9leHQ6JzogICAgLy8gaWdub3JlIHVuZG9jdW1lbnRlZCBleHRlbnNpb25zXG5cdFx0XHRcdGNhc2UgJ29vbzonOiAgICAgIC8vIGlnbm9yZSB1bmRvY3VtZW50ZWQgZXh0ZW5zaW9uc1xuXHRcdFx0XHRjYXNlICdjaGFydG9vbzonOiAvLyBpZ25vcmUgdW5kb2N1bWVudGVkIGV4dGVuc2lvbnNcblx0XHRcdFx0Y2FzZSAnZHJhdzonOiAgICAgLy8gVE9ETzogZHJhd2luZ1xuXHRcdFx0XHRjYXNlICdzdHlsZTonOiAgICAvLyBUT0RPOiBzdHlsZXNcblx0XHRcdFx0Y2FzZSAnY2hhcnQ6JzogICAgLy8gVE9ETzogY2hhcnRzXG5cdFx0XHRcdGNhc2UgJ2Zvcm06JzogICAgIC8vIFRPRE86IGZvcm1zXG5cdFx0XHRcdGNhc2UgJ3VvZjonOiAgICAgIC8vIFRPRE86IHVvZlxuXHRcdFx0XHRjYXNlICfooag6JzogICAgICAgLy8gVE9ETzogdW9mXG5cdFx0XHRcdGNhc2UgJ+WtlzonOiAgICAgICAvLyBUT0RPOiB1b2Zcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDogaWYob3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihSbik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHZhciBvdXQgPSAoe1xuXHRcdFx0U2hlZXRzOiBTaGVldHMsXG5cdFx0XHRTaGVldE5hbWVzOiBTaGVldE5hbWVzLFxuXHRcdFx0V29ya2Jvb2s6IFdCXG5cdFx0fSk7XG5cdFx0aWYob3B0cy5ib29rU2hlZXRzKSBkZWxldGUgb3V0LlNoZWV0cztcblx0XHRyZXR1cm4gb3V0O1xuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gcGFyc2Vfb2RzKHppcCwgb3B0cykge1xuXHRvcHRzID0gb3B0cyB8fCAoe30pO1xuXHRpZihzYWZlZ2V0emlwZmlsZSh6aXAsICdNRVRBLUlORi9tYW5pZmVzdC54bWwnKSkgcGFyc2VfbWFuaWZlc3QoZ2V0emlwZGF0YSh6aXAsICdNRVRBLUlORi9tYW5pZmVzdC54bWwnKSwgb3B0cyk7XG5cdHZhciBjb250ZW50ID0gZ2V0emlwc3RyKHppcCwgJ2NvbnRlbnQueG1sJyk7XG5cdGlmKCFjb250ZW50KSB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGNvbnRlbnQueG1sIGluIE9EUyAvIFVPRiBmaWxlXCIpO1xuXHR2YXIgd2IgPSBwYXJzZV9jb250ZW50X3htbCh1dGY4cmVhZChjb250ZW50KSwgb3B0cyk7XG5cdGlmKHNhZmVnZXR6aXBmaWxlKHppcCwgJ21ldGEueG1sJykpIHdiLlByb3BzID0gcGFyc2VfY29yZV9wcm9wcyhnZXR6aXBkYXRhKHppcCwgJ21ldGEueG1sJykpO1xuXHRyZXR1cm4gd2I7XG59XG5mdW5jdGlvbiBwYXJzZV9mb2RzKGRhdGEsIG9wdHMpIHtcblx0cmV0dXJuIHBhcnNlX2NvbnRlbnRfeG1sKGRhdGEsIG9wdHMpO1xufVxuXG4vKiBPcGVuRG9jdW1lbnQgKi9cbnZhciB3cml0ZV9zdHlsZXNfb2RzID0gKGZ1bmN0aW9uKCkge1xuXHR2YXIgbWFzdGVyX3N0eWxlcyA9ICc8b2ZmaWNlOm1hc3Rlci1zdHlsZXM+J1xuXHQrICc8c3R5bGU6bWFzdGVyLXBhZ2Ugc3R5bGU6bmFtZT1cIm1wMVwiIHN0eWxlOnBhZ2UtbGF5b3V0LW5hbWU9XCJtcDFcIj4nXG5cdCsgJzxzdHlsZTpoZWFkZXIvPidcblx0KyAnPHN0eWxlOmhlYWRlci1sZWZ0IHN0eWxlOmRpc3BsYXk9XCJmYWxzZVwiLz4nXG5cdCsgJzxzdHlsZTpmb290ZXIvPidcblx0KyAnPHN0eWxlOmZvb3Rlci1sZWZ0IHN0eWxlOmRpc3BsYXk9XCJmYWxzZVwiLz4nXG5cdCsgJzwvc3R5bGU6bWFzdGVyLXBhZ2U+J1xuXHQrICc8L29mZmljZTptYXN0ZXItc3R5bGVzPic7XG5cblx0dmFyIHBheWxvYWQgPSAnPG9mZmljZTpkb2N1bWVudC1zdHlsZXMgJyArIHd4dF9oZWxwZXIoe1xuXHRcdCd4bWxuczpvZmZpY2UnOiAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpvZmZpY2U6MS4wXCIsXG5cdFx0J3htbG5zOnRhYmxlJzogICAgXCJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOnRhYmxlOjEuMFwiLFxuXHRcdCd4bWxuczpzdHlsZSc6ICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpzdHlsZToxLjBcIixcblx0XHQneG1sbnM6dGV4dCc6ICAgICBcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6dGV4dDoxLjBcIixcblx0XHQneG1sbnM6ZHJhdyc6ICAgICBcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6ZHJhd2luZzoxLjBcIixcblx0XHQneG1sbnM6Zm8nOiAgICAgICBcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6eHNsLWZvLWNvbXBhdGlibGU6MS4wXCIsXG5cdFx0J3htbG5zOnhsaW5rJzogICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG5cdFx0J3htbG5zOmRjJzogICAgICAgXCJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xL1wiLFxuXHRcdCd4bWxuczpudW1iZXInOiAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpkYXRhc3R5bGU6MS4wXCIsXG5cdFx0J3htbG5zOnN2Zyc6ICAgICAgXCJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOnN2Zy1jb21wYXRpYmxlOjEuMFwiLFxuXHRcdCd4bWxuczpvZic6ICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpvZjoxLjJcIixcblx0XHQnb2ZmaWNlOnZlcnNpb24nOiBcIjEuMlwiXG5cdH0pICsgJz4nICsgbWFzdGVyX3N0eWxlcyArICc8L29mZmljZTpkb2N1bWVudC1zdHlsZXM+JztcblxuXHRyZXR1cm4gZnVuY3Rpb24gd3NvKCkge1xuXHRcdHJldHVybiBYTUxfSEVBREVSICsgcGF5bG9hZDtcblx0fTtcbn0pKCk7XG52YXIgd3JpdGVfY29udGVudF9vZHMgPSAoZnVuY3Rpb24oKSB7XG5cdC8qIDYuMS4yIFdoaXRlIFNwYWNlIENoYXJhY3RlcnMgKi9cblx0dmFyIHdyaXRlX3RleHRfcCA9IGZ1bmN0aW9uKHRleHQpIHtcblx0XHRyZXR1cm4gZXNjYXBleG1sKHRleHQpXG5cdFx0XHQucmVwbGFjZSgvICArL2csIGZ1bmN0aW9uKCQkKXtyZXR1cm4gJzx0ZXh0OnMgdGV4dDpjPVwiJyskJC5sZW5ndGgrJ1wiLz4nO30pXG5cdFx0XHQucmVwbGFjZSgvXFx0L2csIFwiPHRleHQ6dGFiLz5cIilcblx0XHRcdC5yZXBsYWNlKC9cXG4vZywgXCI8L3RleHQ6cD48dGV4dDpwPlwiKVxuXHRcdFx0LnJlcGxhY2UoL14gLywgXCI8dGV4dDpzLz5cIikucmVwbGFjZSgvICQvLCBcIjx0ZXh0OnMvPlwiKTtcblx0fTtcblxuXHR2YXIgbnVsbF9jZWxsX3htbCA9ICcgICAgICAgICAgPHRhYmxlOnRhYmxlLWNlbGwgLz5cXG4nO1xuXHR2YXIgY292ZXJlZF9jZWxsX3htbCA9ICcgICAgICAgICAgPHRhYmxlOmNvdmVyZWQtdGFibGUtY2VsbC8+XFxuJztcblx0dmFyIHdyaXRlX3dzID0gZnVuY3Rpb24od3MsIHdiLCBpKSB7XG5cdFx0LyogU2VjdGlvbiA5IFRhYmxlcyAqL1xuXHRcdHZhciBvID0gW107XG5cdFx0by5wdXNoKCcgICAgICA8dGFibGU6dGFibGUgdGFibGU6bmFtZT1cIicgKyBlc2NhcGV4bWwod2IuU2hlZXROYW1lc1tpXSkgKyAnXCIgdGFibGU6c3R5bGUtbmFtZT1cInRhMVwiPlxcbicpO1xuXHRcdHZhciBSPTAsQz0wLCByYW5nZSA9IGRlY29kZV9yYW5nZSh3c1snIXJlZiddfHxcIkExXCIpO1xuXHRcdHZhciBtYXJyID0gd3NbJyFtZXJnZXMnXSB8fCBbXSwgbWkgPSAwO1xuXHRcdHZhciBkZW5zZSA9IEFycmF5LmlzQXJyYXkod3MpO1xuXHRcdGlmKHdzW1wiIWNvbHNcIl0pIHtcblx0XHRcdGZvcihDID0gMDsgQyA8PSByYW5nZS5lLmM7ICsrQykgby5wdXNoKCcgICAgICAgIDx0YWJsZTp0YWJsZS1jb2x1bW4nICsgKHdzW1wiIWNvbHNcIl1bQ10gPyAnIHRhYmxlOnN0eWxlLW5hbWU9XCJjbycgKyB3c1tcIiFjb2xzXCJdW0NdLm9kcyArICdcIicgOiAnJykgKyAnPjwvdGFibGU6dGFibGUtY29sdW1uPlxcbicpO1xuXHRcdH1cblx0XHR2YXIgSCA9IFwiXCIsIFJPV1MgPSB3c1tcIiFyb3dzXCJdfHxbXTtcblx0XHRmb3IoUiA9IDA7IFIgPCByYW5nZS5zLnI7ICsrUikge1xuXHRcdFx0SCA9IFJPV1NbUl0gPyAnIHRhYmxlOnN0eWxlLW5hbWU9XCJybycgKyBST1dTW1JdLm9kcyArICdcIicgOiBcIlwiO1xuXHRcdFx0by5wdXNoKCcgICAgICAgIDx0YWJsZTp0YWJsZS1yb3cnICsgSCArICc+PC90YWJsZTp0YWJsZS1yb3c+XFxuJyk7XG5cdFx0fVxuXHRcdGZvcig7IFIgPD0gcmFuZ2UuZS5yOyArK1IpIHtcblx0XHRcdEggPSBST1dTW1JdID8gJyB0YWJsZTpzdHlsZS1uYW1lPVwicm8nICsgUk9XU1tSXS5vZHMgKyAnXCInIDogXCJcIjtcblx0XHRcdG8ucHVzaCgnICAgICAgICA8dGFibGU6dGFibGUtcm93JyArIEggKyAnPlxcbicpO1xuXHRcdFx0Zm9yKEM9MDsgQyA8IHJhbmdlLnMuYzsgKytDKSBvLnB1c2gobnVsbF9jZWxsX3htbCk7XG5cdFx0XHRmb3IoOyBDIDw9IHJhbmdlLmUuYzsgKytDKSB7XG5cdFx0XHRcdHZhciBza2lwID0gZmFsc2UsIGN0ID0ge30sIHRleHRwID0gXCJcIjtcblx0XHRcdFx0Zm9yKG1pID0gMDsgbWkgIT0gbWFyci5sZW5ndGg7ICsrbWkpIHtcblx0XHRcdFx0XHRpZihtYXJyW21pXS5zLmMgPiBDKSBjb250aW51ZTtcblx0XHRcdFx0XHRpZihtYXJyW21pXS5zLnIgPiBSKSBjb250aW51ZTtcblx0XHRcdFx0XHRpZihtYXJyW21pXS5lLmMgPCBDKSBjb250aW51ZTtcblx0XHRcdFx0XHRpZihtYXJyW21pXS5lLnIgPCBSKSBjb250aW51ZTtcblx0XHRcdFx0XHRpZihtYXJyW21pXS5zLmMgIT0gQyB8fCBtYXJyW21pXS5zLnIgIT0gUikgc2tpcCA9IHRydWU7XG5cdFx0XHRcdFx0Y3RbJ3RhYmxlOm51bWJlci1jb2x1bW5zLXNwYW5uZWQnXSA9IChtYXJyW21pXS5lLmMgLSBtYXJyW21pXS5zLmMgKyAxKTtcblx0XHRcdFx0XHRjdFsndGFibGU6bnVtYmVyLXJvd3Mtc3Bhbm5lZCddID0gICAgKG1hcnJbbWldLmUuciAtIG1hcnJbbWldLnMuciArIDEpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKHNraXApIHsgby5wdXNoKGNvdmVyZWRfY2VsbF94bWwpOyBjb250aW51ZTsgfVxuXHRcdFx0XHR2YXIgcmVmID0gZW5jb2RlX2NlbGwoe3I6UiwgYzpDfSksIGNlbGwgPSBkZW5zZSA/ICh3c1tSXXx8W10pW0NdOiB3c1tyZWZdO1xuXHRcdFx0XHRpZihjZWxsICYmIGNlbGwuZikge1xuXHRcdFx0XHRcdGN0Wyd0YWJsZTpmb3JtdWxhJ10gPSBlc2NhcGV4bWwoY3NmX3RvX29kc19mb3JtdWxhKGNlbGwuZikpO1xuXHRcdFx0XHRcdGlmKGNlbGwuRikge1xuXHRcdFx0XHRcdFx0aWYoY2VsbC5GLnNsaWNlKDAsIHJlZi5sZW5ndGgpID09IHJlZikge1xuXHRcdFx0XHRcdFx0XHR2YXIgX0ZyZWYgPSBkZWNvZGVfcmFuZ2UoY2VsbC5GKTtcblx0XHRcdFx0XHRcdFx0Y3RbJ3RhYmxlOm51bWJlci1tYXRyaXgtY29sdW1ucy1zcGFubmVkJ10gPSAoX0ZyZWYuZS5jIC0gX0ZyZWYucy5jICsgMSk7XG5cdFx0XHRcdFx0XHRcdGN0Wyd0YWJsZTpudW1iZXItbWF0cml4LXJvd3Mtc3Bhbm5lZCddID0gICAgKF9GcmVmLmUuciAtIF9GcmVmLnMuciArIDEpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZighY2VsbCkgeyBvLnB1c2gobnVsbF9jZWxsX3htbCk7IGNvbnRpbnVlOyB9XG5cdFx0XHRcdHN3aXRjaChjZWxsLnQpIHtcblx0XHRcdFx0XHRjYXNlICdiJzpcblx0XHRcdFx0XHRcdHRleHRwID0gKGNlbGwudiA/ICdUUlVFJyA6ICdGQUxTRScpO1xuXHRcdFx0XHRcdFx0Y3RbJ29mZmljZTp2YWx1ZS10eXBlJ10gPSBcImJvb2xlYW5cIjtcblx0XHRcdFx0XHRcdGN0WydvZmZpY2U6Ym9vbGVhbi12YWx1ZSddID0gKGNlbGwudiA/ICd0cnVlJyA6ICdmYWxzZScpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbic6XG5cdFx0XHRcdFx0XHR0ZXh0cCA9IChjZWxsLnd8fFN0cmluZyhjZWxsLnZ8fDApKTtcblx0XHRcdFx0XHRcdGN0WydvZmZpY2U6dmFsdWUtdHlwZSddID0gXCJmbG9hdFwiO1xuXHRcdFx0XHRcdFx0Y3RbJ29mZmljZTp2YWx1ZSddID0gKGNlbGwudnx8MCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdzJzogY2FzZSAnc3RyJzpcblx0XHRcdFx0XHRcdHRleHRwID0gY2VsbC52ID09IG51bGwgPyBcIlwiIDogY2VsbC52O1xuXHRcdFx0XHRcdFx0Y3RbJ29mZmljZTp2YWx1ZS10eXBlJ10gPSBcInN0cmluZ1wiO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZCc6XG5cdFx0XHRcdFx0XHR0ZXh0cCA9IChjZWxsLnd8fChwYXJzZURhdGUoY2VsbC52KS50b0lTT1N0cmluZygpKSk7XG5cdFx0XHRcdFx0XHRjdFsnb2ZmaWNlOnZhbHVlLXR5cGUnXSA9IFwiZGF0ZVwiO1xuXHRcdFx0XHRcdFx0Y3RbJ29mZmljZTpkYXRlLXZhbHVlJ10gPSAocGFyc2VEYXRlKGNlbGwudikudG9JU09TdHJpbmcoKSk7XG5cdFx0XHRcdFx0XHRjdFsndGFibGU6c3R5bGUtbmFtZSddID0gXCJjZTFcIjtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdC8vY2FzZSAnZSc6XG5cdFx0XHRcdFx0ZGVmYXVsdDogby5wdXNoKG51bGxfY2VsbF94bWwpOyBjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgdGV4dF9wID0gd3JpdGVfdGV4dF9wKHRleHRwKTtcblx0XHRcdFx0aWYoY2VsbC5sICYmIGNlbGwubC5UYXJnZXQpIHtcblx0XHRcdFx0XHR2YXIgX3RndCA9IGNlbGwubC5UYXJnZXQ7XG5cdFx0XHRcdFx0X3RndCA9IF90Z3QuY2hhckF0KDApID09IFwiI1wiID8gXCIjXCIgKyBjc2ZfdG9fb2RzXzNEKF90Z3Quc2xpY2UoMSkpIDogX3RndDtcblx0XHRcdFx0XHQvLyBUT0RPOiBjaG9vc2UgY29ycmVjdCBwYXJlbnQgcGF0aCBmb3JtYXQgYmFzZWQgb24gbGluayBkZWxpbWl0ZXJzXG5cdFx0XHRcdFx0aWYoX3RndC5jaGFyQXQoMCkgIT0gXCIjXCIgJiYgIV90Z3QubWF0Y2goL15cXHcrOi8pKSBfdGd0ID0gJy4uLycgKyBfdGd0O1xuXHRcdFx0XHRcdHRleHRfcCA9IHdyaXRleHRhZygndGV4dDphJywgdGV4dF9wLCB7J3hsaW5rOmhyZWYnOiBfdGd0LnJlcGxhY2UoLyYvZywgXCImYW1wO1wiKX0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG8ucHVzaCgnICAgICAgICAgICcgKyB3cml0ZXh0YWcoJ3RhYmxlOnRhYmxlLWNlbGwnLCB3cml0ZXh0YWcoJ3RleHQ6cCcsIHRleHRfcCwge30pLCBjdCkgKyAnXFxuJyk7XG5cdFx0XHR9XG5cdFx0XHRvLnB1c2goJyAgICAgICAgPC90YWJsZTp0YWJsZS1yb3c+XFxuJyk7XG5cdFx0fVxuXHRcdG8ucHVzaCgnICAgICAgPC90YWJsZTp0YWJsZT5cXG4nKTtcblx0XHRyZXR1cm4gby5qb2luKFwiXCIpO1xuXHR9O1xuXG5cdHZhciB3cml0ZV9hdXRvbWF0aWNfc3R5bGVzX29kcyA9IGZ1bmN0aW9uKG8sIHdiKSB7XG5cdFx0by5wdXNoKCcgPG9mZmljZTphdXRvbWF0aWMtc3R5bGVzPlxcbicpO1xuXG5cdFx0by5wdXNoKCcgIDxudW1iZXI6ZGF0ZS1zdHlsZSBzdHlsZTpuYW1lPVwiTjM3XCIgbnVtYmVyOmF1dG9tYXRpYy1vcmRlcj1cInRydWVcIj5cXG4nKTtcblx0XHRvLnB1c2goJyAgIDxudW1iZXI6bW9udGggbnVtYmVyOnN0eWxlPVwibG9uZ1wiLz5cXG4nKTtcblx0XHRvLnB1c2goJyAgIDxudW1iZXI6dGV4dD4vPC9udW1iZXI6dGV4dD5cXG4nKTtcblx0XHRvLnB1c2goJyAgIDxudW1iZXI6ZGF5IG51bWJlcjpzdHlsZT1cImxvbmdcIi8+XFxuJyk7XG5cdFx0by5wdXNoKCcgICA8bnVtYmVyOnRleHQ+LzwvbnVtYmVyOnRleHQ+XFxuJyk7XG5cdFx0by5wdXNoKCcgICA8bnVtYmVyOnllYXIvPlxcbicpO1xuXHRcdG8ucHVzaCgnICA8L251bWJlcjpkYXRlLXN0eWxlPlxcbicpO1xuXG5cdFx0LyogY29sdW1uIHN0eWxlcyAqL1xuXHRcdHZhciBjaWR4ID0gMDtcblx0XHR3Yi5TaGVldE5hbWVzLm1hcChmdW5jdGlvbihuKSB7IHJldHVybiB3Yi5TaGVldHNbbl07IH0pLmZvckVhY2goZnVuY3Rpb24od3MpIHtcblx0XHRcdGlmKCF3cykgcmV0dXJuO1xuXHRcdFx0aWYod3NbXCIhY29sc1wiXSkge1xuXHRcdFx0XHRmb3IodmFyIEMgPSAwOyBDIDwgd3NbXCIhY29sc1wiXS5sZW5ndGg7ICsrQykgaWYod3NbXCIhY29sc1wiXVtDXSkge1xuXHRcdFx0XHRcdHZhciBjb2xvYmogPSB3c1tcIiFjb2xzXCJdW0NdO1xuXHRcdFx0XHRcdGlmKGNvbG9iai53aWR0aCA9PSBudWxsICYmIGNvbG9iai53cHggPT0gbnVsbCAmJiBjb2xvYmoud2NoID09IG51bGwpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdHByb2Nlc3NfY29sKGNvbG9iaik7XG5cdFx0XHRcdFx0Y29sb2JqLm9kcyA9IGNpZHg7XG5cdFx0XHRcdFx0dmFyIHcgPSB3c1tcIiFjb2xzXCJdW0NdLndweCArIFwicHhcIjtcblx0XHRcdFx0XHRvLnB1c2goJyAgPHN0eWxlOnN0eWxlIHN0eWxlOm5hbWU9XCJjbycgKyBjaWR4ICsgJ1wiIHN0eWxlOmZhbWlseT1cInRhYmxlLWNvbHVtblwiPlxcbicpO1xuXHRcdFx0XHRcdG8ucHVzaCgnICAgPHN0eWxlOnRhYmxlLWNvbHVtbi1wcm9wZXJ0aWVzIGZvOmJyZWFrLWJlZm9yZT1cImF1dG9cIiBzdHlsZTpjb2x1bW4td2lkdGg9XCInICsgdyArICdcIi8+XFxuJyk7XG5cdFx0XHRcdFx0by5wdXNoKCcgIDwvc3R5bGU6c3R5bGU+XFxuJyk7XG5cdFx0XHRcdFx0KytjaWR4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvKiByb3cgc3R5bGVzICovXG5cdFx0dmFyIHJpZHggPSAwO1xuXHRcdHdiLlNoZWV0TmFtZXMubWFwKGZ1bmN0aW9uKG4pIHsgcmV0dXJuIHdiLlNoZWV0c1tuXTsgfSkuZm9yRWFjaChmdW5jdGlvbih3cykge1xuXHRcdFx0aWYoIXdzKSByZXR1cm47XG5cdFx0XHRpZih3c1tcIiFyb3dzXCJdKSB7XG5cdFx0XHRcdGZvcih2YXIgUiA9IDA7IFIgPCB3c1tcIiFyb3dzXCJdLmxlbmd0aDsgKytSKSBpZih3c1tcIiFyb3dzXCJdW1JdKSB7XG5cdFx0XHRcdFx0d3NbXCIhcm93c1wiXVtSXS5vZHMgPSByaWR4O1xuXHRcdFx0XHRcdHZhciBoID0gd3NbXCIhcm93c1wiXVtSXS5ocHggKyBcInB4XCI7XG5cdFx0XHRcdFx0by5wdXNoKCcgIDxzdHlsZTpzdHlsZSBzdHlsZTpuYW1lPVwicm8nICsgcmlkeCArICdcIiBzdHlsZTpmYW1pbHk9XCJ0YWJsZS1yb3dcIj5cXG4nKTtcblx0XHRcdFx0XHRvLnB1c2goJyAgIDxzdHlsZTp0YWJsZS1yb3ctcHJvcGVydGllcyBmbzpicmVhay1iZWZvcmU9XCJhdXRvXCIgc3R5bGU6cm93LWhlaWdodD1cIicgKyBoICsgJ1wiLz5cXG4nKTtcblx0XHRcdFx0XHRvLnB1c2goJyAgPC9zdHlsZTpzdHlsZT5cXG4nKTtcblx0XHRcdFx0XHQrK3JpZHg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8qIHRhYmxlICovXG5cdFx0by5wdXNoKCcgIDxzdHlsZTpzdHlsZSBzdHlsZTpuYW1lPVwidGExXCIgc3R5bGU6ZmFtaWx5PVwidGFibGVcIiBzdHlsZTptYXN0ZXItcGFnZS1uYW1lPVwibXAxXCI+XFxuJyk7XG5cdFx0by5wdXNoKCcgICA8c3R5bGU6dGFibGUtcHJvcGVydGllcyB0YWJsZTpkaXNwbGF5PVwidHJ1ZVwiIHN0eWxlOndyaXRpbmctbW9kZT1cImxyLXRiXCIvPlxcbicpO1xuXHRcdG8ucHVzaCgnICA8L3N0eWxlOnN0eWxlPlxcbicpO1xuXG5cdFx0LyogdGFibGUgY2VsbHMsIHRleHQgKi9cblx0XHRvLnB1c2goJyAgPHN0eWxlOnN0eWxlIHN0eWxlOm5hbWU9XCJjZTFcIiBzdHlsZTpmYW1pbHk9XCJ0YWJsZS1jZWxsXCIgc3R5bGU6cGFyZW50LXN0eWxlLW5hbWU9XCJEZWZhdWx0XCIgc3R5bGU6ZGF0YS1zdHlsZS1uYW1lPVwiTjM3XCIvPlxcbicpO1xuXG5cdFx0LyogcGFnZS1sYXlvdXQgKi9cblxuXHRcdG8ucHVzaCgnIDwvb2ZmaWNlOmF1dG9tYXRpYy1zdHlsZXM+XFxuJyk7XG5cdH07XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHdjeCh3Yiwgb3B0cykge1xuXHRcdHZhciBvID0gW1hNTF9IRUFERVJdO1xuXHRcdC8qIDMuMS4zLjIgKi9cblx0XHR2YXIgYXR0ciA9IHd4dF9oZWxwZXIoe1xuXHRcdFx0J3htbG5zOm9mZmljZSc6ICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpvZmZpY2U6MS4wXCIsXG5cdFx0XHQneG1sbnM6dGFibGUnOiAgICAgICAgXCJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOnRhYmxlOjEuMFwiLFxuXHRcdFx0J3htbG5zOnN0eWxlJzogICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpzdHlsZToxLjBcIixcblx0XHRcdCd4bWxuczp0ZXh0JzogICAgICAgICBcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6dGV4dDoxLjBcIixcblx0XHRcdCd4bWxuczpkcmF3JzogICAgICAgICBcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6ZHJhd2luZzoxLjBcIixcblx0XHRcdCd4bWxuczpmbyc6ICAgICAgICAgICBcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6eHNsLWZvLWNvbXBhdGlibGU6MS4wXCIsXG5cdFx0XHQneG1sbnM6eGxpbmsnOiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG5cdFx0XHQneG1sbnM6ZGMnOiAgICAgICAgICAgXCJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xL1wiLFxuXHRcdFx0J3htbG5zOm1ldGEnOiAgICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczptZXRhOjEuMFwiLFxuXHRcdFx0J3htbG5zOm51bWJlcic6ICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpkYXRhc3R5bGU6MS4wXCIsXG5cdFx0XHQneG1sbnM6cHJlc2VudGF0aW9uJzogXCJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOnByZXNlbnRhdGlvbjoxLjBcIixcblx0XHRcdCd4bWxuczpzdmcnOiAgICAgICAgICBcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6c3ZnLWNvbXBhdGlibGU6MS4wXCIsXG5cdFx0XHQneG1sbnM6Y2hhcnQnOiAgICAgICAgXCJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOmNoYXJ0OjEuMFwiLFxuXHRcdFx0J3htbG5zOmRyM2QnOiAgICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpkcjNkOjEuMFwiLFxuXHRcdFx0J3htbG5zOm1hdGgnOiAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLFxuXHRcdFx0J3htbG5zOmZvcm0nOiAgICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpmb3JtOjEuMFwiLFxuXHRcdFx0J3htbG5zOnNjcmlwdCc6ICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpzY3JpcHQ6MS4wXCIsXG5cdFx0XHQneG1sbnM6b29vJzogICAgICAgICAgXCJodHRwOi8vb3Blbm9mZmljZS5vcmcvMjAwNC9vZmZpY2VcIixcblx0XHRcdCd4bWxuczpvb293JzogICAgICAgICBcImh0dHA6Ly9vcGVub2ZmaWNlLm9yZy8yMDA0L3dyaXRlclwiLFxuXHRcdFx0J3htbG5zOm9vb2MnOiAgICAgICAgIFwiaHR0cDovL29wZW5vZmZpY2Uub3JnLzIwMDQvY2FsY1wiLFxuXHRcdFx0J3htbG5zOmRvbSc6ICAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMS94bWwtZXZlbnRzXCIsXG5cdFx0XHQneG1sbnM6eGZvcm1zJzogICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAyL3hmb3Jtc1wiLFxuXHRcdFx0J3htbG5zOnhzZCc6ICAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWFcIixcblx0XHRcdCd4bWxuczp4c2knOiAgICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlXCIsXG5cdFx0XHQneG1sbnM6c2hlZXQnOiAgICAgICAgXCJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnNoMzN0anM6MS4wXCIsXG5cdFx0XHQneG1sbnM6cnB0JzogICAgICAgICAgXCJodHRwOi8vb3Blbm9mZmljZS5vcmcvMjAwNS9yZXBvcnRcIixcblx0XHRcdCd4bWxuczpvZic6ICAgICAgICAgICBcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6b2Y6MS4yXCIsXG5cdFx0XHQneG1sbnM6eGh0bWwnOiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsXG5cdFx0XHQneG1sbnM6Z3JkZGwnOiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAzL2cvZGF0YS12aWV3I1wiLFxuXHRcdFx0J3htbG5zOnRhYmxlb29vJzogICAgIFwiaHR0cDovL29wZW5vZmZpY2Uub3JnLzIwMDkvdGFibGVcIixcblx0XHRcdCd4bWxuczpkcmF3b29vJzogICAgICBcImh0dHA6Ly9vcGVub2ZmaWNlLm9yZy8yMDEwL2RyYXdcIixcblx0XHRcdCd4bWxuczpjYWxjZXh0JzogICAgICBcInVybjpvcmc6ZG9jdW1lbnRmb3VuZGF0aW9uOm5hbWVzOmV4cGVyaW1lbnRhbDpjYWxjOnhtbG5zOmNhbGNleHQ6MS4wXCIsXG5cdFx0XHQneG1sbnM6bG9leHQnOiAgICAgICAgXCJ1cm46b3JnOmRvY3VtZW50Zm91bmRhdGlvbjpuYW1lczpleHBlcmltZW50YWw6b2ZmaWNlOnhtbG5zOmxvZXh0OjEuMFwiLFxuXHRcdFx0J3htbG5zOmZpZWxkJzogICAgICAgIFwidXJuOm9wZW5vZmZpY2U6bmFtZXM6ZXhwZXJpbWVudGFsOm9vby1tcy1pbnRlcm9wOnhtbG5zOmZpZWxkOjEuMFwiLFxuXHRcdFx0J3htbG5zOmZvcm14JzogICAgICAgIFwidXJuOm9wZW5vZmZpY2U6bmFtZXM6ZXhwZXJpbWVudGFsOm9veG1sLW9kZi1pbnRlcm9wOnhtbG5zOmZvcm06MS4wXCIsXG5cdFx0XHQneG1sbnM6Y3NzM3QnOiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXRleHQvXCIsXG5cdFx0XHQnb2ZmaWNlOnZlcnNpb24nOiAgICAgXCIxLjJcIlxuXHRcdH0pO1xuXG5cdFx0dmFyIGZvZHMgPSB3eHRfaGVscGVyKHtcblx0XHRcdCd4bWxuczpjb25maWcnOiAgICBcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6Y29uZmlnOjEuMFwiLFxuXHRcdFx0J29mZmljZTptaW1ldHlwZSc6IFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5zcHJlYWRzaGVldFwiXG5cdFx0fSk7XG5cblx0XHRpZihvcHRzLmJvb2tUeXBlID09IFwiZm9kc1wiKSB7XG5cdFx0XHRvLnB1c2goJzxvZmZpY2U6ZG9jdW1lbnQnICsgYXR0ciArIGZvZHMgKyAnPlxcbicpO1xuXHRcdFx0by5wdXNoKHdyaXRlX21ldGFfb2RzKCkucmVwbGFjZSgvb2ZmaWNlOmRvY3VtZW50LW1ldGEvZywgXCJvZmZpY2U6bWV0YVwiKSk7XG5cdFx0XHQvLyBUT0RPOiBzZXR0aW5ncyAoZXF1aXYgb2Ygc2V0dGluZ3MueG1sIGZvciBPRFMpXG5cdFx0fSBlbHNlIG8ucHVzaCgnPG9mZmljZTpkb2N1bWVudC1jb250ZW50JyArIGF0dHIgICsgJz5cXG4nKTtcblx0XHQvLyBvLnB1c2goJyAgPG9mZmljZTpzY3JpcHRzLz5cXG4nKTtcblx0XHR3cml0ZV9hdXRvbWF0aWNfc3R5bGVzX29kcyhvLCB3Yik7XG5cdFx0by5wdXNoKCcgIDxvZmZpY2U6Ym9keT5cXG4nKTtcblx0XHRvLnB1c2goJyAgICA8b2ZmaWNlOnNwcmVhZHNoZWV0PlxcbicpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgIT0gd2IuU2hlZXROYW1lcy5sZW5ndGg7ICsraSkgby5wdXNoKHdyaXRlX3dzKHdiLlNoZWV0c1t3Yi5TaGVldE5hbWVzW2ldXSwgd2IsIGksIG9wdHMpKTtcblx0XHRvLnB1c2goJyAgICA8L29mZmljZTpzcHJlYWRzaGVldD5cXG4nKTtcblx0XHRvLnB1c2goJyAgPC9vZmZpY2U6Ym9keT5cXG4nKTtcblx0XHRpZihvcHRzLmJvb2tUeXBlID09IFwiZm9kc1wiKSBvLnB1c2goJzwvb2ZmaWNlOmRvY3VtZW50PicpO1xuXHRcdGVsc2Ugby5wdXNoKCc8L29mZmljZTpkb2N1bWVudC1jb250ZW50PicpO1xuXHRcdHJldHVybiBvLmpvaW4oXCJcIik7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiB3cml0ZV9vZHMod2IsIG9wdHMpIHtcblx0aWYob3B0cy5ib29rVHlwZSA9PSBcImZvZHNcIikgcmV0dXJuIHdyaXRlX2NvbnRlbnRfb2RzKHdiLCBvcHRzKTtcblxuXHR2YXIgemlwID0gemlwX25ldygpO1xuXHR2YXIgZiA9IFwiXCI7XG5cblx0dmFyIG1hbmlmZXN0ID0gW107XG5cdHZhciByZGYgPSBbXTtcblxuXHQvKiBQYXJ0IDMgU2VjdGlvbiAzLjMgTUlNRSBNZWRpYSBUeXBlICovXG5cdGYgPSBcIm1pbWV0eXBlXCI7XG5cdHppcF9hZGRfZmlsZSh6aXAsIGYsIFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5zcHJlYWRzaGVldFwiKTtcblxuXHQvKiBQYXJ0IDEgU2VjdGlvbiAyLjIgRG9jdW1lbnRzICovXG5cdGYgPSBcImNvbnRlbnQueG1sXCI7XG5cdHppcF9hZGRfZmlsZSh6aXAsIGYsIHdyaXRlX2NvbnRlbnRfb2RzKHdiLCBvcHRzKSk7XG5cdG1hbmlmZXN0LnB1c2goW2YsIFwidGV4dC94bWxcIl0pO1xuXHRyZGYucHVzaChbZiwgXCJDb250ZW50RmlsZVwiXSk7XG5cblx0LyogVE9ETzogdGhlc2UgYXJlIGhhcmQtY29kZWQgc3R5bGVzIHRvIHNhdGlhdGUgZXhjZWwgKi9cblx0ZiA9IFwic3R5bGVzLnhtbFwiO1xuXHR6aXBfYWRkX2ZpbGUoemlwLCBmLCB3cml0ZV9zdHlsZXNfb2RzKHdiLCBvcHRzKSk7XG5cdG1hbmlmZXN0LnB1c2goW2YsIFwidGV4dC94bWxcIl0pO1xuXHRyZGYucHVzaChbZiwgXCJTdHlsZXNGaWxlXCJdKTtcblxuXHQvKiBUT0RPOiB0aGlzIGlzIGhhcmQtY29kZWQgdG8gc2F0aWF0ZSBleGNlbCAqL1xuXHRmID0gXCJtZXRhLnhtbFwiO1xuXHR6aXBfYWRkX2ZpbGUoemlwLCBmLCBYTUxfSEVBREVSICsgd3JpdGVfbWV0YV9vZHMoKSk7XG5cdG1hbmlmZXN0LnB1c2goW2YsIFwidGV4dC94bWxcIl0pO1xuXHRyZGYucHVzaChbZiwgXCJNZXRhZGF0YUZpbGVcIl0pO1xuXG5cdC8qIFBhcnQgMyBTZWN0aW9uIDYgTWV0YWRhdGEgTWFuaWZlc3QgRmlsZSAqL1xuXHRmID0gXCJtYW5pZmVzdC5yZGZcIjtcblx0emlwX2FkZF9maWxlKHppcCwgZiwgd3JpdGVfcmRmKHJkZi8qLCBvcHRzKi8pKTtcblx0bWFuaWZlc3QucHVzaChbZiwgXCJhcHBsaWNhdGlvbi9yZGYreG1sXCJdKTtcblxuXHQvKiBQYXJ0IDMgU2VjdGlvbiA0IE1hbmlmZXN0IEZpbGUgKi9cblx0ZiA9IFwiTUVUQS1JTkYvbWFuaWZlc3QueG1sXCI7XG5cdHppcF9hZGRfZmlsZSh6aXAsIGYsIHdyaXRlX21hbmlmZXN0KG1hbmlmZXN0LyosIG9wdHMqLykpO1xuXG5cdHJldHVybiB6aXA7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX3NoZWV0X2luZGV4KHdiLCBzaGVldCkge1xuXHRpZighc2hlZXQpIHJldHVybiAwO1xuXHR2YXIgaWR4ID0gd2IuU2hlZXROYW1lcy5pbmRleE9mKHNoZWV0KTtcblx0aWYoaWR4ID09IC0xKSB0aHJvdyBuZXcgRXJyb3IoXCJTaGVldCBub3QgZm91bmQ6IFwiICsgc2hlZXQpO1xuXHRyZXR1cm4gaWR4O1xufVxuXG5mdW5jdGlvbiB3cml0ZV9vYmpfc3RyKGZhY3RvcnkpIHtcblx0cmV0dXJuIGZ1bmN0aW9uIHdyaXRlX3N0cih3Yiwgbykge1xuXHRcdHZhciBpZHggPSB3cml0ZV9zaGVldF9pbmRleCh3Yiwgby5zaGVldCk7XG5cdFx0cmV0dXJuIGZhY3RvcnkuZnJvbV9zaGVldCh3Yi5TaGVldHNbd2IuU2hlZXROYW1lc1tpZHhdXSwgbywgd2IpO1xuXHR9O1xufVxuXG52YXIgd3JpdGVfaHRtX3N0ciA9IHdyaXRlX29ial9zdHIoSFRNTF8pO1xudmFyIHdyaXRlX2Nzdl9zdHIgPSB3cml0ZV9vYmpfc3RyKHtmcm9tX3NoZWV0OnNoZWV0X3RvX2Nzdn0pO1xudmFyIHdyaXRlX3Nsa19zdHIgPSB3cml0ZV9vYmpfc3RyKHR5cGVvZiBTWUxLICE9PSBcInVuZGVmaW5lZFwiID8gU1lMSyA6IHt9KTtcbnZhciB3cml0ZV9kaWZfc3RyID0gd3JpdGVfb2JqX3N0cih0eXBlb2YgRElGICE9PSBcInVuZGVmaW5lZFwiID8gRElGIDoge30pO1xudmFyIHdyaXRlX3Bybl9zdHIgPSB3cml0ZV9vYmpfc3RyKHR5cGVvZiBQUk4gIT09IFwidW5kZWZpbmVkXCIgPyBQUk4gOiB7fSk7XG52YXIgd3JpdGVfcnRmX3N0ciA9IHdyaXRlX29ial9zdHIodHlwZW9mIFJURiAhPT0gXCJ1bmRlZmluZWRcIiA/IFJURiA6IHt9KTtcbnZhciB3cml0ZV90eHRfc3RyID0gd3JpdGVfb2JqX3N0cih7ZnJvbV9zaGVldDpzaGVldF90b190eHR9KTtcbnZhciB3cml0ZV9kYmZfYnVmID0gd3JpdGVfb2JqX3N0cih0eXBlb2YgREJGICE9PSBcInVuZGVmaW5lZFwiID8gREJGIDoge30pO1xudmFyIHdyaXRlX2V0aF9zdHIgPSB3cml0ZV9vYmpfc3RyKHR5cGVvZiBFVEggIT09IFwidW5kZWZpbmVkXCIgPyBFVEggOiB7fSk7XG52YXIgd3JpdGVfd2sxX2J1ZiA9IHdyaXRlX29ial9zdHIodHlwZW9mIFdLXyAhPT0gXCJ1bmRlZmluZWRcIiA/IHtmcm9tX3NoZWV0OldLXy5zaGVldF90b193azF9IDoge30pO1xuXG5mdW5jdGlvbiBmaXhfb3B0c19mdW5jKGRlZmF1bHRzKSB7XG5cdHJldHVybiBmdW5jdGlvbiBmaXhfb3B0cyhvcHRzKSB7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSAhPSBkZWZhdWx0cy5sZW5ndGg7ICsraSkge1xuXHRcdFx0dmFyIGQgPSBkZWZhdWx0c1tpXTtcblx0XHRcdGlmKG9wdHNbZFswXV0gPT09IHVuZGVmaW5lZCkgb3B0c1tkWzBdXSA9IGRbMV07XG5cdFx0XHRpZihkWzJdID09PSAnbicpIG9wdHNbZFswXV0gPSBOdW1iZXIob3B0c1tkWzBdXSk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgZml4X3JlYWRfb3B0cyA9IGZ1bmN0aW9uKG9wdHMpIHtcbmZpeF9vcHRzX2Z1bmMoW1xuXHRbJ2NlbGxORicsIGZhbHNlXSwgLyogZW1pdCBjZWxsIG51bWJlciBmb3JtYXQgc3RyaW5nIGFzIC56ICovXG5cdFsnY2VsbEhUTUwnLCB0cnVlXSwgLyogZW1pdCBodG1sIHN0cmluZyBhcyAuaCAqL1xuXHRbJ2NlbGxGb3JtdWxhJywgdHJ1ZV0sIC8qIGVtaXQgZm9ybXVsYWUgYXMgLmYgKi9cblx0WydjZWxsU3R5bGVzJywgZmFsc2VdLCAvKiBlbWl0cyBzdHlsZS90aGVtZSBhcyAucyAqL1xuXHRbJ2NlbGxUZXh0JywgdHJ1ZV0sIC8qIGVtaXQgZm9ybWF0dGVkIHRleHQgYXMgLncgKi9cblx0WydjZWxsRGF0ZXMnLCBmYWxzZV0sIC8qIGVtaXQgZGF0ZSBjZWxscyB3aXRoIHR5cGUgYGRgICovXG5cblx0WydzaGVldFN0dWJzJywgZmFsc2VdLCAvKiBlbWl0IGVtcHR5IGNlbGxzICovXG5cdFsnc2hlZXRSb3dzJywgMCwgJ24nXSwgLyogcmVhZCBuIHJvd3MgKDAgPSByZWFkIGFsbCByb3dzKSAqL1xuXG5cdFsnYm9va0RlcHMnLCBmYWxzZV0sIC8qIHBhcnNlIGNhbGN1bGF0aW9uIGNoYWlucyAqL1xuXHRbJ2Jvb2tTaGVldHMnLCBmYWxzZV0sIC8qIG9ubHkgdHJ5IHRvIGdldCBzaGVldCBuYW1lcyAobm8gU2hlZXRzKSAqL1xuXHRbJ2Jvb2tQcm9wcycsIGZhbHNlXSwgLyogb25seSB0cnkgdG8gZ2V0IHByb3BlcnRpZXMgKG5vIFNoZWV0cykgKi9cblx0Wydib29rRmlsZXMnLCBmYWxzZV0sIC8qIGluY2x1ZGUgcmF3IGZpbGUgc3RydWN0dXJlIChrZXlzLCBmaWxlcywgY2ZiKSAqL1xuXHRbJ2Jvb2tWQkEnLCBmYWxzZV0sIC8qIGluY2x1ZGUgdmJhIHJhdyBkYXRhICh2YmFyYXcpICovXG5cblx0WydwYXNzd29yZCcsJyddLCAvKiBwYXNzd29yZCAqL1xuXHRbJ1dURicsIGZhbHNlXSAvKiBXVEYgbW9kZSAodGhyb3dzIGVycm9ycykgKi9cbl0pKG9wdHMpO1xufTtcblxudmFyIGZpeF93cml0ZV9vcHRzID0gZml4X29wdHNfZnVuYyhbXG5cdFsnY2VsbERhdGVzJywgZmFsc2VdLCAvKiB3cml0ZSBkYXRlIGNlbGxzIHdpdGggdHlwZSBgZGAgKi9cblxuXHRbJ2Jvb2tTU1QnLCBmYWxzZV0sIC8qIEdlbmVyYXRlIFNoYXJlZCBTdHJpbmcgVGFibGUgKi9cblxuXHRbJ2Jvb2tUeXBlJywgJ3hsc3gnXSwgLyogVHlwZSBvZiB3b3JrYm9vayAoeGxzeC9tL2IpICovXG5cblx0Wydjb21wcmVzc2lvbicsIGZhbHNlXSwgLyogVXNlIGZpbGUgY29tcHJlc3Npb24gKi9cblxuXHRbJ1dURicsIGZhbHNlXSAvKiBXVEYgbW9kZSAodGhyb3dzIGVycm9ycykgKi9cbl0pO1xuZnVuY3Rpb24gZ2V0X3NoZWV0X3R5cGUobikge1xuXHRpZihSRUxTLldTLmluZGV4T2YobikgPiAtMSkgcmV0dXJuIFwic2hlZXRcIjtcblx0aWYoUkVMUy5DUyAmJiBuID09IFJFTFMuQ1MpIHJldHVybiBcImNoYXJ0XCI7XG5cdGlmKFJFTFMuRFMgJiYgbiA9PSBSRUxTLkRTKSByZXR1cm4gXCJkaWFsb2dcIjtcblx0aWYoUkVMUy5NUyAmJiBuID09IFJFTFMuTVMpIHJldHVybiBcIm1hY3JvXCI7XG5cdHJldHVybiAobiAmJiBuLmxlbmd0aCkgPyBuIDogXCJzaGVldFwiO1xufVxuZnVuY3Rpb24gc2FmZV9wYXJzZV93YnJlbHMod2JyZWxzLCBzaGVldHMpIHtcblx0aWYoIXdicmVscykgcmV0dXJuIDA7XG5cdHRyeSB7XG5cdFx0d2JyZWxzID0gc2hlZXRzLm1hcChmdW5jdGlvbiBwd2JyKHcpIHsgaWYoIXcuaWQpIHcuaWQgPSB3LnN0clJlbElEOyByZXR1cm4gW3cubmFtZSwgd2JyZWxzWychaWQnXVt3LmlkXS5UYXJnZXQsIGdldF9zaGVldF90eXBlKHdicmVsc1snIWlkJ11bdy5pZF0uVHlwZSldOyB9KTtcblx0fSBjYXRjaChlKSB7IHJldHVybiBudWxsOyB9XG5cdHJldHVybiAhd2JyZWxzIHx8IHdicmVscy5sZW5ndGggPT09IDAgPyBudWxsIDogd2JyZWxzO1xufVxuXG5mdW5jdGlvbiBzYWZlX3BhcnNlX3NoZWV0KHppcCwgcGF0aCwgcmVsc1BhdGgsIHNoZWV0LCBpZHgsIHNoZWV0UmVscywgc2hlZXRzLCBzdHlwZSwgb3B0cywgd2IsIHRoZW1lcywgc3R5bGVzKSB7XG5cdHRyeSB7XG5cdFx0c2hlZXRSZWxzW3NoZWV0XT1wYXJzZV9yZWxzKGdldHppcHN0cih6aXAsIHJlbHNQYXRoLCB0cnVlKSwgcGF0aCk7XG5cdFx0dmFyIGRhdGEgPSBnZXR6aXBkYXRhKHppcCwgcGF0aCk7XG5cdFx0dmFyIF93cztcblx0XHRzd2l0Y2goc3R5cGUpIHtcblx0XHRcdGNhc2UgJ3NoZWV0JzogIF93cyA9IHBhcnNlX3dzKGRhdGEsIHBhdGgsIGlkeCwgb3B0cywgc2hlZXRSZWxzW3NoZWV0XSwgd2IsIHRoZW1lcywgc3R5bGVzKTsgYnJlYWs7XG5cdFx0XHRjYXNlICdjaGFydCc6ICBfd3MgPSBwYXJzZV9jcyhkYXRhLCBwYXRoLCBpZHgsIG9wdHMsIHNoZWV0UmVsc1tzaGVldF0sIHdiLCB0aGVtZXMsIHN0eWxlcyk7XG5cdFx0XHRcdGlmKCFfd3MgfHwgIV93c1snIWRyYXdlbCddKSBicmVhaztcblx0XHRcdFx0dmFyIGRmaWxlID0gcmVzb2x2ZV9wYXRoKF93c1snIWRyYXdlbCddLlRhcmdldCwgcGF0aCk7XG5cdFx0XHRcdHZhciBkcmVsc3AgPSBnZXRfcmVsc19wYXRoKGRmaWxlKTtcblx0XHRcdFx0dmFyIGRyYXcgPSBwYXJzZV9kcmF3aW5nKGdldHppcHN0cih6aXAsIGRmaWxlLCB0cnVlKSwgcGFyc2VfcmVscyhnZXR6aXBzdHIoemlwLCBkcmVsc3AsIHRydWUpLCBkZmlsZSkpO1xuXHRcdFx0XHR2YXIgY2hhcnRwID0gcmVzb2x2ZV9wYXRoKGRyYXcsIGRmaWxlKTtcblx0XHRcdFx0dmFyIGNyZWxzcCA9IGdldF9yZWxzX3BhdGgoY2hhcnRwKTtcblx0XHRcdFx0X3dzID0gcGFyc2VfY2hhcnQoZ2V0emlwc3RyKHppcCwgY2hhcnRwLCB0cnVlKSwgY2hhcnRwLCBvcHRzLCBwYXJzZV9yZWxzKGdldHppcHN0cih6aXAsIGNyZWxzcCwgdHJ1ZSksIGNoYXJ0cCksIHdiLCBfd3MpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ21hY3JvJzogIF93cyA9IHBhcnNlX21zKGRhdGEsIHBhdGgsIGlkeCwgb3B0cywgc2hlZXRSZWxzW3NoZWV0XSwgd2IsIHRoZW1lcywgc3R5bGVzKTsgYnJlYWs7XG5cdFx0XHRjYXNlICdkaWFsb2cnOiBfd3MgPSBwYXJzZV9kcyhkYXRhLCBwYXRoLCBpZHgsIG9wdHMsIHNoZWV0UmVsc1tzaGVldF0sIHdiLCB0aGVtZXMsIHN0eWxlcyk7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkIHNoZWV0IHR5cGUgXCIgKyBzdHlwZSk7XG5cdFx0fVxuXHRcdHNoZWV0c1tzaGVldF0gPSBfd3M7XG5cblx0XHQvKiBzY2FuIHJlbHMgZm9yIGNvbW1lbnRzICovXG5cdFx0dmFyIGNvbW1lbnRzID0gW107XG5cdFx0aWYoc2hlZXRSZWxzICYmIHNoZWV0UmVsc1tzaGVldF0pIGtleXMoc2hlZXRSZWxzW3NoZWV0XSkuZm9yRWFjaChmdW5jdGlvbihuKSB7XG5cdFx0XHRpZihzaGVldFJlbHNbc2hlZXRdW25dLlR5cGUgPT0gUkVMUy5DTU5UKSB7XG5cdFx0XHRcdHZhciBkZmlsZSA9IHJlc29sdmVfcGF0aChzaGVldFJlbHNbc2hlZXRdW25dLlRhcmdldCwgcGF0aCk7XG5cdFx0XHRcdGNvbW1lbnRzID0gcGFyc2VfY21udChnZXR6aXBkYXRhKHppcCwgZGZpbGUsIHRydWUpLCBkZmlsZSwgb3B0cyk7XG5cdFx0XHRcdGlmKCFjb21tZW50cyB8fCAhY29tbWVudHMubGVuZ3RoKSByZXR1cm47XG5cdFx0XHRcdHNoZWV0X2luc2VydF9jb21tZW50cyhfd3MsIGNvbW1lbnRzKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSBjYXRjaChlKSB7IGlmKG9wdHMuV1RGKSB0aHJvdyBlOyB9XG59XG5cbmZ1bmN0aW9uIHN0cmlwX2Zyb250X3NsYXNoKHgpIHsgcmV0dXJuIHguY2hhckF0KDApID09ICcvJyA/IHguc2xpY2UoMSkgOiB4OyB9XG5cbmZ1bmN0aW9uIHBhcnNlX3ppcCh6aXAsIG9wdHMpIHtcblx0bWFrZV9zc2YoU1NGKTtcblx0b3B0cyA9IG9wdHMgfHwge307XG5cdGZpeF9yZWFkX29wdHMob3B0cyk7XG5cblx0LyogT3BlbkRvY3VtZW50IFBhcnQgMyBTZWN0aW9uIDIuMi4xIE9wZW5Eb2N1bWVudCBQYWNrYWdlICovXG5cdGlmKHNhZmVnZXR6aXBmaWxlKHppcCwgJ01FVEEtSU5GL21hbmlmZXN0LnhtbCcpKSByZXR1cm4gcGFyc2Vfb2RzKHppcCwgb3B0cyk7XG5cdC8qIFVPQyAqL1xuXHRpZihzYWZlZ2V0emlwZmlsZSh6aXAsICdvYmplY3RkYXRhLnhtbCcpKSByZXR1cm4gcGFyc2Vfb2RzKHppcCwgb3B0cyk7XG5cdC8qIE51bWJlcnMgKi9cblx0aWYoc2FmZWdldHppcGZpbGUoemlwLCAnSW5kZXgvRG9jdW1lbnQuaXdhJykpIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgTlVNQkVSUyBmaWxlJyk7XG5cblx0dmFyIGVudHJpZXMgPSB6aXBlbnRyaWVzKHppcCk7XG5cdHZhciBkaXIgPSBwYXJzZV9jdCgoZ2V0emlwc3RyKHppcCwgJ1tDb250ZW50X1R5cGVzXS54bWwnKSkpO1xuXHR2YXIgeGxzYiA9IGZhbHNlO1xuXHR2YXIgc2hlZXRzLCBiaW5uYW1lO1xuXHRpZihkaXIud29ya2Jvb2tzLmxlbmd0aCA9PT0gMCkge1xuXHRcdGJpbm5hbWUgPSBcInhsL3dvcmtib29rLnhtbFwiO1xuXHRcdGlmKGdldHppcGRhdGEoemlwLGJpbm5hbWUsIHRydWUpKSBkaXIud29ya2Jvb2tzLnB1c2goYmlubmFtZSk7XG5cdH1cblx0aWYoZGlyLndvcmtib29rcy5sZW5ndGggPT09IDApIHtcblx0XHRiaW5uYW1lID0gXCJ4bC93b3JrYm9vay5iaW5cIjtcblx0XHRpZighZ2V0emlwZGF0YSh6aXAsYmlubmFtZSx0cnVlKSkgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgd29ya2Jvb2tcIik7XG5cdFx0ZGlyLndvcmtib29rcy5wdXNoKGJpbm5hbWUpO1xuXHRcdHhsc2IgPSB0cnVlO1xuXHR9XG5cdGlmKGRpci53b3JrYm9va3NbMF0uc2xpY2UoLTMpID09IFwiYmluXCIpIHhsc2IgPSB0cnVlO1xuXG5cdHZhciB0aGVtZXMgPSAoe30pO1xuXHR2YXIgc3R5bGVzID0gKHt9KTtcblx0aWYoIW9wdHMuYm9va1NoZWV0cyAmJiAhb3B0cy5ib29rUHJvcHMpIHtcblx0XHRzdHJzID0gW107XG5cdFx0aWYoZGlyLnNzdCkgdHJ5IHsgc3Rycz1wYXJzZV9zc3QoZ2V0emlwZGF0YSh6aXAsIHN0cmlwX2Zyb250X3NsYXNoKGRpci5zc3QpKSwgZGlyLnNzdCwgb3B0cyk7IH0gY2F0Y2goZSkgeyBpZihvcHRzLldURikgdGhyb3cgZTsgfVxuXG5cdFx0aWYob3B0cy5jZWxsU3R5bGVzICYmIGRpci50aGVtZXMubGVuZ3RoKSB0aGVtZXMgPSBwYXJzZV90aGVtZShnZXR6aXBzdHIoemlwLCBkaXIudGhlbWVzWzBdLnJlcGxhY2UoL15cXC8vLCcnKSwgdHJ1ZSl8fFwiXCIsZGlyLnRoZW1lc1swXSwgb3B0cyk7XG5cblx0XHRpZihkaXIuc3R5bGUpIHN0eWxlcyA9IHBhcnNlX3N0eShnZXR6aXBkYXRhKHppcCwgc3RyaXBfZnJvbnRfc2xhc2goZGlyLnN0eWxlKSksIGRpci5zdHlsZSwgdGhlbWVzLCBvcHRzKTtcblx0fVxuXG5cdC8qdmFyIGV4dGVybmJvb2tzID0gKi9kaXIubGlua3MubWFwKGZ1bmN0aW9uKGxpbmspIHtcblx0XHR0cnkge1xuXHRcdFx0dmFyIHJlbHMgPSBwYXJzZV9yZWxzKGdldHppcHN0cih6aXAsIGdldF9yZWxzX3BhdGgoc3RyaXBfZnJvbnRfc2xhc2gobGluaykpKSwgbGluayk7XG5cdFx0XHRyZXR1cm4gcGFyc2VfeGxpbmsoZ2V0emlwZGF0YSh6aXAsIHN0cmlwX2Zyb250X3NsYXNoKGxpbmspKSwgcmVscywgbGluaywgb3B0cyk7XG5cdFx0fSBjYXRjaChlKSB7fVxuXHR9KTtcblxuXHR2YXIgd2IgPSBwYXJzZV93YihnZXR6aXBkYXRhKHppcCwgc3RyaXBfZnJvbnRfc2xhc2goZGlyLndvcmtib29rc1swXSkpLCBkaXIud29ya2Jvb2tzWzBdLCBvcHRzKTtcblxuXHR2YXIgcHJvcHMgPSB7fSwgcHJvcGRhdGEgPSBcIlwiO1xuXG5cdGlmKGRpci5jb3JlcHJvcHMubGVuZ3RoKSB7XG5cdFx0cHJvcGRhdGEgPSBnZXR6aXBkYXRhKHppcCwgc3RyaXBfZnJvbnRfc2xhc2goZGlyLmNvcmVwcm9wc1swXSksIHRydWUpO1xuXHRcdGlmKHByb3BkYXRhKSBwcm9wcyA9IHBhcnNlX2NvcmVfcHJvcHMocHJvcGRhdGEpO1xuXHRcdGlmKGRpci5leHRwcm9wcy5sZW5ndGggIT09IDApIHtcblx0XHRcdHByb3BkYXRhID0gZ2V0emlwZGF0YSh6aXAsIHN0cmlwX2Zyb250X3NsYXNoKGRpci5leHRwcm9wc1swXSksIHRydWUpO1xuXHRcdFx0aWYocHJvcGRhdGEpIHBhcnNlX2V4dF9wcm9wcyhwcm9wZGF0YSwgcHJvcHMsIG9wdHMpO1xuXHRcdH1cblx0fVxuXG5cdHZhciBjdXN0cHJvcHMgPSB7fTtcblx0aWYoIW9wdHMuYm9va1NoZWV0cyB8fCBvcHRzLmJvb2tQcm9wcykge1xuXHRcdGlmIChkaXIuY3VzdHByb3BzLmxlbmd0aCAhPT0gMCkge1xuXHRcdFx0cHJvcGRhdGEgPSBnZXR6aXBzdHIoemlwLCBzdHJpcF9mcm9udF9zbGFzaChkaXIuY3VzdHByb3BzWzBdKSwgdHJ1ZSk7XG5cdFx0XHRpZihwcm9wZGF0YSkgY3VzdHByb3BzID0gcGFyc2VfY3VzdF9wcm9wcyhwcm9wZGF0YSwgb3B0cyk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIG91dCA9ICh7fSk7XG5cdGlmKG9wdHMuYm9va1NoZWV0cyB8fCBvcHRzLmJvb2tQcm9wcykge1xuXHRcdGlmKHdiLlNoZWV0cykgc2hlZXRzID0gd2IuU2hlZXRzLm1hcChmdW5jdGlvbiBwbHVjayh4KXsgcmV0dXJuIHgubmFtZTsgfSk7XG5cdFx0ZWxzZSBpZihwcm9wcy5Xb3Jrc2hlZXRzICYmIHByb3BzLlNoZWV0TmFtZXMubGVuZ3RoID4gMCkgc2hlZXRzPXByb3BzLlNoZWV0TmFtZXM7XG5cdFx0aWYob3B0cy5ib29rUHJvcHMpIHsgb3V0LlByb3BzID0gcHJvcHM7IG91dC5DdXN0cHJvcHMgPSBjdXN0cHJvcHM7IH1cblx0XHRpZihvcHRzLmJvb2tTaGVldHMgJiYgdHlwZW9mIHNoZWV0cyAhPT0gJ3VuZGVmaW5lZCcpIG91dC5TaGVldE5hbWVzID0gc2hlZXRzO1xuXHRcdGlmKG9wdHMuYm9va1NoZWV0cyA/IG91dC5TaGVldE5hbWVzIDogb3B0cy5ib29rUHJvcHMpIHJldHVybiBvdXQ7XG5cdH1cblx0c2hlZXRzID0ge307XG5cblx0dmFyIGRlcHMgPSB7fTtcblx0aWYob3B0cy5ib29rRGVwcyAmJiBkaXIuY2FsY2NoYWluKSBkZXBzPXBhcnNlX2NjKGdldHppcGRhdGEoemlwLCBzdHJpcF9mcm9udF9zbGFzaChkaXIuY2FsY2NoYWluKSksZGlyLmNhbGNjaGFpbixvcHRzKTtcblxuXHR2YXIgaT0wO1xuXHR2YXIgc2hlZXRSZWxzID0gKHt9KTtcblx0dmFyIHBhdGgsIHJlbHNQYXRoO1xuXG5cdHtcblx0XHR2YXIgd2JzaGVldHMgPSB3Yi5TaGVldHM7XG5cdFx0cHJvcHMuV29ya3NoZWV0cyA9IHdic2hlZXRzLmxlbmd0aDtcblx0XHRwcm9wcy5TaGVldE5hbWVzID0gW107XG5cdFx0Zm9yKHZhciBqID0gMDsgaiAhPSB3YnNoZWV0cy5sZW5ndGg7ICsraikge1xuXHRcdFx0cHJvcHMuU2hlZXROYW1lc1tqXSA9IHdic2hlZXRzW2pdLm5hbWU7XG5cdFx0fVxuXHR9XG5cblx0dmFyIHdiZXh0ID0geGxzYiA/IFwiYmluXCIgOiBcInhtbFwiO1xuXHR2YXIgd2JyZWxzaSA9IGRpci53b3JrYm9va3NbMF0ubGFzdEluZGV4T2YoXCIvXCIpO1xuXHR2YXIgd2JyZWxzZmlsZSA9IChkaXIud29ya2Jvb2tzWzBdLnNsaWNlKDAsIHdicmVsc2krMSkgKyBcIl9yZWxzL1wiICsgZGlyLndvcmtib29rc1swXS5zbGljZSh3YnJlbHNpKzEpICsgXCIucmVsc1wiKS5yZXBsYWNlKC9eXFwvLyxcIlwiKTtcblx0aWYoIXNhZmVnZXR6aXBmaWxlKHppcCwgd2JyZWxzZmlsZSkpIHdicmVsc2ZpbGUgPSAneGwvX3JlbHMvd29ya2Jvb2suJyArIHdiZXh0ICsgJy5yZWxzJztcblx0dmFyIHdicmVscyA9IHBhcnNlX3JlbHMoZ2V0emlwc3RyKHppcCwgd2JyZWxzZmlsZSwgdHJ1ZSksIHdicmVsc2ZpbGUpO1xuXHRpZih3YnJlbHMpIHdicmVscyA9IHNhZmVfcGFyc2Vfd2JyZWxzKHdicmVscywgd2IuU2hlZXRzKTtcblxuXHQvKiBOdW1iZXJzIGlPUyBoYWNrICovXG5cdHZhciBubW9kZSA9IChnZXR6aXBkYXRhKHppcCxcInhsL3dvcmtzaGVldHMvc2hlZXQueG1sXCIsdHJ1ZSkpPzE6MDtcblx0d3Nsb29wOiBmb3IoaSA9IDA7IGkgIT0gcHJvcHMuV29ya3NoZWV0czsgKytpKSB7XG5cdFx0dmFyIHN0eXBlID0gXCJzaGVldFwiO1xuXHRcdGlmKHdicmVscyAmJiB3YnJlbHNbaV0pIHtcblx0XHRcdHBhdGggPSAneGwvJyArICh3YnJlbHNbaV1bMV0pLnJlcGxhY2UoL1tcXC9dP3hsXFwvLywgXCJcIik7XG5cdFx0XHRpZighc2FmZWdldHppcGZpbGUoemlwLCBwYXRoKSkgcGF0aCA9IHdicmVsc1tpXVsxXTtcblx0XHRcdGlmKCFzYWZlZ2V0emlwZmlsZSh6aXAsIHBhdGgpKSBwYXRoID0gd2JyZWxzZmlsZS5yZXBsYWNlKC9fcmVsc1xcLy4qJC8sXCJcIikgKyB3YnJlbHNbaV1bMV07XG5cdFx0XHRzdHlwZSA9IHdicmVsc1tpXVsyXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cGF0aCA9ICd4bC93b3Jrc2hlZXRzL3NoZWV0JysoaSsxLW5tb2RlKStcIi5cIiArIHdiZXh0O1xuXHRcdFx0cGF0aCA9IHBhdGgucmVwbGFjZSgvc2hlZXQwXFwuLyxcInNoZWV0LlwiKTtcblx0XHR9XG5cdFx0cmVsc1BhdGggPSBwYXRoLnJlcGxhY2UoL14oLiopKFxcLykoW15cXC9dKikkLywgXCIkMS9fcmVscy8kMy5yZWxzXCIpO1xuXHRcdGlmKG9wdHMgJiYgb3B0cy5zaGVldHMgIT0gbnVsbCkgc3dpdGNoKHR5cGVvZiBvcHRzLnNoZWV0cykge1xuXHRcdFx0Y2FzZSBcIm51bWJlclwiOiBpZihpICE9IG9wdHMuc2hlZXRzKSBjb250aW51ZSB3c2xvb3A7IGJyZWFrO1xuXHRcdFx0Y2FzZSBcInN0cmluZ1wiOiBpZihwcm9wcy5TaGVldE5hbWVzW2ldLnRvTG93ZXJDYXNlKCkgIT0gb3B0cy5zaGVldHMudG9Mb3dlckNhc2UoKSkgY29udGludWUgd3Nsb29wOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IGlmKEFycmF5LmlzQXJyYXkgJiYgQXJyYXkuaXNBcnJheShvcHRzLnNoZWV0cykpIHtcblx0XHRcdFx0dmFyIHNuanNlZW4gPSBmYWxzZTtcblx0XHRcdFx0Zm9yKHZhciBzbmogPSAwOyBzbmogIT0gb3B0cy5zaGVldHMubGVuZ3RoOyArK3Nuaikge1xuXHRcdFx0XHRcdGlmKHR5cGVvZiBvcHRzLnNoZWV0c1tzbmpdID09IFwibnVtYmVyXCIgJiYgb3B0cy5zaGVldHNbc25qXSA9PSBpKSBzbmpzZWVuPTE7XG5cdFx0XHRcdFx0aWYodHlwZW9mIG9wdHMuc2hlZXRzW3Nual0gPT0gXCJzdHJpbmdcIiAmJiBvcHRzLnNoZWV0c1tzbmpdLnRvTG93ZXJDYXNlKCkgPT0gcHJvcHMuU2hlZXROYW1lc1tpXS50b0xvd2VyQ2FzZSgpKSBzbmpzZWVuID0gMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZighc25qc2VlbikgY29udGludWUgd3Nsb29wO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRzYWZlX3BhcnNlX3NoZWV0KHppcCwgcGF0aCwgcmVsc1BhdGgsIHByb3BzLlNoZWV0TmFtZXNbaV0sIGksIHNoZWV0UmVscywgc2hlZXRzLCBzdHlwZSwgb3B0cywgd2IsIHRoZW1lcywgc3R5bGVzKTtcblx0fVxuXG5cdG91dCA9ICh7XG5cdFx0RGlyZWN0b3J5OiBkaXIsXG5cdFx0V29ya2Jvb2s6IHdiLFxuXHRcdFByb3BzOiBwcm9wcyxcblx0XHRDdXN0cHJvcHM6IGN1c3Rwcm9wcyxcblx0XHREZXBzOiBkZXBzLFxuXHRcdFNoZWV0czogc2hlZXRzLFxuXHRcdFNoZWV0TmFtZXM6IHByb3BzLlNoZWV0TmFtZXMsXG5cdFx0U3RyaW5nczogc3Rycyxcblx0XHRTdHlsZXM6IHN0eWxlcyxcblx0XHRUaGVtZXM6IHRoZW1lcyxcblx0XHRTU0Y6IFNTRi5nZXRfdGFibGUoKVxuXHR9KTtcblx0aWYob3B0cyAmJiBvcHRzLmJvb2tGaWxlcykge1xuXHRcdGlmKHppcC5maWxlcykge1xuXHRcdFx0b3V0LmtleXMgPSBlbnRyaWVzO1xuXHRcdFx0b3V0LmZpbGVzID0gemlwLmZpbGVzO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvdXQua2V5cyA9IFtdO1xuXHRcdFx0b3V0LmZpbGVzID0ge307XG5cdFx0XHR6aXAuRnVsbFBhdGhzLmZvckVhY2goZnVuY3Rpb24ocCwgaWR4KSB7XG5cdFx0XHRcdHAgPSBwLnJlcGxhY2UoL15Sb290IEVudHJ5W1xcL10vLCBcIlwiKTtcblx0XHRcdFx0b3V0LmtleXMucHVzaChwKTtcblx0XHRcdFx0b3V0LmZpbGVzW3BdID0gemlwLkZpbGVJbmRleFtpZHhdO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cdGlmKG9wdHMgJiYgb3B0cy5ib29rVkJBKSB7XG5cdFx0aWYoZGlyLnZiYS5sZW5ndGggPiAwKSBvdXQudmJhcmF3ID0gZ2V0emlwZGF0YSh6aXAsc3RyaXBfZnJvbnRfc2xhc2goZGlyLnZiYVswXSksdHJ1ZSk7XG5cdFx0ZWxzZSBpZihkaXIuZGVmYXVsdHMgJiYgZGlyLmRlZmF1bHRzLmJpbiA9PT0gQ1RfVkJBKSBvdXQudmJhcmF3ID0gZ2V0emlwZGF0YSh6aXAsICd4bC92YmFQcm9qZWN0LmJpbicsdHJ1ZSk7XG5cdH1cblx0cmV0dXJuIG91dDtcbn1cblxuLyogW01TLU9GRkNSWVBUT10gMi4xLjEgKi9cbmZ1bmN0aW9uIHBhcnNlX3hsc3hjZmIoY2ZiLCBfb3B0cykge1xuXHR2YXIgb3B0cyA9IF9vcHRzIHx8IHt9O1xuXHR2YXIgZiA9ICdXb3JrYm9vaycsIGRhdGEgPSBDRkIuZmluZChjZmIsIGYpO1xuXHR0cnkge1xuXHRmID0gJy8hRGF0YVNwYWNlcy9WZXJzaW9uJztcblx0ZGF0YSA9IENGQi5maW5kKGNmYiwgZik7IGlmKCFkYXRhIHx8ICFkYXRhLmNvbnRlbnQpIHRocm93IG5ldyBFcnJvcihcIkVDTUEtMzc2IEVuY3J5cHRlZCBmaWxlIG1pc3NpbmcgXCIgKyBmKTtcblx0Lyp2YXIgdmVyc2lvbiA9ICovcGFyc2VfRGF0YVNwYWNlVmVyc2lvbkluZm8oZGF0YS5jb250ZW50KTtcblxuXHQvKiAyLjMuNC4xICovXG5cdGYgPSAnLyFEYXRhU3BhY2VzL0RhdGFTcGFjZU1hcCc7XG5cdGRhdGEgPSBDRkIuZmluZChjZmIsIGYpOyBpZighZGF0YSB8fCAhZGF0YS5jb250ZW50KSB0aHJvdyBuZXcgRXJyb3IoXCJFQ01BLTM3NiBFbmNyeXB0ZWQgZmlsZSBtaXNzaW5nIFwiICsgZik7XG5cdHZhciBkc20gPSBwYXJzZV9EYXRhU3BhY2VNYXAoZGF0YS5jb250ZW50KTtcblx0aWYoZHNtLmxlbmd0aCAhPT0gMSB8fCBkc21bMF0uY29tcHMubGVuZ3RoICE9PSAxIHx8IGRzbVswXS5jb21wc1swXS50ICE9PSAwIHx8IGRzbVswXS5uYW1lICE9PSBcIlN0cm9uZ0VuY3J5cHRpb25EYXRhU3BhY2VcIiB8fCBkc21bMF0uY29tcHNbMF0udiAhPT0gXCJFbmNyeXB0ZWRQYWNrYWdlXCIpXG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiRUNNQS0zNzYgRW5jcnlwdGVkIGZpbGUgYmFkIFwiICsgZik7XG5cblx0LyogMi4zLjQuMiAqL1xuXHRmID0gJy8hRGF0YVNwYWNlcy9EYXRhU3BhY2VJbmZvL1N0cm9uZ0VuY3J5cHRpb25EYXRhU3BhY2UnO1xuXHRkYXRhID0gQ0ZCLmZpbmQoY2ZiLCBmKTsgaWYoIWRhdGEgfHwgIWRhdGEuY29udGVudCkgdGhyb3cgbmV3IEVycm9yKFwiRUNNQS0zNzYgRW5jcnlwdGVkIGZpbGUgbWlzc2luZyBcIiArIGYpO1xuXHR2YXIgc2VkcyA9IHBhcnNlX0RhdGFTcGFjZURlZmluaXRpb24oZGF0YS5jb250ZW50KTtcblx0aWYoc2Vkcy5sZW5ndGggIT0gMSB8fCBzZWRzWzBdICE9IFwiU3Ryb25nRW5jcnlwdGlvblRyYW5zZm9ybVwiKVxuXHRcdHRocm93IG5ldyBFcnJvcihcIkVDTUEtMzc2IEVuY3J5cHRlZCBmaWxlIGJhZCBcIiArIGYpO1xuXG5cdC8qIDIuMy40LjMgKi9cblx0ZiA9ICcvIURhdGFTcGFjZXMvVHJhbnNmb3JtSW5mby9TdHJvbmdFbmNyeXB0aW9uVHJhbnNmb3JtLyFQcmltYXJ5Jztcblx0ZGF0YSA9IENGQi5maW5kKGNmYiwgZik7IGlmKCFkYXRhIHx8ICFkYXRhLmNvbnRlbnQpIHRocm93IG5ldyBFcnJvcihcIkVDTUEtMzc2IEVuY3J5cHRlZCBmaWxlIG1pc3NpbmcgXCIgKyBmKTtcblx0Lyp2YXIgaGRyID0gKi9wYXJzZV9QcmltYXJ5KGRhdGEuY29udGVudCk7XG5cdH0gY2F0Y2goZSkge31cblxuXHRmID0gJy9FbmNyeXB0aW9uSW5mbyc7XG5cdGRhdGEgPSBDRkIuZmluZChjZmIsIGYpOyBpZighZGF0YSB8fCAhZGF0YS5jb250ZW50KSB0aHJvdyBuZXcgRXJyb3IoXCJFQ01BLTM3NiBFbmNyeXB0ZWQgZmlsZSBtaXNzaW5nIFwiICsgZik7XG5cdHZhciBlaW5mbyA9IHBhcnNlX0VuY3J5cHRpb25JbmZvKGRhdGEuY29udGVudCk7XG5cblx0LyogMi4zLjQuNCAqL1xuXHRmID0gJy9FbmNyeXB0ZWRQYWNrYWdlJztcblx0ZGF0YSA9IENGQi5maW5kKGNmYiwgZik7IGlmKCFkYXRhIHx8ICFkYXRhLmNvbnRlbnQpIHRocm93IG5ldyBFcnJvcihcIkVDTUEtMzc2IEVuY3J5cHRlZCBmaWxlIG1pc3NpbmcgXCIgKyBmKTtcblxuLypnbG9iYWwgZGVjcnlwdF9hZ2lsZSAqL1xuaWYoZWluZm9bMF0gPT0gMHgwNCAmJiB0eXBlb2YgZGVjcnlwdF9hZ2lsZSAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiBkZWNyeXB0X2FnaWxlKGVpbmZvWzFdLCBkYXRhLmNvbnRlbnQsIG9wdHMucGFzc3dvcmQgfHwgXCJcIiwgb3B0cyk7XG4vKmdsb2JhbCBkZWNyeXB0X3N0ZDc2ICovXG5pZihlaW5mb1swXSA9PSAweDAyICYmIHR5cGVvZiBkZWNyeXB0X3N0ZDc2ICE9PSAndW5kZWZpbmVkJykgcmV0dXJuIGRlY3J5cHRfc3RkNzYoZWluZm9bMV0sIGRhdGEuY29udGVudCwgb3B0cy5wYXNzd29yZCB8fCBcIlwiLCBvcHRzKTtcblx0dGhyb3cgbmV3IEVycm9yKFwiRmlsZSBpcyBwYXNzd29yZC1wcm90ZWN0ZWRcIik7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX3ppcCh3Yiwgb3B0cykge1xuXHRfc2hhcGVpZCA9IDEwMjQ7XG5cdGlmKG9wdHMuYm9va1R5cGUgPT0gXCJvZHNcIikgcmV0dXJuIHdyaXRlX29kcyh3Yiwgb3B0cyk7XG5cdGlmKHdiICYmICF3Yi5TU0YpIHtcblx0XHR3Yi5TU0YgPSBTU0YuZ2V0X3RhYmxlKCk7XG5cdH1cblx0aWYod2IgJiYgd2IuU1NGKSB7XG5cdFx0bWFrZV9zc2YoU1NGKTsgU1NGLmxvYWRfdGFibGUod2IuU1NGKTtcblx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdG9wdHMucmV2c3NmID0gZXZlcnRfbnVtKHdiLlNTRik7IG9wdHMucmV2c3NmW3diLlNTRls2NTUzNV1dID0gMDtcblx0XHRvcHRzLnNzZiA9IHdiLlNTRjtcblx0fVxuXHRvcHRzLnJlbHMgPSB7fTsgb3B0cy53YnJlbHMgPSB7fTtcblx0b3B0cy5TdHJpbmdzID0gW107IG9wdHMuU3RyaW5ncy5Db3VudCA9IDA7IG9wdHMuU3RyaW5ncy5VbmlxdWUgPSAwO1xuXHRpZihicm93c2VyX2hhc19NYXApIG9wdHMucmV2U3RyaW5ncyA9IG5ldyBNYXAoKTtcblx0ZWxzZSB7IG9wdHMucmV2U3RyaW5ncyA9IHt9OyBvcHRzLnJldlN0cmluZ3MuZm9vID0gW107IGRlbGV0ZSBvcHRzLnJldlN0cmluZ3MuZm9vOyB9XG5cdHZhciB3YmV4dCA9IG9wdHMuYm9va1R5cGUgPT0gXCJ4bHNiXCIgPyBcImJpblwiIDogXCJ4bWxcIjtcblx0dmFyIHZiYWZtdCA9IFZCQUZNVFMuaW5kZXhPZihvcHRzLmJvb2tUeXBlKSA+IC0xO1xuXHR2YXIgY3QgPSBuZXdfY3QoKTtcblx0Zml4X3dyaXRlX29wdHMob3B0cyA9IG9wdHMgfHwge30pO1xuXHR2YXIgemlwID0gemlwX25ldygpO1xuXHR2YXIgZiA9IFwiXCIsIHJJZCA9IDA7XG5cblx0b3B0cy5jZWxsWGZzID0gW107XG5cdGdldF9jZWxsX3N0eWxlKG9wdHMuY2VsbFhmcywge30sIHtyZXZzc2Y6e1wiR2VuZXJhbFwiOjB9fSk7XG5cblx0aWYoIXdiLlByb3BzKSB3Yi5Qcm9wcyA9IHt9O1xuXG5cdGYgPSBcImRvY1Byb3BzL2NvcmUueG1sXCI7XG5cdHppcF9hZGRfZmlsZSh6aXAsIGYsIHdyaXRlX2NvcmVfcHJvcHMod2IuUHJvcHMsIG9wdHMpKTtcblx0Y3QuY29yZXByb3BzLnB1c2goZik7XG5cdGFkZF9yZWxzKG9wdHMucmVscywgMiwgZiwgUkVMUy5DT1JFX1BST1BTKTtcblxuZiA9IFwiZG9jUHJvcHMvYXBwLnhtbFwiO1xuXHRpZih3Yi5Qcm9wcyAmJiB3Yi5Qcm9wcy5TaGVldE5hbWVzKXsvKiBlbXB0eSAqL31cblx0ZWxzZSBpZighd2IuV29ya2Jvb2sgfHwgIXdiLldvcmtib29rLlNoZWV0cykgd2IuUHJvcHMuU2hlZXROYW1lcyA9IHdiLlNoZWV0TmFtZXM7XG5cdGVsc2Uge1xuXHRcdHZhciBfc24gPSBbXTtcblx0XHRmb3IodmFyIF9pID0gMDsgX2kgPCB3Yi5TaGVldE5hbWVzLmxlbmd0aDsgKytfaSlcblx0XHRcdGlmKCh3Yi5Xb3JrYm9vay5TaGVldHNbX2ldfHx7fSkuSGlkZGVuICE9IDIpIF9zbi5wdXNoKHdiLlNoZWV0TmFtZXNbX2ldKTtcblx0XHR3Yi5Qcm9wcy5TaGVldE5hbWVzID0gX3NuO1xuXHR9XG5cdHdiLlByb3BzLldvcmtzaGVldHMgPSB3Yi5Qcm9wcy5TaGVldE5hbWVzLmxlbmd0aDtcblx0emlwX2FkZF9maWxlKHppcCwgZiwgd3JpdGVfZXh0X3Byb3BzKHdiLlByb3BzLCBvcHRzKSk7XG5cdGN0LmV4dHByb3BzLnB1c2goZik7XG5cdGFkZF9yZWxzKG9wdHMucmVscywgMywgZiwgUkVMUy5FWFRfUFJPUFMpO1xuXG5cdGlmKHdiLkN1c3Rwcm9wcyAhPT0gd2IuUHJvcHMgJiYga2V5cyh3Yi5DdXN0cHJvcHN8fHt9KS5sZW5ndGggPiAwKSB7XG5cdFx0ZiA9IFwiZG9jUHJvcHMvY3VzdG9tLnhtbFwiO1xuXHRcdHppcF9hZGRfZmlsZSh6aXAsIGYsIHdyaXRlX2N1c3RfcHJvcHMod2IuQ3VzdHByb3BzLCBvcHRzKSk7XG5cdFx0Y3QuY3VzdHByb3BzLnB1c2goZik7XG5cdFx0YWRkX3JlbHMob3B0cy5yZWxzLCA0LCBmLCBSRUxTLkNVU1RfUFJPUFMpO1xuXHR9XG5cblx0Zm9yKHJJZD0xO3JJZCA8PSB3Yi5TaGVldE5hbWVzLmxlbmd0aDsgKytySWQpIHtcblx0XHR2YXIgd3NyZWxzID0geychaWQnOnt9fTtcblx0XHR2YXIgd3MgPSB3Yi5TaGVldHNbd2IuU2hlZXROYW1lc1tySWQtMV1dO1xuXHRcdHZhciBfdHlwZSA9ICh3cyB8fCB7fSlbXCIhdHlwZVwiXSB8fCBcInNoZWV0XCI7XG5cdFx0c3dpdGNoKF90eXBlKSB7XG5cdFx0Y2FzZSBcImNoYXJ0XCI6XG5cdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0ZGVmYXVsdDpcblx0XHRcdGYgPSBcInhsL3dvcmtzaGVldHMvc2hlZXRcIiArIHJJZCArIFwiLlwiICsgd2JleHQ7XG5cdFx0XHR6aXBfYWRkX2ZpbGUoemlwLCBmLCB3cml0ZV93cyhySWQtMSwgZiwgb3B0cywgd2IsIHdzcmVscykpO1xuXHRcdFx0Y3Quc2hlZXRzLnB1c2goZik7XG5cdFx0XHRhZGRfcmVscyhvcHRzLndicmVscywgLTEsIFwid29ya3NoZWV0cy9zaGVldFwiICsgcklkICsgXCIuXCIgKyB3YmV4dCwgUkVMUy5XU1swXSk7XG5cdFx0fVxuXG5cdFx0aWYod3MpIHtcblx0XHRcdHZhciBjb21tZW50cyA9IHdzWychY29tbWVudHMnXTtcblx0XHRcdHZhciBuZWVkX3ZtbCA9IGZhbHNlO1xuXHRcdFx0aWYoY29tbWVudHMgJiYgY29tbWVudHMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHR2YXIgY2YgPSBcInhsL2NvbW1lbnRzXCIgKyBySWQgKyBcIi5cIiArIHdiZXh0O1xuXHRcdFx0XHR6aXBfYWRkX2ZpbGUoemlwLCBjZiwgd3JpdGVfY21udChjb21tZW50cywgY2YsIG9wdHMpKTtcblx0XHRcdFx0Y3QuY29tbWVudHMucHVzaChjZik7XG5cdFx0XHRcdGFkZF9yZWxzKHdzcmVscywgLTEsIFwiLi4vY29tbWVudHNcIiArIHJJZCArIFwiLlwiICsgd2JleHQsIFJFTFMuQ01OVCk7XG5cdFx0XHRcdG5lZWRfdm1sID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdGlmKHdzWychbGVnYWN5J10pIHtcblx0XHRcdFx0aWYobmVlZF92bWwpIHppcF9hZGRfZmlsZSh6aXAsIFwieGwvZHJhd2luZ3Mvdm1sRHJhd2luZ1wiICsgKHJJZCkgKyBcIi52bWxcIiwgd3JpdGVfY29tbWVudHNfdm1sKHJJZCwgd3NbJyFjb21tZW50cyddKSk7XG5cdFx0XHR9XG5cdFx0XHRkZWxldGUgd3NbJyFjb21tZW50cyddO1xuXHRcdFx0ZGVsZXRlIHdzWychbGVnYWN5J107XG5cdFx0fVxuXG5cdFx0aWYod3NyZWxzWychaWQnXS5ySWQxKSB6aXBfYWRkX2ZpbGUoemlwLCBnZXRfcmVsc19wYXRoKGYpLCB3cml0ZV9yZWxzKHdzcmVscykpO1xuXHR9XG5cblx0aWYob3B0cy5TdHJpbmdzICE9IG51bGwgJiYgb3B0cy5TdHJpbmdzLmxlbmd0aCA+IDApIHtcblx0XHRmID0gXCJ4bC9zaGFyZWRTdHJpbmdzLlwiICsgd2JleHQ7XG5cdFx0emlwX2FkZF9maWxlKHppcCwgZiwgd3JpdGVfc3N0KG9wdHMuU3RyaW5ncywgZiwgb3B0cykpO1xuXHRcdGN0LnN0cnMucHVzaChmKTtcblx0XHRhZGRfcmVscyhvcHRzLndicmVscywgLTEsIFwic2hhcmVkU3RyaW5ncy5cIiArIHdiZXh0LCBSRUxTLlNTVCk7XG5cdH1cblxuXHRmID0gXCJ4bC93b3JrYm9vay5cIiArIHdiZXh0O1xuXHR6aXBfYWRkX2ZpbGUoemlwLCBmLCB3cml0ZV93Yih3YiwgZiwgb3B0cykpO1xuXHRjdC53b3JrYm9va3MucHVzaChmKTtcblx0YWRkX3JlbHMob3B0cy5yZWxzLCAxLCBmLCBSRUxTLldCKTtcblxuXHQvKiBUT0RPOiBzb21ldGhpbmcgbW9yZSBpbnRlbGxpZ2VudCB3aXRoIHRoZW1lcyAqL1xuXG5cdGYgPSBcInhsL3RoZW1lL3RoZW1lMS54bWxcIjtcblx0emlwX2FkZF9maWxlKHppcCwgZiwgd3JpdGVfdGhlbWUod2IuVGhlbWVzLCBvcHRzKSk7XG5cdGN0LnRoZW1lcy5wdXNoKGYpO1xuXHRhZGRfcmVscyhvcHRzLndicmVscywgLTEsIFwidGhlbWUvdGhlbWUxLnhtbFwiLCBSRUxTLlRIRU1FKTtcblxuXHQvKiBUT0RPOiBzb21ldGhpbmcgbW9yZSBpbnRlbGxpZ2VudCB3aXRoIHN0eWxlcyAqL1xuXG5cdGYgPSBcInhsL3N0eWxlcy5cIiArIHdiZXh0O1xuXHR6aXBfYWRkX2ZpbGUoemlwLCBmLCB3cml0ZV9zdHkod2IsIGYsIG9wdHMpKTtcblx0Y3Quc3R5bGVzLnB1c2goZik7XG5cdGFkZF9yZWxzKG9wdHMud2JyZWxzLCAtMSwgXCJzdHlsZXMuXCIgKyB3YmV4dCwgUkVMUy5TVFkpO1xuXG5cdGlmKHdiLnZiYXJhdyAmJiB2YmFmbXQpIHtcblx0XHRmID0gXCJ4bC92YmFQcm9qZWN0LmJpblwiO1xuXHRcdHppcF9hZGRfZmlsZSh6aXAsIGYsIHdiLnZiYXJhdyk7XG5cdFx0Y3QudmJhLnB1c2goZik7XG5cdFx0YWRkX3JlbHMob3B0cy53YnJlbHMsIC0xLCBcInZiYVByb2plY3QuYmluXCIsIFJFTFMuVkJBKTtcblx0fVxuXG5cdHppcF9hZGRfZmlsZSh6aXAsIFwiW0NvbnRlbnRfVHlwZXNdLnhtbFwiLCB3cml0ZV9jdChjdCwgb3B0cykpO1xuXHR6aXBfYWRkX2ZpbGUoemlwLCAnX3JlbHMvLnJlbHMnLCB3cml0ZV9yZWxzKG9wdHMucmVscykpO1xuXHR6aXBfYWRkX2ZpbGUoemlwLCAneGwvX3JlbHMvd29ya2Jvb2suJyArIHdiZXh0ICsgJy5yZWxzJywgd3JpdGVfcmVscyhvcHRzLndicmVscykpO1xuXG5cdGRlbGV0ZSBvcHRzLnJldnNzZjsgZGVsZXRlIG9wdHMuc3NmO1xuXHRyZXR1cm4gemlwO1xufVxuZnVuY3Rpb24gZmlyc3RieXRlKGYsbykge1xuXHR2YXIgeCA9IFwiXCI7XG5cdHN3aXRjaCgob3x8e30pLnR5cGUgfHwgXCJiYXNlNjRcIikge1xuXHRcdGNhc2UgJ2J1ZmZlcic6IHJldHVybiBbZlswXSwgZlsxXSwgZlsyXSwgZlszXSwgZls0XSwgZls1XSwgZls2XSwgZls3XV07XG5cdFx0Y2FzZSAnYmFzZTY0JzogeCA9IEJhc2U2NC5kZWNvZGUoZi5zbGljZSgwLDEyKSk7IGJyZWFrO1xuXHRcdGNhc2UgJ2JpbmFyeSc6IHggPSBmOyBicmVhaztcblx0XHRjYXNlICdhcnJheSc6ICByZXR1cm4gW2ZbMF0sIGZbMV0sIGZbMl0sIGZbM10sIGZbNF0sIGZbNV0sIGZbNl0sIGZbN11dO1xuXHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCB0eXBlIFwiICsgKG8gJiYgby50eXBlIHx8IFwidW5kZWZpbmVkXCIpKTtcblx0fVxuXHRyZXR1cm4gW3guY2hhckNvZGVBdCgwKSwgeC5jaGFyQ29kZUF0KDEpLCB4LmNoYXJDb2RlQXQoMiksIHguY2hhckNvZGVBdCgzKSwgeC5jaGFyQ29kZUF0KDQpLCB4LmNoYXJDb2RlQXQoNSksIHguY2hhckNvZGVBdCg2KSwgeC5jaGFyQ29kZUF0KDcpXTtcbn1cblxuZnVuY3Rpb24gcmVhZF9jZmIoY2ZiLCBvcHRzKSB7XG5cdGlmKENGQi5maW5kKGNmYiwgXCJFbmNyeXB0ZWRQYWNrYWdlXCIpKSByZXR1cm4gcGFyc2VfeGxzeGNmYihjZmIsIG9wdHMpO1xuXHRyZXR1cm4gcGFyc2VfeGxzY2ZiKGNmYiwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIHJlYWRfemlwKGRhdGEsIG9wdHMpIHtcblx0dmFyIHppcCwgZCA9IGRhdGE7XG5cdHZhciBvID0gb3B0c3x8e307XG5cdGlmKCFvLnR5cGUpIG8udHlwZSA9IChoYXNfYnVmICYmIEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkgPyBcImJ1ZmZlclwiIDogXCJiYXNlNjRcIjtcblx0emlwID0gemlwX3JlYWQoZCwgbyk7XG5cdHJldHVybiBwYXJzZV96aXAoemlwLCBvKTtcbn1cblxuZnVuY3Rpb24gcmVhZF9wbGFpbnRleHQoZGF0YSwgbykge1xuXHR2YXIgaSA9IDA7XG5cdG1haW46IHdoaWxlKGkgPCBkYXRhLmxlbmd0aCkgc3dpdGNoKGRhdGEuY2hhckNvZGVBdChpKSkge1xuXHRcdGNhc2UgMHgwQTogY2FzZSAweDBEOiBjYXNlIDB4MjA6ICsraTsgYnJlYWs7XG5cdFx0Y2FzZSAweDNDOiByZXR1cm4gcGFyc2VfeGxtbChkYXRhLnNsaWNlKGkpLG8pO1xuXHRcdGRlZmF1bHQ6IGJyZWFrIG1haW47XG5cdH1cblx0cmV0dXJuIFBSTi50b193b3JrYm9vayhkYXRhLCBvKTtcbn1cblxuZnVuY3Rpb24gcmVhZF9wbGFpbnRleHRfcmF3KGRhdGEsIG8pIHtcblx0dmFyIHN0ciA9IFwiXCIsIGJ5dGVzID0gZmlyc3RieXRlKGRhdGEsIG8pO1xuXHRzd2l0Y2goby50eXBlKSB7XG5cdFx0Y2FzZSAnYmFzZTY0Jzogc3RyID0gQmFzZTY0LmRlY29kZShkYXRhKTsgYnJlYWs7XG5cdFx0Y2FzZSAnYmluYXJ5Jzogc3RyID0gZGF0YTsgYnJlYWs7XG5cdFx0Y2FzZSAnYnVmZmVyJzogc3RyID0gZGF0YS50b1N0cmluZygnYmluYXJ5Jyk7IGJyZWFrO1xuXHRcdGNhc2UgJ2FycmF5Jzogc3RyID0gY2Myc3RyKGRhdGEpOyBicmVhaztcblx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgdHlwZSBcIiArIG8udHlwZSk7XG5cdH1cblx0aWYoYnl0ZXNbMF0gPT0gMHhFRiAmJiBieXRlc1sxXSA9PSAweEJCICYmIGJ5dGVzWzJdID09IDB4QkYpIHN0ciA9IHV0ZjhyZWFkKHN0cik7XG5cdHJldHVybiByZWFkX3BsYWludGV4dChzdHIsIG8pO1xufVxuXG5mdW5jdGlvbiByZWFkX3V0ZjE2KGRhdGEsIG8pIHtcblx0dmFyIGQgPSBkYXRhO1xuXHRpZihvLnR5cGUgPT0gJ2Jhc2U2NCcpIGQgPSBCYXNlNjQuZGVjb2RlKGQpO1xuXHRkID0gY3B0YWJsZS51dGlscy5kZWNvZGUoMTIwMCwgZC5zbGljZSgyKSwgJ3N0cicpO1xuXHRvLnR5cGUgPSBcImJpbmFyeVwiO1xuXHRyZXR1cm4gcmVhZF9wbGFpbnRleHQoZCwgbyk7XG59XG5cbmZ1bmN0aW9uIGJzdHJpZnkoZGF0YSkge1xuXHRyZXR1cm4gIWRhdGEubWF0Y2goL1teXFx4MDAtXFx4N0ZdLykgPyBkYXRhIDogdXRmOHdyaXRlKGRhdGEpO1xufVxuXG5mdW5jdGlvbiByZWFkX3BybihkYXRhLCBkLCBvLCBzdHIpIHtcblx0aWYoc3RyKSB7IG8udHlwZSA9IFwic3RyaW5nXCI7IHJldHVybiBQUk4udG9fd29ya2Jvb2soZGF0YSwgbyk7IH1cblx0cmV0dXJuIFBSTi50b193b3JrYm9vayhkLCBvKTtcbn1cblxuZnVuY3Rpb24gcmVhZFN5bmMoZGF0YSwgb3B0cykge1xuXHRyZXNldF9jcCgpO1xuXHR2YXIgbyA9IG9wdHN8fHt9O1xuXHRpZih0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgcmV0dXJuIHJlYWRTeW5jKG5ldyBVaW50OEFycmF5KGRhdGEpLCAobyA9IGR1cChvKSwgby50eXBlID0gXCJhcnJheVwiLCBvKSk7XG5cdHZhciBkID0gZGF0YSwgbiA9IFswLDAsMCwwXSwgc3RyID0gZmFsc2U7XG5cdGlmKG8uY2VsbFN0eWxlcykgeyBvLmNlbGxORiA9IHRydWU7IG8uc2hlZXRTdHVicyA9IHRydWU7IH1cblx0X3NzZm9wdHMgPSB7fTtcblx0aWYoby5kYXRlTkYpIF9zc2ZvcHRzLmRhdGVORiA9IG8uZGF0ZU5GO1xuXHRpZighby50eXBlKSBvLnR5cGUgPSAoaGFzX2J1ZiAmJiBCdWZmZXIuaXNCdWZmZXIoZGF0YSkpID8gXCJidWZmZXJcIiA6IFwiYmFzZTY0XCI7XG5cdGlmKG8udHlwZSA9PSBcImZpbGVcIikgeyBvLnR5cGUgPSBoYXNfYnVmID8gXCJidWZmZXJcIiA6IFwiYmluYXJ5XCI7IGQgPSByZWFkX2JpbmFyeShkYXRhKTsgfVxuXHRpZihvLnR5cGUgPT0gXCJzdHJpbmdcIikgeyBzdHIgPSB0cnVlOyBvLnR5cGUgPSBcImJpbmFyeVwiOyBvLmNvZGVwYWdlID0gNjUwMDE7IGQgPSBic3RyaWZ5KGRhdGEpOyB9XG5cdGlmKG8udHlwZSA9PSAnYXJyYXknICYmIHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSAmJiB0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHR2YXIgYWI9bmV3IEFycmF5QnVmZmVyKDMpLCB2dT1uZXcgVWludDhBcnJheShhYik7IHZ1LmZvbz1cImJhclwiO1xuXHRcdC8vICRGbG93SWdub3JlXG5cdFx0aWYoIXZ1LmZvbykge289ZHVwKG8pOyBvLnR5cGU9J2FycmF5JzsgcmV0dXJuIHJlYWRTeW5jKGFiMmEoZCksIG8pO31cblx0fVxuXHRzd2l0Y2goKG4gPSBmaXJzdGJ5dGUoZCwgbykpWzBdKSB7XG5cdFx0Y2FzZSAweEQwOiBpZihuWzFdID09PSAweENGICYmIG5bMl0gPT09IDB4MTEgJiYgblszXSA9PT0gMHhFMCAmJiBuWzRdID09PSAweEExICYmIG5bNV0gPT09IDB4QjEgJiYgbls2XSA9PT0gMHgxQSAmJiBuWzddID09PSAweEUxKSByZXR1cm4gcmVhZF9jZmIoQ0ZCLnJlYWQoZCwgbyksIG8pOyBicmVhaztcblx0XHRjYXNlIDB4MDk6IGlmKG5bMV0gPD0gMHgwOCkgcmV0dXJuIHBhcnNlX3hsc2NmYihkLCBvKTsgYnJlYWs7XG5cdFx0Y2FzZSAweDNDOiByZXR1cm4gcGFyc2VfeGxtbChkLCBvKTtcblx0XHRjYXNlIDB4NDk6XG5cdFx0XHRpZihuWzFdID09PSAweDQ5ICYmIG5bMl0gPT09IDB4MmEgJiYgblszXSA9PT0gMHgwMCkgdGhyb3cgbmV3IEVycm9yKFwiVElGRiBJbWFnZSBGaWxlIGlzIG5vdCBhIHNwcmVhZHNoZWV0XCIpO1xuXHRcdFx0aWYoblsxXSA9PT0gMHg0NCkgcmV0dXJuIHJlYWRfd2JfSUQoZCwgbyk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIDB4NTQ6IGlmKG5bMV0gPT09IDB4NDEgJiYgblsyXSA9PT0gMHg0MiAmJiBuWzNdID09PSAweDRDKSByZXR1cm4gRElGLnRvX3dvcmtib29rKGQsIG8pOyBicmVhaztcblx0XHRjYXNlIDB4NTA6IHJldHVybiAoblsxXSA9PT0gMHg0QiAmJiBuWzJdIDwgMHgwOSAmJiBuWzNdIDwgMHgwOSkgPyByZWFkX3ppcChkLCBvKSA6IHJlYWRfcHJuKGRhdGEsIGQsIG8sIHN0cik7XG5cdFx0Y2FzZSAweEVGOiByZXR1cm4gblszXSA9PT0gMHgzQyA/IHBhcnNlX3hsbWwoZCwgbykgOiByZWFkX3BybihkYXRhLCBkLCBvLCBzdHIpO1xuXHRcdGNhc2UgMHhGRjogaWYoblsxXSA9PT0gMHhGRSkgeyByZXR1cm4gcmVhZF91dGYxNihkLCBvKTsgfSBicmVhaztcblx0XHRjYXNlIDB4MDA6IGlmKG5bMV0gPT09IDB4MDAgJiYgblsyXSA+PSAweDAyICYmIG5bM10gPT09IDB4MDApIHJldHVybiBXS18udG9fd29ya2Jvb2soZCwgbyk7IGJyZWFrO1xuXHRcdGNhc2UgMHgwMzogY2FzZSAweDgzOiBjYXNlIDB4OEI6IGNhc2UgMHg4QzogcmV0dXJuIERCRi50b193b3JrYm9vayhkLCBvKTtcblx0XHRjYXNlIDB4N0I6IGlmKG5bMV0gPT09IDB4NUMgJiYgblsyXSA9PT0gMHg3MiAmJiBuWzNdID09PSAweDc0KSByZXR1cm4gUlRGLnRvX3dvcmtib29rKGQsIG8pOyBicmVhaztcblx0XHRjYXNlIDB4MEE6IGNhc2UgMHgwRDogY2FzZSAweDIwOiByZXR1cm4gcmVhZF9wbGFpbnRleHRfcmF3KGQsIG8pO1xuXHRcdGNhc2UgMHg4OTogaWYoblsxXSA9PT0gMHg1MCAmJiBuWzJdID09PSAweDRFICYmIG5bM10gPT09IDB4NDcpIHRocm93IG5ldyBFcnJvcihcIlBORyBJbWFnZSBGaWxlIGlzIG5vdCBhIHNwcmVhZHNoZWV0XCIpOyBicmVhazsgXG5cdH1cblx0aWYoREJGLnZlcnNpb25zLmluZGV4T2YoblswXSkgPiAtMSAmJiBuWzJdIDw9IDEyICYmIG5bM10gPD0gMzEpIHJldHVybiBEQkYudG9fd29ya2Jvb2soZCwgbyk7XG5cdHJldHVybiByZWFkX3BybihkYXRhLCBkLCBvLCBzdHIpO1xufVxuXG5mdW5jdGlvbiByZWFkRmlsZVN5bmMoZmlsZW5hbWUsIG9wdHMpIHtcblx0dmFyIG8gPSBvcHRzfHx7fTsgby50eXBlID0gJ2ZpbGUnO1xuXHRyZXR1cm4gcmVhZFN5bmMoZmlsZW5hbWUsIG8pO1xufVxuZnVuY3Rpb24gd3JpdGVfY2ZiX2N0cihjZmIsIG8pIHtcblx0c3dpdGNoKG8udHlwZSkge1xuXHRcdGNhc2UgXCJiYXNlNjRcIjogY2FzZSBcImJpbmFyeVwiOiBicmVhaztcblx0XHRjYXNlIFwiYnVmZmVyXCI6IGNhc2UgXCJhcnJheVwiOiBvLnR5cGUgPSBcIlwiOyBicmVhaztcblx0XHRjYXNlIFwiZmlsZVwiOiByZXR1cm4gd3JpdGVfZGwoby5maWxlLCBDRkIud3JpdGUoY2ZiLCB7dHlwZTpoYXNfYnVmID8gJ2J1ZmZlcicgOiBcIlwifSkpO1xuXHRcdGNhc2UgXCJzdHJpbmdcIjogdGhyb3cgbmV3IEVycm9yKFwiJ3N0cmluZycgb3V0cHV0IHR5cGUgaW52YWxpZCBmb3IgJ1wiICsgby5ib29rVHlwZSArIFwiJyBmaWxlc1wiKTtcblx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgdHlwZSBcIiArIG8udHlwZSk7XG5cdH1cblx0cmV0dXJuIENGQi53cml0ZShjZmIsIG8pO1xufVxuXG5mdW5jdGlvbiB3cml0ZV96aXBfdHlwZSh3Yiwgb3B0cykge1xuXHR2YXIgbyA9IGR1cChvcHRzfHx7fSk7XG5cdHZhciB6ID0gd3JpdGVfemlwKHdiLCBvKTtcblx0dmFyIG9vcHRzID0ge307XG5cdGlmKG8uY29tcHJlc3Npb24pIG9vcHRzLmNvbXByZXNzaW9uID0gJ0RFRkxBVEUnO1xuXHRpZihvLnBhc3N3b3JkKSBvb3B0cy50eXBlID0gaGFzX2J1ZiA/IFwibm9kZWJ1ZmZlclwiIDogXCJzdHJpbmdcIjtcblx0ZWxzZSBzd2l0Y2goby50eXBlKSB7XG5cdFx0Y2FzZSBcImJhc2U2NFwiOiBvb3B0cy50eXBlID0gXCJiYXNlNjRcIjsgYnJlYWs7XG5cdFx0Y2FzZSBcImJpbmFyeVwiOiBvb3B0cy50eXBlID0gXCJzdHJpbmdcIjsgYnJlYWs7XG5cdFx0Y2FzZSBcInN0cmluZ1wiOiB0aHJvdyBuZXcgRXJyb3IoXCInc3RyaW5nJyBvdXRwdXQgdHlwZSBpbnZhbGlkIGZvciAnXCIgKyBvLmJvb2tUeXBlICsgXCInIGZpbGVzXCIpO1xuXHRcdGNhc2UgXCJidWZmZXJcIjpcblx0XHRjYXNlIFwiZmlsZVwiOiBvb3B0cy50eXBlID0gaGFzX2J1ZiA/IFwibm9kZWJ1ZmZlclwiIDogXCJzdHJpbmdcIjsgYnJlYWs7XG5cdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkIHR5cGUgXCIgKyBvLnR5cGUpO1xuXHR9XG5cdHZhciBvdXQgPSB6LkZ1bGxQYXRocyA/IENGQi53cml0ZSh6LCB7ZmlsZVR5cGU6XCJ6aXBcIiwgdHlwZToge1wibm9kZWJ1ZmZlclwiOiBcImJ1ZmZlclwiLCBcInN0cmluZ1wiOiBcImJpbmFyeVwifVtvb3B0cy50eXBlXSB8fCBvb3B0cy50eXBlfSkgOiB6LmdlbmVyYXRlKG9vcHRzKTtcbi8qanNoaW50IC1XMDgzICovXG5cdGlmKG8ucGFzc3dvcmQgJiYgdHlwZW9mIGVuY3J5cHRfYWdpbGUgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gd3JpdGVfY2ZiX2N0cihlbmNyeXB0X2FnaWxlKG91dCwgby5wYXNzd29yZCksIG8pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4vKmpzaGludCArVzA4MyAqL1xuXHRpZihvLnR5cGUgPT09IFwiZmlsZVwiKSByZXR1cm4gd3JpdGVfZGwoby5maWxlLCBvdXQpO1xuXHRyZXR1cm4gby50eXBlID09IFwic3RyaW5nXCIgPyB1dGY4cmVhZChvdXQpIDogb3V0O1xufVxuXG5mdW5jdGlvbiB3cml0ZV9jZmJfdHlwZSh3Yiwgb3B0cykge1xuXHR2YXIgbyA9IG9wdHN8fHt9O1xuXHR2YXIgY2ZiID0gd3JpdGVfeGxzY2ZiKHdiLCBvKTtcblx0cmV0dXJuIHdyaXRlX2NmYl9jdHIoY2ZiLCBvKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfc3RyaW5nX3R5cGUob3V0LCBvcHRzLCBib20pIHtcblx0aWYoIWJvbSkgYm9tID0gXCJcIjtcblx0dmFyIG8gPSBib20gKyBvdXQ7XG5cdHN3aXRjaChvcHRzLnR5cGUpIHtcblx0XHRjYXNlIFwiYmFzZTY0XCI6IHJldHVybiBCYXNlNjQuZW5jb2RlKHV0Zjh3cml0ZShvKSk7XG5cdFx0Y2FzZSBcImJpbmFyeVwiOiByZXR1cm4gdXRmOHdyaXRlKG8pO1xuXHRcdGNhc2UgXCJzdHJpbmdcIjogcmV0dXJuIG91dDtcblx0XHRjYXNlIFwiZmlsZVwiOiByZXR1cm4gd3JpdGVfZGwob3B0cy5maWxlLCBvLCAndXRmOCcpO1xuXHRcdGNhc2UgXCJidWZmZXJcIjoge1xuXHRcdFx0aWYoaGFzX2J1ZikgcmV0dXJuIEJ1ZmZlcl9mcm9tKG8sICd1dGY4Jyk7XG5cdFx0XHRlbHNlIHJldHVybiB3cml0ZV9zdHJpbmdfdHlwZShvLCB7dHlwZTonYmluYXJ5J30pLnNwbGl0KFwiXCIpLm1hcChmdW5jdGlvbihjKSB7IHJldHVybiBjLmNoYXJDb2RlQXQoMCk7IH0pO1xuXHRcdH1cblx0fVxuXHR0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgdHlwZSBcIiArIG9wdHMudHlwZSk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX3N0eHRfdHlwZShvdXQsIG9wdHMpIHtcblx0c3dpdGNoKG9wdHMudHlwZSkge1xuXHRcdGNhc2UgXCJiYXNlNjRcIjogcmV0dXJuIEJhc2U2NC5lbmNvZGUob3V0KTtcblx0XHRjYXNlIFwiYmluYXJ5XCI6IHJldHVybiBvdXQ7XG5cdFx0Y2FzZSBcInN0cmluZ1wiOiByZXR1cm4gb3V0OyAvKiBvdmVycmlkZSBpbiBzaGVldF90b190eHQgKi9cblx0XHRjYXNlIFwiZmlsZVwiOiByZXR1cm4gd3JpdGVfZGwob3B0cy5maWxlLCBvdXQsICdiaW5hcnknKTtcblx0XHRjYXNlIFwiYnVmZmVyXCI6IHtcblx0XHRcdGlmKGhhc19idWYpIHJldHVybiBCdWZmZXJfZnJvbShvdXQsICdiaW5hcnknKTtcblx0XHRcdGVsc2UgcmV0dXJuIG91dC5zcGxpdChcIlwiKS5tYXAoZnVuY3Rpb24oYykgeyByZXR1cm4gYy5jaGFyQ29kZUF0KDApOyB9KTtcblx0XHR9XG5cdH1cblx0dGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkIHR5cGUgXCIgKyBvcHRzLnR5cGUpO1xufVxuXG4vKiBUT0RPOiB0ZXN0IGNvbnNpc3RlbmN5ICovXG5mdW5jdGlvbiB3cml0ZV9iaW5hcnlfdHlwZShvdXQsIG9wdHMpIHtcblx0c3dpdGNoKG9wdHMudHlwZSkge1xuXHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRjYXNlIFwiYmFzZTY0XCI6XG5cdFx0Y2FzZSBcImJpbmFyeVwiOlxuXHRcdFx0dmFyIGJzdHIgPSBcIlwiO1xuXHRcdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBvdXQubGVuZ3RoOyArK2kpIGJzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShvdXRbaV0pO1xuXHRcdFx0cmV0dXJuIG9wdHMudHlwZSA9PSAnYmFzZTY0JyA/IEJhc2U2NC5lbmNvZGUoYnN0cikgOiBvcHRzLnR5cGUgPT0gJ3N0cmluZycgPyB1dGY4cmVhZChic3RyKSA6IGJzdHI7XG5cdFx0Y2FzZSBcImZpbGVcIjogcmV0dXJuIHdyaXRlX2RsKG9wdHMuZmlsZSwgb3V0KTtcblx0XHRjYXNlIFwiYnVmZmVyXCI6IHJldHVybiBvdXQ7XG5cdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkIHR5cGUgXCIgKyBvcHRzLnR5cGUpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHdyaXRlU3luYyh3Yiwgb3B0cykge1xuXHRyZXNldF9jcCgpO1xuXHRjaGVja193Yih3Yik7XG5cdHZhciBvID0gZHVwKG9wdHN8fHt9KTtcblx0aWYoby5jZWxsU3R5bGVzKSB7IG8uY2VsbE5GID0gdHJ1ZTsgby5zaGVldFN0dWJzID0gdHJ1ZTsgfVxuXHRpZihvLnR5cGUgPT0gXCJhcnJheVwiKSB7IG8udHlwZSA9IFwiYmluYXJ5XCI7IHZhciBvdXQgPSAod3JpdGVTeW5jKHdiLCBvKSk7IG8udHlwZSA9IFwiYXJyYXlcIjsgcmV0dXJuIHMyYWIob3V0KTsgfVxuXHRzd2l0Y2goby5ib29rVHlwZSB8fCAneGxzYicpIHtcblx0XHRjYXNlICd4bWwnOlxuXHRcdGNhc2UgJ3hsbWwnOiByZXR1cm4gd3JpdGVfc3RyaW5nX3R5cGUod3JpdGVfeGxtbCh3YiwgbyksIG8pO1xuXHRcdGNhc2UgJ3Nsayc6XG5cdFx0Y2FzZSAnc3lsayc6IHJldHVybiB3cml0ZV9zdHJpbmdfdHlwZSh3cml0ZV9zbGtfc3RyKHdiLCBvKSwgbyk7XG5cdFx0Y2FzZSAnaHRtJzpcblx0XHRjYXNlICdodG1sJzogcmV0dXJuIHdyaXRlX3N0cmluZ190eXBlKHdyaXRlX2h0bV9zdHIod2IsIG8pLCBvKTtcblx0XHRjYXNlICd0eHQnOiByZXR1cm4gd3JpdGVfc3R4dF90eXBlKHdyaXRlX3R4dF9zdHIod2IsIG8pLCBvKTtcblx0XHRjYXNlICdjc3YnOiByZXR1cm4gd3JpdGVfc3RyaW5nX3R5cGUod3JpdGVfY3N2X3N0cih3YiwgbyksIG8sIFwiXFx1ZmVmZlwiKTtcblx0XHRjYXNlICdkaWYnOiByZXR1cm4gd3JpdGVfc3RyaW5nX3R5cGUod3JpdGVfZGlmX3N0cih3YiwgbyksIG8pO1xuXHRcdGNhc2UgJ2RiZic6IHJldHVybiB3cml0ZV9iaW5hcnlfdHlwZSh3cml0ZV9kYmZfYnVmKHdiLCBvKSwgbyk7XG5cdFx0Y2FzZSAncHJuJzogcmV0dXJuIHdyaXRlX3N0cmluZ190eXBlKHdyaXRlX3Bybl9zdHIod2IsIG8pLCBvKTtcblx0XHRjYXNlICdydGYnOiByZXR1cm4gd3JpdGVfc3RyaW5nX3R5cGUod3JpdGVfcnRmX3N0cih3YiwgbyksIG8pO1xuXHRcdGNhc2UgJ2V0aCc6IHJldHVybiB3cml0ZV9zdHJpbmdfdHlwZSh3cml0ZV9ldGhfc3RyKHdiLCBvKSwgbyk7XG5cdFx0Y2FzZSAnZm9kcyc6IHJldHVybiB3cml0ZV9zdHJpbmdfdHlwZSh3cml0ZV9vZHMod2IsIG8pLCBvKTtcblx0XHRjYXNlICd3azEnOiByZXR1cm4gd3JpdGVfYmluYXJ5X3R5cGUod3JpdGVfd2sxX2J1Zih3YiwgbyksIG8pO1xuXHRcdGNhc2UgJ3drMyc6IHJldHVybiB3cml0ZV9iaW5hcnlfdHlwZShXS18uYm9va190b193azMod2IsIG8pLCBvKTtcblx0XHRjYXNlICdiaWZmMic6IGlmKCFvLmJpZmYpIG8uYmlmZiA9IDI7IC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRjYXNlICdiaWZmMyc6IGlmKCFvLmJpZmYpIG8uYmlmZiA9IDM7IC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRjYXNlICdiaWZmNCc6IGlmKCFvLmJpZmYpIG8uYmlmZiA9IDQ7IHJldHVybiB3cml0ZV9iaW5hcnlfdHlwZSh3cml0ZV9iaWZmX2J1Zih3YiwgbyksIG8pO1xuXHRcdGNhc2UgJ2JpZmY1JzogaWYoIW8uYmlmZikgby5iaWZmID0gNTsgLyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdGNhc2UgJ2JpZmY4Jzpcblx0XHRjYXNlICd4bGEnOlxuXHRcdGNhc2UgJ3hscyc6IGlmKCFvLmJpZmYpIG8uYmlmZiA9IDg7IHJldHVybiB3cml0ZV9jZmJfdHlwZSh3Yiwgbyk7XG5cdFx0Y2FzZSAneGxzeCc6XG5cdFx0Y2FzZSAneGxzbSc6XG5cdFx0Y2FzZSAneGxhbSc6XG5cdFx0Y2FzZSAneGxzYic6XG5cdFx0Y2FzZSAnb2RzJzogcmV0dXJuIHdyaXRlX3ppcF90eXBlKHdiLCBvKTtcblx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IgKFwiVW5yZWNvZ25pemVkIGJvb2tUeXBlIHxcIiArIG8uYm9va1R5cGUgKyBcInxcIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZV9ib29rX3R5cGUobykge1xuXHRpZihvLmJvb2tUeXBlKSByZXR1cm47XG5cdHZhciBfQlQgPSB7XG5cdFx0XCJ4bHNcIjogXCJiaWZmOFwiLFxuXHRcdFwiaHRtXCI6IFwiaHRtbFwiLFxuXHRcdFwic2xrXCI6IFwic3lsa1wiLFxuXHRcdFwic29jaWFsY2FsY1wiOiBcImV0aFwiLFxuXHRcdFwiU2gzM3RKU1wiOiBcIldURlwiXG5cdH07XG5cdHZhciBleHQgPSBvLmZpbGUuc2xpY2Uoby5maWxlLmxhc3RJbmRleE9mKFwiLlwiKSkudG9Mb3dlckNhc2UoKTtcblx0aWYoZXh0Lm1hdGNoKC9eXFwuW2Etel0rJC8pKSBvLmJvb2tUeXBlID0gZXh0LnNsaWNlKDEpO1xuXHRvLmJvb2tUeXBlID0gX0JUW28uYm9va1R5cGVdIHx8IG8uYm9va1R5cGU7XG59XG5cbmZ1bmN0aW9uIHdyaXRlRmlsZVN5bmMod2IsIGZpbGVuYW1lLCBvcHRzKSB7XG5cdHZhciBvID0gb3B0c3x8e307IG8udHlwZSA9ICdmaWxlJztcblx0by5maWxlID0gZmlsZW5hbWU7XG5cdHJlc29sdmVfYm9va190eXBlKG8pO1xuXHRyZXR1cm4gd3JpdGVTeW5jKHdiLCBvKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVGaWxlQXN5bmMoZmlsZW5hbWUsIHdiLCBvcHRzLCBjYikge1xuXHR2YXIgbyA9IG9wdHN8fHt9OyBvLnR5cGUgPSAnZmlsZSc7XG5cdG8uZmlsZSA9IGZpbGVuYW1lO1xuXHRyZXNvbHZlX2Jvb2tfdHlwZShvKTtcblx0by50eXBlID0gJ2J1ZmZlcic7XG5cdHZhciBfY2IgPSBjYjsgaWYoIShfY2IgaW5zdGFuY2VvZiBGdW5jdGlvbikpIF9jYiA9IChvcHRzKTtcblx0cmV0dXJuIF9mcy53cml0ZUZpbGUoZmlsZW5hbWUsIHdyaXRlU3luYyh3YiwgbyksIF9jYik7XG59XG5mdW5jdGlvbiBtYWtlX2pzb25fcm93KHNoZWV0LCByLCBSLCBjb2xzLCBoZWFkZXIsIGhkciwgZGVuc2UsIG8pIHtcblx0dmFyIHJyID0gZW5jb2RlX3JvdyhSKTtcblx0dmFyIGRlZnZhbCA9IG8uZGVmdmFsLCByYXcgPSBvLnJhdyB8fCAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIFwicmF3XCIpO1xuXHR2YXIgaXNlbXB0eSA9IHRydWU7XG5cdHZhciByb3cgPSAoaGVhZGVyID09PSAxKSA/IFtdIDoge307XG5cdGlmKGhlYWRlciAhPT0gMSkge1xuXHRcdGlmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgdHJ5IHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJvdywgJ19fcm93TnVtX18nLCB7dmFsdWU6UiwgZW51bWVyYWJsZTpmYWxzZX0pOyB9IGNhdGNoKGUpIHsgcm93Ll9fcm93TnVtX18gPSBSOyB9XG5cdFx0ZWxzZSByb3cuX19yb3dOdW1fXyA9IFI7XG5cdH1cblx0aWYoIWRlbnNlIHx8IHNoZWV0W1JdKSBmb3IgKHZhciBDID0gci5zLmM7IEMgPD0gci5lLmM7ICsrQykge1xuXHRcdHZhciB2YWwgPSBkZW5zZSA/IHNoZWV0W1JdW0NdIDogc2hlZXRbY29sc1tDXSArIHJyXTtcblx0XHRpZih2YWwgPT09IHVuZGVmaW5lZCB8fCB2YWwudCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRpZihkZWZ2YWwgPT09IHVuZGVmaW5lZCkgY29udGludWU7XG5cdFx0XHRpZihoZHJbQ10gIT0gbnVsbCkgeyByb3dbaGRyW0NdXSA9IGRlZnZhbDsgfVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXHRcdHZhciB2ID0gdmFsLnY7XG5cdFx0c3dpdGNoKHZhbC50KXtcblx0XHRcdGNhc2UgJ3onOiBpZih2ID09IG51bGwpIGJyZWFrOyBjb250aW51ZTtcblx0XHRcdGNhc2UgJ2UnOiB2ID0gKHYgPT0gMCA/IG51bGwgOiB2b2lkIDApOyBicmVhaztcblx0XHRcdGNhc2UgJ3MnOiBjYXNlICdkJzogY2FzZSAnYic6IGNhc2UgJ24nOiBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcigndW5yZWNvZ25pemVkIHR5cGUgJyArIHZhbC50KTtcblx0XHR9XG5cdFx0aWYoaGRyW0NdICE9IG51bGwpIHtcblx0XHRcdGlmKHYgPT0gbnVsbCkge1xuXHRcdFx0XHRpZih2YWwudCA9PSBcImVcIiAmJiB2ID09PSBudWxsKSByb3dbaGRyW0NdXSA9IG51bGw7XG5cdFx0XHRcdGVsc2UgaWYoZGVmdmFsICE9PSB1bmRlZmluZWQpIHJvd1toZHJbQ11dID0gZGVmdmFsO1xuXHRcdFx0XHRlbHNlIGlmKHJhdyAmJiB2ID09PSBudWxsKSByb3dbaGRyW0NdXSA9IG51bGw7XG5cdFx0XHRcdGVsc2UgY29udGludWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyb3dbaGRyW0NdXSA9IHJhdyB8fCAoby5yYXdOdW1iZXJzICYmIHZhbC50ID09IFwiblwiKSA/IHYgOiBmb3JtYXRfY2VsbCh2YWwsdixvKTtcblx0XHRcdH1cblx0XHRcdGlmKHYgIT0gbnVsbCkgaXNlbXB0eSA9IGZhbHNlO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4geyByb3c6IHJvdywgaXNlbXB0eTogaXNlbXB0eSB9O1xufVxuXG5cbmZ1bmN0aW9uIHNoZWV0X3RvX2pzb24oc2hlZXQsIG9wdHMpIHtcblx0aWYoc2hlZXQgPT0gbnVsbCB8fCBzaGVldFtcIiFyZWZcIl0gPT0gbnVsbCkgcmV0dXJuIFtdO1xuXHR2YXIgdmFsID0ge3Q6J24nLHY6MH0sIGhlYWRlciA9IDAsIG9mZnNldCA9IDEsIGhkciA9IFtdLCB2PTAsIHZ2PVwiXCI7XG5cdHZhciByID0ge3M6e3I6MCxjOjB9LGU6e3I6MCxjOjB9fTtcblx0dmFyIG8gPSBvcHRzIHx8IHt9O1xuXHR2YXIgcmFuZ2UgPSBvLnJhbmdlICE9IG51bGwgPyBvLnJhbmdlIDogc2hlZXRbXCIhcmVmXCJdO1xuXHRpZihvLmhlYWRlciA9PT0gMSkgaGVhZGVyID0gMTtcblx0ZWxzZSBpZihvLmhlYWRlciA9PT0gXCJBXCIpIGhlYWRlciA9IDI7XG5cdGVsc2UgaWYoQXJyYXkuaXNBcnJheShvLmhlYWRlcikpIGhlYWRlciA9IDM7XG5cdGVsc2UgaWYoby5oZWFkZXIgPT0gbnVsbCkgaGVhZGVyID0gMDtcblx0c3dpdGNoKHR5cGVvZiByYW5nZSkge1xuXHRcdGNhc2UgJ3N0cmluZyc6IHIgPSBzYWZlX2RlY29kZV9yYW5nZShyYW5nZSk7IGJyZWFrO1xuXHRcdGNhc2UgJ251bWJlcic6IHIgPSBzYWZlX2RlY29kZV9yYW5nZShzaGVldFtcIiFyZWZcIl0pOyByLnMuciA9IHJhbmdlOyBicmVhaztcblx0XHRkZWZhdWx0OiByID0gcmFuZ2U7XG5cdH1cblx0aWYoaGVhZGVyID4gMCkgb2Zmc2V0ID0gMDtcblx0dmFyIHJyID0gZW5jb2RlX3JvdyhyLnMucik7XG5cdHZhciBjb2xzID0gW107XG5cdHZhciBvdXQgPSBbXTtcblx0dmFyIG91dGkgPSAwLCBjb3VudGVyID0gMDtcblx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheShzaGVldCk7XG5cdHZhciBSID0gci5zLnIsIEMgPSAwLCBDQyA9IDA7XG5cdGlmKGRlbnNlICYmICFzaGVldFtSXSkgc2hlZXRbUl0gPSBbXTtcblx0Zm9yKEMgPSByLnMuYzsgQyA8PSByLmUuYzsgKytDKSB7XG5cdFx0Y29sc1tDXSA9IGVuY29kZV9jb2woQyk7XG5cdFx0dmFsID0gZGVuc2UgPyBzaGVldFtSXVtDXSA6IHNoZWV0W2NvbHNbQ10gKyBycl07XG5cdFx0c3dpdGNoKGhlYWRlcikge1xuXHRcdFx0Y2FzZSAxOiBoZHJbQ10gPSBDIC0gci5zLmM7IGJyZWFrO1xuXHRcdFx0Y2FzZSAyOiBoZHJbQ10gPSBjb2xzW0NdOyBicmVhaztcblx0XHRcdGNhc2UgMzogaGRyW0NdID0gby5oZWFkZXJbQyAtIHIucy5jXTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRpZih2YWwgPT0gbnVsbCkgdmFsID0ge3c6IFwiX19FTVBUWVwiLCB0OiBcInNcIn07XG5cdFx0XHRcdHZ2ID0gdiA9IGZvcm1hdF9jZWxsKHZhbCwgbnVsbCwgbyk7XG5cdFx0XHRcdGNvdW50ZXIgPSAwO1xuXHRcdFx0XHRmb3IoQ0MgPSAwOyBDQyA8IGhkci5sZW5ndGg7ICsrQ0MpIGlmKGhkcltDQ10gPT0gdnYpIHZ2ID0gdiArIFwiX1wiICsgKCsrY291bnRlcik7XG5cdFx0XHRcdGhkcltDXSA9IHZ2O1xuXHRcdH1cblx0fVxuXHRmb3IgKFIgPSByLnMuciArIG9mZnNldDsgUiA8PSByLmUucjsgKytSKSB7XG5cdFx0dmFyIHJvdyA9IG1ha2VfanNvbl9yb3coc2hlZXQsIHIsIFIsIGNvbHMsIGhlYWRlciwgaGRyLCBkZW5zZSwgbyk7XG5cdFx0aWYoKHJvdy5pc2VtcHR5ID09PSBmYWxzZSkgfHwgKGhlYWRlciA9PT0gMSA/IG8uYmxhbmtyb3dzICE9PSBmYWxzZSA6ICEhby5ibGFua3Jvd3MpKSBvdXRbb3V0aSsrXSA9IHJvdy5yb3c7XG5cdH1cblx0b3V0Lmxlbmd0aCA9IG91dGk7XG5cdHJldHVybiBvdXQ7XG59XG5cbnZhciBxcmVnID0gL1wiL2c7XG5mdW5jdGlvbiBtYWtlX2Nzdl9yb3coc2hlZXQsIHIsIFIsIGNvbHMsIGZzLCBycywgRlMsIG8pIHtcblx0dmFyIGlzZW1wdHkgPSB0cnVlO1xuXHR2YXIgcm93ID0gW10sIHR4dCA9IFwiXCIsIHJyID0gZW5jb2RlX3JvdyhSKTtcblx0Zm9yKHZhciBDID0gci5zLmM7IEMgPD0gci5lLmM7ICsrQykge1xuXHRcdGlmICghY29sc1tDXSkgY29udGludWU7XG5cdFx0dmFyIHZhbCA9IG8uZGVuc2UgPyAoc2hlZXRbUl18fFtdKVtDXTogc2hlZXRbY29sc1tDXSArIHJyXTtcblx0XHRpZih2YWwgPT0gbnVsbCkgdHh0ID0gXCJcIjtcblx0XHRlbHNlIGlmKHZhbC52ICE9IG51bGwpIHtcblx0XHRcdGlzZW1wdHkgPSBmYWxzZTtcblx0XHRcdHR4dCA9ICcnKyhvLnJhd051bWJlcnMgJiYgdmFsLnQgPT0gXCJuXCIgPyB2YWwudiA6IGZvcm1hdF9jZWxsKHZhbCwgbnVsbCwgbykpO1xuXHRcdFx0Zm9yKHZhciBpID0gMCwgY2MgPSAwOyBpICE9PSB0eHQubGVuZ3RoOyArK2kpIGlmKChjYyA9IHR4dC5jaGFyQ29kZUF0KGkpKSA9PT0gZnMgfHwgY2MgPT09IHJzIHx8IGNjID09PSAzNCB8fCBvLmZvcmNlUXVvdGVzKSB7dHh0ID0gXCJcXFwiXCIgKyB0eHQucmVwbGFjZShxcmVnLCAnXCJcIicpICsgXCJcXFwiXCI7IGJyZWFrOyB9XG5cdFx0XHRpZih0eHQgPT0gXCJJRFwiKSB0eHQgPSAnXCJJRFwiJztcblx0XHR9IGVsc2UgaWYodmFsLmYgIT0gbnVsbCAmJiAhdmFsLkYpIHtcblx0XHRcdGlzZW1wdHkgPSBmYWxzZTtcblx0XHRcdHR4dCA9ICc9JyArIHZhbC5mOyBpZih0eHQuaW5kZXhPZihcIixcIikgPj0gMCkgdHh0ID0gJ1wiJyArIHR4dC5yZXBsYWNlKHFyZWcsICdcIlwiJykgKyAnXCInO1xuXHRcdH0gZWxzZSB0eHQgPSBcIlwiO1xuXHRcdC8qIE5PVEU6IEV4Y2VsIENTViBkb2VzIG5vdCBzdXBwb3J0IGFycmF5IGZvcm11bGFlICovXG5cdFx0cm93LnB1c2godHh0KTtcblx0fVxuXHRpZihvLmJsYW5rcm93cyA9PT0gZmFsc2UgJiYgaXNlbXB0eSkgcmV0dXJuIG51bGw7XG5cdHJldHVybiByb3cuam9pbihGUyk7XG59XG5cbmZ1bmN0aW9uIHNoZWV0X3RvX2NzdihzaGVldCwgb3B0cykge1xuXHR2YXIgb3V0ID0gW107XG5cdHZhciBvID0gb3B0cyA9PSBudWxsID8ge30gOiBvcHRzO1xuXHRpZihzaGVldCA9PSBudWxsIHx8IHNoZWV0W1wiIXJlZlwiXSA9PSBudWxsKSByZXR1cm4gXCJcIjtcblx0dmFyIHIgPSBzYWZlX2RlY29kZV9yYW5nZShzaGVldFtcIiFyZWZcIl0pO1xuXHR2YXIgRlMgPSBvLkZTICE9PSB1bmRlZmluZWQgPyBvLkZTIDogXCIsXCIsIGZzID0gRlMuY2hhckNvZGVBdCgwKTtcblx0dmFyIFJTID0gby5SUyAhPT0gdW5kZWZpbmVkID8gby5SUyA6IFwiXFxuXCIsIHJzID0gUlMuY2hhckNvZGVBdCgwKTtcblx0dmFyIGVuZHJlZ2V4ID0gbmV3IFJlZ0V4cCgoRlM9PVwifFwiID8gXCJcXFxcfFwiIDogRlMpK1wiKyRcIik7XG5cdHZhciByb3cgPSBcIlwiLCBjb2xzID0gW107XG5cdG8uZGVuc2UgPSBBcnJheS5pc0FycmF5KHNoZWV0KTtcblx0dmFyIGNvbGluZm8gPSBvLnNraXBIaWRkZW4gJiYgc2hlZXRbXCIhY29sc1wiXSB8fCBbXTtcblx0dmFyIHJvd2luZm8gPSBvLnNraXBIaWRkZW4gJiYgc2hlZXRbXCIhcm93c1wiXSB8fCBbXTtcblx0Zm9yKHZhciBDID0gci5zLmM7IEMgPD0gci5lLmM7ICsrQykgaWYgKCEoKGNvbGluZm9bQ118fHt9KS5oaWRkZW4pKSBjb2xzW0NdID0gZW5jb2RlX2NvbChDKTtcblx0Zm9yKHZhciBSID0gci5zLnI7IFIgPD0gci5lLnI7ICsrUikge1xuXHRcdGlmICgocm93aW5mb1tSXXx8e30pLmhpZGRlbikgY29udGludWU7XG5cdFx0cm93ID0gbWFrZV9jc3Zfcm93KHNoZWV0LCByLCBSLCBjb2xzLCBmcywgcnMsIEZTLCBvKTtcblx0XHRpZihyb3cgPT0gbnVsbCkgeyBjb250aW51ZTsgfVxuXHRcdGlmKG8uc3RyaXApIHJvdyA9IHJvdy5yZXBsYWNlKGVuZHJlZ2V4LFwiXCIpO1xuXHRcdG91dC5wdXNoKHJvdyArIFJTKTtcblx0fVxuXHRkZWxldGUgby5kZW5zZTtcblx0cmV0dXJuIG91dC5qb2luKFwiXCIpO1xufVxuXG5mdW5jdGlvbiBzaGVldF90b190eHQoc2hlZXQsIG9wdHMpIHtcblx0aWYoIW9wdHMpIG9wdHMgPSB7fTsgb3B0cy5GUyA9IFwiXFx0XCI7IG9wdHMuUlMgPSBcIlxcblwiO1xuXHR2YXIgcyA9IHNoZWV0X3RvX2NzdihzaGVldCwgb3B0cyk7XG5cdGlmKHR5cGVvZiBjcHRhYmxlID09ICd1bmRlZmluZWQnIHx8IG9wdHMudHlwZSA9PSAnc3RyaW5nJykgcmV0dXJuIHM7XG5cdHZhciBvID0gY3B0YWJsZS51dGlscy5lbmNvZGUoMTIwMCwgcywgJ3N0cicpO1xuXHRyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSgyNTUpICsgU3RyaW5nLmZyb21DaGFyQ29kZSgyNTQpICsgbztcbn1cblxuZnVuY3Rpb24gc2hlZXRfdG9fZm9ybXVsYWUoc2hlZXQpIHtcblx0dmFyIHkgPSBcIlwiLCB4LCB2YWw9XCJcIjtcblx0aWYoc2hlZXQgPT0gbnVsbCB8fCBzaGVldFtcIiFyZWZcIl0gPT0gbnVsbCkgcmV0dXJuIFtdO1xuXHR2YXIgciA9IHNhZmVfZGVjb2RlX3JhbmdlKHNoZWV0WychcmVmJ10pLCByciA9IFwiXCIsIGNvbHMgPSBbXSwgQztcblx0dmFyIGNtZHMgPSBbXTtcblx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheShzaGVldCk7XG5cdGZvcihDID0gci5zLmM7IEMgPD0gci5lLmM7ICsrQykgY29sc1tDXSA9IGVuY29kZV9jb2woQyk7XG5cdGZvcih2YXIgUiA9IHIucy5yOyBSIDw9IHIuZS5yOyArK1IpIHtcblx0XHRyciA9IGVuY29kZV9yb3coUik7XG5cdFx0Zm9yKEMgPSByLnMuYzsgQyA8PSByLmUuYzsgKytDKSB7XG5cdFx0XHR5ID0gY29sc1tDXSArIHJyO1xuXHRcdFx0eCA9IGRlbnNlID8gKHNoZWV0W1JdfHxbXSlbQ10gOiBzaGVldFt5XTtcblx0XHRcdHZhbCA9IFwiXCI7XG5cdFx0XHRpZih4ID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xuXHRcdFx0ZWxzZSBpZih4LkYgIT0gbnVsbCkge1xuXHRcdFx0XHR5ID0geC5GO1xuXHRcdFx0XHRpZigheC5mKSBjb250aW51ZTtcblx0XHRcdFx0dmFsID0geC5mO1xuXHRcdFx0XHRpZih5LmluZGV4T2YoXCI6XCIpID09IC0xKSB5ID0geSArIFwiOlwiICsgeTtcblx0XHRcdH1cblx0XHRcdGlmKHguZiAhPSBudWxsKSB2YWwgPSB4LmY7XG5cdFx0XHRlbHNlIGlmKHgudCA9PSAneicpIGNvbnRpbnVlO1xuXHRcdFx0ZWxzZSBpZih4LnQgPT0gJ24nICYmIHgudiAhPSBudWxsKSB2YWwgPSBcIlwiICsgeC52O1xuXHRcdFx0ZWxzZSBpZih4LnQgPT0gJ2InKSB2YWwgPSB4LnYgPyBcIlRSVUVcIiA6IFwiRkFMU0VcIjtcblx0XHRcdGVsc2UgaWYoeC53ICE9PSB1bmRlZmluZWQpIHZhbCA9IFwiJ1wiICsgeC53O1xuXHRcdFx0ZWxzZSBpZih4LnYgPT09IHVuZGVmaW5lZCkgY29udGludWU7XG5cdFx0XHRlbHNlIGlmKHgudCA9PSAncycpIHZhbCA9IFwiJ1wiICsgeC52O1xuXHRcdFx0ZWxzZSB2YWwgPSBcIlwiK3gudjtcblx0XHRcdGNtZHNbY21kcy5sZW5ndGhdID0geSArIFwiPVwiICsgdmFsO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gY21kcztcbn1cblxuZnVuY3Rpb24gc2hlZXRfYWRkX2pzb24oX3dzLCBqcywgb3B0cykge1xuXHR2YXIgbyA9IG9wdHMgfHwge307XG5cdHZhciBvZmZzZXQgPSArIW8uc2tpcEhlYWRlcjtcblx0dmFyIHdzID0gX3dzIHx8ICh7fSk7XG5cdHZhciBfUiA9IDAsIF9DID0gMDtcblx0aWYod3MgJiYgby5vcmlnaW4gIT0gbnVsbCkge1xuXHRcdGlmKHR5cGVvZiBvLm9yaWdpbiA9PSAnbnVtYmVyJykgX1IgPSBvLm9yaWdpbjtcblx0XHRlbHNlIHtcblx0XHRcdHZhciBfb3JpZ2luID0gdHlwZW9mIG8ub3JpZ2luID09IFwic3RyaW5nXCIgPyBkZWNvZGVfY2VsbChvLm9yaWdpbikgOiBvLm9yaWdpbjtcblx0XHRcdF9SID0gX29yaWdpbi5yOyBfQyA9IF9vcmlnaW4uYztcblx0XHR9XG5cdH1cblx0dmFyIGNlbGw7XG5cdHZhciByYW5nZSA9ICh7czoge2M6MCwgcjowfSwgZToge2M6X0MsIHI6X1IgKyBqcy5sZW5ndGggLSAxICsgb2Zmc2V0fX0pO1xuXHRpZih3c1snIXJlZiddKSB7XG5cdFx0dmFyIF9yYW5nZSA9IHNhZmVfZGVjb2RlX3JhbmdlKHdzWychcmVmJ10pO1xuXHRcdHJhbmdlLmUuYyA9IE1hdGgubWF4KHJhbmdlLmUuYywgX3JhbmdlLmUuYyk7XG5cdFx0cmFuZ2UuZS5yID0gTWF0aC5tYXgocmFuZ2UuZS5yLCBfcmFuZ2UuZS5yKTtcblx0XHRpZihfUiA9PSAtMSkgeyBfUiA9IF9yYW5nZS5lLnIgKyAxOyByYW5nZS5lLnIgPSBfUiArIGpzLmxlbmd0aCAtIDEgKyBvZmZzZXQ7IH1cblx0fSBlbHNlIHtcblx0XHRpZihfUiA9PSAtMSkgeyBfUiA9IDA7IHJhbmdlLmUuciA9IGpzLmxlbmd0aCAtIDEgKyBvZmZzZXQ7IH1cblx0fVxuXHR2YXIgaGRyID0gby5oZWFkZXIgfHwgW10sIEMgPSAwO1xuXG5cdGpzLmZvckVhY2goZnVuY3Rpb24gKEpTLCBSKSB7XG5cdFx0a2V5cyhKUykuZm9yRWFjaChmdW5jdGlvbihrKSB7XG5cdFx0XHRpZigoQz1oZHIuaW5kZXhPZihrKSkgPT0gLTEpIGhkcltDPWhkci5sZW5ndGhdID0gaztcblx0XHRcdHZhciB2ID0gSlNba107XG5cdFx0XHR2YXIgdCA9ICd6Jztcblx0XHRcdHZhciB6ID0gXCJcIjtcblx0XHRcdHZhciByZWYgPSBlbmNvZGVfY2VsbCh7YzpfQyArIEMscjpfUiArIFIgKyBvZmZzZXR9KTtcblx0XHRcdGNlbGwgPSB1dGlscy5zaGVldF9nZXRfY2VsbCh3cywgcmVmKTtcblx0XHRcdGlmKHYgJiYgdHlwZW9mIHYgPT09ICdvYmplY3QnICYmICEodiBpbnN0YW5jZW9mIERhdGUpKXtcblx0XHRcdFx0d3NbcmVmXSA9IHY7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZih0eXBlb2YgdiA9PSAnbnVtYmVyJykgdCA9ICduJztcblx0XHRcdFx0ZWxzZSBpZih0eXBlb2YgdiA9PSAnYm9vbGVhbicpIHQgPSAnYic7XG5cdFx0XHRcdGVsc2UgaWYodHlwZW9mIHYgPT0gJ3N0cmluZycpIHQgPSAncyc7XG5cdFx0XHRcdGVsc2UgaWYodiBpbnN0YW5jZW9mIERhdGUpIHtcblx0XHRcdFx0XHR0ID0gJ2QnO1xuXHRcdFx0XHRcdGlmKCFvLmNlbGxEYXRlcykgeyB0ID0gJ24nOyB2ID0gZGF0ZW51bSh2KTsgfVxuXHRcdFx0XHRcdHogPSAoby5kYXRlTkYgfHwgU1NGLl90YWJsZVsxNF0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgaWYodiA9PT0gbnVsbCAmJiBvLm51bGxFcnJvcikgeyB0ID0gJ2UnOyB2ID0gMDsgfVxuXHRcdFx0XHRpZighY2VsbCkgd3NbcmVmXSA9IGNlbGwgPSAoe3Q6dCwgdjp2fSk7XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdGNlbGwudCA9IHQ7IGNlbGwudiA9IHY7XG5cdFx0XHRcdFx0ZGVsZXRlIGNlbGwudzsgZGVsZXRlIGNlbGwuUjtcblx0XHRcdFx0XHRpZih6KSBjZWxsLnogPSB6O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKHopIGNlbGwueiA9IHo7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xuXHRyYW5nZS5lLmMgPSBNYXRoLm1heChyYW5nZS5lLmMsIF9DICsgaGRyLmxlbmd0aCAtIDEpO1xuXHR2YXIgX19SID0gZW5jb2RlX3JvdyhfUik7XG5cdGlmKG9mZnNldCkgZm9yKEMgPSAwOyBDIDwgaGRyLmxlbmd0aDsgKytDKSB3c1tlbmNvZGVfY29sKEMgKyBfQykgKyBfX1JdID0ge3Q6J3MnLCB2OmhkcltDXX07XG5cdHdzWychcmVmJ10gPSBlbmNvZGVfcmFuZ2UocmFuZ2UpO1xuXHRyZXR1cm4gd3M7XG59XG5mdW5jdGlvbiBqc29uX3RvX3NoZWV0KGpzLCBvcHRzKSB7IHJldHVybiBzaGVldF9hZGRfanNvbihudWxsLCBqcywgb3B0cyk7IH1cblxudmFyIHV0aWxzID0ge1xuXHRlbmNvZGVfY29sOiBlbmNvZGVfY29sLFxuXHRlbmNvZGVfcm93OiBlbmNvZGVfcm93LFxuXHRlbmNvZGVfY2VsbDogZW5jb2RlX2NlbGwsXG5cdGVuY29kZV9yYW5nZTogZW5jb2RlX3JhbmdlLFxuXHRkZWNvZGVfY29sOiBkZWNvZGVfY29sLFxuXHRkZWNvZGVfcm93OiBkZWNvZGVfcm93LFxuXHRzcGxpdF9jZWxsOiBzcGxpdF9jZWxsLFxuXHRkZWNvZGVfY2VsbDogZGVjb2RlX2NlbGwsXG5cdGRlY29kZV9yYW5nZTogZGVjb2RlX3JhbmdlLFxuXHRmb3JtYXRfY2VsbDogZm9ybWF0X2NlbGwsXG5cdGdldF9mb3JtdWxhZTogc2hlZXRfdG9fZm9ybXVsYWUsXG5cdG1ha2VfY3N2OiBzaGVldF90b19jc3YsXG5cdG1ha2VfanNvbjogc2hlZXRfdG9fanNvbixcblx0bWFrZV9mb3JtdWxhZTogc2hlZXRfdG9fZm9ybXVsYWUsXG5cdHNoZWV0X2FkZF9hb2E6IHNoZWV0X2FkZF9hb2EsXG5cdHNoZWV0X2FkZF9qc29uOiBzaGVldF9hZGRfanNvbixcblx0c2hlZXRfYWRkX2RvbTogc2hlZXRfYWRkX2RvbSxcblx0YW9hX3RvX3NoZWV0OiBhb2FfdG9fc2hlZXQsXG5cdGpzb25fdG9fc2hlZXQ6IGpzb25fdG9fc2hlZXQsXG5cdHRhYmxlX3RvX3NoZWV0OiBwYXJzZV9kb21fdGFibGUsXG5cdHRhYmxlX3RvX2Jvb2s6IHRhYmxlX3RvX2Jvb2ssXG5cdHNoZWV0X3RvX2Nzdjogc2hlZXRfdG9fY3N2LFxuXHRzaGVldF90b190eHQ6IHNoZWV0X3RvX3R4dCxcblx0c2hlZXRfdG9fanNvbjogc2hlZXRfdG9fanNvbixcblx0c2hlZXRfdG9faHRtbDogSFRNTF8uZnJvbV9zaGVldCxcblx0c2hlZXRfdG9fZm9ybXVsYWU6IHNoZWV0X3RvX2Zvcm11bGFlLFxuXHRzaGVldF90b19yb3dfb2JqZWN0X2FycmF5OiBzaGVldF90b19qc29uXG59O1xuXG4oZnVuY3Rpb24odXRpbHMpIHtcbnV0aWxzLmNvbnN0cyA9IHV0aWxzLmNvbnN0cyB8fCB7fTtcbmZ1bmN0aW9uIGFkZF9jb25zdHMoUi8qQXJyYXk8YW55PiovKSB7IFIuZm9yRWFjaChmdW5jdGlvbihhKXsgdXRpbHMuY29uc3RzW2FbMF1dID0gYVsxXTsgfSk7IH1cblxuZnVuY3Rpb24gZ2V0X2RlZmF1bHQoeCwgeSwgeikgeyByZXR1cm4geFt5XSAhPSBudWxsID8geFt5XSA6ICh4W3ldID0geik7IH1cblxuLyogZ2V0IGNlbGwsIGNyZWF0aW5nIGEgc3R1YiBpZiBuZWNlc3NhcnkgKi9cbmZ1bmN0aW9uIHdzX2dldF9jZWxsX3N0dWIod3MsIFIsIEMpIHtcblx0LyogQTEgY2VsbCBhZGRyZXNzICovXG5cdGlmKHR5cGVvZiBSID09IFwic3RyaW5nXCIpIHtcblx0XHQvKiBkZW5zZSAqL1xuXHRcdGlmKEFycmF5LmlzQXJyYXkod3MpKSB7XG5cdFx0XHR2YXIgUkMgPSBkZWNvZGVfY2VsbChSKTtcblx0XHRcdGlmKCF3c1tSQy5yXSkgd3NbUkMucl0gPSBbXTtcblx0XHRcdHJldHVybiB3c1tSQy5yXVtSQy5jXSB8fCAod3NbUkMucl1bUkMuY10gPSB7dDoneid9KTtcblx0XHR9XG5cdFx0cmV0dXJuIHdzW1JdIHx8ICh3c1tSXSA9IHt0Oid6J30pO1xuXHR9XG5cdC8qIGNlbGwgYWRkcmVzcyBvYmplY3QgKi9cblx0aWYodHlwZW9mIFIgIT0gXCJudW1iZXJcIikgcmV0dXJuIHdzX2dldF9jZWxsX3N0dWIod3MsIGVuY29kZV9jZWxsKFIpKTtcblx0LyogUiBhbmQgQyBhcmUgMC1iYXNlZCBpbmRpY2VzICovXG5cdHJldHVybiB3c19nZXRfY2VsbF9zdHViKHdzLCBlbmNvZGVfY2VsbCh7cjpSLGM6Q3x8MH0pKTtcbn1cbnV0aWxzLnNoZWV0X2dldF9jZWxsID0gd3NfZ2V0X2NlbGxfc3R1YjtcblxuLyogZmluZCBzaGVldCBpbmRleCBmb3IgZ2l2ZW4gbmFtZSAvIHZhbGlkYXRlIGluZGV4ICovXG5mdW5jdGlvbiB3Yl9zaGVldF9pZHgod2IsIHNoKSB7XG5cdGlmKHR5cGVvZiBzaCA9PSBcIm51bWJlclwiKSB7XG5cdFx0aWYoc2ggPj0gMCAmJiB3Yi5TaGVldE5hbWVzLmxlbmd0aCA+IHNoKSByZXR1cm4gc2g7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgc2hlZXQgIyBcIiArIHNoKTtcblx0fSBlbHNlIGlmKHR5cGVvZiBzaCA9PSBcInN0cmluZ1wiKSB7XG5cdFx0dmFyIGlkeCA9IHdiLlNoZWV0TmFtZXMuaW5kZXhPZihzaCk7XG5cdFx0aWYoaWR4ID4gLTEpIHJldHVybiBpZHg7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgc2hlZXQgbmFtZSB8XCIgKyBzaCArIFwifFwiKTtcblx0fSBlbHNlIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIHNoZWV0IHxcIiArIHNoICsgXCJ8XCIpO1xufVxuXG4vKiBzaW1wbGUgYmxhbmsgd29ya2Jvb2sgb2JqZWN0ICovXG51dGlscy5ib29rX25ldyA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4geyBTaGVldE5hbWVzOiBbXSwgU2hlZXRzOiB7fSB9O1xufTtcblxuLyogYWRkIGEgd29ya3NoZWV0IHRvIHRoZSBlbmQgb2YgYSBnaXZlbiB3b3JrYm9vayAqL1xudXRpbHMuYm9va19hcHBlbmRfc2hlZXQgPSBmdW5jdGlvbih3Yiwgd3MsIG5hbWUpIHtcblx0aWYoIW5hbWUpIGZvcih2YXIgaSA9IDE7IGkgPD0gMHhGRkZGOyArK2ksIG5hbWUgPSB1bmRlZmluZWQpIGlmKHdiLlNoZWV0TmFtZXMuaW5kZXhPZihuYW1lID0gXCJTaGVldFwiICsgaSkgPT0gLTEpIGJyZWFrO1xuXHRpZighbmFtZSB8fCB3Yi5TaGVldE5hbWVzLmxlbmd0aCA+PSAweEZGRkYpIHRocm93IG5ldyBFcnJvcihcIlRvbyBtYW55IHdvcmtzaGVldHNcIik7XG5cdGNoZWNrX3dzX25hbWUobmFtZSk7XG5cdGlmKHdiLlNoZWV0TmFtZXMuaW5kZXhPZihuYW1lKSA+PSAwKSB0aHJvdyBuZXcgRXJyb3IoXCJXb3Jrc2hlZXQgd2l0aCBuYW1lIHxcIiArIG5hbWUgKyBcInwgYWxyZWFkeSBleGlzdHMhXCIpO1xuXG5cdHdiLlNoZWV0TmFtZXMucHVzaChuYW1lKTtcblx0d2IuU2hlZXRzW25hbWVdID0gd3M7XG59O1xuXG4vKiBzZXQgc2hlZXQgdmlzaWJpbGl0eSAodmlzaWJsZS9oaWRkZW4vdmVyeSBoaWRkZW4pICovXG51dGlscy5ib29rX3NldF9zaGVldF92aXNpYmlsaXR5ID0gZnVuY3Rpb24od2IsIHNoLCB2aXMpIHtcblx0Z2V0X2RlZmF1bHQod2IsXCJXb3JrYm9va1wiLHt9KTtcblx0Z2V0X2RlZmF1bHQod2IuV29ya2Jvb2ssXCJTaGVldHNcIixbXSk7XG5cblx0dmFyIGlkeCA9IHdiX3NoZWV0X2lkeCh3Yiwgc2gpO1xuXHQvLyAkRmxvd0lnbm9yZVxuXHRnZXRfZGVmYXVsdCh3Yi5Xb3JrYm9vay5TaGVldHMsaWR4LCB7fSk7XG5cblx0c3dpdGNoKHZpcykge1xuXHRcdGNhc2UgMDogY2FzZSAxOiBjYXNlIDI6IGJyZWFrO1xuXHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihcIkJhZCBzaGVldCB2aXNpYmlsaXR5IHNldHRpbmcgXCIgKyB2aXMpO1xuXHR9XG5cdC8vICRGbG93SWdub3JlXG5cdHdiLldvcmtib29rLlNoZWV0c1tpZHhdLkhpZGRlbiA9IHZpcztcbn07XG5hZGRfY29uc3RzKFtcblx0W1wiU0hFRVRfVklTSUJMRVwiLCAwXSxcblx0W1wiU0hFRVRfSElEREVOXCIsIDFdLFxuXHRbXCJTSEVFVF9WRVJZX0hJRERFTlwiLCAyXVxuXSk7XG5cbi8qIHNldCBudW1iZXIgZm9ybWF0ICovXG51dGlscy5jZWxsX3NldF9udW1iZXJfZm9ybWF0ID0gZnVuY3Rpb24oY2VsbCwgZm10KSB7XG5cdGNlbGwueiA9IGZtdDtcblx0cmV0dXJuIGNlbGw7XG59O1xuXG4vKiBzZXQgY2VsbCBoeXBlcmxpbmsgKi9cbnV0aWxzLmNlbGxfc2V0X2h5cGVybGluayA9IGZ1bmN0aW9uKGNlbGwsIHRhcmdldCwgdG9vbHRpcCkge1xuXHRpZighdGFyZ2V0KSB7XG5cdFx0ZGVsZXRlIGNlbGwubDtcblx0fSBlbHNlIHtcblx0XHRjZWxsLmwgPSAoeyBUYXJnZXQ6IHRhcmdldCB9KTtcblx0XHRpZih0b29sdGlwKSBjZWxsLmwuVG9vbHRpcCA9IHRvb2x0aXA7XG5cdH1cblx0cmV0dXJuIGNlbGw7XG59O1xudXRpbHMuY2VsbF9zZXRfaW50ZXJuYWxfbGluayA9IGZ1bmN0aW9uKGNlbGwsIHJhbmdlLCB0b29sdGlwKSB7IHJldHVybiB1dGlscy5jZWxsX3NldF9oeXBlcmxpbmsoY2VsbCwgXCIjXCIgKyByYW5nZSwgdG9vbHRpcCk7IH07XG5cbi8qIGFkZCB0byBjZWxsIGNvbW1lbnRzICovXG51dGlscy5jZWxsX2FkZF9jb21tZW50ID0gZnVuY3Rpb24oY2VsbCwgdGV4dCwgYXV0aG9yKSB7XG5cdGlmKCFjZWxsLmMpIGNlbGwuYyA9IFtdO1xuXHRjZWxsLmMucHVzaCh7dDp0ZXh0LCBhOmF1dGhvcnx8XCJTaGVldEpTXCJ9KTtcbn07XG5cbi8qIHNldCBhcnJheSBmb3JtdWxhIGFuZCBmbHVzaCByZWxhdGVkIGNlbGxzICovXG51dGlscy5zaGVldF9zZXRfYXJyYXlfZm9ybXVsYSA9IGZ1bmN0aW9uKHdzLCByYW5nZSwgZm9ybXVsYSkge1xuXHR2YXIgcm5nID0gdHlwZW9mIHJhbmdlICE9IFwic3RyaW5nXCIgPyByYW5nZSA6IHNhZmVfZGVjb2RlX3JhbmdlKHJhbmdlKTtcblx0dmFyIHJuZ3N0ciA9IHR5cGVvZiByYW5nZSA9PSBcInN0cmluZ1wiID8gcmFuZ2UgOiBlbmNvZGVfcmFuZ2UocmFuZ2UpO1xuXHRmb3IodmFyIFIgPSBybmcucy5yOyBSIDw9IHJuZy5lLnI7ICsrUikgZm9yKHZhciBDID0gcm5nLnMuYzsgQyA8PSBybmcuZS5jOyArK0MpIHtcblx0XHR2YXIgY2VsbCA9IHdzX2dldF9jZWxsX3N0dWIod3MsIFIsIEMpO1xuXHRcdGNlbGwudCA9ICduJztcblx0XHRjZWxsLkYgPSBybmdzdHI7XG5cdFx0ZGVsZXRlIGNlbGwudjtcblx0XHRpZihSID09IHJuZy5zLnIgJiYgQyA9PSBybmcucy5jKSBjZWxsLmYgPSBmb3JtdWxhO1xuXHR9XG5cdHJldHVybiB3cztcbn07XG5cbnJldHVybiB1dGlscztcbn0pKHV0aWxzKTtcblxuaWYoaGFzX2J1ZiAmJiB0eXBlb2YgcmVxdWlyZSAhPSAndW5kZWZpbmVkJykgKGZ1bmN0aW9uKCkge1xuXHR2YXIgUmVhZGFibGUgPSByZXF1aXJlKCdzdHJlYW0nKS5SZWFkYWJsZTtcblxuXHR2YXIgd3JpdGVfY3N2X3N0cmVhbSA9IGZ1bmN0aW9uKHNoZWV0LCBvcHRzKSB7XG5cdFx0dmFyIHN0cmVhbSA9IFJlYWRhYmxlKCk7XG5cdFx0dmFyIG8gPSBvcHRzID09IG51bGwgPyB7fSA6IG9wdHM7XG5cdFx0aWYoc2hlZXQgPT0gbnVsbCB8fCBzaGVldFtcIiFyZWZcIl0gPT0gbnVsbCkgeyBzdHJlYW0ucHVzaChudWxsKTsgcmV0dXJuIHN0cmVhbTsgfVxuXHRcdHZhciByID0gc2FmZV9kZWNvZGVfcmFuZ2Uoc2hlZXRbXCIhcmVmXCJdKTtcblx0XHR2YXIgRlMgPSBvLkZTICE9PSB1bmRlZmluZWQgPyBvLkZTIDogXCIsXCIsIGZzID0gRlMuY2hhckNvZGVBdCgwKTtcblx0XHR2YXIgUlMgPSBvLlJTICE9PSB1bmRlZmluZWQgPyBvLlJTIDogXCJcXG5cIiwgcnMgPSBSUy5jaGFyQ29kZUF0KDApO1xuXHRcdHZhciBlbmRyZWdleCA9IG5ldyBSZWdFeHAoKEZTPT1cInxcIiA/IFwiXFxcXHxcIiA6IEZTKStcIiskXCIpO1xuXHRcdHZhciByb3cgPSBcIlwiLCBjb2xzID0gW107XG5cdFx0by5kZW5zZSA9IEFycmF5LmlzQXJyYXkoc2hlZXQpO1xuXHRcdHZhciBjb2xpbmZvID0gby5za2lwSGlkZGVuICYmIHNoZWV0W1wiIWNvbHNcIl0gfHwgW107XG5cdFx0dmFyIHJvd2luZm8gPSBvLnNraXBIaWRkZW4gJiYgc2hlZXRbXCIhcm93c1wiXSB8fCBbXTtcblx0XHRmb3IodmFyIEMgPSByLnMuYzsgQyA8PSByLmUuYzsgKytDKSBpZiAoISgoY29saW5mb1tDXXx8e30pLmhpZGRlbikpIGNvbHNbQ10gPSBlbmNvZGVfY29sKEMpO1xuXHRcdHZhciBSID0gci5zLnI7XG5cdFx0dmFyIEJPTSA9IGZhbHNlO1xuXHRcdHN0cmVhbS5fcmVhZCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYoIUJPTSkgeyBCT00gPSB0cnVlOyByZXR1cm4gc3RyZWFtLnB1c2goXCJcXHVGRUZGXCIpOyB9XG5cdFx0XHR3aGlsZShSIDw9IHIuZS5yKSB7XG5cdFx0XHRcdCsrUjtcblx0XHRcdFx0aWYgKChyb3dpbmZvW1ItMV18fHt9KS5oaWRkZW4pIGNvbnRpbnVlO1xuXHRcdFx0XHRyb3cgPSBtYWtlX2Nzdl9yb3coc2hlZXQsIHIsIFItMSwgY29scywgZnMsIHJzLCBGUywgbyk7XG5cdFx0XHRcdGlmKHJvdyAhPSBudWxsKSB7XG5cdFx0XHRcdFx0aWYoby5zdHJpcCkgcm93ID0gcm93LnJlcGxhY2UoZW5kcmVnZXgsXCJcIik7XG5cdFx0XHRcdFx0c3RyZWFtLnB1c2gocm93ICsgUlMpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZihSID4gci5lLnIpIHJldHVybiBzdHJlYW0ucHVzaChudWxsKTtcblx0XHR9O1xuXHRcdHJldHVybiBzdHJlYW07XG5cdH07XG5cblx0dmFyIHdyaXRlX2h0bWxfc3RyZWFtID0gZnVuY3Rpb24od3MsIG9wdHMpIHtcblx0XHR2YXIgc3RyZWFtID0gUmVhZGFibGUoKTtcblxuXHRcdHZhciBvID0gb3B0cyB8fCB7fTtcblx0XHR2YXIgaGVhZGVyID0gby5oZWFkZXIgIT0gbnVsbCA/IG8uaGVhZGVyIDogSFRNTF8uQkVHSU47XG5cdFx0dmFyIGZvb3RlciA9IG8uZm9vdGVyICE9IG51bGwgPyBvLmZvb3RlciA6IEhUTUxfLkVORDtcblx0XHRzdHJlYW0ucHVzaChoZWFkZXIpO1xuXHRcdHZhciByID0gZGVjb2RlX3JhbmdlKHdzWychcmVmJ10pO1xuXHRcdG8uZGVuc2UgPSBBcnJheS5pc0FycmF5KHdzKTtcblx0XHRzdHJlYW0ucHVzaChIVE1MXy5fcHJlYW1ibGUod3MsIHIsIG8pKTtcblx0XHR2YXIgUiA9IHIucy5yO1xuXHRcdHZhciBlbmQgPSBmYWxzZTtcblx0XHRzdHJlYW0uX3JlYWQgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmKFIgPiByLmUucikge1xuXHRcdFx0XHRpZighZW5kKSB7IGVuZCA9IHRydWU7IHN0cmVhbS5wdXNoKFwiPC90YWJsZT5cIiArIGZvb3Rlcik7IH1cblx0XHRcdFx0cmV0dXJuIHN0cmVhbS5wdXNoKG51bGwpO1xuXHRcdFx0fVxuXHRcdFx0d2hpbGUoUiA8PSByLmUucikge1xuXHRcdFx0XHRzdHJlYW0ucHVzaChIVE1MXy5fcm93KHdzLCByLCBSLCBvKSk7XG5cdFx0XHRcdCsrUjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRyZXR1cm4gc3RyZWFtO1xuXHR9O1xuXG5cdHZhciB3cml0ZV9qc29uX3N0cmVhbSA9IGZ1bmN0aW9uKHNoZWV0LCBvcHRzKSB7XG5cdFx0dmFyIHN0cmVhbSA9IFJlYWRhYmxlKHtvYmplY3RNb2RlOnRydWV9KTtcblxuXHRcdGlmKHNoZWV0ID09IG51bGwgfHwgc2hlZXRbXCIhcmVmXCJdID09IG51bGwpIHsgc3RyZWFtLnB1c2gobnVsbCk7IHJldHVybiBzdHJlYW07IH1cblx0XHR2YXIgdmFsID0ge3Q6J24nLHY6MH0sIGhlYWRlciA9IDAsIG9mZnNldCA9IDEsIGhkciA9IFtdLCB2PTAsIHZ2PVwiXCI7XG5cdFx0dmFyIHIgPSB7czp7cjowLGM6MH0sZTp7cjowLGM6MH19O1xuXHRcdHZhciBvID0gb3B0cyB8fCB7fTtcblx0XHR2YXIgcmFuZ2UgPSBvLnJhbmdlICE9IG51bGwgPyBvLnJhbmdlIDogc2hlZXRbXCIhcmVmXCJdO1xuXHRcdGlmKG8uaGVhZGVyID09PSAxKSBoZWFkZXIgPSAxO1xuXHRcdGVsc2UgaWYoby5oZWFkZXIgPT09IFwiQVwiKSBoZWFkZXIgPSAyO1xuXHRcdGVsc2UgaWYoQXJyYXkuaXNBcnJheShvLmhlYWRlcikpIGhlYWRlciA9IDM7XG5cdFx0c3dpdGNoKHR5cGVvZiByYW5nZSkge1xuXHRcdFx0Y2FzZSAnc3RyaW5nJzogciA9IHNhZmVfZGVjb2RlX3JhbmdlKHJhbmdlKTsgYnJlYWs7XG5cdFx0XHRjYXNlICdudW1iZXInOiByID0gc2FmZV9kZWNvZGVfcmFuZ2Uoc2hlZXRbXCIhcmVmXCJdKTsgci5zLnIgPSByYW5nZTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiByID0gcmFuZ2U7XG5cdFx0fVxuXHRcdGlmKGhlYWRlciA+IDApIG9mZnNldCA9IDA7XG5cdFx0dmFyIHJyID0gZW5jb2RlX3JvdyhyLnMucik7XG5cdFx0dmFyIGNvbHMgPSBbXTtcblx0XHR2YXIgY291bnRlciA9IDA7XG5cdFx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheShzaGVldCk7XG5cdFx0dmFyIFIgPSByLnMuciwgQyA9IDAsIENDID0gMDtcblx0XHRpZihkZW5zZSAmJiAhc2hlZXRbUl0pIHNoZWV0W1JdID0gW107XG5cdFx0Zm9yKEMgPSByLnMuYzsgQyA8PSByLmUuYzsgKytDKSB7XG5cdFx0XHRjb2xzW0NdID0gZW5jb2RlX2NvbChDKTtcblx0XHRcdHZhbCA9IGRlbnNlID8gc2hlZXRbUl1bQ10gOiBzaGVldFtjb2xzW0NdICsgcnJdO1xuXHRcdFx0c3dpdGNoKGhlYWRlcikge1xuXHRcdFx0XHRjYXNlIDE6IGhkcltDXSA9IEMgLSByLnMuYzsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMjogaGRyW0NdID0gY29sc1tDXTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMzogaGRyW0NdID0gby5oZWFkZXJbQyAtIHIucy5jXTsgYnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0aWYodmFsID09IG51bGwpIHZhbCA9IHt3OiBcIl9fRU1QVFlcIiwgdDogXCJzXCJ9O1xuXHRcdFx0XHRcdHZ2ID0gdiA9IGZvcm1hdF9jZWxsKHZhbCwgbnVsbCwgbyk7XG5cdFx0XHRcdFx0Y291bnRlciA9IDA7XG5cdFx0XHRcdFx0Zm9yKENDID0gMDsgQ0MgPCBoZHIubGVuZ3RoOyArK0NDKSBpZihoZHJbQ0NdID09IHZ2KSB2diA9IHYgKyBcIl9cIiArICgrK2NvdW50ZXIpO1xuXHRcdFx0XHRcdGhkcltDXSA9IHZ2O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRSID0gci5zLnIgKyBvZmZzZXQ7XG5cdFx0c3RyZWFtLl9yZWFkID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZihSID4gci5lLnIpIHJldHVybiBzdHJlYW0ucHVzaChudWxsKTtcblx0XHRcdHdoaWxlKFIgPD0gci5lLnIpIHtcblx0XHRcdFx0Ly9pZiAoKHJvd2luZm9bUi0xXXx8e30pLmhpZGRlbikgY29udGludWU7XG5cdFx0XHRcdHZhciByb3cgPSBtYWtlX2pzb25fcm93KHNoZWV0LCByLCBSLCBjb2xzLCBoZWFkZXIsIGhkciwgZGVuc2UsIG8pO1xuXHRcdFx0XHQrK1I7XG5cdFx0XHRcdGlmKChyb3cuaXNlbXB0eSA9PT0gZmFsc2UpIHx8IChoZWFkZXIgPT09IDEgPyBvLmJsYW5rcm93cyAhPT0gZmFsc2UgOiAhIW8uYmxhbmtyb3dzKSkge1xuXHRcdFx0XHRcdHN0cmVhbS5wdXNoKHJvdy5yb3cpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRyZXR1cm4gc3RyZWFtO1xuXHR9O1xuXG5cdFhMU1guc3RyZWFtID0ge1xuXHRcdHRvX2pzb246IHdyaXRlX2pzb25fc3RyZWFtLFxuXHRcdHRvX2h0bWw6IHdyaXRlX2h0bWxfc3RyZWFtLFxuXHRcdHRvX2Nzdjogd3JpdGVfY3N2X3N0cmVhbVxuXHR9O1xufSkoKTtcblxuaWYodHlwZW9mIHBhcnNlX3hsc2NmYiAhPT0gXCJ1bmRlZmluZWRcIikgWExTWC5wYXJzZV94bHNjZmIgPSBwYXJzZV94bHNjZmI7XG5YTFNYLnBhcnNlX3ppcCA9IHBhcnNlX3ppcDtcblhMU1gucmVhZCA9IHJlYWRTeW5jOyAvL3hsc3JlYWRcblhMU1gucmVhZEZpbGUgPSByZWFkRmlsZVN5bmM7IC8vcmVhZEZpbGVcblhMU1gucmVhZEZpbGVTeW5jID0gcmVhZEZpbGVTeW5jO1xuWExTWC53cml0ZSA9IHdyaXRlU3luYztcblhMU1gud3JpdGVGaWxlID0gd3JpdGVGaWxlU3luYztcblhMU1gud3JpdGVGaWxlU3luYyA9IHdyaXRlRmlsZVN5bmM7XG5YTFNYLndyaXRlRmlsZUFzeW5jID0gd3JpdGVGaWxlQXN5bmM7XG5YTFNYLnV0aWxzID0gdXRpbHM7XG5YTFNYLlNTRiA9IFNTRjtcbmlmKHR5cGVvZiBDRkIgIT09IFwidW5kZWZpbmVkXCIpIFhMU1guQ0ZCID0gQ0ZCO1xufVxuLypnbG9iYWwgZGVmaW5lICovXG5pZih0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIG1ha2VfeGxzeF9saWIoZXhwb3J0cyk7XG5lbHNlIGlmKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSBtYWtlX3hsc3hfbGliKG1vZHVsZS5leHBvcnRzKTtcbmVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSBkZWZpbmUoJ3hsc3gnLCBmdW5jdGlvbigpIHsgaWYoIVhMU1gudmVyc2lvbikgbWFrZV94bHN4X2xpYihYTFNYKTsgcmV0dXJuIFhMU1g7IH0pO1xuZWxzZSBtYWtlX3hsc3hfbGliKFhMU1gpO1xuLyogTk9URTogdGhlIGZvbGxvd2luZyBleHRyYSBsaW5lIGlzIG5lZWRlZCBmb3IgXCJMaWdodG5pbmcgTG9ja2VyIFNlcnZpY2VcIiAqL1xuaWYodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgIXdpbmRvdy5YTFNYKSB3aW5kb3cuWExTWCA9IFhMU1g7XG4vKmV4cG9ydGVkIFhMUywgT0RTICovXG52YXIgWExTID0gWExTWCwgT0RTID0gWExTWDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/xlsx/xlsx.js\n");

/***/ })

}]);